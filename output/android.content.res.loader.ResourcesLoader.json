{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/res/loader/ResourcesLoader.java",
  "packageName" : "android.content.res.loader",
  "className" : "ResourcesLoader",
  "comment" : "\n * A container for supplying {@link ResourcesProvider ResourcesProvider(s)} to {@link Resources}\n * objects.\n *\n * <p>{@link ResourcesLoader ResourcesLoader(s)} are added to Resources objects to supply\n * additional resources and assets or modify the values of existing resources and assets. Multiple\n * Resources objects can share the same ResourcesLoaders and ResourcesProviders. Changes to the list\n * of {@link ResourcesProvider ResourcesProvider(s)} a loader contains propagates to all Resources\n * objects that use the loader.\n *\n * <p>Loaders must be added to Resources objects in increasing precedence order. A loader will\n * override the resources and assets of loaders added before itself.\n *\n * <p>Providers retrieved with {@link #getProviders()} are listed in increasing precedence order. A\n * provider will override the resources and assets of providers listed before itself.\n *\n * <p>Modifying the list of providers a loader contains or the list of loaders a Resources object\n * contains can cause lock contention with the UI thread. APIs that modify the lists of loaders or\n * providers should only be used on the UI thread. Providers can be instantiated on any thread\n * without causing lock contention.\n ",
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApkAssets",
    "type" : "ApkAssets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousProviders",
    "type" : "ResourcesProvider[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviders",
    "type" : "ResourcesProvider[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangeCallbacks",
    "type" : "ArrayMap<WeakReference<Object>, UpdateCallbacks>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<ResourcesProvider> getProviders()",
    "returnType" : "List<ResourcesProvider>",
    "comment" : "\n     * Retrieves the list of providers loaded into this instance. Providers are listed in increasing\n     * precedence order. A provider will override the values of providers listed before itself.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addProvider(@NonNull ResourcesProvider resourcesProvider)",
    "returnType" : "void",
    "comment" : "\n     * Appends a provider to the end of the provider list. If the provider is already present in the\n     * loader list, the list will not be modified.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * provider changes.\n     *\n     * @param resourcesProvider the provider to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeProvider(@NonNull ResourcesProvider resourcesProvider)",
    "returnType" : "void",
    "comment" : "\n     * Removes a provider from the provider list. If the provider is not present in the provider\n     * list, the list will not be modified.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * provider changes.\n     *\n     * @param resourcesProvider the provider to remove\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProviders(@NonNull List<ResourcesProvider> resourcesProviders)",
    "returnType" : "void",
    "comment" : "\n     * Sets the list of providers.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * provider changes.\n     *\n     * @param resourcesProviders the new providers\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearProviders()",
    "returnType" : "void",
    "comment" : "\n     * Removes all {@link ResourcesProvider ResourcesProvider(s)}.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * provider changes.\n     ",
    "links" : [ "android.content.res.loader.ResourcesProvider" ]
  }, {
    "name" : "public List<ApkAssets> getApkAssets()",
    "returnType" : "List<ApkAssets>",
    "comment" : "\n     * Retrieves the list of {@link ApkAssets} used by the providers.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.res.ApkAssets" ]
  }, {
    "name" : "public void registerOnProvidersChangedCallback(@NonNull Object instance, @NonNull UpdateCallbacks callbacks)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be invoked when {@link ResourcesProvider ResourcesProvider(s)}\n     * change.\n     * @param instance the instance tied to the callback\n     * @param callbacks the callback to invoke\n     *\n     * @hide\n     ",
    "links" : [ "android.content.res.loader.ResourcesProvider" ]
  }, {
    "name" : "public void unregisterOnProvidersChangedCallback(@NonNull Object instance)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously registered callback.\n     * @param instance the instance tied to the callback\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean arrayEquals(ResourcesProvider[] a1, ResourcesProvider[] a2)",
    "returnType" : "boolean",
    "comment" : " Returns whether the arrays contain the same provider instances in the same order. ",
    "links" : [ ]
  }, {
    "name" : "private void notifyProvidersChangedLocked()",
    "returnType" : "void",
    "comment" : "\n     * Invokes registered callbacks when the list of {@link ResourcesProvider} instances this loader\n     * uses changes.\n     ",
    "links" : [ "android.content.res.loader.ResourcesProvider" ]
  } ],
  "variableNames" : [ "mLock", "mApkAssets", "mPreviousProviders", "mProviders", "mChangeCallbacks" ],
  "methodNames" : [ "public List<ResourcesProvider> getProviders()", "public void addProvider(@NonNull ResourcesProvider resourcesProvider)", "public void removeProvider(@NonNull ResourcesProvider resourcesProvider)", "public void setProviders(@NonNull List<ResourcesProvider> resourcesProviders)", "public void clearProviders()", "public List<ApkAssets> getApkAssets()", "public void registerOnProvidersChangedCallback(@NonNull Object instance, @NonNull UpdateCallbacks callbacks)", "public void unregisterOnProvidersChangedCallback(@NonNull Object instance)", "private static boolean arrayEquals(ResourcesProvider[] a1, ResourcesProvider[] a2)", "private void notifyProvidersChangedLocked()" ]
}