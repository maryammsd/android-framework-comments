{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMNodeProxy.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMNodeProxyImplementation",
  "comment" : " Inner class to support getDOMImplementation.\n   ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public DocumentType createDocumentType(String qualifiedName, String publicId, String systemId)",
    "returnType" : "DocumentType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Document createDocument(String namespaceURI, String qualfiedName, DocumentType doctype)",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFeature(String feature, String version)",
    "returnType" : "boolean",
    "comment" : " Ask whether we support a given DOM feature.\n     * \n     * In fact, we do not _fully_ support any DOM feature -- we're a\n     * read-only subset -- so arguably we should always return false.\n     * On the other hand, it may be more practically useful to return\n     * true and simply treat the whole DOM as read-only, failing on the\n     * methods we can't support. I'm not sure which would be more useful\n     * to the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "\n     *  This method returns a specialized object which implements the\n     * specialized APIs of the specified feature and version. The\n     * specialized object may also be obtained by using binding-specific\n     * casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations\n.\n     * @param feature The name of the feature requested (case-insensitive).\n     * @param version  This is the version number of the feature to test. If\n     *   the version is <code>null</code> or the empty string, supporting\n     *   any version of the feature will cause the method to return an\n     *   object that supports at least one version of the feature.\n     * @return  Returns an object which implements the specialized APIs of\n     *   the specified feature and version, if any, or <code>null</code> if\n     *   there is no object which implements interfaces associated with that\n     *   feature. If the <code>DOMObject</code> returned by this method\n     *   implements the <code>Node</code> interface, it must delegate to the\n     *   primary core <code>Node</code> and not return results inconsistent\n     *   with the primary core <code>Node</code> such as attributes,\n     *   childNodes, etc.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DocumentType createDocumentType(String qualifiedName, String publicId, String systemId)", "public Document createDocument(String namespaceURI, String qualfiedName, DocumentType doctype)", "public boolean hasFeature(String feature, String version)", "public Object getFeature(String feature, String version)" ],
  "variableNames" : [ ]
}