{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/PixelCopy.java",
  "packageName" : "android.view",
  "className" : "Builder",
  "comment" : "\n         * A builder to create the complete PixelCopy request, which is then executed by calling\n         * {@link #request(Request, Executor, Consumer)} with the built request returned from\n         * {@link #build()}\n         ",
  "links" : [ "#build()", "#request(Request" ],
  "variables" : [ {
    "name" : "mRequest",
    "type" : "Request",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Builder ofWindow(@NonNull Window source)",
    "returnType" : "Builder",
    "comment" : "\n             * Creates a PixelCopy Builder for the given {@link Window}\n             * @param source The Window to copy from\n             * @return A {@link Builder} builder to set the optional params & build the request\n             ",
    "links" : [ "Builder", "android.view.Window" ]
  }, {
    "name" : "public static Builder ofWindow(@NonNull View source)",
    "returnType" : "Builder",
    "comment" : "\n             * Creates a PixelCopy Builder for the {@link Window} that the given {@link View} is\n             * attached to.\n             *\n             * Note that this copy request is not cropped to the area the View occupies by default.\n             * If that behavior is desired, use {@link View#getLocationInWindow(int[])} combined\n             * with {@link Builder#setSourceRect(Rect)} to set a crop area to restrict the copy\n             * operation.\n             *\n             * @param source A View that {@link View#isAttachedToWindow() is attached} to a window\n             *               that will be used to retrieve the window to copy from.\n             * @return A {@link Builder} builder to set the optional params & build the request\n             ",
    "links" : [ "android.view.View#getLocationInWindow(int", "android.view.View#isAttachedToWindow()", "Builder", "android.view.View", "android.view.Window", "#setSourceRect(Rect)" ]
  }, {
    "name" : "public static Builder ofSurface(@NonNull Surface source)",
    "returnType" : "Builder",
    "comment" : "\n             * Creates a PixelCopy Builder for the given {@link Surface}\n             *\n             * @param source The Surface to copy from. Must be {@link Surface#isValid() valid}.\n             * @return A {@link Builder} builder to set the optional params & build the request\n             ",
    "links" : [ "android.view.Surface", "Builder", "android.view.Surface#isValid()" ]
  }, {
    "name" : "public static Builder ofSurface(@NonNull SurfaceView source)",
    "returnType" : "Builder",
    "comment" : "\n             * Creates a PixelCopy Builder for the {@link Surface} belonging to the\n             * given {@link SurfaceView}\n             *\n             * @param source The SurfaceView to copy from. The backing surface must be\n             *               {@link Surface#isValid() valid}\n             * @return A {@link Builder} builder to set the optional params & build the request\n             ",
    "links" : [ "android.view.SurfaceView", "android.view.Surface", "Builder", "android.view.Surface#isValid()" ]
  }, {
    "name" : "private void requireNotBuilt()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setSourceRect(@Nullable Rect srcRect)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the region of the source to copy from. By default, the entire source is copied\n             * to the output. If only a subset of the source is necessary to be copied, specifying\n             * a srcRect will improve performance by reducing\n             * the amount of data being copied.\n             *\n             * @param srcRect The area of the source to read from. Null or empty will be treated to\n             *                mean the entire source\n             * @return this\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDestinationBitmap(@Nullable Bitmap destination)",
    "returnType" : "Builder",
    "comment" : "\n             * Specifies the output bitmap in which to store the result. By default, a Bitmap of\n             * format {@link android.graphics.Bitmap.Config#ARGB_8888} with a width & height\n             * matching that of the {@link #setSourceRect(Rect) source area} will be created to\n             * place the result.\n             *\n             * @param destination The bitmap to store the result, or null to have a bitmap\n             *                    automatically created of the appropriate size. If not null, must\n             *                    not be {@link Bitmap#isRecycled() recycled} and must be\n             *                    {@link Bitmap#isMutable() mutable}.\n             * @return this\n             ",
    "links" : [ "android.graphics.Bitmap#isMutable()", "android.graphics.Bitmap#isRecycled()", "android.graphics.Bitmap.Config#ARGB_8888", "#setSourceRect(Rect)" ]
  }, {
    "name" : "public Request build()",
    "returnType" : "Request",
    "comment" : "\n             * @return The built {@link PixelCopy.Request}\n             ",
    "links" : [ "PixelCopy.Request" ]
  } ],
  "methodNames" : [ "public static Builder ofWindow(@NonNull Window source)", "public static Builder ofWindow(@NonNull View source)", "public static Builder ofSurface(@NonNull Surface source)", "public static Builder ofSurface(@NonNull SurfaceView source)", "private void requireNotBuilt()", "public Builder setSourceRect(@Nullable Rect srcRect)", "public Builder setDestinationBitmap(@Nullable Bitmap destination)", "public Request build()" ],
  "variableNames" : [ "mRequest" ]
}