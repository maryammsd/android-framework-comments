{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ViewGroup.java",
  "packageName" : "android.view",
  "className" : "LayoutParams",
  "comment" : "\n     * LayoutParams are used by views to tell their parents how they want to be\n     * laid out. See\n     * {@link android.R.styleable#ViewGroup_Layout ViewGroup Layout Attributes}\n     * for a list of all child view attributes that this class supports.\n     *\n     * <p>\n     * The base LayoutParams class just describes how big the view wants to be\n     * for both width and height. For each dimension, it can specify one of:\n     * <ul>\n     * <li>FILL_PARENT (renamed MATCH_PARENT in API Level 8 and higher), which\n     * means that the view wants to be as big as its parent (minus padding)\n     * <li> WRAP_CONTENT, which means that the view wants to be just big enough\n     * to enclose its content (plus padding)\n     * <li> an exact number\n     * </ul>\n     * There are subclasses of LayoutParams for different subclasses of\n     * ViewGroup. For example, AbsoluteLayout has its own subclass of\n     * LayoutParams which adds an X and Y value.</p>\n     *\n     * <div class=\"special reference\">\n     * <h3>Developer Guides</h3>\n     * <p>For more information about creating user interface layouts, read the\n     * <a href=\"{@docRoot}guide/topics/ui/declaring-layout.html\">XML Layouts</a> developer\n     * guide.</p></div>\n     *\n     * @attr ref android.R.styleable#ViewGroup_Layout_layout_height\n     * @attr ref android.R.styleable#ViewGroup_Layout_layout_width\n     ",
  "links" : [ "android.R.styleable#ViewGroup_Layout" ],
  "variables" : [ {
    "name" : "FILL_PARENT",
    "type" : "int",
    "comment" : "\n         * Special value for the height or width requested by a View.\n         * FILL_PARENT means that the view wants to be as big as its parent,\n         * minus the parent's padding, if any. This value is deprecated\n         * starting in API Level 8 and replaced by {@link #MATCH_PARENT}.\n         ",
    "links" : [ "#MATCH_PARENT" ]
  }, {
    "name" : "MATCH_PARENT",
    "type" : "int",
    "comment" : "\n         * Special value for the height or width requested by a View.\n         * MATCH_PARENT means that the view wants to be as big as its parent,\n         * minus the parent's padding, if any. Introduced in API Level 8.\n         ",
    "links" : [ ]
  }, {
    "name" : "WRAP_CONTENT",
    "type" : "int",
    "comment" : "\n         * Special value for the height or width requested by a View.\n         * WRAP_CONTENT means that the view wants to be just large enough to fit\n         * its own internal content, taking its own padding into account.\n         ",
    "links" : [ ]
  }, {
    "name" : "width",
    "type" : "int",
    "comment" : "\n         * Information about how wide the view wants to be. Can be one of the\n         * constants FILL_PARENT (replaced by MATCH_PARENT\n         * in API Level 8) or WRAP_CONTENT, or an exact size.\n         ",
    "links" : [ ]
  }, {
    "name" : "height",
    "type" : "int",
    "comment" : "\n         * Information about how tall the view wants to be. Can be one of the\n         * constants FILL_PARENT (replaced by MATCH_PARENT\n         * in API Level 8) or WRAP_CONTENT, or an exact size.\n         ",
    "links" : [ ]
  }, {
    "name" : "layoutAnimationParameters",
    "type" : "LayoutAnimationController.AnimationParameters",
    "comment" : "\n         * Used to animate layouts.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr)",
    "returnType" : "void",
    "comment" : "\n         * Extracts the layout parameters from the supplied attributes.\n         *\n         * @param a the style attributes to extract the parameters from\n         * @param widthAttr the identifier of the width attribute\n         * @param heightAttr the identifier of the height attribute\n         ",
    "links" : [ ]
  }, {
    "name" : "public void resolveLayoutDirection(int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n         * Resolve layout parameters depending on the layout direction. Subclasses that care about\n         * layoutDirection changes should override this method. The default implementation does\n         * nothing.\n         *\n         * @param layoutDirection the direction of the layout\n         *\n         * {@link View#LAYOUT_DIRECTION_LTR}\n         * {@link View#LAYOUT_DIRECTION_RTL}\n         ",
    "links" : [ "android.webkit.WebView#LAYOUT_DIRECTION_LTR", "android.webkit.WebView#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public String debug(String output)",
    "returnType" : "String",
    "comment" : "\n         * Returns a String representation of this set of layout parameters.\n         *\n         * @param output the String to prepend to the internal representation\n         * @return a String with the following format: output +\n         *         \"ViewGroup.LayoutParams={ width=WIDTH, height=HEIGHT }\"\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onDebugDraw(View view, Canvas canvas, Paint paint)",
    "returnType" : "void",
    "comment" : "\n         * Use {@code canvas} to draw suitable debugging annotations for these LayoutParameters.\n         *\n         * @param view the view that contains these layout parameters\n         * @param canvas the canvas on which to draw\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "protected static String sizeToString(int size)",
    "returnType" : "String",
    "comment" : "\n         * Converts the specified size to a readable String.\n         *\n         * @param size the size to convert\n         * @return a String instance representing the supplied size\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void encode(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr)", "public void resolveLayoutDirection(int layoutDirection)", "public String debug(String output)", "public void onDebugDraw(View view, Canvas canvas, Paint paint)", "protected static String sizeToString(int size)", " void encode(@NonNull ViewHierarchyEncoder encoder)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ],
  "variableNames" : [ "FILL_PARENT", "MATCH_PARENT", "WRAP_CONTENT", "width", "height", "layoutAnimationParameters" ]
}