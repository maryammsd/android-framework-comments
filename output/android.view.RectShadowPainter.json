{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/RectShadowPainter.java",
  "packageName" : "android.view",
  "className" : "RectShadowPainter",
  "comment" : "\n * Paints shadow for rounded rectangles. Inspiration from CardView. Couldn't use that directly,\n * since it modifies the size of the content, that we can't do.\n ",
  "variables" : [ {
    "name" : "START_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PERPENDICULAR_ANGLE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void paintShadow(Outline viewOutline, float elevation, Canvas canvas, float alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float elevationToShadow(float elevation)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int modifyCanvas(Canvas canvas, float shadowSize)",
    "returnType" : "int",
    "comment" : "\n     * Translate canvas by half of shadow size up, so that it appears that light is coming\n     * slightly from above. Also, remove clipping, so that shadow is not clipped.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void sideShadow(Canvas canvas, Paint edgePaint, RectF edgeShadowRect, float dx, float dy, int rotations)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void drawCorner(Canvas canvas, Paint paint, Path path, float x, float y, float radius, int rotations)",
    "returnType" : "void",
    "comment" : "\n     * @param canvas Canvas to draw the rectangle on.\n     * @param paint Paint to use when drawing the corner.\n     * @param path A path to reuse. Prevents allocating memory for each path.\n     * @param x Center of circle, which this corner is a part of.\n     * @param y Center of circle, which this corner is a part of.\n     * @param radius radius of the arc\n     * @param rotations number of quarter rotations before starting to paint the arc.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isRectEmpty(RectF rect)",
    "returnType" : "boolean",
    "comment" : "\n     * Differs from {@link RectF#isEmpty()} as this first converts the rect to int and then checks.\n     * <p/>\n     * This is required because {@link BaseCanvas_Delegate#native_drawRect(long, float, float,\n     * float,\n     * float, long)} casts the co-ordinates to int and we want to ensure that it doesn't end up\n     * drawing empty rectangles, which results in IllegalArgumentException.\n     ",
    "links" : [ "android.graphics.BaseCanvas_Delegate#native_drawRect(long", "android.graphics.RectF#isEmpty()" ]
  } ],
  "variableNames" : [ "START_COLOR", "END_COLOR", "PERPENDICULAR_ANGLE" ],
  "methodNames" : [ "public static void paintShadow(Outline viewOutline, float elevation, Canvas canvas, float alpha)", "private static float elevationToShadow(float elevation)", "private static int modifyCanvas(Canvas canvas, float shadowSize)", "private static void sideShadow(Canvas canvas, Paint edgePaint, RectF edgeShadowRect, float dx, float dy, int rotations)", "private static void drawCorner(Canvas canvas, Paint paint, Path path, float x, float y, float radius, int rotations)", "private static boolean isRectEmpty(RectF rect)" ]
}