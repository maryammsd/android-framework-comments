{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodec.java",
  "packageName" : "android.media",
  "className" : "QueueRequest",
  "comment" : "\n     * Builder-like class for queue requests. Use this class to prepare a\n     * queue request and send it.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mCodec",
    "type" : "MediaCodec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinearBlock",
    "type" : "LinearBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareBuffer",
    "type" : "HardwareBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresentationTimeUs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferInfos",
    "type" : "ArrayDeque<BufferInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoInfos",
    "type" : "ArrayDeque<CryptoInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTuningKeys",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTuningValues",
    "type" : "ArrayList<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public QueueRequest setLinearBlock(@NonNull LinearBlock block, int offset, int size)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set a linear block to this queue request. Exactly one buffer must be\n         * set for a queue request before calling {@link #queue}. It is possible\n         * to use the same {@link LinearBlock} object for multiple queue\n         * requests. The behavior is undefined if the range of the buffer\n         * overlaps for multiple requests, or the application writes into the\n         * region being processed by the codec.\n         *\n         * @param block The linear block object\n         * @param offset The byte offset into the input buffer at which the data starts.\n         * @param size The number of bytes of valid input data.\n         * @return this object\n         * @throws IllegalStateException if a buffer is already set\n         ",
    "links" : [ "LinearBlock", "#queue" ]
  }, {
    "name" : "public QueueRequest setMultiFrameLinearBlock(@NonNull LinearBlock block, @NonNull ArrayDeque<BufferInfo> infos)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set a linear block that contain multiple non-encrypted access unit to this\n         * queue request. Exactly one buffer must be set for a queue request before\n         * calling {@link #queue}. Multiple access units if present must be laid out contiguously\n         * and without gaps and in order. An IllegalArgumentException will be thrown\n         * during {@link #queue} if access units are not laid out contiguously.\n         *\n         * @param block The linear block object\n         * @param infos Represents {@link MediaCodec.BufferInfo} objects to mark\n         *              individual access-unit boundaries and the timestamps associated with it.\n         * @return this object\n         * @throws IllegalStateException if a buffer is already set\n         ",
    "links" : [ "MediaCodec.BufferInfo", "#queue" ]
  }, {
    "name" : "public QueueRequest setEncryptedLinearBlock(@NonNull LinearBlock block, int offset, int size, @NonNull MediaCodec.CryptoInfo cryptoInfo)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set an encrypted linear block to this queue request. Exactly one buffer must be\n         * set for a queue request before calling {@link #queue}. It is possible\n         * to use the same {@link LinearBlock} object for multiple queue\n         * requests. The behavior is undefined if the range of the buffer\n         * overlaps for multiple requests, or the application writes into the\n         * region being processed by the codec.\n         *\n         * @param block The linear block object\n         * @param offset The byte offset into the input buffer at which the data starts.\n         * @param size The number of bytes of valid input data.\n         * @param cryptoInfo Metadata describing the structure of the encrypted input sample.\n         * @return this object\n         * @throws IllegalStateException if a buffer is already set\n         ",
    "links" : [ "LinearBlock", "#queue" ]
  }, {
    "name" : "public QueueRequest setMultiFrameEncryptedLinearBlock(@NonNull LinearBlock block, @NonNull ArrayDeque<MediaCodec.BufferInfo> bufferInfos, @NonNull ArrayDeque<MediaCodec.CryptoInfo> cryptoInfos)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set an encrypted linear block to this queue request. Exactly one buffer must be\n         * set for a queue request before calling {@link #queue}. The block can contain multiple\n         * access units and if present should be laid out contiguously and without gaps.\n         *\n         * @param block The linear block object\n         * @param bufferInfos ArrayDeque of {@link MediaCodec.BufferInfo} that describes the\n         *                    contents in the buffer. The ArrayDeque and the BufferInfo objects\n         *                    provided can be recycled by the caller for re-use.\n         * @param cryptoInfos ArrayDeque of {@link MediaCodec.CryptoInfo} that describes the\n         *                    structure of the encrypted input samples. The ArrayDeque and the\n         *                    BufferInfo objects provided can be recycled by the caller for re-use.\n         * @return this object\n         * @throws IllegalStateException if a buffer is already set\n         * @throws IllegalArgumentException upon if bufferInfos is empty, contains null, or if the\n         *                     access units are not contiguous.\n         ",
    "links" : [ "MediaCodec.BufferInfo", "#queue", "MediaCodec.CryptoInfo" ]
  }, {
    "name" : "public QueueRequest setHardwareBuffer(@NonNull HardwareBuffer buffer)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set a hardware graphic buffer to this queue request. Exactly one buffer must\n         * be set for a queue request before calling {@link #queue}.\n         * <p>\n         * Note: buffers should have format {@link HardwareBuffer#YCBCR_420_888},\n         * a single layer, and an appropriate usage ({@link HardwareBuffer#USAGE_CPU_READ_OFTEN}\n         * for software codecs and {@link HardwareBuffer#USAGE_VIDEO_ENCODE} for hardware)\n         * for codecs to recognize. Format {@link ImageFormat#PRIVATE} together with\n         * usage {@link HardwareBuffer#USAGE_VIDEO_ENCODE} will also work for hardware codecs.\n         * Codecs may throw exception if the buffer is not recognizable.\n         *\n         * @param buffer The hardware graphic buffer object\n         * @return this object\n         * @throws IllegalStateException if a buffer is already set\n         ",
    "links" : [ "android.hardware.HardwareBuffer#YCBCR_420_888", "android.hardware.HardwareBuffer#USAGE_VIDEO_ENCODE", "android.graphics.ImageFormat#PRIVATE", "#queue", "android.hardware.HardwareBuffer#USAGE_CPU_READ_OFTEN" ]
  }, {
    "name" : "public QueueRequest setPresentationTimeUs(long presentationTimeUs)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set timestamp to this queue request.\n         *\n         * @param presentationTimeUs The presentation timestamp in microseconds for this\n         *                           buffer. This is normally the media time at which this\n         *                           buffer should be presented (rendered). When using an output\n         *                           surface, this will be propagated as the {@link\n         *                           SurfaceTexture#getTimestamp timestamp} for the frame (after\n         *                           conversion to nanoseconds).\n         * @return this object\n         ",
    "links" : [ "android.graphics.SurfaceTexture#getTimestamp" ]
  }, {
    "name" : "public QueueRequest setFlags(@BufferFlag int flags)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Set flags to this queue request.\n         *\n         * @param flags A bitmask of flags\n         *              {@link #BUFFER_FLAG_CODEC_CONFIG} and {@link #BUFFER_FLAG_END_OF_STREAM}.\n         *              While not prohibited, most codecs do not use the\n         *              {@link #BUFFER_FLAG_KEY_FRAME} flag for input buffers.\n         * @return this object\n         ",
    "links" : [ "#BUFFER_FLAG_KEY_FRAME", "#BUFFER_FLAG_CODEC_CONFIG", "#BUFFER_FLAG_END_OF_STREAM" ]
  }, {
    "name" : "public QueueRequest setIntegerParameter(@NonNull String key, int value)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Add an integer parameter.\n         * See {@link MediaFormat} for an exhaustive list of supported keys with\n         * values of type int, that can also be set with {@link MediaFormat#setInteger}.\n         *\n         * If there was {@link MediaCodec#setParameters}\n         * call with the same key which is not processed by the codec yet, the\n         * value set from this method will override the unprocessed value.\n         *\n         * @return this object\n         ",
    "links" : [ "android.media.MediaCodec#setParameters", "android.media.MediaFormat", "android.media.MediaFormat#setInteger" ]
  }, {
    "name" : "public QueueRequest setLongParameter(@NonNull String key, long value)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Add a long parameter.\n         * See {@link MediaFormat} for an exhaustive list of supported keys with\n         * values of type long, that can also be set with {@link MediaFormat#setLong}.\n         *\n         * If there was {@link MediaCodec#setParameters}\n         * call with the same key which is not processed by the codec yet, the\n         * value set from this method will override the unprocessed value.\n         *\n         * @return this object\n         ",
    "links" : [ "android.media.MediaCodec#setParameters", "android.media.MediaFormat", "android.media.MediaFormat#setLong" ]
  }, {
    "name" : "public QueueRequest setFloatParameter(@NonNull String key, float value)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Add a float parameter.\n         * See {@link MediaFormat} for an exhaustive list of supported keys with\n         * values of type float, that can also be set with {@link MediaFormat#setFloat}.\n         *\n         * If there was {@link MediaCodec#setParameters}\n         * call with the same key which is not processed by the codec yet, the\n         * value set from this method will override the unprocessed value.\n         *\n         * @return this object\n         ",
    "links" : [ "android.media.MediaFormat#setFloat", "android.media.MediaCodec#setParameters", "android.media.MediaFormat" ]
  }, {
    "name" : "public QueueRequest setByteBufferParameter(@NonNull String key, @NonNull ByteBuffer value)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Add a {@link ByteBuffer} parameter.\n         * See {@link MediaFormat} for an exhaustive list of supported keys with\n         * values of byte buffer, that can also be set with {@link MediaFormat#setByteBuffer}.\n         *\n         * If there was {@link MediaCodec#setParameters}\n         * call with the same key which is not processed by the codec yet, the\n         * value set from this method will override the unprocessed value.\n         *\n         * @return this object\n         ",
    "links" : [ "android.media.MediaCodec#setParameters", "android.media.MediaFormat", "android.media.MediaFormat#setByteBuffer", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public QueueRequest setStringParameter(@NonNull String key, @NonNull String value)",
    "returnType" : "QueueRequest",
    "comment" : "\n         * Add a string parameter.\n         * See {@link MediaFormat} for an exhaustive list of supported keys with\n         * values of type string, that can also be set with {@link MediaFormat#setString}.\n         *\n         * If there was {@link MediaCodec#setParameters}\n         * call with the same key which is not processed by the codec yet, the\n         * value set from this method will override the unprocessed value.\n         *\n         * @return this object\n         ",
    "links" : [ "android.media.MediaCodec#setParameters", "android.media.MediaFormat#setString", "android.media.MediaFormat" ]
  }, {
    "name" : "public void queue()",
    "returnType" : "void",
    "comment" : "\n         * Finish building a queue request and queue the buffers with tunings.\n         ",
    "links" : [ ]
  }, {
    "name" : " QueueRequest clear()",
    "returnType" : "QueueRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isAccessible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " QueueRequest setAccessible(boolean accessible)",
    "returnType" : "QueueRequest",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public QueueRequest setLinearBlock(@NonNull LinearBlock block, int offset, int size)", "public QueueRequest setMultiFrameLinearBlock(@NonNull LinearBlock block, @NonNull ArrayDeque<BufferInfo> infos)", "public QueueRequest setEncryptedLinearBlock(@NonNull LinearBlock block, int offset, int size, @NonNull MediaCodec.CryptoInfo cryptoInfo)", "public QueueRequest setMultiFrameEncryptedLinearBlock(@NonNull LinearBlock block, @NonNull ArrayDeque<MediaCodec.BufferInfo> bufferInfos, @NonNull ArrayDeque<MediaCodec.CryptoInfo> cryptoInfos)", "public QueueRequest setHardwareBuffer(@NonNull HardwareBuffer buffer)", "public QueueRequest setPresentationTimeUs(long presentationTimeUs)", "public QueueRequest setFlags(@BufferFlag int flags)", "public QueueRequest setIntegerParameter(@NonNull String key, int value)", "public QueueRequest setLongParameter(@NonNull String key, long value)", "public QueueRequest setFloatParameter(@NonNull String key, float value)", "public QueueRequest setByteBufferParameter(@NonNull String key, @NonNull ByteBuffer value)", "public QueueRequest setStringParameter(@NonNull String key, @NonNull String value)", "public void queue()", " QueueRequest clear()", " boolean isAccessible()", " QueueRequest setAccessible(boolean accessible)" ],
  "variableNames" : [ "mCodec", "mIndex", "mLinearBlock", "mOffset", "mSize", "mHardwareBuffer", "mPresentationTimeUs", "mFlags", "mBufferInfos", "mCryptoInfos", "mTuningKeys", "mTuningValues", "mAccessible" ]
}