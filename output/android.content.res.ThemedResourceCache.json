{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/ThemedResourceCache.java",
  "packageName" : "android.content.res",
  "className" : "ThemedResourceCache",
  "comment" : "\n * Data structure used for caching data against themes.\n *\n * @param <T> type of data to cache\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "UNDEFINED_GENERATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemedEntries",
    "type" : "ArrayMap<ThemeKey, LongSparseArray<WeakReference<T>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnthemedEntries",
    "type" : "LongSparseArray<WeakReference<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNullThemedEntries",
    "type" : "LongSparseArray<WeakReference<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGeneration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void put(long key, @Nullable Theme theme, @NonNull T entry, int generation)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new theme-dependent entry to the cache.\n     *\n     * @param key a key that uniquely identifies the entry\n     * @param theme the theme against which this entry was inflated, or\n     *              {@code null} if the entry has no theme applied\n     * @param entry the entry to cache\n     * @param generation The generation of the cache to compare against before storing\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(long key, @Nullable Theme theme, @NonNull T entry, int generation, boolean usesTheme)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new entry to the cache.\n     *\n     * @param key a key that uniquely identifies the entry\n     * @param theme the theme against which this entry was inflated, or\n     *              {@code null} if the entry has no theme applied\n     * @param entry the entry to cache\n     * @param generation The generation of the cache to compare against before storing\n     * @param usesTheme {@code true} if the entry is affected theme changes,\n     *                  {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGeneration()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current generation of the cache\n     *\n     * @return The current generation\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get(long key, @Nullable Theme theme)",
    "returnType" : "T",
    "comment" : "\n     * Returns an entry from the cache.\n     *\n     * @param key a key that uniquely identifies the entry\n     * @param theme the theme where the entry will be used\n     * @return a cached entry, or {@code null} if not in the cache\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChange(@Config int configChanges)",
    "returnType" : "void",
    "comment" : "\n     * Prunes cache entries that have been invalidated by a configuration\n     * change.\n     *\n     * @param configChanges a bitmask of configuration changes\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean shouldInvalidateEntry(@NonNull T entry, int configChanges)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a cached entry has been invalidated by a configuration\n     * change.\n     *\n     * @param entry a cached entry\n     * @param configChanges a non-zero bitmask of configuration changes\n     * @return {@code true} if the entry is invalid, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private LongSparseArray<WeakReference<T>> getThemedLocked(@Nullable Theme t, boolean create)",
    "returnType" : "LongSparseArray<WeakReference<T>>",
    "comment" : "\n     * Returns the cached data for the specified theme, optionally creating a\n     * new entry if one does not already exist.\n     *\n     * @param t the theme for which to return cached data\n     * @param create {@code true} to create an entry if one does not already\n     *               exist, {@code false} otherwise\n     * @return the cached data for the theme, or {@code null} if the cache is\n     *         empty and {@code create} was {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "private LongSparseArray<WeakReference<T>> getUnthemedLocked(boolean create)",
    "returnType" : "LongSparseArray<WeakReference<T>>",
    "comment" : "\n     * Returns the theme-agnostic cached data.\n     *\n     * @param create {@code true} to create an entry if one does not already\n     *               exist, {@code false} otherwise\n     * @return the theme-agnostic cached data, or {@code null} if the cache is\n     *         empty and {@code create} was {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean pruneLocked(@Config int configChanges)",
    "returnType" : "boolean",
    "comment" : "\n     * Prunes cache entries affected by configuration changes or where weak\n     * references have expired.\n     *\n     * @param configChanges a bitmask of configuration changes, or {@code 0} to\n     *                      simply prune missing weak references\n     * @return {@code true} if the cache is completely empty after pruning\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean pruneEntriesLocked(@Nullable LongSparseArray<WeakReference<T>> entries, @Config int configChanges)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean pruneEntryLocked(@Nullable T entry, @Config int configChanges)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void put(long key, @Nullable Theme theme, @NonNull T entry, int generation)", "public void put(long key, @Nullable Theme theme, @NonNull T entry, int generation, boolean usesTheme)", "public int getGeneration()", "public T get(long key, @Nullable Theme theme)", "public void onConfigurationChange(@Config int configChanges)", "protected abstract boolean shouldInvalidateEntry(@NonNull T entry, int configChanges)", "private LongSparseArray<WeakReference<T>> getThemedLocked(@Nullable Theme t, boolean create)", "private LongSparseArray<WeakReference<T>> getUnthemedLocked(boolean create)", "private boolean pruneLocked(@Config int configChanges)", "private boolean pruneEntriesLocked(@Nullable LongSparseArray<WeakReference<T>> entries, @Config int configChanges)", "private boolean pruneEntryLocked(@Nullable T entry, @Config int configChanges)", "public synchronized void clear()" ],
  "variableNames" : [ "UNDEFINED_GENERATION", "mThemedEntries", "mUnthemedEntries", "mNullThemedEntries", "mGeneration" ]
}