{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Connection.java",
  "packageName" : "java.sql",
  "className" : "Connection",
  "comment" : "\n * <P>A connection (session) with a specific\n * database. SQL statements are executed and results are returned\n * within the context of a connection.\n * <P>\n * A <code>Connection</code> object's database is able to provide information\n * describing its tables, its supported SQL grammar, its stored\n * procedures, the capabilities of this connection, and so on. This\n * information is obtained with the <code>getMetaData</code> method.\n *\n * <P><B>Note:</B> When configuring a <code>Connection</code>, JDBC applications\n *  should use the appropriate <code>Connection</code> method such as\n *  <code>setAutoCommit</code> or <code>setTransactionIsolation</code>.\n *  Applications should not invoke SQL commands directly to change the connection's\n *   configuration when there is a JDBC method available.  By default a <code>Connection</code> object is in\n * auto-commit mode, which means that it automatically commits changes\n * after executing each statement. If auto-commit mode has been\n * disabled, the method <code>commit</code> must be called explicitly in\n * order to commit changes; otherwise, database changes will not be saved.\n * <P>\n * A new <code>Connection</code> object created using the JDBC 2.1 core API\n * has an initially empty type map associated with it. A user may enter a\n * custom mapping for a UDT in this type map.\n * When a UDT is retrieved from a data source with the\n * method <code>ResultSet.getObject</code>, the <code>getObject</code> method\n * will check the connection's type map to see if there is an entry for that\n * UDT.  If so, the <code>getObject</code> method will map the UDT to the\n * class indicated.  If there is no entry, the UDT will be mapped using the\n * standard mapping.\n * <p>\n * A user may create a new type map, which is a <code>java.util.Map</code>\n * object, make an entry in it, and pass it to the <code>java.sql</code>\n * methods that can perform custom mapping.  In this case, the method\n * will use the given type map instead of the one associated with\n * the connection.\n * <p>\n * For example, the following code fragment specifies that the SQL\n * type <code>ATHLETES</code> will be mapped to the class\n * <code>Athletes</code> in the Java programming language.\n * The code fragment retrieves the type map for the <code>Connection\n * </code> object <code>con</code>, inserts the entry into it, and then sets\n * the type map with the new entry as the connection's type map.\n * <pre>\n *      java.util.Map map = con.getTypeMap();\n *      map.put(\"mySchemaName.ATHLETES\", Class.forName(\"Athletes\"));\n *      con.setTypeMap(map);\n * </pre>\n *\n * @see DriverManager#getConnection\n * @see Statement\n * @see ResultSet\n * @see DatabaseMetaData\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TRANSACTION_NONE",
    "type" : "int",
    "comment" : "\n     * A constant indicating that transactions are not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_READ_UNCOMMITTED",
    "type" : "int",
    "comment" : "\n     * A constant indicating that\n     * dirty reads, non-repeatable reads and phantom reads can occur.\n     * This level allows a row changed by one transaction to be read\n     * by another transaction before any changes in that row have been\n     * committed (a \"dirty read\").  If any of the changes are rolled back,\n     * the second transaction will have retrieved an invalid row.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_READ_COMMITTED",
    "type" : "int",
    "comment" : "\n     * A constant indicating that\n     * dirty reads are prevented; non-repeatable reads and phantom\n     * reads can occur.  This level only prohibits a transaction\n     * from reading a row with uncommitted changes in it.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_REPEATABLE_READ",
    "type" : "int",
    "comment" : "\n     * A constant indicating that\n     * dirty reads and non-repeatable reads are prevented; phantom\n     * reads can occur.  This level prohibits a transaction from\n     * reading a row with uncommitted changes in it, and it also\n     * prohibits the situation where one transaction reads a row,\n     * a second transaction alters the row, and the first transaction\n     * rereads the row, getting different values the second time\n     * (a \"non-repeatable read\").\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_SERIALIZABLE",
    "type" : "int",
    "comment" : "\n     * A constant indicating that\n     * dirty reads, non-repeatable reads and phantom reads are prevented.\n     * This level includes the prohibitions in\n     * <code>TRANSACTION_REPEATABLE_READ</code> and further prohibits the\n     * situation where one transaction reads all rows that satisfy\n     * a <code>WHERE</code> condition, a second transaction inserts a row that\n     * satisfies that <code>WHERE</code> condition, and the first transaction\n     * rereads for the same condition, retrieving the additional\n     * \"phantom\" row in the second read.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Statement createStatement() throws SQLException",
    "returnType" : "Statement",
    "comment" : "\n     * Creates a <code>Statement</code> object for sending\n     * SQL statements to the database.\n     * SQL statements without parameters are normally\n     * executed using <code>Statement</code> objects. If the same SQL statement\n     * is executed many times, it may be more efficient to use a\n     * <code>PreparedStatement</code> object.\n     * <P>\n     * Result sets created using the returned <code>Statement</code>\n     * object will by default be type <code>TYPE_FORWARD_ONLY</code>\n     * and have a concurrency level of <code>CONCUR_READ_ONLY</code>.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @return a new default <code>Statement</code> object\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " PreparedStatement prepareStatement(String sql) throws SQLException",
    "returnType" : "PreparedStatement",
    "comment" : "\n     * Creates a <code>PreparedStatement</code> object for sending\n     * parameterized SQL statements to the database.\n     * <P>\n     * A SQL statement with or without IN parameters can be\n     * pre-compiled and stored in a <code>PreparedStatement</code> object. This\n     * object can then be used to efficiently execute this statement\n     * multiple times.\n     *\n     * <P><B>Note:</B> This method is optimized for handling\n     * parametric SQL statements that benefit from precompilation. If\n     * the driver supports precompilation,\n     * the method <code>prepareStatement</code> will send\n     * the statement to the database for precompilation. Some drivers\n     * may not support precompilation. In this case, the statement may\n     * not be sent to the database until the <code>PreparedStatement</code>\n     * object is executed.  This has no direct effect on users; however, it does\n     * affect which methods throw certain <code>SQLException</code> objects.\n     * <P>\n     * Result sets created using the returned <code>PreparedStatement</code>\n     * object will by default be type <code>TYPE_FORWARD_ONLY</code>\n     * and have a concurrency level of <code>CONCUR_READ_ONLY</code>.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql an SQL statement that may contain one or more '?' IN\n     * parameter placeholders\n     * @return a new default <code>PreparedStatement</code> object containing the\n     * pre-compiled SQL statement\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " CallableStatement prepareCall(String sql) throws SQLException",
    "returnType" : "CallableStatement",
    "comment" : "\n     * Creates a <code>CallableStatement</code> object for calling\n     * database stored procedures.\n     * The <code>CallableStatement</code> object provides\n     * methods for setting up its IN and OUT parameters, and\n     * methods for executing the call to a stored procedure.\n     *\n     * <P><B>Note:</B> This method is optimized for handling stored\n     * procedure call statements. Some drivers may send the call\n     * statement to the database when the method <code>prepareCall</code>\n     * is done; others\n     * may wait until the <code>CallableStatement</code> object\n     * is executed. This has no\n     * direct effect on users; however, it does affect which method\n     * throws certain SQLExceptions.\n     * <P>\n     * Result sets created using the returned <code>CallableStatement</code>\n     * object will by default be type <code>TYPE_FORWARD_ONLY</code>\n     * and have a concurrency level of <code>CONCUR_READ_ONLY</code>.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql an SQL statement that may contain one or more '?'\n     * parameter placeholders. Typically this statement is specified using JDBC\n     * call escape syntax.\n     * @return a new default <code>CallableStatement</code> object containing the\n     * pre-compiled SQL statement\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " String nativeSQL(String sql) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Converts the given SQL statement into the system's native SQL grammar.\n     * A driver may convert the JDBC SQL grammar into its system's\n     * native SQL grammar prior to sending it. This method returns the\n     * native form of the statement that the driver would have sent.\n     *\n     * @param sql an SQL statement that may contain one or more '?'\n     * parameter placeholders\n     * @return the native form of this statement\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAutoCommit(boolean autoCommit) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets this connection's auto-commit mode to the given state.\n     * If a connection is in auto-commit mode, then all its SQL\n     * statements will be executed and committed as individual\n     * transactions.  Otherwise, its SQL statements are grouped into\n     * transactions that are terminated by a call to either\n     * the method <code>commit</code> or the method <code>rollback</code>.\n     * By default, new connections are in auto-commit\n     * mode.\n     * <P>\n     * The commit occurs when the statement completes. The time when the statement\n     * completes depends on the type of SQL Statement:\n     * <ul>\n     * <li>For DML statements, such as Insert, Update or Delete, and DDL statements,\n     * the statement is complete as soon as it has finished executing.\n     * <li>For Select statements, the statement is complete when the associated result\n     * set is closed.\n     * <li>For <code>CallableStatement</code> objects or for statements that return\n     * multiple results, the statement is complete\n     * when all of the associated result sets have been closed, and all update\n     * counts and output parameters have been retrieved.\n     *</ul>\n     * <P>\n     * <B>NOTE:</B>  If this method is called during a transaction and the\n     * auto-commit mode is changed, the transaction is committed.  If\n     * <code>setAutoCommit</code> is called and the auto-commit mode is\n     * not changed, the call is a no-op.\n     *\n     * @param autoCommit <code>true</code> to enable auto-commit mode;\n     *         <code>false</code> to disable it\n     * @exception SQLException if a database access error occurs,\n     *  setAutoCommit(true) is called while participating in a distributed transaction,\n     * or this method is called on a closed connection\n     * @see #getAutoCommit\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getAutoCommit() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves the current auto-commit mode for this <code>Connection</code>\n     * object.\n     *\n     * @return the current state of this <code>Connection</code> object's\n     *         auto-commit mode\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @see #setAutoCommit\n     ",
    "links" : [ ]
  }, {
    "name" : " void commit() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Makes all changes made since the previous\n     * commit/rollback permanent and releases any database locks\n     * currently held by this <code>Connection</code> object.\n     * This method should be\n     * used only when auto-commit mode has been disabled.\n     *\n     * @exception SQLException if a database access error occurs,\n     * this method is called while participating in a distributed transaction,\n     * if this method is called on a closed conection or this\n     *            <code>Connection</code> object is in auto-commit mode\n     * @see #setAutoCommit\n     ",
    "links" : [ ]
  }, {
    "name" : " void rollback() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Undoes all changes made in the current transaction\n     * and releases any database locks currently held\n     * by this <code>Connection</code> object. This method should be\n     * used only when auto-commit mode has been disabled.\n     *\n     * @exception SQLException if a database access error occurs,\n     * this method is called while participating in a distributed transaction,\n     * this method is called on a closed connection or this\n     *            <code>Connection</code> object is in auto-commit mode\n     * @see #setAutoCommit\n     ",
    "links" : [ ]
  }, {
    "name" : " void close() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Releases this <code>Connection</code> object's database and JDBC resources\n     * immediately instead of waiting for them to be automatically released.\n     * <P>\n     * Calling the method <code>close</code> on a <code>Connection</code>\n     * object that is already closed is a no-op.\n     * <P>\n     * It is <b>strongly recommended</b> that an application explicitly\n     * commits or rolls back an active transaction prior to calling the\n     * <code>close</code> method.  If the <code>close</code> method is called\n     * and there is an active transaction, the results are implementation-defined.\n     * <P>\n     *\n     * @exception SQLException SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isClosed() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this <code>Connection</code> object has been\n     * closed.  A connection is closed if the method <code>close</code>\n     * has been called on it or if certain fatal errors have occurred.\n     * This method is guaranteed to return <code>true</code> only when\n     * it is called after the method <code>Connection.close</code> has\n     * been called.\n     * <P>\n     * This method generally cannot be called to determine whether a\n     * connection to a database is valid or invalid.  A typical client\n     * can determine that a connection is invalid by catching any\n     * exceptions that might be thrown when an operation is attempted.\n     *\n     * @return <code>true</code> if this <code>Connection</code> object\n     *         is closed; <code>false</code> if it is still open\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " DatabaseMetaData getMetaData() throws SQLException",
    "returnType" : "DatabaseMetaData",
    "comment" : "\n     * Retrieves a <code>DatabaseMetaData</code> object that contains\n     * metadata about the database to which this\n     * <code>Connection</code> object represents a connection.\n     * The metadata includes information about the database's\n     * tables, its supported SQL grammar, its stored\n     * procedures, the capabilities of this connection, and so on.\n     *\n     * @return a <code>DatabaseMetaData</code> object for this\n     *         <code>Connection</code> object\n     * @exception  SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ ]
  }, {
    "name" : " void setReadOnly(boolean readOnly) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Puts this connection in read-only mode as a hint to the driver to enable\n     * database optimizations.\n     *\n     * <P><B>Note:</B> This method cannot be called during a transaction.\n     *\n     * @param readOnly <code>true</code> enables read-only mode;\n     *        <code>false</code> disables it\n     * @exception SQLException if a database access error occurs, this\n     *  method is called on a closed connection or this\n     *            method is called during a transaction\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isReadOnly() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this <code>Connection</code>\n     * object is in read-only mode.\n     *\n     * @return <code>true</code> if this <code>Connection</code> object\n     *         is read-only; <code>false</code> otherwise\n     * @exception SQLException SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCatalog(String catalog) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the given catalog name in order to select\n     * a subspace of this <code>Connection</code> object's database\n     * in which to work.\n     * <P>\n     * If the driver does not support catalogs, it will\n     * silently ignore this request.\n     * <p>\n     * Calling {@code setCatalog} has no effect on previously created or prepared\n     * {@code Statement} objects. It is implementation defined whether a DBMS\n     * prepare operation takes place immediately when the {@code Connection}\n     * method {@code prepareStatement} or {@code prepareCall} is invoked.\n     * For maximum portability, {@code setCatalog} should be called before a\n     * {@code Statement} is created or prepared.\n     *\n     * @param catalog the name of a catalog (subspace in this\n     *        <code>Connection</code> object's database) in which to work\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @see #getCatalog\n     ",
    "links" : [ ]
  }, {
    "name" : " String getCatalog() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves this <code>Connection</code> object's current catalog name.\n     *\n     * @return the current catalog name or <code>null</code> if there is none\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @see #setCatalog\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTransactionIsolation(int level) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Attempts to change the transaction isolation level for this\n     * <code>Connection</code> object to the one given.\n     * The constants defined in the interface <code>Connection</code>\n     * are the possible transaction isolation levels.\n     * <P>\n     * <B>Note:</B> If this method is called during a transaction, the result\n     * is implementation-defined.\n     *\n     * @param level one of the following <code>Connection</code> constants:\n     *        <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,\n     *        <code>Connection.TRANSACTION_READ_COMMITTED</code>,\n     *        <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or\n     *        <code>Connection.TRANSACTION_SERIALIZABLE</code>.\n     *        (Note that <code>Connection.TRANSACTION_NONE</code> cannot be used\n     *        because it specifies that transactions are not supported.)\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection\n     *            or the given parameter is not one of the <code>Connection</code>\n     *            constants\n     * @see DatabaseMetaData#supportsTransactionIsolationLevel\n     * @see #getTransactionIsolation\n     ",
    "links" : [ ]
  }, {
    "name" : " int getTransactionIsolation() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this <code>Connection</code> object's current\n     * transaction isolation level.\n     *\n     * @return the current transaction isolation level, which will be one\n     *         of the following constants:\n     *        <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,\n     *        <code>Connection.TRANSACTION_READ_COMMITTED</code>,\n     *        <code>Connection.TRANSACTION_REPEATABLE_READ</code>,\n     *        <code>Connection.TRANSACTION_SERIALIZABLE</code>, or\n     *        <code>Connection.TRANSACTION_NONE</code>.\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @see #setTransactionIsolation\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLWarning getWarnings() throws SQLException",
    "returnType" : "SQLWarning",
    "comment" : "\n     * Retrieves the first warning reported by calls on this\n     * <code>Connection</code> object.  If there is more than one\n     * warning, subsequent warnings will be chained to the first one\n     * and can be retrieved by calling the method\n     * <code>SQLWarning.getNextWarning</code> on the warning\n     * that was retrieved previously.\n     * <P>\n     * This method may not be\n     * called on a closed connection; doing so will cause an\n     * <code>SQLException</code> to be thrown.\n     *\n     * <P><B>Note:</B> Subsequent warnings will be chained to this\n     * SQLWarning.\n     *\n     * @return the first <code>SQLWarning</code> object or <code>null</code>\n     *         if there are none\n     * @exception SQLException if a database access error occurs or\n     *            this method is called on a closed connection\n     * @see SQLWarning\n     ",
    "links" : [ ]
  }, {
    "name" : " void clearWarnings() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Clears all warnings reported for this <code>Connection</code> object.\n     * After a call to this method, the method <code>getWarnings</code>\n     * returns <code>null</code> until a new warning is\n     * reported for this <code>Connection</code> object.\n     *\n     * @exception SQLException SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     ",
    "links" : [ ]
  }, {
    "name" : " Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException",
    "returnType" : "Statement",
    "comment" : "\n     * Creates a <code>Statement</code> object that will generate\n     * <code>ResultSet</code> objects with the given type and concurrency.\n     * This method is the same as the <code>createStatement</code> method\n     * above, but it allows the default result set\n     * type and concurrency to be overridden.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param resultSetType a result set type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @param resultSetConcurrency a concurrency type; one of\n     *        <code>ResultSet.CONCUR_READ_ONLY</code> or\n     *        <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @return a new <code>Statement</code> object that will generate\n     *         <code>ResultSet</code> objects with the given type and\n     *         concurrency\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection\n     *         or the given parameters are not <code>ResultSet</code>\n     *         constants indicating type and concurrency\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type and result set concurrency.\n     * @since 1.2\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException",
    "returnType" : "PreparedStatement",
    "comment" : "\n     *\n     * Creates a <code>PreparedStatement</code> object that will generate\n     * <code>ResultSet</code> objects with the given type and concurrency.\n     * This method is the same as the <code>prepareStatement</code> method\n     * above, but it allows the default result set\n     * type and concurrency to be overridden.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql a <code>String</code> object that is the SQL statement to\n     *            be sent to the database; may contain one or more '?' IN\n     *            parameters\n     * @param resultSetType a result set type; one of\n     *         <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @param resultSetConcurrency a concurrency type; one of\n     *         <code>ResultSet.CONCUR_READ_ONLY</code> or\n     *         <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @return a new PreparedStatement object containing the\n     * pre-compiled SQL statement that will produce <code>ResultSet</code>\n     * objects with the given type and concurrency\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection\n     *         or the given parameters are not <code>ResultSet</code>\n     *         constants indicating type and concurrency\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type and result set concurrency.\n     * @since 1.2\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException",
    "returnType" : "CallableStatement",
    "comment" : "\n     * Creates a <code>CallableStatement</code> object that will generate\n     * <code>ResultSet</code> objects with the given type and concurrency.\n     * This method is the same as the <code>prepareCall</code> method\n     * above, but it allows the default result set\n     * type and concurrency to be overridden.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql a <code>String</code> object that is the SQL statement to\n     *            be sent to the database; may contain on or more '?' parameters\n     * @param resultSetType a result set type; one of\n     *         <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @param resultSetConcurrency a concurrency type; one of\n     *         <code>ResultSet.CONCUR_READ_ONLY</code> or\n     *         <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @return a new <code>CallableStatement</code> object containing the\n     * pre-compiled SQL statement that will produce <code>ResultSet</code>\n     * objects with the given type and concurrency\n     * @exception SQLException if a database access error occurs, this method\n     * is called on a closed connection\n     *         or the given parameters are not <code>ResultSet</code>\n     *         constants indicating type and concurrency\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type and result set concurrency.\n     * @since 1.2\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " java.util.Map<String, Class<?>> getTypeMap() throws SQLException",
    "returnType" : "java.util.Map<String, Class<?>>",
    "comment" : "\n     * Retrieves the <code>Map</code> object associated with this\n     * <code>Connection</code> object.\n     * Unless the application has added an entry, the type map returned\n     * will be empty.\n     * <p>\n     * You must invoke <code>setTypeMap</code> after making changes to the\n     * <code>Map</code> object returned from\n     *  <code>getTypeMap</code> as a JDBC driver may create an internal\n     * copy of the <code>Map</code> object passed to <code>setTypeMap</code>:\n     * <p>\n     * <pre>\n     *      Map&lt;String,Class&lt;?&gt;&gt; myMap = con.getTypeMap();\n     *      myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);\n     *      con.setTypeMap(myMap);\n     * </pre>\n     * @return the <code>java.util.Map</code> object associated\n     *         with this <code>Connection</code> object\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     * @see #setTypeMap\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTypeMap(java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Installs the given <code>TypeMap</code> object as the type map for\n     * this <code>Connection</code> object.  The type map will be used for the\n     * custom mapping of SQL structured types and distinct types.\n     *<p>\n     * You must set the the values for the <code>TypeMap</code> prior to\n     * callng <code>setMap</code> as a JDBC driver may create an internal copy\n     * of the <code>TypeMap</code>:\n     * <p>\n     * <pre>\n     *      Map myMap&lt;String,Class&lt;?&gt;&gt; = new HashMap&lt;String,Class&lt;?&gt;&gt;();\n     *      myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);\n     *      con.setTypeMap(myMap);\n     * </pre>\n     * @param map the <code>java.util.Map</code> object to install\n     *        as the replacement for this <code>Connection</code>\n     *        object's default type map\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection or\n     *        the given parameter is not a <code>java.util.Map</code>\n     *        object\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     * @see #getTypeMap\n     ",
    "links" : [ ]
  }, {
    "name" : " void setHoldability(int holdability) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Changes the default holdability of <code>ResultSet</code> objects\n     * created using this <code>Connection</code> object to the given\n     * holdability.  The default holdability of <code>ResultSet</code> objects\n     * can be be determined by invoking\n     * {@link DatabaseMetaData#getResultSetHoldability}.\n     *\n     * @param holdability a <code>ResultSet</code> holdability constant; one of\n     *        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @throws SQLException if a database access occurs, this method is called\n     * on a closed connection, or the given parameter\n     *         is not a <code>ResultSet</code> constant indicating holdability\n     * @exception SQLFeatureNotSupportedException if the given holdability is not supported\n     * @see #getHoldability\n     * @see DatabaseMetaData#getResultSetHoldability\n     * @see ResultSet\n     * @since 1.4\n     ",
    "links" : [ "java.sql.DatabaseMetaData#getResultSetHoldability" ]
  }, {
    "name" : " int getHoldability() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the current holdability of <code>ResultSet</code> objects\n     * created using this <code>Connection</code> object.\n     *\n     * @return the holdability, one of\n     *        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @throws SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @see #setHoldability\n     * @see DatabaseMetaData#getResultSetHoldability\n     * @see ResultSet\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Savepoint setSavepoint() throws SQLException",
    "returnType" : "Savepoint",
    "comment" : "\n     * Creates an unnamed savepoint in the current transaction and\n     * returns the new <code>Savepoint</code> object that represents it.\n     *\n     *<p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created\n     *savepoint.\n     *\n     * @return the new <code>Savepoint</code> object\n     * @exception SQLException if a database access error occurs,\n     * this method is called while participating in a distributed transaction,\n     * this method is called on a closed connection\n     *            or this <code>Connection</code> object is currently in\n     *            auto-commit mode\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see Savepoint\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Savepoint setSavepoint(String name) throws SQLException",
    "returnType" : "Savepoint",
    "comment" : "\n     * Creates a savepoint with the given name in the current transaction\n     * and returns the new <code>Savepoint</code> object that represents it.\n     *\n     * <p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created\n     *savepoint.\n     *\n     * @param name a <code>String</code> containing the name of the savepoint\n     * @return the new <code>Savepoint</code> object\n     * @exception SQLException if a database access error occurs,\n          * this method is called while participating in a distributed transaction,\n     * this method is called on a closed connection\n     *            or this <code>Connection</code> object is currently in\n     *            auto-commit mode\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see Savepoint\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void rollback(Savepoint savepoint) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Undoes all changes made after the given <code>Savepoint</code> object\n     * was set.\n     * <P>\n     * This method should be used only when auto-commit has been disabled.\n     *\n     * @param savepoint the <code>Savepoint</code> object to roll back to\n     * @exception SQLException if a database access error occurs,\n     * this method is called while participating in a distributed transaction,\n     * this method is called on a closed connection,\n     *            the <code>Savepoint</code> object is no longer valid,\n     *            or this <code>Connection</code> object is currently in\n     *            auto-commit mode\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see Savepoint\n     * @see #rollback\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void releaseSavepoint(Savepoint savepoint) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified <code>Savepoint</code>  and subsequent <code>Savepoint</code> objects from the current\n     * transaction. Any reference to the savepoint after it have been removed\n     * will cause an <code>SQLException</code> to be thrown.\n     *\n     * @param savepoint the <code>Savepoint</code> object to be removed\n     * @exception SQLException if a database access error occurs, this\n     *  method is called on a closed connection or\n     *            the given <code>Savepoint</code> object is not a valid\n     *            savepoint in the current transaction\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException",
    "returnType" : "Statement",
    "comment" : "\n     * Creates a <code>Statement</code> object that will generate\n     * <code>ResultSet</code> objects with the given type, concurrency,\n     * and holdability.\n     * This method is the same as the <code>createStatement</code> method\n     * above, but it allows the default result set\n     * type, concurrency, and holdability to be overridden.\n     *\n     * @param resultSetType one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @param resultSetConcurrency one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.CONCUR_READ_ONLY</code> or\n     *         <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @param resultSetHoldability one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @return a new <code>Statement</code> object that will generate\n     *         <code>ResultSet</code> objects with the given type,\n     *         concurrency, and holdability\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection\n     *            or the given parameters are not <code>ResultSet</code>\n     *            constants indicating type, concurrency, and holdability\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type, result set holdability and result set concurrency.\n     * @see ResultSet\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException",
    "returnType" : "PreparedStatement",
    "comment" : "\n     * Creates a <code>PreparedStatement</code> object that will generate\n     * <code>ResultSet</code> objects with the given type, concurrency,\n     * and holdability.\n     * <P>\n     * This method is the same as the <code>prepareStatement</code> method\n     * above, but it allows the default result set\n     * type, concurrency, and holdability to be overridden.\n     *\n     * @param sql a <code>String</code> object that is the SQL statement to\n     *            be sent to the database; may contain one or more '?' IN\n     *            parameters\n     * @param resultSetType one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @param resultSetConcurrency one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.CONCUR_READ_ONLY</code> or\n     *         <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @param resultSetHoldability one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @return a new <code>PreparedStatement</code> object, containing the\n     *         pre-compiled SQL statement, that will generate\n     *         <code>ResultSet</code> objects with the given type,\n     *         concurrency, and holdability\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection\n     *            or the given parameters are not <code>ResultSet</code>\n     *            constants indicating type, concurrency, and holdability\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type, result set holdability and result set concurrency.\n     * @see ResultSet\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException",
    "returnType" : "CallableStatement",
    "comment" : "\n     * Creates a <code>CallableStatement</code> object that will generate\n     * <code>ResultSet</code> objects with the given type and concurrency.\n     * This method is the same as the <code>prepareCall</code> method\n     * above, but it allows the default result set\n     * type, result set concurrency type and holdability to be overridden.\n     *\n     * @param sql a <code>String</code> object that is the SQL statement to\n     *            be sent to the database; may contain on or more '?' parameters\n     * @param resultSetType one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @param resultSetConcurrency one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.CONCUR_READ_ONLY</code> or\n     *         <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @param resultSetHoldability one of the following <code>ResultSet</code>\n     *        constants:\n     *         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @return a new <code>CallableStatement</code> object, containing the\n     *         pre-compiled SQL statement, that will generate\n     *         <code>ResultSet</code> objects with the given type,\n     *         concurrency, and holdability\n     * @exception SQLException if a database access error occurs, this\n     * method is called on a closed connection\n     *            or the given parameters are not <code>ResultSet</code>\n     *            constants indicating type, concurrency, and holdability\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type, result set holdability and result set concurrency.\n     * @see ResultSet\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException",
    "returnType" : "PreparedStatement",
    "comment" : "\n     * Creates a default <code>PreparedStatement</code> object that has\n     * the capability to retrieve auto-generated keys. The given constant\n     * tells the driver whether it should make auto-generated keys\n     * available for retrieval.  This parameter is ignored if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     * <P>\n     * <B>Note:</B> This method is optimized for handling\n     * parametric SQL statements that benefit from precompilation. If\n     * the driver supports precompilation,\n     * the method <code>prepareStatement</code> will send\n     * the statement to the database for precompilation. Some drivers\n     * may not support precompilation. In this case, the statement may\n     * not be sent to the database until the <code>PreparedStatement</code>\n     * object is executed.  This has no direct effect on users; however, it does\n     * affect which methods throw certain SQLExceptions.\n     * <P>\n     * Result sets created using the returned <code>PreparedStatement</code>\n     * object will by default be type <code>TYPE_FORWARD_ONLY</code>\n     * and have a concurrency level of <code>CONCUR_READ_ONLY</code>.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql an SQL statement that may contain one or more '?' IN\n     *        parameter placeholders\n     * @param autoGeneratedKeys a flag indicating whether auto-generated keys\n     *        should be returned; one of\n     *        <code>Statement.RETURN_GENERATED_KEYS</code> or\n     *        <code>Statement.NO_GENERATED_KEYS</code>\n     * @return a new <code>PreparedStatement</code> object, containing the\n     *         pre-compiled SQL statement, that will have the capability of\n     *         returning auto-generated keys\n     * @exception SQLException if a database access error occurs, this\n     *  method is called on a closed connection\n     *         or the given parameter is not a <code>Statement</code>\n     *         constant indicating whether auto-generated keys should be\n     *         returned\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method with a constant of Statement.RETURN_GENERATED_KEYS\n     * @since 1.4\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException",
    "returnType" : "PreparedStatement",
    "comment" : "\n     * Creates a default <code>PreparedStatement</code> object capable\n     * of returning the auto-generated keys designated by the given array.\n     * This array contains the indexes of the columns in the target\n     * table that contain the auto-generated keys that should be made\n     * available.  The driver will ignore the array if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     *<p>\n     * An SQL statement with or without IN parameters can be\n     * pre-compiled and stored in a <code>PreparedStatement</code> object. This\n     * object can then be used to efficiently execute this statement\n     * multiple times.\n     * <P>\n     * <B>Note:</B> This method is optimized for handling\n     * parametric SQL statements that benefit from precompilation. If\n     * the driver supports precompilation,\n     * the method <code>prepareStatement</code> will send\n     * the statement to the database for precompilation. Some drivers\n     * may not support precompilation. In this case, the statement may\n     * not be sent to the database until the <code>PreparedStatement</code>\n     * object is executed.  This has no direct effect on users; however, it does\n     * affect which methods throw certain SQLExceptions.\n     * <P>\n     * Result sets created using the returned <code>PreparedStatement</code>\n     * object will by default be type <code>TYPE_FORWARD_ONLY</code>\n     * and have a concurrency level of <code>CONCUR_READ_ONLY</code>.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql an SQL statement that may contain one or more '?' IN\n     *        parameter placeholders\n     * @param columnIndexes an array of column indexes indicating the columns\n     *        that should be returned from the inserted row or rows\n     * @return a new <code>PreparedStatement</code> object, containing the\n     *         pre-compiled statement, that is capable of returning the\n     *         auto-generated keys designated by the given array of column\n     *         indexes\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.4\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException",
    "returnType" : "PreparedStatement",
    "comment" : "\n     * Creates a default <code>PreparedStatement</code> object capable\n     * of returning the auto-generated keys designated by the given array.\n     * This array contains the names of the columns in the target\n     * table that contain the auto-generated keys that should be returned.\n     * The driver will ignore the array if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     * <P>\n     * An SQL statement with or without IN parameters can be\n     * pre-compiled and stored in a <code>PreparedStatement</code> object. This\n     * object can then be used to efficiently execute this statement\n     * multiple times.\n     * <P>\n     * <B>Note:</B> This method is optimized for handling\n     * parametric SQL statements that benefit from precompilation. If\n     * the driver supports precompilation,\n     * the method <code>prepareStatement</code> will send\n     * the statement to the database for precompilation. Some drivers\n     * may not support precompilation. In this case, the statement may\n     * not be sent to the database until the <code>PreparedStatement</code>\n     * object is executed.  This has no direct effect on users; however, it does\n     * affect which methods throw certain SQLExceptions.\n     * <P>\n     * Result sets created using the returned <code>PreparedStatement</code>\n     * object will by default be type <code>TYPE_FORWARD_ONLY</code>\n     * and have a concurrency level of <code>CONCUR_READ_ONLY</code>.\n     * The holdability of the created result sets can be determined by\n     * calling {@link #getHoldability}.\n     *\n     * @param sql an SQL statement that may contain one or more '?' IN\n     *        parameter placeholders\n     * @param columnNames an array of column names indicating the columns\n     *        that should be returned from the inserted row or rows\n     * @return a new <code>PreparedStatement</code> object, containing the\n     *         pre-compiled statement, that is capable of returning the\n     *         auto-generated keys designated by the given array of column\n     *         names\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed connection\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.4\n     ",
    "links" : [ "#getHoldability" ]
  }, {
    "name" : " Clob createClob() throws SQLException",
    "returnType" : "Clob",
    "comment" : "\n     * Constructs an object that implements the <code>Clob</code> interface. The object\n     * returned initially contains no data.  The <code>setAsciiStream</code>,\n     * <code>setCharacterStream</code> and <code>setString</code> methods of\n     * the <code>Clob</code> interface may be used to add data to the <code>Clob</code>.\n     * @return An object that implements the <code>Clob</code> interface\n     * @throws SQLException if an object that implements the\n     * <code>Clob</code> interface can not be constructed, this method is\n     * called on a closed connection or a database access error occurs.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this data type\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " Blob createBlob() throws SQLException",
    "returnType" : "Blob",
    "comment" : "\n     * Constructs an object that implements the <code>Blob</code> interface. The object\n     * returned initially contains no data.  The <code>setBinaryStream</code> and\n     * <code>setBytes</code> methods of the <code>Blob</code> interface may be used to add data to\n     * the <code>Blob</code>.\n     * @return  An object that implements the <code>Blob</code> interface\n     * @throws SQLException if an object that implements the\n     * <code>Blob</code> interface can not be constructed, this method is\n     * called on a closed connection or a database access error occurs.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this data type\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " NClob createNClob() throws SQLException",
    "returnType" : "NClob",
    "comment" : "\n     * Constructs an object that implements the <code>NClob</code> interface. The object\n     * returned initially contains no data.  The <code>setAsciiStream</code>,\n     * <code>setCharacterStream</code> and <code>setString</code> methods of the <code>NClob</code> interface may\n     * be used to add data to the <code>NClob</code>.\n     * @return An object that implements the <code>NClob</code> interface\n     * @throws SQLException if an object that implements the\n     * <code>NClob</code> interface can not be constructed, this method is\n     * called on a closed connection or a database access error occurs.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this data type\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLXML createSQLXML() throws SQLException",
    "returnType" : "SQLXML",
    "comment" : "\n     * Constructs an object that implements the <code>SQLXML</code> interface. The object\n     * returned initially contains no data. The <code>createXmlStreamWriter</code> object and\n     * <code>setString</code> method of the <code>SQLXML</code> interface may be used to add data to the <code>SQLXML</code>\n     * object.\n     * @return An object that implements the <code>SQLXML</code> interface\n     * @throws SQLException if an object that implements the <code>SQLXML</code> interface can not\n     * be constructed, this method is\n     * called on a closed connection or a database access error occurs.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this data type\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isValid(int timeout) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the connection has not been closed and is still valid.\n         * The driver shall submit a query on the connection or use some other\n         * mechanism that positively verifies the connection is still valid when\n         * this method is called.\n         * <p>\n         * The query submitted by the driver to validate the connection shall be\n         * executed in the context of the current transaction.\n         *\n         * @param timeout -             The time in seconds to wait for the database operation\n         *                                              used to validate the connection to complete.  If\n         *                                              the timeout period expires before the operation\n         *                                              completes, this method returns false.  A value of\n         *                                              0 indicates a timeout is not applied to the\n         *                                              database operation.\n         * <p>\n         * @return true if the connection is valid, false otherwise\n         * @exception SQLException if the value supplied for <code>timeout</code>\n         * is less then 0\n         * @since 1.6\n         * <p>\n         * @see java.sql.DatabaseMetaData#getClientInfoProperties\n         ",
    "links" : [ ]
  }, {
    "name" : " void setClientInfo(String name, String value) throws SQLClientInfoException",
    "returnType" : "void",
    "comment" : "\n         * Sets the value of the client info property specified by name to the\n         * value specified by value.\n         * <p>\n         * Applications may use the <code>DatabaseMetaData.getClientInfoProperties</code>\n         * method to determine the client info properties supported by the driver\n         * and the maximum length that may be specified for each property.\n         * <p>\n         * The driver stores the value specified in a suitable location in the\n         * database.  For example in a special register, session parameter, or\n         * system table column.  For efficiency the driver may defer setting the\n         * value in the database until the next time a statement is executed or\n         * prepared.  Other than storing the client information in the appropriate\n         * place in the database, these methods shall not alter the behavior of\n         * the connection in anyway.  The values supplied to these methods are\n         * used for accounting, diagnostics and debugging purposes only.\n         * <p>\n         * The driver shall generate a warning if the client info name specified\n         * is not recognized by the driver.\n         * <p>\n         * If the value specified to this method is greater than the maximum\n         * length for the property the driver may either truncate the value and\n         * generate a warning or generate a <code>SQLClientInfoException</code>.  If the driver\n         * generates a <code>SQLClientInfoException</code>, the value specified was not set on the\n         * connection.\n         * <p>\n         * The following are standard client info properties.  Drivers are not\n         * required to support these properties however if the driver supports a\n         * client info property that can be described by one of the standard\n         * properties, the standard property name should be used.\n         * <p>\n         * <ul>\n         * <li>ApplicationName  -       The name of the application currently utilizing\n         *                                                      the connection</li>\n         * <li>ClientUser               -       The name of the user that the application using\n         *                                                      the connection is performing work for.  This may\n         *                                                      not be the same as the user name that was used\n         *                                                      in establishing the connection.</li>\n         * <li>ClientHostname   -       The hostname of the computer the application\n         *                                                      using the connection is running on.</li>\n         * </ul>\n         * <p>\n         * @param name          The name of the client info property to set\n         * @param value         The value to set the client info property to.  If the\n         *                                      value is null, the current value of the specified\n         *                                      property is cleared.\n         * <p>\n         * @throws      SQLClientInfoException if the database server returns an error while\n         *                      setting the client info value on the database server or this method\n         * is called on a closed connection\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  }, {
    "name" : " void setClientInfo(Properties properties) throws SQLClientInfoException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the connection's client info properties.  The\n     * <code>Properties</code> object contains the names and values of the client info\n     * properties to be set.  The set of client info properties contained in\n     * the properties list replaces the current set of client info properties\n     * on the connection.  If a property that is currently set on the\n     * connection is not present in the properties list, that property is\n     * cleared.  Specifying an empty properties list will clear all of the\n     * properties on the connection.  See <code>setClientInfo (String, String)</code> for\n     * more information.\n     * <p>\n     * If an error occurs in setting any of the client info properties, a\n     * <code>SQLClientInfoException</code> is thrown. The <code>SQLClientInfoException</code>\n     * contains information indicating which client info properties were not set.\n     * The state of the client information is unknown because\n     * some databases do not allow multiple client info properties to be set\n     * atomically.  For those databases, one or more properties may have been\n     * set before the error occurred.\n     * <p>\n     *\n     * @param properties                the list of client info properties to set\n     * <p>\n     * @see java.sql.Connection#setClientInfo(String, String) setClientInfo(String, String)\n     * @since 1.6\n     * <p>\n     * @throws SQLClientInfoException if the database server returns an error while\n     *                  setting the clientInfo values on the database server or this method\n     * is called on a closed connection\n     * <p>\n     ",
    "links" : [ ]
  }, {
    "name" : " String getClientInfo(String name) throws SQLException",
    "returnType" : "String",
    "comment" : "\n         * Returns the value of the client info property specified by name.  This\n         * method may return null if the specified client info property has not\n         * been set and does not have a default value.  This method will also\n         * return null if the specified client info property name is not supported\n         * by the driver.\n         * <p>\n         * Applications may use the <code>DatabaseMetaData.getClientInfoProperties</code>\n         * method to determine the client info properties supported by the driver.\n         * <p>\n         * @param name          The name of the client info property to retrieve\n         * <p>\n         * @return                      The value of the client info property specified\n         * <p>\n         * @throws SQLException         if the database server returns an error when\n         *                                                      fetching the client info value from the database\n         *or this method is called on a closed connection\n         * <p>\n         * @since 1.6\n         * <p>\n         * @see java.sql.DatabaseMetaData#getClientInfoProperties\n         ",
    "links" : [ ]
  }, {
    "name" : " Properties getClientInfo() throws SQLException",
    "returnType" : "Properties",
    "comment" : "\n         * Returns a list containing the name and current value of each client info\n         * property supported by the driver.  The value of a client info property\n         * may be null if the property has not been set and does not have a\n         * default value.\n         * <p>\n         * @return      A <code>Properties</code> object that contains the name and current value of\n         *                      each of the client info properties supported by the driver.\n         * <p>\n         * @throws      SQLException if the database server returns an error when\n         *                      fetching the client info values from the database\n         * or this method is called on a closed connection\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  }, {
    "name" : " Array createArrayOf(String typeName, Object[] elements) throws SQLException",
    "returnType" : "Array",
    "comment" : "\n  * Factory method for creating Array objects.\n  *<p>\n  * <b>Note: </b>When <code>createArrayOf</code> is used to create an array object\n  * that maps to a primitive data type, then it is implementation-defined\n  * whether the <code>Array</code> object is an array of that primitive\n  * data type or an array of <code>Object</code>.\n  * <p>\n  * <b>Note: </b>The JDBC driver is responsible for mapping the elements\n  * <code>Object</code> array to the default JDBC SQL type defined in\n  * java.sql.Types for the given class of <code>Object</code>. The default\n  * mapping is specified in Appendix B of the JDBC specification.  If the\n  * resulting JDBC type is not the appropriate type for the given typeName then\n  * it is implementation defined whether an <code>SQLException</code> is\n  * thrown or the driver supports the resulting conversion.\n  *\n  * @param typeName the SQL name of the type the elements of the array map to. The typeName is a\n  * database-specific name which may be the name of a built-in type, a user-defined type or a standard  SQL type supported by this database. This\n  *  is the value returned by <code>Array.getBaseTypeName</code>\n  * @param elements the elements that populate the returned object\n  * @return an Array object whose elements map to the specified SQL type\n  * @throws SQLException if a database error occurs, the JDBC type is not\n  *  appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection\n  * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n  * @since 1.6\n  ",
    "links" : [ ]
  }, {
    "name" : " Struct createStruct(String typeName, Object[] attributes) throws SQLException",
    "returnType" : "Struct",
    "comment" : "\n  * Factory method for creating Struct objects.\n  *\n  * @param typeName the SQL type name of the SQL structured type that this <code>Struct</code>\n  * object maps to. The typeName is the name of  a user-defined type that\n  * has been defined for this database. It is the value returned by\n  * <code>Struct.getSQLTypeName</code>.\n\n  * @param attributes the attributes that populate the returned object\n  *  @return a Struct object that maps to the given SQL type and is populated with the given attributes\n  * @throws SQLException if a database error occurs, the typeName is null or this method is called on a closed connection\n  * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n  * @since 1.6\n  ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Statement createStatement() throws SQLException", " PreparedStatement prepareStatement(String sql) throws SQLException", " CallableStatement prepareCall(String sql) throws SQLException", " String nativeSQL(String sql) throws SQLException", " void setAutoCommit(boolean autoCommit) throws SQLException", " boolean getAutoCommit() throws SQLException", " void commit() throws SQLException", " void rollback() throws SQLException", " void close() throws SQLException", " boolean isClosed() throws SQLException", " DatabaseMetaData getMetaData() throws SQLException", " void setReadOnly(boolean readOnly) throws SQLException", " boolean isReadOnly() throws SQLException", " void setCatalog(String catalog) throws SQLException", " String getCatalog() throws SQLException", " void setTransactionIsolation(int level) throws SQLException", " int getTransactionIsolation() throws SQLException", " SQLWarning getWarnings() throws SQLException", " void clearWarnings() throws SQLException", " Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException", " PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException", " CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException", " java.util.Map<String, Class<?>> getTypeMap() throws SQLException", " void setTypeMap(java.util.Map<String, Class<?>> map) throws SQLException", " void setHoldability(int holdability) throws SQLException", " int getHoldability() throws SQLException", " Savepoint setSavepoint() throws SQLException", " Savepoint setSavepoint(String name) throws SQLException", " void rollback(Savepoint savepoint) throws SQLException", " void releaseSavepoint(Savepoint savepoint) throws SQLException", " Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException", " PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException", " CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException", " PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException", " PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException", " PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException", " Clob createClob() throws SQLException", " Blob createBlob() throws SQLException", " NClob createNClob() throws SQLException", " SQLXML createSQLXML() throws SQLException", " boolean isValid(int timeout) throws SQLException", " void setClientInfo(String name, String value) throws SQLClientInfoException", " void setClientInfo(Properties properties) throws SQLClientInfoException", " String getClientInfo(String name) throws SQLException", " Properties getClientInfo() throws SQLException", " Array createArrayOf(String typeName, Object[] elements) throws SQLException", " Struct createStruct(String typeName, Object[] attributes) throws SQLException" ],
  "variableNames" : [ "TRANSACTION_NONE", "TRANSACTION_READ_UNCOMMITTED", "TRANSACTION_READ_COMMITTED", "TRANSACTION_REPEATABLE_READ", "TRANSACTION_SERIALIZABLE" ]
}