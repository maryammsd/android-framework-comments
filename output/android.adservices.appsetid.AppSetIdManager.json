{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/appsetid/AppSetIdManager.java",
  "packageName" : "android.adservices.appsetid",
  "className" : "AppSetIdManager",
  "comment" : "\n * AppSetIdManager provides APIs for app and ad-SDKs to access appSetId for non-monetizing purpose.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "APPSETID_SERVICE",
    "type" : "String",
    "comment" : "\n     * Service used for registering AppSetIdManager in the system service registry.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_SDK",
    "type" : "String",
    "comment" : " When an app calls the AppSetId API directly, it sets the SDK name to empty string. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceBinder",
    "type" : "ServiceBinder<IAppSetIdService>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AppSetIdManager get(@NonNull Context context)",
    "returnType" : "AppSetIdManager",
    "comment" : "\n     * Factory method for creating an instance of AppSetIdManager.\n     *\n     * @param context The {@link Context} to use\n     * @return A {@link AppSetIdManager} instance\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkContext", "android.adservices.appsetid.AppSetIdManager" ]
  }, {
    "name" : "public AppSetIdManager initialize(Context context)",
    "returnType" : "AppSetIdManager",
    "comment" : "\n     * Initializes {@link AppSetIdManager} with the given {@code context}.\n     *\n     * <p>This method is called by the {@link SandboxedSdkContext} to propagate the correct context.\n     * For more information check the javadoc on the {@link\n     * android.app.sdksandbox.SdkSandboxSystemServiceRegistry}.\n     *\n     * @hide\n     * @see android.app.sdksandbox.SdkSandboxSystemServiceRegistry\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkContext", "android.app.sdksandbox.SdkSandboxSystemServiceRegistry", "android.adservices.appsetid.AppSetIdManager" ]
  }, {
    "name" : "private IAppSetIdService getService(@CallbackExecutor Executor executor, OutcomeReceiver<AppSetId, Exception> callback)",
    "returnType" : "IAppSetIdService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Context getContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getAppSetId(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AppSetId, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the AppSetId.\n     *\n     * @param executor The executor to run callback.\n     * @param callback The callback that's called after appsetid are available or an error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unbindFromService()",
    "returnType" : "void",
    "comment" : " TODO: change to @VisibleForTesting",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static AppSetIdManager get(@NonNull Context context)", "public AppSetIdManager initialize(Context context)", "private IAppSetIdService getService(@CallbackExecutor Executor executor, OutcomeReceiver<AppSetId, Exception> callback)", "private Context getContext()", "public void getAppSetId(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AppSetId, Exception> callback)", "public void unbindFromService()" ],
  "variableNames" : [ "APPSETID_SERVICE", "EMPTY_SDK", "mContext", "mServiceBinder" ]
}