{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Normalizer2Impl.java",
  "packageName" : "android.icu.impl",
  "className" : "Normalizer2Impl",
  "comment" : "\n * Low-level implementation of the Unicode Normalization Algorithm.\n * For the data structure and details see the documentation at the end of\n * C++ normalizer2impl.h and in the design doc at\n * https://icu.unicode.org/design/normalization/custom\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "IS_ACCEPTABLE",
    "type" : "IsAcceptable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_FORMAT",
    "type" : "int",
    "comment" : " \"Nrm2\"",
    "links" : [ ]
  }, {
    "name" : "segmentStarterMapper",
    "type" : "CodePointMap.ValueFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_YES_YES_WITH_CC",
    "type" : "int",
    "comment" : " Fixed norm16 values.",
    "links" : [ ]
  }, {
    "name" : "JAMO_VT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_NORMAL_MAYBE_YES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JAMO_L",
    "type" : "int",
    "comment" : " offset=1 hasCompBoundaryAfter=false",
    "links" : [ ]
  }, {
    "name" : "INERT",
    "type" : "int",
    "comment" : " offset=0 hasCompBoundaryAfter=true",
    "links" : [ ]
  }, {
    "name" : "HAS_COMP_BOUNDARY_AFTER",
    "type" : "int",
    "comment" : " norm16 bit 0 is comp-boundary-after.",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA_TCCC_0",
    "type" : "int",
    "comment" : " tccc (0, 1, >1) for quick FCC boundary-after tests.",
    "links" : [ ]
  }, {
    "name" : "DELTA_TCCC_1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA_TCCC_GT_1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA_TCCC_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_DELTA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_NORM_TRIE_OFFSET",
    "type" : "int",
    "comment" : " Byte offsets from the start of the data, after the generic header.",
    "links" : [ ]
  }, {
    "name" : "IX_EXTRA_DATA_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_SMALL_FCD_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_RESERVED3_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_TOTAL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_DECOMP_NO_CP",
    "type" : "int",
    "comment" : " Code point thresholds for quick check codes.",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_COMP_NO_MAYBE_CP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_YES_NO",
    "type" : "int",
    "comment" : " Mappings & compositions in [minYesNo..minYesNoMappingsOnly[. ",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_NO_NO",
    "type" : "int",
    "comment" : " Mappings are comp-normalized. ",
    "links" : [ ]
  }, {
    "name" : "IX_LIMIT_NO_NO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_MAYBE_YES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_YES_NO_MAPPINGS_ONLY",
    "type" : "int",
    "comment" : " Mappings only in [minYesNoMappingsOnly..minNoNo[. ",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_NO_NO_COMP_BOUNDARY_BEFORE",
    "type" : "int",
    "comment" : " Mappings are not comp-normalized but have a comp boundary before. ",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_NO_NO_COMP_NO_MAYBE_CC",
    "type" : "int",
    "comment" : " Mappings do not have a comp boundary before. ",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_NO_NO_EMPTY",
    "type" : "int",
    "comment" : " Mappings to the empty string. ",
    "links" : [ ]
  }, {
    "name" : "IX_MIN_LCCC_CP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAPPING_HAS_CCC_LCCC_WORD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAPPING_HAS_RAW_MAPPING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAPPING_LENGTH_MASK",
    "type" : "int",
    "comment" : " unused bit 0x20;",
    "links" : [ ]
  }, {
    "name" : "COMP_1_LAST_TUPLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMP_1_TRIPLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMP_1_TRAIL_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMP_1_TRAIL_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMP_1_TRAIL_SHIFT",
    "type" : "int",
    "comment" : " 10-1 for the \"triple\" bit",
    "links" : [ ]
  }, {
    "name" : "COMP_2_TRAIL_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMP_2_TRAIL_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataVersion",
    "type" : "VersionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minDecompNoCP",
    "type" : "int",
    "comment" : " BMP code point thresholds for quick check loops looking at single UTF-16 code units.",
    "links" : [ ]
  }, {
    "name" : "minCompNoMaybeCP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minLcccCP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minYesNo",
    "type" : "int",
    "comment" : " Norm16 value thresholds for quick check combinations and types of extra data.",
    "links" : [ ]
  }, {
    "name" : "minYesNoMappingsOnly",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minNoNo",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minNoNoCompBoundaryBefore",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minNoNoCompNoMaybeCC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minNoNoEmpty",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "limitNoNo",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "centerNoNoDelta",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minMaybeYes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "normTrie",
    "type" : "CodePointTrie.Fast16",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maybeYesCompositions",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extraData",
    "type" : "String",
    "comment" : " mappings and/or compositions for yesYes, yesNo & noNo characters",
    "links" : [ ]
  }, {
    "name" : "smallFCD",
    "type" : "byte[]",
    "comment" : " [0x100] one bit per 32 BMP code points, set if any FCD!=0",
    "links" : [ ]
  }, {
    "name" : "canonIterData",
    "type" : "CodePointTrie",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "canonStartSets",
    "type" : "ArrayList<UnicodeSet>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANON_NOT_SEGMENT_STARTER",
    "type" : "int",
    "comment" : " bits in canonIterData",
    "links" : [ ]
  }, {
    "name" : "CANON_HAS_COMPOSITIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANON_HAS_SET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANON_VALUE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Normalizer2Impl load(ByteBuffer bytes)",
    "returnType" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Normalizer2Impl load(String name)",
    "returnType" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addLcccChars(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addPropertyStarts(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCanonIterPropertyStarts(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized Normalizer2Impl ensureCanonIterData()",
    "returnType" : "Normalizer2Impl",
    "comment" : "\n     * Builds the canonical-iterator data for this instance.\n     * This is required before any of {@link #isCanonSegmentStarter(int)} or\n     * {@link #getCanonStartSet(int, UnicodeSet)} are called,\n     * or else they crash.\n     * @return this\n     ",
    "links" : [ "#getCanonStartSet(int", "#isCanonSegmentStarter(int)" ]
  }, {
    "name" : "public int getNorm16(int c)",
    "returnType" : "int",
    "comment" : " Surrogate code *points* are inert.",
    "links" : [ ]
  }, {
    "name" : "public int getRawNorm16(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCompQuickCheck(int norm16)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAlgorithmicNoNo(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCompNo(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDecompYes(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCC(int norm16)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getCCFromNormalYesOrMaybe(int norm16)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getCCFromYesOrMaybe(int norm16)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCCFromYesOrMaybeCP(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFCD16(int c)",
    "returnType" : "int",
    "comment" : "\n     * Returns the FCD data for code point c.\n     * @param c A Unicode code point.\n     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean singleLeadMightHaveNonZeroFCD16(int lead)",
    "returnType" : "boolean",
    "comment" : " Returns true if the single-or-lead code unit c might have non-zero FCD data. ",
    "links" : [ ]
  }, {
    "name" : "public int getFCD16FromNormData(int c)",
    "returnType" : "int",
    "comment" : " Gets the FCD value from the regular normalization data. ",
    "links" : [ ]
  }, {
    "name" : "public String getDecomposition(int c)",
    "returnType" : "String",
    "comment" : "\n     * Gets the decomposition for one code point.\n     * @param c code point\n     * @return c's decomposition, if it has one; returns null if it does not have a decomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRawDecomposition(int c)",
    "returnType" : "String",
    "comment" : "\n     * Gets the raw decomposition for one code point.\n     * @param c code point\n     * @return c's raw decomposition, if it has one; returns null if it does not have a decomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCanonSegmentStarter(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if code point c starts a canonical-iterator string segment.\n     * <b>{@link #ensureCanonIterData()} must have been called before this method,\n     * or else this method will crash.</b>\n     * @param c A Unicode code point.\n     * @return true if c starts a canonical-iterator string segment.\n     ",
    "links" : [ "#ensureCanonIterData()" ]
  }, {
    "name" : "public boolean getCanonStartSet(int c, UnicodeSet set)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there are characters whose decomposition starts with c.\n     * If so, then the set is cleared and then filled with those characters.\n     * <b>{@link #ensureCanonIterData()} must have been called before this method,\n     * or else this method will crash.</b>\n     * @param c A Unicode code point.\n     * @param set A UnicodeSet to receive the characters whose decompositions\n     *        start with c, if there are any.\n     * @return true if there are characters whose decomposition starts with c.\n     ",
    "links" : [ "#ensureCanonIterData()" ]
  }, {
    "name" : "public Appendable decompose(CharSequence s, StringBuilder dest)",
    "returnType" : "Appendable",
    "comment" : " NFD without an NFD Normalizer2 instance.",
    "links" : [ ]
  }, {
    "name" : "public void decompose(CharSequence s, int src, int limit, StringBuilder dest, int destLengthEstimate)",
    "returnType" : "void",
    "comment" : "\n     * Decomposes s[src, limit[ and writes the result to dest.\n     * limit can be NULL if src is NUL-terminated.\n     * destLengthEstimate is the initial dest buffer capacity and can be -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int decompose(CharSequence s, int src, int limit, ReorderingBuffer buffer)",
    "returnType" : "int",
    "comment" : " buffer==NULL: isNormalized/quickCheck/spanQuickCheckYes",
    "links" : [ ]
  }, {
    "name" : "public void decomposeAndAppend(CharSequence s, boolean doDecompose, ReorderingBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean compose(CharSequence s, int src, int limit, boolean onlyContiguous, boolean doCompose, ReorderingBuffer buffer)",
    "returnType" : "boolean",
    "comment" : " !doCompose: isNormalized (buffer must be empty and initialized)",
    "links" : [ ]
  }, {
    "name" : "public int composeQuickCheck(CharSequence s, int src, int limit, boolean onlyContiguous, boolean doSpan)",
    "returnType" : "int",
    "comment" : "\n     * Very similar to compose(): Make the same changes in both places if relevant.\n     * doSpan: spanQuickCheckYes (ignore bit 0 of the return value)\n     * !doSpan: quickCheck\n     * @return bits 31..1: spanQuickCheckYes (==s.length() if \"yes\") and\n     *         bit 0: set if \"maybe\"; otherwise, if the span length&lt;s.length()\n     *         then the quick check result is \"no\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public void composeAndAppend(CharSequence s, boolean doCompose, boolean onlyContiguous, ReorderingBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int makeFCD(CharSequence s, int src, int limit, ReorderingBuffer buffer)",
    "returnType" : "int",
    "comment" : " buffer==NULL: isNormalized/quickCheck/spanQuickCheckYes",
    "links" : [ ]
  }, {
    "name" : "public void makeFCDAndAppend(CharSequence s, boolean doMakeFCD, ReorderingBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDecompBoundaryBefore(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean norm16HasDecompBoundaryBefore(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDecompBoundaryAfter(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean norm16HasDecompBoundaryAfter(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDecompInert(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCompBoundaryBefore(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCompBoundaryAfter(int c, boolean onlyContiguous)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCompInert(int c, boolean onlyContiguous)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFCDBoundaryBefore(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFCDBoundaryAfter(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFCDInert(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isMaybe(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isMaybeOrNonZeroCC(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isInert(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isJamoL(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isJamoVT(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int hangulLVT()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isHangulLV(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isHangulLVT(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCompYesAndZeroCC(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isDecompYesAndZeroCC(int norm16)",
    "returnType" : "boolean",
    "comment" : " }",
    "links" : [ ]
  }, {
    "name" : "private boolean isMostDecompYesAndZeroCC(int norm16)",
    "returnType" : "boolean",
    "comment" : "\n     * A little faster and simpler than isDecompYesAndZeroCC() but does not include\n     * the MaybeYes which combine-forward and have ccc=0.\n     * (Standard Unicode 10 normalization does not have such characters.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isDecompNoAlgorithmic(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getCCFromNoNo(int norm16)",
    "returnType" : "int",
    "comment" : " }",
    "links" : [ ]
  }, {
    "name" : " int getTrailCCFromCompYesAndZeroCC(int norm16)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int mapAlgorithmic(int c, int norm16)",
    "returnType" : "int",
    "comment" : " Requires algorithmic-NoNo.",
    "links" : [ ]
  }, {
    "name" : "private int getCompositionsListForDecompYes(int norm16)",
    "returnType" : "int",
    "comment" : "\n     * @return index into maybeYesCompositions, or -1\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCompositionsListForComposite(int norm16)",
    "returnType" : "int",
    "comment" : "\n     * @return index into maybeYesCompositions\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCompositionsListForMaybe(int norm16)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getCompositionsList(int norm16)",
    "returnType" : "int",
    "comment" : "\n     * @param c code point must have compositions\n     * @return index into maybeYesCompositions\n     ",
    "links" : [ ]
  }, {
    "name" : "private int decomposeShort(CharSequence s, int src, int limit, boolean stopAtCompBoundary, boolean onlyContiguous, ReorderingBuffer buffer)",
    "returnType" : "int",
    "comment" : " Public in Java for collation implementation code.",
    "links" : [ ]
  }, {
    "name" : "private void decompose(int c, int norm16, ReorderingBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int combine(String compositions, int list, int trail)",
    "returnType" : "int",
    "comment" : "\n     * Finds the recomposition result for\n     * a forward-combining \"lead\" character,\n     * specified with a pointer to its compositions list,\n     * and a backward-combining \"trail\" character.\n     *\n     * <p>If the lead and trail characters combine, then this function returns\n     * the following \"compositeAndFwd\" value:\n     * <pre>\n     * Bits 21..1  composite character\n     * Bit      0  set if the composite is a forward-combining starter\n     * </pre>\n     * otherwise it returns -1.\n     *\n     * <p>The compositions list has (trail, compositeAndFwd) pair entries,\n     * encoded as either pairs or triples of 16-bit units.\n     * The last entry has the high bit of its first unit set.\n     *\n     * <p>The list is sorted by ascending trail characters (there are no duplicates).\n     * A linear search is used.\n     *\n     * <p>See normalizer2impl.h for a more detailed description\n     * of the compositions list format.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addComposites(int list, UnicodeSet set)",
    "returnType" : "void",
    "comment" : "\n     * @param list some character's compositions list\n     * @param set recursively receives the composites from these compositions\n     ",
    "links" : [ ]
  }, {
    "name" : "private void recompose(ReorderingBuffer buffer, int recomposeStartIndex, boolean onlyContiguous)",
    "returnType" : "void",
    "comment" : "\n     * Recomposes the buffer text starting at recomposeStartIndex\n     * (which is in NFD - decomposed and canonically ordered),\n     * and truncates the buffer contents.\n     *\n     * Note that recomposition never lengthens the text:\n     * Any character consists of either one or two code units;\n     * a composition may contain at most one more code unit than the original starter,\n     * while the combining mark that is removed has at least one code unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int composePair(int a, int b)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasCompBoundaryBefore(int c, int norm16)",
    "returnType" : "boolean",
    "comment" : "\n     * Does c have a composition boundary before it?\n     * True if its decomposition begins with a character that has\n     * ccc=0 && NFC_QC=Yes (isCompYesAndZeroCC()).\n     * As a shortcut, this is true if c itself has ccc=0 && NFC_QC=Yes\n     * (isCompYesAndZeroCC()) so we need not decompose.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean norm16HasCompBoundaryBefore(int norm16)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasCompBoundaryBefore(CharSequence s, int src, int limit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean norm16HasCompBoundaryAfter(int norm16, boolean onlyContiguous)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasCompBoundaryAfter(CharSequence s, int start, int p, boolean onlyContiguous)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isTrailCC01ForCompBoundaryAfter(int norm16)",
    "returnType" : "boolean",
    "comment" : " For FCC: Given norm16 HAS_COMP_BOUNDARY_AFTER, does it have tccc<=1? ",
    "links" : [ ]
  }, {
    "name" : "private int findPreviousCompBoundary(CharSequence s, int p, boolean onlyContiguous)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findNextCompBoundary(CharSequence s, int p, int limit, boolean onlyContiguous)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findPreviousFCDBoundary(CharSequence s, int p)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findNextFCDBoundary(CharSequence s, int p, int limit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getPreviousTrailCC(CharSequence s, int start, int p)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addToStartSet(MutableCodePointTrie mutableTrie, int origin, int decompLead)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Normalizer2Impl load(ByteBuffer bytes)", "public Normalizer2Impl load(String name)", "public void addLcccChars(UnicodeSet set)", "public void addPropertyStarts(UnicodeSet set)", "public void addCanonIterPropertyStarts(UnicodeSet set)", "public synchronized Normalizer2Impl ensureCanonIterData()", "public int getNorm16(int c)", "public int getRawNorm16(int c)", "public int getCompQuickCheck(int norm16)", "public boolean isAlgorithmicNoNo(int norm16)", "public boolean isCompNo(int norm16)", "public boolean isDecompYes(int norm16)", "public int getCC(int norm16)", "public static int getCCFromNormalYesOrMaybe(int norm16)", "public static int getCCFromYesOrMaybe(int norm16)", "public int getCCFromYesOrMaybeCP(int c)", "public int getFCD16(int c)", "public boolean singleLeadMightHaveNonZeroFCD16(int lead)", "public int getFCD16FromNormData(int c)", "public String getDecomposition(int c)", "public String getRawDecomposition(int c)", "public boolean isCanonSegmentStarter(int c)", "public boolean getCanonStartSet(int c, UnicodeSet set)", "public Appendable decompose(CharSequence s, StringBuilder dest)", "public void decompose(CharSequence s, int src, int limit, StringBuilder dest, int destLengthEstimate)", "public int decompose(CharSequence s, int src, int limit, ReorderingBuffer buffer)", "public void decomposeAndAppend(CharSequence s, boolean doDecompose, ReorderingBuffer buffer)", "public boolean compose(CharSequence s, int src, int limit, boolean onlyContiguous, boolean doCompose, ReorderingBuffer buffer)", "public int composeQuickCheck(CharSequence s, int src, int limit, boolean onlyContiguous, boolean doSpan)", "public void composeAndAppend(CharSequence s, boolean doCompose, boolean onlyContiguous, ReorderingBuffer buffer)", "public int makeFCD(CharSequence s, int src, int limit, ReorderingBuffer buffer)", "public void makeFCDAndAppend(CharSequence s, boolean doMakeFCD, ReorderingBuffer buffer)", "public boolean hasDecompBoundaryBefore(int c)", "public boolean norm16HasDecompBoundaryBefore(int norm16)", "public boolean hasDecompBoundaryAfter(int c)", "public boolean norm16HasDecompBoundaryAfter(int norm16)", "public boolean isDecompInert(int c)", "public boolean hasCompBoundaryBefore(int c)", "public boolean hasCompBoundaryAfter(int c, boolean onlyContiguous)", "public boolean isCompInert(int c, boolean onlyContiguous)", "public boolean hasFCDBoundaryBefore(int c)", "public boolean hasFCDBoundaryAfter(int c)", "public boolean isFCDInert(int c)", "private boolean isMaybe(int norm16)", "private boolean isMaybeOrNonZeroCC(int norm16)", "private static boolean isInert(int norm16)", "private static boolean isJamoL(int norm16)", "private static boolean isJamoVT(int norm16)", "private int hangulLVT()", "private boolean isHangulLV(int norm16)", "private boolean isHangulLVT(int norm16)", "private boolean isCompYesAndZeroCC(int norm16)", "private boolean isDecompYesAndZeroCC(int norm16)", "private boolean isMostDecompYesAndZeroCC(int norm16)", "private boolean isDecompNoAlgorithmic(int norm16)", "private int getCCFromNoNo(int norm16)", " int getTrailCCFromCompYesAndZeroCC(int norm16)", "private int mapAlgorithmic(int c, int norm16)", "private int getCompositionsListForDecompYes(int norm16)", "private int getCompositionsListForComposite(int norm16)", "private int getCompositionsListForMaybe(int norm16)", "private int getCompositionsList(int norm16)", "private int decomposeShort(CharSequence s, int src, int limit, boolean stopAtCompBoundary, boolean onlyContiguous, ReorderingBuffer buffer)", "private void decompose(int c, int norm16, ReorderingBuffer buffer)", "private static int combine(String compositions, int list, int trail)", "private void addComposites(int list, UnicodeSet set)", "private void recompose(ReorderingBuffer buffer, int recomposeStartIndex, boolean onlyContiguous)", "public int composePair(int a, int b)", "private boolean hasCompBoundaryBefore(int c, int norm16)", "private boolean norm16HasCompBoundaryBefore(int norm16)", "private boolean hasCompBoundaryBefore(CharSequence s, int src, int limit)", "private boolean norm16HasCompBoundaryAfter(int norm16, boolean onlyContiguous)", "private boolean hasCompBoundaryAfter(CharSequence s, int start, int p, boolean onlyContiguous)", "private boolean isTrailCC01ForCompBoundaryAfter(int norm16)", "private int findPreviousCompBoundary(CharSequence s, int p, boolean onlyContiguous)", "private int findNextCompBoundary(CharSequence s, int p, int limit, boolean onlyContiguous)", "private int findPreviousFCDBoundary(CharSequence s, int p)", "private int findNextFCDBoundary(CharSequence s, int p, int limit)", "private int getPreviousTrailCC(CharSequence s, int start, int p)", "private void addToStartSet(MutableCodePointTrie mutableTrie, int origin, int decompLead)" ],
  "variableNames" : [ "IS_ACCEPTABLE", "DATA_FORMAT", "segmentStarterMapper", "MIN_YES_YES_WITH_CC", "JAMO_VT", "MIN_NORMAL_MAYBE_YES", "JAMO_L", "INERT", "HAS_COMP_BOUNDARY_AFTER", "OFFSET_SHIFT", "DELTA_TCCC_0", "DELTA_TCCC_1", "DELTA_TCCC_GT_1", "DELTA_TCCC_MASK", "DELTA_SHIFT", "MAX_DELTA", "IX_NORM_TRIE_OFFSET", "IX_EXTRA_DATA_OFFSET", "IX_SMALL_FCD_OFFSET", "IX_RESERVED3_OFFSET", "IX_TOTAL_SIZE", "IX_MIN_DECOMP_NO_CP", "IX_MIN_COMP_NO_MAYBE_CP", "IX_MIN_YES_NO", "IX_MIN_NO_NO", "IX_LIMIT_NO_NO", "IX_MIN_MAYBE_YES", "IX_MIN_YES_NO_MAPPINGS_ONLY", "IX_MIN_NO_NO_COMP_BOUNDARY_BEFORE", "IX_MIN_NO_NO_COMP_NO_MAYBE_CC", "IX_MIN_NO_NO_EMPTY", "IX_MIN_LCCC_CP", "IX_COUNT", "MAPPING_HAS_CCC_LCCC_WORD", "MAPPING_HAS_RAW_MAPPING", "MAPPING_LENGTH_MASK", "COMP_1_LAST_TUPLE", "COMP_1_TRIPLE", "COMP_1_TRAIL_LIMIT", "COMP_1_TRAIL_MASK", "COMP_1_TRAIL_SHIFT", "COMP_2_TRAIL_SHIFT", "COMP_2_TRAIL_MASK", "dataVersion", "minDecompNoCP", "minCompNoMaybeCP", "minLcccCP", "minYesNo", "minYesNoMappingsOnly", "minNoNo", "minNoNoCompBoundaryBefore", "minNoNoCompNoMaybeCC", "minNoNoEmpty", "limitNoNo", "centerNoNoDelta", "minMaybeYes", "normTrie", "maybeYesCompositions", "extraData", "smallFCD", "canonIterData", "canonStartSets", "CANON_NOT_SEGMENT_STARTER", "CANON_HAS_COMPOSITIONS", "CANON_HAS_SET", "CANON_VALUE_MASK" ]
}