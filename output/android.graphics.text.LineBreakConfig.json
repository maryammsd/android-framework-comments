{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/text/LineBreakConfig.java",
  "packageName" : "android.graphics.text",
  "className" : "LineBreakConfig",
  "comment" : "\n * Specifies the line-break strategies for text wrapping.\n *\n * <p>See the\n * <a href=\"https://www.w3.org/TR/css-text-3/#line-break-property\" class=\"external\">\n * line-break property</a> for more information.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "HYPHENATION_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * No hyphenation preference is specified.\n     *\n     * <p>\n     * This is a special value of hyphenation preference indicating no hyphenation preference is\n     * specified. When overriding a {@link LineBreakConfig} with another {@link LineBreakConfig}\n     * with {@link Builder#merge(LineBreakConfig)} function, the hyphenation preference of\n     * overridden config will be kept if the hyphenation preference of overriding config is\n     * {@link #HYPHENATION_UNSPECIFIED}.\n     *\n     * <p>\n     * <pre>\n     *     val override = LineBreakConfig.Builder()\n     *          .setLineBreakWordStyle(LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE)\n     *          .build();  // UNSPECIFIED if no setHyphenation is called.\n     *     val config = LineBreakConfig.Builder()\n     *          .setHyphenation(LineBreakConfig.HYPHENATION_DISABLED)\n     *          .merge(override)\n     *          .build()\n     *     // Here, config has HYPHENATION_DISABLED for line break config and\n     *     // LINE_BREAK_WORD_STYLE_PHRASE for line break word style.\n     * </pre>\n     *\n     * <p>\n     * This value is resolved to {@link #HYPHENATION_ENABLED} if this value is used for text\n     * layout/rendering.\n     ",
    "links" : [ "#HYPHENATION_ENABLED", "android.graphics.text.LineBreakConfig", "#merge(LineBreakConfig)", "#HYPHENATION_UNSPECIFIED" ]
  }, {
    "name" : "HYPHENATION_DISABLED",
    "type" : "int",
    "comment" : "\n     * The hyphenation is disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_ENABLED",
    "type" : "int",
    "comment" : "\n     * The hyphenation is enabled.\n     *\n     * Note: Even if the hyphenation is enabled with a line break strategy\n     * {@link LineBreaker#BREAK_STRATEGY_SIMPLE}, the hyphenation will not be performed unless a\n     * single word cannot meet width constraints.\n     ",
    "links" : [ "android.graphics.text.LineBreaker#BREAK_STRATEGY_SIMPLE" ]
  }, {
    "name" : "LINE_BREAK_STYLE_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * No line break style is specified.\n     *\n     * <p>\n     * This is a special value of line break style indicating no style value is specified.\n     * When overriding a {@link LineBreakConfig} with another {@link LineBreakConfig} with\n     * {@link Builder#merge(LineBreakConfig)} function, the line break style of overridden config\n     * will be kept if the line break style of overriding config is\n     * {@link #LINE_BREAK_STYLE_UNSPECIFIED}.\n     *\n     * <pre>\n     *     val override = LineBreakConfig.Builder()\n     *          .setLineBreakWordStyle(LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE)\n     *          .build();  // UNSPECIFIED if no setLineBreakStyle is called.\n     *     val config = LineBreakConfig.Builder()\n     *          .setLineBreakStyle(LineBreakConfig.LINE_BREAK_STYLE_STRICT)\n     *          .merge(override)\n     *          .build()\n     *     // Here, config has LINE_BREAK_STYLE_STRICT for line break config and\n     *     // LINE_BREAK_WORD_STYLE_PHRASE for line break word style.\n     * </pre>\n     *\n     * <p>\n     * This value is resolved to {@link #LINE_BREAK_STYLE_NONE} if the target SDK version is API\n     * {@link Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or before and this value is used for text\n     * layout/rendering. This value is resolved to {@link #LINE_BREAK_STYLE_AUTO} if the target SDK\n     * version is API {@link Build.VERSION_CODES#VANILLA_ICE_CREAM} or after and this value is\n     * used for text layout/rendering.\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "#LINE_BREAK_STYLE_AUTO", "#LINE_BREAK_STYLE_NONE", "#LINE_BREAK_STYLE_UNSPECIFIED", "android.graphics.text.LineBreakConfig", "#merge(LineBreakConfig)", "Build.VERSION_CODES#UPSIDE_DOWN_CAKE" ]
  }, {
    "name" : "LINE_BREAK_STYLE_NONE",
    "type" : "int",
    "comment" : "\n     * No line-break rules are used for line breaking.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK_STYLE_LOOSE",
    "type" : "int",
    "comment" : "\n     * The least restrictive line-break rules are used for line breaking. This\n     * setting is typically used for short lines.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK_STYLE_NORMAL",
    "type" : "int",
    "comment" : "\n     * The most common line-break rules are used for line breaking.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK_STYLE_STRICT",
    "type" : "int",
    "comment" : "\n     * The most strict line-break rules are used for line breaking.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK_STYLE_NO_BREAK",
    "type" : "int",
    "comment" : "\n     * The line break style that used for preventing automatic line breaking.\n     *\n     * This is useful when you want to preserve some words in the same line by using\n     * {@link android.text.style.LineBreakConfigSpan} or\n     * {@link android.text.style.LineBreakConfigSpan#createNoBreakSpan()} as a shorthand.\n     * Note that even if this style is specified, the grapheme based line break is still performed\n     * for preventing clipping text.\n     *\n     * @see android.text.style.LineBreakConfigSpan\n     * @see android.text.style.LineBreakConfigSpan#createNoBreakSpan()\n     ",
    "links" : [ "android.text.style.LineBreakConfigSpan", "android.text.style.LineBreakConfigSpan#createNoBreakSpan()" ]
  }, {
    "name" : "LINE_BREAK_STYLE_AUTO",
    "type" : "int",
    "comment" : "\n     * A special value for the line breaking style option.\n     *\n     * <p>\n     * The auto option for the line break style set the line break style based on the locale of the\n     * text rendering context. You can specify the context locale by\n     * {@link android.widget.TextView#setTextLocales(LocaleList)} or\n     * {@link android.graphics.Paint#setTextLocales(LocaleList)}.\n     *\n     * <p>\n     * In the API {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}, auto option does followings:\n     * - If at least one locale in the locale list contains Japanese script, this option is\n     * equivalent to {@link #LINE_BREAK_STYLE_STRICT}.\n     * - Otherwise, this option is equivalent to {@link #LINE_BREAK_STYLE_NONE}.\n     *\n     * <p>\n     * Note: future versions may have special line breaking style rules for other locales.\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.graphics.Paint#setTextLocales(LocaleList)", "#LINE_BREAK_STYLE_NONE", "android.widget.TextView#setTextLocales(LocaleList)", "#LINE_BREAK_STYLE_STRICT" ]
  }, {
    "name" : "LINE_BREAK_WORD_STYLE_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * No line break word style is specified.\n     *\n     * This is a special value of line break word style indicating no style value is specified.\n     * When overriding a {@link LineBreakConfig} with another {@link LineBreakConfig} with\n     * {@link Builder#merge(LineBreakConfig)} function, the line break word style of overridden\n     * config will be kept if the line break word style of overriding config is\n     * {@link #LINE_BREAK_WORD_STYLE_UNSPECIFIED}.\n     *\n     * <pre>\n     *     val override = LineBreakConfig.Builder()\n     *          .setLineBreakStyle(LineBreakConfig.LINE_BREAK_STYLE_STRICT)\n     *          .build();  // UNSPECIFIED if no setLineBreakWordStyle is called.\n     *     val config = LineBreakConfig.Builder()\n     *          .setLineBreakWordStyle(LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE)\n     *          .merge(override)\n     *          .build()\n     *     // Here, config has LINE_BREAK_STYLE_STRICT for line break config and\n     *     // LINE_BREAK_WORD_STYLE_PHRASE for line break word style.\n     * </pre>\n     *\n     * This value is resolved to {@link #LINE_BREAK_WORD_STYLE_NONE} if the target SDK version is\n     * API {@link Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or before and this value is used for text\n     * layout/rendering. This value is resolved to {@link #LINE_BREAK_WORD_STYLE_AUTO} if the target\n     * SDK version is API {@link Build.VERSION_CODES#VANILLA_ICE_CREAM} or after and this value is\n     * used for text layout/rendering.\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "#LINE_BREAK_WORD_STYLE_NONE", "android.graphics.text.LineBreakConfig", "#merge(LineBreakConfig)", "#LINE_BREAK_WORD_STYLE_UNSPECIFIED", "Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#LINE_BREAK_WORD_STYLE_AUTO" ]
  }, {
    "name" : "LINE_BREAK_WORD_STYLE_NONE",
    "type" : "int",
    "comment" : "\n     * No line-break word style is used for line breaking.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK_WORD_STYLE_PHRASE",
    "type" : "int",
    "comment" : "\n     * Line breaking is based on phrases, which results in text wrapping only on\n     * meaningful words.\n     *\n     * <p>Support for this line-break word style depends on locale. If the\n     * current locale does not support phrase-based text wrapping, this setting\n     * has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK_WORD_STYLE_AUTO",
    "type" : "int",
    "comment" : "\n     * A special value for the line breaking word style option.\n     *\n     * <p>\n     * The auto option for the line break word style does some heuristics based on locales and line\n     * count.\n     *\n     * <p>\n     * In the API {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}, auto option does followings:\n     * - If at least one locale in the locale list contains Korean script, this option is equivalent\n     * to {@link #LINE_BREAK_WORD_STYLE_PHRASE}.\n     * - If not, then if at least one locale in the locale list contains Japanese script, this\n     * option is equivalent to {@link #LINE_BREAK_WORD_STYLE_PHRASE} if the result of its line\n     * count is less than 5 lines.\n     * - Otherwise, this option is equivalent to {@link #LINE_BREAK_WORD_STYLE_NONE}.\n     *\n     * <p>\n     * Note: future versions may have special line breaking word style rules for other locales.\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "#LINE_BREAK_WORD_STYLE_NONE", "#LINE_BREAK_WORD_STYLE_PHRASE" ]
  }, {
    "name" : "NONE",
    "type" : "LineBreakConfig",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mLineBreakStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineBreakWordStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHyphenation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<LineBreakConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LineBreakConfig getLineBreakConfig(@LineBreakStyle int lineBreakStyle, @LineBreakWordStyle int lineBreakWordStyle)",
    "returnType" : "LineBreakConfig",
    "comment" : "\n     * Creates a {@code LineBreakConfig} instance with the provided line break\n     * parameters.\n     *\n     * @param lineBreakStyle The line-break style for text wrapping.\n     * @param lineBreakWordStyle The line-break word style for text wrapping.\n     * @return The {@code LineBreakConfig} instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineBreakStyle()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current line-break style.\n     *\n     * @return The line-break style to be used for text wrapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getResolvedLineBreakStyle(@Nullable LineBreakConfig config)",
    "returnType" : "int",
    "comment" : "\n     * Gets the resolved line break style.\n     *\n     * This method never returns {@link #LINE_BREAK_STYLE_UNSPECIFIED}.\n     *\n     * @return The line break style.\n     * @hide\n     ",
    "links" : [ "#LINE_BREAK_STYLE_UNSPECIFIED" ]
  }, {
    "name" : "public int getLineBreakWordStyle()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current line-break word style.\n     *\n     * @return The line-break word style to be used for text wrapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getResolvedLineBreakWordStyle(@Nullable LineBreakConfig config)",
    "returnType" : "int",
    "comment" : "\n     * Gets the resolved line break style.\n     *\n     * This method never returns {@link #LINE_BREAK_WORD_STYLE_UNSPECIFIED}.\n     *\n     * @return The line break word style.\n     * @hide\n     ",
    "links" : [ "#LINE_BREAK_WORD_STYLE_UNSPECIFIED" ]
  }, {
    "name" : "public int getHyphenation()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hyphenation preference.\n     *\n     * @return A hyphenation preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getResolvedHyphenation(@Nullable LineBreakConfig config)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hyphenation preference.\n     *\n     * This method never returns {@link #HYPHENATION_UNSPECIFIED}.\n     *\n     * @return A hyphenation preference.\n     * @hide\n     ",
    "links" : [ "#HYPHENATION_UNSPECIFIED" ]
  }, {
    "name" : "public LineBreakConfig merge(@NonNull LineBreakConfig config)",
    "returnType" : "LineBreakConfig",
    "comment" : "\n     * Generates a new {@link LineBreakConfig} instance merged with given {@code config}.\n     *\n     * If values of passing {@code config} are unspecified, the original values are kept. For\n     * example, the following code shows how line break config is merged.\n     *\n     * <pre>\n     *     val override = LineBreakConfig.Builder()\n     *          .setLineBreakWordStyle(LineBreakConfig.LINE_BREAK_WORD_STYLE_PHRASE)\n     *          .build();  // UNSPECIFIED if no setLineBreakStyle is called.\n     *     val config = LineBreakConfig.Builder()\n     *          .setLineBreakStyle(LineBreakConfig.LINE_BREAK_STYLE_STRICT)\n     *          .build();\n     *\n     *     val newConfig = config.merge(override)\n     *     // newConfig has LINE_BREAK_STYLE_STRICT of line break style and\n     *     LINE_BREAK_WORD_STYLE_PHRASE of line break word style.\n     * </pre>\n     *\n     * @param config an overriding config.\n     * @return newly created instance that is current style merged with passed config.\n     ",
    "links" : [ "android.graphics.text.LineBreakConfig" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static LineBreakConfig getLineBreakConfig(@LineBreakStyle int lineBreakStyle, @LineBreakWordStyle int lineBreakWordStyle)", "public int getLineBreakStyle()", "public static int getResolvedLineBreakStyle(@Nullable LineBreakConfig config)", "public int getLineBreakWordStyle()", "public static int getResolvedLineBreakWordStyle(@Nullable LineBreakConfig config)", "public int getHyphenation()", "public static int getResolvedHyphenation(@Nullable LineBreakConfig config)", "public LineBreakConfig merge(@NonNull LineBreakConfig config)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "HYPHENATION_UNSPECIFIED", "HYPHENATION_DISABLED", "HYPHENATION_ENABLED", "LINE_BREAK_STYLE_UNSPECIFIED", "LINE_BREAK_STYLE_NONE", "LINE_BREAK_STYLE_LOOSE", "LINE_BREAK_STYLE_NORMAL", "LINE_BREAK_STYLE_STRICT", "LINE_BREAK_STYLE_NO_BREAK", "LINE_BREAK_STYLE_AUTO", "LINE_BREAK_WORD_STYLE_UNSPECIFIED", "LINE_BREAK_WORD_STYLE_NONE", "LINE_BREAK_WORD_STYLE_PHRASE", "LINE_BREAK_WORD_STYLE_AUTO", "NONE", "mLineBreakStyle", "mLineBreakWordStyle", "mHyphenation", "CREATOR" ]
}