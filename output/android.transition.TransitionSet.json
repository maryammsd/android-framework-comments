{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/transition/TransitionSet.java",
  "packageName" : "android.transition",
  "className" : "TransitionSet",
  "comment" : "\n * A TransitionSet is a parent of child transitions (including other\n * TransitionSets). Using TransitionSets enables more complex\n * choreography of transitions, where some sets play {@link #ORDERING_TOGETHER} and\n * others play {@link #ORDERING_SEQUENTIAL}. For example, {@link AutoTransition}\n * uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by\n * a {@link ChangeBounds}, followed by a Fade(Fade.OUT) transition.\n *\n * <p>A TransitionSet can be described in a resource file by using the\n * tag <code>transitionSet</code>, along with the standard\n * attributes of {@link android.R.styleable#TransitionSet} and\n * {@link android.R.styleable#Transition}. Child transitions of the\n * TransitionSet object can be loaded by adding those child tags inside the\n * enclosing <code>transitionSet</code> tag. For example, the following xml\n * describes a TransitionSet that plays a Fade and then a ChangeBounds\n * transition on the affected view targets:</p>\n * <pre>\n *     &lt;transitionSet xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *             android:transitionOrdering=\"sequential\"&gt;\n *         &lt;fade/&gt;\n *         &lt;changeBounds/&gt;\n *     &lt;/transitionSet&gt;\n * </pre>\n ",
  "variables" : [ {
    "name" : "FLAG_CHANGE_INTERPOLATOR",
    "type" : "int",
    "comment" : "\n     * Flag indicating the the interpolator changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHANGE_PROPAGATION",
    "type" : "int",
    "comment" : "\n     * Flag indicating the the propagation changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHANGE_PATH_MOTION",
    "type" : "int",
    "comment" : "\n     * Flag indicating the the path motion changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHANGE_EPICENTER",
    "type" : "int",
    "comment" : "\n     * Flag indicating the the epicentera callback changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransitions",
    "type" : "ArrayList<Transition>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayTogether",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentListeners",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangeFlags",
    "type" : "int",
    "comment" : " have changed",
    "links" : [ ]
  }, {
    "name" : "ORDERING_TOGETHER",
    "type" : "int",
    "comment" : "\n     * A flag used to indicate that the child transitions of this set\n     * should all start at the same time.\n     ",
    "links" : [ ]
  }, {
    "name" : "ORDERING_SEQUENTIAL",
    "type" : "int",
    "comment" : "\n     * A flag used to indicate that the child transitions of this set should\n     * play in sequence; when one child transition ends, the next child\n     * transition begins. Note that a transition does not end until all\n     * instances of it (which are playing on all applicable targets of the\n     * transition) end.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TransitionSet setOrdering(int ordering)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Sets the play order of this set's child transitions.\n     *\n     * @param ordering {@link #ORDERING_TOGETHER} to play this set's child\n     * transitions together, {@link #ORDERING_SEQUENTIAL} to play the child\n     * transitions in sequence.\n     * @return This transitionSet object.\n     ",
    "links" : [ "#ORDERING_SEQUENTIAL", "#ORDERING_TOGETHER" ]
  }, {
    "name" : "public int getOrdering()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ordering of this TransitionSet. By default, the value is\n     * {@link #ORDERING_TOGETHER}.\n     *\n     * @return {@link #ORDERING_TOGETHER} if child transitions will play at the same\n     * time, {@link #ORDERING_SEQUENTIAL} if they will play in sequence.\n     *\n     * @see #setOrdering(int)\n     ",
    "links" : [ "#ORDERING_SEQUENTIAL", "#ORDERING_TOGETHER" ]
  }, {
    "name" : "public TransitionSet addTransition(Transition transition)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Adds child transition to this set. The order in which this child transition\n     * is added relative to other child transitions that are added, in addition to\n     * the {@link #getOrdering() ordering} property, determines the\n     * order in which the transitions are started.\n     *\n     * <p>If this transitionSet has a {@link #getDuration() duration},\n     * {@link #getInterpolator() interpolator}, {@link #getPropagation() propagation delay},\n     * {@link #getPathMotion() path motion}, or\n     * {@link #setEpicenterCallback(EpicenterCallback) epicenter callback}\n     * set on it, the child transition will inherit the values that are set.\n     * Transitions are assumed to have a maximum of one transitionSet parent.</p>\n     *\n     * @param transition A non-null child transition to be added to this set.\n     * @return This transitionSet object.\n     ",
    "links" : [ "#getDuration()", "#getInterpolator()", "#setEpicenterCallback(EpicenterCallback)", "#getOrdering()", "#getPathMotion()", "#getPropagation()" ]
  }, {
    "name" : "private void addTransitionInternal(Transition transition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTransitionCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of child transitions in the TransitionSet.\n     *\n     * @return The number of child transitions in the TransitionSet.\n     * @see #addTransition(Transition)\n     * @see #getTransitionAt(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transition getTransitionAt(int index)",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the child Transition at the specified position in the TransitionSet.\n     *\n     * @param index The position of the Transition to retrieve.\n     * @see #addTransition(Transition)\n     * @see #getTransitionCount()\n     ",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet setDuration(long duration)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Setting a non-negative duration on a TransitionSet causes all of the child\n     * transitions (current and future) to inherit this duration.\n     *\n     * @param duration The length of the animation, in milliseconds.\n     * @return This transitionSet object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet setStartDelay(long startDelay)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet setInterpolator(TimeInterpolator interpolator)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet addTarget(View target)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet addTarget(int targetId)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet addTarget(String targetName)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet addTarget(Class targetType)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet addListener(TransitionListener listener)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet removeTarget(int targetId)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet removeTarget(View target)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet removeTarget(Class target)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet removeTarget(String target)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Transition excludeTarget(View target, boolean exclude)",
    "returnType" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Transition excludeTarget(String targetName, boolean exclude)",
    "returnType" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Transition excludeTarget(int targetId, boolean exclude)",
    "returnType" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Transition excludeTarget(Class type, boolean exclude)",
    "returnType" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet removeListener(TransitionListener listener)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPathMotion(PathMotion pathMotion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet removeTransition(Transition transition)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Removes the specified child transition from this set.\n     *\n     * @param transition The transition to be removed.\n     * @return This transitionSet object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupStartEndListeners()",
    "returnType" : "void",
    "comment" : "\n     * Sets up listeners for each of the child transitions. This is used to\n     * determine when this transition set is finished (all child transitions\n     * must finish first).\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void createAnimators(ViewGroup sceneRoot, TransitionValuesMaps startValues, TransitionValuesMaps endValues, ArrayList<TransitionValues> startValuesList, ArrayList<TransitionValues> endValuesList)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void runAnimators()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void captureStartValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureEndValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void capturePropagationValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pause(View sceneRoot)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void resume(View sceneRoot)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void cancel()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void forceToEnd(ViewGroup sceneRoot)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " TransitionSet setSceneRoot(ViewGroup sceneRoot)",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setCanRemoveViews(boolean canRemoveViews)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPropagation(TransitionPropagation propagation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEpicenterCallback(EpicenterCallback epicenterCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String toString(String indent)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TransitionSet clone()",
    "returnType" : "TransitionSet",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FLAG_CHANGE_INTERPOLATOR", "FLAG_CHANGE_PROPAGATION", "FLAG_CHANGE_PATH_MOTION", "FLAG_CHANGE_EPICENTER", "mTransitions", "mPlayTogether", "mCurrentListeners", "mStarted", "mChangeFlags", "ORDERING_TOGETHER", "ORDERING_SEQUENTIAL" ],
  "methodNames" : [ "public TransitionSet setOrdering(int ordering)", "public int getOrdering()", "public TransitionSet addTransition(Transition transition)", "private void addTransitionInternal(Transition transition)", "public int getTransitionCount()", "public Transition getTransitionAt(int index)", "public TransitionSet setDuration(long duration)", "public TransitionSet setStartDelay(long startDelay)", "public TransitionSet setInterpolator(TimeInterpolator interpolator)", "public TransitionSet addTarget(View target)", "public TransitionSet addTarget(int targetId)", "public TransitionSet addTarget(String targetName)", "public TransitionSet addTarget(Class targetType)", "public TransitionSet addListener(TransitionListener listener)", "public TransitionSet removeTarget(int targetId)", "public TransitionSet removeTarget(View target)", "public TransitionSet removeTarget(Class target)", "public TransitionSet removeTarget(String target)", "public Transition excludeTarget(View target, boolean exclude)", "public Transition excludeTarget(String targetName, boolean exclude)", "public Transition excludeTarget(int targetId, boolean exclude)", "public Transition excludeTarget(Class type, boolean exclude)", "public TransitionSet removeListener(TransitionListener listener)", "public void setPathMotion(PathMotion pathMotion)", "public TransitionSet removeTransition(Transition transition)", "private void setupStartEndListeners()", "protected void createAnimators(ViewGroup sceneRoot, TransitionValuesMaps startValues, TransitionValuesMaps endValues, ArrayList<TransitionValues> startValuesList, ArrayList<TransitionValues> endValuesList)", "protected void runAnimators()", "public void captureStartValues(TransitionValues transitionValues)", "public void captureEndValues(TransitionValues transitionValues)", " void capturePropagationValues(TransitionValues transitionValues)", "public void pause(View sceneRoot)", "public void resume(View sceneRoot)", "protected void cancel()", " void forceToEnd(ViewGroup sceneRoot)", " TransitionSet setSceneRoot(ViewGroup sceneRoot)", " void setCanRemoveViews(boolean canRemoveViews)", "public void setPropagation(TransitionPropagation propagation)", "public void setEpicenterCallback(EpicenterCallback epicenterCallback)", " String toString(String indent)", "public TransitionSet clone()" ]
}