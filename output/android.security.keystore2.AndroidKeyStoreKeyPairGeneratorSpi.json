{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/AndroidKeyStoreKeyPairGeneratorSpi.java",
  "packageName" : "android.security.keystore2",
  "className" : "AndroidKeyStoreKeyPairGeneratorSpi",
  "comment" : "\n * Provides a way to create instances of a KeyPair which will be placed in the\n * Android keystore service usable only by the application that called it. This\n * can be used in conjunction with\n * {@link java.security.KeyStore#getInstance(String)} using the\n * {@code \"AndroidKeyStore\"} type.\n * <p>\n * This class can not be directly instantiated and must instead be used via the\n * {@link KeyPairGenerator#getInstance(String)\n * KeyPairGenerator.getInstance(\"AndroidKeyStore\")} API.\n *\n * @hide\n ",
  "links" : [ "java.security.KeyStore#getInstance(String)", "java.security.KeyPairGenerator#getInstance(String)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALGORITHM_XDH",
    "type" : "int",
    "comment" : " with a value that is outside the range of the enum used for KeyMint algorithms.",
    "links" : [ ]
  }, {
    "name" : "ALGORITHM_ED25519",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EC_DEFAULT_KEY_SIZE",
    "type" : "int",
    "comment" : " EC ",
    "links" : [ ]
  }, {
    "name" : "RSA_DEFAULT_KEY_SIZE",
    "type" : "int",
    "comment" : " RSA ",
    "links" : [ ]
  }, {
    "name" : "RSA_MIN_KEY_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RSA_MAX_KEY_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_EC_CURVE_NAME_TO_SIZE",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_EC_CURVE_NAMES",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_EC_CURVE_SIZES",
    "type" : "List<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURVE_X_25519",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURVE_ED_25519",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalKeymasterAlgorithm",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyStore",
    "type" : "KeyStore2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpec",
    "type" : "KeyGenParameterSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntryAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntryNamespace",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJcaKeyAlgorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterAlgorithm",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeySizeBits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRng",
    "type" : "SecureRandom",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttestKeyDescriptor",
    "type" : "KeyDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEcCurveName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterPurposes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterBlockModes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterEncryptionPaddings",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterSignaturePaddings",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterDigests",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymasterMgf1Digests",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRSAPublicExponent",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int keySizeAndNameToEcCurve(int keySizeBits, String ecCurveName) throws InvalidAlgorithmParameterException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initialize(int keysize, SecureRandom random)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initialize(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAttestKeyPurpose(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkCorrectKeyPurposeForCurve(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCurve25519(String ecCurveName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasOnlyAllowedPurposeForEd25519(@KeyProperties.PurposeEnum int purpose)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyDescriptor buildAndCheckAttestKeyDescriptor(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException",
    "returnType" : "KeyDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAttestKeyChallenge(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAttestKeyPurpose(Authorization[] keyAuths) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAttestKeySecurityLevel(KeyGenParameterSpec spec, KeyEntryResponse key) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getKeymasterAlgorithmFromLegacy(int keymasterAlgorithm, KeyPairGeneratorSpec legacySpec) throws InvalidAlgorithmParameterException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyGenParameterSpec buildKeyGenParameterSpecFromLegacy(KeyPairGeneratorSpec legacySpec, int keymasterAlgorithm)",
    "returnType" : "KeyGenParameterSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetAll()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initAlgorithmSpecificParameters() throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeyPair generateKeyPair()",
    "returnType" : "KeyPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addAttestationParameters(@NonNull List<KeyParameter> params) throws ProviderException, IllegalArgumentException, DeviceIdAttestationException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Collection<KeyParameter> constructKeyGenerationArguments() throws DeviceIdAttestationException, IllegalArgumentException, InvalidAlgorithmParameterException",
    "returnType" : "Collection<KeyParameter>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean getMgf1DigestSetterFlag()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addAlgorithmSpecificParameters(List<KeyParameter> params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getDefaultKeySize(int keymasterAlgorithm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidKeySize(int keymasterAlgorithm, int keySize, boolean isStrongBoxBacked, String mEcCurveName) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getCertificateSignatureAlgorithm(int keymasterAlgorithm, int keySizeBits, KeyGenParameterSpec spec)",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@code Signature} algorithm to be used for signing a certificate using the\n     * specified key or {@code null} if the key cannot be used for signing a certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Set<Integer> getAvailableKeymasterSignatureDigests(@KeyProperties.DigestEnum String[] authorizedKeyDigests, @KeyProperties.DigestEnum String[] supportedSignatureDigests)",
    "returnType" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPropertyEmptyOrUnknown(String property)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int keySizeAndNameToEcCurve(int keySizeBits, String ecCurveName) throws InvalidAlgorithmParameterException", "public void initialize(int keysize, SecureRandom random)", "public void initialize(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException", "private void checkAttestKeyPurpose(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException", "private void checkCorrectKeyPurposeForCurve(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException", "private static boolean isCurve25519(String ecCurveName)", "private static boolean hasOnlyAllowedPurposeForEd25519(@KeyProperties.PurposeEnum int purpose)", "private KeyDescriptor buildAndCheckAttestKeyDescriptor(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException", "private void checkAttestKeyChallenge(KeyGenParameterSpec spec) throws InvalidAlgorithmParameterException", "private void checkAttestKeyPurpose(Authorization[] keyAuths) throws InvalidAlgorithmParameterException", "private void checkAttestKeySecurityLevel(KeyGenParameterSpec spec, KeyEntryResponse key) throws InvalidAlgorithmParameterException", "private int getKeymasterAlgorithmFromLegacy(int keymasterAlgorithm, KeyPairGeneratorSpec legacySpec) throws InvalidAlgorithmParameterException", "private KeyGenParameterSpec buildKeyGenParameterSpecFromLegacy(KeyPairGeneratorSpec legacySpec, int keymasterAlgorithm)", "private void resetAll()", "private void initAlgorithmSpecificParameters() throws InvalidAlgorithmParameterException", "public KeyPair generateKeyPair()", "private void addAttestationParameters(@NonNull List<KeyParameter> params) throws ProviderException, IllegalArgumentException, DeviceIdAttestationException", "private Collection<KeyParameter> constructKeyGenerationArguments() throws DeviceIdAttestationException, IllegalArgumentException, InvalidAlgorithmParameterException", "private static boolean getMgf1DigestSetterFlag()", "private void addAlgorithmSpecificParameters(List<KeyParameter> params)", "private static int getDefaultKeySize(int keymasterAlgorithm)", "private static void checkValidKeySize(int keymasterAlgorithm, int keySize, boolean isStrongBoxBacked, String mEcCurveName) throws InvalidAlgorithmParameterException", "private static String getCertificateSignatureAlgorithm(int keymasterAlgorithm, int keySizeBits, KeyGenParameterSpec spec)", "private static Set<Integer> getAvailableKeymasterSignatureDigests(@KeyProperties.DigestEnum String[] authorizedKeyDigests, @KeyProperties.DigestEnum String[] supportedSignatureDigests)", "private boolean isPropertyEmptyOrUnknown(String property)" ],
  "variableNames" : [ "TAG", "ALGORITHM_XDH", "ALGORITHM_ED25519", "EC_DEFAULT_KEY_SIZE", "RSA_DEFAULT_KEY_SIZE", "RSA_MIN_KEY_SIZE", "RSA_MAX_KEY_SIZE", "SUPPORTED_EC_CURVE_NAME_TO_SIZE", "SUPPORTED_EC_CURVE_NAMES", "SUPPORTED_EC_CURVE_SIZES", "CURVE_X_25519", "CURVE_ED_25519", "mOriginalKeymasterAlgorithm", "mKeyStore", "mSpec", "mEntryAlias", "mEntryNamespace", "mJcaKeyAlgorithm", "mKeymasterAlgorithm", "mKeySizeBits", "mRng", "mAttestKeyDescriptor", "mEcCurveName", "mKeymasterPurposes", "mKeymasterBlockModes", "mKeymasterEncryptionPaddings", "mKeymasterSignaturePaddings", "mKeymasterDigests", "mKeymasterMgf1Digests", "mRSAPublicExponent" ]
}