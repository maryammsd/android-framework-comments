{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/ArraySet.java",
  "packageName" : "android.util",
  "className" : "ArraySet",
  "comment" : "\n * ArraySet is a generic set data structure that is designed to be more memory efficient than a\n * traditional {@link java.util.HashSet}.  The design is very similar to\n * {@link ArrayMap}, with all of the caveats described there.  This implementation is\n * separate from ArrayMap, however, so the Object array contains only one item for each\n * entry in the set (instead of a pair for a mapping).\n *\n * <p>Note that this implementation is not intended to be appropriate for data structures\n * that may contain large numbers of items.  It is generally slower than a traditional\n * HashSet, since lookups require a binary search and adds and removes require inserting\n * and deleting entries in the array.  For containers holding up to hundreds of items,\n * the performance difference is not significant, less than 50%.</p>\n *\n * <p>Because this container is intended to better balance memory use, unlike most other\n * standard Java containers it will shrink its array as items are removed from it.  Currently\n * you have no control over this shrinking -- if you set a capacity and then remove an\n * item, it may reduce the capacity to better match the current size.  In the future an\n * explicit call to set the capacity should turn off this aggressive shrinking behavior.</p>\n *\n * <p>This structure is <b>NOT</b> thread-safe.</p>\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BASE_SIZE",
    "type" : "int",
    "comment" : "\n     * The minimum amount by which the capacity of a ArraySet will increase.\n     * This is tuned to be relatively space-efficient.\n     ",
    "links" : [ ]
  }, {
    "name" : "CACHE_SIZE",
    "type" : "int",
    "comment" : "\n     * Maximum number of entries to have in array caches.\n     ",
    "links" : [ ]
  }, {
    "name" : "sBaseCache",
    "type" : "Object[]",
    "comment" : "\n     * Caches of small array objects to avoid spamming garbage.  The cache\n     * Object[] variable is a pointer to a linked list of array objects.\n     * The first entry in the array is a pointer to the next array in the\n     * list; the second entry is a pointer to the int[] hash code array for it.\n     ",
    "links" : [ ]
  }, {
    "name" : "sBaseCacheSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTwiceBaseCache",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTwiceBaseCacheSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBaseCacheLock",
    "type" : "Object",
    "comment" : "\n     * Separate locks for each cache since each can be accessed independently of the other without\n     * risk of a deadlock.\n     ",
    "links" : [ ]
  }, {
    "name" : "sTwiceBaseCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdentityHashCode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHashes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArray",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollections",
    "type" : "MapCollections<E, E>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int binarySearch(int[] hashes, int hash)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int indexOf(Object key, int hash)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int indexOfNull()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void allocArrays(final int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void freeArrays(final int[] hashes, final Object[] array, final int size)",
    "returnType" : "void",
    "comment" : "\n     * Make sure <b>NOT</b> to call this method with arrays that can still be modified. In other\n     * words, don't pass mHashes or mArray in directly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Make the array map empty.  All storage is released.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ensureCapacity(int minimumCapacity)",
    "returnType" : "void",
    "comment" : "\n     * Ensure the array map can hold at least <var>minimumCapacity</var>\n     * items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object key)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a value exists in the set.\n     *\n     * @param key The value to search for.\n     * @return Returns true if the value exists, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(Object key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of a value in the set.\n     *\n     * @param key The value to search for.\n     * @return Returns the index of the value if it exists, else a negative integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E valueAt(int index)",
    "returnType" : "E",
    "comment" : "\n     * Return the value at the given index in the array.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     *\n     * @param index The desired index, must be between 0 and {@link #size()}-1.\n     * @return Returns the value stored at the given index.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q", "#size" ]
  }, {
    "name" : "public E valueAtUnchecked(int index)",
    "returnType" : "E",
    "comment" : "\n     * Returns the value at the given index in the array without checking that the index is within\n     * bounds. This allows testing values at the end of the internal array, outside of the\n     * [0, mSize) bounds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the array map contains no items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E value)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified object to this set. The set is not modified if it\n     * already contains the object.\n     *\n     * @param value the object to add.\n     * @return {@code true} if this set is modified, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void append(E value)",
    "returnType" : "void",
    "comment" : "\n     * Special fast path for appending items to the end of the array without validation.\n     * The array must already be large enough to contain the item.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAll(ArraySet<? extends E> array)",
    "returnType" : "void",
    "comment" : "\n     * Perform a {@link #add(Object)} of all values in <var>array</var>\n     * @param array The array whose contents are to be retrieved.\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : "public boolean remove(Object object)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified object from this set.\n     *\n     * @param object the object to remove.\n     * @return {@code true} if this set was modified, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldShrink()",
    "returnType" : "boolean",
    "comment" : " Returns true if the array size should be decreased. ",
    "links" : [ ]
  }, {
    "name" : "private int getNewShrunkenSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the new size the array should have. Is only valid if {@link #shouldShrink} returns\n     * true.\n     ",
    "links" : [ "#shouldShrink" ]
  }, {
    "name" : "public E removeAt(int index)",
    "returnType" : "E",
    "comment" : "\n     * Remove the key/value mapping at the given index.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     *\n     * @param index The desired index, must be between 0 and {@link #size()}-1.\n     * @return Returns the value that was stored at this index.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q", "#size" ]
  }, {
    "name" : "public boolean removeAll(ArraySet<? extends E> array)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform a {@link #remove(Object)} of all values in <var>array</var>\n     * @param array The array whose contents are to be removed.\n     ",
    "links" : [ "#remove" ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes all values that satisfy the predicate. This implementation avoids using the\n     * {@link #iterator()}.\n     *\n     * @param filter A predicate which returns true for elements to be removed\n     ",
    "links" : [ "#iterator" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of items in this array map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] array)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object object)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation returns false if the object is not a set, or\n     * if the sets have different sizes.  Otherwise, for each value in this\n     * set, it checks to make sure the value also exists in the other set.\n     * If any value doesn't exist, the method returns false; otherwise, it\n     * returns true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation composes a string by iterating over its values. If\n     * this set contains itself as a value, the string \"(this Set)\"\n     * will appear in its place.\n     ",
    "links" : [ ]
  }, {
    "name" : "private MapCollections<E, E> getCollection()",
    "returnType" : "MapCollections<E, E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Return an {@link java.util.Iterator} over all values in the set.\n     *\n     * <p><b>Note:</b> this is a fairly inefficient way to access the array contents, it\n     * requires generating a number of temporary objects and allocates additional state\n     * information associated with the container that will remain for the life of the container.</p>\n     ",
    "links" : [ "java.util.Iterator" ]
  }, {
    "name" : "public boolean containsAll(Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the array set contains all of the values in the given collection.\n     * @param collection The collection whose contents are to be checked against.\n     * @return Returns true if this array set contains a value for every entry\n     * in <var>collection</var>, else returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform an {@link #add(Object)} of all values in <var>collection</var>\n     * @param collection The collection whose contents are to be retrieved.\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : "public boolean removeAll(Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all values in the array set that exist in the given collection.\n     * @param collection The collection whose contents are to be used to remove values.\n     * @return Returns true if any values were removed from the array set, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all values in the array set that do <b>not</b> exist in the given collection.\n     * @param collection The collection whose contents are to be used to determine which\n     * values to keep.\n     * @return Returns true if any values were removed from the array set, else false.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "TAG", "BASE_SIZE", "CACHE_SIZE", "sBaseCache", "sBaseCacheSize", "sTwiceBaseCache", "sTwiceBaseCacheSize", "sBaseCacheLock", "sTwiceBaseCacheLock", "mIdentityHashCode", "mHashes", "mArray", "mSize", "mCollections" ],
  "methodNames" : [ "private int binarySearch(int[] hashes, int hash)", "private int indexOf(Object key, int hash)", "private int indexOfNull()", "private void allocArrays(final int size)", "private static void freeArrays(final int[] hashes, final Object[] array, final int size)", "public void clear()", "public void ensureCapacity(int minimumCapacity)", "public boolean contains(Object key)", "public int indexOf(Object key)", "public E valueAt(int index)", "public E valueAtUnchecked(int index)", "public boolean isEmpty()", "public boolean add(E value)", "public void append(E value)", "public void addAll(ArraySet<? extends E> array)", "public boolean remove(Object object)", "private boolean shouldShrink()", "private int getNewShrunkenSize()", "public E removeAt(int index)", "public boolean removeAll(ArraySet<? extends E> array)", "public boolean removeIf(Predicate<? super E> filter)", "public int size()", "public Object[] toArray()", "public T[] toArray(T[] array)", "public boolean equals(Object object)", "public int hashCode()", "public String toString()", "private MapCollections<E, E> getCollection()", "public Iterator<E> iterator()", "public boolean containsAll(Collection<?> collection)", "public boolean addAll(Collection<? extends E> collection)", "public boolean removeAll(Collection<?> collection)", "public boolean retainAll(Collection<?> collection)" ]
}