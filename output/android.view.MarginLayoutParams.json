{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewGroup.java",
  "packageName" : "android.view",
  "className" : "MarginLayoutParams",
  "comment" : "\n     * Per-child layout information for layouts that support margins.\n     * See\n     * {@link android.R.styleable#ViewGroup_MarginLayout ViewGroup Margin Layout Attributes}\n     * for a list of all child view attributes that this class supports.\n     *\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_margin\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginHorizontal\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginVertical\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginLeft\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginTop\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginRight\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginBottom\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart\n     * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd\n     ",
  "variables" : [ {
    "name" : "leftMargin",
    "type" : "int",
    "comment" : "\n         * The left margin in pixels of the child. Margin values should be positive.\n         * Call {@link ViewGroup#setLayoutParams(LayoutParams)} after reassigning a new value\n         * to this field.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(LayoutParams)" ]
  }, {
    "name" : "topMargin",
    "type" : "int",
    "comment" : "\n         * The top margin in pixels of the child. Margin values should be positive.\n         * Call {@link ViewGroup#setLayoutParams(LayoutParams)} after reassigning a new value\n         * to this field.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(LayoutParams)" ]
  }, {
    "name" : "rightMargin",
    "type" : "int",
    "comment" : "\n         * The right margin in pixels of the child. Margin values should be positive.\n         * Call {@link ViewGroup#setLayoutParams(LayoutParams)} after reassigning a new value\n         * to this field.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(LayoutParams)" ]
  }, {
    "name" : "bottomMargin",
    "type" : "int",
    "comment" : "\n         * The bottom margin in pixels of the child. Margin values should be positive.\n         * Call {@link ViewGroup#setLayoutParams(LayoutParams)} after reassigning a new value\n         * to this field.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(LayoutParams)" ]
  }, {
    "name" : "startMargin",
    "type" : "int",
    "comment" : "\n         * The start margin in pixels of the child. Margin values should be positive.\n         * Call {@link ViewGroup#setLayoutParams(LayoutParams)} after reassigning a new value\n         * to this field.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(LayoutParams)" ]
  }, {
    "name" : "endMargin",
    "type" : "int",
    "comment" : "\n         * The end margin in pixels of the child. Margin values should be positive.\n         * Call {@link ViewGroup#setLayoutParams(LayoutParams)} after reassigning a new value\n         * to this field.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(LayoutParams)" ]
  }, {
    "name" : "DEFAULT_MARGIN_RELATIVE",
    "type" : "int",
    "comment" : "\n         * The default start and end margin.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mMarginFlags",
    "type" : "byte",
    "comment" : "\n         * Bit  0: layout direction\n         * Bit  1: layout direction\n         * Bit  2: left margin undefined\n         * Bit  3: right margin undefined\n         * Bit  4: is RTL compatibility mode\n         * Bit  5: need resolution\n         *\n         * Bit 6 to 7 not used\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_DIRECTION_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEFT_MARGIN_UNDEFINED_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RIGHT_MARGIN_UNDEFINED_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RTL_COMPATIBILITY_MODE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NEED_RESOLUTION_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MARGIN_RESOLVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void copyMarginsFrom(MarginLayoutParams source)",
    "returnType" : "void",
    "comment" : "\n         * @hide Used internally.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setMargins(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n         * Sets the margins, in pixels. A call to {@link android.view.View#requestLayout()} needs\n         * to be done so that the new margins are taken into account. Left and right margins may be\n         * overridden by {@link android.view.View#requestLayout()} depending on layout direction.\n         * Margin values should be positive.\n         *\n         * @param left the left margin size\n         * @param top the top margin size\n         * @param right the right margin size\n         * @param bottom the bottom margin size\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginLeft\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginTop\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginRight\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginBottom\n         ",
    "links" : [ "android.view.View#requestLayout()" ]
  }, {
    "name" : "public void setMarginsRelative(int start, int top, int end, int bottom)",
    "returnType" : "void",
    "comment" : "\n         * Sets the relative margins, in pixels. A call to {@link android.view.View#requestLayout()}\n         * needs to be done so that the new relative margins are taken into account. Left and right\n         * margins may be overridden by {@link android.view.View#requestLayout()} depending on\n         * layout direction. Margin values should be positive.\n         *\n         * @param start the start margin size\n         * @param top the top margin size\n         * @param end the right margin size\n         * @param bottom the bottom margin size\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginTop\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginBottom\n         *\n         * @hide\n         ",
    "links" : [ "android.view.View#requestLayout()" ]
  }, {
    "name" : "public void setMarginStart(int start)",
    "returnType" : "void",
    "comment" : "\n         * Sets the relative start margin. Margin values should be positive.\n         *\n         * @param start the start margin size\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMarginStart()",
    "returnType" : "int",
    "comment" : "\n         * Returns the start margin in pixels.\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart\n         *\n         * @return the start margin in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setMarginEnd(int end)",
    "returnType" : "void",
    "comment" : "\n         * Sets the relative end margin. Margin values should be positive.\n         *\n         * @param end the end margin size\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMarginEnd()",
    "returnType" : "int",
    "comment" : "\n         * Returns the end margin in pixels.\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd\n         *\n         * @return the end margin in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMarginRelative()",
    "returnType" : "boolean",
    "comment" : "\n         * Check if margins are relative.\n         *\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart\n         * @attr ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd\n         *\n         * @return true if either marginStart or marginEnd has been set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setLayoutDirection(int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n         * Set the layout direction\n         * @param layoutDirection the layout direction.\n         *        Should be either {@link View#LAYOUT_DIRECTION_LTR}\n         *                     or {@link View#LAYOUT_DIRECTION_RTL}.\n         ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR", "android.view.View#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public int getLayoutDirection()",
    "returnType" : "int",
    "comment" : "\n         * Retuns the layout direction. Can be either {@link View#LAYOUT_DIRECTION_LTR} or\n         * {@link View#LAYOUT_DIRECTION_RTL}.\n         *\n         * @return the layout direction.\n         ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR", "android.view.View#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public void resolveLayoutDirection(int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n         * This will be called by {@link android.view.View#requestLayout()}. Left and Right margins\n         * may be overridden depending on layout direction.\n         ",
    "links" : [ "android.view.View#requestLayout()" ]
  }, {
    "name" : "private void doResolveMargins()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLayoutRtl()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onDebugDraw(View view, Canvas canvas, Paint paint)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "leftMargin", "topMargin", "rightMargin", "bottomMargin", "startMargin", "endMargin", "DEFAULT_MARGIN_RELATIVE", "mMarginFlags", "LAYOUT_DIRECTION_MASK", "LEFT_MARGIN_UNDEFINED_MASK", "RIGHT_MARGIN_UNDEFINED_MASK", "RTL_COMPATIBILITY_MODE_MASK", "NEED_RESOLUTION_MASK", "DEFAULT_MARGIN_RESOLVED", "UNDEFINED_MARGIN" ],
  "methodNames" : [ "public final void copyMarginsFrom(MarginLayoutParams source)", "public void setMargins(int left, int top, int right, int bottom)", "public void setMarginsRelative(int start, int top, int end, int bottom)", "public void setMarginStart(int start)", "public int getMarginStart()", "public void setMarginEnd(int end)", "public int getMarginEnd()", "public boolean isMarginRelative()", "public void setLayoutDirection(int layoutDirection)", "public int getLayoutDirection()", "public void resolveLayoutDirection(int layoutDirection)", "private void doResolveMargins()", "public boolean isLayoutRtl()", "public void onDebugDraw(View view, Canvas canvas, Paint paint)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ]
}