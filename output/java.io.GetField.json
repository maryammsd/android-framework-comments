{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectInputStream.java",
  "packageName" : "java.io",
  "className" : "GetField",
  "comment" : "\n     * Provide access to the persistent fields read from the input stream.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract ObjectStreamClass getObjectStreamClass()",
    "returnType" : "ObjectStreamClass",
    "comment" : "\n         * Get the ObjectStreamClass that describes the fields in the stream.\n         *\n         * @return  the descriptor class that describes the serializable fields\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean defaulted(String name) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if the named field is defaulted and has no value in this\n         * stream.\n         *\n         * @param  name the name of the field\n         * @return true, if and only if the named field is defaulted\n         * @throws IOException if there are I/O errors while reading from\n         *         the underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if <code>name</code> does not\n         *         correspond to a serializable field\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean get(String name, boolean val) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value of the named boolean field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>boolean</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte get(String name, byte val) throws IOException",
    "returnType" : "byte",
    "comment" : "\n         * Get the value of the named byte field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>byte</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract char get(String name, char val) throws IOException",
    "returnType" : "char",
    "comment" : "\n         * Get the value of the named char field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>char</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract short get(String name, short val) throws IOException",
    "returnType" : "short",
    "comment" : "\n         * Get the value of the named short field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>short</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract int get(String name, int val) throws IOException",
    "returnType" : "int",
    "comment" : "\n         * Get the value of the named int field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>int</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long get(String name, long val) throws IOException",
    "returnType" : "long",
    "comment" : "\n         * Get the value of the named long field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>long</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract float get(String name, float val) throws IOException",
    "returnType" : "float",
    "comment" : "\n         * Get the value of the named float field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>float</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract double get(String name, double val) throws IOException",
    "returnType" : "double",
    "comment" : "\n         * Get the value of the named double field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>double</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object get(String name, Object val) throws IOException",
    "returnType" : "Object",
    "comment" : "\n         * Get the value of the named Object field from the persistent field.\n         *\n         * @param  name the name of the field\n         * @param  val the default value to use if <code>name</code> does not\n         *         have a value\n         * @return the value of the named <code>Object</code> field\n         * @throws IOException if there are I/O errors while reading from the\n         *         underlying <code>InputStream</code>\n         * @throws IllegalArgumentException if type of <code>name</code> is\n         *         not serializable or if the field type is incorrect\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract ObjectStreamClass getObjectStreamClass()", "public abstract boolean defaulted(String name) throws IOException", "public abstract boolean get(String name, boolean val) throws IOException", "public abstract byte get(String name, byte val) throws IOException", "public abstract char get(String name, char val) throws IOException", "public abstract short get(String name, short val) throws IOException", "public abstract int get(String name, int val) throws IOException", "public abstract long get(String name, long val) throws IOException", "public abstract float get(String name, float val) throws IOException", "public abstract double get(String name, double val) throws IOException", "public abstract Object get(String name, Object val) throws IOException" ],
  "variableNames" : [ ]
}