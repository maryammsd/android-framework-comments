{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/suitebuilder/TestSuiteBuilder.java",
  "packageName" : "android.test.suitebuilder",
  "className" : "TestSuiteBuilder",
  "comment" : "\n * Build suites based on a combination of included packages, excluded packages,\n * and predicates that must be satisfied.\n *\n * @deprecated New tests should be written using the\n * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Android Testing Support Library</a>.\n ",
  "variables" : [ {
    "name" : "testGrouping",
    "type" : "TestGrouping",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "predicates",
    "type" : "Set<Predicate<TestMethod>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "testCases",
    "type" : "List<TestCase>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rootSuite",
    "type" : "TestSuite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "suiteForCurrentClass",
    "type" : "TestSuite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentClassname",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "suiteName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TestSuiteBuilder addTestClassByName(String testClassName, String testMethodName, Context context)",
    "returnType" : "TestSuiteBuilder",
    "comment" : " @hide pending API Council approval ",
    "links" : [ ]
  }, {
    "name" : "public TestSuiteBuilder addTestSuite(TestSuite testSuite)",
    "returnType" : "TestSuiteBuilder",
    "comment" : " @hide pending API Council approval ",
    "links" : [ ]
  }, {
    "name" : "public TestSuiteBuilder includePackages(String... packageNames)",
    "returnType" : "TestSuiteBuilder",
    "comment" : "\n     * Include all tests that satisfy the requirements in the given packages and all sub-packages,\n     * unless otherwise specified.\n     *\n     * @param packageNames Names of packages to add.\n     * @return The builder for method chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TestSuiteBuilder excludePackages(String... packageNames)",
    "returnType" : "TestSuiteBuilder",
    "comment" : "\n     * Exclude all tests in the given packages and all sub-packages, unless otherwise specified.\n     *\n     * @param packageNames Names of packages to remove.\n     * @return The builder for method chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TestSuiteBuilder addRequirements(List<Predicate<TestMethod>> predicates)",
    "returnType" : "TestSuiteBuilder",
    "comment" : "\n     * Exclude tests that fail to satisfy all of the given predicates.\n     *\n     * @param predicates Predicates to add to the list of requirements.\n     * @return The builder for method chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TestSuiteBuilder includeAllPackagesUnderHere()",
    "returnType" : "TestSuiteBuilder",
    "comment" : "\n     * Include all junit tests that satisfy the requirements in the calling class' package and all\n     * sub-packages.\n     *\n     * @return The builder for method chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TestSuiteBuilder named(String newSuiteName)",
    "returnType" : "TestSuiteBuilder",
    "comment" : "\n     * Override the default name for the suite being built. This should generally be called if you\n     * call {@code addRequirements(com.android.internal.util.Predicate[])} to make it clear which\n     * tests will be included. The name you specify is automatically prefixed with the package\n     * containing the tests to be run. If more than one package is specified, the first is used.\n     *\n     * @param newSuiteName Prefix of name to give the suite being built.\n     * @return The builder for method chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TestSuite build()",
    "returnType" : "TestSuite",
    "comment" : "\n     * Call this method once you've configured your builder as desired.\n     *\n     * @return The suite containing the requested tests.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String getSuiteName()",
    "returnType" : "String",
    "comment" : "\n     * Subclasses use this method to determine the name of the suite.\n     *\n     * @return The package and suite name combined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TestSuiteBuilder addRequirements(Predicate<TestMethod>... predicates)",
    "returnType" : "TestSuiteBuilder",
    "comment" : "\n     * Exclude tests that fail to satisfy all of the given predicates. If you call this method, you\n     * probably also want to call {@link #named(String)} to override the default suite name.\n     *\n     * @param predicates Predicates to add to the list of requirements.\n     * @return The builder for method chaining.\n     * @hide\n     ",
    "links" : [ "#named" ]
  }, {
    "name" : "private boolean satisfiesAllPredicates(TestMethod test)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addTest(TestMethod testMethod) throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addTest(Test test)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addSuiteIfNecessary(String parentClassname)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String parsePackageNameFromClassName(String className)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "testGrouping", "predicates", "testCases", "rootSuite", "suiteForCurrentClass", "currentClassname", "suiteName" ],
  "methodNames" : [ "public TestSuiteBuilder addTestClassByName(String testClassName, String testMethodName, Context context)", "public TestSuiteBuilder addTestSuite(TestSuite testSuite)", "public TestSuiteBuilder includePackages(String... packageNames)", "public TestSuiteBuilder excludePackages(String... packageNames)", "public TestSuiteBuilder addRequirements(List<Predicate<TestMethod>> predicates)", "public final TestSuiteBuilder includeAllPackagesUnderHere()", "public TestSuiteBuilder named(String newSuiteName)", "public final TestSuite build()", "protected String getSuiteName()", "public final TestSuiteBuilder addRequirements(Predicate<TestMethod>... predicates)", "private boolean satisfiesAllPredicates(TestMethod test)", "private void addTest(TestMethod testMethod) throws Exception", "private void addTest(Test test)", "private void addSuiteIfNecessary(String parentClassname)", "private static String parsePackageNameFromClassName(String className)" ]
}