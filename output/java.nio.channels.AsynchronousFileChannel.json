{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/AsynchronousFileChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "AsynchronousFileChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_ATTRIBUTES",
    "type" : "FileAttribute<?>[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AsynchronousFileChannel open(Path file, Set<? extends OpenOption> options, ExecutorService executor, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "AsynchronousFileChannel",
    "comment" : "\n     * Opens or creates a file for reading and/or writing, returning an\n     * asynchronous file channel to access the file.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * The {@link StandardOpenOption#READ READ} and {@link StandardOpenOption#WRITE\n     * WRITE} options determines if the file should be opened for reading and/or\n     * writing. If neither option is contained in the array then an existing file\n     * is opened for  reading.\n     *\n     * <p> In addition to {@code READ} and {@code WRITE}, the following options\n     * may be present:\n     *\n     * <table class=\"striped\">\n     * <caption style=\"display:none\">additional options</caption>\n     * <thead>\n     * <tr> <th scope=\"col\">Option</th> <th scope=\"col\">Description</th> </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </th>\n     *   <td> When opening an existing file, the file is first truncated to a\n     *   size of 0 bytes. This option is ignored when the file is opened only\n     *   for reading.</td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </th>\n     *   <td> If this option is present then a new file is created, failing if\n     *   the file already exists. When creating a file the check for the\n     *   existence of the file and the creation of the file if it does not exist\n     *   is atomic with respect to other file system operations. This option is\n     *   ignored when the file is opened only for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\" > {@link StandardOpenOption#CREATE CREATE} </th>\n     *   <td> If this option is present then an existing file is opened if it\n     *   exists, otherwise a new file is created. When creating a file the check\n     *   for the existence of the file and the creation of the file if it does\n     *   not exist is atomic with respect to other file system operations. This\n     *   option is ignored if the {@code CREATE_NEW} option is also present or\n     *   the file is opened only for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\" > {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} </th>\n     *   <td> When this option is present then the implementation makes a\n     *   <em>best effort</em> attempt to delete the file when closed by\n     *   the {@link #close close} method. If the {@code close} method is not\n     *   invoked then a <em>best effort</em> attempt is made to delete the file\n     *   when the Java virtual machine terminates. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\">{@link StandardOpenOption#SPARSE SPARSE} </th>\n     *   <td> When creating a new file this option is a <em>hint</em> that the\n     *   new file will be sparse. This option is ignored when not creating\n     *   a new file. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#SYNC SYNC} </th>\n     *   <td> Requires that every update to the file's content or metadata be\n     *   written synchronously to the underlying storage device. (see <a\n     *   href=\"../file/package-summary.html#integrity\"> Synchronized I/O file\n     *   integrity</a>). </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#DSYNC DSYNC} </th>\n     *   <td> Requires that every update to the file's content be written\n     *   synchronously to the underlying storage device. (see <a\n     *   href=\"../file/package-summary.html#integrity\"> Synchronized I/O file\n     *   integrity</a>). </td>\n     * </tr>\n     * </tbody>\n     * </table>\n     *\n     * <p> An implementation may also support additional options.\n     *\n     * <p> The {@code executor} parameter is the {@link ExecutorService} to\n     * which tasks are submitted to handle I/O events and dispatch completion\n     * results for operations initiated on resulting channel.\n     * The nature of these tasks is highly implementation specific and so care\n     * should be taken when configuring the {@code Executor}. Minimally it\n     * should support an unbounded work queue and should not run tasks on the\n     * caller thread of the {@link ExecutorService#execute execute} method.\n     * Shutting down the executor service while the channel is open results in\n     * unspecified behavior.\n     *\n     * <p> The {@code attrs} parameter is an optional array of file {@link\n     * FileAttribute file-attributes} to set atomically when creating the file.\n     *\n     * <p> The new channel is created by invoking the {@link\n     * FileSystemProvider#newFileChannel newFileChannel} method on the\n     * provider that created the {@code Path}.\n     *\n     * @param   file\n     *          The path of the file to open or create\n     * @param   options\n     *          Options specifying how the file is opened\n     * @param   executor\n     *          The thread pool or {@code null} to associate the channel with\n     *          the default thread pool\n     * @param   attrs\n     *          An optional list of file attributes to set atomically when\n     *          creating the file\n     *\n     * @return  A new asynchronous file channel\n     *\n     * @throws  IllegalArgumentException\n     *          If the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          If the {@code file} is associated with a provider that does not\n     *          support creating asynchronous file channels, or an unsupported\n     *          open option is specified, or the array contains an attribute that\n     *          cannot be set atomically when creating the file\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is installed and it denies an\n     *          unspecified permission required by the implementation.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String)} method is invoked to check\n     *          read access if the file is opened for reading. The {@link\n     *          SecurityManager#checkWrite(String)} method is invoked to check\n     *          write access if the file is opened for writing\n     ",
    "links" : [ "#SPARSE", "#DSYNC", "#checkRead(String)", "#READ", "#close", "#SYNC", "java.nio.file.attribute.FileAttribute", "java.util.concurrent.ExecutorService#execute", "#CREATE", "#checkWrite(String)", "#WRITEWRITE", "#TRUNCATE_EXISTING", "#newFileChannel", "#CREATE_NEW", "java.util.concurrent.ExecutorService", "#DELETE_ON_CLOSE" ]
  }, {
    "name" : "public static AsynchronousFileChannel open(Path file, OpenOption... options) throws IOException",
    "returnType" : "AsynchronousFileChannel",
    "comment" : "\n     * Opens or creates a file for reading and/or writing, returning an\n     * asynchronous file channel to access the file.\n     *\n     * <p> An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * <pre>\n     *     ch.{@link #open(Path,Set,ExecutorService,FileAttribute[])\n     *       open}(file, opts, null, new FileAttribute&lt;?&gt;[0]);\n     * </pre>\n     * where {@code opts} is a {@code Set} containing the options specified to\n     * this method.\n     *\n     * <p> The resulting channel is associated with default thread pool to which\n     * tasks are submitted to handle I/O events and dispatch to completion\n     * handlers that consume the result of asynchronous operations performed on\n     * the resulting channel.\n     *\n     * @param   file\n     *          The path of the file to open or create\n     * @param   options\n     *          Options specifying how the file is opened\n     *\n     * @return  A new asynchronous file channel\n     *\n     * @throws  IllegalArgumentException\n     *          If the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          If the {@code file} is associated with a provider that does not\n     *          support creating file channels, or an unsupported open option is\n     *          specified\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is installed and it denies an\n     *          unspecified permission required by the implementation.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String)} method is invoked to check\n     *          read access if the file is opened for reading. The {@link\n     *          SecurityManager#checkWrite(String)} method is invoked to check\n     *          write access if the file is opened for writing\n     ",
    "links" : [ "#checkRead(String)", "#checkWrite(String)", "#open(Path" ]
  }, {
    "name" : "public abstract long size() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the current size of this channel's file.\n     *\n     * @return  The current size of this channel's file, measured in bytes\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AsynchronousFileChannel truncate(long size) throws IOException",
    "returnType" : "AsynchronousFileChannel",
    "comment" : "\n     * Truncates this channel's file to the given size.\n     *\n     * <p> If the given size is less than the file's current size then the file\n     * is truncated, discarding any bytes beyond the new end of the file.  If\n     * the given size is greater than or equal to the file's current size then\n     * the file is not modified. </p>\n     *\n     * @param  size\n     *         The new size, a non-negative byte count\n     *\n     * @return  This file channel\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IllegalArgumentException\n     *          If the new size is negative\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void force(boolean metaData) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Forces any updates to this channel's file to be written to the storage\n     * device that contains it.\n     *\n     * <p> If this channel's file resides on a local storage device then when\n     * this method returns it is guaranteed that all changes made to the file\n     * since this channel was created, or since this method was last invoked,\n     * will have been written to that device.  This is useful for ensuring that\n     * critical information is not lost in the event of a system crash.\n     *\n     * <p> If the file does not reside on a local device then no such guarantee\n     * is made.\n     *\n     * <p> The {@code metaData} parameter can be used to limit the number of\n     * I/O operations that this method is required to perform.  Passing\n     * {@code false} for this parameter indicates that only updates to the\n     * file's content need be written to storage; passing {@code true}\n     * indicates that updates to both the file's content and metadata must be\n     * written, which generally requires at least one more I/O operation.\n     * Whether this parameter actually has any effect is dependent upon the\n     * underlying operating system and is therefore unspecified.\n     *\n     * <p> Invoking this method may cause an I/O operation to occur even if the\n     * channel was only opened for reading.  Some operating systems, for\n     * example, maintain a last-access time as part of a file's metadata, and\n     * this time is updated whenever the file is read.  Whether or not this is\n     * actually done is system-dependent and is therefore unspecified.\n     *\n     * <p> This method is only guaranteed to force changes that were made to\n     * this channel's file via the methods defined in this class.\n     *\n     * @param   metaData\n     *          If {@code true} then this method is required to force changes\n     *          to both the file's content and metadata to be written to\n     *          storage; otherwise, it need only force content changes to be\n     *          written\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void lock(long position, long size, boolean shared, A attachment, CompletionHandler<FileLock, ? super A> handler)",
    "returnType" : "void",
    "comment" : "\n     * Acquires a lock on the given region of this channel's file.\n     *\n     * <p> This method initiates an operation to acquire a lock on the given\n     * region of this channel's file. The {@code handler} parameter is a\n     * completion handler that is invoked when the lock is acquired (or the\n     * operation fails). The result passed to the completion handler is the\n     * resulting {@code FileLock}.\n     *\n     * <p> The region specified by the {@code position} and {@code size}\n     * parameters need not be contained within, or even overlap, the actual\n     * underlying file.  Lock regions are fixed in size; if a locked region\n     * initially contains the end of the file and the file grows beyond the\n     * region then the new portion of the file will not be covered by the lock.\n     * If a file is expected to grow in size and a lock on the entire file is\n     * required then a region starting at zero, and no smaller than the\n     * expected maximum size of the file, should be locked.  The two-argument\n     * {@link #lock(Object,CompletionHandler)} method simply locks a region\n     * of size {@link Long#MAX_VALUE}. If a lock that overlaps the requested\n     * region is already held by this Java virtual machine, or this method has\n     * been invoked to lock an overlapping region and that operation has not\n     * completed, then this method throws {@link OverlappingFileLockException}.\n     *\n     * <p> Some operating systems do not support a mechanism to acquire a file\n     * lock in an asynchronous manner. Consequently an implementation may\n     * acquire the file lock in a background thread or from a task executed by\n     * a thread in the associated thread pool. If there are many lock operations\n     * outstanding then it may consume threads in the Java virtual machine for\n     * indefinite periods.\n     *\n     * <p> Some operating systems do not support shared locks, in which case a\n     * request for a shared lock is automatically converted into a request for\n     * an exclusive lock.  Whether the newly-acquired lock is shared or\n     * exclusive may be tested by invoking the resulting lock object's {@link\n     * FileLock#isShared() isShared} method.\n     *\n     * <p> File locks are held on behalf of the entire Java virtual machine.\n     * They are not suitable for controlling access to a file by multiple\n     * threads within the same virtual machine.\n     *\n     * @param   <A>\n     *          The type of the attachment\n     * @param   position\n     *          The position at which the locked region is to start; must be\n     *          non-negative\n     * @param   size\n     *          The size of the locked region; must be non-negative, and the sum\n     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n     * @param   shared\n     *          {@code true} to request a shared lock, in which case this\n     *          channel must be open for reading (and possibly writing);\n     *          {@code false} to request an exclusive lock, in which case this\n     *          channel must be open for writing (and possibly reading)\n     * @param   attachment\n     *          The object to attach to the I/O operation; can be {@code null}\n     * @param   handler\n     *          The handler for consuming the result\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or there is already a pending attempt\n     *          to lock an overlapping region\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameters do not hold\n     * @throws  NonReadableChannelException\n     *          If {@code shared} is true but this channel was not opened for reading\n     * @throws  NonWritableChannelException\n     *          If {@code shared} is false but this channel was not opened for writing\n     ",
    "links" : [ "java.nio.channels.OverlappingFileLockException", "#MAX_VALUE", "#lock(Object", "java.nio.channels.FileLock#isShared()" ]
  }, {
    "name" : "public final void lock(A attachment, CompletionHandler<FileLock, ? super A> handler)",
    "returnType" : "void",
    "comment" : "\n     * Acquires an exclusive lock on this channel's file.\n     *\n     * <p> This method initiates an operation to acquire a lock on the given\n     * region of this channel's file. The {@code handler} parameter is a\n     * completion handler that is invoked when the lock is acquired (or the\n     * operation fails). The result passed to the completion handler is the\n     * resulting {@code FileLock}.\n     *\n     * <p> An invocation of this method of the form {@code ch.lock(att,handler)}\n     * behaves in exactly the same way as the invocation\n     * <pre>\n     *     ch.{@link #lock(long,long,boolean,Object,CompletionHandler) lock}(0L, Long.MAX_VALUE, false, att, handler)\n     * </pre>\n     *\n     * @param   <A>\n     *          The type of the attachment\n     * @param   attachment\n     *          The object to attach to the I/O operation; can be {@code null}\n     * @param   handler\n     *          The handler for consuming the result\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock is already held by this Java virtual machine, or there\n     *          is already a pending attempt to lock a region\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     ",
    "links" : [ "#lock(long" ]
  }, {
    "name" : "public abstract Future<FileLock> lock(long position, long size, boolean shared)",
    "returnType" : "Future<FileLock>",
    "comment" : "\n     * Acquires a lock on the given region of this channel's file.\n     *\n     * <p> This method initiates an operation to acquire a lock on the given\n     * region of this channel's file.  The method behaves in exactly the same\n     * manner as the {@link #lock(long, long, boolean, Object, CompletionHandler)}\n     * method except that instead of specifying a completion handler, this\n     * method returns a {@code Future} representing the pending result. The\n     * {@code Future}'s {@link Future#get() get} method returns the {@link\n     * FileLock} on successful completion.\n     *\n     * @param   position\n     *          The position at which the locked region is to start; must be\n     *          non-negative\n     * @param   size\n     *          The size of the locked region; must be non-negative, and the sum\n     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n     * @param   shared\n     *          {@code true} to request a shared lock, in which case this\n     *          channel must be open for reading (and possibly writing);\n     *          {@code false} to request an exclusive lock, in which case this\n     *          channel must be open for writing (and possibly reading)\n     *\n     * @return  a {@code Future} object representing the pending result\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock is already held by this Java virtual machine, or there\n     *          is already a pending attempt to lock a region\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameters do not hold\n     * @throws  NonReadableChannelException\n     *          If {@code shared} is true but this channel was not opened for reading\n     * @throws  NonWritableChannelException\n     *          If {@code shared} is false but this channel was not opened for writing\n     ",
    "links" : [ "#lock(long", "java.util.concurrent.Future#get()", "java.nio.channels.FileLock" ]
  }, {
    "name" : "public final Future<FileLock> lock()",
    "returnType" : "Future<FileLock>",
    "comment" : "\n     * Acquires an exclusive lock on this channel's file.\n     *\n     * <p> This method initiates an operation to acquire an exclusive lock on this\n     * channel's file. The method returns a {@code Future} representing the\n     * pending result of the operation. The {@code Future}'s {@link Future#get()\n     * get} method returns the {@link FileLock} on successful completion.\n     *\n     * <p> An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * <pre>\n     *     ch.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false)\n     * </pre>\n     *\n     * @return  a {@code Future} object representing the pending result\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock is already held by this Java virtual machine, or there\n     *          is already a pending attempt to lock a region\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     ",
    "links" : [ "java.util.concurrent.Future#get()", "#lock(long", "java.nio.channels.FileLock" ]
  }, {
    "name" : "public abstract FileLock tryLock(long position, long size, boolean shared) throws IOException",
    "returnType" : "FileLock",
    "comment" : "\n     * Attempts to acquire a lock on the given region of this channel's file.\n     *\n     * <p> This method does not block. An invocation always returns immediately,\n     * either having acquired a lock on the requested region or having failed to\n     * do so.  If it fails to acquire a lock because an overlapping lock is held\n     * by another program then it returns {@code null}.  If it fails to acquire\n     * a lock for any other reason then an appropriate exception is thrown.\n     *\n     * @param  position\n     *         The position at which the locked region is to start; must be\n     *         non-negative\n     *\n     * @param  size\n     *         The size of the locked region; must be non-negative, and the sum\n     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n     *\n     * @param  shared\n     *         {@code true} to request a shared lock,\n     *         {@code false} to request an exclusive lock\n     *\n     * @return  A lock object representing the newly-acquired lock,\n     *          or {@code null} if the lock could not be acquired\n     *          because another program holds an overlapping lock\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameters do not hold\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or if another thread is already\n     *          blocked in this method and is attempting to lock an overlapping\n     *          region of the same file\n     * @throws  NonReadableChannelException\n     *          If {@code shared} is true but this channel was not opened for reading\n     * @throws  NonWritableChannelException\n     *          If {@code shared} is false but this channel was not opened for writing\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @see     #lock(Object,CompletionHandler)\n     * @see     #lock(long,long,boolean,Object,CompletionHandler)\n     * @see     #tryLock()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final FileLock tryLock() throws IOException",
    "returnType" : "FileLock",
    "comment" : "\n     * Attempts to acquire an exclusive lock on this channel's file.\n     *\n     * <p> An invocation of this method of the form {@code ch.tryLock()}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     ch.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) </pre>\n     *\n     * @return  A lock object representing the newly-acquired lock,\n     *          or {@code null} if the lock could not be acquired\n     *          because another program holds an overlapping lock\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or if another thread is already\n     *          blocked in this method and is attempting to lock an overlapping\n     *          region\n     * @throws  NonWritableChannelException\n     *          If {@code shared} is false but this channel was not opened for writing\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @see     #lock(Object,CompletionHandler)\n     * @see     #lock(long,long,boolean,Object,CompletionHandler)\n     * @see     #tryLock(long,long,boolean)\n     ",
    "links" : [ "#tryLock(long" ]
  }, {
    "name" : "public abstract void read(ByteBuffer dst, long position, A attachment, CompletionHandler<Integer, ? super A> handler)",
    "returnType" : "void",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffer,\n     * starting at the given file position.\n     *\n     * <p> This method initiates the reading of a sequence of bytes from this\n     * channel into the given buffer, starting at the given file position. The\n     * result of the read is the number of bytes read or {@code -1} if the given\n     * position is greater than or equal to the file's size at the time that the\n     * read is attempted.\n     *\n     * <p> This method works in the same manner as the {@link\n     * AsynchronousByteChannel#read(ByteBuffer,Object,CompletionHandler)}\n     * method, except that bytes are read starting at the given file position.\n     * If the given file position is greater than the file's size at the time\n     * that the read is attempted then no bytes are read.\n     *\n     * @param   <A>\n     *          The type of the attachment\n     * @param   dst\n     *          The buffer into which bytes are to be transferred\n     * @param   position\n     *          The file position at which the transfer is to begin;\n     *          must be non-negative\n     * @param   attachment\n     *          The object to attach to the I/O operation; can be {@code null}\n     * @param   handler\n     *          The handler for consuming the result\n     *\n     * @throws  IllegalArgumentException\n     *          If the position is negative or the buffer is read-only\n     * @throws  NonReadableChannelException\n     *          If this channel was not opened for reading\n     ",
    "links" : [ "java.nio.channels.AsynchronousByteChannel#read(ByteBuffer" ]
  }, {
    "name" : "public abstract Future<Integer> read(ByteBuffer dst, long position)",
    "returnType" : "Future<Integer>",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffer,\n     * starting at the given file position.\n     *\n     * <p> This method initiates the reading of a sequence of bytes from this\n     * channel into the given buffer, starting at the given file position. This\n     * method returns a {@code Future} representing the pending result of the\n     * operation. The {@code Future}'s {@link Future#get() get} method returns\n     * the number of bytes read or {@code -1} if the given position is greater\n     * than or equal to the file's size at the time that the read is attempted.\n     *\n     * <p> This method works in the same manner as the {@link\n     * AsynchronousByteChannel#read(ByteBuffer)} method, except that bytes are\n     * read starting at the given file position. If the given file position is\n     * greater than the file's size at the time that the read is attempted then\n     * no bytes are read.\n     *\n     * @param   dst\n     *          The buffer into which bytes are to be transferred\n     * @param   position\n     *          The file position at which the transfer is to begin;\n     *          must be non-negative\n     *\n     * @return  A {@code Future} object representing the pending result\n     *\n     * @throws  IllegalArgumentException\n     *          If the position is negative or the buffer is read-only\n     * @throws  NonReadableChannelException\n     *          If this channel was not opened for reading\n     ",
    "links" : [ "java.util.concurrent.Future#get()", "java.nio.channels.AsynchronousByteChannel#read(ByteBuffer)" ]
  }, {
    "name" : "public abstract void write(ByteBuffer src, long position, A attachment, CompletionHandler<Integer, ? super A> handler)",
    "returnType" : "void",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffer, starting\n     * at the given file position.\n     *\n     * <p> This method works in the same manner as the {@link\n     * AsynchronousByteChannel#write(ByteBuffer,Object,CompletionHandler)}\n     * method, except that bytes are written starting at the given file position.\n     * If the given position is greater than the file's size, at the time that\n     * the write is attempted, then the file will be grown to accommodate the new\n     * bytes; the values of any bytes between the previous end-of-file and the\n     * newly-written bytes are unspecified.\n     *\n     * @param   <A>\n     *          The type of the attachment\n     * @param   src\n     *          The buffer from which bytes are to be transferred\n     * @param   position\n     *          The file position at which the transfer is to begin;\n     *          must be non-negative\n     * @param   attachment\n     *          The object to attach to the I/O operation; can be {@code null}\n     * @param   handler\n     *          The handler for consuming the result\n     *\n     * @throws  IllegalArgumentException\n     *          If the position is negative\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     ",
    "links" : [ "java.nio.channels.AsynchronousByteChannel#write(ByteBuffer" ]
  }, {
    "name" : "public abstract Future<Integer> write(ByteBuffer src, long position)",
    "returnType" : "Future<Integer>",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffer, starting\n     * at the given file position.\n     *\n     * <p> This method initiates the writing of a sequence of bytes to this\n     * channel from the given buffer, starting at the given file position. The\n     * method returns a {@code Future} representing the pending result of the\n     * write operation. The {@code Future}'s {@link Future#get() get} method\n     * returns the number of bytes written.\n     *\n     * <p> This method works in the same manner as the {@link\n     * AsynchronousByteChannel#write(ByteBuffer)} method, except that bytes are\n     * written starting at the given file position. If the given position is\n     * greater than the file's size, at the time that the write is attempted,\n     * then the file will be grown to accommodate the new bytes; the values of\n     * any bytes between the previous end-of-file and the newly-written bytes\n     * are unspecified.\n     *\n     * @param   src\n     *          The buffer from which bytes are to be transferred\n     * @param   position\n     *          The file position at which the transfer is to begin;\n     *          must be non-negative\n     *\n     * @return  A {@code Future} object representing the pending result\n     *\n     * @throws  IllegalArgumentException\n     *          If the position is negative\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     ",
    "links" : [ "java.util.concurrent.Future#get()", "java.nio.channels.AsynchronousByteChannel#write(ByteBuffer)" ]
  } ],
  "methodNames" : [ "public static AsynchronousFileChannel open(Path file, Set<? extends OpenOption> options, ExecutorService executor, FileAttribute<?>... attrs) throws IOException", "public static AsynchronousFileChannel open(Path file, OpenOption... options) throws IOException", "public abstract long size() throws IOException", "public abstract AsynchronousFileChannel truncate(long size) throws IOException", "public abstract void force(boolean metaData) throws IOException", "public abstract void lock(long position, long size, boolean shared, A attachment, CompletionHandler<FileLock, ? super A> handler)", "public final void lock(A attachment, CompletionHandler<FileLock, ? super A> handler)", "public abstract Future<FileLock> lock(long position, long size, boolean shared)", "public final Future<FileLock> lock()", "public abstract FileLock tryLock(long position, long size, boolean shared) throws IOException", "public final FileLock tryLock() throws IOException", "public abstract void read(ByteBuffer dst, long position, A attachment, CompletionHandler<Integer, ? super A> handler)", "public abstract Future<Integer> read(ByteBuffer dst, long position)", "public abstract void write(ByteBuffer src, long position, A attachment, CompletionHandler<Integer, ? super A> handler)", "public abstract Future<Integer> write(ByteBuffer src, long position)" ],
  "variableNames" : [ "NO_ATTRIBUTES" ]
}