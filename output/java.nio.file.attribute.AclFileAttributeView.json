{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/attribute/AclFileAttributeView.java",
  "packageName" : "java.nio.file.attribute",
  "className" : "AclFileAttributeView",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the attribute view. Attribute views of this type\n     * have the name {@code \"acl\"}.\n     ",
    "links" : [ ]
  }, {
    "name" : " List<AclEntry> getAcl() throws IOException",
    "returnType" : "List<AclEntry>",
    "comment" : "\n     * Reads the access control list.\n     *\n     * <p> When the file system uses an ACL model that differs from the NFSv4\n     * defined ACL model, then this method returns an ACL that is the translation\n     * of the ACL to the NFSv4 ACL model.\n     *\n     * <p> The returned list is modifiable so as to facilitate changes to the\n     * existing ACL. The {@link #setAcl setAcl} method is used to update\n     * the file's ACL attribute.\n     *\n     * @return  an ordered list of {@link AclEntry entries} representing the\n     *          ACL\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link RuntimePermission}{@code (\"accessUserInformation\")}\n     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n     *          denies read access to the file.\n     ",
    "links" : [ "#checkRead(String)", "#setAcl", "java.nio.file.attribute.AclEntry", "RuntimePermission" ]
  }, {
    "name" : " void setAcl(List<AclEntry> acl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates (replace) the access control list.\n     *\n     * <p> Where the file system supports Access Control Lists, and it uses an\n     * ACL model that differs from the NFSv4 defined ACL model, then this method\n     * must translate the ACL to the model supported by the file system. This\n     * method should reject (by throwing {@link IOException IOException}) any\n     * attempt to write an ACL that would appear to make the file more secure\n     * than would be the case if the ACL were updated. Where an implementation\n     * does not support a mapping of {@link AclEntryType#AUDIT} or {@link\n     * AclEntryType#ALARM} entries, then this method ignores these entries when\n     * writing the ACL.\n     *\n     * <p> If an ACL entry contains a {@link AclEntry#principal user-principal}\n     * that is not associated with the same provider as this attribute view then\n     * {@link ProviderMismatchException} is thrown. Additional validation, if\n     * any, is implementation dependent.\n     *\n     * <p> If the file system supports other security related file attributes\n     * (such as a file {@link PosixFileAttributes#permissions\n     * access-permissions} for example), the updating the access control list\n     * may also cause these security related attributes to be updated.\n     *\n     * @param   acl\n     *          the new access control list\n     *\n     * @throws  IOException\n     *          if an I/O error occurs or the ACL is invalid\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, it denies {@link RuntimePermission}{@code (\"accessUserInformation\")}\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the file.\n     ",
    "links" : [ "java.nio.file.attribute.AclEntryType#AUDIT", "java.nio.file.attribute.AclEntryType#ALARM", "java.nio.file.attribute.AclEntry#principal", "java.io.IOException", "RuntimePermission", "ProviderMismatchException", "java.nio.file.attribute.PosixFileAttributes#permissionsaccess", "#checkWrite(String)" ]
  } ],
  "methodNames" : [ " String name()", " List<AclEntry> getAcl() throws IOException", " void setAcl(List<AclEntry> acl) throws IOException" ],
  "variableNames" : [ ]
}