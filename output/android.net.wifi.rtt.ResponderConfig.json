{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/rtt/ResponderConfig.java",
  "packageName" : "android.net.wifi.rtt",
  "className" : "ResponderConfig",
  "comment" : "\n * Defines the configuration of an IEEE 802.11mc Responder. The Responder may be an Access Point\n * (AP), a Wi-Fi Aware device, or a manually configured Responder.\n * <p>\n * A Responder configuration may be constructed from a {@link ScanResult} or manually (with the\n * data obtained out-of-band from a peer).\n ",
  "links" : [ "android.net.wifi.ScanResult" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AWARE_BAND_2_DISCOVERY_CHANNEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_AP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_STA",
    "type" : "int",
    "comment" : "\n     * Responder is a client device(STA).\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_P2P_GO",
    "type" : "int",
    "comment" : "\n     * Responder is a Wi-Fi Direct Group Owner (GO).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_P2P_CLIENT",
    "type" : "int",
    "comment" : "\n     * Responder is a Wi-Fi Direct Group Client.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_AWARE",
    "type" : "int",
    "comment" : "\n     * Responder is a Wi-Fi Aware device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_20MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 20 MHZ\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_40MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 40 MHZ\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 80 MHZ\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_160MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 160 MHZ\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ_PLUS_MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_320MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 320 MHZ\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_LEGACY",
    "type" : "int",
    "comment" : "\n     * Preamble type: Legacy.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_HT",
    "type" : "int",
    "comment" : "\n     * Preamble type: HT.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_VHT",
    "type" : "int",
    "comment" : "\n     * Preamble type: VHT.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_HE",
    "type" : "int",
    "comment" : "\n     * Preamble type: HE.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_EHT",
    "type" : "int",
    "comment" : "\n     * Preamble type: EHT.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_NTB_MIN_TIME_BETWEEN_MEASUREMENTS_MICROS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_NTB_MAX_TIME_BETWEEN_MEASUREMENTS_MICROS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "macAddress",
    "type" : "MacAddress",
    "comment" : "\n     * The MAC address of the Responder. Will be null if a Wi-Fi Aware peer identifier (the\n     * peerHandle field) ise used to identify the Responder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "peerHandle",
    "type" : "PeerHandle",
    "comment" : "\n     * The peer identifier of a Wi-Fi Aware Responder. Will be null if a MAC Address (the macAddress\n     * field) is used to identify the Responder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "responderType",
    "type" : "int",
    "comment" : "\n     * The device type of the Responder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "supports80211mc",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the Responder device supports IEEE 802.11mc.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "supports80211azNtb",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the Responder device supports IEEE 802.11az non-trigger based ranging.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "channelWidth",
    "type" : "int",
    "comment" : "\n     * Responder channel bandwidth, specified using {@link ChannelWidth}.\n     * @hide\n     ",
    "links" : [ "ChannelWidth" ]
  }, {
    "name" : "frequency",
    "type" : "int",
    "comment" : "\n     * The primary 20 MHz frequency (in MHz) of the channel of the Responder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "centerFreq0",
    "type" : "int",
    "comment" : "\n     * Not used if the {@link #channelWidth} is 20 MHz. If the Responder uses 40, 80, 160 or\n     * 320 MHz, this is the center frequency (in MHz), if the Responder uses 80 + 80 MHz,\n     * this is the center frequency of the first segment (in MHz).\n     * @hide\n     ",
    "links" : [ "#channelWidth" ]
  }, {
    "name" : "centerFreq1",
    "type" : "int",
    "comment" : "\n     * Only used if the {@link #channelWidth} is 80 + 80 MHz. If the Responder uses 80 + 80 MHz,\n     * this is the center frequency of the second segment (in MHz).\n     * @hide\n     ",
    "links" : [ "#channelWidth" ]
  }, {
    "name" : "preamble",
    "type" : "int",
    "comment" : "\n     * The preamble used by the Responder, specified using {@link PreambleType}.\n     * @hide\n     ",
    "links" : [ "PreambleType" ]
  }, {
    "name" : "mNtbMinMeasurementTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNtbMaxMeasurementTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ResponderConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ResponderConfig fromScanResult(@NonNull ScanResult scanResult)",
    "returnType" : "ResponderConfig",
    "comment" : "\n     * Creates a Responder configuration from a {@link ScanResult} corresponding to an Access\n     * Point (AP), which can be obtained from {@link android.net.wifi.WifiManager#getScanResults()}.\n     ",
    "links" : [ "android.net.wifi.ScanResult", "android.net.wifi.WifiManager#getScanResults()" ]
  }, {
    "name" : "public static ResponderConfig fromWifiAwarePeerMacAddressWithDefaults(@NonNull MacAddress macAddress)",
    "returnType" : "ResponderConfig",
    "comment" : "\n     * Creates a Responder configuration from a MAC address corresponding to a Wi-Fi Aware\n     * Responder. The Responder parameters are set to defaults.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResponderConfig fromWifiAwarePeerHandleWithDefaults(@NonNull PeerHandle peerHandle)",
    "returnType" : "ResponderConfig",
    "comment" : "\n     * Creates a Responder configuration from a {@link PeerHandle} corresponding to a Wi-Fi Aware\n     * Responder. The Responder parameters are set to defaults.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.PeerHandle" ]
  }, {
    "name" : "private static boolean isResponderTypeSupported(@ResponderType int responderType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid(boolean awareSupported)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the Responder configuration is valid.\n     *\n     * @return true if valid, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * @return the MAC address of the responder\n     ",
    "links" : [ ]
  }, {
    "name" : "public PeerHandle getPeerHandle()",
    "returnType" : "PeerHandle",
    "comment" : "\n     * @return the peer handle of the responder\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is80211mcSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the Responder supports the 802.11mc protocol, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is80211azNtbSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the Responder supports the 802.11az non-trigger based ranging protocol,\n     * false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChannelWidth()",
    "returnType" : "int",
    "comment" : "\n     * AP Channel bandwidth; one of {@link ScanResult#CHANNEL_WIDTH_20MHZ},\n     * {@link ScanResult#CHANNEL_WIDTH_40MHZ},\n     * {@link ScanResult#CHANNEL_WIDTH_80MHZ}, {@link ScanResult#CHANNEL_WIDTH_160MHZ},\n     * {@link ScanResult #CHANNEL_WIDTH_80MHZ_PLUS_MHZ} or {@link ScanResult#CHANNEL_WIDTH_320MHZ}.\n     *\n     * @return the bandwidth repsentation of the Wi-Fi channel\n     ",
    "links" : [ "android.net.wifi.ScanResult", "android.net.wifi.ScanResult#CHANNEL_WIDTH_320MHZ", "android.net.wifi.ScanResult#CHANNEL_WIDTH_80MHZ", "android.net.wifi.ScanResult#CHANNEL_WIDTH_20MHZ", "android.net.wifi.ScanResult#CHANNEL_WIDTH_40MHZ", "android.net.wifi.ScanResult#CHANNEL_WIDTH_160MHZ" ]
  }, {
    "name" : "public int getFrequencyMhz()",
    "returnType" : "int",
    "comment" : "\n     * @return the frequency in MHz of the Wi-Fi channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCenterFreq0Mhz()",
    "returnType" : "int",
    "comment" : "\n     * If the Access Point (AP) bandwidth is 20 MHz, 0 MHz is returned.\n     * If the AP use 40, 80 or 160 MHz, this is the center frequency (in MHz).\n     * if the AP uses 80 + 80 MHz, this is the center frequency of the first segment (in MHz).\n     *\n     * @return the center frequency in MHz of the first channel segment\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCenterFreq1Mhz()",
    "returnType" : "int",
    "comment" : "\n     * If the Access Point (AP) bandwidth is 80 + 80 MHz, this param is not used and returns 0.\n     * If the AP uses 80 + 80 MHz, this is the center frequency of the second segment in MHz.\n     *\n     * @return the center frequency in MHz of the second channel segment (if used)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPreamble()",
    "returnType" : "int",
    "comment" : "\n     * Get the preamble type of the channel.\n     *\n     * @return the preamble used for this channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResponderType()",
    "returnType" : "int",
    "comment" : "\n     * Get responder type.\n     * @see Builder#setResponderType(int)\n     * @return The type of this responder\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNtbMinTimeBetweenMeasurementsMicros()",
    "returnType" : "long",
    "comment" : "\n     * Gets the minimum time between IEEE 802.11az non-trigger based ranging measurements in\n     * microseconds for the responder.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNtbMaxTimeBetweenMeasurementsMicros()",
    "returnType" : "long",
    "comment" : "\n     * Gets the maximum time between IEEE 802.11az non-trigger based ranging measurements in\n     * microseconds for the responder.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNtbMinTimeBetweenMeasurementsMicros(long ntbMinMeasurementTime)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNtbMaxTimeBetweenMeasurementsMicros(long ntbMaxMeasurementTime)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int translateFromScanResultToLocalChannelWidth(@WifiAnnotations.ChannelWidth int scanResultChannelWidth)",
    "returnType" : "int",
    "comment" : "\n     * Translate an SDK channel width encoding to a local channel width encoding\n     *\n     * @param scanResultChannelWidth the {@link ScanResult} defined channel width encoding\n     * @return the translated channel width encoding\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : " static int translateFromLocalToScanResultChannelWidth(@ChannelWidth int localChannelWidth)",
    "returnType" : "int",
    "comment" : "\n     * Translate the local channel width encoding to the SDK channel width encoding.\n     *\n     * @param localChannelWidth the locally defined channel width encoding\n     * @return the translated channel width encoding\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static int translateFromScanResultToLocalPreamble(@WifiAnnotations.PreambleType int scanResultPreamble)",
    "returnType" : "int",
    "comment" : "\n     * Translate the {@link ScanResult} preamble encoding to the local preamble encoding.\n     *\n     * @param scanResultPreamble the channel width supplied\n     * @return the local encoding of the Preamble\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : " static int translateFromLocalToScanResultPreamble(@PreambleType int localPreamble)",
    "returnType" : "int",
    "comment" : "\n     * Translate the local preamble encoding to the {@link ScanResult} preamble encoding.\n     *\n     * @param localPreamble the local preamble encoding\n     * @return the {@link ScanResult} encoding of the Preamble\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  } ],
  "methodNames" : [ "public static ResponderConfig fromScanResult(@NonNull ScanResult scanResult)", "public static ResponderConfig fromWifiAwarePeerMacAddressWithDefaults(@NonNull MacAddress macAddress)", "public static ResponderConfig fromWifiAwarePeerHandleWithDefaults(@NonNull PeerHandle peerHandle)", "private static boolean isResponderTypeSupported(@ResponderType int responderType)", "public boolean isValid(boolean awareSupported)", "public MacAddress getMacAddress()", "public PeerHandle getPeerHandle()", "public boolean is80211mcSupported()", "public boolean is80211azNtbSupported()", "public int getChannelWidth()", "public int getFrequencyMhz()", "public int getCenterFreq0Mhz()", "public int getCenterFreq1Mhz()", "public int getPreamble()", "public int getResponderType()", "public long getNtbMinTimeBetweenMeasurementsMicros()", "public long getNtbMaxTimeBetweenMeasurementsMicros()", "public void setNtbMinTimeBetweenMeasurementsMicros(long ntbMinMeasurementTime)", "public void setNtbMaxTimeBetweenMeasurementsMicros(long ntbMaxMeasurementTime)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", " static int translateFromScanResultToLocalChannelWidth(@WifiAnnotations.ChannelWidth int scanResultChannelWidth)", " static int translateFromLocalToScanResultChannelWidth(@ChannelWidth int localChannelWidth)", " static int translateFromScanResultToLocalPreamble(@WifiAnnotations.PreambleType int scanResultPreamble)", " static int translateFromLocalToScanResultPreamble(@PreambleType int localPreamble)" ],
  "variableNames" : [ "TAG", "AWARE_BAND_2_DISCOVERY_CHANNEL", "RESPONDER_AP", "RESPONDER_STA", "RESPONDER_P2P_GO", "RESPONDER_P2P_CLIENT", "RESPONDER_AWARE", "CHANNEL_WIDTH_20MHZ", "CHANNEL_WIDTH_40MHZ", "CHANNEL_WIDTH_80MHZ", "CHANNEL_WIDTH_160MHZ", "CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "CHANNEL_WIDTH_320MHZ", "PREAMBLE_LEGACY", "PREAMBLE_HT", "PREAMBLE_VHT", "PREAMBLE_HE", "PREAMBLE_EHT", "DEFAULT_NTB_MIN_TIME_BETWEEN_MEASUREMENTS_MICROS", "DEFAULT_NTB_MAX_TIME_BETWEEN_MEASUREMENTS_MICROS", "macAddress", "peerHandle", "responderType", "supports80211mc", "supports80211azNtb", "channelWidth", "frequency", "centerFreq0", "centerFreq1", "preamble", "mNtbMinMeasurementTime", "mNtbMaxMeasurementTime", "CREATOR" ]
}