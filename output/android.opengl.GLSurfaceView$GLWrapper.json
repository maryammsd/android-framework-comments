{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/opengl/GLSurfaceView.java",
  "packageName" : "android.opengl",
  "className" : "GLWrapper",
  "comment" : "\n     * An interface used to wrap a GL interface.\n     * <p>Typically\n     * used for implementing debugging and tracing on top of the default\n     * GL interface. You would typically use this by creating your own class\n     * that implemented all the GL methods by delegating to another GL instance.\n     * Then you could add your own behavior before or after calling the\n     * delegate. All the GLWrapper would do was instantiate and return the\n     * wrapper GL instance:\n     * <pre class=\"prettyprint\">\n     * class MyGLWrapper implements GLWrapper {\n     *     GL wrap(GL gl) {\n     *         return new MyGLImplementation(gl);\n     *     }\n     *     static class MyGLImplementation implements GL,GL10,GL11,... {\n     *         ...\n     *     }\n     * }\n     * </pre>\n     * @see #setGLWrapper(GLWrapper)\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " GL wrap(GL gl)",
    "returnType" : "GL",
    "comment" : "\n         * Wraps a gl interface in another gl interface.\n         * @param gl a GL interface that is to be wrapped.\n         * @return either the input argument or another GL object that wraps the input argument.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " GL wrap(GL gl)" ],
  "variableNames" : [ ]
}