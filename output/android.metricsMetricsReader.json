{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/metrics/MetricsReader.java",
  "packageName" : "android.metrics",
  "className" : "MetricsReader",
  "comment" : "\n * Read platform logs.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mPendingQueue",
    "type" : "Queue<LogMaker>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeenQueue",
    "type" : "Queue<LogMaker>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGTAGS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReader",
    "type" : "LogReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckpointTag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setLogReader(LogReader reader)",
    "returnType" : "void",
    "comment" : "\n     * Set the reader to isolate unit tests from the framework\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void read(long horizonMs)",
    "returnType" : "void",
    "comment" : "\n     * Read the available logs into a new session.\n     *\n     * The session will contain events starting from the oldest available\n     * log on the system up to the most recent at the time of this call.\n     *\n     * A call to {@link #checkpoint()} will cause the session to contain\n     * only events that occured after that call.\n     *\n     * This call will not return until the system buffer overflows the\n     * specified timestamp. If the specified timestamp is 0, then the\n     * call will return immediately since any logs 1970 have already been\n     * overwritten (n.b. if the underlying system has the capability to\n     * store many decades of system logs, this call may fail in\n     * interesting ways.)\n     *\n     * @param horizonMs block until this timestamp is overwritten, 0 for non-blocking read.\n     ",
    "links" : [ "#checkpoint" ]
  }, {
    "name" : "public void checkpoint()",
    "returnType" : "void",
    "comment" : "\n     * Empties the session and causes the next {@link #read(long)} to\n     * yeild a session containing only events that occur after this call.\n     ",
    "links" : [ "#read" ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Rewind the session to the beginning of time and replay all available logs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : " Does the current log session have another entry? ",
    "links" : [ ]
  }, {
    "name" : "public LogMaker next()",
    "returnType" : "LogMaker",
    "comment" : " Return the next entry in the current log session. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPendingQueue", "mSeenQueue", "LOGTAGS", "mReader", "mCheckpointTag" ],
  "methodNames" : [ "public void setLogReader(LogReader reader)", "public void read(long horizonMs)", "public void checkpoint()", "public void reset()", "public boolean hasNext()", "public LogMaker next()" ]
}