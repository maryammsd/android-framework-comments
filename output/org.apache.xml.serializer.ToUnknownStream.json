{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToUnknownStream.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToUnknownStream",
  "comment" : "\n *This class wraps another SerializationHandler. The wrapped object will either\n * handler XML or HTML, which is not known until a little later when the first XML\n * tag is seen.  If the first tag is <html> then the wrapped object is an HTML\n * handler, otherwise it is an XML handler.\n *\n * This class effectively caches the first few calls to it then passes them\n * on to the wrapped handler (once it exists).  After that subsequent calls a\n * simply passed directly to the wrapped handler.\n *\n * The user of this class doesn't know if the output is ultimatley XML or HTML.\n * \n * This class is not a public API, it is public because it is used within Xalan.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_handler",
    "type" : "SerializationHandler",
    "comment" : "\n     * The wrapped handler, initially XML but possibly switched to HTML\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTYSTRING",
    "type" : "String",
    "comment" : "\n     * A String with no characters\n     ",
    "links" : [ ]
  }, {
    "name" : "m_wrapped_handler_not_initialized",
    "type" : "boolean",
    "comment" : "\n     * true if the underlying handler (XML or HTML) is fully initialized\n     ",
    "links" : [ ]
  }, {
    "name" : "m_firstElementPrefix",
    "type" : "String",
    "comment" : "\n     * the prefix of the very first tag in the document\n     ",
    "links" : [ ]
  }, {
    "name" : "m_firstElementName",
    "type" : "String",
    "comment" : "\n     * the element name (including any prefix) of the very first tag in the document\n     ",
    "links" : [ ]
  }, {
    "name" : "m_firstElementURI",
    "type" : "String",
    "comment" : "\n     * the namespace URI associated with the first element\n     ",
    "links" : [ ]
  }, {
    "name" : "m_firstElementLocalName",
    "type" : "String",
    "comment" : "\n     * the local name (no prefix) associated with the first element\n     ",
    "links" : [ ]
  }, {
    "name" : "m_firstTagNotEmitted",
    "type" : "boolean",
    "comment" : "\n     * true if the first tag has been emitted to the wrapped handler\n     ",
    "links" : [ ]
  }, {
    "name" : "m_namespaceURI",
    "type" : "Vector",
    "comment" : "\n     * A collection of namespace URI's (only for first element).\n     * _namespacePrefix has the matching prefix for these URI's\n     ",
    "links" : [ ]
  }, {
    "name" : "m_namespacePrefix",
    "type" : "Vector",
    "comment" : "\n     * A collection of namespace Prefix (only for first element)\n     * _namespaceURI has the matching URIs for these prefix'\n     ",
    "links" : [ ]
  }, {
    "name" : "m_needToCallStartDocument",
    "type" : "boolean",
    "comment" : "\n     * true if startDocument() was called before the underlying handler\n     * was initialized\n     ",
    "links" : [ ]
  }, {
    "name" : "m_setVersion_called",
    "type" : "boolean",
    "comment" : "\n     * true if setVersion() was called before the underlying handler\n     * was initialized\n     ",
    "links" : [ ]
  }, {
    "name" : "m_setDoctypeSystem_called",
    "type" : "boolean",
    "comment" : "\n     * true if setDoctypeSystem() was called before the underlying handler\n     * was initialized\n     ",
    "links" : [ ]
  }, {
    "name" : "m_setDoctypePublic_called",
    "type" : "boolean",
    "comment" : "\n     * true if setDoctypePublic() was called before the underlying handler\n     * was initialized\n     ",
    "links" : [ ]
  }, {
    "name" : "m_setMediaType_called",
    "type" : "boolean",
    "comment" : "\n     * true if setMediaType() was called before the underlying handler\n     * was initialized\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ContentHandler asContentHandler() throws IOException",
    "returnType" : "ContentHandler",
    "comment" : "\n     * @see Serializer#asContentHandler()\n     * @return the wrapped XML or HTML handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * @see SerializationHandler#close()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Properties getOutputFormat()",
    "returnType" : "Properties",
    "comment" : "\n     * @see Serializer#getOutputFormat()\n     * @return the properties of the underlying handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * @see Serializer#getOutputStream()\n     * @return the OutputStream of the underlying XML or HTML handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "\n     * @see Serializer#getWriter()\n     * @return the Writer of the underlying XML or HTML handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * passes the call on to the underlying HTML or XML handler\n     * @see Serializer#reset()\n     * @return ???\n     ",
    "links" : [ ]
  }, {
    "name" : "public void serialize(Node node) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Converts the DOM node to output\n     * @param node the DOM node to transform to output\n     * @see DOMSerializer#serialize(Node)\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setEscaping(boolean escape) throws SAXException",
    "returnType" : "boolean",
    "comment" : "\n     * @see SerializationHandler#setEscaping(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputFormat(Properties format)",
    "returnType" : "void",
    "comment" : "\n     * Set the properties of the handler\n     * @param format the output properties to set\n     * @see Serializer#setOutputFormat(Properties)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputStream(OutputStream output)",
    "returnType" : "void",
    "comment" : "\n     * Sets the output stream to write to\n     * @param output the OutputStream to write to\n     * @see Serializer#setOutputStream(OutputStream)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWriter(Writer writer)",
    "returnType" : "void",
    "comment" : "\n     * Sets the writer to write to\n     * @param writer the writer to write to\n     * @see Serializer#setWriter(Writer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adds an attribute to the currenly open tag\n     * @param uri the URI of a namespace\n     * @param localName the attribute name, without prefix\n     * @param rawName the attribute name, with prefix (if any)\n     * @param type the type of the attribute, typically \"CDATA\"\n     * @param value the value of the parameter\n     * @param XSLAttribute true if this attribute is coming from an xsl:attribute element\n     * @see ExtendedContentHandler#addAttribute(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String rawName, String value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an attribute to the currenly open tag\n     * @param rawName the attribute name, with prefix (if any)\n     * @param value the value of the parameter\n     * @see ExtendedContentHandler#addAttribute(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueAttribute(String rawName, String value, int flags) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adds a unique attribute to the currenly open tag\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(String chars) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Converts the String to a character array and calls the SAX method \n     * characters(char[],int,int);\n     * \n     * @see ExtendedContentHandler#characters(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String elementName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see ExtendedContentHandler#endElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)\n     * @param prefix The prefix that maps to the URI\n     * @param uri The URI for the namespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used when a prefix/uri namespace mapping\n     * is indicated after the element was started with a\n     * startElement() and before and endElement().\n     * startPrefixMapping(prefix,uri) would be used before the\n     * startElement() call.\n     * @param uri the URI of the namespace\n     * @param prefix the prefix associated with the given URI.\n     *\n     * @see ExtendedContentHandler#namespaceAfterStartElement(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVersion(String version)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#startDocument()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String namespaceURI, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String namespaceURI, String localName, String elementName, Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void comment(String comment) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see ExtendedLexicalHandler#comment(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDoctypePublic()",
    "returnType" : "String",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getDoctypePublic()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDoctypeSystem()",
    "returnType" : "String",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getDoctypeSystem()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getEncoding()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIndent()",
    "returnType" : "boolean",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getIndent()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndentAmount()",
    "returnType" : "int",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getIndentAmount()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMediaType()",
    "returnType" : "String",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getMediaType()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getOmitXMLDeclaration()",
    "returnType" : "boolean",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getOmitXMLDeclaration()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getStandalone()",
    "returnType" : "String",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getStandalone()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVersion()",
    "returnType" : "String",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#getVersion()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoctype(String system, String pub)",
    "returnType" : "void",
    "comment" : "\n     * @see XSLOutputAttributes#setDoctype(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoctypePublic(String doctype)",
    "returnType" : "void",
    "comment" : "\n     * Set the doctype in the underlying XML handler. Remember that this method\n     * was called, just in case we need to transfer this doctype to an HTML handler\n     * @param doctype the public doctype to set\n     * @see XSLOutputAttributes#setDoctypePublic(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoctypeSystem(String doctype)",
    "returnType" : "void",
    "comment" : "\n     * Set the doctype in the underlying XML handler. Remember that this method\n     * was called, just in case we need to transfer this doctype to an HTML handler\n     * @param doctype the system doctype to set\n     * @see XSLOutputAttributes#setDoctypeSystem(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEncoding(String encoding)",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#setEncoding(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndent(boolean indent)",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#setIndent(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndentAmount(int value)",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMediaType(String mediaType)",
    "returnType" : "void",
    "comment" : "\n     * @see XSLOutputAttributes#setMediaType(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOmitXMLDeclaration(boolean b)",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#setOmitXMLDeclaration(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStandalone(String standalone)",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see XSLOutputAttributes#setStandalone(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String arg0, String arg1, String arg2, String arg3, String arg4) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.DeclHandler#attributeDecl(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.DeclHandler#elementDecl(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.DeclHandler#externalEntityDecl(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.DeclHandler#internalEntityDecl(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] characters, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#characters(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#endDocument()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String namespaceURI, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#endElement(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#endPrefixMapping(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#processingInstruction(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#setDocumentLocator(Locator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ContentHandler#skippedEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#endCDATA()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#endDTD()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#endEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#startCDATA()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#startDTD(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass the call on to the underlying handler\n     * @see org.xml.sax.ext.LexicalHandler#startEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initStreamOutput() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Initialize the wrapped output stream (XML or HTML).\n     * If the stream handler should be HTML, then replace the XML handler with\n     * an HTML handler. After than send the starting method calls that were cached\n     * to the wrapped handler.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private void emitFirstTag() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getLocalNameUnknown(String value)",
    "returnType" : "String",
    "comment" : "\n     * Utility function for calls to local-name().\n     *\n     * Don't want to override static function on SerializerBase\n     * So added Unknown suffix to method name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getPrefixPartUnknown(String qname)",
    "returnType" : "String",
    "comment" : "\n         * Utility function to return prefix\n         *\n         * Don't want to override static function on SerializerBase\n         * So added Unknown suffix to method name.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isFirstElemHTML()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the firts element in the document is <html> or <HTML>\n     * This uses the cached first element name, first element prefix and the\n     * cached namespaces from previous method calls\n     *\n     * @return true if the first element is an opening <html> tag\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMSerializer asDOMSerializer() throws IOException",
    "returnType" : "DOMSerializer",
    "comment" : "\n     * @see Serializer#asDOMSerializer()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCdataSectionElements(Vector URI_and_localNames)",
    "returnType" : "void",
    "comment" : "\n     * @param URI_and_localNames Vector a list of pairs of URI/localName\n     * specified in the cdata-section-elements attribute.\n     * @see SerializationHandler#setCdataSectionElements(java.util.Vector)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttributes(Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#addAttributes(org.xml.sax.Attributes)\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamespaceMappings getNamespaceMappings()",
    "returnType" : "NamespaceMappings",
    "comment" : "\n     * Get the current namespace mappings.\n     * Simply returns the mappings of the wrapped handler.\n     * @see ExtendedContentHandler#getNamespaceMappings()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flushPending() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see SerializationHandler#flushPending()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void flush()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     * @see ExtendedContentHandler#getPrefix\n     ",
    "links" : [ ]
  }, {
    "name" : "public void entityReference(String entityName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#entityReference(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI(String qname, boolean isElement)",
    "returnType" : "String",
    "comment" : "\n     * @see ExtendedContentHandler#getNamespaceURI(java.lang.String, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURIFromPrefix(String prefix)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTransformer(Transformer t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Transformer getTransformer()",
    "returnType" : "Transformer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler ch)",
    "returnType" : "void",
    "comment" : "\n     * @see SerializationHandler#setContentHandler(org.xml.sax.ContentHandler)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceLocator(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n     * This method is used to set the source locator, which might be used to\n     * generated an error message.\n     * @param locator the source locator\n     *\n     * @see ExtendedContentHandler#setSourceLocator(javax.xml.transform.SourceLocator)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void firePseudoElement(String elementName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object asDOM3Serializer() throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * @see org.apache.xml.serializer.Serializer#asDOM3Serializer()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ContentHandler asContentHandler() throws IOException", "public void close()", "public Properties getOutputFormat()", "public OutputStream getOutputStream()", "public Writer getWriter()", "public boolean reset()", "public void serialize(Node node) throws IOException", "public boolean setEscaping(boolean escape) throws SAXException", "public void setOutputFormat(Properties format)", "public void setOutputStream(OutputStream output)", "public void setWriter(Writer writer)", "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException", "public void addAttribute(String rawName, String value)", "public void addUniqueAttribute(String rawName, String value, int flags) throws SAXException", "public void characters(String chars) throws SAXException", "public void endElement(String elementName) throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public void namespaceAfterStartElement(String prefix, String uri) throws SAXException", "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException", "public void setVersion(String version)", "public void startDocument() throws SAXException", "public void startElement(String qName) throws SAXException", "public void startElement(String namespaceURI, String localName, String qName) throws SAXException", "public void startElement(String namespaceURI, String localName, String elementName, Attributes atts) throws SAXException", "public void comment(String comment) throws SAXException", "public String getDoctypePublic()", "public String getDoctypeSystem()", "public String getEncoding()", "public boolean getIndent()", "public int getIndentAmount()", "public String getMediaType()", "public boolean getOmitXMLDeclaration()", "public String getStandalone()", "public String getVersion()", "public void setDoctype(String system, String pub)", "public void setDoctypePublic(String doctype)", "public void setDoctypeSystem(String doctype)", "public void setEncoding(String encoding)", "public void setIndent(boolean indent)", "public void setIndentAmount(int value)", "public void setMediaType(String mediaType)", "public void setOmitXMLDeclaration(boolean b)", "public void setStandalone(String standalone)", "public void attributeDecl(String arg0, String arg1, String arg2, String arg3, String arg4) throws SAXException", "public void elementDecl(String arg0, String arg1) throws SAXException", "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException", "public void internalEntityDecl(String arg0, String arg1) throws SAXException", "public void characters(char[] characters, int offset, int length) throws SAXException", "public void endDocument() throws SAXException", "public void endElement(String namespaceURI, String localName, String qName) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void setDocumentLocator(Locator locator)", "public void skippedEntity(String name) throws SAXException", "public void comment(char[] ch, int start, int length) throws SAXException", "public void endCDATA() throws SAXException", "public void endDTD() throws SAXException", "public void endEntity(String name) throws SAXException", "public void startCDATA() throws SAXException", "public void startDTD(String name, String publicId, String systemId) throws SAXException", "public void startEntity(String name) throws SAXException", "private void initStreamOutput() throws SAXException", "private void emitFirstTag() throws SAXException", "private String getLocalNameUnknown(String value)", "private String getPrefixPartUnknown(String qname)", "private boolean isFirstElemHTML()", "public DOMSerializer asDOMSerializer() throws IOException", "public void setCdataSectionElements(Vector URI_and_localNames)", "public void addAttributes(Attributes atts) throws SAXException", "public NamespaceMappings getNamespaceMappings()", "public void flushPending() throws SAXException", "private void flush()", "public String getPrefix(String namespaceURI)", "public void entityReference(String entityName) throws SAXException", "public String getNamespaceURI(String qname, boolean isElement)", "public String getNamespaceURIFromPrefix(String prefix)", "public void setTransformer(Transformer t)", "public Transformer getTransformer()", "public void setContentHandler(ContentHandler ch)", "public void setSourceLocator(SourceLocator locator)", "protected void firePseudoElement(String elementName)", "public Object asDOM3Serializer() throws IOException" ],
  "variableNames" : [ "m_handler", "EMPTYSTRING", "m_wrapped_handler_not_initialized", "m_firstElementPrefix", "m_firstElementName", "m_firstElementURI", "m_firstElementLocalName", "m_firstTagNotEmitted", "m_namespaceURI", "m_namespacePrefix", "m_needToCallStartDocument", "m_setVersion_called", "m_setDoctypeSystem_called", "m_setDoctypePublic_called", "m_setMediaType_called" ]
}