{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PermissionEnforcer.java",
  "packageName" : "android.os",
  "className" : "PermissionEnforcer",
  "comment" : "\n * PermissionEnforcer check permissions for AIDL-generated services which use\n * the @EnforcePermission annotation.\n *\n * <p>AIDL services may be annotated with @EnforcePermission which will trigger\n * the generation of permission check code. This generated code relies on\n * PermissionEnforcer to validate the permissions. The methods available are\n * purposely similar to the AIDL annotation syntax.\n *\n * <p>The constructor of the Stub generated by AIDL expects a\n * PermissionEnforcer. It can be based on the current Context. For example:\n *\n * <pre>{@code\n * class MyFoo extends Foo.Stub {\n *     MyFoo(Context context) {\n *         super(PermissionEnforcer.fromContext(context));\n *     }\n *\n *     @Override\n *     @EnforcePermission(android.Manifest.permission.INTERNET)\n *     public MyMethod() {\n *         MyMethod_enforcePermission();\n *     }\n * }\n * }</pre>\n *\n * <p>A {@link android.os.test.FakePermissionEnforcer} is available for unit\n * testing. It can be attached to a mocked Context using:\n * <pre>{@code\n * @Mock private Context mContext;\n *\n * @Before\n * public setUp() {\n *   fakeEnforcer = new FakePermissionEnforcer();\n *   fakeEnforcer.grant(android.Manifest.permission.INTERNET);\n *\n *   doReturn(fakeEnforcer).when(mContext).getSystemService(\n                eq(Context.PERMISSION_ENFORCER_SERVICE));\n * }\n * }</pre>\n *\n * @see android.permission.PermissionManager\n *\n * @hide\n ",
  "links" : [ "android.os.test.FakePermissionEnforcer" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCESS_DENIED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected int checkPermission(@NonNull String permission, @NonNull AttributionSource source)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int checkPermission(@NonNull String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int permissionToOpCode(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int permissionToOpCode$ravenwood(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean anyAppOps(@NonNull String[] permissions)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermission(@NonNull String permission, @NonNull AttributionSource source) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermission(@NonNull String permission, int pid, int uid) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermissionAllOf(@NonNull String[] permissions, @NonNull AttributionSource source) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermissionAllOf(@NonNull String[] permissions, int pid, int uid) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermissionAnyOf(@NonNull String[] permissions, @NonNull AttributionSource source) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermissionAnyOf(@NonNull String[] permissions, int pid, int uid) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PermissionEnforcer fromContext(@NonNull Context context)",
    "returnType" : "PermissionEnforcer",
    "comment" : "\n     * Returns a new PermissionEnforcer based on a Context.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int checkPermission(@NonNull String permission, @NonNull AttributionSource source)", "protected int checkPermission(@NonNull String permission, int pid, int uid)", "private static int permissionToOpCode(String permission)", "private static int permissionToOpCode$ravenwood(String permission)", "private boolean anyAppOps(@NonNull String[] permissions)", "public void enforcePermission(@NonNull String permission, @NonNull AttributionSource source) throws SecurityException", "public void enforcePermission(@NonNull String permission, int pid, int uid) throws SecurityException", "public void enforcePermissionAllOf(@NonNull String[] permissions, @NonNull AttributionSource source) throws SecurityException", "public void enforcePermissionAllOf(@NonNull String[] permissions, int pid, int uid) throws SecurityException", "public void enforcePermissionAnyOf(@NonNull String[] permissions, @NonNull AttributionSource source) throws SecurityException", "public void enforcePermissionAnyOf(@NonNull String[] permissions, int pid, int uid) throws SecurityException", "public static PermissionEnforcer fromContext(@NonNull Context context)" ],
  "variableNames" : [ "mContext", "ACCESS_DENIED" ]
}