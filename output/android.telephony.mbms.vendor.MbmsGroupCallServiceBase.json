{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/mbms/vendor/MbmsGroupCallServiceBase.java",
  "packageName" : "android.telephony.mbms.vendor",
  "className" : "MbmsGroupCallServiceBase",
  "comment" : "\n * Base class for MBMS group-call services. The middleware should override this class to implement\n * its {@link Service} for group calls\n * Subclasses should call this class's {@link #onBind} method to obtain an {@link IBinder} if they\n * override {@link #onBind}.\n * @hide\n ",
  "links" : [ "android.app.Service", "#onBind", "android.os.IBinder" ],
  "variables" : [ {
    "name" : "mInterface",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int initialize(@NonNull MbmsGroupCallSessionCallback callback, int subscriptionId) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Initialize the group call service for this app and subscription ID, registering the callback.\n     *\n     * May throw an {@link IllegalArgumentException} or a {@link SecurityException}, which\n     * will be intercepted and passed to the app as\n     * {@link MbmsErrors.InitializationErrtrors#ERROR_UNABLE_TO_INITIALIZE}\n     *\n     * May return any value from {@link MbmsErrors.InitializationErrors}\n     * or {@link MbmsErrors#SUCCESS}. Non-successful error codes will be passed to the app via\n     * {@link IMbmsGroupCallSessionCallback#onError(int, String)}.\n     *\n     * @param callback The callback to use to communicate with the app.\n     * @param subscriptionId The subscription ID to use.\n     ",
    "links" : [ "MbmsErrors.InitializationErrors", "MbmsErrors.InitializationErrtrors#ERROR_UNABLE_TO_INITIALIZE", "android.telephony.mbms.IMbmsGroupCallSessionCallback#onError(int", "android.telephony.mbms.MbmsErrors#SUCCESS", "SecurityException", "IllegalArgumentException" ]
  }, {
    "name" : "public int startGroupCall(int subscriptionId, long tmgi, @NonNull List<Integer> saiList, @NonNull List<Integer> frequencyList, @NonNull GroupCallCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Starts a particular group call. This method may perform asynchronous work. When\n     * the call is ready for consumption, the middleware should inform the app via\n     * {@link IGroupCallCallback#onGroupCallStateChanged(int, int)}.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param tmgi The TMGI, an identifier for the group call.\n     * @param saiList A list of SAIs for the group call.\n     * @param frequencyList A list of frequencies for the group call.\n     * @param callback The callback object on which the app wishes to receive updates.\n     * @return Any error in {@link MbmsErrors.GeneralErrors}\n     ",
    "links" : [ "IllegalStateException", "MbmsErrors.GeneralErrors", "android.telephony.mbms.IGroupCallCallback#onGroupCallStateChanged(int", "IllegalArgumentException" ]
  }, {
    "name" : "public void stopGroupCall(int subscriptionId, long tmgi)",
    "returnType" : "void",
    "comment" : "\n     * Stop the group call identified by {@code tmgi}.\n     *\n     * The callback provided via {@link #startGroupCall} should no longer be\n     * used after this method has called by the app.\n     *\n     * May throw an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param tmgi The TMGI for the call to stop.\n     ",
    "links" : [ "IllegalStateException", "#startGroupCall" ]
  }, {
    "name" : "public void updateGroupCall(int subscriptionId, long tmgi, @NonNull List<Integer> saiList, @NonNull List<Integer> frequencyList)",
    "returnType" : "void",
    "comment" : "\n     * Called when the app receives new SAI and frequency information for the group call identified\n     * by {@code tmgi}.\n     * @param saiList New list of SAIs that the call is available on.\n     * @param frequencyList New list of frequencies that the call is available on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispose(int subscriptionId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Signals that the app wishes to dispose of the session identified by the\n     * {@code subscriptionId} argument and the caller's uid. No notification back to the\n     * app is required for this operation, and the corresponding callback provided via\n     * {@link #initialize} should no longer be used\n     * after this method has been called by the app.\n     *\n     * May throw an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     ",
    "links" : [ "IllegalStateException", "#initialize" ]
  }, {
    "name" : "public void onAppCallbackDied(int uid, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the app identified by the given UID and subscription ID has died.\n     * @param uid the UID of the app, as returned by {@link Binder#getCallingUid()}.\n     * @param subscriptionId The subscription ID the app is using.\n     ",
    "links" : [ "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int initialize(@NonNull MbmsGroupCallSessionCallback callback, int subscriptionId) throws RemoteException", "public int startGroupCall(int subscriptionId, long tmgi, @NonNull List<Integer> saiList, @NonNull List<Integer> frequencyList, @NonNull GroupCallCallback callback)", "public void stopGroupCall(int subscriptionId, long tmgi)", "public void updateGroupCall(int subscriptionId, long tmgi, @NonNull List<Integer> saiList, @NonNull List<Integer> frequencyList)", "public void dispose(int subscriptionId) throws RemoteException", "public void onAppCallbackDied(int uid, int subscriptionId)", "public IBinder onBind(Intent intent)" ],
  "variableNames" : [ "mInterface" ]
}