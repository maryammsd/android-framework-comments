{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/DevicePolicyCache.java",
  "packageName" : "android.app.admin",
  "className" : "DevicePolicyCache",
  "comment" : "\n * Stores a copy of the set of device policies maintained by {@link DevicePolicyManager} that\n * can be accessed from any place without risking dead locks.\n *\n * @hide\n ",
  "links" : [ "android.app.admin.DevicePolicyManager" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static DevicePolicyCache getInstance()",
    "returnType" : "DevicePolicyCache",
    "comment" : "\n     * @return the instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isScreenCaptureAllowed(@UserIdInt int userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link DevicePolicyManager#getScreenCaptureDisabled}\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#getScreenCaptureDisabled" ]
  }, {
    "name" : "public abstract int getPasswordQuality(@UserIdInt int userHandle)",
    "returnType" : "int",
    "comment" : "\n     * Caches {@link DevicePolicyManager#getPasswordQuality(android.content.ComponentName)} of the\n     * given user with {@code null} passed in as argument.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#getPasswordQuality(android.content.ComponentName)" ]
  }, {
    "name" : "public abstract int getPermissionPolicy(@UserIdInt int userHandle)",
    "returnType" : "int",
    "comment" : "\n     * Caches {@link DevicePolicyManager#getPermissionPolicy(android.content.ComponentName)} of\n     * the given user.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#getPermissionPolicy(android.content.ComponentName)" ]
  }, {
    "name" : "public abstract int getContentProtectionPolicy(@UserIdInt int userId)",
    "returnType" : "int",
    "comment" : "\n     * Caches {@link DevicePolicyManager#getContentProtectionPolicy(android.content.ComponentName)}\n     * of the given user.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#getContentProtectionPolicy(android.content.ComponentName)" ]
  }, {
    "name" : "public abstract boolean canAdminGrantSensorsPermissions()",
    "returnType" : "boolean",
    "comment" : "\n     * True if there is an admin on the device who can grant sensor permissions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, String> getLauncherShortcutOverrides()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Returns a map of package names to package names, for which all launcher shortcuts which\n     * match a key package name should be modified to launch the corresponding value package\n     * name in the managed profile. The overridden shortcut should be badged accordingly.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DevicePolicyCache getInstance()", "public abstract boolean isScreenCaptureAllowed(@UserIdInt int userHandle)", "public abstract int getPasswordQuality(@UserIdInt int userHandle)", "public abstract int getPermissionPolicy(@UserIdInt int userHandle)", "public abstract int getContentProtectionPolicy(@UserIdInt int userId)", "public abstract boolean canAdminGrantSensorsPermissions()", "public abstract Map<String, String> getLauncherShortcutOverrides()" ],
  "variableNames" : [ ]
}