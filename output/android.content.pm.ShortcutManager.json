{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/ShortcutManager.java",
  "packageName" : "android.content.pm",
  "className" : "ShortcutManager",
  "comment" : "\n * <p><code>ShortcutManager</code> executes operations on an app's set of <i>shortcuts</i>, which\n * represent specific tasks and actions that users can perform within your app. This page lists\n * components of the <code>ShortcutManager</code> class that you can use to create and manage\n * sets of shortcuts.\n *\n * <p>To learn about methods that retrieve information about a single shortcut&mdash;including\n * identifiers, type, and status&mdash;read the <code>\n * <a href=\"/reference/android/content/pm/ShortcutInfo.html\">ShortcutInfo</a></code> reference.\n *\n * <p>For guidance about using shortcuts, see\n * <a href=\"/guide/topics/ui/shortcuts/index.html\">App shortcuts</a>.\n *\n * <h3>Retrieving class instances</h3>\n * <!-- Provides a heading for the content filled in by the @SystemService annotation below -->\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_MANIFEST",
    "type" : "int",
    "comment" : "\n     * Include manifest shortcuts in the result.\n     *\n     * @see #getShortcuts(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_DYNAMIC",
    "type" : "int",
    "comment" : "\n     * Include dynamic shortcuts in the result.\n     *\n     * @see #getShortcuts(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_PINNED",
    "type" : "int",
    "comment" : "\n     * Include pinned shortcuts in the result.\n     *\n     * @see #getShortcuts(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_CACHED",
    "type" : "int",
    "comment" : "\n     * Include cached shortcuts in the result.\n     *\n     * @see #getShortcuts(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IShortcutService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean setDynamicShortcuts(@NonNull List<ShortcutInfo> shortcutInfoList)",
    "returnType" : "boolean",
    "comment" : "\n     * Publish the list of shortcuts.  All existing dynamic shortcuts from the caller app\n     * will be replaced.  If there are already pinned shortcuts with the same IDs,\n     * the mutable pinned shortcuts are updated.\n     *\n     * <p>This API will be rate-limited.\n     *\n     * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.\n     *\n     * @throws IllegalArgumentException if {@link #getMaxShortcutCountPerActivity()} is exceeded,\n     * or when trying to update immutable shortcuts.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "#getMaxShortcutCountPerActivity()" ]
  }, {
    "name" : "public List<ShortcutInfo> getDynamicShortcuts()",
    "returnType" : "List<ShortcutInfo>",
    "comment" : "\n     * Return all dynamic shortcuts from the caller app.\n     *\n     * <p>This API is intended to be used for examining what shortcuts are currently published.\n     * Re-publishing returned {@link ShortcutInfo}s via APIs such as\n     * {@link #setDynamicShortcuts(List)} may cause loss of information such as icons.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo", "#setDynamicShortcuts(List)" ]
  }, {
    "name" : "public List<ShortcutInfo> getManifestShortcuts()",
    "returnType" : "List<ShortcutInfo>",
    "comment" : "\n     * Return all static (manifest) shortcuts from the caller app.\n     *\n     * <p>This API is intended to be used for examining what shortcuts are currently published.\n     * Re-publishing returned {@link ShortcutInfo}s via APIs such as\n     * {@link #setDynamicShortcuts(List)} may cause loss of information such as icons.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo", "#setDynamicShortcuts(List)" ]
  }, {
    "name" : "public List<ShortcutInfo> getShortcuts(@ShortcutMatchFlags int matchFlags)",
    "returnType" : "List<ShortcutInfo>",
    "comment" : "\n     * Returns {@link ShortcutInfo}s that match {@code matchFlags}.\n     *\n     * @param matchFlags result includes shortcuts matching this flags. Any combination of:\n     * <ul>\n     *     <li>{@link #FLAG_MATCH_MANIFEST}\n     *     <li>{@link #FLAG_MATCH_DYNAMIC}\n     *     <li>{@link #FLAG_MATCH_PINNED}\n     *     <li>{@link #FLAG_MATCH_CACHED}\n     * </ul>\n\n     * @return list of {@link ShortcutInfo}s that match the flag.\n     *\n     * <p>At least one of the {@code MATCH} flags should be set. Otherwise no shortcuts will be\n     * returned.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "#FLAG_MATCH_DYNAMIC", "#FLAG_MATCH_CACHED", "android.content.pm.ShortcutInfo", "#FLAG_MATCH_MANIFEST", "#FLAG_MATCH_PINNED" ]
  }, {
    "name" : "public boolean addDynamicShortcuts(@NonNull List<ShortcutInfo> shortcutInfoList)",
    "returnType" : "boolean",
    "comment" : "\n     * Publish the list of dynamic shortcuts.  If there are already dynamic or pinned shortcuts with\n     * the same IDs, each mutable shortcut is updated.\n     *\n     * <p>This API will be rate-limited.\n     *\n     * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.\n     *\n     * @throws IllegalArgumentException if {@link #getMaxShortcutCountPerActivity()} is exceeded,\n     * or when trying to update immutable shortcuts.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "#getMaxShortcutCountPerActivity()" ]
  }, {
    "name" : "public void removeDynamicShortcuts(@NonNull List<String> shortcutIds)",
    "returnType" : "void",
    "comment" : "\n     * Delete dynamic shortcuts by ID.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllDynamicShortcuts()",
    "returnType" : "void",
    "comment" : "\n     * Delete all dynamic shortcuts from the caller app.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeLongLivedShortcuts(@NonNull List<String> shortcutIds)",
    "returnType" : "void",
    "comment" : "\n     * Delete long lived shortcuts by ID.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ShortcutInfo> getPinnedShortcuts()",
    "returnType" : "List<ShortcutInfo>",
    "comment" : "\n     * Return all pinned shortcuts from the caller app.\n     *\n     * <p>This API is intended to be used for examining what shortcuts are currently published.\n     * Re-publishing returned {@link ShortcutInfo}s via APIs such as\n     * {@link #setDynamicShortcuts(List)} may cause loss of information such as icons.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo", "#setDynamicShortcuts(List)" ]
  }, {
    "name" : "public boolean updateShortcuts(@NonNull List<ShortcutInfo> shortcutInfoList)",
    "returnType" : "boolean",
    "comment" : "\n     * Update all existing shortcuts with the same IDs.  Target shortcuts may be pinned and/or\n     * dynamic, but they must not be immutable.\n     *\n     * <p>This API will be rate-limited.\n     *\n     * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.\n     *\n     * @throws IllegalArgumentException If trying to update immutable shortcuts.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableShortcuts(@NonNull List<String> shortcutIds)",
    "returnType" : "void",
    "comment" : "\n     * Disable pinned shortcuts.  For more details, read\n     * <a href=\"/guide/topics/ui/shortcuts/managing-shortcuts.html#disable-shortcuts\">\n     * Disable shortcuts</a>.\n     *\n     * @throws IllegalArgumentException If trying to disable immutable shortcuts.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableShortcuts(@NonNull List<String> shortcutIds, int disabledMessageResId)",
    "returnType" : "void",
    "comment" : "\n     * @hide old signature, kept for unit testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableShortcuts(@NonNull List<String> shortcutIds, String disabledMessage)",
    "returnType" : "void",
    "comment" : "\n     * @hide old signature, kept for unit testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableShortcuts(@NonNull List<String> shortcutIds, CharSequence disabledMessage)",
    "returnType" : "void",
    "comment" : "\n     * Disable pinned shortcuts, showing the user a custom error message when they try to select\n     * the disabled shortcuts.\n     * For more details, read\n     * <a href=\"/guide/topics/ui/shortcuts/managing-shortcuts.html#disable-shortcuts\">\n     * Disable shortcuts</a>.\n     *\n     * @throws IllegalArgumentException If trying to disable immutable shortcuts.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableShortcuts(@NonNull List<String> shortcutIds)",
    "returnType" : "void",
    "comment" : "\n     * Re-enable pinned shortcuts that were previously disabled.  If the target shortcuts\n     * are already enabled, this method does nothing.\n     *\n     * @throws IllegalArgumentException If trying to enable immutable shortcuts.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxShortcutCountForActivity()",
    "returnType" : "int",
    "comment" : "\n     * @hide old signature, kept for unit testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxShortcutCountPerActivity()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of static and dynamic shortcuts that each launcher icon\n     * can have at a time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRemainingCallCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of times the caller app can call the rate-limited APIs\n     * before the rate limit counter is reset.\n     *\n     * @see #getRateLimitResetTime()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getRateLimitResetTime()",
    "returnType" : "long",
    "comment" : "\n     * Return when the rate limit count will be reset next time, in milliseconds since the epoch.\n     *\n     * @see #getRemainingCallCount()\n     * @see System#currentTimeMillis()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRateLimitingActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} when rate-limiting is active for the caller app.\n     *\n     * <p>For details, see <a href=\"/guide/topics/ui/shortcuts/managing-shortcuts#rate-limiting\">\n     * Rate limiting</a>.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIconMaxWidth()",
    "returnType" : "int",
    "comment" : "\n     * Return the max width for icons, in pixels.\n     *\n     * <p> Note that this method returns max width of icon's visible part. Hence, it does not take\n     * into account the inset introduced by {@link AdaptiveIconDrawable}. To calculate bitmap image\n     * to function as {@link AdaptiveIconDrawable}, multiply\n     * 1 + 2 * {@link AdaptiveIconDrawable#getExtraInsetFraction()} to the returned size.\n     ",
    "links" : [ "android.graphics.drawable.AdaptiveIconDrawable", "android.graphics.drawable.AdaptiveIconDrawable#getExtraInsetFraction()" ]
  }, {
    "name" : "public int getIconMaxHeight()",
    "returnType" : "int",
    "comment" : "\n     * Return the max height for icons, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportShortcutUsed(String shortcutId)",
    "returnType" : "void",
    "comment" : "\n     * Apps that publish shortcuts should call this method whenever the user\n     * selects the shortcut containing the given ID or when the user completes\n     * an action in the app that is equivalent to selecting the shortcut.\n     * For more details, read about\n     * <a href=\"/guide/topics/ui/shortcuts/managing-shortcuts.html#track-usage\">\n     * tracking shortcut usage</a>.\n     *\n     * <p>The information is accessible via {@link UsageStatsManager#queryEvents}\n     * Typically, launcher apps use this information to build a prediction model\n     * so that they can promote the shortcuts that are likely to be used at the moment.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "android.app.usage.UsageStatsManager#queryEvents" ]
  }, {
    "name" : "public boolean isRequestPinShortcutSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code TRUE} if the app is running on a device whose default launcher supports\n     * {@link #requestPinShortcut(ShortcutInfo, IntentSender)}.\n     *\n     * <p>The return value may change in subsequent calls if the user changes the default launcher\n     * app.\n     *\n     * <p><b>Note:</b> See also the support library counterpart\n     * {@link android.support.v4.content.pm.ShortcutManagerCompat#isRequestPinShortcutSupported(\n     * Context)}, which supports Android versions lower than {@link VERSION_CODES#O} using the\n     * legacy private intent {@code com.android.launcher.action.INSTALL_SHORTCUT}.\n     *\n     * @see #requestPinShortcut(ShortcutInfo, IntentSender)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "android.support.v4.content.pm.ShortcutManagerCompat#isRequestPinShortcutSupported(", "#requestPinShortcut(ShortcutInfo" ]
  }, {
    "name" : "public boolean requestPinShortcut(@NonNull ShortcutInfo shortcut, @Nullable IntentSender resultIntent)",
    "returnType" : "boolean",
    "comment" : "\n     * Request to create a pinned shortcut.  The default launcher will receive this request and\n     * ask the user for approval.  If the user approves it, the shortcut will be created, and\n     * {@code resultIntent} will be sent. If a request is denied by the user, however, no response\n     * will be sent to the caller.\n     *\n     * <p>Only apps with a foreground activity or a foreground service can call this method.\n     * Otherwise, it'll throw {@link IllegalStateException}.\n     *\n     * <p>It's up to the launcher to decide how to handle previous pending requests when the same\n     * package calls this API multiple times in a row. One possible strategy is to ignore any\n     * previous requests.\n     *\n     * <p><b>Note:</b> See also the support library counterpart\n     * {@link android.support.v4.content.pm.ShortcutManagerCompat#requestPinShortcut(\n     * Context, ShortcutInfoCompat, IntentSender)},\n     * which supports Android versions lower than {@link VERSION_CODES#O} using the\n     * legacy private intent {@code com.android.launcher.action.INSTALL_SHORTCUT}.\n     *\n     * @param shortcut Shortcut to pin.  If an app wants to pin an existing (either static\n     *     or dynamic) shortcut, then it only needs to have an ID. Although other fields don't have\n     *     to be set, the target shortcut must be enabled.\n     *\n     *     <p>If it's a new shortcut, all the mandatory fields, such as a short label, must be\n     *     set.\n     * @param resultIntent If not null, this intent will be sent when the shortcut is pinned.\n     *    Use {@link android.app.PendingIntent#getIntentSender()} to create an {@link IntentSender}.\n     *    To avoid background execution limits, use an unexported, manifest-declared receiver.\n     *    For more details, see\n     *    <a href=\"/guide/topics/ui/shortcuts/creating-shortcuts.html#pinned\">\n     *    Creating pinned shortcuts</a>.\n     *\n     * @return {@code TRUE} if the launcher supports this feature.  Note the API will return without\n     *    waiting for the user to respond, so getting {@code TRUE} from this API does *not* mean\n     *    the shortcut was pinned successfully.  {@code FALSE} if the launcher doesn't support this\n     *    feature.\n     *\n     * @see #isRequestPinShortcutSupported()\n     * @see IntentSender\n     * @see android.app.PendingIntent#getIntentSender()\n     *\n     * @throws IllegalArgumentException if a shortcut with the same ID exists and is disabled.\n     * @throws IllegalStateException The caller doesn't have a foreground activity or a foreground\n     * service, or the device is locked.\n     ",
    "links" : [ "IllegalStateException", "android.os.Build.VERSION_CODES#O", "android.content.IntentSender", "android.app.PendingIntent#getIntentSender()", "android.support.v4.content.pm.ShortcutManagerCompat#requestPinShortcut(" ]
  }, {
    "name" : "public Intent createShortcutResultIntent(@NonNull ShortcutInfo shortcut)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an Intent which can be used by the default launcher to pin a shortcut containing the\n     * given {@link ShortcutInfo}. This method should be used by an Activity to set a result in\n     * response to {@link Intent#ACTION_CREATE_SHORTCUT}.\n     *\n     * @param shortcut New shortcut to pin.  If an app wants to pin an existing (either dynamic\n     *     or manifest) shortcut, then it only needs to have an ID, and other fields don't have to\n     *     be set, in which case, the target shortcut must be enabled.\n     *     If it's a new shortcut, all the mandatory fields, such as a short label, must be\n     *     set.\n     * @return The intent that should be set as the result for the calling activity, or\n     *     <code>null</code> if the current launcher doesn't support shortcuts.\n     *\n     * @see Intent#ACTION_CREATE_SHORTCUT\n     *\n     * @throws IllegalArgumentException if a shortcut with the same ID exists and is disabled.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo", "android.content.Intent#ACTION_CREATE_SHORTCUT" ]
  }, {
    "name" : "public void onApplicationActive(@NonNull String packageName, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Called internally when an app is considered to have come to the foreground\n     * even when technically it's not.  This method resets the throttling for this package.\n     * For example, when the user sends an \"inline reply\" on a notification, the system UI will\n     * call it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int injectMyUserId()",
    "returnType" : "int",
    "comment" : " @hide injection point ",
    "links" : [ ]
  }, {
    "name" : "public List<ShareShortcutInfo> getShareTargets(@NonNull IntentFilter filter)",
    "returnType" : "List<ShareShortcutInfo>",
    "comment" : "\n     * Used by framework's ShareSheet (ChooserActivity.java) to retrieve all of the direct share\n     * targets that match the given IntentFilter.\n     *\n     * @param filter IntentFilter that will be used to retrieve the matching {@link ShortcutInfo}s.\n     * @return List of {@link ShareShortcutInfo}s that match the given IntentFilter.\n     * @hide\n     ",
    "links" : [ "android.content.pm.ShortcutInfo", "ShareShortcutInfo" ]
  }, {
    "name" : "public boolean hasShareTargets(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by framework's ShareSheet (ChooserActivity.java) to check if a given package has share\n     * target definitions in it's resources.\n     *\n     * @param packageName Package to check for share targets.\n     * @return True if the package has any share target definitions, False otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pushDynamicShortcut(@NonNull ShortcutInfo shortcut)",
    "returnType" : "void",
    "comment" : "\n     * Publish a single dynamic shortcut. If there are already dynamic or pinned shortcuts with the\n     * same ID, each mutable shortcut is updated.\n     *\n     * <p>This method is useful when posting notifications which are tagged with shortcut IDs; In\n     * order to make sure shortcuts exist and are up-to-date, without the need to explicitly handle\n     * the shortcut count limit.\n     * @see android.app.NotificationManager#notify(int, Notification)\n     * @see Notification.Builder#setShortcutId(String)\n     *\n     * <p>If {@link #getMaxShortcutCountPerActivity()} is already reached, an existing shortcut with\n     * the lowest rank will be removed to add space for the new shortcut.\n     *\n     * <p>If the rank of the shortcut is not explicitly set, it will be set to zero, and shortcut\n     * will be added to the top of the list.\n     *\n     * @throws IllegalArgumentException if trying to update an immutable shortcut.\n     *\n     * @throws IllegalStateException when the user is locked.\n     ",
    "links" : [ "#getMaxShortcutCountPerActivity()" ]
  } ],
  "variableNames" : [ "TAG", "FLAG_MATCH_MANIFEST", "FLAG_MATCH_DYNAMIC", "FLAG_MATCH_PINNED", "FLAG_MATCH_CACHED", "mContext", "mService" ],
  "methodNames" : [ "public boolean setDynamicShortcuts(@NonNull List<ShortcutInfo> shortcutInfoList)", "public List<ShortcutInfo> getDynamicShortcuts()", "public List<ShortcutInfo> getManifestShortcuts()", "public List<ShortcutInfo> getShortcuts(@ShortcutMatchFlags int matchFlags)", "public boolean addDynamicShortcuts(@NonNull List<ShortcutInfo> shortcutInfoList)", "public void removeDynamicShortcuts(@NonNull List<String> shortcutIds)", "public void removeAllDynamicShortcuts()", "public void removeLongLivedShortcuts(@NonNull List<String> shortcutIds)", "public List<ShortcutInfo> getPinnedShortcuts()", "public boolean updateShortcuts(@NonNull List<ShortcutInfo> shortcutInfoList)", "public void disableShortcuts(@NonNull List<String> shortcutIds)", "public void disableShortcuts(@NonNull List<String> shortcutIds, int disabledMessageResId)", "public void disableShortcuts(@NonNull List<String> shortcutIds, String disabledMessage)", "public void disableShortcuts(@NonNull List<String> shortcutIds, CharSequence disabledMessage)", "public void enableShortcuts(@NonNull List<String> shortcutIds)", "public int getMaxShortcutCountForActivity()", "public int getMaxShortcutCountPerActivity()", "public int getRemainingCallCount()", "public long getRateLimitResetTime()", "public boolean isRateLimitingActive()", "public int getIconMaxWidth()", "public int getIconMaxHeight()", "public void reportShortcutUsed(String shortcutId)", "public boolean isRequestPinShortcutSupported()", "public boolean requestPinShortcut(@NonNull ShortcutInfo shortcut, @Nullable IntentSender resultIntent)", "public Intent createShortcutResultIntent(@NonNull ShortcutInfo shortcut)", "public void onApplicationActive(@NonNull String packageName, @UserIdInt int userId)", "protected int injectMyUserId()", "public List<ShareShortcutInfo> getShareTargets(@NonNull IntentFilter filter)", "public boolean hasShareTargets(@NonNull String packageName)", "public void pushDynamicShortcut(@NonNull ShortcutInfo shortcut)" ]
}