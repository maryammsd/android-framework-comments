{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/preference/Preference.java",
  "packageName" : "android.preference",
  "className" : "Preference",
  "comment" : "\n * Represents the basic Preference UI building\n * block displayed by a {@link PreferenceActivity} in the form of a\n * {@link ListView}. This class provides the {@link View} to be displayed in\n * the activity and associates with a {@link SharedPreferences} to\n * store/retrieve the preference data.\n * <p>\n * When specifying a preference hierarchy in XML, each element can point to a\n * subclass of {@link Preference}, similar to the view hierarchy and layouts.\n * <p>\n * This class contains a {@code key} that will be used as the key into the\n * {@link SharedPreferences}. It is up to the subclass to decide how to store\n * the value.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about building a settings UI with Preferences,\n * read the <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>\n * guide.</p>\n * </div>\n *\n * @attr ref android.R.styleable#Preference_icon\n * @attr ref android.R.styleable#Preference_key\n * @attr ref android.R.styleable#Preference_title\n * @attr ref android.R.styleable#Preference_summary\n * @attr ref android.R.styleable#Preference_order\n * @attr ref android.R.styleable#Preference_fragment\n * @attr ref android.R.styleable#Preference_layout\n * @attr ref android.R.styleable#Preference_widgetLayout\n * @attr ref android.R.styleable#Preference_enabled\n * @attr ref android.R.styleable#Preference_selectable\n * @attr ref android.R.styleable#Preference_dependency\n * @attr ref android.R.styleable#Preference_persistent\n * @attr ref android.R.styleable#Preference_defaultValue\n * @attr ref android.R.styleable#Preference_shouldDisableView\n * @attr ref android.R.styleable#Preference_recycleEnabled\n * @attr ref android.R.styleable#Preference_singleLineTitle\n * @attr ref android.R.styleable#Preference_iconSpaceReserved\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "links" : [ "android.content.SharedPreferences", "android.preference.Preference", "android.view.View", "android.widget.ListView", "android.preference.PreferenceActivity" ],
  "variables" : [ {
    "name" : "DEFAULT_ORDER",
    "type" : "int",
    "comment" : "\n     * Specify for {@link #setOrder(int)} if a specific order is not required.\n     ",
    "links" : [ "#setOrder(int)" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferenceManager",
    "type" : "PreferenceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferenceDataStore",
    "type" : "PreferenceDataStore",
    "comment" : "\n     * The data store that should be used by this Preference to store / retrieve data. If null then\n     * {@link PreferenceManager#getPreferenceDataStore()} needs to be checked. If that one is null\n     * too it means that we are using {@link android.content.SharedPreferences} to store the data.\n     ",
    "links" : [ "android.preference.PreferenceManager#getPreferenceDataStore()", "android.content.SharedPreferences" ]
  }, {
    "name" : "mId",
    "type" : "long",
    "comment" : "\n     * Set when added to hierarchy since we need a unique ID within that\n     * hierarchy.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnChangeListener",
    "type" : "OnPreferenceChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnClickListener",
    "type" : "OnPreferenceClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrder",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleRes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSummary",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconResId",
    "type" : "int",
    "comment" : "\n     * mIconResId is overridden by mIcon, if mIcon is specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFragment",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiresKey",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersistent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDependencyKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultValue",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDependencyMet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentDependencyMet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycleEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSingleLineTitleAttr",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSingleLineTitle",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconSpaceReserved",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldDisableView",
    "type" : "boolean",
    "comment" : "\n     * @see #setShouldDisableView(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "mLayoutResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidgetLayoutResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnPreferenceChangeInternalListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDependents",
    "type" : "List<Preference>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentGroup",
    "type" : "PreferenceGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseMethodCalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected Object onGetDefaultValue(TypedArray a, int index)",
    "returnType" : "Object",
    "comment" : "\n     * Called when a Preference is being inflated and the default value\n     * attribute needs to be read. Since different Preference types have\n     * different value types, the subclass should get and return the default\n     * value which will be its value type.\n     * <p>\n     * For example, if the value type is String, the body of the method would\n     * proxy to {@link TypedArray#getString(int)}.\n     *\n     * @param a The set of attributes.\n     * @param index The index of the default value attribute.\n     * @return The default value of this preference type.\n     ",
    "links" : [ "android.content.res.TypedArray#getString(int)" ]
  }, {
    "name" : "public void setIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Sets an {@link Intent} to be used for\n     * {@link Context#startActivity(Intent)} when this Preference is clicked.\n     *\n     * @param intent The intent associated with this Preference.\n     ",
    "links" : [ "android.content.Intent", "android.content.Context#startActivity(Intent)" ]
  }, {
    "name" : "public Intent getIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Return the {@link Intent} associated with this Preference.\n     *\n     * @return The {@link Intent} last set via {@link #setIntent(Intent)} or XML. \n     ",
    "links" : [ "android.content.Intent", "#setIntent(Intent)" ]
  }, {
    "name" : "public void setFragment(String fragment)",
    "returnType" : "void",
    "comment" : "\n     * Sets the class name of a fragment to be shown when this Preference is clicked.\n     *\n     * @param fragment The class name of the fragment associated with this Preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFragment()",
    "returnType" : "String",
    "comment" : "\n     * Return the fragment class name associated with this Preference.\n     *\n     * @return The fragment class name last set via {@link #setFragment} or XML.\n     ",
    "links" : [ "#setFragment" ]
  }, {
    "name" : "public void setPreferenceDataStore(PreferenceDataStore dataStore)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@link PreferenceDataStore} to be used by this Preference instead of using\n     * {@link android.content.SharedPreferences}.\n     *\n     * <p>The data store will remain assigned even if the Preference is moved around the preference\n     * hierarchy. It will also override a data store propagated from the {@link PreferenceManager}\n     * that owns this Preference.\n     *\n     * @param dataStore The {@link PreferenceDataStore} to be used by this Preference.\n     * @see PreferenceManager#setPreferenceDataStore(PreferenceDataStore)\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore", "android.preference.PreferenceManager" ]
  }, {
    "name" : "public PreferenceDataStore getPreferenceDataStore()",
    "returnType" : "PreferenceDataStore",
    "comment" : "\n     * Returns {@link PreferenceDataStore} used by this Preference. Returns {@code null} if\n     * {@link android.content.SharedPreferences} is used instead.\n     *\n     * <p>By default preferences always use {@link android.content.SharedPreferences}. To make this\n     * preference to use the {@link PreferenceDataStore} you need to assign your implementation\n     * to the Preference itself via {@link #setPreferenceDataStore(PreferenceDataStore)} or to its\n     * {@link PreferenceManager} via\n     * {@link PreferenceManager#setPreferenceDataStore(PreferenceDataStore)}.\n     *\n     * @return The {@link PreferenceDataStore} used by this Preference or {@code null} if none.\n     ",
    "links" : [ "#setPreferenceDataStore(PreferenceDataStore)", "android.content.SharedPreferences", "android.preference.PreferenceManager#setPreferenceDataStore(PreferenceDataStore)", "android.preference.PreferenceDataStore", "android.preference.PreferenceManager" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Return the extras Bundle object associated with this preference, creating\n     * a new Bundle if there currently isn't one.  You can use this to get and\n     * set individual extra key/value pairs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle peekExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Return the extras Bundle object associated with this preference, returning {@code null} if\n     * there is not currently one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayoutResource(@LayoutRes int layoutResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the layout resource that is inflated as the {@link View} to be shown\n     * for this Preference. In most cases, the default layout is sufficient for\n     * custom Preference objects and only the widget layout needs to be changed.\n     * <p>\n     * This layout should contain a {@link ViewGroup} with ID\n     * {@link android.R.id#widget_frame} to be the parent of the specific widget\n     * for this Preference. It should similarly contain\n     * {@link android.R.id#title} and {@link android.R.id#summary}.\n     *\n     * @param layoutResId The layout resource ID to be inflated and returned as\n     *            a {@link View}.\n     * @see #setWidgetLayoutResource(int)\n     ",
    "links" : [ "android.R.id#widget_frame", "android.R.id#summary", "android.R.id#title", "android.view.View", "android.view.ViewGroup" ]
  }, {
    "name" : "public int getLayoutResource()",
    "returnType" : "int",
    "comment" : "\n     * Gets the layout resource that will be shown as the {@link View} for this Preference.\n     *\n     * @return The layout resource ID.\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public void setWidgetLayoutResource(@LayoutRes int widgetLayoutResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the layout for the controllable widget portion of this Preference. This\n     * is inflated into the main layout. For example, a {@link CheckBoxPreference}\n     * would specify a custom layout (consisting of just the CheckBox) here,\n     * instead of creating its own main layout.\n     *\n     * @param widgetLayoutResId The layout resource ID to be inflated into the\n     *            main layout.\n     * @see #setLayoutResource(int)\n     ",
    "links" : [ "android.preference.CheckBoxPreference" ]
  }, {
    "name" : "public int getWidgetLayoutResource()",
    "returnType" : "int",
    "comment" : "\n     * Gets the layout resource for the controllable widget portion of this Preference.\n     *\n     * @return The layout resource ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getView(View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Gets the View that will be shown in the {@link PreferenceActivity}.\n     *\n     * @param convertView The old View to reuse, if possible. Note: You should\n     *            check that this View is non-null and of an appropriate type\n     *            before using. If it is not possible to convert this View to\n     *            display the correct data, this method can create a new View.\n     * @param parent The parent that this View will eventually be attached to.\n     * @return Returns the same Preference object, for chaining multiple calls\n     *         into a single statement.\n     * @see #onCreateView(ViewGroup)\n     * @see #onBindView(View)\n     ",
    "links" : [ "android.preference.PreferenceActivity" ]
  }, {
    "name" : "protected View onCreateView(ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Creates the View to be shown for this Preference in the\n     * {@link PreferenceActivity}. The default behavior is to inflate the main\n     * layout of this Preference (see {@link #setLayoutResource(int)}. If\n     * changing this behavior, please specify a {@link ViewGroup} with ID\n     * {@link android.R.id#widget_frame}.\n     * <p>\n     * Make sure to call through to the superclass's implementation.\n     *\n     * @param parent The parent that this View will eventually be attached to.\n     * @return The View that displays this Preference.\n     * @see #onBindView(View)\n     ",
    "links" : [ "#setLayoutResource(int)", "android.R.id#widget_frame", "android.preference.PreferenceActivity", "android.view.ViewGroup" ]
  }, {
    "name" : "protected void onBindView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Binds the created View to the data for this Preference.\n     * <p>\n     * This is a good place to grab references to custom Views in the layout and\n     * set properties on them.\n     * <p>\n     * Make sure to call through to the superclass's implementation.\n     *\n     * @param view The View that shows this Preference.\n     * @see #onCreateView(ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setEnabledStateOnViews(View v, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Makes sure the view (and any children) get the enabled state changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOrder(int order)",
    "returnType" : "void",
    "comment" : "\n     * Sets the order of this Preference with respect to other Preference objects on the same level.\n     * If this is not specified, the default behavior is to sort alphabetically. The\n     * {@link PreferenceGroup#setOrderingAsAdded(boolean)} can be used to order Preference objects\n     * based on the order they appear in the XML.\n     *\n     * @param order the order for this Preference. A lower value will be shown first. Use\n     *              {@link #DEFAULT_ORDER} to sort alphabetically or allow ordering from XML\n     * @see PreferenceGroup#setOrderingAsAdded(boolean)\n     * @see #DEFAULT_ORDER\n     ",
    "links" : [ "#DEFAULT_ORDER", "android.preference.PreferenceGroup#setOrderingAsAdded(boolean)" ]
  }, {
    "name" : "public int getOrder()",
    "returnType" : "int",
    "comment" : "\n     * Gets the order of this Preference with respect to other Preference objects on the same level.\n     *\n     * @return the order of this Preference\n     * @see #setOrder(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Sets the title for this Preference with a CharSequence. This title will be placed into the ID\n     * {@link android.R.id#title} within the View created by {@link #onCreateView(ViewGroup)}.\n     *\n     * @param title the title for this Preference\n     ",
    "links" : [ "#onCreateView(ViewGroup)", "android.R.id#title" ]
  }, {
    "name" : "public void setTitle(@StringRes int titleResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the title for this Preference with a resource ID.\n     *\n     * @see #setTitle(CharSequence)\n     * @param titleResId the title as a resource ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleRes()",
    "returnType" : "int",
    "comment" : "\n     * Returns the title resource ID of this Preference. If the title did not come from a resource,\n     * {@code 0} is returned.\n     *\n     * @return the title resource\n     * @see #setTitle(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the title of this Preference.\n     *\n     * @return the title\n     * @see #setTitle(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIcon(Drawable icon)",
    "returnType" : "void",
    "comment" : "\n     * Sets the icon for this Preference with a Drawable. This icon will be placed into the ID\n     * {@link android.R.id#icon} within the View created by {@link #onCreateView(ViewGroup)}.\n     *\n     * @param icon the optional icon for this Preference\n     ",
    "links" : [ "#onCreateView(ViewGroup)", "android.R.id#icon" ]
  }, {
    "name" : "public void setIcon(@DrawableRes int iconResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the icon for this Preference with a resource ID.\n     *\n     * @see #setIcon(Drawable)\n     * @param iconResId the icon as a resource ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the icon of this Preference.\n     *\n     * @return the icon\n     * @see #setIcon(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSummary()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the summary of this Preference.\n     *\n     * @return the summary\n     * @see #setSummary(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSummary(CharSequence summary)",
    "returnType" : "void",
    "comment" : "\n     * Sets the summary for this Preference with a CharSequence.\n     *\n     * @param summary the summary for the preference\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSummary(@StringRes int summaryResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the summary for this Preference with a resource ID.\n     *\n     * @see #setSummary(CharSequence)\n     * @param summaryResId the summary as a resource\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this Preference is enabled. If disabled, it will\n     * not handle clicks.\n     *\n     * @param enabled set {@code true} to enable it\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this Preference should be enabled in the list.\n     *\n     * @return {@code true} if this Preference is enabled, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelectable(boolean selectable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this Preference is selectable.\n     *\n     * @param selectable set {@code true} to make it selectable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSelectable()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this Preference should be selectable in the list.\n     *\n     * @return {@code true} if it is selectable, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldDisableView(boolean shouldDisableView)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this Preference should disable its view when it gets disabled.\n     *\n     * <p>For example, set this and {@link #setEnabled(boolean)} to false for preferences that are\n     * only displaying information and 1) should not be clickable 2) should not have the view set to\n     * the disabled state.\n     *\n     * @param shouldDisableView set {@code true} if this preference should disable its view when\n     *                          the preference is disabled\n     ",
    "links" : [ "#setEnabled(boolean)" ]
  }, {
    "name" : "public boolean getShouldDisableView()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this Preference should disable its view when it's action is disabled.\n     *\n     * @see #setShouldDisableView(boolean)\n     * @return {@code true} if it should disable the view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRecycleEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this Preference has enabled to have its view recycled when used in the list\n     * view. By default the recycling is enabled.\n     *\n     * <p>The value can be changed only before this preference is added to the preference hierarchy.\n     *\n     * <p>If view recycling is not allowed then each time the list view populates this preference\n     * the {@link #getView(View, ViewGroup)} method receives a {@code null} convert view and needs\n     * to recreate the view. Otherwise view gets recycled and only {@link #onBindView(View)} gets\n     * called.\n     *\n     * @param enabled set {@code true} if this preference view should be recycled\n     ",
    "links" : [ "#getView(View", "#onBindView(View)" ]
  }, {
    "name" : "public boolean isRecycleEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this Preference has enabled to have its view recycled when used in the list\n     * view.\n     *\n     * @see #setRecycleEnabled(boolean)\n     * @return {@code true} if this preference view should be recycled\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSingleLineTitle(boolean singleLineTitle)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to constrain the title of this Preference to a single line instead of\n     * letting it wrap onto multiple lines.\n     *\n     * @param singleLineTitle set {@code true} if the title should be constrained to one line\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSingleLineTitle()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the title of this preference is constrained to a single line.\n     *\n     * @see #setSingleLineTitle(boolean)\n     * @return {@code true} if the title of this preference is constrained to a single line\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIconSpaceReserved(boolean iconSpaceReserved)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to reserve the space of this Preference icon view when no icon is provided.\n     *\n     * @param iconSpaceReserved set {@code true} if the space for the icon view should be reserved\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIconSpaceReserved()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the space this preference icon view is reserved.\n     *\n     * @see #setIconSpaceReserved(boolean)\n     * @return {@code true} if the space of this preference icon view is reserved\n     ",
    "links" : [ ]
  }, {
    "name" : " long getId()",
    "returnType" : "long",
    "comment" : "\n     * Returns a unique ID for this Preference.  This ID should be unique across all\n     * Preference objects in a hierarchy.\n     *\n     * @return A unique ID for this Preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onClick()",
    "returnType" : "void",
    "comment" : "\n     * Processes a click on the preference. This includes saving the value to\n     * the {@link SharedPreferences}. However, the overridden method should\n     * call {@link #callChangeListener(Object)} to make sure the client wants to\n     * update the preference's state with the new value.\n     ",
    "links" : [ "android.content.SharedPreferences", "#callChangeListener(Object)" ]
  }, {
    "name" : "public void setKey(String key)",
    "returnType" : "void",
    "comment" : "\n     * Sets the key for this Preference, which is used as a key to the {@link SharedPreferences} or\n     * {@link PreferenceDataStore}. This should be unique for the package.\n     *\n     * @param key The key for the preference.\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore" ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * Gets the key for this Preference, which is also the key used for storing values into\n     * {@link SharedPreferences} or {@link PreferenceDataStore}.\n     *\n     * @return The key.\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore" ]
  }, {
    "name" : " void requireKey()",
    "returnType" : "void",
    "comment" : "\n     * Checks whether the key is present, and if it isn't throws an\n     * exception. This should be called by subclasses that persist their preferences.\n     *\n     * @throws IllegalStateException If there is no key assigned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasKey()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this Preference has a valid key.\n     *\n     * @return True if the key exists and is not a blank string, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPersistent()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this Preference is persistent. If it is, it stores its value(s) into\n     * the persistent {@link SharedPreferences} storage by default or into\n     * {@link PreferenceDataStore} if assigned.\n     *\n     * @return True if it is persistent.\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore" ]
  }, {
    "name" : "protected boolean shouldPersist()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether, at the given time this method is called, this Preference should store/restore\n     * its value(s) into the {@link SharedPreferences} or into {@link PreferenceDataStore} if\n     * assigned. This, at minimum, checks whether this Preference is persistent and it currently has\n     * a key. Before you save/restore from the storage, check this first.\n     *\n     * @return True if it should persist the value.\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore" ]
  }, {
    "name" : "public void setPersistent(boolean persistent)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this Preference is persistent. When persistent, it stores its value(s) into\n     * the persistent {@link SharedPreferences} storage by default or into\n     * {@link PreferenceDataStore} if assigned.\n     *\n     * @param persistent set {@code true} if it should store its value(s) into the storage.\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore" ]
  }, {
    "name" : "protected boolean callChangeListener(Object newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Call this method after the user changes the preference, but before the\n     * internal state is set. This allows the client to ignore the user value.\n     *\n     * @param newValue The new value of this Preference.\n     * @return True if the user value should be set as the preference\n     *         value (and persisted).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnPreferenceChangeListener(OnPreferenceChangeListener onPreferenceChangeListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when this Preference is changed by the\n     * user (but before the internal state has been updated).\n     *\n     * @param onPreferenceChangeListener The callback to be invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnPreferenceChangeListener getOnPreferenceChangeListener()",
    "returnType" : "OnPreferenceChangeListener",
    "comment" : "\n     * Returns the callback to be invoked when this Preference is changed by the\n     * user (but before the internal state has been updated).\n     *\n     * @return The callback to be invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnPreferenceClickListener(OnPreferenceClickListener onPreferenceClickListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when this Preference is clicked.\n     *\n     * @param onPreferenceClickListener The callback to be invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnPreferenceClickListener getOnPreferenceClickListener()",
    "returnType" : "OnPreferenceClickListener",
    "comment" : "\n     * Returns the callback to be invoked when this Preference is clicked.\n     *\n     * @return The callback to be invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performClick(PreferenceScreen preferenceScreen)",
    "returnType" : "void",
    "comment" : "\n     * Called when a click should be performed.\n     *\n     * @param preferenceScreen A {@link PreferenceScreen} whose hierarchy click\n     *            listener should be called in the proper order (between other\n     *            processing). May be {@code null}.\n     * @hide\n     ",
    "links" : [ "android.preference.PreferenceScreen" ]
  }, {
    "name" : "public boolean onKey(View v, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Allows a Preference to intercept key events without having focus.\n     * For example, SeekBarPreference uses this to intercept +/- to adjust\n     * the progress.\n     * @return True if the Preference handled the key. Returns false by default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Returns the {@link android.content.Context} of this Preference.\n     * Each Preference in a Preference hierarchy can be\n     * from different Context (for example, if multiple activities provide preferences into a single\n     * {@link PreferenceActivity}). This Context will be used to save the Preference values.\n     *\n     * @return The Context of this Preference.\n     ",
    "links" : [ "android.content.Context", "android.preference.PreferenceActivity" ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences()",
    "returnType" : "SharedPreferences",
    "comment" : "\n     * Returns the {@link SharedPreferences} where this Preference can read its\n     * value(s). Usually, it's easier to use one of the helper read methods:\n     * {@link #getPersistedBoolean(boolean)}, {@link #getPersistedFloat(float)},\n     * {@link #getPersistedInt(int)}, {@link #getPersistedLong(long)},\n     * {@link #getPersistedString(String)}. To save values, see\n     * {@link #getEditor()}.\n     * <p>\n     * In some cases, writes to the {@link #getEditor()} will not be committed\n     * right away and hence not show up in the returned\n     * {@link SharedPreferences}, this is intended behavior to improve\n     * performance.\n     *\n     * @return the {@link SharedPreferences} where this Preference reads its value(s). If\n     *         this preference isn't attached to a Preference hierarchy or if\n     *         a {@link PreferenceDataStore} has been set, this method returns {@code null}.\n     * @see #getEditor()\n     * @see #setPreferenceDataStore(PreferenceDataStore)\n     ",
    "links" : [ "#getPersistedFloat(float)", "android.content.SharedPreferences", "#getPersistedString(String)", "#getPersistedBoolean(boolean)", "#getEditor()", "android.preference.PreferenceDataStore", "#getPersistedInt(int)", "#getPersistedLong(long)" ]
  }, {
    "name" : "public SharedPreferences.Editor getEditor()",
    "returnType" : "SharedPreferences.Editor",
    "comment" : "\n     * Returns an {@link SharedPreferences.Editor} where this Preference can\n     * save its value(s). Usually it's easier to use one of the helper save\n     * methods: {@link #persistBoolean(boolean)}, {@link #persistFloat(float)},\n     * {@link #persistInt(int)}, {@link #persistLong(long)},\n     * {@link #persistString(String)}. To read values, see\n     * {@link #getSharedPreferences()}. If {@link #shouldCommit()} returns\n     * true, it is this Preference's responsibility to commit.\n     * <p>\n     * In some cases, writes to this will not be committed right away and hence\n     * not show up in the SharedPreferences, this is intended behavior to\n     * improve performance.\n     *\n     * @return a {@link SharedPreferences.Editor} where this preference saves its value(s). If\n     *         this preference isn't attached to a Preference hierarchy or if\n     *         a {@link PreferenceDataStore} has been set, this method returns {@code null}.\n     * @see #shouldCommit()\n     * @see #getSharedPreferences()\n     * @see #setPreferenceDataStore(PreferenceDataStore)\n     ",
    "links" : [ "#persistFloat(float)", "#persistLong(long)", "SharedPreferences.Editor", "#persistString(String)", "#getSharedPreferences()", "#persistInt(int)", "android.preference.PreferenceDataStore", "#persistBoolean(boolean)", "#shouldCommit()" ]
  }, {
    "name" : "public boolean shouldCommit()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the {@link Preference} should commit its saved value(s) in\n     * {@link #getEditor()}. This may return false in situations where batch\n     * committing is being done (by the manager) to improve performance.\n     *\n     * <p>If this preference is using {@link PreferenceDataStore} this value is irrelevant.\n     *\n     * @return Whether the Preference should commit its saved value(s).\n     * @see #getEditor()\n     ",
    "links" : [ "android.preference.Preference", "#getEditor()", "android.preference.PreferenceDataStore" ]
  }, {
    "name" : "public int compareTo(Preference another)",
    "returnType" : "int",
    "comment" : "\n     * Compares Preference objects based on order (if set), otherwise alphabetically on the titles.\n     *\n     * @param another The Preference to compare to this one.\n     * @return 0 if the same; less than 0 if this Preference sorts ahead of <var>another</var>;\n     *          greater than 0 if this Preference sorts after <var>another</var>.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setOnPreferenceChangeInternalListener(OnPreferenceChangeInternalListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal change listener.\n     *\n     * @param listener The listener.\n     * @see #notifyChanged()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void notifyChanged()",
    "returnType" : "void",
    "comment" : "\n     * Should be called when the data of this {@link Preference} has changed.\n     ",
    "links" : [ "android.preference.Preference" ]
  }, {
    "name" : "protected void notifyHierarchyChanged()",
    "returnType" : "void",
    "comment" : "\n     * Should be called when a Preference has been\n     * added/removed from this group, or the ordering should be\n     * re-evaluated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PreferenceManager getPreferenceManager()",
    "returnType" : "PreferenceManager",
    "comment" : "\n     * Gets the {@link PreferenceManager} that manages this Preference object's tree.\n     *\n     * @return The {@link PreferenceManager}.\n     ",
    "links" : [ "android.preference.PreferenceManager" ]
  }, {
    "name" : "protected void onAttachedToHierarchy(PreferenceManager preferenceManager)",
    "returnType" : "void",
    "comment" : "\n     * Called when this Preference has been attached to a Preference hierarchy.\n     * Make sure to call the super implementation.\n     *\n     * @param preferenceManager The PreferenceManager of the hierarchy.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToActivity()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Preference hierarchy has been attached to the\n     * {@link PreferenceActivity}. This can also be called when this\n     * Preference has been attached to a group that was already attached\n     * to the {@link PreferenceActivity}.\n     ",
    "links" : [ "android.preference.PreferenceActivity" ]
  }, {
    "name" : " void assignParent(@Nullable PreferenceGroup parentGroup)",
    "returnType" : "void",
    "comment" : "\n     * Assigns a {@link PreferenceGroup} as the parent of this Preference. Set {@code null} to\n     * remove the current parent.\n     *\n     * @param parentGroup Parent preference group of this Preference or {@code null} if none.\n     ",
    "links" : [ "android.preference.PreferenceGroup" ]
  }, {
    "name" : "private void registerDependency()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterDependency()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Preference findPreferenceInHierarchy(String key)",
    "returnType" : "Preference",
    "comment" : "\n     * Finds a Preference in this hierarchy (the whole thing,\n     * even above/below your {@link PreferenceScreen} screen break) with the given\n     * key.\n     * <p>\n     * This only functions after we have been attached to a hierarchy.\n     *\n     * @param key The key of the Preference to find.\n     * @return The Preference that uses the given key.\n     ",
    "links" : [ "android.preference.PreferenceScreen" ]
  }, {
    "name" : "private void registerDependent(Preference dependent)",
    "returnType" : "void",
    "comment" : "\n     * Adds a dependent Preference on this Preference so we can notify it.\n     * Usually, the dependent Preference registers itself (it's good for it to\n     * know it depends on something), so please use\n     * {@link Preference#setDependency(String)} on the dependent Preference.\n     *\n     * @param dependent The dependent Preference that will be enabled/disabled\n     *            according to the state of this Preference.\n     ",
    "links" : [ "android.preference.Preference#setDependency(String)" ]
  }, {
    "name" : "private void unregisterDependent(Preference dependent)",
    "returnType" : "void",
    "comment" : "\n     * Removes a dependent Preference on this Preference.\n     *\n     * @param dependent The dependent Preference that will be enabled/disabled\n     *            according to the state of this Preference.\n     * @return Returns the same Preference object, for chaining multiple calls\n     *         into a single statement.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDependencyChange(boolean disableDependents)",
    "returnType" : "void",
    "comment" : "\n     * Notifies any listening dependents of a change that affects the\n     * dependency.\n     *\n     * @param disableDependents Whether this Preference should disable\n     *            its dependents.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDependencyChanged(Preference dependency, boolean disableDependent)",
    "returnType" : "void",
    "comment" : "\n     * Called when the dependency changes.\n     *\n     * @param dependency The Preference that this Preference depends on.\n     * @param disableDependent Set true to disable this Preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onParentChanged(Preference parent, boolean disableChild)",
    "returnType" : "void",
    "comment" : "\n     * Called when the implicit parent dependency changes.\n     *\n     * @param parent The Preference that this Preference depends on.\n     * @param disableChild Set true to disable this Preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDisableDependents()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this preference's dependents should currently be\n     * disabled.\n     *\n     * @return True if the dependents should be disabled, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDependency(String dependencyKey)",
    "returnType" : "void",
    "comment" : "\n     * Sets the key of a Preference that this Preference will depend on. If that\n     * Preference is not set or is off, this Preference will be disabled.\n     *\n     * @param dependencyKey The key of the Preference that this depends on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDependency()",
    "returnType" : "String",
    "comment" : "\n     * Returns the key of the dependency on this Preference.\n     *\n     * @return The key of the dependency.\n     * @see #setDependency(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public PreferenceGroup getParent()",
    "returnType" : "PreferenceGroup",
    "comment" : "\n     * Returns the {@link PreferenceGroup} which is this Preference assigned to or {@code null} if\n     * this preference is not assigned to any group or is a root Preference.\n     *\n     * @return the parent PreferenceGroup or {@code null} if not attached to any\n     ",
    "links" : [ "android.preference.PreferenceGroup" ]
  }, {
    "name" : "protected void onPrepareForRemoval()",
    "returnType" : "void",
    "comment" : "\n     * Called when this Preference is being removed from the hierarchy. You\n     * should remove any references to this Preference that you know about. Make\n     * sure to call through to the superclass implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultValue(Object defaultValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default value for this Preference, which will be set either if\n     * persistence is off or persistence is on and the preference is not found\n     * in the persistent storage.\n     *\n     * @param defaultValue The default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dispatchSetInitialValue()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSetInitialValue(boolean restorePersistedValue, Object defaultValue)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to set the initial value of the Preference.\n     *\n     * <p>If <var>restorePersistedValue</var> is true, you should restore the\n     * Preference value from the {@link android.content.SharedPreferences}. If\n     * <var>restorePersistedValue</var> is false, you should set the Preference\n     * value to defaultValue that is given (and possibly store to SharedPreferences\n     * if {@link #shouldPersist()} is true).\n     *\n     * <p>In case of using {@link PreferenceDataStore}, the <var>restorePersistedValue</var> is\n     * always {@code true}. But the default value (if provided) is set.\n     *\n     * <p>This may not always be called. One example is if it should not persist\n     * but there is no default value given.\n     *\n     * @param restorePersistedValue True to restore the persisted value;\n     *            false to use the given <var>defaultValue</var>.\n     * @param defaultValue The default value for this Preference. Only use this\n     *            if <var>restorePersistedValue</var> is false.\n     ",
    "links" : [ "android.content.SharedPreferences", "android.preference.PreferenceDataStore", "#shouldPersist()" ]
  }, {
    "name" : "private void tryCommit(SharedPreferences.Editor editor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean persistString(String value)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to persist a String if this Preference is persistent.\n     *\n     * @param value The value to persist.\n     * @return True if this Preference is persistent. (This is not whether the\n     *         value was persisted, since we may not necessarily commit if there\n     *         will be a batch commit later.)\n     * @see #getPersistedString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String getPersistedString(String defaultReturnValue)",
    "returnType" : "String",
    "comment" : "\n     * Attempts to get a persisted String if this Preference is persistent.\n     *\n     * @param defaultReturnValue The default value to return if either this\n     *            Preference is not persistent or this Preference is not present.\n     * @return The value from the data store or the default return\n     *         value.\n     * @see #persistString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean persistStringSet(Set<String> values)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to persist a set of Strings if this Preference is persistent.\n     *\n     * @param values The values to persist.\n     * @return True if this Preference is persistent. (This is not whether the\n     *         value was persisted, since we may not necessarily commit if there\n     *         will be a batch commit later.)\n     * @see #getPersistedStringSet(Set)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getPersistedStringSet(Set<String> defaultReturnValue)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Attempts to get a persisted set of Strings if this Preference is persistent.\n     *\n     * @param defaultReturnValue The default value to return if either this\n     *            Preference is not persistent or this Preference is not present.\n     * @return The value from the data store or the default return\n     *         value.\n     * @see #persistStringSet(Set)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean persistInt(int value)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to persist an int if this Preference is persistent.\n     *\n     * @param value The value to persist.\n     * @return True if this Preference is persistent. (This is not whether the\n     *         value was persisted, since we may not necessarily commit if there\n     *         will be a batch commit later.)\n     * @see #persistString(String)\n     * @see #getPersistedInt(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getPersistedInt(int defaultReturnValue)",
    "returnType" : "int",
    "comment" : "\n     * Attempts to get a persisted int if this Preference is persistent.\n     *\n     * @param defaultReturnValue The default value to return if either this\n     *            Preference is not persistent or this Preference is not present.\n     * @return The value from the data store or the default return\n     *         value.\n     * @see #getPersistedString(String)\n     * @see #persistInt(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean persistFloat(float value)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to persist a long if this Preference is persistent.\n     *\n     * @param value The value to persist.\n     * @return True if this Preference is persistent. (This is not whether the\n     *         value was persisted, since we may not necessarily commit if there\n     *         will be a batch commit later.)\n     * @see #persistString(String)\n     * @see #getPersistedFloat(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected float getPersistedFloat(float defaultReturnValue)",
    "returnType" : "float",
    "comment" : "\n     * Attempts to get a persisted float if this Preference is persistent.\n     *\n     * @param defaultReturnValue The default value to return if either this\n     *            Preference is not persistent or this Preference is not present.\n     * @return The value from the data store or the default return\n     *         value.\n     * @see #getPersistedString(String)\n     * @see #persistFloat(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean persistLong(long value)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to persist a long if this Preference is persistent.\n     *\n     * @param value The value to persist.\n     * @return True if this Preference is persistent. (This is not whether the\n     *         value was persisted, since we may not necessarily commit if there\n     *         will be a batch commit later.)\n     * @see #persistString(String)\n     * @see #getPersistedLong(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long getPersistedLong(long defaultReturnValue)",
    "returnType" : "long",
    "comment" : "\n     * Attempts to get a persisted long if this Preference is persistent.\n     *\n     * @param defaultReturnValue The default value to return if either this\n     *            Preference is not persistent or this Preference is not present.\n     * @return The value from the data store or the default return\n     *         value.\n     * @see #getPersistedString(String)\n     * @see #persistLong(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean persistBoolean(boolean value)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to persist a boolean if this Preference is persistent.\n     *\n     * @param value The value to persist.\n     * @return True if this Preference is persistent. (This is not whether the\n     *         value was persisted, since we may not necessarily commit if there\n     *         will be a batch commit later.)\n     * @see #persistString(String)\n     * @see #getPersistedBoolean(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean getPersistedBoolean(boolean defaultReturnValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to get a persisted boolean if this Preference is persistent.\n     *\n     * @param defaultReturnValue The default value to return if either this\n     *            Preference is not persistent or this Preference is not present.\n     * @return The value from the data store or the default return\n     *         value.\n     * @see #getPersistedString(String)\n     * @see #persistBoolean(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StringBuilder getFilterableStringBuilder()",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Returns the text that will be used to filter this Preference depending on\n     * user input.\n     * <p>\n     * If overridding and calling through to the superclass, make sure to prepend\n     * your additions with a space.\n     *\n     * @return Text as a {@link StringBuilder} that will be used to filter this\n     *         preference. By default, this is the title and summary\n     *         (concatenated with a space).\n     ",
    "links" : [ "StringBuilder" ]
  }, {
    "name" : "public void saveHierarchyState(Bundle container)",
    "returnType" : "void",
    "comment" : "\n     * Store this Preference hierarchy's frozen state into the given container.\n     *\n     * @param container The Bundle in which to save the instance of this Preference.\n     *\n     * @see #restoreHierarchyState\n     * @see #onSaveInstanceState\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchSaveInstanceState(Bundle container)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #saveHierarchyState} to store the instance for this Preference and its\n     * children. May be overridden to modify how the save happens for children. For example, some\n     * Preference objects may want to not store an instance for their children.\n     *\n     * @param container The Bundle in which to save the instance of this Preference.\n     *\n     * @see #saveHierarchyState\n     * @see #onSaveInstanceState\n     ",
    "links" : [ "#saveHierarchyState" ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "\n     * Hook allowing a Preference to generate a representation of its internal\n     * state that can later be used to create a new instance with that same\n     * state. This state should only contain information that is not persistent\n     * or can be reconstructed later.\n     *\n     * @return A Parcelable object containing the current dynamic state of this Preference, or\n     *         {@code null} if there is nothing interesting to save. The default implementation\n     *         returns {@code null}.\n     * @see #onRestoreInstanceState\n     * @see #saveHierarchyState\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restoreHierarchyState(Bundle container)",
    "returnType" : "void",
    "comment" : "\n     * Restore this Preference hierarchy's previously saved state from the given container.\n     *\n     * @param container The Bundle that holds the previously saved state.\n     *\n     * @see #saveHierarchyState\n     * @see #onRestoreInstanceState\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchRestoreInstanceState(Bundle container)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #restoreHierarchyState} to retrieve the saved state for this\n     * Preference and its children. May be overridden to modify how restoring\n     * happens to the children of a Preference. For example, some Preference objects may\n     * not want to save state for their children.\n     *\n     * @param container The Bundle that holds the previously saved state.\n     * @see #restoreHierarchyState\n     * @see #onRestoreInstanceState\n     ",
    "links" : [ "#restoreHierarchyState" ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "\n     * Hook allowing a Preference to re-apply a representation of its internal state that had\n     * previously been generated by {@link #onSaveInstanceState}. This function will never be called\n     * with a {@code null} state.\n     *\n     * @param state The saved state that had previously been returned by\n     *            {@link #onSaveInstanceState}.\n     * @see #onSaveInstanceState\n     * @see #restoreHierarchyState\n     ",
    "links" : [ "#onSaveInstanceState" ]
  } ],
  "methodNames" : [ "protected Object onGetDefaultValue(TypedArray a, int index)", "public void setIntent(Intent intent)", "public Intent getIntent()", "public void setFragment(String fragment)", "public String getFragment()", "public void setPreferenceDataStore(PreferenceDataStore dataStore)", "public PreferenceDataStore getPreferenceDataStore()", "public Bundle getExtras()", "public Bundle peekExtras()", "public void setLayoutResource(@LayoutRes int layoutResId)", "public int getLayoutResource()", "public void setWidgetLayoutResource(@LayoutRes int widgetLayoutResId)", "public int getWidgetLayoutResource()", "public View getView(View convertView, ViewGroup parent)", "protected View onCreateView(ViewGroup parent)", "protected void onBindView(View view)", "private void setEnabledStateOnViews(View v, boolean enabled)", "public void setOrder(int order)", "public int getOrder()", "public void setTitle(CharSequence title)", "public void setTitle(@StringRes int titleResId)", "public int getTitleRes()", "public CharSequence getTitle()", "public void setIcon(Drawable icon)", "public void setIcon(@DrawableRes int iconResId)", "public Drawable getIcon()", "public CharSequence getSummary()", "public void setSummary(CharSequence summary)", "public void setSummary(@StringRes int summaryResId)", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public void setSelectable(boolean selectable)", "public boolean isSelectable()", "public void setShouldDisableView(boolean shouldDisableView)", "public boolean getShouldDisableView()", "public void setRecycleEnabled(boolean enabled)", "public boolean isRecycleEnabled()", "public void setSingleLineTitle(boolean singleLineTitle)", "public boolean isSingleLineTitle()", "public void setIconSpaceReserved(boolean iconSpaceReserved)", "public boolean isIconSpaceReserved()", " long getId()", "protected void onClick()", "public void setKey(String key)", "public String getKey()", " void requireKey()", "public boolean hasKey()", "public boolean isPersistent()", "protected boolean shouldPersist()", "public void setPersistent(boolean persistent)", "protected boolean callChangeListener(Object newValue)", "public void setOnPreferenceChangeListener(OnPreferenceChangeListener onPreferenceChangeListener)", "public OnPreferenceChangeListener getOnPreferenceChangeListener()", "public void setOnPreferenceClickListener(OnPreferenceClickListener onPreferenceClickListener)", "public OnPreferenceClickListener getOnPreferenceClickListener()", "public void performClick(PreferenceScreen preferenceScreen)", "public boolean onKey(View v, int keyCode, KeyEvent event)", "public Context getContext()", "public SharedPreferences getSharedPreferences()", "public SharedPreferences.Editor getEditor()", "public boolean shouldCommit()", "public int compareTo(Preference another)", " final void setOnPreferenceChangeInternalListener(OnPreferenceChangeInternalListener listener)", "protected void notifyChanged()", "protected void notifyHierarchyChanged()", "public PreferenceManager getPreferenceManager()", "protected void onAttachedToHierarchy(PreferenceManager preferenceManager)", "protected void onAttachedToActivity()", " void assignParent(@Nullable PreferenceGroup parentGroup)", "private void registerDependency()", "private void unregisterDependency()", "protected Preference findPreferenceInHierarchy(String key)", "private void registerDependent(Preference dependent)", "private void unregisterDependent(Preference dependent)", "public void notifyDependencyChange(boolean disableDependents)", "public void onDependencyChanged(Preference dependency, boolean disableDependent)", "public void onParentChanged(Preference parent, boolean disableChild)", "public boolean shouldDisableDependents()", "public void setDependency(String dependencyKey)", "public String getDependency()", "public PreferenceGroup getParent()", "protected void onPrepareForRemoval()", "public void setDefaultValue(Object defaultValue)", "private void dispatchSetInitialValue()", "protected void onSetInitialValue(boolean restorePersistedValue, Object defaultValue)", "private void tryCommit(SharedPreferences.Editor editor)", "protected boolean persistString(String value)", "protected String getPersistedString(String defaultReturnValue)", "public boolean persistStringSet(Set<String> values)", "public Set<String> getPersistedStringSet(Set<String> defaultReturnValue)", "protected boolean persistInt(int value)", "protected int getPersistedInt(int defaultReturnValue)", "protected boolean persistFloat(float value)", "protected float getPersistedFloat(float defaultReturnValue)", "protected boolean persistLong(long value)", "protected long getPersistedLong(long defaultReturnValue)", "protected boolean persistBoolean(boolean value)", "protected boolean getPersistedBoolean(boolean defaultReturnValue)", "public String toString()", " StringBuilder getFilterableStringBuilder()", "public void saveHierarchyState(Bundle container)", " void dispatchSaveInstanceState(Bundle container)", "protected Parcelable onSaveInstanceState()", "public void restoreHierarchyState(Bundle container)", " void dispatchRestoreInstanceState(Bundle container)", "protected void onRestoreInstanceState(Parcelable state)" ],
  "variableNames" : [ "DEFAULT_ORDER", "mContext", "mPreferenceManager", "mPreferenceDataStore", "mId", "mOnChangeListener", "mOnClickListener", "mOrder", "mTitle", "mTitleRes", "mSummary", "mIconResId", "mIcon", "mKey", "mIntent", "mFragment", "mExtras", "mEnabled", "mSelectable", "mRequiresKey", "mPersistent", "mDependencyKey", "mDefaultValue", "mDependencyMet", "mParentDependencyMet", "mRecycleEnabled", "mHasSingleLineTitleAttr", "mSingleLineTitle", "mIconSpaceReserved", "mShouldDisableView", "mLayoutResId", "mWidgetLayoutResId", "mListener", "mDependents", "mParentGroup", "mBaseMethodCalled" ]
}