{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/validation/ValidatorHandler.java",
  "packageName" : "javax.xml.validation",
  "className" : "ValidatorHandler",
  "comment" : "\n * Streaming validator that works on SAX stream.\n *\n * <p>\n * A {@link ValidatorHandler} object is a thread-unsafe, non-reentrant object.\n * In other words, it is the application's responsibility to make\n * sure that one {@link ValidatorHandler} object is not used from\n * more than one thread at any given time.\n *\n * <p>\n * {@link ValidatorHandler} checks if the SAX events follow\n * the set of constraints described in the associated {@link Schema},\n * and additionally it may modify the SAX events (for example\n * by adding default values, etc.)\n *\n * <p>\n * {@link ValidatorHandler} extends from {@link ContentHandler},\n * but it refines the underlying {@link ContentHandler} in\n * the following way:\n * <ol>\n *  <li>startElement/endElement events must receive non-null String\n *      for <code>uri</code>, <code>localName</code>, and <code>qname</code>,\n *      even though SAX allows some of them to be null.\n *      Similarly, the user-specified {@link ContentHandler} will receive non-null\n *      Strings for all three parameters.\n *\n *  <li>Applications must ensure that {@link ValidatorHandler}'s\n *      {@link ContentHandler#startPrefixMapping(String,String)} and\n *      {@link ContentHandler#endPrefixMapping(String)} are invoked\n *      properly. Similarly, the user-specified {@link ContentHandler}\n *      will receive startPrefixMapping/endPrefixMapping events.\n *      If the {@link ValidatorHandler} introduces additional namespace\n *      bindings, the user-specified {@link ContentHandler} will receive\n *      additional startPrefixMapping/endPrefixMapping events.\n *\n *  <li>{@link org.xml.sax.Attributes} for the\n *      {@link ContentHandler#startElement(String,String,String,Attributes)} method\n *      may or may not include xmlns* attributes.\n * </ol>\n *\n * <p>\n * A {@link ValidatorHandler} is automatically reset every time\n * the startDocument method is invoked.\n *\n * <h2>Recognized Properties and Features</h2>\n * <p>\n * This spec defines the following feature that must be recognized\n * by all {@link ValidatorHandler} implementations.\n *\n * <h3><code>http://xml.org/sax/features/namespace-prefixes</code></h3>\n * <p>\n * This feature controls how a {@link ValidatorHandler} introduces\n * namespace bindings that were not present in the original SAX event\n * stream.\n * When this feature is set to true, it must make\n * sure that the user's {@link ContentHandler} will see\n * the corresponding <code>xmlns*</code> attribute in\n * the {@link org.xml.sax.Attributes} object of the\n * {@link ContentHandler#startElement(String,String,String,Attributes)}\n * callback. Otherwise, <code>xmlns*</code> attributes must not be\n * added to {@link org.xml.sax.Attributes} that's passed to the\n * user-specified {@link ContentHandler}.\n * <p>\n * (Note that regardless of this switch, namespace bindings are\n * always notified to applications through\n * {@link ContentHandler#startPrefixMapping(String,String)} and\n * {@link ContentHandler#endPrefixMapping(String)} methods of the\n * {@link ContentHandler} specified by the user.)\n *\n * <p>\n * Note that this feature does <em>NOT</em> affect the way\n * a {@link ValidatorHandler} receives SAX events. It merely\n * changes the way it augments SAX events.\n *\n * <p>This feature is set to <code>false</code> by default.</p>\n *\n * @author  <a href=\"mailto:Kohsuke.Kawaguchi@Sun.com\">Kohsuke Kawaguchi</a>\n * @version $Revision: 446598 $, $Date: 2006-09-15 05:55:40 -0700 (Fri, 15 Sep 2006) $\n * @since 1.5\n ",
  "links" : [ "javax.xml.validation.ValidatorHandler", "org.xml.sax.ContentHandler#startPrefixMapping(String", "org.xml.sax.ContentHandler#endPrefixMapping(String)", "org.xml.sax.ContentHandler#startElement(String", "org.xml.sax.Attributes", "org.xml.sax.ContentHandler", "javax.xml.validation.Schema" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void setContentHandler(ContentHandler receiver)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link ContentHandler} which receives\n     * the augmented validation result.\n     *\n     * <p>\n     * When a {@link ContentHandler} is specified, a\n     * {@link ValidatorHandler} will work as a filter\n     * and basically copy the incoming events to the\n     * specified {@link ContentHandler}.\n     *\n     * <p>\n     * In doing so, a {@link ValidatorHandler} may modify\n     * the events, for example by adding defaulted attributes.\n     *\n     * <p>\n     * A {@link ValidatorHandler} may buffer events to certain\n     * extent, but to allow {@link ValidatorHandler} to be used\n     * by a parser, the following requirement has to be met.\n     *\n     * <ol>\n     *  <li>When\n     *      {@link ContentHandler#startElement(String, String, String, Attributes)},\n     *      {@link ContentHandler#endElement(String, String, String)},\n     *      {@link ContentHandler#startDocument()}, or\n     *      {@link ContentHandler#endDocument()}\n     *      are invoked on a {@link ValidatorHandler},\n     *      the same method on the user-specified {@link ContentHandler}\n     *      must be invoked for the same event before the callback\n     *      returns.\n     *  <li>{@link ValidatorHandler} may not introduce new elements that\n     *      were not present in the input.\n     *\n     *  <li>{@link ValidatorHandler} may not remove attributes that were\n     *      present in the input.\n     * </ol>\n     *\n     * <p>\n     * When a callback method on the specified {@link ContentHandler}\n     * throws an exception, the same exception object must be thrown\n     * from the {@link ValidatorHandler}. The {@link ErrorHandler}\n     * should not be notified of such an exception.\n     *\n     * <p>\n     * This method can be called even during a middle of a validation.\n     *\n     * @param receiver\n     *      A {@link ContentHandler} or a null value.\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "javax.xml.validation.ValidatorHandler", "org.xml.sax.ContentHandler#endElement(String", "org.xml.sax.ContentHandler#endDocument()", "org.xml.sax.ContentHandler#startElement(String", "org.xml.sax.ContentHandler#startDocument()", "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public abstract ContentHandler getContentHandler()",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Gets the {@link ContentHandler} which receives the\n     * augmented validation result.\n     *\n     * @return\n     *      This method returns the object that was last set through\n     *      the {@link #getContentHandler()} method, or null\n     *      if that method has never been called since this {@link ValidatorHandler}\n     *      has created.\n     *\n     * @see #setContentHandler(ContentHandler)\n     ",
    "links" : [ "#getContentHandler()", "javax.xml.validation.ValidatorHandler", "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public abstract void setErrorHandler(ErrorHandler errorHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link ErrorHandler} to receive errors encountered\n     * during the validation.\n     *\n     * <p>\n     * Error handler can be used to customize the error handling process\n     * during a validation. When an {@link ErrorHandler} is set,\n     * errors found during the validation will be first sent\n     * to the {@link ErrorHandler}.\n     *\n     * <p>\n     * The error handler can abort further validation immediately\n     * by throwing {@link org.xml.sax.SAXException} from the handler. Or for example\n     * it can print an error to the screen and try to continue the\n     * validation by returning normally from the {@link ErrorHandler}\n     *\n     * <p>\n     * If any {@link Throwable} is thrown from an {@link ErrorHandler},\n     * the same {@link Throwable} object will be thrown toward the\n     * root of the call stack.\n     *\n     * <p>\n     * {@link ValidatorHandler} is not allowed to\n     * throw {@link org.xml.sax.SAXException} without first reporting it to\n     * {@link ErrorHandler}.\n     *\n     * <p>\n     * When the {@link ErrorHandler} is null, the implementation will\n     * behave as if the following {@link ErrorHandler} is set:\n     * <pre>\n     * class DraconianErrorHandler implements {@link ErrorHandler} {\n     *     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {\n     *         throw e;\n     *     }\n     *     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {\n     *         throw e;\n     *     }\n     *     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {\n     *         // noop\n     *     }\n     * }\n     * </pre>\n     *\n     * <p>\n     * When a new {@link ValidatorHandler} object is created, initially\n     * this field is set to null.\n     *\n     * @param   errorHandler\n     *      A new error handler to be set. This parameter can be null.\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "org.xml.sax.SAXParseException", "javax.xml.validation.ValidatorHandler", "org.xml.sax.SAXException", "Throwable" ]
  }, {
    "name" : "public abstract ErrorHandler getErrorHandler()",
    "returnType" : "ErrorHandler",
    "comment" : "\n     * Gets the current {@link ErrorHandler} set to this {@link ValidatorHandler}.\n     *\n     * @return\n     *      This method returns the object that was last set through\n     *      the {@link #setErrorHandler(ErrorHandler)} method, or null\n     *      if that method has never been called since this {@link ValidatorHandler}\n     *      has created.\n     *\n     * @see #setErrorHandler(ErrorHandler)\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "javax.xml.validation.ValidatorHandler", "#setErrorHandler(ErrorHandler)" ]
  }, {
    "name" : "public abstract void setResourceResolver(LSResourceResolver resourceResolver)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link LSResourceResolver} to customize\n     * resource resolution while in a validation episode.\n     *\n     * <p>\n     * {@link ValidatorHandler} uses a {@link LSResourceResolver}\n     * when it needs to locate external resources while a validation,\n     * although exactly what constitutes \"locating external resources\" is\n     * up to each schema language.\n     *\n     * <p>\n     * When the {@link LSResourceResolver} is null, the implementation will\n     * behave as if the following {@link LSResourceResolver} is set:\n     * <pre>\n     * class DumbLSResourceResolver implements {@link LSResourceResolver} {\n     *     public {@link org.w3c.dom.ls.LSInput} resolveResource(\n     *         String publicId, String systemId, String baseURI) {\n     *\n     *         return null; // always return null\n     *     }\n     * }\n     * </pre>\n     *\n     * <p>\n     * If a {@link LSResourceResolver} throws a {@link RuntimeException}\n     *  (or instances of its derived classes),\n     * then the {@link ValidatorHandler} will abort the parsing and\n     * the caller of the <code>validate</code> method will receive\n     * the same {@link RuntimeException}.\n     *\n     * <p>\n     * When a new {@link ValidatorHandler} object is created, initially\n     * this field is set to null.\n     *\n     * @param   resourceResolver\n     *      A new resource resolver to be set. This parameter can be null.\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "RuntimeException", "org.w3c.dom.ls.LSResourceResolver", "org.w3c.dom.ls.LSInput" ]
  }, {
    "name" : "public abstract LSResourceResolver getResourceResolver()",
    "returnType" : "LSResourceResolver",
    "comment" : "\n     * Gets the current {@link LSResourceResolver} set to this {@link ValidatorHandler}.\n     *\n     * @return\n     *      This method returns the object that was last set through\n     *      the {@link #setResourceResolver(LSResourceResolver)} method, or null\n     *      if that method has never been called since this {@link ValidatorHandler}\n     *      has created.\n     *\n     * @see #setErrorHandler(ErrorHandler)\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "#setResourceResolver(LSResourceResolver)", "org.w3c.dom.ls.LSResourceResolver" ]
  }, {
    "name" : "public abstract TypeInfoProvider getTypeInfoProvider()",
    "returnType" : "TypeInfoProvider",
    "comment" : "\n     * Obtains the {@link TypeInfoProvider} implementation of this\n     * {@link ValidatorHandler}.\n     *\n     * <p>\n     * The obtained {@link TypeInfoProvider} can be queried during a parse\n     * to access the type information determined by the validator.\n     *\n     * <p>\n     * Some schema languages do not define the notion of type,\n     * for those languages, this method may not be supported.\n     * However, to be compliant with this specification, implementations\n     * for W3C XML Schema 1.0 must support this operation.\n     *\n     * @return\n     *      null if the validator / schema language does not support\n     *      the notion of {@link org.w3c.dom.TypeInfo}.\n     *      Otherwise a non-null valid {@link TypeInfoProvider}.\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "javax.xml.validation.TypeInfoProvider", "org.w3c.dom.TypeInfo" ]
  }, {
    "name" : "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "boolean",
    "comment" : "\n     * Look up the value of a feature flag.\n     *\n     * <p>The feature name is any fully-qualified URI.  It is\n     * possible for a {@link ValidatorHandler} to recognize a feature name but\n     * temporarily be unable to return its value.\n     * Some feature values may be available only in specific\n     * contexts, such as before, during, or after a validation.\n     *\n     * <p>Implementors are free (and encouraged) to invent their own features,\n     * using names built on their own URIs.</p>\n     *\n     * @param name The feature name, which is a non-null fully-qualified URI.\n     * @return The current value of the feature (true or false).\n     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            {@link ValidatorHandler} recognizes the feature name but\n     *            cannot determine its value at this time.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     * @see #setFeature(String, boolean)\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler" ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a feature flag.\n     *\n     * <p>\n     * Feature can be used to control the way a {@link ValidatorHandler}\n     * parses schemas, although {@link ValidatorHandler}s are not required\n     * to recognize any specific property names.</p>\n     *\n     * <p>The feature name is any fully-qualified URI.  It is\n     * possible for a {@link ValidatorHandler} to expose a feature value but\n     * to be unable to change the current value.\n     * Some feature values may be immutable or mutable only\n     * in specific contexts, such as before, during, or after\n     * a validation.</p>\n     *\n     * @param name The feature name, which is a non-null fully-qualified URI.\n     * @param value The requested value of the feature (true or false).\n     *\n     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            {@link ValidatorHandler} recognizes the feature name but\n     *            cannot set the requested value.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     *\n     * @see #getFeature(String)\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler" ]
  }, {
    "name" : "public void setProperty(String name, Object object) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a property.\n     *\n     * <p>The property name is any fully-qualified URI.  It is\n     * possible for a {@link ValidatorHandler} to recognize a property name but\n     * to be unable to change the current value.\n     * Some property values may be immutable or mutable only\n     * in specific contexts, such as before, during, or after\n     * a validation.</p>\n     *\n     * <p>{@link ValidatorHandler}s are not required to recognize setting\n     * any specific property names.</p>\n     *\n     * @param name The property name, which is a non-null fully-qualified URI.\n     * @param object The requested value for the property.\n     *\n     * @exception org.xml.sax.SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            {@link ValidatorHandler} recognizes the property name but\n     *            cannot set the requested value.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler" ]
  }, {
    "name" : "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Look up the value of a property.\n     *\n     * <p>The property name is any fully-qualified URI.  It is\n     * possible for a {@link ValidatorHandler} to recognize a property name but\n     * temporarily be unable to return its value.\n     * Some property values may be available only in specific\n     * contexts, such as before, during, or after a validation.</p>\n     *\n     * <p>{@link ValidatorHandler}s are not required to recognize any specific\n     * property names.</p>\n     *\n     * <p>Implementors are free (and encouraged) to invent their own properties,\n     * using names built on their own URIs.</p>\n     *\n     * @param name The property name, which is a non-null fully-qualified URI.\n     * @return The current value of the property.\n     * @exception org.xml.sax.SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            XMLReader recognizes the property name but\n     *            cannot determine its value at this time.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     * @see #setProperty(String, Object)\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler" ]
  } ],
  "methodNames" : [ "public abstract void setContentHandler(ContentHandler receiver)", "public abstract ContentHandler getContentHandler()", "public abstract void setErrorHandler(ErrorHandler errorHandler)", "public abstract ErrorHandler getErrorHandler()", "public abstract void setResourceResolver(LSResourceResolver resourceResolver)", "public abstract LSResourceResolver getResourceResolver()", "public abstract TypeInfoProvider getTypeInfoProvider()", "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setProperty(String name, Object object) throws SAXNotRecognizedException, SAXNotSupportedException", "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException" ],
  "variableNames" : [ ]
}