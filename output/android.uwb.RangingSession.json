{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/uwb/RangingSession.java",
  "packageName" : "android.uwb",
  "className" : "RangingSession",
  "comment" : "\n * This class provides a way to control an active UWB ranging session.\n * <p>It also defines the required {@link RangingSession.Callback} that must be implemented\n * in order to be notified of UWB ranging results and status events related to the\n * {@link RangingSession}.\n *\n * <p>To get an instance of {@link RangingSession}, first use\n * {@link UwbManager#openRangingSession(PersistableBundle, Executor, Callback)} to request to open a\n * session. Once the session is opened, a {@link RangingSession} object is provided through\n * {@link RangingSession.Callback#onOpened(RangingSession)}. If opening a session fails, the failure\n * is reported through {@link RangingSession.Callback#onOpenFailed(int, PersistableBundle)} with the\n * failure reason.\n *\n * @hide\n ",
  "links" : [ "RangingSession.Callback#onOpened(RangingSession)", "RangingSession.Callback", "android.uwb.UwbManager#openRangingSession(PersistableBundle", "android.uwb.RangingSession", "RangingSession.Callback#onOpenFailed(int" ],
  "variables" : [ {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionHandle",
    "type" : "SessionHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "IUwbAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChipId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * If the session uses custom profile,\n     *    Begins ranging for the session.\n     *    <p>On successfully starting a ranging session,\n     *    {@link RangingSession.Callback#onStarted(PersistableBundle)} is invoked.\n     *    <p>On failure to start the session,\n     *    {@link RangingSession.Callback#onStartFailed(int, PersistableBundle)}\n     *    is invoked.\n     *\n     * If the session uses platform defined profile (like PACS),\n     *    Begins OOB discovery for the service. Once the service is discovered,\n     *    UWB session params are negotiated via OOB and a UWB session will be\n     *    started.\n     *    <p>On successfully discovering a service,\n     *    {@link RangingSession.Callback#onServiceDiscovered(PersistableBundle)} is invoked.\n     *    <p>On successfully connecting to a service,\n     *    {@link RangingSession.Callback#onServiceConnected(PersistableBundle)} is invoked.\n     *    <p>On successfully starting a ranging session,\n     *    {@link RangingSession.Callback#onStarted(PersistableBundle)} is invoked.\n     *    <p>On failure to start the session,\n     *    {@link RangingSession.Callback#onStartFailed(int, PersistableBundle)}\n     *    is invoked.\n     *\n     * @param params configuration parameters for starting the session\n     ",
    "links" : [ "RangingSession.Callback#onServiceConnected(PersistableBundle)", "RangingSession.Callback#onStarted(PersistableBundle)", "RangingSession.Callback#onStartFailed(int", "RangingSession.Callback#onServiceDiscovered(PersistableBundle)" ]
  }, {
    "name" : "public void reconfigure(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to reconfigure the session with the given parameters\n     * <p>This call may be made when the session is open.\n     *\n     * <p>On successfully reconfiguring the session\n     * {@link RangingSession.Callback#onReconfigured(PersistableBundle)} is invoked.\n     *\n     * <p>On failure to reconfigure the session,\n     * {@link RangingSession.Callback#onReconfigureFailed(int, PersistableBundle)} is invoked.\n     *\n     * @param params the parameters to reconfigure and their new values\n     ",
    "links" : [ "RangingSession.Callback#onReconfigureFailed(int", "RangingSession.Callback#onReconfigured(PersistableBundle)" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops actively ranging\n     *\n     * <p>A session that has been stopped may be resumed by calling\n     * {@link RangingSession#start(PersistableBundle)} without the need to open a new session.\n     *\n     * <p>Stopping a {@link RangingSession} is useful when the lower layers should not discard\n     * the parameters of the session, or when a session needs to be able to be resumed quickly.\n     *\n     * <p>If the {@link RangingSession} is no longer needed, use {@link RangingSession#close()} to\n     * completely close the session and allow lower layers of the stack to perform necessarily\n     * cleanup.\n     *\n     * <p>Stopped sessions may be closed by the system at any time. In such a case,\n     * {@link RangingSession.Callback#onClosed(int, PersistableBundle)} is invoked.\n     *\n     * <p>On failure to stop the session,\n     * {@link RangingSession.Callback#onStopFailed(int, PersistableBundle)} is invoked.\n     ",
    "links" : [ "android.uwb.RangingSession#start(PersistableBundle)", "RangingSession.Callback#onStopFailed(int", "android.uwb.RangingSession", "RangingSession.Callback#onClosed(int", "android.uwb.RangingSession#close()" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the ranging session\n     *\n     * <p>After calling this function, in order resume ranging, a new {@link RangingSession} must\n     * be opened by calling\n     * {@link UwbManager#openRangingSession(PersistableBundle, Executor, Callback)}.\n     *\n     * <p>If this session is currently ranging, it will stop and close the session.\n     * <p>If the session is in the process of being opened, it will attempt to stop the session from\n     * being opened.\n     * <p>If the session is already closed, the registered\n     * {@link Callback#onClosed(int, PersistableBundle)} callback will still be invoked.\n     *\n     * <p>{@link Callback#onClosed(int, PersistableBundle)} will be invoked using the same callback\n     * object given to {@link UwbManager#openRangingSession(PersistableBundle, Executor, Callback)}\n     * when the {@link RangingSession} was opened. The callback will be invoked after each call to\n     * {@link #close()}, even if the {@link RangingSession} is already closed.\n     ",
    "links" : [ "android.uwb.UwbManager#openRangingSession(PersistableBundle", "#close()", "android.uwb.RangingSession", "#onClosed(int" ]
  }, {
    "name" : "public void addControlee(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Add a new controlee to an ongoing session.\n     * <p>This call may be made when the session is open.\n     *\n     * <p>On successfully adding a new controlee to the session\n     * {@link RangingSession.Callback#onControleeAdded(PersistableBundle)} is invoked.\n     *\n     * <p>On failure to add a new controlee to the session,\n     * {@link RangingSession.Callback#onControleeAddFailed(int, PersistableBundle)} is invoked.\n     *\n     * @param params the parameters for the new controlee\n     ",
    "links" : [ "RangingSession.Callback#onControleeAdded(PersistableBundle)", "RangingSession.Callback#onControleeAddFailed(int" ]
  }, {
    "name" : "public void removeControlee(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Remove an existing controlee from an ongoing session.\n     * <p>This call may be made when the session is open.\n     *\n     * <p>On successfully removing an existing controlee from the session\n     * {@link RangingSession.Callback#onControleeRemoved(PersistableBundle)} is invoked.\n     *\n     * <p>On failure to remove an existing controlee from the session,\n     * {@link RangingSession.Callback#onControleeRemoveFailed(int, PersistableBundle)} is invoked.\n     *\n     * @param params the parameters for the existing controlee\n     ",
    "links" : [ "RangingSession.Callback#onControleeRemoved(PersistableBundle)", "RangingSession.Callback#onControleeRemoveFailed(int" ]
  }, {
    "name" : "public void pause(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Pauses an ongoing ranging session.\n     *\n     * <p>A session that has been pauseed may be resumed by calling\n     * {@link RangingSession#resume(PersistableBundle)} without the need to open a new session.\n     *\n     * <p>Pauseing a {@link RangingSession} is useful when the lower layers should skip a few\n     * ranging rounds for a session without stopping it.\n     *\n     * <p>If the {@link RangingSession} is no longer needed, use {@link RangingSession#stop()} or\n     * {@link RangingSession#close()} to completely close the session.\n     *\n     * <p>On successfully pausing the session,\n     * {@link RangingSession.Callback#onRangingPaused(PersistableBundle)} is invoked.\n     *\n     * <p>On failure to pause the session,\n     * {@link RangingSession.Callback#onRangingPauseFailed(int, PersistableBundle)} is invoked.\n     *\n     * @param params protocol specific parameters for pausing the session\n     ",
    "links" : [ "android.uwb.RangingSession#stop()", "RangingSession.Callback#onRangingPaused(PersistableBundle)", "RangingSession.Callback#onRangingPauseFailed(int", "android.uwb.RangingSession#resume(PersistableBundle)", "android.uwb.RangingSession", "android.uwb.RangingSession#close()" ]
  }, {
    "name" : "public void resume(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Resumes a pauseed ranging session.\n     *\n     * <p>A session that has been previously pauseed using\n     * {@link RangingSession#pause(PersistableBundle)} can be resumed by calling\n     * {@link RangingSession#resume(PersistableBundle)}.\n     *\n     * <p>On successfully resuming the session,\n     * {@link RangingSession.Callback#onRangingResumed(PersistableBundle)} is invoked.\n     *\n     * <p>On failure to resume the session,\n     * {@link RangingSession.Callback#onRangingResumeFailed(int, PersistableBundle)} is invoked.\n     *\n     * @param params protocol specific parameters the resuming the session\n     ",
    "links" : [ "RangingSession.Callback#onRangingResumeFailed(int", "android.uwb.RangingSession#resume(PersistableBundle)", "RangingSession.Callback#onRangingResumed(PersistableBundle)", "android.uwb.RangingSession#pause(PersistableBundle)" ]
  }, {
    "name" : "public void sendData(@NonNull UwbAddress remoteDeviceAddress, @NonNull PersistableBundle params, @NonNull byte[] data)",
    "returnType" : "void",
    "comment" : "\n     * Send data to a remote device which is part of this ongoing session.\n     * The data is sent by piggybacking the provided data over RRM (initiator -> responder) or\n     * RIM (responder -> initiator).\n     * <p>This is only functional on a FIRA 2.0 compliant device.\n     *\n     * <p>On successfully sending the data,\n     * {@link RangingSession.Callback#onDataSent(UwbAddress, PersistableBundle)} is invoked.\n     *\n     * <p>On failure to send the data,\n     * {@link RangingSession.Callback#onDataSendFailed(UwbAddress, int, PersistableBundle)} is\n     * invoked.\n     *\n     * @param remoteDeviceAddress remote device's address\n     * @param params protocol specific parameters the sending the data\n     * @param data Raw data to be sent\n     ",
    "links" : [ "RangingSession.Callback#onDataSent(UwbAddress", "RangingSession.Callback#onDataSendFailed(UwbAddress" ]
  }, {
    "name" : "public void setDataTransferPhaseConfig(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Set data transfer phase configuration during ranging as well as dedicated data transfer.\n     * <p>This is only functional on a FIRA 2.0 compliant device.\n     *\n     * <p>On successfully sending the data transfer phase config,\n     * {@link RangingSession.Callback#onDataTransferPhaseConfigured(PersistableBundle)} is\n     * invoked.\n     *\n     * <p>On failure to send the data transfer phase config,\n     * {@link RangingSession.Callback#onDataTransferPhaseConfigFailed(PersistableBundle)} is\n     * invoked.\n     *\n     * @param params Protocol specific data transfer phase configuration parameters\n     ",
    "links" : [ "RangingSession.Callback#onDataTransferPhaseConfigured(PersistableBundle)", "RangingSession.Callback#onDataTransferPhaseConfigFailed(PersistableBundle)" ]
  }, {
    "name" : "public void updateRangingRoundsDtTag(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Update active ranging rounds for DT Tag.\n     *\n     * <p> On successfully sending the command,\n     * {@link RangingSession.Callback#onRangingRoundsUpdateDtTagStatus(PersistableBundle)}\n     * is invoked.\n     * @param params Parameters to configure active ranging rounds\n     ",
    "links" : [ "RangingSession.Callback#onRangingRoundsUpdateDtTagStatus(PersistableBundle)" ]
  }, {
    "name" : "public int queryMaxDataSizeBytes()",
    "returnType" : "int",
    "comment" : "\n     * Query max application data size which can be sent by UWBS in one ranging round.\n     *\n     * @throws IllegalStateException, when the ranging session is not in the appropriate state for\n     * this API to be called.\n     * @return max application data size\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHybridSessionControllerConfiguration(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Hybrid UWB Session Controller Configuration.\n     *\n     * <p>On successfully setting the hybrid controller configuration,\n     * {@link RangingSession.Callback#onHybridSessionControllerConfigured(PersistableBundle)}\n     * is invoked.\n     *\n     * <p>On failing to set the hybrid controller configuration,\n     * {@link RangingSession.Callback#onHybridSessionControllerConfigurationFailed(int,\n     * PersistableBundle)} is invoked.\n     *\n     * @param params protocol specific parameters to configure the hybrid session controller\n     * @throws RemoteException if a remote error occurred\n     ",
    "links" : [ "RangingSession.Callback#onHybridSessionControllerConfigurationFailed(int", "RangingSession.Callback#onHybridSessionControllerConfigured(PersistableBundle)" ]
  }, {
    "name" : "public void setHybridSessionControleeConfiguration(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Hybrid UWB Session Controlee Configuration.\n     *\n     * <p>On successfully setting the hybrid Controlee configuration,\n     * {@link RangingSession.Callback#onHybridSessionControleeConfigured(PersistableBundle)}\n     * is invoked.\n     *\n     * <p>On failing to set the hybrid Controlee configuration,\n     * {@link RangingSession.Callback#onHybridSessionControleeConfigurationFailed(int,\n     * PersistableBundle)} is invoked.\n     *\n     * @param params protocol specific parameters to configure the hybrid session Controlee\n     * @throws RemoteException if a remote error occurred\n     ",
    "links" : [ "RangingSession.Callback#onHybridSessionControleeConfigurationFailed(int", "RangingSession.Callback#onHybridSessionControleeConfigured(PersistableBundle)" ]
  }, {
    "name" : "public void onRangingOpened()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingOpenFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingStarted(@NonNull PersistableBundle parameters)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingStartFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingReconfigured(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingReconfigureFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingStopped(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingStopFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingClosed(@Callback.Reason int reason, @NonNull PersistableBundle parameters)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingResult(@NonNull RangingReport report)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onControleeAdded(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onControleeAddFailed(@Callback.ControleeFailureReason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onControleeRemoved(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onControleeRemoveFailed(@Callback.ControleeFailureReason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingPaused(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingPauseFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingResumed(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingResumeFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataSent(@NonNull UwbAddress remoteDeviceAddress, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataSendFailed(@NonNull UwbAddress remoteDeviceAddress, @Callback.DataFailureReason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataReceived(@NonNull UwbAddress remoteDeviceAddress, @NonNull PersistableBundle params, @NonNull byte[] data)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataReceiveFailed(@NonNull UwbAddress remoteDeviceAddress, @Callback.DataFailureReason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataTransferPhaseConfigured(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataTransferPhaseConfigFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDiscovered(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRangingRoundsUpdateDtTagStatus(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onHybridSessionControllerConfigured(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onHybridSessionControllerConfigurationFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onHybridSessionControleeConfigured(@NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onHybridSessionControleeConfigurationFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void executeCallback(@NonNull Runnable runnable)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updatePose(@NonNull PersistableBundle parameters)",
    "returnType" : "void",
    "comment" : "\n     * Updates the UWB filter engine's pose information. This requires that the call to\n     * {@link UwbManager#openRangingSession} indicated an application pose source.\n     *\n     * @param parameters Parameters representing the session to update, and the pose information.\n     ",
    "links" : [ "android.uwb.UwbManager#openRangingSession" ]
  } ],
  "methodNames" : [ "public boolean isOpen()", "public void start(@NonNull PersistableBundle params)", "public void reconfigure(@NonNull PersistableBundle params)", "public void stop()", "public void close()", "public void addControlee(@NonNull PersistableBundle params)", "public void removeControlee(@NonNull PersistableBundle params)", "public void pause(@NonNull PersistableBundle params)", "public void resume(@NonNull PersistableBundle params)", "public void sendData(@NonNull UwbAddress remoteDeviceAddress, @NonNull PersistableBundle params, @NonNull byte[] data)", "public void setDataTransferPhaseConfig(@NonNull PersistableBundle params)", "public void updateRangingRoundsDtTag(@NonNull PersistableBundle params)", "public int queryMaxDataSizeBytes()", "public void setHybridSessionControllerConfiguration(@NonNull PersistableBundle params)", "public void setHybridSessionControleeConfiguration(@NonNull PersistableBundle params)", "public void onRangingOpened()", "public void onRangingOpenFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onRangingStarted(@NonNull PersistableBundle parameters)", "public void onRangingStartFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onRangingReconfigured(@NonNull PersistableBundle params)", "public void onRangingReconfigureFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onRangingStopped(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onRangingStopFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onRangingClosed(@Callback.Reason int reason, @NonNull PersistableBundle parameters)", "public void onRangingResult(@NonNull RangingReport report)", "public void onControleeAdded(@NonNull PersistableBundle params)", "public void onControleeAddFailed(@Callback.ControleeFailureReason int reason, @NonNull PersistableBundle params)", "public void onControleeRemoved(@NonNull PersistableBundle params)", "public void onControleeRemoveFailed(@Callback.ControleeFailureReason int reason, @NonNull PersistableBundle params)", "public void onRangingPaused(@NonNull PersistableBundle params)", "public void onRangingPauseFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onRangingResumed(@NonNull PersistableBundle params)", "public void onRangingResumeFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onDataSent(@NonNull UwbAddress remoteDeviceAddress, @NonNull PersistableBundle params)", "public void onDataSendFailed(@NonNull UwbAddress remoteDeviceAddress, @Callback.DataFailureReason int reason, @NonNull PersistableBundle params)", "public void onDataReceived(@NonNull UwbAddress remoteDeviceAddress, @NonNull PersistableBundle params, @NonNull byte[] data)", "public void onDataReceiveFailed(@NonNull UwbAddress remoteDeviceAddress, @Callback.DataFailureReason int reason, @NonNull PersistableBundle params)", "public void onDataTransferPhaseConfigured(@NonNull PersistableBundle params)", "public void onDataTransferPhaseConfigFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onServiceDiscovered(@NonNull PersistableBundle params)", "public void onServiceConnected(@NonNull PersistableBundle params)", "public void onRangingRoundsUpdateDtTagStatus(@NonNull PersistableBundle params)", "public void onHybridSessionControllerConfigured(@NonNull PersistableBundle params)", "public void onHybridSessionControllerConfigurationFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "public void onHybridSessionControleeConfigured(@NonNull PersistableBundle params)", "public void onHybridSessionControleeConfigurationFailed(@Callback.Reason int reason, @NonNull PersistableBundle params)", "private void executeCallback(@NonNull Runnable runnable)", "public void updatePose(@NonNull PersistableBundle parameters)" ],
  "variableNames" : [ "mTag", "mSessionHandle", "mAdapter", "mExecutor", "mCallback", "mChipId", "mState" ]
}