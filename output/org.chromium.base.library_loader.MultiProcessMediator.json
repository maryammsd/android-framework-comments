{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/library_loader/LibraryLoader.java",
  "packageName" : "org.chromium.base.library_loader",
  "className" : "MultiProcessMediator",
  "comment" : "\n     * Inner class encapsulating points of communication between instances of LibraryLoader in\n     * different processes.\n     *\n     * Usage:\n     *\n     * 0. In the main (Browser) process this mediator can be bypassed by\n     *    {@link LibraryLoader#ensureInitialized()}. It is convenient for targets that do not pay\n     *    attention to RELRO sharing and load time statistics, but it is also more error prone. The\n     *    {@link #ensureInitializedInMainProcess()} is recommended.\n     *\n     * 1. For a {@link LibraryLoader} requiring the knowledge of the load address before\n     *    initialization, {@link #takeLoadAddressFromBundle(Bundle)} should be called first. It is\n     *    done very early after establishing a Binder connection.\n     *\n     * 2. After the load address is received, the object needs to be initialized using one of\n     *    {@link #ensureInitializedInMainProcess()}, {@link #initInChildProcess()} and\n     *    {@link #initInAppZygote()}. For the main process the subsequent calls to initialization\n     *    are ignored, primarily to simplify tests.\n     *\n     * 3. Later {@link #putLoadAddressToBundle(Bundle)} and\n     *    {@link #takeLoadAddressFromBundle(Bundle)} should be called for passing the RELRO\n     *    information between library loaders.\n     *\n     * Internally the {@link LibraryLoader} may ignore these messages because it can fall back to\n     * not sharing RELRO.\n     *\n     * In general the class is *not* thread safe. The client must guarantee that the steps 1-3 above\n     * happen sequentially in the memory model sense. After that the class is safe to use from\n     * multiple threads concurrently.\n     ",
  "links" : [ "org.chromium.base.library_loader.LibraryLoader", "#takeLoadAddressFromBundle(Bundle)", "#initInChildProcess()", "#ensureInitializedInMainProcess()", "#putLoadAddressToBundle(Bundle)", "#initInAppZygote()", "org.chromium.base.library_loader.LibraryLoader#ensureInitialized()" ],
  "variables" : [ {
    "name" : "mLoadAddress",
    "type" : "long",
    "comment" : " executed on a different thread. Hence, synchronization is not required.",
    "links" : [ ]
  }, {
    "name" : "mInitDone",
    "type" : "boolean",
    "comment" : " Only ever switched from false to true.",
    "links" : [ ]
  }, {
    "name" : "mCreatedIn",
    "type" : "int",
    "comment" : " value.",
    "links" : [ ]
  }, {
    "name" : "LINKER_HISTOGRAM_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void takeLoadAddressFromBundle(Bundle bundle)",
    "returnType" : "void",
    "comment" : "\n         * Extracts the load address as provided by another process.\n         * @param bundle The Bundle to extract from.\n         ",
    "links" : [ ]
  }, {
    "name" : "private long getLoadAddress()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ensureInitializedInMainProcess()",
    "returnType" : "void",
    "comment" : "\n         * Initializes the Main (Browser) process side of communication. This process coordinates\n         * creation of other processes. Can be called more than once, subsequent calls are ignored.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void putLoadAddressToBundle(Bundle bundle)",
    "returnType" : "void",
    "comment" : "\n         * Serializes the load address for communication, if any was determined during\n         * initialization. Must be called after the library has been loaded in this process.\n         * @param bundle Bundle to put the address to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void initInAppZygote()",
    "returnType" : "void",
    "comment" : "\n         * Initializes in the App Zygote process. Will be followed by initInChildProcess() in all\n         * processes inheriting from the app zygote.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void initInChildProcess()",
    "returnType" : "void",
    "comment" : "\n         * Initializes in processes other than \"Main\". Can be called only once in each non-main\n         * process.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void takeSharedRelrosFromBundle(Bundle bundle)",
    "returnType" : "void",
    "comment" : "\n         * Optionally extracts RELRO and saves it for replacing the RELRO section in this process.\n         * Can be invoked before initialization.\n         * @param bundle Where to deserialize from.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void putSharedRelrosToBundle(Bundle bundle)",
    "returnType" : "void",
    "comment" : "\n         * Optionally puts the RELRO section information so that it can be memory-mapped in another\n         * process reading the bundle.\n         * @param bundle Where to serialize.\n         ",
    "links" : [ ]
  }, {
    "name" : "private String creationAsString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recordLoadTimeHistogram(long loadTimeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recordLoadThreadTimeHistogram(long threadLoadTimeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void takeLoadAddressFromBundle(Bundle bundle)", "private long getLoadAddress()", "public void ensureInitializedInMainProcess()", "public void putLoadAddressToBundle(Bundle bundle)", "public void initInAppZygote()", "public void initInChildProcess()", "public void takeSharedRelrosFromBundle(Bundle bundle)", "public void putSharedRelrosToBundle(Bundle bundle)", "private String creationAsString()", "private void recordLoadTimeHistogram(long loadTimeMs)", "public void recordLoadThreadTimeHistogram(long threadLoadTimeMs)" ],
  "variableNames" : [ "mLoadAddress", "mInitDone", "mCreatedIn", "LINKER_HISTOGRAM_PREFIX" ]
}