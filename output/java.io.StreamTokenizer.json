{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/StreamTokenizer.java",
  "packageName" : "java.io",
  "className" : "StreamTokenizer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "reader",
    "type" : "Reader",
    "comment" : " Only one of these will be non-null ",
    "links" : [ ]
  }, {
    "name" : "input",
    "type" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "peekc",
    "type" : "int",
    "comment" : "\n     * The next character to be considered by the nextToken method.  May also\n     * be NEED_CHAR to indicate that a new character should be read, or SKIP_LF\n     * to indicate that a new character should be read and, if it is a '\\n'\n     * character, it should be discarded and a second new character should be\n     * read.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEED_CHAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SKIP_LF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pushedBack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "forceLower",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINENO",
    "type" : "int",
    "comment" : " The line number of the last token read ",
    "links" : [ ]
  }, {
    "name" : "eolIsSignificantP",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "slashSlashCommentsP",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "slashStarCommentsP",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ctype",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CT_WHITESPACE",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CT_DIGIT",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CT_ALPHA",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CT_QUOTE",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CT_COMMENT",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ttype",
    "type" : "int",
    "comment" : "\n     * After a call to the {@code nextToken} method, this field\n     * contains the type of the token just read. For a single character\n     * token, its value is the single character, converted to an integer.\n     * For a quoted string token, its value is the quote character.\n     * Otherwise, its value is one of the following:\n     * <ul>\n     * <li>{@code TT_WORD} indicates that the token is a word.\n     * <li>{@code TT_NUMBER} indicates that the token is a number.\n     * <li>{@code TT_EOL} indicates that the end of line has been read.\n     *     The field can only have this value if the\n     *     {@code eolIsSignificant} method has been called with the\n     *     argument {@code true}.\n     * <li>{@code TT_EOF} indicates that the end of the input stream\n     *     has been reached.\n     * </ul>\n     * <p>\n     * The initial value of this field is -4.\n     *\n     * @see     java.io.StreamTokenizer#eolIsSignificant(boolean)\n     * @see     java.io.StreamTokenizer#nextToken()\n     * @see     java.io.StreamTokenizer#quoteChar(int)\n     * @see     java.io.StreamTokenizer#TT_EOF\n     * @see     java.io.StreamTokenizer#TT_EOL\n     * @see     java.io.StreamTokenizer#TT_NUMBER\n     * @see     java.io.StreamTokenizer#TT_WORD\n     ",
    "links" : [ ]
  }, {
    "name" : "TT_EOF",
    "type" : "int",
    "comment" : "\n     * A constant indicating that the end of the stream has been read.\n     ",
    "links" : [ ]
  }, {
    "name" : "TT_EOL",
    "type" : "int",
    "comment" : "\n     * A constant indicating that the end of the line has been read.\n     ",
    "links" : [ ]
  }, {
    "name" : "TT_NUMBER",
    "type" : "int",
    "comment" : "\n     * A constant indicating that a number token has been read.\n     ",
    "links" : [ ]
  }, {
    "name" : "TT_WORD",
    "type" : "int",
    "comment" : "\n     * A constant indicating that a word token has been read.\n     ",
    "links" : [ ]
  }, {
    "name" : "TT_NOTHING",
    "type" : "int",
    "comment" : " A constant indicating that no token has been read, used for\n     * initializing ttype.  FIXME This could be made public and\n     * made available as the part of the API in a future release.\n     ",
    "links" : [ ]
  }, {
    "name" : "sval",
    "type" : "String",
    "comment" : "\n     * If the current token is a word token, this field contains a\n     * string giving the characters of the word token. When the current\n     * token is a quoted string token, this field contains the body of\n     * the string.\n     * <p>\n     * The current token is a word when the value of the\n     * {@code ttype} field is {@code TT_WORD}. The current token is\n     * a quoted string token when the value of the {@code ttype} field is\n     * a quote character.\n     * <p>\n     * The initial value of this field is null.\n     *\n     * @see     java.io.StreamTokenizer#quoteChar(int)\n     * @see     java.io.StreamTokenizer#TT_WORD\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  }, {
    "name" : "nval",
    "type" : "double",
    "comment" : "\n     * If the current token is a number, this field contains the value\n     * of that number. The current token is a number when the value of\n     * the {@code ttype} field is {@code TT_NUMBER}.\n     * <p>\n     * The initial value of this field is 0.0.\n     *\n     * @see     java.io.StreamTokenizer#TT_NUMBER\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void resetSyntax()",
    "returnType" : "void",
    "comment" : "\n     * Resets this tokenizer's syntax table so that all characters are\n     * \"ordinary.\" See the {@code ordinaryChar} method\n     * for more information on a character being ordinary.\n     *\n     * @see     java.io.StreamTokenizer#ordinaryChar(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void wordChars(int low, int hi)",
    "returnType" : "void",
    "comment" : "\n     * Specifies that all characters <i>c</i> in the range\n     * <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n     * are word constituents. A word token consists of a word constituent\n     * followed by zero or more word constituents or number constituents.\n     *\n     * @param   low   the low end of the range.\n     * @param   hi    the high end of the range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void whitespaceChars(int low, int hi)",
    "returnType" : "void",
    "comment" : "\n     * Specifies that all characters <i>c</i> in the range\n     * <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n     * are white space characters. White space characters serve only to\n     * separate tokens in the input stream.\n     *\n     * <p>Any other attribute settings for the characters in the specified\n     * range are cleared.\n     *\n     * @param   low   the low end of the range.\n     * @param   hi    the high end of the range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ordinaryChars(int low, int hi)",
    "returnType" : "void",
    "comment" : "\n     * Specifies that all characters <i>c</i> in the range\n     * <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n     * are \"ordinary\" in this tokenizer. See the\n     * {@code ordinaryChar} method for more information on a\n     * character being ordinary.\n     *\n     * @param   low   the low end of the range.\n     * @param   hi    the high end of the range.\n     * @see     java.io.StreamTokenizer#ordinaryChar(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ordinaryChar(int ch)",
    "returnType" : "void",
    "comment" : "\n     * Specifies that the character argument is \"ordinary\"\n     * in this tokenizer. It removes any special significance the\n     * character has as a comment character, word component, string\n     * delimiter, white space, or number character. When such a character\n     * is encountered by the parser, the parser treats it as a\n     * single-character token and sets {@code ttype} field to the\n     * character value.\n     *\n     * <p>Making a line terminator character \"ordinary\" may interfere\n     * with the ability of a {@code StreamTokenizer} to count\n     * lines. The {@code lineno} method may no longer reflect\n     * the presence of such terminator characters in its line count.\n     *\n     * @param   ch   the character.\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  }, {
    "name" : "public void commentChar(int ch)",
    "returnType" : "void",
    "comment" : "\n     * Specified that the character argument starts a single-line\n     * comment. All characters from the comment character to the end of\n     * the line are ignored by this stream tokenizer.\n     *\n     * <p>Any other attribute settings for the specified character are cleared.\n     *\n     * @param   ch   the character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void quoteChar(int ch)",
    "returnType" : "void",
    "comment" : "\n     * Specifies that matching pairs of this character delimit string\n     * constants in this tokenizer.\n     * <p>\n     * When the {@code nextToken} method encounters a string\n     * constant, the {@code ttype} field is set to the string\n     * delimiter and the {@code sval} field is set to the body of\n     * the string.\n     * <p>\n     * If a string quote character is encountered, then a string is\n     * recognized, consisting of all characters after (but not including)\n     * the string quote character, up to (but not including) the next\n     * occurrence of that same string quote character, or a line\n     * terminator, or end of file. The usual escape sequences such as\n     * {@code \"\\u005Cn\"} and {@code \"\\u005Ct\"} are recognized and\n     * converted to single characters as the string is parsed.\n     *\n     * <p>Any other attribute settings for the specified character are cleared.\n     *\n     * @param   ch   the character.\n     * @see     java.io.StreamTokenizer#nextToken()\n     * @see     java.io.StreamTokenizer#sval\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parseNumbers()",
    "returnType" : "void",
    "comment" : "\n     * Specifies that numbers should be parsed by this tokenizer. The\n     * syntax table of this tokenizer is modified so that each of the twelve\n     * characters:\n     * <blockquote><pre>\n     *      0 1 2 3 4 5 6 7 8 9 . -\n     * </pre></blockquote>\n     * <p>\n     * has the \"numeric\" attribute.\n     * <p>\n     * When the parser encounters a word token that has the format of a\n     * double precision floating-point number, it treats the token as a\n     * number rather than a word, by setting the {@code ttype}\n     * field to the value {@code TT_NUMBER} and putting the numeric\n     * value of the token into the {@code nval} field.\n     *\n     * @see     java.io.StreamTokenizer#nval\n     * @see     java.io.StreamTokenizer#TT_NUMBER\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  }, {
    "name" : "public void eolIsSignificant(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether or not ends of line are treated as tokens.\n     * If the flag argument is true, this tokenizer treats end of lines\n     * as tokens; the {@code nextToken} method returns\n     * {@code TT_EOL} and also sets the {@code ttype} field to\n     * this value when an end of line is read.\n     * <p>\n     * A line is a sequence of characters ending with either a\n     * carriage-return character ({@code '\\u005Cr'}) or a newline\n     * character ({@code '\\u005Cn'}). In addition, a carriage-return\n     * character followed immediately by a newline character is treated\n     * as a single end-of-line token.\n     * <p>\n     * If the {@code flag} is false, end-of-line characters are\n     * treated as white space and serve only to separate tokens.\n     *\n     * @param   flag   {@code true} indicates that end-of-line characters\n     *                 are separate tokens; {@code false} indicates that\n     *                 end-of-line characters are white space.\n     * @see     java.io.StreamTokenizer#nextToken()\n     * @see     java.io.StreamTokenizer#ttype\n     * @see     java.io.StreamTokenizer#TT_EOL\n     ",
    "links" : [ ]
  }, {
    "name" : "public void slashStarComments(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether or not the tokenizer recognizes C-style comments.\n     * If the flag argument is {@code true}, this stream tokenizer\n     * recognizes C-style comments. All text between successive\n     * occurrences of {@code /*} and <code>*&#47;</code> are discarded.\n     * <p>\n     * If the flag argument is {@code false}, then C-style comments\n     * are not treated specially.\n     *\n     * @param   flag   {@code true} indicates to recognize and ignore\n     *                 C-style comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void slashSlashComments(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether or not the tokenizer recognizes C++-style comments.\n     * If the flag argument is {@code true}, this stream tokenizer\n     * recognizes C++-style comments. Any occurrence of two consecutive\n     * slash characters ({@code '/'}) is treated as the beginning of\n     * a comment that extends to the end of the line.\n     * <p>\n     * If the flag argument is {@code false}, then C++-style\n     * comments are not treated specially.\n     *\n     * @param   flag   {@code true} indicates to recognize and ignore\n     *                 C++-style comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void lowerCaseMode(boolean fl)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether or not word token are automatically lowercased.\n     * If the flag argument is {@code true}, then the value in the\n     * {@code sval} field is lowercased whenever a word token is\n     * returned (the {@code ttype} field has the\n     * value {@code TT_WORD} by the {@code nextToken} method\n     * of this tokenizer.\n     * <p>\n     * If the flag argument is {@code false}, then the\n     * {@code sval} field is not modified.\n     *\n     * @param   fl   {@code true} indicates that all word tokens should\n     *               be lowercased.\n     * @see     java.io.StreamTokenizer#nextToken()\n     * @see     java.io.StreamTokenizer#ttype\n     * @see     java.io.StreamTokenizer#TT_WORD\n     ",
    "links" : [ ]
  }, {
    "name" : "private int read() throws IOException",
    "returnType" : "int",
    "comment" : " Read the next character ",
    "links" : [ ]
  }, {
    "name" : "public int nextToken() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Parses the next token from the input stream of this tokenizer.\n     * The type of the next token is returned in the {@code ttype}\n     * field. Additional information about the token may be in the\n     * {@code nval} field or the {@code sval} field of this\n     * tokenizer.\n     * <p>\n     * Typical clients of this\n     * class first set up the syntax tables and then sit in a loop\n     * calling nextToken to parse successive tokens until TT_EOF\n     * is returned.\n     *\n     * @return     the value of the {@code ttype} field.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.StreamTokenizer#nval\n     * @see        java.io.StreamTokenizer#sval\n     * @see        java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pushBack()",
    "returnType" : "void",
    "comment" : "\n     * Causes the next call to the {@code nextToken} method of this\n     * tokenizer to return the current value in the {@code ttype}\n     * field, and not to modify the value in the {@code nval} or\n     * {@code sval} field.\n     *\n     * @see     java.io.StreamTokenizer#nextToken()\n     * @see     java.io.StreamTokenizer#nval\n     * @see     java.io.StreamTokenizer#sval\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lineno()",
    "returnType" : "int",
    "comment" : "\n     * Return the current line number.\n     *\n     * @return  the current line number of this stream tokenizer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of the current stream token and\n     * the line number it occurs on.\n     *\n     * <p>The precise string returned is unspecified, although the following\n     * example can be considered typical:\n     *\n     * <blockquote><pre>Token['a'], line 10</pre></blockquote>\n     *\n     * @return  a string representation of the token\n     * @see     java.io.StreamTokenizer#nval\n     * @see     java.io.StreamTokenizer#sval\n     * @see     java.io.StreamTokenizer#ttype\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void resetSyntax()", "public void wordChars(int low, int hi)", "public void whitespaceChars(int low, int hi)", "public void ordinaryChars(int low, int hi)", "public void ordinaryChar(int ch)", "public void commentChar(int ch)", "public void quoteChar(int ch)", "public void parseNumbers()", "public void eolIsSignificant(boolean flag)", "public void slashStarComments(boolean flag)", "public void slashSlashComments(boolean flag)", "public void lowerCaseMode(boolean fl)", "private int read() throws IOException", "public int nextToken() throws IOException", "public void pushBack()", "public int lineno()", "public String toString()" ],
  "variableNames" : [ "reader", "input", "buf", "peekc", "NEED_CHAR", "SKIP_LF", "pushedBack", "forceLower", "LINENO", "eolIsSignificantP", "slashSlashCommentsP", "slashStarCommentsP", "ctype", "CT_WHITESPACE", "CT_DIGIT", "CT_ALPHA", "CT_QUOTE", "CT_COMMENT", "ttype", "TT_EOF", "TT_EOL", "TT_NUMBER", "TT_WORD", "TT_NOTHING", "sval", "nval" ]
}