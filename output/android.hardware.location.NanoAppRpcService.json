{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/location/NanoAppRpcService.java",
  "packageName" : "android.hardware.location",
  "className" : "NanoAppRpcService",
  "comment" : "\n * An RPC service published by a nanoapp.\n *\n * This class is meant to be informational and allows a nanoapp client to know if a given\n * nanoapp publishes a service which supports an RPC interface. The implementation of the RPC\n * interface is not specified by the Android APIs and is built by the platform implementation\n * over the message payloads transferred through the {@link ContextHubClient}.\n *\n * This class is instantiated as a part of {@link NanoAppState}, which is provided as a result\n * of {@link ContextHubManager.queryNanoApps(ContextHubInfo)}.\n *\n * See the chrePublishRpcServices() API for how this service is published by the nanoapp.\n *\n * @hide\n ",
  "links" : [ "ContextHubManager.queryNanoApps(ContextHubInfo)", "android.hardware.location.NanoAppState", "android.hardware.location.ContextHubClient" ],
  "variables" : [ {
    "name" : "mServiceId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NanoAppRpcService>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getId()",
    "returnType" : "long",
    "comment" : "\n     * The unique 64-bit ID of an RPC service published by a nanoapp. Note that\n     * the uniqueness is only required within the nanoapp's domain (i.e. the\n     * combination of the nanoapp ID and service id must be unique).\n     *\n     * This ID must remain the same for the given nanoapp RPC service once\n     * published on Android (i.e. must never change).\n     *\n     * @return The service ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * The software version of this service, which follows the sematic\n     * versioning scheme (see semver.org). It follows the format\n     * major.minor.patch, where major and minor versions take up one byte\n     * each, and the patch version takes up the final 2 (lower) bytes.\n     * I.e. the version is encoded as 0xMMmmpppp, where MM, mm, pppp are\n     * the major, minor, patch versions, respectively.\n     *\n     * @return The service version.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getMajorVersion()",
    "returnType" : "int",
    "comment" : "\n     * @return The service's major version.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getMinorVersion()",
    "returnType" : "int",
    "comment" : "\n     * @return The service's minor version.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getPatchVersion()",
    "returnType" : "int",
    "comment" : "\n     * @return The service's patch version.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getId()", "public int getVersion()", "private int getMajorVersion()", "private int getMinorVersion()", "private int getPatchVersion()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public String toString()", "public boolean equals(@Nullable Object object)", "public int hashCode()" ],
  "variableNames" : [ "mServiceId", "mServiceVersion", "CREATOR" ]
}