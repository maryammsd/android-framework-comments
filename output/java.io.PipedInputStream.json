{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PipedInputStream.java",
  "packageName" : "java.io",
  "className" : "PipedInputStream",
  "comment" : "\n * A piped input stream should be connected\n * to a piped output stream; the piped  input\n * stream then provides whatever data bytes\n * are written to the piped output  stream.\n * Typically, data is read from a <code>PipedInputStream</code>\n * object by one thread  and data is written\n * to the corresponding <code>PipedOutputStream</code>\n * by some  other thread. Attempting to use\n * both objects from a single thread is not\n * recommended, as it may deadlock the thread.\n * The piped input stream contains a buffer,\n * decoupling read operations from write operations,\n * within limits.\n * A pipe is said to be <a id=\"BROKEN\"> <i>broken</i> </a> if a\n * thread that was providing data bytes to the connected\n * piped output stream is no longer alive.\n *\n * @author  James Gosling\n * @see     java.io.PipedOutputStream\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "closedByWriter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closedByReader",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readSide",
    "type" : "Thread",
    "comment" : " REMIND: identification of the read and write sides needs to be\n           more sophisticated.  Either using thread groups (but what about\n           pipes within a thread?) or using finalization (but it may be a\n           long time until the next GC). ",
    "links" : [ ]
  }, {
    "name" : "writeSide",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PIPE_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PIPE_SIZE",
    "type" : "int",
    "comment" : " for backward compatibility.",
    "links" : [ ]
  }, {
    "name" : "buffer",
    "type" : "byte[]",
    "comment" : "\n     * The circular buffer into which incoming data is placed.\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "in",
    "type" : "int",
    "comment" : "\n     * The index of the position in the circular buffer at which the\n     * next byte of data will be stored when received from the connected\n     * piped output stream. <code>in&lt;0</code> implies the buffer is empty,\n     * <code>in==out</code> implies the buffer is full\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "out",
    "type" : "int",
    "comment" : "\n     * The index of the position in the circular buffer at which the next\n     * byte of data will be read by this piped input stream.\n     * @since   1.1\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initPipe(int pipeSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(PipedOutputStream src) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Causes this piped input stream to be connected\n     * to the piped  output stream <code>src</code>.\n     * If this object is already connected to some\n     * other piped output  stream, an <code>IOException</code>\n     * is thrown.\n     * <p>\n     * If <code>src</code> is an\n     * unconnected piped output stream and <code>snk</code>\n     * is an unconnected piped input stream, they\n     * may be connected by either the call:\n     *\n     * <pre><code>snk.connect(src)</code> </pre>\n     * <p>\n     * or the call:\n     *\n     * <pre><code>src.connect(snk)</code> </pre>\n     * <p>\n     * The two calls have the same effect.\n     *\n     * @param      src   The piped output stream to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void receive(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receives a byte of data.  This method will block if no input is\n     * available.\n     * @param b the byte being received\n     * @exception IOException If the pipe is <a href=\"#BROKEN\"> <code>broken</code></a>,\n     *          {@link #connect(java.io.PipedOutputStream) unconnected},\n     *          closed, or if an I/O error occurs.\n     * @since     1.1\n     ",
    "links" : [ "#connect(java.io.PipedOutputStream)" ]
  }, {
    "name" : " synchronized void receive(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receives data into an array of bytes.  This method will\n     * block until some input is available.\n     * @param b the buffer into which the data is received\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes received\n     * @exception IOException If the pipe is <a href=\"#BROKEN\"> broken</a>,\n     *           {@link #connect(java.io.PipedOutputStream) unconnected},\n     *           closed,or if an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedOutputStream)" ]
  }, {
    "name" : "private void checkStateForReceive() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void awaitSpace() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void receivedLast()",
    "returnType" : "void",
    "comment" : "\n     * Notifies all waiting threads that the last byte of data has been\n     * received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this piped input stream. The\n     * value byte is returned as an <code>int</code> in the range\n     * <code>0</code> to <code>255</code>.\n     * This method blocks until input data is available, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next byte of data, or <code>-1</code> if the end of the\n     *             stream is reached.\n     * @exception  IOException  if the pipe is\n     *           {@link #connect(java.io.PipedOutputStream) unconnected},\n     *           <a href=\"#BROKEN\"> <code>broken</code></a>, closed,\n     *           or if an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedOutputStream)" ]
  }, {
    "name" : "public synchronized int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from this piped input\n     * stream into an array of bytes. Less than <code>len</code> bytes\n     * will be read if the end of the data stream is reached or if\n     * <code>len</code> exceeds the pipe's buffer size.\n     * If <code>len </code> is zero, then no bytes are read and 0 is returned;\n     * otherwise, the method blocks until at least 1 byte of input is\n     * available, end of the stream has been detected, or an exception is\n     * thrown.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array <code>b</code>\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  NullPointerException If <code>b</code> is <code>null</code>.\n     * @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n     * <code>len</code> is negative, or <code>len</code> is greater than\n     * <code>b.length - off</code>\n     * @exception  IOException if the pipe is <a href=\"#BROKEN\"> <code>broken</code></a>,\n     *           {@link #connect(java.io.PipedOutputStream) unconnected},\n     *           closed, or if an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedOutputStream)" ]
  }, {
    "name" : "public synchronized int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read from this input\n     * stream without blocking.\n     *\n     * @return the number of bytes that can be read from this input stream\n     *         without blocking, or {@code 0} if this input stream has been\n     *         closed by invoking its {@link #close()} method, or if the pipe\n     *         is {@link #connect(java.io.PipedOutputStream) unconnected}, or\n     *          <a href=\"#BROKEN\"> <code>broken</code></a>.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @since   1.0.2\n     ",
    "links" : [ "#connect(java.io.PipedOutputStream)", "#close()" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this piped input stream and releases any system resources\n     * associated with the stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initPipe(int pipeSize)", "public void connect(PipedOutputStream src) throws IOException", "protected synchronized void receive(int b) throws IOException", " synchronized void receive(byte[] b, int off, int len) throws IOException", "private void checkStateForReceive() throws IOException", "private void awaitSpace() throws IOException", " synchronized void receivedLast()", "public synchronized int read() throws IOException", "public synchronized int read(byte[] b, int off, int len) throws IOException", "public synchronized int available() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "closedByWriter", "closedByReader", "connected", "readSide", "writeSide", "DEFAULT_PIPE_SIZE", "PIPE_SIZE", "buffer", "in", "out" ]
}