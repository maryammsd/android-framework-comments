{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/PropertyResourceBundle.java",
  "packageName" : "java.util",
  "className" : "PropertyResourceBundle",
  "comment" : "\n * {@code PropertyResourceBundle} is a concrete subclass of\n * {@code ResourceBundle} that manages resources for a locale\n * using a set of static strings from a property file. See\n * {@link ResourceBundle ResourceBundle} for more information about resource\n * bundles.\n *\n * <p>\n * Unlike other types of resource bundle, you don't subclass\n * {@code PropertyResourceBundle}.  Instead, you supply properties\n * files containing the resource data.  {@code ResourceBundle.getBundle}\n * will automatically look for the appropriate properties file and create a\n * {@code PropertyResourceBundle} that refers to it. See\n * {@link ResourceBundle#getBundle(String, Locale, ClassLoader) ResourceBundle.getBundle}\n * for a complete description of the search and instantiation strategy.\n *\n * <p>\n * The following <a id=\"sample\">example</a> shows a member of a resource\n * bundle family with the base name \"MyResources\".\n * The text defines the bundle \"MyResources_de\",\n * the German member of the bundle family.\n * This member is based on {@code PropertyResourceBundle}, and the text\n * therefore is the content of the file \"MyResources_de.properties\"\n * (a related <a href=\"ListResourceBundle.html#sample\">example</a> shows\n * how you can add bundles to this family that are implemented as subclasses\n * of {@code ListResourceBundle}).\n * The keys in this example are of the form \"s1\" etc. The actual\n * keys are entirely up to your choice, so long as they are the same as\n * the keys you use in your program to retrieve the objects from the bundle.\n * Keys are case-sensitive.\n * <blockquote>\n * <pre>\n * # MessageFormat pattern\n * s1=Die Platte \\\"{1}\\\" enth&auml;lt {0}.\n *\n * # location of {0} in pattern\n * s2=1\n *\n * # sample disk name\n * s3=Meine Platte\n *\n * # first ChoiceFormat choice\n * s4=keine Dateien\n *\n * # second ChoiceFormat choice\n * s5=eine Datei\n *\n * # third ChoiceFormat choice\n * s6={0,number} Dateien\n *\n * # sample date\n * s7=3. M&auml;rz 1996\n * </pre>\n * </blockquote>\n *\n <!-- Android-removed: we're sticking to old behaviour for now.\n * @apiNote\n * {@code PropertyResourceBundle} can be constructed either\n * from an {@code InputStream} or a {@code Reader}, which represents a property file.\n * Constructing a {@code PropertyResourceBundle} instance from an {@code InputStream}\n * requires that the input stream be encoded in {@code UTF-8}. By default, if a\n * {@link java.nio.charset.MalformedInputException} or an\n * {@link java.nio.charset.UnmappableCharacterException} occurs on reading the\n * input stream, then the {@code PropertyResourceBundle} instance resets to the state\n * before the exception, re-reads the input stream in {@code ISO-8859-1}, and\n * continues reading. If the system property\n * {@systemProperty java.util.PropertyResourceBundle.encoding} is set to either\n * \"ISO-8859-1\" or \"UTF-8\", the input stream is solely read in that encoding,\n * and throws the exception if it encounters an invalid sequence.\n * If \"ISO-8859-1\" is specified, characters that cannot be represented in\n * ISO-8859-1 encoding must be represented by Unicode Escapes as defined in section\n * {@jls 3.3} of <cite>The Java Language Specification</cite>\n * whereas the other constructor which takes a {@code Reader} does not have that limitation.\n * Other encoding values are ignored for this system property.\n * The system property is read and evaluated when initializing this class.\n * Changing or removing the property has no effect after the initialization.\n * --/>\n * @implSpec\n * The implementation of a {@code PropertyResourceBundle} subclass must be\n * thread-safe if it's simultaneously used by multiple threads. The default\n * implementations of the non-abstract methods in this class are thread-safe.\n *\n * @see ResourceBundle\n * @see ListResourceBundle\n * @see Properties\n * @since 1.1\n ",
  "links" : [ "java.util.ResourceBundle", "java.util.ResourceBundle#getBundle(String", "java.nio.charset.MalformedInputException", "java.nio.charset.UnmappableCharacterException" ],
  "variables" : [ {
    "name" : "encoding",
    "type" : "String",
    "comment" : " The possible encoding is either \"ISO-8859-1\" or \"UTF-8\".",
    "links" : [ ]
  }, {
    "name" : "lookup",
    "type" : "Map<String, Object>",
    "comment" : " ==================privates====================",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object handleGetObject(String key)",
    "returnType" : "Object",
    "comment" : " Implements java.util.ResourceBundle.handleGetObject; inherits javadoc specification.",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getKeys()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an {@code Enumeration} of the keys contained in\n     * this {@code ResourceBundle} and its parent bundles.\n     *\n     * @return an {@code Enumeration} of the keys contained in\n     *         this {@code ResourceBundle} and its parent bundles.\n     * @see #keySet()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Set<String> handleKeySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a {@code Set} of the keys contained\n     * <em>only</em> in this {@code ResourceBundle}.\n     *\n     * @return a {@code Set} of the keys contained only in this\n     *         {@code ResourceBundle}\n     * @since 1.6\n     * @see #keySet()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object handleGetObject(String key)", "public Enumeration<String> getKeys()", "protected Set<String> handleKeySet()" ],
  "variableNames" : [ "encoding", "lookup" ]
}