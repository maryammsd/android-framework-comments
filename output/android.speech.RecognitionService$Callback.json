{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/RecognitionService.java",
  "packageName" : "android.speech",
  "className" : "Callback",
  "comment" : "\n     * This class receives callbacks from the speech recognition service and forwards them to the\n     * user. An instance of this class is passed to the\n     * {@link RecognitionService#onStartListening(Intent, Callback)} method. Recognizers may call\n     * these methods on any thread.\n     ",
  "links" : [ "android.speech.RecognitionService#onStartListening(Intent" ],
  "variables" : [ {
    "name" : "mListener",
    "type" : "IRecognitionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionContextCreated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void beginningOfSpeech() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the user has started to speak.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bufferReceived(byte[] buffer) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when sound has been received. The purpose of this\n         * function is to allow giving feedback to the user regarding the captured audio.\n         *\n         * @param buffer a buffer containing a sequence of big-endian 16-bit integers representing a\n         *        single channel audio stream. The sample rate is implementation dependent.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void endOfSpeech() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method after the user stops speaking.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void error(@SpeechRecognizer.RecognitionError int error) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when a network or recognition error occurred.\n         *\n         * @param error code is defined in {@link SpeechRecognizer}\n         ",
    "links" : [ "android.speech.SpeechRecognizer" ]
  }, {
    "name" : "public void partialResults(Bundle partialResults) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when partial recognition results are available. This\n         * method can be called at any time between {@link #beginningOfSpeech()} and\n         * {@link #results(Bundle)} when partial results are ready. This method may be called zero,\n         * one or multiple times for each call to {@link SpeechRecognizer#startListening(Intent)},\n         * depending on the speech recognition service implementation.\n         *\n         * @param partialResults the returned results. To retrieve the results in\n         *        ArrayList&lt;String&gt; format use {@link Bundle#getStringArrayList(String)} with\n         *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n         ",
    "links" : [ "#results(Bundle)", "#beginningOfSpeech()", "android.speech.SpeechRecognizer#startListening(Intent)", "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#RESULTS_RECOGNITION" ]
  }, {
    "name" : "public void readyForSpeech(Bundle params) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the endpointer is ready for the user to start\n         * speaking.\n         *\n         * @param params parameters set by the recognition service. Reserved for future use.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void results(Bundle results) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when recognition results are ready.\n         *\n         * @param results the recognition results. To retrieve the results in {@code\n         *        ArrayList<String>} format use {@link Bundle#getStringArrayList(String)} with\n         *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n         ",
    "links" : [ "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#RESULTS_RECOGNITION" ]
  }, {
    "name" : "public void rmsChanged(float rmsdB) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the sound level in the audio stream has changed.\n         * There is no guarantee that this method will be called.\n         *\n         * @param rmsdB the new RMS dB value\n         ",
    "links" : [ ]
  }, {
    "name" : "public void segmentResults(@NonNull Bundle results) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method for each ready segment of a long recognition session.\n         *\n         * @param results the recognition results. To retrieve the results in {@code\n         *        ArrayList<String>} format use {@link Bundle#getStringArrayList(String)} with\n         *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n         ",
    "links" : [ "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#RESULTS_RECOGNITION" ]
  }, {
    "name" : "public void endOfSegmentedSession() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method to end a segmented session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void languageDetection(@NonNull Bundle results)",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the language detection (and switching)\n         * results are available. This method can be called on any number of occasions\n         * at any time between {@link #beginningOfSpeech()} and {@link #endOfSpeech()},\n         * depending on the speech recognition service implementation.\n         *\n         * @param results the returned language detection (and switching) results.\n         *        <p> To retrieve the most confidently detected language IETF tag\n         *        (as defined by BCP 47, e.g., \"en-US\", \"de-DE\"),\n         *        use {@link Bundle#getString(String)}\n         *        with {@link SpeechRecognizer#DETECTED_LANGUAGE} as the parameter.\n         *        <p> To retrieve the language detection confidence level represented by a value\n         *        prefixed by {@code LANGUAGE_DETECTION_CONFIDENCE_LEVEL_} defined in\n         *        {@link SpeechRecognizer}, use {@link Bundle#getInt(String)} with\n         *        {@link SpeechRecognizer#LANGUAGE_DETECTION_CONFIDENCE_LEVEL} as the parameter.\n         *        <p> To retrieve the alternative locales for the same language\n         *        retrieved by the key {@link SpeechRecognizer#DETECTED_LANGUAGE},\n         *        use {@link Bundle#getStringArrayList(String)}\n         *        with {@link SpeechRecognizer#TOP_LOCALE_ALTERNATIVES} as the parameter.\n         *        <p> To retrieve the language switching results represented by a value\n         *        prefixed by {@code LANGUAGE_SWITCH_RESULT_}\n         *        and defined in {@link SpeechRecognizer}, use {@link Bundle#getInt(String)}\n         *        with {@link SpeechRecognizer#LANGUAGE_SWITCH_RESULT} as the parameter.\n         ",
    "links" : [ "android.os.Bundle#getString(String)", "android.speech.SpeechRecognizer", "#beginningOfSpeech()", "android.speech.SpeechRecognizer#DETECTED_LANGUAGE", "android.speech.SpeechRecognizer#TOP_LOCALE_ALTERNATIVES", "android.speech.SpeechRecognizer#LANGUAGE_DETECTION_CONFIDENCE_LEVEL", "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#LANGUAGE_SWITCH_RESULT", "android.os.Bundle#getInt(String)", "#endOfSpeech()" ]
  }, {
    "name" : "public int getCallingUid()",
    "returnType" : "int",
    "comment" : "\n         * Return the Linux uid assigned to the process that sent you the current transaction that\n         * is being processed. This is obtained from {@link Binder#getCallingUid()}.\n         ",
    "links" : [ "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public AttributionSource getCallingAttributionSource()",
    "returnType" : "AttributionSource",
    "comment" : "\n         * Gets the permission identity of the calling app. If you want to attribute\n         * the mic access to the calling app you can create an attribution context\n         * via {@link android.content.Context#createContext(android.content.ContextParams)}\n         * and passing this identity to {@link\n         * android.content.ContextParams.Builder#setNextAttributionSource(AttributionSource)}.\n         *\n         * @return The permission identity of the calling app.\n         *\n         * @see android.content.ContextParams.Builder#setNextAttributionSource(\n         * AttributionSource)\n         ",
    "links" : [ "android.content.ContextParams.Builder#setNextAttributionSource(AttributionSource)", "android.content.Context#createContext(android.content.ContextParams)" ]
  }, {
    "name" : " Context getAttributionContextForCaller()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void beginningOfSpeech() throws RemoteException", "public void bufferReceived(byte[] buffer) throws RemoteException", "public void endOfSpeech() throws RemoteException", "public void error(@SpeechRecognizer.RecognitionError int error) throws RemoteException", "public void partialResults(Bundle partialResults) throws RemoteException", "public void readyForSpeech(Bundle params) throws RemoteException", "public void results(Bundle results) throws RemoteException", "public void rmsChanged(float rmsdB) throws RemoteException", "public void segmentResults(@NonNull Bundle results) throws RemoteException", "public void endOfSegmentedSession() throws RemoteException", "public void languageDetection(@NonNull Bundle results)", "public int getCallingUid()", "public AttributionSource getCallingAttributionSource()", " Context getAttributionContextForCaller()" ],
  "variableNames" : [ "mListener", "mCallingAttributionSource", "mAttributionContext", "mAttributionContextCreated" ]
}