{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Parameter.java",
  "packageName" : "java.lang.reflect",
  "className" : "Parameter",
  "comment" : "\n * Information about method parameters.\n *\n * A {@code Parameter} provides information about method parameters,\n * including its name and modifiers.  It also provides an alternate\n * means of obtaining attributes for the parameter.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "modifiers",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "executable",
    "type" : "Executable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parameterTypeCache",
    "type" : "Type",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parameterClassCache",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares based on the executable and the index.\n     *\n     * @param obj The object to compare.\n     * @return Whether or not this is equal to the argument.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code based on the executable's hash code and the\n     * index.\n     *\n     * @return A hash code based on the executable's hash code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNamePresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the parameter has a name; returns false otherwise.\n     * Whether a parameter has a name is determined by compiler options\n     * and whether the parameter is synthesized.\n     *\n     * @return true if and only if the parameter has a name\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this parameter.  The format is the\n     * modifiers for the parameter, if any, in canonical order as\n     * recommended by <cite>The Java&trade; Language\n     * Specification</cite>, followed by the fully- qualified type of\n     * the parameter (excluding the last [] if the parameter is\n     * variable arity), followed by \"...\" if the parameter is variable\n     * arity, followed by a space, followed by the name of the\n     * parameter.\n     *\n     * @return A string representation of the parameter and associated\n     * information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Executable getDeclaringExecutable()",
    "returnType" : "Executable",
    "comment" : "\n     * Return the {@code Executable} which declares this parameter.\n     *\n     * @return The {@code Executable} declaring this parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Get the modifier flags for this the parameter represented by\n     * this {@code Parameter} object.\n     *\n     * @return The modifier flags for this parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the parameter.  If the parameter's name is\n     * {@linkplain #isNamePresent() present}, then this method returns\n     * the name provided by the class file. Otherwise, this method\n     * synthesizes a name of the form argN, where N is the index of\n     * the parameter in the descriptor of the method which declares\n     * the parameter.\n     *\n     * @return The name of the parameter, either provided by the class\n     *         file or synthesized if the class file does not provide\n     *         a name.\n     ",
    "links" : [ ]
  }, {
    "name" : " String getRealName()",
    "returnType" : "String",
    "comment" : " Package-private accessor to the real name field.",
    "links" : [ ]
  }, {
    "name" : "public Type getParameterizedType()",
    "returnType" : "Type",
    "comment" : "\n     * Returns a {@code Type} object that identifies the parameterized\n     * type for the parameter represented by this {@code Parameter}\n     * object.\n     *\n     * @return a {@code Type} object identifying the parameterized\n     * type of the parameter represented by this object\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getType()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns a {@code Class} object that identifies the\n     * declared type for the parameter represented by this\n     * {@code Parameter} object.\n     *\n     * @return a {@code Class} object identifying the declared\n     * type of the parameter represented by this object\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImplicit()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this parameter is implicitly declared\n     * in source code; returns {@code false} otherwise.\n     *\n     * @return true if and only if this parameter is implicitly\n     * declared as defined by <cite>The Java&trade; Language\n     * Specification</cite>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSynthetic()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this parameter is neither implicitly\n     * nor explicitly declared in source code; returns {@code false}\n     * otherwise.\n     *\n     * @jls 13.1 The Form of a Binary\n     * @return true if and only if this parameter is a synthetic\n     * construct as defined by\n     * <cite>The Java&trade; Language Specification</cite>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVarArgs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this parameter represents a variable\n     * argument list; returns {@code false} otherwise.\n     *\n     * @return {@code true} if an only if this parameter represents a\n     * variable argument list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native A getAnnotationNative(Executable executable, int parameterIndex, Class<A> annotationType)",
    "returnType" : "A",
    "comment" : " Android-added: getAnnotation(Class) Uses native code to obtain annotation information.",
    "links" : [ ]
  }, {
    "name" : "public T[] getAnnotationsByType(Class<T> annotationClass)",
    "returnType" : "T[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getDeclaredAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] getDeclaredAnnotationsByType(Class<T> annotationClass)",
    "returnType" : "T[]",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object obj)", "public int hashCode()", "public boolean isNamePresent()", "public String toString()", "public Executable getDeclaringExecutable()", "public int getModifiers()", "public String getName()", " String getRealName()", "public Type getParameterizedType()", "public Class<?> getType()", "public boolean isImplicit()", "public boolean isSynthetic()", "public boolean isVarArgs()", "public T getAnnotation(Class<T> annotationClass)", "private static native A getAnnotationNative(Executable executable, int parameterIndex, Class<A> annotationType)", "public T[] getAnnotationsByType(Class<T> annotationClass)", "public Annotation[] getDeclaredAnnotations()", "public T getDeclaredAnnotation(Class<T> annotationClass)", "public T[] getDeclaredAnnotationsByType(Class<T> annotationClass)", "public Annotation[] getAnnotations()" ],
  "variableNames" : [ "name", "modifiers", "executable", "index", "parameterTypeCache", "parameterClassCache" ]
}