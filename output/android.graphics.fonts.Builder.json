{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/fonts/Font.java",
  "packageName" : "android.graphics.fonts",
  "className" : "Builder",
  "comment" : "\n     * A builder class for creating new Font.\n     ",
  "variables" : [ {
    "name" : "sFontRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuffer",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocaleList",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItalic",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTtcIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAxes",
    "type" : "FontVariationAxis[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mException",
    "type" : "IOException",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ByteBuffer createBuffer(@NonNull AssetManager am, @NonNull String path, boolean isAsset, int cookie) throws IOException",
    "returnType" : "ByteBuffer",
    "comment" : "\n         * Creates a buffer containing font data using the assetManager and other\n         * provided inputs.\n         *\n         * @param am the application's asset manager\n         * @param path the file name of the font data in the asset directory\n         * @param isAsset true if the undelying data is in asset\n         * @param cookie set asset cookie\n         * @return buffer containing the contents of the file\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setWeight(@IntRange(from = FontStyle.FONT_WEIGHT_MIN, to = FontStyle.FONT_WEIGHT_MAX) int weight)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets weight of the font.\n         *\n         * Tells the system the weight of the given font. If this function is not called, the system\n         * will resolve the weight value by reading font tables.\n         *\n         * Here are pairs of the common names and their values.\n         * <p>\n         *  <table>\n         *  <thead>\n         *  <tr>\n         *  <th align=\"center\">Value</th>\n         *  <th align=\"center\">Name</th>\n         *  <th align=\"center\">Android Definition</th>\n         *  </tr>\n         *  </thead>\n         *  <tbody>\n         *  <tr>\n         *  <td align=\"center\">100</td>\n         *  <td align=\"center\">Thin</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_THIN}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">200</td>\n         *  <td align=\"center\">Extra Light (Ultra Light)</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_EXTRA_LIGHT}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">300</td>\n         *  <td align=\"center\">Light</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_LIGHT}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">400</td>\n         *  <td align=\"center\">Normal (Regular)</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_NORMAL}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">500</td>\n         *  <td align=\"center\">Medium</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_MEDIUM}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">600</td>\n         *  <td align=\"center\">Semi Bold (Demi Bold)</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_SEMI_BOLD}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">700</td>\n         *  <td align=\"center\">Bold</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_BOLD}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">800</td>\n         *  <td align=\"center\">Extra Bold (Ultra Bold)</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_EXTRA_BOLD}</td>\n         *  </tr>\n         *  <tr>\n         *  <td align=\"center\">900</td>\n         *  <td align=\"center\">Black (Heavy)</td>\n         *  <td align=\"center\">{@link FontStyle#FONT_WEIGHT_BLACK}</td>\n         *  </tr>\n         *  </tbody>\n         * </p>\n         *\n         * @see FontStyle#FONT_WEIGHT_THIN\n         * @see FontStyle#FONT_WEIGHT_EXTRA_LIGHT\n         * @see FontStyle#FONT_WEIGHT_LIGHT\n         * @see FontStyle#FONT_WEIGHT_NORMAL\n         * @see FontStyle#FONT_WEIGHT_MEDIUM\n         * @see FontStyle#FONT_WEIGHT_SEMI_BOLD\n         * @see FontStyle#FONT_WEIGHT_BOLD\n         * @see FontStyle#FONT_WEIGHT_EXTRA_BOLD\n         * @see FontStyle#FONT_WEIGHT_BLACK\n         * @param weight a weight value\n         * @return this builder\n         ",
    "links" : [ "android.graphics.fonts.FontStyle#FONT_WEIGHT_LIGHT", "android.graphics.fonts.FontStyle#FONT_WEIGHT_NORMAL", "android.graphics.fonts.FontStyle#FONT_WEIGHT_THIN", "android.graphics.fonts.FontStyle#FONT_WEIGHT_EXTRA_LIGHT", "android.graphics.fonts.FontStyle#FONT_WEIGHT_SEMI_BOLD", "android.graphics.fonts.FontStyle#FONT_WEIGHT_EXTRA_BOLD", "android.graphics.fonts.FontStyle#FONT_WEIGHT_BOLD", "android.graphics.fonts.FontStyle#FONT_WEIGHT_MEDIUM", "android.graphics.fonts.FontStyle#FONT_WEIGHT_BLACK" ]
  }, {
    "name" : "public Builder setSlant(@FontStyle.FontSlant int slant)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets italic information of the font.\n         *\n         * Tells the system the style of the given font. If this function is not called, the system\n         * will resolve the style by reading font tables.\n         *\n         * For example, if you want to use italic font as upright font, call {@code\n         * setSlant(FontStyle.FONT_SLANT_UPRIGHT)} explicitly.\n         *\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTtcIndex(@IntRange(from = 0) int ttcIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an index of the font collection. See {@link android.R.attr#ttcIndex}.\n         *\n         * @param ttcIndex An index of the font collection. If the font source is not font\n         *                 collection, do not call this method or specify 0.\n         * @return this builder\n         ",
    "links" : [ "android.R.attr#ttcIndex" ]
  }, {
    "name" : "public Builder setFontVariationSettings(@Nullable String variationSettings)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the font variation settings.\n         *\n         * @param variationSettings see {@link FontVariationAxis#fromFontVariationSettings(String)}\n         * @return this builder\n         * @throws IllegalArgumentException If given string is not a valid font variation settings\n         *                                  format.\n         ",
    "links" : [ "android.graphics.fonts.FontVariationAxis#fromFontVariationSettings(String)" ]
  }, {
    "name" : "public Builder setFontVariationSettings(@Nullable FontVariationAxis[] axes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the font variation settings.\n         *\n         * @param axes an array of font variation axis tag-value pairs\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Font build() throws IOException",
    "returnType" : "Font",
    "comment" : "\n         * Creates the font based on the configured values.\n         * @return the Font object\n         ",
    "links" : [ ]
  }, {
    "name" : "private static native long nInitBuilder()",
    "returnType" : "long",
    "comment" : "\n         * Native methods for creating Font\n         ",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddAxis(long builderPtr, int tag, float value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nBuild(long builderPtr, @NonNull ByteBuffer buffer, @NonNull String filePath, int weight, boolean italic, int ttcIndex)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetReleaseNativeFont()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sFontRegistry", "mBuffer", "mFile", "mLocaleList", "mWeight", "mItalic", "mTtcIndex", "mAxes", "mException" ],
  "methodNames" : [ "public static ByteBuffer createBuffer(@NonNull AssetManager am, @NonNull String path, boolean isAsset, int cookie) throws IOException", "public Builder setWeight(@IntRange(from = FontStyle.FONT_WEIGHT_MIN, to = FontStyle.FONT_WEIGHT_MAX) int weight)", "public Builder setSlant(@FontStyle.FontSlant int slant)", "public Builder setTtcIndex(@IntRange(from = 0) int ttcIndex)", "public Builder setFontVariationSettings(@Nullable String variationSettings)", "public Builder setFontVariationSettings(@Nullable FontVariationAxis[] axes)", "public Font build() throws IOException", "private static native long nInitBuilder()", "private static native void nAddAxis(long builderPtr, int tag, float value)", "private static native long nBuild(long builderPtr, @NonNull ByteBuffer buffer, @NonNull String filePath, int weight, boolean italic, int ttcIndex)", "private static native long nGetReleaseNativeFont()" ]
}