{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/contentcapture/ContentCaptureManager.java",
  "packageName" : "android.view.contentcapture",
  "className" : "ContentCaptureManager",
  "comment" : "\n * <p>The {@link ContentCaptureManager} provides additional ways for for apps to\n * integrate with the content capture subsystem.\n *\n * <p>Content capture provides real-time, continuous capture of application activity, display and\n * events to an intelligence service that is provided by the Android system. The intelligence\n * service then uses that info to mediate and speed user journey through different apps. For\n * example, when the user receives a restaurant address in a chat app and switchs to a map app\n * to search for that restaurant, the intelligence service could offer an autofill dialog to\n * let the user automatically select its address.\n *\n * <p>Content capture was designed with two major concerns in mind: privacy and performance.\n *\n * <ul>\n *   <li><b>Privacy:</b> the intelligence service is a trusted component provided that is provided\n *   by the device manufacturer and that cannot be changed by the user (although the user can\n *   globaly disable content capture using the Android Settings app). This service can only use the\n *   data for in-device machine learning, which is enforced both by process isolation and\n *   <a href=\"https://source.android.com/compatibility/cdd\">CDD requirements</a>.\n *   <li><b>Performance:</b> content capture is highly optimized to minimize its impact in the app\n *   jankiness and overall device system health. For example, its only enabled on apps (or even\n *   specific activities from an app) that were explicitly whitelisted by the intelligence service,\n *   and it buffers the events so they are sent in a batch to the service (see\n *   {@link #isContentCaptureEnabled()} for other cases when its disabled).\n * </ul>\n *\n * <p>In fact, before using this manager, the app developer should check if it's available. Example:\n * <pre><code>\n *  ContentCaptureManager mgr = context.getSystemService(ContentCaptureManager.class);\n *  if (mgr != null && mgr.isContentCaptureEnabled()) {\n *    // ...\n *  }\n *  </code></pre>\n *\n * <p>App developers usually don't need to explicitly interact with content capture, except when the\n * app:\n *\n * <ul>\n *   <li>Can define a contextual {@link android.content.LocusId} to identify unique state (such as a\n *   conversation between 2 chat users).\n *   <li>Can have multiple view hierarchies with different contextual meaning (for example, a\n *   browser app with multiple tabs, each representing a different URL).\n *   <li>Contains custom views (that extend View directly and are not provided by the standard\n *   Android SDK.\n *   <li>Contains views that provide their own virtual hierarchy (like a web browser that render the\n *   HTML elements using a Canvas).\n * </ul>\n *\n * <p>The main integration point with content capture is the {@link ContentCaptureSession}. A \"main\"\n * session is automatically created by the Android System when content capture is enabled for the\n * activity and its used by the standard Android views to notify the content capture service of\n * events such as views being added, views been removed, and text changed by user input. The session\n * could have a {@link ContentCaptureContext} to provide more contextual info about it, such as\n * the locus associated with the view hierarchy (see {@link android.content.LocusId} for more info\n * about locus). By default, the main session doesn't have a {@code ContentCaptureContext}, but you\n * can change it after its created. Example:\n *\n * <pre><code>\n * protected void onCreate(Bundle savedInstanceState) {\n *   // Initialize view structure\n *   ContentCaptureSession session = rootView.getContentCaptureSession();\n *   if (session != null) {\n *     session.setContentCaptureContext(ContentCaptureContext.forLocusId(\"chat_UserA_UserB\"));\n *   }\n * }\n * </code></pre>\n *\n * <p>If your activity contains view hierarchies with a different contextual meaning, you should\n * created child sessions for each view hierarchy root. For example, if your activity is a browser,\n * you could use the main session for the main URL being rendered, then child sessions for each\n * {@code IFRAME}:\n *\n * <pre><code>\n * ContentCaptureSession mMainSession;\n *\n * protected void onCreate(Bundle savedInstanceState) {\n *    // Initialize view structure...\n *    mMainSession = rootView.getContentCaptureSession();\n *    if (mMainSession != null) {\n *      mMainSession.setContentCaptureContext(\n *          ContentCaptureContext.forLocusId(\"https://example.com\"));\n *    }\n * }\n *\n * private void loadIFrame(View iframeRootView, String url) {\n *   if (mMainSession != null) {\n *      ContentCaptureSession iFrameSession = mMainSession.newChild(\n *          ContentCaptureContext.forLocusId(url));\n *      }\n *      iframeRootView.setContentCaptureSession(iFrameSession);\n *   }\n *   // Load iframe...\n * }\n * </code></pre>\n *\n * <p>If your activity has custom views (i.e., views that extend {@link View} directly and provide\n * just one logical view, not a virtual tree hiearchy) and it provides content that's relevant for\n * content capture (as of {@link android.os.Build.VERSION_CODES#Q Android Q}, the only relevant\n * content is text), then your view implementation should:\n *\n * <ul>\n *   <li>Set it as important for content capture.\n *   <li>Fill {@link ViewStructure} used for content capture.\n *   <li>Notify the {@link ContentCaptureSession} when the text is changed by user input.\n * </ul>\n *\n * <p>Here's an example of the relevant methods for an {@code EditText}-like view:\n *\n * <pre><code>\n * public class MyEditText extends View {\n *\n * public MyEditText(...) {\n *   if (getImportantForContentCapture() == IMPORTANT_FOR_CONTENT_CAPTURE_AUTO) {\n *     setImportantForContentCapture(IMPORTANT_FOR_CONTENT_CAPTURE_YES);\n *   }\n * }\n *\n * public void onProvideContentCaptureStructure(@NonNull ViewStructure structure, int flags) {\n *   super.onProvideContentCaptureStructure(structure, flags);\n *\n *   structure.setText(getText(), getSelectionStart(), getSelectionEnd());\n *   structure.setHint(getHint());\n *   structure.setInputType(getInputType());\n *   // set other properties like setTextIdEntry(), setTextLines(), setTextStyle(),\n *   // setMinTextEms(), setMaxTextEms(), setMaxTextLength()\n * }\n *\n * private void onTextChanged() {\n *   if (isLaidOut() && isImportantForContentCapture() && isTextEditable()) {\n *     ContentCaptureManager mgr = mContext.getSystemService(ContentCaptureManager.class);\n *     if (cm != null && cm.isContentCaptureEnabled()) {\n *        ContentCaptureSession session = getContentCaptureSession();\n *        if (session != null) {\n *          session.notifyViewTextChanged(getAutofillId(), getText());\n *        }\n *   }\n * }\n * </code></pre>\n *\n * <p>If your view provides its own virtual hierarchy (for example, if it's a browser that draws\n * the HTML using {@link Canvas} or native libraries in a different render process), then the view\n * is also responsible to notify the session when the virtual elements appear and disappear - see\n * {@link View#onProvideContentCaptureStructure(ViewStructure, int)} for more info.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_SHARE_ERROR_UNKNOWN",
    "type" : "int",
    "comment" : " Error happened during the data sharing session. ",
    "links" : [ ]
  }, {
    "name" : "DATA_SHARE_ERROR_CONCURRENT_REQUEST",
    "type" : "int",
    "comment" : " Request has been rejected, because a concurrent data share sessions is in progress. ",
    "links" : [ ]
  }, {
    "name" : "DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED",
    "type" : "int",
    "comment" : " Request has been interrupted because of data share session timeout. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CODE_OK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CODE_TRUE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CODE_FALSE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CODE_SECURITY_EXCEPTION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NO_SESSION_ID",
    "type" : "int",
    "comment" : "\n     * ID used to indicate that a session does not exist\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_CALLS_TIMEOUT_MS",
    "type" : "int",
    "comment" : "\n     * Timeout for calls to system_server.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_SERVICE_EXPLICITLY_ENABLED",
    "type" : "String",
    "comment" : "\n     * DeviceConfig property used by {@code com.android.server.SystemServer} on start to decide\n     * whether the content capture service should be created or not\n     *\n     * <p>By default it should *NOT* be set (or set to {@code \"default\"}, so the decision is based\n     * on whether the OEM provides an implementation for the service), but it can be overridden to:\n     *\n     * <ul>\n     *   <li>Provide a \"kill switch\" so OEMs can disable it remotely in case of emergency (when\n     *   it's set to {@code \"false\"}).\n     *   <li>Enable the CTS tests to be run on AOSP builds (when it's set to {@code \"true\"}).\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_MAX_BUFFER_SIZE",
    "type" : "String",
    "comment" : "\n     * Maximum number of events that are buffered before sent to the app.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_IDLE_FLUSH_FREQUENCY",
    "type" : "String",
    "comment" : "\n     * Frequency (in ms) of buffer flushes when no events are received.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_TEXT_CHANGE_FLUSH_FREQUENCY",
    "type" : "String",
    "comment" : "\n     * Frequency (in ms) of buffer flushes when no events are received and the last one was a\n     * text change event.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_LOG_HISTORY_SIZE",
    "type" : "String",
    "comment" : "\n     * Size of events that are logging on {@code dump}.\n     *\n     * <p>Set it to {@code 0} or less to disable history.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_LOGGING_LEVEL",
    "type" : "String",
    "comment" : "\n     * Sets the logging level for {@code logcat} statements.\n     *\n     * <p>Valid values are: {@link #LOGGING_LEVEL_OFF}, {@value #LOGGING_LEVEL_DEBUG}, and\n     * {@link #LOGGING_LEVEL_VERBOSE}.\n     *\n     * @hide\n     ",
    "links" : [ "#LOGGING_LEVEL_OFF", "#LOGGING_LEVEL_VERBOSE" ]
  }, {
    "name" : "DEVICE_CONFIG_PROPERTY_IDLE_UNBIND_TIMEOUT",
    "type" : "String",
    "comment" : "\n     * Sets how long (in ms) the service is bound while idle.\n     *\n     * <p>Use {@code 0} to keep it permanently bound.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOGGING_LEVEL_OFF",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOGGING_LEVEL_DEBUG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOGGING_LEVEL_VERBOSE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_BUFFER_SIZE",
    "type" : "int",
    "comment" : " Enough for typical busy screen.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_IDLE_FLUSHING_FREQUENCY_MS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TEXT_CHANGE_FLUSHING_FREQUENCY_MS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LOG_HISTORY_SIZE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IContentCaptureManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataShareAdapterResourceManager",
    "type" : "LocalDataShareAdapterResourceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptions",
    "type" : "ContentCaptureOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " Flags used for starting session.",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " held at the Application level",
    "links" : [ ]
  }, {
    "name" : "mMainSession",
    "type" : "MainContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MainContentCaptureSession getMainContentCaptureSession()",
    "returnType" : "MainContentCaptureSession",
    "comment" : "\n     * Gets the main session associated with the context.\n     *\n     * <p>By default there's just one (associated with the activity lifecycle), but apps could\n     * explicitly add more using\n     * {@link ContentCaptureSession#createContentCaptureSession(ContentCaptureContext)}.\n     *\n     * @hide\n     ",
    "links" : [ "ContentCaptureSession#createContentCaptureSession" ]
  }, {
    "name" : "public void onActivityCreated(@NonNull IBinder applicationToken, @NonNull ComponentName activityComponent)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onActivityResumed()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onActivityPaused()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onActivityDestroyed()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void flush(@FlushReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Flushes the content of all sessions.\n     *\n     * <p>Typically called by {@code Activity} when it's paused / resumed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getServiceComponentName()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the component name of the system service that is consuming the captured events for\n     * the current user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName getServiceSettingsComponentName()",
    "returnType" : "ComponentName",
    "comment" : " TODO: use \"lite\" options as it's done by activities from the content capture service",
    "links" : [ ]
  }, {
    "name" : "public boolean isContentCaptureEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether content capture is enabled for this activity.\n     *\n     * <p>There are many reasons it could be disabled, such as:\n     * <ul>\n     *   <li>App itself disabled content capture through {@link #setContentCaptureEnabled(boolean)}.\n     *   <li>Intelligence service did not whitelist content capture for this activity's package.\n     *   <li>Intelligence service did not whitelist content capture for this specific activity.\n     *   <li>Intelligence service disabled content capture globally.\n     *   <li>User disabled content capture globally through the Android Settings app.\n     *   <li>Device manufacturer (OEM) disabled content capture globally.\n     *   <li>Transient errors, such as intelligence service package being updated.\n     * </ul>\n     ",
    "links" : [ "#setContentCaptureEnabled" ]
  }, {
    "name" : "public Set<ContentCaptureCondition> getContentCaptureConditions()",
    "returnType" : "Set<ContentCaptureCondition>",
    "comment" : "\n     * Gets the list of conditions for when content capture should be allowed.\n     *\n     * <p>This method is typically used by web browsers so they don't generate unnecessary content\n     * capture events for websites the content capture service is not interested on.\n     *\n     * @return list of conditions, or {@code null} if the service didn't set any restriction\n     * (in which case content capture events should always be generated). If the list is empty,\n     * then it should not generate any event at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentCaptureEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Called by apps to explicitly enable or disable content capture.\n     *\n     * <p><b>Note: </b> this call is not persisted accross reboots, so apps should typically call\n     * it on {@link android.app.Activity#onCreate(android.os.Bundle, android.os.PersistableBundle)}.\n     ",
    "links" : [ "android.app.Activity#onCreate" ]
  }, {
    "name" : "public void updateWindowAttributes(@NonNull WindowManager.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Called by apps to update flag secure when window attributes change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isContentCaptureFeatureEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether content capture is enabled for the given user.\n     *\n     * <p>This method is typically used by the content capture service settings page, so it can\n     * provide a toggle to enable / disable it.\n     *\n     * @throws SecurityException if caller is not the app that owns the content capture service\n     * associated with the user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeData(@NonNull DataRemovalRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Called by the app to request the content capture service to remove content capture data\n     * associated with some context.\n     *\n     * @param request object specifying what user data should be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shareData(@NonNull DataShareRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull DataShareWriteAdapter dataShareWriteAdapter)",
    "returnType" : "void",
    "comment" : "\n     * Called by the app to request data sharing via writing to a file.\n     *\n     * <p>The ContentCaptureService app will receive a read-only file descriptor pointing to the\n     * same file and will be able to read data being shared from it.\n     *\n     * <p>Note: using this API doesn't guarantee the app staying alive and is \"best-effort\".\n     * Starting a foreground service would minimize the chances of the app getting killed during the\n     * file sharing session.\n     *\n     * @param request object specifying details of the data being shared.\n     ",
    "links" : [ ]
  }, {
    "name" : "private SyncResultReceiver syncRun(@NonNull MyRunnable r)",
    "returnType" : "SyncResultReceiver",
    "comment" : "\n     * Runs a sync method in the service, properly handling exceptions.\n     *\n     * @throws SecurityException if caller is not allowed to execute the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DATA_SHARE_ERROR_UNKNOWN", "DATA_SHARE_ERROR_CONCURRENT_REQUEST", "DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED", "RESULT_CODE_OK", "RESULT_CODE_TRUE", "RESULT_CODE_FALSE", "RESULT_CODE_SECURITY_EXCEPTION", "NO_SESSION_ID", "SYNC_CALLS_TIMEOUT_MS", "DEVICE_CONFIG_PROPERTY_SERVICE_EXPLICITLY_ENABLED", "DEVICE_CONFIG_PROPERTY_MAX_BUFFER_SIZE", "DEVICE_CONFIG_PROPERTY_IDLE_FLUSH_FREQUENCY", "DEVICE_CONFIG_PROPERTY_TEXT_CHANGE_FLUSH_FREQUENCY", "DEVICE_CONFIG_PROPERTY_LOG_HISTORY_SIZE", "DEVICE_CONFIG_PROPERTY_LOGGING_LEVEL", "DEVICE_CONFIG_PROPERTY_IDLE_UNBIND_TIMEOUT", "LOGGING_LEVEL_OFF", "LOGGING_LEVEL_DEBUG", "LOGGING_LEVEL_VERBOSE", "DEFAULT_MAX_BUFFER_SIZE", "DEFAULT_IDLE_FLUSHING_FREQUENCY_MS", "DEFAULT_TEXT_CHANGE_FLUSHING_FREQUENCY_MS", "DEFAULT_LOG_HISTORY_SIZE", "mLock", "mContext", "mService", "mDataShareAdapterResourceManager", "mOptions", "mFlags", "mHandler", "mMainSession" ],
  "methodNames" : [ "public MainContentCaptureSession getMainContentCaptureSession()", "public void onActivityCreated(@NonNull IBinder applicationToken, @NonNull ComponentName activityComponent)", "public void onActivityResumed()", "public void onActivityPaused()", "public void onActivityDestroyed()", "public void flush(@FlushReason int reason)", "public ComponentName getServiceComponentName()", "public static ComponentName getServiceSettingsComponentName()", "public boolean isContentCaptureEnabled()", "public Set<ContentCaptureCondition> getContentCaptureConditions()", "public void setContentCaptureEnabled(boolean enabled)", "public void updateWindowAttributes(@NonNull WindowManager.LayoutParams params)", "public boolean isContentCaptureFeatureEnabled()", "public void removeData(@NonNull DataRemovalRequest request)", "public void shareData(@NonNull DataShareRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull DataShareWriteAdapter dataShareWriteAdapter)", "private SyncResultReceiver syncRun(@NonNull MyRunnable r)", "public void dump(String prefix, PrintWriter pw)" ]
}