{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/ImageUtils.java",
  "packageName" : "android.media",
  "className" : "ImageUtils",
  "comment" : "\n * Package private utility class for hosting commonly used Image related methods.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static int getNumPlanesForFormat(int format)",
    "returnType" : "int",
    "comment" : "\n     * Only a subset of the formats defined in\n     * {@link android.graphics.ImageFormat ImageFormat} and\n     * {@link android.graphics.PixelFormat PixelFormat} are supported by\n     * ImageReader. When reading RGB data from a surface, the formats defined in\n     * {@link android.graphics.PixelFormat PixelFormat} can be used; when\n     * reading YUV, JPEG, HEIC or raw sensor data (for example, from the camera\n     * or video decoder), formats from {@link android.graphics.ImageFormat ImageFormat}\n     * are used.\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.graphics.PixelFormat", "android.graphics.PixelFormat", "android.graphics.ImageFormat" ]
  }, {
    "name" : "public static void imageCopy(Image src, Image dst)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Copy source image data to destination Image.\n     * </p>\n     * <p>\n     * Only support the copy between two non-{@link ImageFormat#PRIVATE PRIVATE} format\n     * images with same properties (format, size, etc.). The data from the\n     * source image will be copied to the byteBuffers from the destination Image\n     * starting from position zero, and the destination image will be rewound to\n     * zero after copy is done.\n     * </p>\n     *\n     * @param src The source image to be copied from.\n     * @param dst The destination image to be copied to.\n     * @throws IllegalArgumentException If the source and destination images\n     *             have different format, or one of the images is not copyable.\n     ",
    "links" : [ "ImageFormat#PRIVATE" ]
  }, {
    "name" : "public static int getEstimatedNativeAllocBytes(int width, int height, int format, int numImages)",
    "returnType" : "int",
    "comment" : "\n     * Return the estimated native allocation size in bytes based on width, height, format,\n     * and number of images.\n     *\n     * <p>This is a very rough estimation and should only be used for native allocation\n     * registration in VM so it can be accounted for during GC.</p>\n     *\n     * @param width The width of the images.\n     * @param height The height of the images.\n     * @param format The format of the images.\n     * @param numImages The number of the images.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Size getEffectivePlaneSizeForImage(Image image, int planeIdx)",
    "returnType" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void directByteBufferCopy(ByteBuffer srcBuffer, int srcOffset, ByteBuffer dstBuffer, int dstOffset, int srcByteCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static int getNumPlanesForFormat(int format)", "public static void imageCopy(Image src, Image dst)", "public static int getEstimatedNativeAllocBytes(int width, int height, int format, int numImages)", "private static Size getEffectivePlaneSizeForImage(Image image, int planeIdx)", "private static void directByteBufferCopy(ByteBuffer srcBuffer, int srcOffset, ByteBuffer dstBuffer, int dstOffset, int srcByteCount)" ]
}