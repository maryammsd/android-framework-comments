{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/PathParser_Delegate.java",
  "packageName" : "android.util",
  "className" : "PathDataNode",
  "comment" : "\n     * Each PathDataNode represents one command in the \"d\" attribute of the svg file. An array of\n     * PathDataNode can represent the whole \"d\" attribute.\n     ",
  "variables" : [ {
    "name" : "mType",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public char getType()",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float[] getParams()",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void nodesToPath(@NonNull PathDataNode[] node, @NonNull Path_Delegate path)",
    "returnType" : "void",
    "comment" : "\n         * Convert an array of PathDataNode to Path. Reset the passed path as needed before\n         * calling this method.\n         *\n         * @param node The source array of PathDataNode.\n         * @param path The target Path object.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void interpolatePathDataNode(@NonNull PathDataNode nodeFrom, @NonNull PathDataNode nodeTo, float fraction)",
    "returnType" : "void",
    "comment" : "\n         * The current PathDataNode will be interpolated between the <code>nodeFrom</code> and\n         * <code>nodeTo</code> according to the <code>fraction</code>.\n         *\n         * @param nodeFrom The start value as a PathDataNode.\n         * @param nodeTo The end value as a PathDataNode\n         * @param fraction The fraction to interpolate.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void addCommand(@NonNull Path_Delegate path, float[] current, char previousCmd, char cmd, @NonNull float[] val)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void drawArc(@NonNull Path_Delegate p, float x0, float y0, float x1, float y1, float a, float b, float theta, boolean isMoreThanHalf, boolean isPositiveArc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void arcToBezier(@NonNull Path_Delegate p, double cx, double cy, double a, double b, double e1x, double e1y, double theta, double start, double sweep)",
    "returnType" : "void",
    "comment" : "\n         * Converts an arc to cubic Bezier segments and records them in p.\n         *\n         * @param p The target for the cubic Bezier segments\n         * @param cx The x coordinate center of the ellipse\n         * @param cy The y coordinate center of the ellipse\n         * @param a The radius of the ellipse in the horizontal direction\n         * @param b The radius of the ellipse in the vertical direction\n         * @param e1x E(eta1) x coordinate of the starting point of the arc\n         * @param e1y E(eta2) y coordinate of the starting point of the arc\n         * @param theta The angle that the ellipse bounding rectangle makes with the horizontal\n         * plane\n         * @param start The start angle of the arc on the ellipse\n         * @param sweep The angle (positive or negative) of the sweep of the arc on the ellipse\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mType", "mParams" ],
  "methodNames" : [ "public char getType()", "public float[] getParams()", "public static void nodesToPath(@NonNull PathDataNode[] node, @NonNull Path_Delegate path)", "private void interpolatePathDataNode(@NonNull PathDataNode nodeFrom, @NonNull PathDataNode nodeTo, float fraction)", "private static void addCommand(@NonNull Path_Delegate path, float[] current, char previousCmd, char cmd, @NonNull float[] val)", "private static void drawArc(@NonNull Path_Delegate p, float x0, float y0, float x1, float y1, float a, float b, float theta, boolean isMoreThanHalf, boolean isPositiveArc)", "private static void arcToBezier(@NonNull Path_Delegate p, double cx, double cy, double a, double b, double e1x, double e1y, double theta, double start, double sweep)" ]
}