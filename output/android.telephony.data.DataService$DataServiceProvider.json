{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/data/DataService.java",
  "packageName" : "android.telephony.data",
  "className" : "DataServiceProvider",
  "comment" : "\n     * The abstract class of the actual data service implementation. The data service provider\n     * must extend this class to support data connection. Note that each instance of data service\n     * provider is associated with one physical SIM slot.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSlotIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataCallListChangedCallbacks",
    "type" : "List<IDataServiceCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApnUnthrottledCallbacks",
    "type" : "List<IDataServiceCallback>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int getSlotIndex()",
    "returnType" : "int",
    "comment" : "\n         * @return SIM slot index the data service provider associated with.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setupDataCall(@RadioAccessNetworkType int accessNetworkType, @NonNull DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @SetupDataReason int reason, @Nullable LinkProperties linkProperties, @NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Setup a data connection. The data service provider must implement this method to support\n         * establishing a packet data connection. When completed or error, the service must invoke\n         * the provided callback to notify the platform.\n         *\n         * @param accessNetworkType Access network type that the data call will be established on.\n         *        Must be one of {@link android.telephony.AccessNetworkConstants.AccessNetworkType}.\n         * @param dataProfile Data profile used for data call setup. See {@link DataProfile}\n         * @param isRoaming True if the device is data roaming.\n         * @param allowRoaming True if data roaming is allowed by the user.\n         * @param reason The reason for data setup. Must be {@link #REQUEST_REASON_NORMAL} or\n         *        {@link #REQUEST_REASON_HANDOVER}.\n         * @param linkProperties If {@code reason} is {@link #REQUEST_REASON_HANDOVER}, this is the\n         *        link properties of the existing data connection, otherwise null.\n         * @param callback The result callback for this request.\n         ",
    "links" : [ "#REQUEST_REASON_HANDOVER", "#REQUEST_REASON_NORMAL", "android.telephony.data.DataProfile", "android.telephony.AccessNetworkConstants.AccessNetworkType" ]
  }, {
    "name" : "public void setupDataCall(@RadioAccessNetworkType int accessNetworkType, @NonNull DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @SetupDataReason int reason, @Nullable LinkProperties linkProperties, @IntRange(from = 0, to = 15) int pduSessionId, @Nullable NetworkSliceInfo sliceInfo, @Nullable TrafficDescriptor trafficDescriptor, boolean matchAllRuleAllowed, @NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Setup a data connection. The data service provider must implement this method to support\n         * establishing a packet data connection. When completed or error, the service must invoke\n         * the provided callback to notify the platform.\n         *\n         * @param accessNetworkType Access network type that the data call will be established on.\n         *        Must be one of {@link android.telephony.AccessNetworkConstants.AccessNetworkType}.\n         * @param dataProfile Data profile used for data call setup. See {@link DataProfile}\n         * @param isRoaming True if the device is data roaming.\n         * @param allowRoaming True if data roaming is allowed by the user.\n         * @param reason The reason for data setup. Must be {@link #REQUEST_REASON_NORMAL} or\n         *        {@link #REQUEST_REASON_HANDOVER}.\n         * @param linkProperties If {@code reason} is {@link #REQUEST_REASON_HANDOVER}, this is the\n         *        link properties of the existing data connection, otherwise null.\n         * @param pduSessionId The pdu session id to be used for this data call.\n         *                     The standard range of values are 1-15 while 0 means no pdu session id\n         *                     was attached to this call.  Reference: 3GPP TS 24.007 section\n         *                     11.2.3.1b.\n         * @param sliceInfo used within the data connection when a handover occurs from EPDG to 5G.\n         *        The value is null unless the access network is\n         *        {@link android.telephony.AccessNetworkConstants.AccessNetworkType#NGRAN} and a\n         *        handover is occurring from EPDG to 5G.  If the slice passed is rejected, then\n         *        {@link DataCallResponse#getCause()} is\n         *        {@link android.telephony.DataFailCause#SLICE_REJECTED}.\n         * @param trafficDescriptor {@link TrafficDescriptor} for which data connection needs to be\n         *        established. It is used for URSP traffic matching as described in 3GPP TS 24.526\n         *        Section 4.2.2. It includes an optional DNN which, if present, must be used for\n         *        traffic matching; it does not specify the end point to be used for the data call.\n         * @param matchAllRuleAllowed Indicates if using default match-all URSP rule for this\n         *        request is allowed. If false, this request must not use the match-all URSP rule\n         *        and if a non-match-all rule is not found (or if URSP rules are not available) then\n         *        {@link DataCallResponse#getCause()} is\n         *        {@link android.telephony.DataFailCause#MATCH_ALL_RULE_NOT_ALLOWED}. This is needed\n         *        as some requests need to have a hard failure if the intention cannot be met,\n         *        for example, a zero-rating slice.\n         * @param callback The result callback for this request.\n         ",
    "links" : [ "#REQUEST_REASON_HANDOVER", "#REQUEST_REASON_NORMAL", "android.telephony.data.TrafficDescriptor", "android.telephony.data.DataProfile", "android.telephony.DataFailCause#MATCH_ALL_RULE_NOT_ALLOWED", "android.telephony.data.DataCallResponse#getCause()", "android.telephony.DataFailCause#SLICE_REJECTED", "android.telephony.AccessNetworkConstants.AccessNetworkType", "android.telephony.AccessNetworkConstants.AccessNetworkType#NGRAN" ]
  }, {
    "name" : "public void deactivateDataCall(int cid, @DeactivateDataReason int reason, @Nullable DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Deactivate a data connection. The data service provider must implement this method to\n         * support data connection tear down. When completed or error, the service must invoke the\n         * provided callback to notify the platform.\n         *\n         * @param cid Call id returned in the callback of {@link DataServiceProvider#setupDataCall(\n         *        int, DataProfile, boolean, boolean, int, LinkProperties, DataServiceCallback)}.\n         * @param reason The reason for data deactivation. Must be {@link #REQUEST_REASON_NORMAL},\n         *        {@link #REQUEST_REASON_SHUTDOWN} or {@link #REQUEST_REASON_HANDOVER}.\n         * @param callback The result callback for this request. Null if the client does not care\n         *        about the result.\n         *\n         ",
    "links" : [ "#REQUEST_REASON_HANDOVER", "#REQUEST_REASON_NORMAL", "#setupDataCall(", "#REQUEST_REASON_SHUTDOWN" ]
  }, {
    "name" : "public void setInitialAttachApn(@NonNull DataProfile dataProfile, boolean isRoaming, @NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Set an APN to initial attach network.\n         *\n         * @param dataProfile Data profile used for data call setup. See {@link DataProfile}.\n         * @param isRoaming True if the device is data roaming.\n         * @param callback The result callback for this request.\n         ",
    "links" : [ "android.telephony.data.DataProfile" ]
  }, {
    "name" : "public void setDataProfile(@NonNull List<DataProfile> dps, boolean isRoaming, @NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Send current carrier's data profiles to the data service for data call setup. This is\n         * only for CDMA carrier that can change the profile through OTA. The data service should\n         * always uses the latest data profile sent by the framework.\n         *\n         * @param dps A list of data profiles.\n         * @param isRoaming True if the device is data roaming.\n         * @param callback The result callback for this request.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void startHandover(int cid, @NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Indicates that a handover has begun.  This is called on the source transport.\n         *\n         * Any resources being transferred cannot be released while a\n         * handover is underway.\n         * <p/>\n         * If a handover was unsuccessful, then the framework calls\n         * {@link DataService#cancelHandover}.  The target transport retains ownership over any of\n         * the resources being transferred.\n         * <p/>\n         * If a handover was successful, the framework calls {@link DataService#deactivateDataCall}\n         * with reason {@link DataService.REQUEST_REASON_HANDOVER}. The target transport now owns\n         * the transferred resources and is responsible for releasing them.\n         *\n         * <p/>\n         * Note that the callback will be executed on binder thread.\n         *\n         * @param cid The identifier of the data call which is provided in {@link DataCallResponse}\n         * @param callback The result callback for this request.\n         *\n         * @hide\n         ",
    "links" : [ "android.telephony.data.DataService#cancelHandover", "android.telephony.data.DataService#deactivateDataCall", "android.telephony.data.DataCallResponse", "DataService.REQUEST_REASON_HANDOVER" ]
  }, {
    "name" : "public void cancelHandover(int cid, @NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Indicates that a handover was cancelled after a call to\n         * {@link DataService#startHandover}. This is called on the source transport.\n         * <p/>\n         * Since the handover was unsuccessful, the source transport retains ownership over any of\n         * the resources being transferred and is still responsible for releasing them.\n         * <p/>\n         * The handover can be cancelled up until either:\n         * <ul><li>\n         *     The handover was successful after receiving a successful response from\n         *     {@link DataService#setupDataCall} on the target transport.\n         * </li><li>\n         *     The data call on the source transport was lost.\n         * </li>\n         * </ul>\n         *\n         * <p/>\n         * Note that the callback will be executed on binder thread.\n         *\n         * @param cid The identifier of the data call which is provided in {@link DataCallResponse}\n         * @param callback The result callback for this request.\n         *\n         * @hide\n         ",
    "links" : [ "android.telephony.data.DataService#startHandover", "android.telephony.data.DataCallResponse", "android.telephony.data.DataService#setupDataCall" ]
  }, {
    "name" : "public void requestDataCallList(@NonNull DataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Get the active data call list.\n         *\n         * @param callback The result callback for this request.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void registerForDataCallListChanged(IDataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterForDataCallListChanged(IDataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerForApnUnthrottled(IDataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterForApnUnthrottled(IDataServiceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestNetworkValidation(int cid, @NonNull @CallbackExecutor Executor executor, @NonNull @DataServiceCallback.ResultCode Consumer<Integer> resultCodeCallback)",
    "returnType" : "void",
    "comment" : "\n         * Request validation check to see if the network is working properly for a given data call.\n         *\n         * <p>This request is completed immediately after submitting the request to the data service\n         * provider and receiving {@link DataServiceCallback.ResultCode}, and progress status or\n         * validation results are notified through {@link\n         * DataCallResponse#getNetworkValidationStatus}.\n         *\n         * <p> If the network validation request is submitted successfully, {@link\n         * DataServiceCallback#RESULT_SUCCESS} is passed to {@code resultCodeCallback}. If the\n         * network validation feature is not supported by the data service provider itself, {@link\n         * DataServiceCallback#RESULT_ERROR_UNSUPPORTED} is passed to {@code resultCodeCallback}.\n         * See {@link DataServiceCallback.ResultCode} for the type of response that indicates\n         * whether the request was successfully submitted or had an error.\n         *\n         * <p>In response to this network validation request, providers can validate the data call\n         * in their own way. For example, in IWLAN, the DPD (Dead Peer Detection) can be used as a\n         * tool to check whether a data call is alive.\n         *\n         * @param cid The identifier of the data call which is provided in {@link DataCallResponse}\n         * @param executor The callback executor for the response.\n         * @param resultCodeCallback Listener for the {@link DataServiceCallback.ResultCode} that\n         *     request validation to the DataService and checks if the request has been submitted.\n         ",
    "links" : [ "android.telephony.data.DataServiceCallback#RESULT_SUCCESS", "android.telephony.data.DataServiceCallback#RESULT_ERROR_UNSUPPORTED", "android.telephony.data.DataCallResponse", "DataServiceCallback.ResultCode", "android.telephony.data.DataCallResponse#getNetworkValidationStatus" ]
  }, {
    "name" : "public final void notifyDataCallListChanged(List<DataCallResponse> dataCallList)",
    "returnType" : "void",
    "comment" : "\n         * Notify the system that current data call list changed. Data service must invoke this\n         * method whenever there is any data call status changed.\n         *\n         * @param dataCallList List of the current active data call.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyApnUnthrottled(@NonNull String apn)",
    "returnType" : "void",
    "comment" : "\n         * Notify the system that a given APN was unthrottled.\n         *\n         * @param apn Access Point Name defined by the carrier.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyDataProfileUnthrottled(@NonNull DataProfile dataProfile)",
    "returnType" : "void",
    "comment" : "\n         * Notify the system that a given DataProfile was unthrottled.\n         *\n         * @param dataProfile DataProfile associated with an APN returned from the modem\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void close()",
    "returnType" : "void",
    "comment" : "\n         * Called when the instance of data service is destroyed (e.g. got unbind or binder died)\n         * or when the data service provider is removed. The extended class should implement this\n         * method to perform cleanup works.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int getSlotIndex()", "public void setupDataCall(@RadioAccessNetworkType int accessNetworkType, @NonNull DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @SetupDataReason int reason, @Nullable LinkProperties linkProperties, @NonNull DataServiceCallback callback)", "public void setupDataCall(@RadioAccessNetworkType int accessNetworkType, @NonNull DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @SetupDataReason int reason, @Nullable LinkProperties linkProperties, @IntRange(from = 0, to = 15) int pduSessionId, @Nullable NetworkSliceInfo sliceInfo, @Nullable TrafficDescriptor trafficDescriptor, boolean matchAllRuleAllowed, @NonNull DataServiceCallback callback)", "public void deactivateDataCall(int cid, @DeactivateDataReason int reason, @Nullable DataServiceCallback callback)", "public void setInitialAttachApn(@NonNull DataProfile dataProfile, boolean isRoaming, @NonNull DataServiceCallback callback)", "public void setDataProfile(@NonNull List<DataProfile> dps, boolean isRoaming, @NonNull DataServiceCallback callback)", "public void startHandover(int cid, @NonNull DataServiceCallback callback)", "public void cancelHandover(int cid, @NonNull DataServiceCallback callback)", "public void requestDataCallList(@NonNull DataServiceCallback callback)", "private void registerForDataCallListChanged(IDataServiceCallback callback)", "private void unregisterForDataCallListChanged(IDataServiceCallback callback)", "private void registerForApnUnthrottled(IDataServiceCallback callback)", "private void unregisterForApnUnthrottled(IDataServiceCallback callback)", "public void requestNetworkValidation(int cid, @NonNull @CallbackExecutor Executor executor, @NonNull @DataServiceCallback.ResultCode Consumer<Integer> resultCodeCallback)", "public final void notifyDataCallListChanged(List<DataCallResponse> dataCallList)", "public final void notifyApnUnthrottled(@NonNull String apn)", "public final void notifyDataProfileUnthrottled(@NonNull DataProfile dataProfile)", "public abstract void close()" ],
  "variableNames" : [ "mSlotIndex", "mDataCallListChangedCallbacks", "mApnUnthrottledCallbacks" ]
}