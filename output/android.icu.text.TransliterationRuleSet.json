{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TransliterationRuleSet.java",
  "packageName" : "android.icu.text",
  "className" : "TransliterationRuleSet",
  "comment" : "\n * A set of rules for a <code>RuleBasedTransliterator</code>.  This set encodes\n * the transliteration in one direction from one set of characters or short\n * strings to another.  A <code>RuleBasedTransliterator</code> consists of up to\n * two such sets, one for the forward direction, and one for the reverse.\n *\n * <p>A <code>TransliterationRuleSet</code> has one important operation, that of\n * finding a matching rule at a given point in the text.  This is accomplished\n * by the <code>findMatch()</code> method.\n *\n * <p>Copyright &copy; IBM Corporation 1999.  All rights reserved.\n *\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ruleVector",
    "type" : "List<TransliterationRule>",
    "comment" : "\n     * Vector of rules, in the order added.\n     ",
    "links" : [ ]
  }, {
    "name" : "maxContextLength",
    "type" : "int",
    "comment" : "\n     * Length of the longest preceding context\n     ",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "TransliterationRule[]",
    "comment" : "\n     * Sorted and indexed table of rules.  This is created by freeze() from\n     * the rules in ruleVector.  rules.length >= ruleVector.size(), and the\n     * references in rules[] are aliases of the references in ruleVector.\n     * A single rule in ruleVector is listed one or more times in rules[].\n     ",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int[]",
    "comment" : "\n     * Index table.  For text having a first character c, compute x = c&0xFF.\n     * Now use rules[index[x]..index[x+1]-1].  This index table is created by\n     * freeze().\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getMaximumContextLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum context length.\n     * @return the length of the longest preceding context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRule(TransliterationRule rule)",
    "returnType" : "void",
    "comment" : "\n     * Add a rule to this set.  Rules are added in order, and order is\n     * significant.\n     * @param rule the rule to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void freeze()",
    "returnType" : "void",
    "comment" : "\n     * Close this rule set to further additions, check it for masked rules,\n     * and index it to optimize performance.\n     * @exception IllegalArgumentException if some rules are masked\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean transliterate(Replaceable text, Transliterator.Position pos, boolean incremental)",
    "returnType" : "boolean",
    "comment" : "\n     * Transliterate the given text with the given UTransPosition\n     * indices.  Return true if the transliteration should continue\n     * or false if it should halt (because of a U_PARTIAL_MATCH match).\n     * Note that false is only ever returned if isIncremental is true.\n     * @param text the text to be transliterated\n     * @param pos the position indices, which will be updated\n     * @param incremental if true, assume new text may be inserted\n     * at index.limit, and return false if there is a partial match.\n     * @return true unless a U_PARTIAL_MATCH has been obtained,\n     * indicating that transliteration should stop until more text\n     * arrives.\n     ",
    "links" : [ ]
  }, {
    "name" : " String toRules(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Create rule strings that represents this rule set.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addSourceTargetSet(UnicodeSet filter, UnicodeSet sourceSet, UnicodeSet targetSet)",
    "returnType" : "void",
    "comment" : " TODO Merge into r.addSourceTargetSet, to avoid duplicate testing",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getMaximumContextLength()", "public void addRule(TransliterationRule rule)", "public void freeze()", "public boolean transliterate(Replaceable text, Transliterator.Position pos, boolean incremental)", " String toRules(boolean escapeUnprintable)", " void addSourceTargetSet(UnicodeSet filter, UnicodeSet sourceSet, UnicodeSet targetSet)" ],
  "variableNames" : [ "ruleVector", "maxContextLength", "rules", "index" ]
}