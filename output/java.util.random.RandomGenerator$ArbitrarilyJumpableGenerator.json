{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/random/RandomGenerator.java",
  "packageName" : "java.util.random",
  "className" : "ArbitrarilyJumpableGenerator",
  "comment" : "\n     * This interface is designed to provide a common protocol for objects that\n     * generate sequences of pseudorandom values and can easily <i>jump</i>\n     * forward, by an arbitrary amount, to a distant point in the state cycle.\n     *\n     * <p> Ideally, all {@link ArbitrarilyJumpableGenerator} objects produced by\n     * iterative jumping from a single original\n     * {@link ArbitrarilyJumpableGenerator} object are statistically independent\n     * of one another and individually uniform, provided that they do not\n     * traverse overlapping portions of the state cycle. In practice, one must\n     * settle for some approximation to independence and uniformity. In\n     * particular, a specific implementation may assume that each generator in a\n     * stream produced by the {@link JumpableGenerator#jump() jump}() method is\n     * used to produce a number of values no larger than the jump distance\n     * specified. Implementors are advised to use algorithms whose period is at\n     * least 2<sup>127</sup>.\n     *\n     * <p> For many applications, it suffices to jump forward by a power of two\n     * or some small multiple of a power of two, but this power of two may not\n     * be representable as a {@code long} value. To avoid the use of\n     * {@link BigInteger} values as jump distances, {@code double} values are\n     * used instead.\n     *\n     * <p> Methods are provided to perform a single jump operation and also to\n     * produce a stream of generators produced from the original by iterative\n     * copying and jumping of internal state. A typical strategy for a\n     * multithreaded application is to create a single\n     * {@link ArbitrarilyJumpableGenerator} object, call its\n     * {@link JumpableGenerator#jump() jump}() method exactly once, and then\n     * parcel out generators from the resulting stream, one to each thread.\n     * However, each generator produced also has type\n     * {@link ArbitrarilyJumpableGenerator}; with care, different jump distances\n     * can be used to traverse the entire state cycle in various ways.\n     *\n     * <p> Objects that implement {@link ArbitrarilyJumpableGenerator} are\n     * typically not cryptographically secure. Consider instead using\n     * {@link SecureRandom} to get a cryptographically secure pseudo-random\n     * number generator for use by security-sensitive applications.\n     ",
  "links" : [ "java.security.SecureRandom", "ArbitrarilyJumpableGenerator", "java.math.BigInteger", "#jump()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static ArbitrarilyJumpableGenerator of(String name)",
    "returnType" : "ArbitrarilyJumpableGenerator",
    "comment" : "\n         * Returns an instance of {@link ArbitrarilyJumpableGenerator} that\n         * utilizes the {@code name} <a href=\"package-summary.html#algorithms\">algorithm</a>.\n         *\n         * @param name  Name of random number generator\n         *              <a href=\"package-summary.html#algorithms\">algorithm</a>\n         *\n         * @return An instance of {@link ArbitrarilyJumpableGenerator}\n         *\n         * @throws NullPointerException if name is null\n         * @throws IllegalArgumentException if the named algorithm is not found\n         ",
    "links" : [ "ArbitrarilyJumpableGenerator" ]
  }, {
    "name" : " ArbitrarilyJumpableGenerator copy()",
    "returnType" : "ArbitrarilyJumpableGenerator",
    "comment" : "\n         * Returns a new generator whose internal state is an exact copy of this\n         * generator (therefore their future behavior should be identical if\n         * subjected to the same series of operations).\n         *\n         * @return a new object that is a copy of this generator\n         ",
    "links" : [ ]
  }, {
    "name" : " void jumpPowerOfTwo(int logDistance)",
    "returnType" : "void",
    "comment" : "\n         * Alter the state of this pseudorandom number generator so as to jump\n         * forward a distance equal to 2<sup>{@code logDistance}</sup> within\n         * its state cycle.\n         *\n         * @param logDistance the base-2 logarithm of the distance to jump forward within the state\n         *                    cycle\n         *\n         * @throws IllegalArgumentException if {@code logDistance} is\n         *                                  2<sup>{@code logDistance}</sup> is\n         *                                  greater than the period of this generator\n         ",
    "links" : [ ]
  }, {
    "name" : " void jump(double distance)",
    "returnType" : "void",
    "comment" : "\n         * Alter the state of this pseudorandom number generator so as to jump\n         * forward a specified distance within its state cycle.\n         *\n         * @param distance the distance to jump forward within the state cycle\n         *\n         * @throws IllegalArgumentException if {@code distance} is not greater than\n         *                                  or equal to 0.0, or is greater than the\n         *                                  period of this generator\n         ",
    "links" : [ ]
  }, {
    "name" : " void jump()",
    "returnType" : "void",
    "comment" : "\n         * Alter the state of this pseudorandom number generator so as to jump\n         * forward a large, fixed distance (typically 2<sup>64</sup> or more)\n         * within its state cycle. The distance used is that returned by method\n         * {@link ArbitrarilyJumpableGenerator#jumpDistance() jumpDistance}().\n         *\n         * @implSpec The default implementation invokes jump(jumpDistance()).\n         ",
    "links" : [ "#jumpDistance()" ]
  }, {
    "name" : " Stream<ArbitrarilyJumpableGenerator> jumps(double distance)",
    "returnType" : "Stream<ArbitrarilyJumpableGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the\n         * {@link ArbitrarilyJumpableGenerator} interface, produced by jumping\n         * copies of this generator by different integer multiples of the\n         * specified jump distance.\n         *\n         * @param distance a distance to jump forward within the state cycle\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code distance} is not greater than\n         *                                  or equal to 0.0, or is greater than the\n         *                                  period of this generator\n         *\n         * @implSpec The default implementation is equivalent to\n         * {@link ArbitrarilyJumpableGenerator#jumps(long) jumps}\n         * ({@link Long#MAX_VALUE Long.MAX_VALUE}).\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#jumps(long)", "#MAX_VALUE", "ArbitrarilyJumpableGenerator" ]
  }, {
    "name" : " Stream<ArbitrarilyJumpableGenerator> jumps(long streamSize, double distance)",
    "returnType" : "Stream<ArbitrarilyJumpableGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link ArbitrarilyJumpableGenerator} interface, produced by jumping\n         * copies of this generator by different integer multiples of the\n         * specified jump distance.\n         *\n         * @param streamSize the number of generators to generate\n         * @param distance   a distance to jump forward within the state cycle\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is less than zero or if\n         *                                  {@code distance} is not greater than\n         *                                  or equal to 0.0, or is greater than the\n         *                                  period of this generator\n         *\n         * @implSpec The default implementation is equivalent to\n         * jumps(distance).limit(streamSize).\n         ",
    "links" : [ "java.util.random.RandomGenerator", "ArbitrarilyJumpableGenerator" ]
  }, {
    "name" : " void leap()",
    "returnType" : "void",
    "comment" : "\n         * Alter the state of this pseudorandom number generator so as to jump\n         * forward a very large, fixed distance (typically 2<sup>128</sup> or\n         * more) within its state cycle. The distance used is that returned by\n         * method\n         * {@link ArbitrarilyJumpableGenerator#leapDistance() leapDistance}().\n         ",
    "links" : [ "#leapDistance()" ]
  }, {
    "name" : " ArbitrarilyJumpableGenerator copyAndJump(double distance)",
    "returnType" : "ArbitrarilyJumpableGenerator",
    "comment" : "\n         * Copy this generator, jump this generator forward, then return the\n         * copy.\n         *\n         * @param distance a distance to jump forward within the state cycle\n         *\n         * @return a copy of this generator object before the jump occurred\n         *\n         * @throws IllegalArgumentException if {@code distance} is not greater than\n         *                                  or equal to 0.0, or is greater than the\n         *                                  period of this generator\n         *\n         * @implSpec The default implementation copies this, jumps(distance) and then\n         * returns the copy.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static ArbitrarilyJumpableGenerator of(String name)", " ArbitrarilyJumpableGenerator copy()", " void jumpPowerOfTwo(int logDistance)", " void jump(double distance)", " void jump()", " Stream<ArbitrarilyJumpableGenerator> jumps(double distance)", " Stream<ArbitrarilyJumpableGenerator> jumps(long streamSize, double distance)", " void leap()", " ArbitrarilyJumpableGenerator copyAndJump(double distance)" ],
  "variableNames" : [ ]
}