{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/json/JSONTokener.java",
  "packageName" : "org.json",
  "className" : "JSONTokener",
  "comment" : "\n * Parses a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n * encoded string into the corresponding object. Most clients of\n * this class will use only need the {@link #JSONTokener(String) constructor}\n * and {@link #nextValue} method. Example usage: <pre>\n * String json = \"{\"\n *         + \"  \\\"query\\\": \\\"Pizza\\\", \"\n *         + \"  \\\"locations\\\": [ 94043, 90210 ] \"\n *         + \"}\";\n *\n * JSONObject object = (JSONObject) new JSONTokener(json).nextValue();\n * String query = object.getString(\"query\");\n * JSONArray locations = object.getJSONArray(\"locations\");</pre>\n *\n * <p>For best interoperability and performance use JSON that complies with\n * RFC 4627, such as that generated by {@link JSONStringer}. For legacy reasons\n * this parser is lenient, so a successful parse does not indicate that the\n * input string was valid JSON. All of the following syntax errors will be\n * ignored:\n * <ul>\n *   <li>End of line comments starting with {@code //} or {@code #} and ending\n *       with a newline character.\n *   <li>C-style comments starting with {@code /*} and ending with\n *       {@code *}{@code /}. Such comments may not be nested.\n *   <li>Strings that are unquoted or {@code 'single quoted'}.\n *   <li>Hexadecimal integers prefixed with {@code 0x} or {@code 0X}.\n *   <li>Octal integers prefixed with {@code 0}.\n *   <li>Array elements separated by {@code ;}.\n *   <li>Unnecessary array separators. These are interpreted as if null was the\n *       omitted value.\n *   <li>Key-value pairs separated by {@code =} or {@code =>}.\n *   <li>Key-value pairs separated by {@code ;}.\n * </ul>\n *\n * <p>Each tokener may be used to parse a single JSON string. Instances of this\n * class are not thread safe. Although this class is nonfinal, it was not\n * designed for inheritance and should not be subclassed. In particular,\n * self-use by overrideable methods is not specified. See <i>Effective Java</i>\n * Item 17, \"Design and Document or inheritance or else prohibit it\" for further\n * information.\n ",
  "links" : [ "#JSONTokener(String)", "org.json.JSONStringer", "#nextValue" ],
  "variables" : [ {
    "name" : "in",
    "type" : "String",
    "comment" : " The input JSON. ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : "\n     * The index of the next character to be returned by {@link #next}. When\n     * the input is exhausted, this equals the input's length.\n     ",
    "links" : [ "#next" ]
  } ],
  "methods" : [ {
    "name" : "public Object nextValue() throws JSONException",
    "returnType" : "Object",
    "comment" : "\n     * Returns the next value from the input.\n     *\n     * @return a {@link JSONObject}, {@link JSONArray}, String, Boolean,\n     *     Integer, Long, Double or {@link JSONObject#NULL}.\n     * @throws JSONException if the input is malformed.\n     ",
    "links" : [ "org.json.JSONObject", "org.json.JSONObject#NULL", "org.json.JSONArray" ]
  }, {
    "name" : "private int nextCleanInternal() throws JSONException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void skipToEndOfLine()",
    "returnType" : "void",
    "comment" : "\n     * Advances the position until after the next newline character. If the line\n     * is terminated by \"\\r\\n\", the '\\n' must be consumed as whitespace by the\n     * caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextString(char quote) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Returns the string up to but not including {@code quote}, unescaping any\n     * character escape sequences encountered along the way. The opening quote\n     * should have already been read. This consumes the closing quote, but does\n     * not include it in the returned string.\n     *\n     * @param quote either ' or \".\n     ",
    "links" : [ ]
  }, {
    "name" : "private char readEscapeCharacter() throws JSONException",
    "returnType" : "char",
    "comment" : "\n     * Unescapes the character identified by the character or characters that\n     * immediately follow a backslash. The backslash '\\' should have already\n     * been read. This supports both unicode escapes \"u000A\" and two-character\n     * escapes \"\\n\".\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object readLiteral() throws JSONException",
    "returnType" : "Object",
    "comment" : "\n     * Reads a null, boolean, numeric or unquoted string literal value. Numeric\n     * values will be returned as an Integer, Long, or Double, in that order of\n     * preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String nextToInternal(String excluded)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string up to but not including any of the given characters or\n     * a newline character. This does not consume the excluded character.\n     ",
    "links" : [ ]
  }, {
    "name" : "private JSONObject readObject() throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Reads a sequence of key/value pairs and the trailing closing brace '}' of\n     * an object. The opening brace '{' should have already been read.\n     ",
    "links" : [ ]
  }, {
    "name" : "private JSONArray readArray() throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Reads a sequence of values and the trailing closing brace ']' of an\n     * array. The opening brace '[' should have already been read. Note that\n     * \"[]\" yields an empty array, but \"[,]\" returns a two-element array\n     * equivalent to \"[null,null]\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONException syntaxError(String message)",
    "returnType" : "JSONException",
    "comment" : "\n     * Returns an exception containing the given message plus the current\n     * position and the entire input string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the current position and the entire input string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean more()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true until the input has been exhausted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char next()",
    "returnType" : "char",
    "comment" : "\n     * Returns the next available character, or the null character '\\0' if all\n     * input has been exhausted. The return value of this method is ambiguous\n     * for JSON strings that contain the character '\\0'.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char next(char c) throws JSONException",
    "returnType" : "char",
    "comment" : "\n     * Returns the next available character if it equals {@code c}. Otherwise an\n     * exception is thrown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char nextClean() throws JSONException",
    "returnType" : "char",
    "comment" : "\n     * Returns the next character that is not whitespace and does not belong to\n     * a comment. If the input is exhausted before such a character can be\n     * found, the null character '\\0' is returned. The return value of this\n     * method is ambiguous for JSON strings that contain the character '\\0'.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String next(int length) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Returns the next {@code length} characters of the input.\n     *\n     * @throws JSONException if the remaining input is not long enough to\n     *     satisfy this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextTo(String excluded)",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link String#trim trimmed} string holding the characters up\n     * to but not including the first of:\n     * <ul>\n     *   <li>any character in {@code excluded}\n     *   <li>a newline character '\\n'\n     *   <li>a carriage return '\\r'\n     * </ul>\n     *\n     * @return a possibly-empty string\n     ",
    "links" : [ "#trim" ]
  }, {
    "name" : "public String nextTo(char excluded)",
    "returnType" : "String",
    "comment" : "\n     * Equivalent to {@code nextTo(String.valueOf(excluded))}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skipPast(String thru)",
    "returnType" : "void",
    "comment" : "\n     * Advances past all input up to and including the next occurrence of\n     * {@code thru}. If the remaining input doesn't contain {@code thru}, the\n     * input is exhausted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char skipTo(char to)",
    "returnType" : "char",
    "comment" : "\n     * Advances past all input up to but not including the next occurrence of\n     * {@code to}. If the remaining input doesn't contain {@code to}, the input\n     * is unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void back()",
    "returnType" : "void",
    "comment" : "\n     * Unreads the most recent character of input. If no input characters have\n     * been read, the input is unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int dehexchar(char hex)",
    "returnType" : "int",
    "comment" : "\n     * Returns the integer [0..15] value for the given hex character, or -1\n     * for non-hex input.\n     *\n     * @param hex a character in the ranges [0-9], [A-F] or [a-f]. Any other\n     *     character will yield a -1 result.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object nextValue() throws JSONException", "private int nextCleanInternal() throws JSONException", "private void skipToEndOfLine()", "public String nextString(char quote) throws JSONException", "private char readEscapeCharacter() throws JSONException", "private Object readLiteral() throws JSONException", "private String nextToInternal(String excluded)", "private JSONObject readObject() throws JSONException", "private JSONArray readArray() throws JSONException", "public JSONException syntaxError(String message)", "public String toString()", "public boolean more()", "public char next()", "public char next(char c) throws JSONException", "public char nextClean() throws JSONException", "public String next(int length) throws JSONException", "public String nextTo(String excluded)", "public String nextTo(char excluded)", "public void skipPast(String thru)", "public char skipTo(char to)", "public void back()", "public static int dehexchar(char hex)" ],
  "variableNames" : [ "in", "pos" ]
}