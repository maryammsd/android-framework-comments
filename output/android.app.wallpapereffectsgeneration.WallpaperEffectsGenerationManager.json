{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/wallpapereffectsgeneration/WallpaperEffectsGenerationManager.java",
  "packageName" : "android.app.wallpapereffectsgeneration",
  "className" : "WallpaperEffectsGenerationManager",
  "comment" : "\n * A {@link WallpaperEffectsGenerationManager} is the class that passes wallpaper effects\n * generation requests to wallpaper effect generation service. For example, create a cinematic\n * and render a cinematic live wallpaper with the response.\n *\n * Usage:\n * <pre>{@code\n *      mWallpaperEffectsGenerationManager =\n *          context.getSystemService(WallpaperEffectsGenerationManager.class);\n *      mWallpaperEffectsGenerationManager.\n *          generateCinematicEffect(cinematicEffectRequest, response->{\n *              // proceed cinematic effect response.\n *          });\n * }</pre>\n *\n * @hide\n ",
  "links" : [ "android.app.wallpapereffectsgeneration.WallpaperEffectsGenerationManager" ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IWallpaperEffectsGenerationManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void generateCinematicEffect(@NonNull CinematicEffectRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull CinematicEffectListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Execute a {@link android.app.wallpapereffectsgeneration.CinematicEffectRequest} from\n     * the given parameters to the wallpaper effects generation service. After the cinematic\n     * effect response is ready, the given listener is invoked by the system with the response.\n     * The listener may never receive a callback if unexpected error happened when proceeding\n     * request.\n     *\n     * @param request  request to generate cinematic effect.\n     * @param executor where the listener is invoked.\n     * @param listener listener invoked when the cinematic effect response is available.\n     * @hide\n     ",
    "links" : [ "android.app.wallpapereffectsgeneration.CinematicEffectRequest" ]
  } ],
  "methodNames" : [ "public void generateCinematicEffect(@NonNull CinematicEffectRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull CinematicEffectListener listener)" ],
  "variableNames" : [ "mService" ]
}