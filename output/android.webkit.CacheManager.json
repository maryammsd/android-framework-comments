{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/webkit/CacheManager.java",
  "packageName" : "android.webkit",
  "className" : "CacheManager",
  "comment" : " CacheManager may only be used if your activity contains a WebView.",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static File getCacheFileBaseDir()",
    "returnType" : "File",
    "comment" : "\n     * Gets the base directory in which the files used to store the contents of\n     * cache entries are placed. See\n     * {@link CacheManager.CacheResult#getLocalPath CacheManager.CacheResult.getLocalPath()}.\n     *\n     * @return the base directory of the cache\n     * @deprecated This method no longer has any effect and always returns {@code null}.\n     ",
    "links" : [ "CacheManager.CacheResult#getLocalPath" ]
  }, {
    "name" : "public static boolean cacheDisabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the HTTP cache is disabled.\n     *\n     * @return {@code true} if the HTTP cache is disabled\n     * @deprecated This method no longer has any effect and always returns {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean startCacheTransaction()",
    "returnType" : "boolean",
    "comment" : "\n     * Starts a cache transaction. Returns {@code true} if this is the only running\n     * transaction. Otherwise, this transaction is nested inside currently\n     * running transactions and {@code false} is returned.\n     *\n     * @return {@code true} if this is the only running transaction\n     * @deprecated This method no longer has any effect and always returns {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean endCacheTransaction()",
    "returnType" : "boolean",
    "comment" : "\n     * Ends the innermost cache transaction and returns whether this was the\n     * only running transaction.\n     *\n     * @return {@code true} if this was the only running transaction\n     * @deprecated This method no longer has any effect and always returns {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CacheResult getCacheFile(String url, Map<String, String> headers)",
    "returnType" : "CacheResult",
    "comment" : "\n     * Gets the cache entry for the specified URL, or {@code null} if none is found.\n     * If a non-null value is provided for the HTTP headers map, and the cache\n     * entry needs validation, appropriate headers will be added to the map.\n     * The input stream of the CacheEntry object should be closed by the caller\n     * when access to the underlying file is no longer required.\n     *\n     * @param url the URL for which a cache entry is requested\n     * @param headers a map from HTTP header name to value, to be populated\n     *                for the returned cache entry\n     * @return the cache entry for the specified URL\n     * @deprecated This method no longer has any effect and always returns {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void saveCacheFile(String url, CacheResult cacheResult)",
    "returnType" : "void",
    "comment" : "\n     * Adds a cache entry to the HTTP cache for the specicifed URL. Also closes\n     * the cache entry's output stream.\n     *\n     * @param url the URL for which the cache entry should be added\n     * @param cacheResult the cache entry to add\n     * @deprecated Access to the HTTP cache will be removed in a future release.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void saveCacheFile(String url, long postIdentifier, CacheResult cacheRet)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static File getCacheFileBaseDir()", "public static boolean cacheDisabled()", "public static boolean startCacheTransaction()", "public static boolean endCacheTransaction()", "public static CacheResult getCacheFile(String url, Map<String, String> headers)", "public static void saveCacheFile(String url, CacheResult cacheResult)", " static void saveCacheFile(String url, long postIdentifier, CacheResult cacheRet)" ]
}