{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/InlineSuggestionRenderService.java",
  "packageName" : "android.service.autofill",
  "className" : "InlineSuggestionRenderService",
  "comment" : "\n * A service that renders an inline presentation view given the {@link InlinePresentation}.\n *\n * {@hide}\n ",
  "links" : [ "android.service.autofill.InlinePresentation" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_INLINE_SUGGESTION_RENDER_SERVICE} permission so that\n     * other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_INLINE_SUGGESTION_RENDER_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "mMainHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IInlineSuggestionUiCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveInlineSuggestions",
    "type" : "LruCache<InlineSuggestionUiImpl, Boolean>",
    "comment" : "\n     * A local LRU cache keeping references to the inflated {@link SurfaceControlViewHost}s, so\n     * they can be released properly when no longer used. Each view needs to be tracked separately,\n     * therefore for simplicity we use the hash code of the value object as key in the cache.\n     ",
    "links" : [ "android.view.SurfaceControlViewHost" ]
  } ],
  "methods" : [ {
    "name" : "private Size measuredSize(@NonNull View view, int width, int height, @NonNull Size minSize, @NonNull Size maxSize)",
    "returnType" : "Size",
    "comment" : "\n     * If the specified {@code width}/{@code height} is an exact value, then it will be returned as\n     * is, otherwise the method tries to measure a size that is just large enough to fit the view\n     * content, within constraints posed by {@code minSize} and {@code maxSize}.\n     *\n     * @param view    the view for which we measure the size\n     * @param width   the expected width of the view, either an exact value or {@link\n     *                ViewGroup.LayoutParams#WRAP_CONTENT}\n     * @param height  the expected width of the view, either an exact value or {@link\n     *                ViewGroup.LayoutParams#WRAP_CONTENT}\n     * @param minSize the lower bound of the size to be returned\n     * @param maxSize the upper bound of the size to be returned\n     * @return the measured size of the view based on the given size constraints.\n     ",
    "links" : [ "ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "private void handleRenderSuggestion(IInlineSuggestionUiCallback callback, InlinePresentation presentation, int width, int height, IBinder hostInputToken, int displayId, int userId, int sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleGetInlineSuggestionsRendererInfo(@NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDestroySuggestionViews(int userId, int sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter pw, @NonNull String[] args)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void startIntentSender(@NonNull IntentSender intentSender)",
    "returnType" : "void",
    "comment" : "\n     * Starts the {@link IntentSender} from the client app.\n     *\n     * @param intentSender the {@link IntentSender} to start the attribution UI from the client\n     *                     app.\n     ",
    "links" : [ "android.content.IntentSender" ]
  }, {
    "name" : "public Bundle onGetInlineSuggestionsRendererInfo()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the metadata about the renderer. Returns {@code Bundle.Empty} if no metadata is\n     * provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View onRenderSuggestion(@NonNull InlinePresentation presentation, int width, int height)",
    "returnType" : "View",
    "comment" : "\n     * Renders the slice into a view.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private Size measuredSize(@NonNull View view, int width, int height, @NonNull Size minSize, @NonNull Size maxSize)", "private void handleRenderSuggestion(IInlineSuggestionUiCallback callback, InlinePresentation presentation, int width, int height, IBinder hostInputToken, int displayId, int userId, int sessionId)", "private void handleGetInlineSuggestionsRendererInfo(@NonNull RemoteCallback callback)", "private void handleDestroySuggestionViews(int userId, int sessionId)", "protected final void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter pw, @NonNull String[] args)", "public final IBinder onBind(@NonNull Intent intent)", "public final void startIntentSender(@NonNull IntentSender intentSender)", "public Bundle onGetInlineSuggestionsRendererInfo()", "public View onRenderSuggestion(@NonNull InlinePresentation presentation, int width, int height)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "mMainHandler", "mCallback", "mActiveInlineSuggestions" ]
}