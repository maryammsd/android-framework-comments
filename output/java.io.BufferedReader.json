{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/BufferedReader.java",
  "packageName" : "java.io",
  "className" : "BufferedReader",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "in",
    "type" : "Reader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cb",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nChars",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nextChar",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALIDATED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNMARKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "markedChar",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readAheadLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "skipLF",
    "type" : "boolean",
    "comment" : " If the next character is a line feed, skip it ",
    "links" : [ ]
  }, {
    "name" : "markedSkipLF",
    "type" : "boolean",
    "comment" : " The skipLF flag when the mark was set ",
    "links" : [ ]
  }, {
    "name" : "defaultCharBufferSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultExpectedLineLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : " Checks to make sure that the stream has not been closed ",
    "links" : [ ]
  }, {
    "name" : "private void fill() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Fills the input buffer, taking the mark into account if it is valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single character.\n     *\n     * @return The character read, as an integer in the range\n     *         0 to 65535 (<tt>0x00-0xffff</tt>), or -1 if the\n     *         end of the stream has been reached\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "private int read1(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into a portion of an array, reading from the underlying\n     * stream if necessary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into a portion of an array.\n     *\n     * <p> This method implements the general contract of the corresponding\n     * <code>{@link Reader#read(char[], int, int) read}</code> method of the\n     * <code>{@link Reader}</code> class.  As an additional convenience, it\n     * attempts to read as many characters as possible by repeatedly invoking\n     * the <code>read</code> method of the underlying stream.  This iterated\n     * <code>read</code> continues until one of the following conditions becomes\n     * true: <ul>\n     *\n     *   <li> The specified number of characters have been read,\n     *\n     *   <li> The <code>read</code> method of the underlying stream returns\n     *   <code>-1</code>, indicating end-of-file, or\n     *\n     *   <li> The <code>ready</code> method of the underlying stream\n     *   returns <code>false</code>, indicating that further input requests\n     *   would block.\n     *\n     * </ul> If the first <code>read</code> on the underlying stream returns\n     * <code>-1</code> to indicate end-of-file then this method returns\n     * <code>-1</code>.  Otherwise this method returns the number of characters\n     * actually read.\n     *\n     * <p> Subclasses of this class are encouraged, but not required, to\n     * attempt to read as many characters as possible in the same fashion.\n     *\n     * <p> Ordinarily this method takes characters from this stream's character\n     * buffer, filling it from the underlying stream as necessary.  If,\n     * however, the buffer is empty, the mark is not valid, and the requested\n     * length is at least as large as the buffer, then this method will read\n     * characters directly from the underlying stream into the given array.\n     * Thus redundant <code>BufferedReader</code>s will not copy data\n     * unnecessarily.\n     *\n     * @param      cbuf  Destination buffer\n     * @param      off   Offset at which to start storing characters\n     * @param      len   Maximum number of characters to read\n     *\n     * @return     The number of characters read, or -1 if the end of the\n     *             stream has been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     * @exception  IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ "java.io.Reader#read(char", "java.io.Reader" ]
  }, {
    "name" : " String readLine(boolean ignoreLF) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Reads a line of text.  A line is considered to be terminated by any one\n     * of a line feed ('\\n'), a carriage return ('\\r'), a carriage return\n     * followed immediately by a line feed, or by reaching the end-of-file\n     * (EOF).\n     *\n     * @param      ignoreLF  If true, the next '\\n' will be skipped\n     *\n     * @return     A String containing the contents of the line, not including\n     *             any line-termination characters, or null if the end of the\n     *             stream has been reached without reading any characters\n     *\n     * @see        java.io.LineNumberReader#readLine()\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public String readLine() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Reads a line of text.  A line is considered to be terminated by any one\n     * of a line feed ('\\n'), a carriage return ('\\r'), a carriage return\n     * followed immediately by a line feed, or by reaching the end-of-file\n     * (EOF).\n     *\n     * @return     A String containing the contents of the line, not including\n     *             any line-termination characters, or null if the end of the\n     *             stream has been reached without reading any characters\n     *\n     * @exception  IOException  If an I/O error occurs\n     *\n     * @see java.nio.file.Files#readAllLines\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips characters.\n     *\n     * @param  n  The number of characters to skip\n     *\n     * @return    The number of characters actually skipped\n     *\n     * @exception  IllegalArgumentException  If <code>n</code> is negative.\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean ready() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream is ready to be read.  A buffered character\n     * stream is ready if the buffer is not empty, or if the underlying\n     * character stream is ready.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream supports the mark() operation, which it does.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readAheadLimit) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Marks the present position in the stream.  Subsequent calls to reset()\n     * will attempt to reposition the stream to this point.\n     *\n     * @param readAheadLimit   Limit on the number of characters that may be\n     *                         read while still preserving the mark. An attempt\n     *                         to reset the stream after reading characters\n     *                         up to this limit or beyond may fail.\n     *                         A limit value larger than the size of the input\n     *                         buffer will cause a new buffer to be allocated\n     *                         whose size is no smaller than limit.\n     *                         Therefore large values should be used with care.\n     *\n     * @exception  IllegalArgumentException  If {@code readAheadLimit < 0}\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Resets the stream to the most recent mark.\n     *\n     * @exception  IOException  If the stream has never been marked,\n     *                          or if the mark has been invalidated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Stream<String> lines()",
    "returnType" : "Stream<String>",
    "comment" : "\n     * Returns a {@code Stream}, the elements of which are lines read from\n     * this {@code BufferedReader}.  The {@link Stream} is lazily populated,\n     * i.e., read only occurs during the\n     * <a href=\"../util/stream/package-summary.html#StreamOps\">terminal\n     * stream operation</a>.\n     *\n     * <p> The reader must not be operated on during the execution of the\n     * terminal stream operation. Otherwise, the result of the terminal stream\n     * operation is undefined.\n     *\n     * <p> After execution of the terminal stream operation there are no\n     * guarantees that the reader will be at a specific position from which to\n     * read the next character or line.\n     *\n     * <p> If an {@link IOException} is thrown when accessing the underlying\n     * {@code BufferedReader}, it is wrapped in an {@link\n     * UncheckedIOException} which will be thrown from the {@code Stream}\n     * method that caused the read to take place. This method will return a\n     * Stream if invoked on a BufferedReader that is closed. Any operation on\n     * that stream that requires reading from the BufferedReader after it is\n     * closed, will cause an UncheckedIOException to be thrown.\n     *\n     * @return a {@code Stream<String>} providing the lines of text\n     *         described by this {@code BufferedReader}\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.io.UncheckedIOException", "java.util.stream.Stream", "java.io.IOException" ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "private void fill() throws IOException", "public int read() throws IOException", "private int read1(char[] cbuf, int off, int len) throws IOException", "public int read(char[] cbuf, int off, int len) throws IOException", " String readLine(boolean ignoreLF) throws IOException", "public String readLine() throws IOException", "public long skip(long n) throws IOException", "public boolean ready() throws IOException", "public boolean markSupported()", "public void mark(int readAheadLimit) throws IOException", "public void reset() throws IOException", "public void close() throws IOException", "public Stream<String> lines()" ],
  "variableNames" : [ "in", "cb", "nChars", "nextChar", "INVALIDATED", "UNMARKED", "markedChar", "readAheadLimit", "skipLF", "markedSkipLF", "defaultCharBufferSize", "defaultExpectedLineLength" ]
}