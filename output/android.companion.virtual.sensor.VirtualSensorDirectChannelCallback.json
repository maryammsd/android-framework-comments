{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/sensor/VirtualSensorDirectChannelCallback.java",
  "packageName" : "android.companion.virtual.sensor",
  "className" : "VirtualSensorDirectChannelCallback",
  "comment" : "\n * Interface for notifying the virtual device owner about any {@link SensorDirectChannel} events.\n *\n * <p>This callback can be used for controlling the sensor event injection to direct channels. A\n * typical order of callback invocations is:\n * <ul>\n *     <li>{@code onDirectChannelCreated} - the channel handle and the associated shared memory\n *     should be stored by the virtual device</li>\n *     <li>{@code onDirectChannelConfigured} with a positive {@code rateLevel} - the virtual\n *     device should start writing to the shared memory for the associated channel with the\n *     requested parameters.</li>\n *     <li>{@code onDirectChannelConfigured} with a {@code rateLevel = RATE_STOP} - the virtual\n *     device should stop writing to the shared memory for the associated channel.</li>\n *     <li>{@code onDirectChannelDestroyed} - the shared memory associated with the channel\n *     handle should be closed.</li>\n * </ul>\n *\n * <p>The callback is tied to the VirtualDevice's lifetime as the virtual sensors are created when\n * the device is created and destroyed when the device is destroyed.\n *\n * @see VirtualSensorDirectChannelWriter\n *\n * @hide\n ",
  "links" : [ "android.hardware.SensorDirectChannel" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onDirectChannelCreated(@IntRange(from = 1) int channelHandle, @NonNull SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * Called when a {@link android.hardware.SensorDirectChannel} is created.\n     *\n     * <p>The {@link android.hardware.SensorManager} instance used to create the direct channel must\n     * be associated with the virtual device.\n     *\n     * @param channelHandle Identifier of the newly created channel.\n     * @param sharedMemory writable shared memory region.\n     *\n     * @see android.hardware.SensorManager#createDirectChannel(MemoryFile)\n     * @see #onDirectChannelConfigured\n     * @see #onDirectChannelDestroyed\n     ",
    "links" : [ "android.hardware.SensorManager", "android.hardware.SensorDirectChannel" ]
  }, {
    "name" : " void onDirectChannelDestroyed(@IntRange(from = 1) int channelHandle)",
    "returnType" : "void",
    "comment" : "\n     * Called when a {@link android.hardware.SensorDirectChannel} is destroyed.\n     *\n     * <p>The virtual device must perform any clean-up and close the shared memory that was\n     * received with the {@link #onDirectChannelCreated} callback and the corresponding\n     * {@code channelHandle}.\n     *\n     * @param channelHandle Identifier of the channel that was destroyed.\n     *\n     * @see SensorDirectChannel#close()\n     ",
    "links" : [ "android.hardware.SensorDirectChannel", "#onDirectChannelCreated" ]
  }, {
    "name" : " void onDirectChannelConfigured(@IntRange(from = 1) int channelHandle, @NonNull VirtualSensor sensor, @SensorDirectChannel.RateLevel int rateLevel, @IntRange(from = 1) int reportToken)",
    "returnType" : "void",
    "comment" : "\n     * Called when a {@link android.hardware.SensorDirectChannel} is configured.\n     *\n     * <p>Sensor events for the corresponding sensor should be written at the indicated rate to the\n     * shared memory region that was received with the {@link #onDirectChannelCreated} callback and\n     * the corresponding {@code channelHandle}. The events should be written in the correct format\n     * and with the provided {@code reportToken} until the channel is reconfigured with\n     * {@link SensorDirectChannel#RATE_STOP}.\n     *\n     * <p>The sensor must support direct channel in order for this callback to be invoked. Only\n     * {@link MemoryFile} sensor direct channels are supported for virtual sensors.\n     *\n     * @param channelHandle Identifier of the channel that was configured.\n     * @param sensor The sensor, for which the channel was configured.\n     * @param rateLevel The rate level used to configure the direct sensor channel.\n     * @param reportToken A positive sensor report token, used to differentiate between events from\n     *   different sensors within the same channel.\n     *\n     * @see VirtualSensorConfig.Builder#setHighestDirectReportRateLevel(int)\n     * @see VirtualSensorConfig.Builder#setDirectChannelTypesSupported(int)\n     * @see android.hardware.SensorManager#createDirectChannel(MemoryFile)\n     * @see #onDirectChannelCreated\n     * @see SensorDirectChannel#configure(Sensor, int)\n     ",
    "links" : [ "android.hardware.SensorDirectChannel", "android.os.MemoryFile", "#onDirectChannelCreated", "android.hardware.SensorDirectChannel#RATE_STOP" ]
  } ],
  "methodNames" : [ " void onDirectChannelCreated(@IntRange(from = 1) int channelHandle, @NonNull SharedMemory sharedMemory)", " void onDirectChannelDestroyed(@IntRange(from = 1) int channelHandle)", " void onDirectChannelConfigured(@IntRange(from = 1) int channelHandle, @NonNull VirtualSensor sensor, @SensorDirectChannel.RateLevel int rateLevel, @IntRange(from = 1) int reportToken)" ],
  "variableNames" : [ ]
}