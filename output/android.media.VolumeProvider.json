{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/VolumeProvider.java",
  "packageName" : "android.media",
  "className" : "VolumeProvider",
  "comment" : "\n * Handles requests to adjust or set the volume on a session. This is also used\n * to push volume updates back to the session. The provider must call\n * {@link #setCurrentVolume(int)} each time the volume being provided changes.\n * <p>\n * You can set a volume provider on a session by calling\n * {@link MediaSession#setPlaybackToRemote}.\n ",
  "links" : [ "#setCurrentVolume(int)", "android.media.session.MediaSession#setPlaybackToRemote" ],
  "variables" : [ {
    "name" : "VOLUME_CONTROL_FIXED",
    "type" : "int",
    "comment" : "\n     * The volume is fixed and can not be modified. Requests to change volume\n     * should be ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_CONTROL_RELATIVE",
    "type" : "int",
    "comment" : "\n     * The volume control uses relative adjustment via\n     * {@link #onAdjustVolume(int)}. Attempts to set the volume to a specific\n     * value should be ignored.\n     ",
    "links" : [ "#onAdjustVolume(int)" ]
  }, {
    "name" : "VOLUME_CONTROL_ABSOLUTE",
    "type" : "int",
    "comment" : "\n     * The volume control uses an absolute value. It may be adjusted using\n     * {@link #onAdjustVolume(int)} or set directly using\n     * {@link #onSetVolumeTo(int)}.\n     ",
    "links" : [ "#onSetVolumeTo(int)", "#onAdjustVolume(int)" ]
  }, {
    "name" : "mControlType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxVolume",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControlId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentVolume",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int getVolumeControl()",
    "returnType" : "int",
    "comment" : "\n     * Gets the volume control type that this volume provider uses.\n     *\n     * <p>One of {@link #VOLUME_CONTROL_FIXED}, {@link #VOLUME_CONTROL_ABSOLUTE}, or {@link\n     * #VOLUME_CONTROL_RELATIVE}.\n     *\n     * @return The volume control type for this volume provider\n     ",
    "links" : [ "#VOLUME_CONTROL_FIXED", "#VOLUME_CONTROL_ABSOLUTE", "#VOLUME_CONTROL_RELATIVE" ]
  }, {
    "name" : "public final int getMaxVolume()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum volume this provider allows.\n     *\n     * @return The max allowed volume.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrentVolume()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current volume. This will be the last value set by\n     * {@link #setCurrentVolume(int)}.\n     *\n     * @return The current volume.\n     ",
    "links" : [ "#setCurrentVolume(int)" ]
  }, {
    "name" : "public final void setCurrentVolume(int currentVolume)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the system that the current volume has been changed. This must be called every time\n     * the volume changes to ensure it is displayed properly.\n     *\n     * @param currentVolume The current volume on the output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getVolumeControlId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the {@link RoutingController#getId() routing controller id} of the {@link\n     * RoutingController} associated with this volume provider, or null if unset.\n     *\n     * <p>This id allows mapping this volume provider to a routing controller, which provides\n     * information about the media route and allows controlling its volume.\n     ",
    "links" : [ "android.media.MediaRouter2.RoutingController", "android.media.MediaRouter2.RoutingController#getId()" ]
  }, {
    "name" : "public void onSetVolumeTo(int volume)",
    "returnType" : "void",
    "comment" : "\n     * Override to handle requests to set the volume of the current output.\n     * After the volume has been modified {@link #setCurrentVolume} must be\n     * called to notify the system.\n     *\n     * @param volume The volume to set the output to.\n     ",
    "links" : [ "#setCurrentVolume" ]
  }, {
    "name" : "public void onAdjustVolume(int direction)",
    "returnType" : "void",
    "comment" : "\n     * Override to handle requests to adjust the volume of the current output.\n     * Direction will be one of {@link AudioManager#ADJUST_LOWER},\n     * {@link AudioManager#ADJUST_RAISE}, {@link AudioManager#ADJUST_SAME}.\n     * After the volume has been modified {@link #setCurrentVolume} must be\n     * called to notify the system.\n     *\n     * @param direction The direction to change the volume in.\n     ",
    "links" : [ "android.media.AudioManager#ADJUST_RAISE", "android.media.AudioManager#ADJUST_LOWER", "android.media.AudioManager#ADJUST_SAME", "#setCurrentVolume" ]
  }, {
    "name" : "public void setCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a callback to receive volume changes.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int getVolumeControl()", "public final int getMaxVolume()", "public final int getCurrentVolume()", "public final void setCurrentVolume(int currentVolume)", "public final String getVolumeControlId()", "public void onSetVolumeTo(int volume)", "public void onAdjustVolume(int direction)", "public void setCallback(Callback callback)" ],
  "variableNames" : [ "VOLUME_CONTROL_FIXED", "VOLUME_CONTROL_RELATIVE", "VOLUME_CONTROL_ABSOLUTE", "mControlType", "mMaxVolume", "mControlId", "mCurrentVolume", "mCallback" ]
}