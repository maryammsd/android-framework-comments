{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/se/omapi/Reader.java",
  "packageName" : "android.se.omapi",
  "className" : "Reader",
  "comment" : "\n * Instances of this class represent Secure Element Readers supported to this\n * device. These Readers can be physical devices or virtual devices. They can be\n * removable or not. They can contain Secure Element that can or cannot be\n * removed.\n *\n * @see <a href=\"http://globalplatform.org\">GlobalPlatform Open Mobile API</a>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "SEService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReader",
    "type" : "ISecureElementReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of this reader.\n     * <ul>\n     * <li>If this reader is a SIM reader, then its name must be \"SIM[Slot]\".</li>\n     * <li>If the reader is a SD or micro SD reader, then its name must be \"SD[Slot]\"</li>\n     * <li>If the reader is a embedded SE reader, then its name must be \"eSE[Slot]\"</li>\n     * </ul>\n     * Slot is a decimal number without leading zeros. The Numbering must start with 1\n     * (e.g. SIM1, SIM2, ... or SD1, SD2, ... or eSE1, eSE2, ...).\n     * The slot number “1” for a reader is optional\n     * (SIM and SIM1 are both valid for the first SIM-reader,\n     * but if there are two readers then the second reader must be named SIM2).\n     * This applies also for other SD or SE readers.\n     *\n     * @return the reader name, as a String.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Session openSession() throws IOException",
    "returnType" : "Session",
    "comment" : "\n     * Connects to a Secure Element in this reader. <br>\n     * This method prepares (initialises) the Secure Element for communication\n     * before the Session object is returned (e.g. powers the Secure Element by\n     * ICC ON if its not already on). There might be multiple sessions opened at\n     * the same time on the same reader. The system ensures the interleaving of\n     * APDUs between the respective sessions.\n     *\n     * @throws IOException if something went wrong with the communicating to the\n     *             Secure Element or the reader.\n     * @return a Session object to be used to create Channels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSecureElementPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a Secure Element is present in this reader.\n     *\n     * @throws IllegalStateException if the service is not connected\n     * @return <code>true</code> if the SE is present, <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SEService getSEService()",
    "returnType" : "SEService",
    "comment" : "\n     * Return the Secure Element service this reader is bound to.\n     *\n     * @return the SEService object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeSessions()",
    "returnType" : "void",
    "comment" : "\n     * Close all the sessions opened on this reader.\n     * All the channels opened by all these sessions will be closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * Close all the sessions opened on this reader and reset the reader.\n     * All the channels opened by all these sessions will be closed.\n     * @return <code>true</code> if reset success, <code>false</code> otherwise.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mName", "mService", "mReader", "mLock" ],
  "methodNames" : [ "public String getName()", "public Session openSession() throws IOException", "public boolean isSecureElementPresent()", "public SEService getSEService()", "public void closeSessions()", "public boolean reset()" ]
}