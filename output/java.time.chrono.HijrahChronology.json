{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/HijrahChronology.java",
  "packageName" : "java.time.chrono",
  "className" : "HijrahChronology",
  "comment" : "\n * The Hijrah calendar is a lunar calendar supporting Islamic calendars.\n * <p>\n * The HijrahChronology follows the rules of the Hijrah calendar system. The Hijrah\n * calendar has several variants based on differences in when the new moon is\n * determined to have occurred and where the observation is made.\n * In some variants the length of each month is\n * computed algorithmically from the astronomical data for the moon and earth and\n * in others the length of the month is determined by an authorized sighting\n * of the new moon. For the algorithmically based calendars the calendar\n * can project into the future.\n * For sighting based calendars only historical data from past\n * sightings is available.\n * <p>\n * The length of each month is 29 or 30 days.\n * Ordinary years have 354 days; leap years have 355 days.\n *\n * <p>\n * CLDR and LDML identify variants:\n * <table class=\"striped\" style=\"text-align:left\">\n * <caption style=\"display:none\">Variants of Hijrah Calendars</caption>\n * <thead>\n * <tr>\n * <th scope=\"col\">Chronology ID</th>\n * <th scope=\"col\">Calendar Type</th>\n * <th scope=\"col\">Locale extension, see {@link java.util.Locale}</th>\n * <th scope=\"col\">Description</th>\n * </tr>\n * </thead>\n * <tbody>\n * <tr>\n * <th scope=\"row\">Hijrah-umalqura</th>\n * <td>islamic-umalqura</td>\n * <td>ca-islamic-umalqura</td>\n * <td>Islamic - Umm Al-Qura calendar of Saudi Arabia</td>\n * </tr>\n * </tbody>\n * </table>\n * <p>Additional variants may be available through {@link Chronology#getAvailableChronologies()}.\n *\n * <p>Example</p>\n * <p>\n * Selecting the chronology from the locale uses {@link Chronology#ofLocale}\n * to find the Chronology based on Locale supported BCP 47 extension mechanism\n * to request a specific calendar (\"ca\"). For example,\n * </p>\n * <pre>\n *      Locale locale = Locale.forLanguageTag(\"en-US-u-ca-islamic-umalqura\");\n *      Chronology chrono = Chronology.ofLocale(locale);\n * </pre>\n *\n * @implSpec\n * This class is immutable and thread-safe.\n *\n * @implNote\n * Each Hijrah variant is configured individually. Each variant is defined by a\n * property resource that defines the {@code ID}, the {@code calendar type},\n * the start of the calendar, the alignment with the\n * ISO calendar, and the length of each month for a range of years.\n * The variants are loaded by HijrahChronology as a resource from\n * hijrah-config-&lt;calendar type&gt;.properties.\n * <p>\n * The Hijrah property resource is a set of properties that describe the calendar.\n * The syntax is defined by {@code java.util.Properties#load(Reader)}.\n * <table class=\"striped\" style=\"text-align:left\">\n * <caption style=\"display:none\">Configuration of Hijrah Calendar</caption>\n * <thead>\n * <tr>\n * <th scope=\"col\">Property Name</th>\n * <th scope=\"col\">Property value</th>\n * <th scope=\"col\">Description</th>\n * </tr>\n * </thead>\n * <tbody>\n * <tr>\n * <th scope=\"row\">id</th>\n * <td>Chronology Id, for example, \"Hijrah-umalqura\"</td>\n * <td>The Id of the calendar in common usage</td>\n * </tr>\n * <tr>\n * <th scope=\"row\">type</th>\n * <td>Calendar type, for example, \"islamic-umalqura\"</td>\n * <td>LDML defines the calendar types</td>\n * </tr>\n * <tr>\n * <th scope=\"row\">version</th>\n * <td>Version, for example: \"1.8.0_1\"</td>\n * <td>The version of the Hijrah variant data</td>\n * </tr>\n * <tr>\n * <th scope=\"row\">iso-start</th>\n * <td>ISO start date, formatted as {@code yyyy-MM-dd}, for example: \"1900-04-30\"</td>\n * <td>The ISO date of the first day of the minimum Hijrah year.</td>\n * </tr>\n * <tr>\n * <th scope=\"row\">yyyy - a numeric 4 digit year, for example \"1434\"</th>\n * <td>The value is a sequence of 12 month lengths,\n * for example: \"29 30 29 30 29 30 30 30 29 30 29 29\"</td>\n * <td>The lengths of the 12 months of the year separated by whitespace.\n * A numeric year property must be present for every year without any gaps.\n * The month lengths must be between 29-32 inclusive.\n * </td>\n * </tr>\n * </tbody>\n * </table>\n * <p>\n * Additional variants may be added by providing configuration properties files in\n * {@code <JAVA_HOME>/conf/chronology} directory. The properties\n * files should follow the naming convention of\n * {@code hijrah-config-<chronology id>_<calendar type>.properties}.\n *\n * @since 1.8\n ",
  "links" : [ "java.util.Locale", "java.time.chrono.Chronology#getAvailableChronologies()", "java.time.chrono.Chronology#ofLocale" ],
  "variables" : [ {
    "name" : "typeId",
    "type" : "String",
    "comment" : "\n     * The Hijrah Calendar id.\n     ",
    "links" : [ ]
  }, {
    "name" : "calendarType",
    "type" : "String",
    "comment" : "\n     * The Hijrah calendarType.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTANCE",
    "type" : "HijrahChronology",
    "comment" : "\n     * Singleton instance of the Islamic Umm Al-Qura calendar of Saudi Arabia.\n     * Other Hijrah chronology variants may be available from\n     * {@link Chronology#getAvailableChronologies}.\n     ",
    "links" : [ "java.time.chrono.Chronology#getAvailableChronologies" ]
  }, {
    "name" : "initComplete",
    "type" : "boolean",
    "comment" : "\n     * Flag to indicate the initialization of configuration data is complete.\n     * @see #checkCalendarInit()\n     ",
    "links" : [ ]
  }, {
    "name" : "hijrahEpochMonthStartDays",
    "type" : "int[]",
    "comment" : "\n     * Array of epoch days indexed by Hijrah Epoch month.\n     * Computed by {@link #loadCalendarData}.\n     ",
    "links" : [ "#loadCalendarData" ]
  }, {
    "name" : "minEpochDay",
    "type" : "int",
    "comment" : "\n     * The minimum epoch day of this Hijrah calendar.\n     * Computed by {@link #loadCalendarData}.\n     ",
    "links" : [ "#loadCalendarData" ]
  }, {
    "name" : "maxEpochDay",
    "type" : "int",
    "comment" : "\n     * The maximum epoch day for which calendar data is available.\n     * Computed by {@link #loadCalendarData}.\n     ",
    "links" : [ "#loadCalendarData" ]
  }, {
    "name" : "hijrahStartEpochMonth",
    "type" : "int",
    "comment" : "\n     * The minimum epoch month.\n     * Computed by {@link #loadCalendarData}.\n     ",
    "links" : [ "#loadCalendarData" ]
  }, {
    "name" : "minMonthLength",
    "type" : "int",
    "comment" : "\n     * The minimum length of a month.\n     * Computed by {@link #createEpochMonths}.\n     ",
    "links" : [ "#createEpochMonths" ]
  }, {
    "name" : "maxMonthLength",
    "type" : "int",
    "comment" : "\n     * The maximum length of a month.\n     * Computed by {@link #createEpochMonths}.\n     ",
    "links" : [ "#createEpochMonths" ]
  }, {
    "name" : "minYearLength",
    "type" : "int",
    "comment" : "\n     * The minimum length of a year in days.\n     * Computed by {@link #createEpochMonths}.\n     ",
    "links" : [ "#createEpochMonths" ]
  }, {
    "name" : "maxYearLength",
    "type" : "int",
    "comment" : "\n     * The maximum length of a year in days.\n     * Computed by {@link #createEpochMonths}.\n     ",
    "links" : [ "#createEpochMonths" ]
  }, {
    "name" : "RESOURCE_PREFIX",
    "type" : "String",
    "comment" : "\n     * Prefix of resource names for Hijrah calendar variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESOURCE_SUFFIX",
    "type" : "String",
    "comment" : "\n     * Suffix of resource names for Hijrah calendar variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ID",
    "type" : "String",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : "KEY_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_VERSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ISO_START",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONF_PATH",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void checkCalendarInit()",
    "returnType" : "void",
    "comment" : "\n     * Check and ensure that the calendar data has been initialized.\n     * The initialization check is performed at the boundary between\n     * public and package methods.  If a public calls another public method\n     * a check is not necessary in the caller.\n     * The constructors of HijrahDate call {@link #getEpochDay} or\n     * {@link #getHijrahDateInfo} so every call from HijrahDate to a\n     * HijrahChronology via package private methods has been checked.\n     *\n     * @throws DateTimeException if the calendar data configuration is\n     *     malformed or IOExceptions occur loading the data\n     ",
    "links" : [ "#getEpochDay", "#getHijrahDateInfo" ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the ID of the chronology.\n     * <p>\n     * The ID uniquely identifies the {@code Chronology}. It can be used to\n     * lookup the {@code Chronology} using {@link Chronology#of(String)}.\n     *\n     * @return the chronology ID, non-null\n     * @see #getCalendarType()\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)" ]
  }, {
    "name" : "public String getCalendarType()",
    "returnType" : "String",
    "comment" : "\n     * Gets the calendar type of the Islamic calendar.\n     * <p>\n     * The calendar type is an identifier defined by the\n     * <em>Unicode Locale Data Markup Language (LDML)</em> specification.\n     * It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.\n     *\n     * @return the calendar system type; non-null if the calendar has\n     *    a standard type, otherwise null\n     * @see #getId()\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)" ]
  }, {
    "name" : "public HijrahDate date(Era era, int yearOfEra, int month, int dayOfMonth)",
    "returnType" : "HijrahDate",
    "comment" : "\n     * Obtains a local date in Hijrah calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     *\n     * @param era  the Hijrah era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code HijrahEra}\n     ",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate date(int prolepticYear, int month, int dayOfMonth)",
    "returnType" : "HijrahDate",
    "comment" : "\n     * Obtains a local date in Hijrah calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate dateYearDay(Era era, int yearOfEra, int dayOfYear)",
    "returnType" : "HijrahDate",
    "comment" : "\n     * Obtains a local date in Hijrah calendar system from the\n     * era, year-of-era and day-of-year fields.\n     *\n     * @param era  the Hijrah era, not null\n     * @param yearOfEra  the year-of-era\n     * @param dayOfYear  the day-of-year\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code HijrahEra}\n     ",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate dateYearDay(int prolepticYear, int dayOfYear)",
    "returnType" : "HijrahDate",
    "comment" : "\n     * Obtains a local date in Hijrah calendar system from the\n     * proleptic-year and day-of-year fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if the value of the year is out of range,\n     *  or if the day-of-year is invalid for the year\n     ",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate dateEpochDay(long epochDay)",
    "returnType" : "HijrahDate",
    "comment" : "\n     * Obtains a local date in the Hijrah calendar system from the epoch-day.\n     *\n     * @param epochDay  the epoch day\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate dateNow()",
    "returnType" : "HijrahDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate dateNow(ZoneId zone)",
    "returnType" : "HijrahDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate dateNow(Clock clock)",
    "returnType" : "HijrahDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate date(TemporalAccessor temporal)",
    "returnType" : "HijrahDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoLocalDateTime<HijrahDate> localDateTime(TemporalAccessor temporal)",
    "returnType" : "ChronoLocalDateTime<HijrahDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoZonedDateTime<HijrahDate> zonedDateTime(TemporalAccessor temporal)",
    "returnType" : "ChronoZonedDateTime<HijrahDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoZonedDateTime<HijrahDate> zonedDateTime(Instant instant, ZoneId zone)",
    "returnType" : "ChronoZonedDateTime<HijrahDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeapYear(long prolepticYear)",
    "returnType" : "boolean",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : "public int prolepticYear(Era era, int yearOfEra)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public HijrahEra eraOf(int eraValue)",
    "returnType" : "HijrahEra",
    "comment" : "\n     * Creates the HijrahEra object from the numeric value.\n     * The Hijrah calendar system has only one era covering the\n     * proleptic years greater than zero.\n     * This method returns the singleton HijrahEra for the value 1.\n     *\n     * @param eraValue  the era value\n     * @return the calendar system era, not null\n     * @throws DateTimeException if unable to create the era\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Era> eras()",
    "returnType" : "List<Era>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ValueRange range(ChronoField field)",
    "returnType" : "ValueRange",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : "public HijrahDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "HijrahDate",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " int checkValidYear(long prolepticYear)",
    "returnType" : "int",
    "comment" : "\n     * Check the validity of a year.\n     *\n     * @param prolepticYear the year to check\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkValidDayOfYear(int dayOfYear)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void checkValidMonth(int month)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int[] getHijrahDateInfo(int epochDay)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array containing the Hijrah year, month and day\n     * computed from the epoch day.\n     *\n     * @param epochDay  the EpochDay\n     * @return int[0] = YEAR, int[1] = MONTH, int[2] = DATE\n     ",
    "links" : [ ]
  }, {
    "name" : " long getEpochDay(int prolepticYear, int monthOfYear, int dayOfMonth)",
    "returnType" : "long",
    "comment" : "\n     * Return the epoch day computed from Hijrah year, month, and day.\n     *\n     * @param prolepticYear the year to represent, 0-origin\n     * @param monthOfYear the month-of-year to represent, 1-origin\n     * @param dayOfMonth the day-of-month to represent, 1-origin\n     * @return the epoch day\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDayOfYear(int prolepticYear, int month)",
    "returnType" : "int",
    "comment" : "\n     * Returns day of year for the year and month.\n     *\n     * @param prolepticYear a proleptic year\n     * @param month a month, 1-origin\n     * @return the day of year, 1-origin\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMonthLength(int prolepticYear, int monthOfYear)",
    "returnType" : "int",
    "comment" : "\n     * Returns month length for the year and month.\n     *\n     * @param prolepticYear a proleptic year\n     * @param monthOfYear a month, 1-origin.\n     * @return the length of the month\n     ",
    "links" : [ ]
  }, {
    "name" : " int getYearLength(int prolepticYear)",
    "returnType" : "int",
    "comment" : "\n     * Returns year length.\n     * Note: The 12th month must exist in the data.\n     *\n     * @param prolepticYear a proleptic year\n     * @return year length in days\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMinimumYear()",
    "returnType" : "int",
    "comment" : "\n     * Return the minimum supported Hijrah year.\n     *\n     * @return the minimum\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaximumYear()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum supported Hijrah year.\n     *\n     * @return the minimum\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaximumMonthLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns maximum day-of-month.\n     *\n     * @return maximum day-of-month\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMinimumMonthLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns smallest maximum day-of-month.\n     *\n     * @return smallest maximum day-of-month\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaximumDayOfYear()",
    "returnType" : "int",
    "comment" : "\n     * Returns maximum day-of-year.\n     *\n     * @return maximum day-of-year\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSmallestMaximumDayOfYear()",
    "returnType" : "int",
    "comment" : "\n     * Returns smallest maximum day-of-year.\n     *\n     * @return smallest maximum day-of-year\n     ",
    "links" : [ ]
  }, {
    "name" : "private int epochDayToEpochMonth(int epochDay)",
    "returnType" : "int",
    "comment" : "\n     * Returns the epochMonth found by locating the epochDay in the table. The\n     * epochMonth is the index in the table\n     *\n     * @param epochDay\n     * @return The index of the element of the start of the month containing the\n     * epochDay.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int epochMonthToYear(int epochMonth)",
    "returnType" : "int",
    "comment" : "\n     * Returns the year computed from the epochMonth\n     *\n     * @param epochMonth the epochMonth\n     * @return the Hijrah Year\n     ",
    "links" : [ ]
  }, {
    "name" : "private int yearToEpochMonth(int year)",
    "returnType" : "int",
    "comment" : "\n     * Returns the epochMonth for the Hijrah Year.\n     *\n     * @param year the HijrahYear\n     * @return the epochMonth for the beginning of the year.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int epochMonthToMonth(int epochMonth)",
    "returnType" : "int",
    "comment" : "\n     * Returns the Hijrah month from the epochMonth.\n     *\n     * @param epochMonth the epochMonth\n     * @return the month of the Hijrah Year\n     ",
    "links" : [ ]
  }, {
    "name" : "private int epochMonthToEpochDay(int epochMonth)",
    "returnType" : "int",
    "comment" : "\n     * Returns the epochDay for the start of the epochMonth.\n     *\n     * @param epochMonth the epochMonth\n     * @return the epochDay for the start of the epochMonth.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int yearMonthToDayOfYear(int prolepticYear, int month)",
    "returnType" : "int",
    "comment" : "\n     * Returns the day of year for the requested HijrahYear and month.\n     *\n     * @param prolepticYear the Hijrah year\n     * @param month the Hijrah month\n     * @return the day of year for the start of the month of the year\n     ",
    "links" : [ ]
  }, {
    "name" : "private int epochMonthLength(int epochMonth)",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the epochMonth. It is computed from the start of\n     * the following month minus the start of the requested month.\n     *\n     * @param epochMonth the epochMonth; assumed to be within range\n     * @return the length in days of the epochMonth\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Properties readConfigProperties(final String chronologyId, final String calendarType) throws Exception",
    "returnType" : "Properties",
    "comment" : "\n     * Return the configuration properties from the resource.\n     * <p>\n     * The location of the variant configuration resource is:\n     * <pre>\n     *   \"/java/time/chrono/\" (for \"islamic-umalqura\" type), or\n     *   \"<JAVA_HOME>/conf/chronology/\" +\n     *   \"hijrah-config-\" + chronologyId + \"_\" + calendarType + \".properties\"\n     * </pre>\n     *\n     * @param chronologyId the chronology ID of the calendar variant\n     * @param calendarType the calendarType of the calendar variant\n     * @return a Properties containing the properties read from the resource.\n     * @throws Exception if access to the property resource fails\n     ",
    "links" : [ ]
  }, {
    "name" : "private void loadCalendarData()",
    "returnType" : "void",
    "comment" : "\n     * Loads and processes the Hijrah calendar properties file for this calendarType.\n     * The starting Hijrah date and the corresponding ISO date are\n     * extracted and used to calculate the epochDate offset.\n     * The version number is identified and ignored.\n     * Everything else is the data for a year with containing the length of each\n     * of 12 months.\n     *\n     * @throws DateTimeException if initialization of the calendar data from the\n     *     resource fails\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] createEpochMonths(int epochDay, int minYear, int maxYear, Map<Integer, int[]> years)",
    "returnType" : "int[]",
    "comment" : "\n     * Converts the map of year to month lengths ranging from minYear to maxYear\n     * into a linear contiguous array of epochDays. The index is the hijrahMonth\n     * computed from year and month and offset by minYear. The value of each\n     * entry is the epochDay corresponding to the first day of the month.\n     *\n     * @param minYear The minimum year for which data is provided\n     * @param maxYear The maximum year for which data is provided\n     * @param years a Map of year to the array of 12 month lengths\n     * @return array of epochDays for each month from min to max\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] parseMonths(String line)",
    "returnType" : "int[]",
    "comment" : "\n     * Parses the 12 months lengths from a property value for a specific year.\n     *\n     * @param line the value of a year property\n     * @return an array of int[12] containing the 12 month lengths\n     * @throws IllegalArgumentException if the number of months is not 12\n     * @throws NumberFormatException if the 12 tokens are not numbers\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] parseYMD(String string)",
    "returnType" : "int[]",
    "comment" : "\n     * Parse yyyy-MM-dd into a 3 element array [yyyy, mm, dd].\n     *\n     * @param string the input string\n     * @return the 3 element array with year, month, day\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void registerCustomChrono()",
    "returnType" : "void",
    "comment" : "\n     * Look for Hijrah chronology variant properties files in\n     * <JAVA_HOME>/conf/chronology directory. Then register its chronology, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : " Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Writes the Chronology using a\n     * <a href=\"{@docRoot}/serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.\n     * @serialData\n     * <pre>\n     *  out.writeByte(1);     // identifies a Chronology\n     *  out.writeUTF(getId());\n     * </pre>\n     *\n     * @return the instance of {@code Ser}, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Defend against malicious streams.\n     *\n     * @param s the stream to read\n     * @throws InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void checkCalendarInit()", "public String getId()", "public String getCalendarType()", "public HijrahDate date(Era era, int yearOfEra, int month, int dayOfMonth)", "public HijrahDate date(int prolepticYear, int month, int dayOfMonth)", "public HijrahDate dateYearDay(Era era, int yearOfEra, int dayOfYear)", "public HijrahDate dateYearDay(int prolepticYear, int dayOfYear)", "public HijrahDate dateEpochDay(long epochDay)", "public HijrahDate dateNow()", "public HijrahDate dateNow(ZoneId zone)", "public HijrahDate dateNow(Clock clock)", "public HijrahDate date(TemporalAccessor temporal)", "public ChronoLocalDateTime<HijrahDate> localDateTime(TemporalAccessor temporal)", "public ChronoZonedDateTime<HijrahDate> zonedDateTime(TemporalAccessor temporal)", "public ChronoZonedDateTime<HijrahDate> zonedDateTime(Instant instant, ZoneId zone)", "public boolean isLeapYear(long prolepticYear)", "public int prolepticYear(Era era, int yearOfEra)", "public HijrahEra eraOf(int eraValue)", "public List<Era> eras()", "public ValueRange range(ChronoField field)", "public HijrahDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " int checkValidYear(long prolepticYear)", " void checkValidDayOfYear(int dayOfYear)", " void checkValidMonth(int month)", " int[] getHijrahDateInfo(int epochDay)", " long getEpochDay(int prolepticYear, int monthOfYear, int dayOfMonth)", " int getDayOfYear(int prolepticYear, int month)", " int getMonthLength(int prolepticYear, int monthOfYear)", " int getYearLength(int prolepticYear)", " int getMinimumYear()", " int getMaximumYear()", " int getMaximumMonthLength()", " int getMinimumMonthLength()", " int getMaximumDayOfYear()", " int getSmallestMaximumDayOfYear()", "private int epochDayToEpochMonth(int epochDay)", "private int epochMonthToYear(int epochMonth)", "private int yearToEpochMonth(int year)", "private int epochMonthToMonth(int epochMonth)", "private int epochMonthToEpochDay(int epochMonth)", "private int yearMonthToDayOfYear(int prolepticYear, int month)", "private int epochMonthLength(int epochMonth)", "private static Properties readConfigProperties(final String chronologyId, final String calendarType) throws Exception", "private void loadCalendarData()", "private int[] createEpochMonths(int epochDay, int minYear, int maxYear, Map<Integer, int[]> years)", "private int[] parseMonths(String line)", "private int[] parseYMD(String string)", "private static void registerCustomChrono()", " Object writeReplace()", "private void readObject(ObjectInputStream s) throws InvalidObjectException" ],
  "variableNames" : [ "typeId", "calendarType", "serialVersionUID", "INSTANCE", "initComplete", "hijrahEpochMonthStartDays", "minEpochDay", "maxEpochDay", "hijrahStartEpochMonth", "minMonthLength", "maxMonthLength", "minYearLength", "maxYearLength", "RESOURCE_PREFIX", "RESOURCE_SUFFIX", "KEY_ID", "KEY_TYPE", "KEY_VERSION", "KEY_ISO_START", "CONF_PATH" ]
}