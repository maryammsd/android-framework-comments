{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/DevicePolicySafetyChecker.java",
  "packageName" : "android.app.admin",
  "className" : "DevicePolicySafetyChecker",
  "comment" : "\n * Interface responsible to check if a {@link DevicePolicyManager} API can be safely executed.\n *\n * @hide\n ",
  "links" : [ "android.app.admin.DevicePolicyManager" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int getUnsafeOperationReason(@DevicePolicyOperation int operation)",
    "returnType" : "int",
    "comment" : "\n     * Returns whether the given {@code operation} can be safely executed at the moment.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSafeOperation(@OperationSafetyReason int reason)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether it's safe to run operations that can be affected by the given {@code reason}.\n     ",
    "links" : [ ]
  }, {
    "name" : " UnsafeStateException newUnsafeStateException(@DevicePolicyOperation int operation, @OperationSafetyReason int reason)",
    "returnType" : "UnsafeStateException",
    "comment" : "\n     * Returns a new exception for when the given {@code operation} cannot be safely executed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onFactoryReset(IResultReceiver callback)",
    "returnType" : "void",
    "comment" : "\n     * Called when a request was made to factory reset the device, so it can be delayed if it's not\n     * safe to proceed.\n     *\n     * @param callback callback whose {@code send()} method must be called when it's safe to factory\n     * reset.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getUnsafeOperationReason(@DevicePolicyOperation int operation)", " boolean isSafeOperation(@OperationSafetyReason int reason)", " UnsafeStateException newUnsafeStateException(@DevicePolicyOperation int operation, @OperationSafetyReason int reason)", " void onFactoryReset(IResultReceiver callback)" ],
  "variableNames" : [ ]
}