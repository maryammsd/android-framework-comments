{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/IntVector.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "IntVector",
  "comment" : "\n * A very simple table that stores a list of int.\n *\n * This version is based on a \"realloc\" strategy -- a simle array is\n * used, and when more storage is needed, a larger array is obtained\n * and all existing data is recopied into it. As a result, read/write\n * access to existing nodes is O(1) fast but appending may be O(N**2)\n * slow. See also SuballocatedIntVector.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_blocksize",
    "type" : "int",
    "comment" : " Size of blocks to allocate          ",
    "links" : [ ]
  }, {
    "name" : "m_map",
    "type" : "int[]",
    "comment" : " IntStack is trying to see this directly",
    "links" : [ ]
  }, {
    "name" : "m_firstFree",
    "type" : "int",
    "comment" : " Number of ints in array          ",
    "links" : [ ]
  }, {
    "name" : "m_mapSize",
    "type" : "int",
    "comment" : " Size of array          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list.\n   *\n   * @return length of the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setSize(int sz)",
    "returnType" : "void",
    "comment" : "\n   * Get the length of the list.\n   *\n   * @return length of the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void addElement(int value)",
    "returnType" : "void",
    "comment" : "\n   * Append a int onto the vector.\n   *\n   * @param value Int to add to the list \n   ",
    "links" : [ ]
  }, {
    "name" : "public final void addElements(int value, int numberOfElements)",
    "returnType" : "void",
    "comment" : "\n   * Append several int values onto the vector.\n   *\n   * @param value Int to add to the list \n   ",
    "links" : [ ]
  }, {
    "name" : "public final void addElements(int numberOfElements)",
    "returnType" : "void",
    "comment" : "\n   * Append several slots onto the vector, but do not set the values.\n   *\n   * @param numberOfElements Int to add to the list \n   ",
    "links" : [ ]
  }, {
    "name" : "public final void insertElementAt(int value, int at)",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   *\n   * @param value Int to insert\n   * @param at Index of where to insert \n   ",
    "links" : [ ]
  }, {
    "name" : "public final void removeAllElements()",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean removeElement(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Removes the first occurrence of the argument from this vector.\n   * If the object is found in this vector, each component in the vector\n   * with an index greater or equal to the object's index is shifted\n   * downward to have an index one smaller than the value it had\n   * previously.\n   *\n   * @param s Int to remove from array\n   *\n   * @return True if the int was removed, false if it was not found\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void removeElementAt(int i)",
    "returnType" : "void",
    "comment" : "\n   * Deletes the component at the specified index. Each component in\n   * this vector with an index greater or equal to the specified\n   * index is shifted downward to have an index one smaller than\n   * the value it had previously.\n   *\n   * @param i index of where to remove and int\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setElementAt(int value, int index)",
    "returnType" : "void",
    "comment" : "\n   * Sets the component at the specified index of this vector to be the\n   * specified object. The previous component at that position is discarded.\n   *\n   * The index must be a value greater than or equal to 0 and less\n   * than the current size of the vector.\n   *\n   * @param value object to set\n   * @param index Index of where to set the object\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int elementAt(int i)",
    "returnType" : "int",
    "comment" : "\n   * Get the nth element.\n   *\n   * @param i index of object to get\n   *\n   * @return object at given index\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean contains(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the table contains the given node.\n   *\n   * @param s object to look for\n   *\n   * @return true if the object is in the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int indexOf(int elem, int index)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem object to look for\n   * @param index Index of where to begin search\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int indexOf(int elem)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem object to look for\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int lastIndexOf(int elem)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem Object to look for\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Returns clone of current IntVector\n   * \n   * @return clone of current IntVector\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int size()", "public final void setSize(int sz)", "public final void addElement(int value)", "public final void addElements(int value, int numberOfElements)", "public final void addElements(int numberOfElements)", "public final void insertElementAt(int value, int at)", "public final void removeAllElements()", "public final boolean removeElement(int s)", "public final void removeElementAt(int i)", "public final void setElementAt(int value, int index)", "public final int elementAt(int i)", "public final boolean contains(int s)", "public final int indexOf(int elem, int index)", "public final int indexOf(int elem)", "public final int lastIndexOf(int elem)", "public Object clone() throws CloneNotSupportedException" ],
  "variableNames" : [ "m_blocksize", "m_map", "m_firstFree", "m_mapSize" ]
}