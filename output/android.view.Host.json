{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InsetsController.java",
  "packageName" : "android.view",
  "className" : "Host",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyInsetsChanged()",
    "returnType" : "void",
    "comment" : "\n         * Notifies host that {@link InsetsController#getState()} has changed.\n         ",
    "links" : [ "android.view.InsetsController#getState()" ]
  }, {
    "name" : " void dispatchWindowInsetsAnimationPrepare(@NonNull WindowInsetsAnimation animation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Bounds dispatchWindowInsetsAnimationStart(@NonNull WindowInsetsAnimation animation, @NonNull Bounds bounds)",
    "returnType" : "Bounds",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " WindowInsets dispatchWindowInsetsAnimationProgress(@NonNull WindowInsets insets, @NonNull List<WindowInsetsAnimation> runningAnimations)",
    "returnType" : "WindowInsets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchWindowInsetsAnimationEnd(@NonNull WindowInsetsAnimation animation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void applySurfaceParams(final SyncRtSurfaceTransactionApplier.SurfaceParams... params)",
    "returnType" : "void",
    "comment" : "\n         * Requests host to apply surface params in synchronized manner.\n         ",
    "links" : [ ]
  }, {
    "name" : " void updateCompatSysUiVisibility(@InsetsType int visibleTypes, @InsetsType int requestedVisibleTypes, @InsetsType int controllableTypes)",
    "returnType" : "void",
    "comment" : "\n         * @see ViewRootImpl#updateCompatSysUiVisibility(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : " void updateRequestedVisibleTypes(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "\n         * Called when the requested visibilities of insets have been modified by the client.\n         * The visibilities should be reported back to WM.\n         *\n         * @param types Bitwise flags of types requested visible.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean hasAnimationCallbacks()",
    "returnType" : "boolean",
    "comment" : "\n         * @return Whether the host has any callbacks it wants to synchronize the animations with.\n         *         If there are no callbacks, the animation will be off-loaded to another thread and\n         *         slightly different animation curves are picked.\n         ",
    "links" : [ ]
  }, {
    "name" : " void setSystemBarsAppearance(@Appearance int appearance, @Appearance int mask)",
    "returnType" : "void",
    "comment" : "\n         * @see WindowInsetsController#setSystemBarsAppearance\n         ",
    "links" : [ ]
  }, {
    "name" : " int getSystemBarsAppearance()",
    "returnType" : "int",
    "comment" : "\n         * @see WindowInsetsController#getSystemBarsAppearance()\n         ",
    "links" : [ ]
  }, {
    "name" : " void setSystemBarsBehavior(@Behavior int behavior)",
    "returnType" : "void",
    "comment" : "\n         * @see WindowInsetsController#setSystemBarsBehavior\n         ",
    "links" : [ ]
  }, {
    "name" : " int getSystemBarsBehavior()",
    "returnType" : "int",
    "comment" : "\n         * @see WindowInsetsController#getSystemBarsBehavior\n         ",
    "links" : [ ]
  }, {
    "name" : " void releaseSurfaceControlFromRt(SurfaceControl surfaceControl)",
    "returnType" : "void",
    "comment" : "\n         * Releases a surface and ensure that this is done after {@link #applySurfaceParams} has\n         * finished applying params.\n         ",
    "links" : [ "#applySurfaceParams" ]
  }, {
    "name" : " void addOnPreDrawRunnable(Runnable r)",
    "returnType" : "void",
    "comment" : "\n         * If this host is a view hierarchy, adds a pre-draw runnable to ensure proper ordering as\n         * described in {@link WindowInsetsAnimation.Callback#onPrepare}.\n         *\n         * If this host isn't a view hierarchy, the runnable can be executed immediately.\n         ",
    "links" : [ "WindowInsetsAnimation.Callback#onPrepare" ]
  }, {
    "name" : " void postInsetsAnimationCallback(Runnable r)",
    "returnType" : "void",
    "comment" : "\n         * Adds a runnbale to be executed during {@link Choreographer#CALLBACK_INSETS_ANIMATION}\n         * phase.\n         ",
    "links" : [ "android.view.Choreographer#CALLBACK_INSETS_ANIMATION" ]
  }, {
    "name" : " InputMethodManager getInputMethodManager()",
    "returnType" : "InputMethodManager",
    "comment" : "\n         * Obtains {@link InputMethodManager} instance from host.\n         ",
    "links" : [ "android.view.inputmethod.InputMethodManager" ]
  }, {
    "name" : " String getRootViewTitle()",
    "returnType" : "String",
    "comment" : "\n         * @return title of the rootView, if it has one.\n         * Note: this method is for debugging purposes only.\n         ",
    "links" : [ ]
  }, {
    "name" : " Context getRootViewContext()",
    "returnType" : "Context",
    "comment" : "\n         * @return the context related to the rootView.\n         ",
    "links" : [ ]
  }, {
    "name" : " int dipToPx(int dips)",
    "returnType" : "int",
    "comment" : " @see ViewRootImpl#dipToPx ",
    "links" : [ ]
  }, {
    "name" : " IBinder getWindowToken()",
    "returnType" : "IBinder",
    "comment" : "\n         * @return token associated with the host, if it has one.\n         ",
    "links" : [ ]
  }, {
    "name" : " CompatibilityInfo.Translator getTranslator()",
    "returnType" : "CompatibilityInfo.Translator",
    "comment" : "\n         * @return Translator associated with the host, if it has one.\n         ",
    "links" : [ ]
  }, {
    "name" : " void notifyAnimationRunningStateChanged(boolean running)",
    "returnType" : "void",
    "comment" : "\n         * Notifies when the state of running animation is changed. The state is either \"running\" or\n         * \"idle\".\n         *\n         * @param running {@code true} if there is any animation running; {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean isHandlingPointerEvent()",
    "returnType" : "boolean",
    "comment" : " @see ViewRootImpl#isHandlingPointerEvent ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Handler getHandler()", " void notifyInsetsChanged()", " void dispatchWindowInsetsAnimationPrepare(@NonNull WindowInsetsAnimation animation)", " Bounds dispatchWindowInsetsAnimationStart(@NonNull WindowInsetsAnimation animation, @NonNull Bounds bounds)", " WindowInsets dispatchWindowInsetsAnimationProgress(@NonNull WindowInsets insets, @NonNull List<WindowInsetsAnimation> runningAnimations)", " void dispatchWindowInsetsAnimationEnd(@NonNull WindowInsetsAnimation animation)", " void applySurfaceParams(final SyncRtSurfaceTransactionApplier.SurfaceParams... params)", " void updateCompatSysUiVisibility(@InsetsType int visibleTypes, @InsetsType int requestedVisibleTypes, @InsetsType int controllableTypes)", " void updateRequestedVisibleTypes(@InsetsType int types)", " boolean hasAnimationCallbacks()", " void setSystemBarsAppearance(@Appearance int appearance, @Appearance int mask)", " int getSystemBarsAppearance()", " void setSystemBarsBehavior(@Behavior int behavior)", " int getSystemBarsBehavior()", " void releaseSurfaceControlFromRt(SurfaceControl surfaceControl)", " void addOnPreDrawRunnable(Runnable r)", " void postInsetsAnimationCallback(Runnable r)", " InputMethodManager getInputMethodManager()", " String getRootViewTitle()", " Context getRootViewContext()", " int dipToPx(int dips)", " IBinder getWindowToken()", " CompatibilityInfo.Translator getTranslator()", " void notifyAnimationRunningStateChanged(boolean running)", " boolean isHandlingPointerEvent()" ],
  "variableNames" : [ ]
}