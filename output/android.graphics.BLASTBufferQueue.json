{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/BLASTBufferQueue.java",
  "packageName" : "android.graphics",
  "className" : "BLASTBufferQueue",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : " BLASTBufferQueue*",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeCreate(String name, boolean updateDestinationFrame)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroy(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Surface nativeGetSurface(long ptr, boolean includeSurfaceControlHandle)",
    "returnType" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSyncNextTransaction(long ptr, Consumer<SurfaceControl.Transaction> callback, boolean acquireSingleBuffer)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeStopContinuousSyncTransaction(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClearSyncTransaction(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdate(long ptr, long surfaceControl, long width, long height, int format)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeMergeWithNextTransaction(long ptr, long transactionPtr, long frameNumber)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetLastAcquiredFrameNum(long ptr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeApplyPendingTransactions(long ptr, long frameNumber)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsSameSurfaceControl(long ptr, long surfaceControlPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native SurfaceControl.Transaction nativeGatherPendingTransactions(long ptr, long frameNumber)",
    "returnType" : "SurfaceControl.Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTransactionHangCallback(long ptr, TransactionHangCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Surface createSurface()",
    "returnType" : "Surface",
    "comment" : "\n     * @return a new Surface instance from the IGraphicsBufferProducer of the adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Surface createSurfaceWithHandle()",
    "returnType" : "Surface",
    "comment" : "\n     * @return a new Surface instance from the IGraphicsBufferProducer of the adapter and\n     * the SurfaceControl handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean syncNextTransaction(boolean acquireSingleBuffer, @NonNull Consumer<SurfaceControl.Transaction> callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a callback that accepts a transaction to BBQ. BBQ will acquire buffers into the a\n     * transaction it created and will eventually send the transaction into the callback\n     * when it is ready.\n     * @param callback The callback invoked when the buffer has been added to the transaction. The\n     *                 callback will contain the transaction with the buffer.\n     * @param acquireSingleBuffer If true, only acquire a single buffer when processing frames. The\n     *                            callback will be cleared once a single buffer has been\n     *                            acquired. If false, continue to acquire all buffers into the\n     *                            transaction until stopContinuousSyncTransaction is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean syncNextTransaction(@NonNull Consumer<SurfaceControl.Transaction> callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a callback that accepts a transaction to BBQ. BBQ will acquire buffers into the a\n     * transaction it created and will eventually send the transaction into the callback\n     * when it is ready.\n     * @param callback The callback invoked when the buffer has been added to the transaction. The\n     *                 callback will contain the transaction with the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopContinuousSyncTransaction()",
    "returnType" : "void",
    "comment" : "\n     * Tell BBQ to stop acquiring buffers into a single transaction. BBQ will send the sync\n     * transaction callback after this has been called. This should only be used when\n     * syncNextTransaction was called with acquireSingleBuffer set to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearSyncTransaction()",
    "returnType" : "void",
    "comment" : "\n     * Tell BBQ to clear the sync transaction that was previously set. The callback will not be\n     * invoked when the next frame is acquired.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(SurfaceControl sc, int width, int height, @PixelFormat.Format int format)",
    "returnType" : "void",
    "comment" : "\n     * Updates {@link SurfaceControl}, size, and format for a particular BLASTBufferQueue\n     * @param sc The new SurfaceControl that this BLASTBufferQueue will update\n     * @param width The new width for the buffer.\n     * @param height The new height for the buffer.\n     * @param format The new format for the buffer.\n     ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void mergeWithNextTransaction(SurfaceControl.Transaction t, long frameNumber)",
    "returnType" : "void",
    "comment" : "\n     * Merge the transaction passed in to the next transaction in BlastBufferQueue. The next\n     * transaction will be applied or merged when the next frame with specified frame number\n     * is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mergeWithNextTransaction(long nativeTransaction, long frameNumber)",
    "returnType" : "void",
    "comment" : "\n     * Merge the transaction passed in to the next transaction in BlastBufferQueue.\n     * @param nativeTransaction native handle passed from native c/c++ code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyPendingTransactions(long frameNumber)",
    "returnType" : "void",
    "comment" : "\n     * Apply any transactions that were passed to {@link #mergeWithNextTransaction} with the\n     * specified frameNumber. This is intended to ensure transactions don't get stuck as pending\n     * if the specified frameNumber is never drawn.\n     *\n     * @param frameNumber The frameNumber used to determine which transactions to apply.\n     ",
    "links" : [ "#mergeWithNextTransaction" ]
  }, {
    "name" : "public long getLastAcquiredFrameNum()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameSurfaceControl(SurfaceControl sc)",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if the associated SurfaceControl has the same handle as {@param sc}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SurfaceControl.Transaction gatherPendingTransactions(long frameNumber)",
    "returnType" : "SurfaceControl.Transaction",
    "comment" : "\n     * Get any transactions that were passed to {@link #mergeWithNextTransaction} with the\n     * specified frameNumber. This is intended to ensure transactions don't get stuck as pending\n     * if the specified frameNumber is never drawn.\n     *\n     * @param frameNumber The frameNumber used to determine which transactions to apply.\n     * @return a Transaction that contains the merge of all the transactions that were sent to\n     *         mergeWithNextTransaction\n     ",
    "links" : [ "#mergeWithNextTransaction" ]
  }, {
    "name" : "public void setTransactionHangCallback(TransactionHangCallback hangCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native long nativeCreate(String name, boolean updateDestinationFrame)", "private static native void nativeDestroy(long ptr)", "private static native Surface nativeGetSurface(long ptr, boolean includeSurfaceControlHandle)", "private static native boolean nativeSyncNextTransaction(long ptr, Consumer<SurfaceControl.Transaction> callback, boolean acquireSingleBuffer)", "private static native void nativeStopContinuousSyncTransaction(long ptr)", "private static native void nativeClearSyncTransaction(long ptr)", "private static native void nativeUpdate(long ptr, long surfaceControl, long width, long height, int format)", "private static native void nativeMergeWithNextTransaction(long ptr, long transactionPtr, long frameNumber)", "private static native long nativeGetLastAcquiredFrameNum(long ptr)", "private static native void nativeApplyPendingTransactions(long ptr, long frameNumber)", "private static native boolean nativeIsSameSurfaceControl(long ptr, long surfaceControlPtr)", "private static native SurfaceControl.Transaction nativeGatherPendingTransactions(long ptr, long frameNumber)", "private static native void nativeSetTransactionHangCallback(long ptr, TransactionHangCallback callback)", "public void destroy()", "public Surface createSurface()", "public Surface createSurfaceWithHandle()", "public boolean syncNextTransaction(boolean acquireSingleBuffer, @NonNull Consumer<SurfaceControl.Transaction> callback)", "public boolean syncNextTransaction(@NonNull Consumer<SurfaceControl.Transaction> callback)", "public void stopContinuousSyncTransaction()", "public void clearSyncTransaction()", "public void update(SurfaceControl sc, int width, int height, @PixelFormat.Format int format)", "protected void finalize() throws Throwable", "public void mergeWithNextTransaction(SurfaceControl.Transaction t, long frameNumber)", "public void mergeWithNextTransaction(long nativeTransaction, long frameNumber)", "public void applyPendingTransactions(long frameNumber)", "public long getLastAcquiredFrameNum()", "public boolean isSameSurfaceControl(SurfaceControl sc)", "public SurfaceControl.Transaction gatherPendingTransactions(long frameNumber)", "public void setTransactionHangCallback(TransactionHangCallback hangCallback)" ],
  "variableNames" : [ "mNativeObject" ]
}