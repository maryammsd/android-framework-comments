{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/impl/CameraOfflineSessionImpl.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "CameraOfflineSessionImpl",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_ID_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANO_PER_SECOND",
    "type" : "long",
    "comment" : "ns",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteSession",
    "type" : "ICameraOfflineSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosing",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineInput",
    "type" : "SimpleEntry<Integer, InputConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineOutputs",
    "type" : "SparseArray<OutputConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguredOutputs",
    "type" : "SparseArray<OutputConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaceLock",
    "type" : "Object",
    "comment" : " access from this class and Session only!",
    "links" : [ ]
  }, {
    "name" : "mCameraId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacteristics",
    "type" : "CameraCharacteristics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTotalPartialCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineCallback",
    "type" : "CameraOfflineSessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "CameraDeviceCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineRequestLastFrameNumbersList",
    "type" : "List<RequestLastFrameNumbersHolder>",
    "comment" : "\n     * A list tracking request and its expected last regular/reprocess/zslStill frame\n     * number.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrameNumberTracker",
    "type" : "FrameNumberTracker",
    "comment" : "\n     * An object tracking received frame numbers.\n     * Updated when receiving callbacks from ICameraDeviceCallbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCaptureCallbackMap",
    "type" : "SparseArray<CaptureCallbackHolder>",
    "comment" : " map request IDs to callback/request data ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CameraDeviceCallbacks getCallbacks()",
    "returnType" : "CameraDeviceCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAndFireSequenceComplete()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeCompletedCallbackHolderLocked(long lastCompletedRegularFrameNumber, long lastCompletedReprocessFrameNumber, long lastCompletedZslStillFrameNumber)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyFailedSwitch()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteSession(ICameraOfflineSession remoteSession) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Set remote session.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isClosed()",
    "returnType" : "boolean",
    "comment" : " Whether the offline session has started to close (may not yet have finished) ",
    "links" : [ ]
  }, {
    "name" : "private void disconnect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : "\n     * Listener for binder death.\n     *\n     * <p> Handle binder death for ICameraOfflineSession.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public CameraDevice getDevice()",
    "returnType" : "CameraDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(int maxCount, Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finalizeOutputConfigurations(List<OutputConfiguration> outputConfigs) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int capture(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingRequest(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopRepeating() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void abortCaptures() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isReprocessable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Surface getInputSurface()",
    "returnType" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraOfflineSession switchToOffline(Collection<Surface> offlineOutputs, Executor executor, CameraOfflineSessionCallback listener) throws CameraAccessException",
    "returnType" : "CameraOfflineSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsOfflineProcessing(Surface surface)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "REQUEST_ID_NONE", "NANO_PER_SECOND", "DEBUG", "mRemoteSession", "mClosing", "mOfflineInput", "mOfflineOutputs", "mConfiguredOutputs", "mInterfaceLock", "mCameraId", "mCharacteristics", "mTotalPartialCount", "mOfflineExecutor", "mOfflineCallback", "mCallbacks", "mOfflineRequestLastFrameNumbersList", "mFrameNumberTracker", "mCaptureCallbackMap" ],
  "methodNames" : [ "public CameraDeviceCallbacks getCallbacks()", "private void checkAndFireSequenceComplete()", "private void removeCompletedCallbackHolderLocked(long lastCompletedRegularFrameNumber, long lastCompletedReprocessFrameNumber, long lastCompletedZslStillFrameNumber)", "public void notifyFailedSwitch()", "public void setRemoteSession(ICameraOfflineSession remoteSession) throws CameraAccessException", "private boolean isClosed()", "private void disconnect()", "protected void finalize() throws Throwable", "public void binderDied()", "public CameraDevice getDevice()", "public void prepare(Surface surface) throws CameraAccessException", "public void prepare(int maxCount, Surface surface) throws CameraAccessException", "public void tearDown(Surface surface) throws CameraAccessException", "public void finalizeOutputConfigurations(List<OutputConfiguration> outputConfigs) throws CameraAccessException", "public int capture(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException", "public int captureBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int captureBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException", "public int setRepeatingRequest(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException", "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int setRepeatingBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException", "public void stopRepeating() throws CameraAccessException", "public void abortCaptures() throws CameraAccessException", "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException", "public boolean isReprocessable()", "public Surface getInputSurface()", "public CameraOfflineSession switchToOffline(Collection<Surface> offlineOutputs, Executor executor, CameraOfflineSessionCallback listener) throws CameraAccessException", "public boolean supportsOfflineProcessing(Surface surface)", "public void close()" ]
}