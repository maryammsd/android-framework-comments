{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/tech/MifareUltralight.java",
  "packageName" : "android.nfc.tech",
  "className" : "MifareUltralight",
  "comment" : "\n * Provides access to MIFARE Ultralight properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire a {@link MifareUltralight} object using {@link #get}.\n *\n * <p>MIFARE Ultralight compatible tags have 4 byte pages {@link #PAGE_SIZE}.\n * The primary operations on an Ultralight tag are {@link #readPages} and\n * {@link #writePage}.\n *\n * <p>The original MIFARE Ultralight consists of a 64 byte EEPROM. The first\n * 4 pages are for the OTP area, manufacturer data, and locking bits. They are\n * readable and some bits are writable. The final 12 pages are the user\n * read/write area. For more information see the NXP data sheet MF0ICU1.\n *\n * <p>The MIFARE Ultralight C consists of a 192 byte EEPROM. The first 4 pages\n * are for OTP, manufacturer data, and locking bits. The next 36 pages are the\n * user read/write area. The next 4 pages are additional locking bits, counters\n * and authentication configuration and are readable. The final 4 pages are for\n * the authentication key and are not readable. For more information see the\n * NXP data sheet MF0ICU2.\n *\n * <p>Implementation of this class on a Android NFC device is optional.\n * If it is not implemented, then\n * {@link MifareUltralight} will never be enumerated in {@link Tag#getTechList}.\n * If it is enumerated, then all {@link MifareUltralight} I/O operations will be supported.\n * In either case, {@link NfcA} will also be enumerated on the tag,\n * because all MIFARE Ultralight tags are also {@link NfcA} tags.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "links" : [ "android.Manifest.permission#NFC", "android.nfc.Tag", "#get", "android.nfc.tech.NfcA", "android.nfc.tech.MifareUltralight", "#readPages", "android.nfc.Tag#getTechList", "#PAGE_SIZE", "#writePage" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " A MIFARE Ultralight compatible tag of unknown type ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ULTRALIGHT",
    "type" : "int",
    "comment" : " A MIFARE Ultralight tag ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ULTRALIGHT_C",
    "type" : "int",
    "comment" : " A MIFARE Ultralight C tag ",
    "links" : [ ]
  }, {
    "name" : "PAGE_SIZE",
    "type" : "int",
    "comment" : " Size of a MIFARE Ultralight page in bytes ",
    "links" : [ ]
  }, {
    "name" : "NXP_MANUFACTURER_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_PAGE_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IS_UL_C",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MifareUltralight get(Tag tag)",
    "returnType" : "MifareUltralight",
    "comment" : "\n     * Get an instance of {@link MifareUltralight} for the given tag.\n     * <p>Returns null if {@link MifareUltralight} was not enumerated in\n     * {@link Tag#getTechList} - this indicates the tag is not MIFARE\n     * Ultralight compatible, or that this Android\n     * device does not implement MIFARE Ultralight.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param tag an MIFARE Ultralight compatible tag\n     * @return MIFARE Ultralight object\n     ",
    "links" : [ "android.nfc.tech.MifareUltralight", "android.nfc.Tag#getTechList" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Return the MIFARE Ultralight type of the tag.\n     * <p>One of {@link #TYPE_ULTRALIGHT} or {@link #TYPE_ULTRALIGHT_C} or\n     * {@link #TYPE_UNKNOWN}.\n     * <p>Depending on how the tag has been formatted, it can be impossible\n     * to accurately classify between original MIFARE Ultralight and\n     * Ultralight C. So treat this method as a hint.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return the type\n     ",
    "links" : [ "#TYPE_ULTRALIGHT", "#TYPE_ULTRALIGHT_C", "#TYPE_UNKNOWN" ]
  }, {
    "name" : "public byte[] readPages(int pageOffset) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Read 4 pages (16 bytes).\n     *\n     * <p>The MIFARE Ultralight protocol always reads 4 pages at a time, to\n     * reduce the number of commands required to read an entire tag.\n     * <p>If a read spans past the last readable block, then the tag will\n     * return pages that have been wrapped back to the first blocks. MIFARE\n     * Ultralight tags have readable blocks 0x00 through 0x0F. So a read to\n     * block offset 0x0E would return blocks 0x0E, 0x0F, 0x00, 0x01. MIFARE\n     * Ultralight C tags have readable blocks 0x00 through 0x2B. So a read to\n     * block 0x2A would return blocks 0x2A, 0x2B, 0x00, 0x01.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param pageOffset index of first page to read, starting from 0\n     * @return 4 pages (16 bytes)\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void writePage(int pageOffset, byte[] data) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write 1 page (4 bytes).\n     *\n     * <p>The MIFARE Ultralight protocol always writes 1 page at a time, to\n     * minimize EEPROM write cycles.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param pageOffset index of page to write, starting from 0\n     * @param data 4 bytes to write\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw NfcA data to a tag and receive the response.\n     *\n     * <p>This is equivalent to connecting to this tag via {@link NfcA}\n     * and calling {@link NfcA#transceive}. Note that all MIFARE Classic\n     * tags are based on {@link NfcA} technology.\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @see NfcA#transceive\n     ",
    "links" : [ "android.Manifest.permission#NFC", "android.nfc.tech.NfcA", "#transceive", "android.nfc.tech.NfcA#transceive", "#getMaxTransceiveLength", "java.io.IOException", "#close" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive" ]
  }, {
    "name" : "public void setTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link #transceive} timeout in milliseconds.\n     *\n     * <p>The timeout only applies to {@link #transceive} on this object,\n     * and is reset to a default value when {@link #close} is called.\n     *\n     * <p>Setting a longer timeout may be useful when performing\n     * transactions that require a long processing time on the tag\n     * such as key generation.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param timeout timeout value in milliseconds\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#close" ]
  }, {
    "name" : "public int getTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Get the current {@link #transceive} timeout in milliseconds.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return timeout value in milliseconds\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive" ]
  }, {
    "name" : "private static void validatePageIndex(int pageIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MifareUltralight get(Tag tag)", "public int getType()", "public byte[] readPages(int pageOffset) throws IOException", "public void writePage(int pageOffset, byte[] data) throws IOException", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()", "public void setTimeout(int timeout)", "public int getTimeout()", "private static void validatePageIndex(int pageIndex)" ],
  "variableNames" : [ "TAG", "TYPE_UNKNOWN", "TYPE_ULTRALIGHT", "TYPE_ULTRALIGHT_C", "PAGE_SIZE", "NXP_MANUFACTURER_ID", "MAX_PAGE_COUNT", "EXTRA_IS_UL_C", "mType" ]
}