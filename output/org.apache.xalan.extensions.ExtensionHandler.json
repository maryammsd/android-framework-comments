{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/extensions/ExtensionHandler.java",
  "packageName" : "org.apache.xalan.extensions",
  "className" : "ExtensionHandler",
  "comment" : "\n * Abstract base class for handling an extension namespace for XPath.\n * Provides functions to test a function's existence and call a function.\n * Also provides functions for calling an element and testing for\n * an element's existence.\n *\n * @author Sanjiva Weerawarana (sanjiva@watson.ibm.com)\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_namespaceUri",
    "type" : "String",
    "comment" : " uri of the extension namespace ",
    "links" : [ ]
  }, {
    "name" : "m_scriptLang",
    "type" : "String",
    "comment" : " scripting language of implementation ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static Class getClassForName(String className) throws ClassNotFoundException",
    "returnType" : "Class",
    "comment" : "\n   * This method loads a class using the context class loader if we're\n   * running under Java2 or higher.\n   * \n   * @param className Name of the class to load\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isFunctionAvailable(String function)",
    "returnType" : "boolean",
    "comment" : "\n   * Tests whether a certain function name is known within this namespace.\n   * @param function name of the function being tested\n   * @return true if its known, false if not.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isElementAvailable(String element)",
    "returnType" : "boolean",
    "comment" : "\n   * Tests whether a certain element name is known within this namespace.\n   * @param element Name of element to check\n   * @return true if its known, false if not.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object callFunction(String funcName, Vector args, Object methodKey, ExpressionContext exprContext) throws TransformerException",
    "returnType" : "Object",
    "comment" : "\n   * Process a call to a function.\n   *\n   * @param funcName Function name.\n   * @param args     The arguments of the function call.\n   * @param methodKey A key that uniquely identifies this class and method call.\n   * @param exprContext The context in which this expression is being executed.\n   *\n   * @return the return value of the function evaluation.\n   *\n   * @throws TransformerException          if parsing trouble\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object callFunction(FuncExtFunction extFunction, Vector args, ExpressionContext exprContext) throws TransformerException",
    "returnType" : "Object",
    "comment" : "\n   * Process a call to a function.\n   *\n   * @param extFunction The XPath extension function.\n   * @param args     The arguments of the function call.\n   * @param exprContext The context in which this expression is being executed.\n   *\n   * @return the return value of the function evaluation.\n   *\n   * @throws TransformerException          if parsing trouble\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract void processElement(String localPart, ElemTemplateElement element, TransformerImpl transformer, Stylesheet stylesheetTree, Object methodKey) throws TransformerException, IOException",
    "returnType" : "void",
    "comment" : "\n   * Process a call to this extension namespace via an element. As a side\n   * effect, the results are sent to the TransformerImpl's result tree.\n   *\n   * @param localPart      Element name's local part.\n   * @param element        The extension element being processed.\n   * @param transformer    Handle to TransformerImpl.\n   * @param stylesheetTree The compiled stylesheet tree.\n   * @param methodKey      A key that uniquely identifies this class and method call.\n   *\n   * @throws XSLProcessorException thrown if something goes wrong\n   *            while running the extension handler.\n   * @throws MalformedURLException if loading trouble\n   * @throws FileNotFoundException if loading trouble\n   * @throws IOException           if loading trouble\n   * @throws TransformerException  if parsing trouble\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Class getClassForName(String className) throws ClassNotFoundException", "public abstract boolean isFunctionAvailable(String function)", "public abstract boolean isElementAvailable(String element)", "public abstract Object callFunction(String funcName, Vector args, Object methodKey, ExpressionContext exprContext) throws TransformerException", "public abstract Object callFunction(FuncExtFunction extFunction, Vector args, ExpressionContext exprContext) throws TransformerException", "public abstract void processElement(String localPart, ElemTemplateElement element, TransformerImpl transformer, Stylesheet stylesheetTree, Object methodKey) throws TransformerException, IOException" ],
  "variableNames" : [ "m_namespaceUri", "m_scriptLang" ]
}