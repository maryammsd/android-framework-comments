{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/security/auth/x500/X500Principal.java",
  "packageName" : "javax.security.auth.x500",
  "className" : "X500Principal",
  "comment" : "\n * <p> This class represents an X.500 {@code Principal}.\n * {@code X500Principal}s are represented by distinguished names such as\n * \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\".\n *\n * <p> This class can be instantiated by using a string representation\n * of the distinguished name, or by using the ASN.1 DER encoded byte\n * representation of the distinguished name.  The current specification\n * for the string representation of a distinguished name is defined in\n * <a href=\"http://www.ietf.org/rfc/rfc2253.txt\">RFC 2253: Lightweight\n * Directory Access Protocol (v3): UTF-8 String Representation of\n * Distinguished Names</a>. This class, however, accepts string formats from\n * both RFC 2253 and <a href=\"http://www.ietf.org/rfc/rfc1779.txt\">RFC 1779:\n * A String Representation of Distinguished Names</a>, and also recognizes\n * attribute type keywords whose OIDs (Object Identifiers) are defined in\n * <a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280: Internet X.509\n * Public Key Infrastructure Certificate and CRL Profile</a>.\n *\n * <p> The string representation for this {@code X500Principal}\n * can be obtained by calling the {@code getName} methods.\n *\n * <p> Note that the {@code getSubjectX500Principal} and\n * {@code getIssuerX500Principal} methods of\n * {@code X509Certificate} return X500Principals representing the\n * issuer and subject fields of the certificate.\n *\n * @see java.security.cert.X509Certificate\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RFC1779",
    "type" : "String",
    "comment" : "\n     * RFC 1779 String format of Distinguished Names.\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC2253",
    "type" : "String",
    "comment" : "\n     * RFC 2253 String format of Distinguished Names.\n     ",
    "links" : [ ]
  }, {
    "name" : "CANONICAL",
    "type" : "String",
    "comment" : "\n     * Canonical String format of Distinguished Names.\n     ",
    "links" : [ ]
  }, {
    "name" : "thisX500Name",
    "type" : "X500Name",
    "comment" : "\n     * The X500Name representing this principal.\n     *\n     * NOTE: this field is reflectively accessed from within X500Name.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the X.500 distinguished name using\n     * the format defined in RFC 2253.\n     *\n     * <p>This method is equivalent to calling\n     * {@code getName(X500Principal.RFC2253)}.\n     *\n     * @return the distinguished name of this {@code X500Principal}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(String format)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the X.500 distinguished name\n     * using the specified format. Valid values for the format are\n     * \"RFC1779\", \"RFC2253\", and \"CANONICAL\" (case insensitive).\n     *\n     * <p> If \"RFC1779\" is specified as the format,\n     * this method emits the attribute type keywords defined in\n     * RFC 1779 (CN, L, ST, O, OU, C, STREET).\n     * Any other attribute type is emitted as an OID.\n     *\n     * <p> If \"RFC2253\" is specified as the format,\n     * this method emits the attribute type keywords defined in\n     * RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID).\n     * Any other attribute type is emitted as an OID.\n     * Under a strict reading, RFC 2253 only specifies a UTF-8 string\n     * representation. The String returned by this method is the\n     * Unicode string achieved by decoding this UTF-8 representation.\n     *\n     * <p> If \"CANONICAL\" is specified as the format,\n     * this method returns an RFC 2253 conformant string representation\n     * with the following additional canonicalizations:\n     *\n     * <ol>\n     * <li> Leading zeros are removed from attribute types\n     *          that are encoded as dotted decimal OIDs\n     * <li> DirectoryString attribute values of type\n     *          PrintableString and UTF8String are not\n     *          output in hexadecimal format\n     * <li> DirectoryString attribute values of types\n     *          other than PrintableString and UTF8String\n     *          are output in hexadecimal format\n     * <li> Leading and trailing white space characters\n     *          are removed from non-hexadecimal attribute values\n     *          (unless the value consists entirely of white space characters)\n     * <li> Internal substrings of one or more white space characters are\n     *          converted to a single space in non-hexadecimal\n     *          attribute values\n     * <li> Relative Distinguished Names containing more than one\n     *          Attribute Value Assertion (AVA) are output in the\n     *          following order: an alphabetical ordering of AVAs\n     *          containing standard keywords, followed by a numeric\n     *          ordering of AVAs containing OID keywords.\n     * <li> The only characters in attribute values that are escaped are\n     *          those which section 2.4 of RFC 2253 states must be escaped\n     *          (they are escaped using a preceding backslash character)\n     * <li> The entire name is converted to upper case\n     *          using {@code String.toUpperCase(Locale.US)}\n     * <li> The entire name is converted to lower case\n     *          using {@code String.toLowerCase(Locale.US)}\n     * <li> The name is finally normalized using normalization form KD,\n     *          as described in the Unicode Standard and UAX #15\n     * </ol>\n     *\n     * <p> Additional standard formats may be introduced in the future.\n     *\n     * @param format the format to use\n     *\n     * @return a string representation of this {@code X500Principal}\n     *          using the specified format\n     * @throws IllegalArgumentException if the specified format is invalid\n     *          or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(String format, Map<String, String> oidMap)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the X.500 distinguished name\n     * using the specified format. Valid values for the format are\n     * \"RFC1779\" and \"RFC2253\" (case insensitive). \"CANONICAL\" is not\n     * permitted and an {@code IllegalArgumentException} will be thrown.\n     *\n     * <p>This method returns Strings in the format as specified in\n     * {@link #getName(String)} and also emits additional attribute type\n     * keywords for OIDs that have entries in the {@code oidMap}\n     * parameter. OID entries in the oidMap take precedence over the default\n     * OIDs recognized by {@code getName(String)}.\n     * Improperly specified OIDs are ignored; however if an OID\n     * in the name maps to an improperly specified keyword, an\n     * {@code IllegalArgumentException} is thrown.\n     *\n     * <p> Additional standard formats may be introduced in the future.\n     *\n     * <p> Warning: additional attribute type keywords may not be recognized\n     * by other implementations; therefore do not use this method if\n     * you are unsure if these keywords will be recognized by other\n     * implementations.\n     *\n     * @param format the format to use\n     * @param oidMap an OID map, where each key is an object identifier in\n     *  String form (a sequence of nonnegative integers separated by periods)\n     *  that maps to a corresponding attribute type keyword String.\n     *  The map may be empty but never {@code null}.\n     * @return a string representation of this {@code X500Principal}\n     *          using the specified format\n     * @throws IllegalArgumentException if the specified format is invalid,\n     *  null, or an OID in the name maps to an improperly specified keyword\n     * @throws NullPointerException if {@code oidMap} is {@code null}\n     * @since 1.6\n     ",
    "links" : [ "#getName(String)" ]
  }, {
    "name" : "public byte[] getEncoded()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the distinguished name in ASN.1 DER encoded form. The ASN.1\n     * notation for this structure is supplied in the documentation for\n     * {@link #X500Principal(byte[] name) X500Principal(byte[] name)}.\n     *\n     * <p>Note that the byte array returned is cloned to protect against\n     * subsequent modifications.\n     *\n     * @return a byte array containing the distinguished name in ASN.1 DER\n     * encoded form\n     ",
    "links" : [ "#X500Principal(byte" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return a user-friendly string representation of this\n     * {@code X500Principal}.\n     *\n     * @return a string representation of this {@code X500Principal}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified {@code Object} with this\n     * {@code X500Principal} for equality.\n     *\n     * <p> Specifically, this method returns {@code true} if\n     * the {@code Object} <i>o</i> is an {@code X500Principal}\n     * and if the respective canonical string representations\n     * (obtained via the {@code getName(X500Principal.CANONICAL)} method)\n     * of this object and <i>o</i> are equal.\n     *\n     * <p> This implementation is compliant with the requirements of RFC 3280.\n     *\n     * @param o Object to be compared for equality with this\n     *          {@code X500Principal}\n     *\n     * @return {@code true} if the specified {@code Object} is equal\n     *          to this {@code X500Principal}, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Return a hash code for this {@code X500Principal}.\n     *\n     * <p> The hash code is calculated via:\n     * {@code getName(X500Principal.CANONICAL).hashCode()}\n     *\n     * @return a hash code for this {@code X500Principal}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the X500Principal object to a stream.\n     *\n     * @serialData this {@code X500Principal} is serialized\n     *          by writing out its DER-encoded form\n     *          (the value of {@code getEncoded} is serialized).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, java.io.NotActiveException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reads this object from a stream (i.e., deserializes it).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public String getName(String format)", "public String getName(String format, Map<String, String> oidMap)", "public byte[] getEncoded()", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "private void writeObject(java.io.ObjectOutputStream s) throws IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, java.io.NotActiveException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "RFC1779", "RFC2253", "CANONICAL", "thisX500Name" ]
}