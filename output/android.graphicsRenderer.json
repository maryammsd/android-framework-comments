{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/ColorSpace.java",
  "packageName" : "android.graphics",
  "className" : "Renderer",
  "comment" : "\n     * <p>A color space renderer can be used to visualize and compare the gamut and\n     * white point of one or more color spaces. The output is an sRGB {@link Bitmap}\n     * showing a CIE 1931 xyY or a CIE 1976 UCS chromaticity diagram.</p>\n     *\n     * <p>The following code snippet shows how to compare the {@link Named#SRGB}\n     * and {@link Named#DCI_P3} color spaces in a CIE 1931 diagram:</p>\n     *\n     * <pre class=\"prettyprint\">\n     * Bitmap bitmap = ColorSpace.createRenderer()\n     *     .size(768)\n     *     .clip(true)\n     *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n     *     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n     *     .render();\n     * </pre>\n     * <p>\n     *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_clipped.png\" />\n     *     <figcaption style=\"text-align: center;\">sRGB vs DCI-P3</figcaption>\n     * </p>\n     *\n     * <p>A renderer can also be used to show the location of specific colors,\n     * associated with a color space, in the CIE 1931 xyY chromaticity diagram.\n     * See {@link #add(ColorSpace, float, float, float, int)} for more information.</p>\n     *\n     * @see ColorSpace#createRenderer()\n     *\n     * @hide\n     ",
  "variables" : [ {
    "name" : "NATIVE_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UCS_SCALE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHROMATICITY_RESOLUTION",
    "type" : "int",
    "comment" : " Number of subdivision of the inside of the spectral locus",
    "links" : [ ]
  }, {
    "name" : "ONE_THIRD",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowWhitePoint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClip",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUcs",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorSpaces",
    "type" : "List<Pair<ColorSpace, Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPoints",
    "type" : "List<Point>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPECTRUM_LOCUS_X",
    "type" : "float[]",
    "comment" : " X coordinates of the spectral locus in CIE 1931",
    "links" : [ ]
  }, {
    "name" : "SPECTRUM_LOCUS_Y",
    "type" : "float[]",
    "comment" : " Y coordinates of the spectral locus in CIE 1931",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Renderer clip(boolean clip)",
    "returnType" : "Renderer",
    "comment" : "\n         * <p>Defines whether the chromaticity diagram should be clipped by the first\n         * registered color space. The default value is false.</p>\n         *\n         * <p>The following code snippet and image show the default behavior:</p>\n         * <pre class=\"prettyprint\">\n         * Bitmap bitmap = ColorSpace.createRenderer()\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n         *     .render();\n         * </pre>\n         * <p>\n         *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_comparison.png\" />\n         *     <figcaption style=\"text-align: center;\">Clipping disabled</figcaption>\n         * </p>\n         *\n         * <p>Here is the same example with clipping enabled:</p>\n         * <pre class=\"prettyprint\">\n         * Bitmap bitmap = ColorSpace.createRenderer()\n         *     .clip(true)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n         *     .render();\n         * </pre>\n         * <p>\n         *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_clipped.png\" />\n         *     <figcaption style=\"text-align: center;\">Clipping enabled</figcaption>\n         * </p>\n         *\n         * @param clip True to clip the chromaticity diagram to the first registered color space,\n         *             false otherwise\n         * @return This instance of {@link Renderer}\n         ",
    "links" : [ "Renderer" ]
  }, {
    "name" : "public Renderer uniformChromaticityScale(boolean ucs)",
    "returnType" : "Renderer",
    "comment" : "\n         * <p>Defines whether the chromaticity diagram should use the uniform\n         * chromaticity scale (CIE 1976 UCS). When the uniform chromaticity scale\n         * is used, the distance between two points on the diagram is approximately\n         * proportional to the perceived color difference.</p>\n         *\n         * <p>The following code snippet shows how to enable the uniform chromaticity\n         * scale. The image below shows the result:</p>\n         * <pre class=\"prettyprint\">\n         * Bitmap bitmap = ColorSpace.createRenderer()\n         *     .uniformChromaticityScale(true)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n         *     .render();\n         * </pre>\n         * <p>\n         *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_ucs.png\" />\n         *     <figcaption style=\"text-align: center;\">CIE 1976 UCS diagram</figcaption>\n         * </p>\n         *\n         * @param ucs True to render the chromaticity diagram as the CIE 1976 UCS diagram\n         * @return This instance of {@link Renderer}\n         ",
    "links" : [ "Renderer" ]
  }, {
    "name" : "public Renderer size(@IntRange(from = 128, to = Integer.MAX_VALUE) int size)",
    "returnType" : "Renderer",
    "comment" : "\n         * Sets the dimensions (width and height) in pixels of the output bitmap.\n         * The size must be at least 128px and defaults to 1024px.\n         *\n         * @param size The size in pixels of the output bitmap\n         * @return This instance of {@link Renderer}\n         ",
    "links" : [ "Renderer" ]
  }, {
    "name" : "public Renderer showWhitePoint(boolean show)",
    "returnType" : "Renderer",
    "comment" : "\n         * Shows or hides the white point of each color space in the output bitmap.\n         * The default is true.\n         *\n         * @param show True to show the white point of each color space, false\n         *             otherwise\n         * @return This instance of {@link Renderer}\n         ",
    "links" : [ "Renderer" ]
  }, {
    "name" : "public Renderer add(@NonNull ColorSpace colorSpace, @ColorInt int color)",
    "returnType" : "Renderer",
    "comment" : "\n         * <p>Adds a color space to represent on the output CIE 1931 chromaticity\n         * diagram. The color space is represented as a triangle showing the\n         * footprint of its color gamut and, optionally, the location of its\n         * white point.</p>\n         *\n         * <p class=\"note\">Color spaces with a color model that is not RGB are\n         * accepted but ignored.</p>\n         *\n         * <p>The following code snippet and image show an example of calling this\n         * method to compare {@link Named#SRGB sRGB} and {@link Named#DCI_P3 DCI-P3}:</p>\n         * <pre class=\"prettyprint\">\n         * Bitmap bitmap = ColorSpace.createRenderer()\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n         *     .render();\n         * </pre>\n         * <p>\n         *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_comparison.png\" />\n         *     <figcaption style=\"text-align: center;\">sRGB vs DCI-P3</figcaption>\n         * </p>\n         *\n         * <p>Adding a color space extending beyond the boundaries of the\n         * spectral locus will alter the size of the diagram within the output\n         * bitmap as shown in this example:</p>\n         * <pre class=\"prettyprint\">\n         * Bitmap bitmap = ColorSpace.createRenderer()\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n         *     .add(ColorSpace.get(ColorSpace.Named.ACES), 0xff097ae9)\n         *     .add(ColorSpace.get(ColorSpace.Named.EXTENDED_SRGB), 0xff000000)\n         *     .render();\n         * </pre>\n         * <p>\n         *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_comparison2.png\" />\n         *     <figcaption style=\"text-align: center;\">sRGB, DCI-P3, ACES and scRGB</figcaption>\n         * </p>\n         *\n         * @param colorSpace The color space whose gamut to render on the diagram\n         * @param color The sRGB color to use to render the color space's gamut and white point\n         * @return This instance of {@link Renderer}\n         *\n         * @see #clip(boolean)\n         * @see #showWhitePoint(boolean)\n         ",
    "links" : [ "Named#SRGB", "Named#DCI_P3", "Renderer" ]
  }, {
    "name" : "public Renderer add(@NonNull ColorSpace colorSpace, float r, float g, float b, @ColorInt int pointColor)",
    "returnType" : "Renderer",
    "comment" : "\n         * <p>Adds a color to represent as a point on the chromaticity diagram.\n         * The color is associated with a color space which will be used to\n         * perform the conversion to CIE XYZ and compute the location of the point\n         * on the diagram. The point is rendered as a colored circle.</p>\n         *\n         * <p>The following code snippet and image show an example of calling this\n         * method to render the location of several sRGB colors as white circles:</p>\n         * <pre class=\"prettyprint\">\n         * Bitmap bitmap = ColorSpace.createRenderer()\n         *     .clip(true)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.0f, 0.1f, 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.1f, 0.1f, 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.2f, 0.1f, 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.3f, 0.1f, 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.4f, 0.1f, 0xffffffff)\n         *     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.5f, 0.1f, 0xffffffff)\n         *     .render();\n         * </pre>\n         * <p>\n         *     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_points.png\" />\n         *     <figcaption style=\"text-align: center;\">\n         *         Locating colors on the chromaticity diagram\n         *     </figcaption>\n         * </p>\n         *\n         * @param colorSpace The color space of the color to locate on the diagram\n         * @param r The first component of the color to locate on the diagram\n         * @param g The second component of the color to locate on the diagram\n         * @param b The third component of the color to locate on the diagram\n         * @param pointColor The sRGB color to use to render the point on the diagram\n         * @return This instance of {@link Renderer}\n         ",
    "links" : [ "Renderer" ]
  }, {
    "name" : "public Bitmap render()",
    "returnType" : "Bitmap",
    "comment" : "\n         * <p>Renders the {@link #add(ColorSpace, int) color spaces} and\n         * {@link #add(ColorSpace, float, float, float, int) points} registered\n         * with this renderer. The output bitmap is an sRGB image with the\n         * dimensions specified by calling {@link #size(int)} (1204x1024px by\n         * default).</p>\n         *\n         * @return A new non-null {@link Bitmap} with the dimensions specified\n         *        by {@link #size(int)} (1024x1024 by default)\n         ",
    "links" : [ "#add", "#add", "#size", "Bitmap", "#size" ]
  }, {
    "name" : "private void drawPoints(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint)",
    "returnType" : "void",
    "comment" : "\n         * Draws registered points at their correct position in the xyY coordinates.\n         * Each point is positioned according to its associated color space.\n         *\n         * @param canvas The canvas to transform\n         * @param width Width in pixel of the final image\n         * @param height Height in pixel of the final image\n         * @param paint A pre-allocated paint used to avoid temporary allocations\n         ",
    "links" : [ ]
  }, {
    "name" : "private void drawGamuts(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint, @NonNull Path path, @NonNull @Size(6) float[] primaries, @NonNull @Size(2) float[] whitePoint)",
    "returnType" : "void",
    "comment" : "\n         * Draws the color gamuts and white points of all the registered color\n         * spaces. Only color spaces with an RGB color model are rendered, the\n         * others are ignored.\n         *\n         * @param canvas The canvas to transform\n         * @param width Width in pixel of the final image\n         * @param height Height in pixel of the final image\n         * @param paint A pre-allocated paint used to avoid temporary allocations\n         * @param path A pre-allocated path used to avoid temporary allocations\n         * @param primaries A pre-allocated array of 6 floats to avoid temporary allocations\n         * @param whitePoint A pre-allocated array of 2 floats to avoid temporary allocations\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void getPrimaries(@NonNull Rgb rgb, @NonNull @Size(6) float[] primaries, boolean asUcs)",
    "returnType" : "void",
    "comment" : "\n         * Returns the primaries of the specified RGB color space. This method handles\n         * the special case of the {@link Named#EXTENDED_SRGB} family of color spaces.\n         *\n         * @param rgb The color space whose primaries to extract\n         * @param primaries A pre-allocated array of 6 floats that will hold the result\n         * @param asUcs True if the primaries should be returned in Luv, false for xyY\n         ",
    "links" : [ "Named#EXTENDED_SRGB" ]
  }, {
    "name" : "private void drawLocus(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint, @NonNull Path path, @NonNull @Size(6) float[] primaries)",
    "returnType" : "void",
    "comment" : "\n         * Draws the CIE 1931 chromaticity diagram: the spectral locus and its inside.\n         * This method respect the clip parameter.\n         *\n         * @param canvas The canvas to transform\n         * @param width Width in pixel of the final image\n         * @param height Height in pixel of the final image\n         * @param paint A pre-allocated paint used to avoid temporary allocations\n         * @param path A pre-allocated path used to avoid temporary allocations\n         * @param primaries A pre-allocated array of 6 floats to avoid temporary allocations\n         ",
    "links" : [ ]
  }, {
    "name" : "private void drawBox(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint, @NonNull Path path)",
    "returnType" : "void",
    "comment" : "\n         * Draws the diagram box, including borders, tick marks, grid lines\n         * and axis labels.\n         *\n         * @param canvas The canvas to transform\n         * @param width Width in pixel of the final image\n         * @param height Height in pixel of the final image\n         * @param paint A pre-allocated paint used to avoid temporary allocations\n         * @param path A pre-allocated path used to avoid temporary allocations\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setTransform(@NonNull Canvas canvas, int width, int height, @NonNull @Size(6) float[] primaries)",
    "returnType" : "void",
    "comment" : "\n         * Computes and applies the Canvas transforms required to make the color\n         * gamut of each color space visible in the final image.\n         *\n         * @param canvas The canvas to transform\n         * @param width Width in pixel of the final image\n         * @param height Height in pixel of the final image\n         * @param primaries Array of 6 floats used to avoid temporary allocations\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setUcsTransform(@NonNull Canvas canvas, int height)",
    "returnType" : "void",
    "comment" : "\n         * Computes and applies the Canvas transforms required to render the CIE\n         * 197 UCS chromaticity diagram.\n         *\n         * @param canvas The canvas to transform\n         * @param height Height in pixel of the final image\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void computeChromaticityMesh(@NonNull float[] vertices, @NonNull int[] colors)",
    "returnType" : "void",
    "comment" : "\n         * Computes a 2D mesh representation of the CIE 1931 chromaticity\n         * diagram.\n         *\n         * @param vertices Array of floats that will hold the mesh vertices\n         * @param colors Array of floats that will hold the mesh colors\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int computeColor(@NonNull @Size(3) float[] color, float x, float y, float z, @NonNull ColorSpace cs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static double sqr(double v)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "NATIVE_SIZE", "UCS_SCALE", "CHROMATICITY_RESOLUTION", "ONE_THIRD", "mSize", "mShowWhitePoint", "mClip", "mUcs", "mColorSpaces", "mPoints", "SPECTRUM_LOCUS_X", "SPECTRUM_LOCUS_Y" ],
  "methodNames" : [ "public Renderer clip(boolean clip)", "public Renderer uniformChromaticityScale(boolean ucs)", "public Renderer size(@IntRange(from = 128, to = Integer.MAX_VALUE) int size)", "public Renderer showWhitePoint(boolean show)", "public Renderer add(@NonNull ColorSpace colorSpace, @ColorInt int color)", "public Renderer add(@NonNull ColorSpace colorSpace, float r, float g, float b, @ColorInt int pointColor)", "public Bitmap render()", "private void drawPoints(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint)", "private void drawGamuts(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint, @NonNull Path path, @NonNull @Size(6) float[] primaries, @NonNull @Size(2) float[] whitePoint)", "private static void getPrimaries(@NonNull Rgb rgb, @NonNull @Size(6) float[] primaries, boolean asUcs)", "private void drawLocus(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint, @NonNull Path path, @NonNull @Size(6) float[] primaries)", "private void drawBox(@NonNull Canvas canvas, int width, int height, @NonNull Paint paint, @NonNull Path path)", "private void setTransform(@NonNull Canvas canvas, int width, int height, @NonNull @Size(6) float[] primaries)", "private void setUcsTransform(@NonNull Canvas canvas, int height)", "private static void computeChromaticityMesh(@NonNull float[] vertices, @NonNull int[] colors)", "private static int computeColor(@NonNull @Size(3) float[] color, float x, float y, float z, @NonNull ColorSpace cs)", "private static double sqr(double v)" ]
}