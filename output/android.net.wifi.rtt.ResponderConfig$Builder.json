{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/rtt/ResponderConfig.java",
  "packageName" : "android.net.wifi.rtt",
  "className" : "Builder",
  "comment" : "\n     * Builder class used to construct {@link ResponderConfig} objects.\n     ",
  "links" : [ "android.net.wifi.rtt.ResponderConfig" ],
  "variables" : [ {
    "name" : "mMacAddress",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeerHandle",
    "type" : "PeerHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResponderType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupports80211Mc",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupports80211azNtb",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCenterFreq0",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCenterFreq1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreamble",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNtbMinMeasurementTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNtbMaxMeasurementTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setMacAddress(@NonNull MacAddress macAddress)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the Responder MAC Address.\n         *\n         * @param macAddress the phyical address of the responder\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPeerHandle(@NonNull PeerHandle peerHandle)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the Responder Peer handle.\n         *\n         * @param peerHandle Peer handle of the resposnde\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder set80211mcSupported(boolean supports80211mc)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an indication the access point can to respond to the two-sided Wi-Fi RTT protocol,\n         * but, if false, indicates only one-sided Wi-Fi RTT is possible.\n         *\n         * @param supports80211mc the ability to support the Wi-Fi RTT protocol\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder set80211azNtbSupported(boolean supports80211azNtb)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an indication the access point can to respond to the IEEE 802.11az non-trigger\n         * based ranging protocol, but, if false, indicates only IEEE 802.11mc or one-sided Wi-Fi\n         * RTT is possible.\n         *\n         * @param supports80211azNtb the ability to support the IEEE 802.11az non-trigger based\n         *                           ranging protocol\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setChannelWidth(@WifiAnnotations.ChannelWidth int channelWidth)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the channel bandwidth in MHz.\n         *\n         * @param channelWidth the bandwidth of the channel in MHz\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFrequencyMhz(@IntRange(from = 0) int frequency)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the frequency of the channel in MHz.\n         * <p>\n         * Note: The frequency is used as a hint, and the underlying WiFi subsystem may use it, or\n         * select an alternate if its own connectivity scans have determined the frequency of the\n         * access point has changed.\n         * </p>\n         *\n         * @param frequency the frequency of the channel in MHz\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCenterFreq0Mhz(@IntRange(from = 0) int centerFreq0)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the center frequency in MHz of the first segment of the channel.\n         * <p>\n         * Note: The frequency is used as a hint, and the underlying WiFi subsystem may use it, or\n         * select an alternate if its own connectivity scans have determined the frequency of the\n         * access point has changed.\n         * </p>\n         *\n         * @param centerFreq0 the center frequency in MHz of first channel segment\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCenterFreq1Mhz(@IntRange(from = 0) int centerFreq1)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the center frequency in MHz of the second segment of the channel, if used.\n         * <p>\n         * Note: The frequency is used as a hint, and the underlying WiFi subsystem may use it, or\n         * select an alternate if its own connectivity scans have determined the frequency of the\n         * access point has changed.\n         * </p>\n         *\n         * @param centerFreq1 the center frequency in MHz of second channel segment\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPreamble(@WifiAnnotations.PreambleType int preamble)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the preamble encoding for the protocol.\n         *\n         * @param preamble the preamble encoding\n         * @return the builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setResponderType(@ResponderType int responderType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the responder type, can be {@link #RESPONDER_AP} or {@link #RESPONDER_STA} or\n         * {@link #RESPONDER_AWARE}\n         *\n         * @param responderType the type of the responder, if not set defaults to\n         * {@link #RESPONDER_AP}\n         * @return the builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ "#RESPONDER_STA", "#RESPONDER_AWARE", "#RESPONDER_AP" ]
  }, {
    "name" : "public Builder setNtbMinTimeBetweenMeasurementsMicros(long ntbMinMeasurementTime)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the minimum time between IEEE 802.11az non-trigger based ranging measurements in\n         * microseconds for the responder.\n         *\n         * Note: This should be a multiple of 100 microseconds as per IEEE 802.11 az standard.\n         *\n         * @param ntbMinMeasurementTime Minimum time between non-trigger based IEEE 802.11az\n         *                              ranging measurements in units of  100 microseconds. Range of\n         *                              values (0, 419430400).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNtbMaxTimeBetweenMeasurementsMicros(long ntbMaxMeasurementTime)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum time between IEEE 802.11az non-trigger based ranging measurements in\n         * microseconds for the responder.\n         *\n         * Note: This should be a multiple of 10000 microseconds (10 milliseconds) as per\n         * IEEE 802.11 az standard.\n         *\n         * @param ntbMaxMeasurementTime Maximum time between non-trigger based IEEE 802.11az\n         *                              ranging measurements in units of  10000 microseconds. Range\n         *                              of values (0, 5242880000).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public ResponderConfig build()",
    "returnType" : "ResponderConfig",
    "comment" : "\n         * Build {@link ResponderConfig} given the current configurations made on the builder.\n         * @return an instance of {@link ResponderConfig}\n         ",
    "links" : [ "android.net.wifi.rtt.ResponderConfig" ]
  } ],
  "methodNames" : [ "public Builder setMacAddress(@NonNull MacAddress macAddress)", "public Builder setPeerHandle(@NonNull PeerHandle peerHandle)", "public Builder set80211mcSupported(boolean supports80211mc)", "public Builder set80211azNtbSupported(boolean supports80211azNtb)", "public Builder setChannelWidth(@WifiAnnotations.ChannelWidth int channelWidth)", "public Builder setFrequencyMhz(@IntRange(from = 0) int frequency)", "public Builder setCenterFreq0Mhz(@IntRange(from = 0) int centerFreq0)", "public Builder setCenterFreq1Mhz(@IntRange(from = 0) int centerFreq1)", "public Builder setPreamble(@WifiAnnotations.PreambleType int preamble)", "public Builder setResponderType(@ResponderType int responderType)", "public Builder setNtbMinTimeBetweenMeasurementsMicros(long ntbMinMeasurementTime)", "public Builder setNtbMaxTimeBetweenMeasurementsMicros(long ntbMaxMeasurementTime)", "public ResponderConfig build()" ],
  "variableNames" : [ "mMacAddress", "mPeerHandle", "mResponderType", "mSupports80211Mc", "mSupports80211azNtb", "mChannelWidth", "mFrequency", "mCenterFreq0", "mCenterFreq1", "mPreamble", "mNtbMinMeasurementTime", "mNtbMaxMeasurementTime" ]
}