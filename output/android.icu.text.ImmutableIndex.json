{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/AlphabeticIndex.java",
  "packageName" : "android.icu.text",
  "className" : "ImmutableIndex",
  "comment" : "\n     * Immutable, thread-safe version of {@link AlphabeticIndex}.\n     * This class provides thread-safe methods for bucketing,\n     * and random access to buckets and their properties,\n     * but does not offer adding records to the index.\n     *\n     * @param <V> The Record value type is unused. It can be omitted for this class\n     * if it was omitted for the AlphabeticIndex that built it.\n     ",
  "links" : [ "android.icu.text.AlphabeticIndex" ],
  "variables" : [ {
    "name" : "buckets",
    "type" : "BucketList<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "collatorPrimaryOnly",
    "type" : "Collator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getBucketCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the number of index buckets and labels, including underflow/inflow/overflow.\n         *\n         * @return the number of index buckets\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getBucketIndex(CharSequence name)",
    "returnType" : "int",
    "comment" : "\n         * Finds the index bucket for the given name and returns the number of that bucket.\n         * Use {@link #getBucket(int)} to get the bucket's properties.\n         *\n         * @param name the string to be sorted into an index bucket\n         * @return the bucket number for the name\n         ",
    "links" : [ "#getBucket(int)" ]
  }, {
    "name" : "public Bucket<V> getBucket(int index)",
    "returnType" : "Bucket<V>",
    "comment" : "\n         * Returns the index-th bucket. Returns null if the index is out of range.\n         *\n         * @param index bucket number\n         * @return the index-th bucket\n         ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Bucket<V>> iterator()",
    "returnType" : "Iterator<Bucket<V>>",
    "comment" : "\n         * {@inheritDoc}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getBucketCount()", "public int getBucketIndex(CharSequence name)", "public Bucket<V> getBucket(int index)", "public Iterator<Bucket<V>> iterator()" ],
  "variableNames" : [ "buckets", "collatorPrimaryOnly" ]
}