{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ActivityTaskManager.java",
  "packageName" : "android.app",
  "className" : "ActivityTaskManager",
  "comment" : "\n * This class gives information about, and interacts with activities and their containers like task,\n * stacks, and displays.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INVALID_STACK_ID",
    "type" : "int",
    "comment" : " Invalid stack ID. ",
    "links" : [ ]
  }, {
    "name" : "INVALID_TASK_ID",
    "type" : "int",
    "comment" : "\n     * Invalid task ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_WINDOWING_MODE",
    "type" : "int",
    "comment" : "\n     * Invalid windowing mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize doesn't need to preserve the window, and can be skipped if bounds\n     * is unchanged. This mode is used by window manager in most cases.\n     * @hide\n     ",
    "links" : [ "#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_PRESERVE_WINDOW",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize should preserve the window if possible.\n     * @hide\n     ",
    "links" : [ "#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_USER",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} used when the\n     * resize is due to a drag action.\n     * @hide\n     ",
    "links" : [ "#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_FORCED",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize should be performed even if the bounds appears unchanged.\n     * @hide\n     ",
    "links" : [ "#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_USER_FORCED",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize should preserve the window if possible, and should not be skipped\n     * even if the bounds is unchanged. Usually used to force a resizing when a drag action\n     * is ending.\n     * @hide\n     ",
    "links" : [ "#resizeTask" ]
  }, {
    "name" : "EXTRA_OPTIONS",
    "type" : "String",
    "comment" : "\n     * Extra included on intents that contain an EXTRA_INTENT, with options that the contained\n     * intent may want to be started with.  Type is Bundle.\n     * TODO: remove once the ChooserActivity moves to systemui\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IGNORE_TARGET_SECURITY",
    "type" : "String",
    "comment" : "\n     * Extra included on intents that contain an EXTRA_INTENT, use this boolean value for the\n     * parameter of the same name when starting the contained intent.\n     * TODO: remove once the ChooserActivity moves to systemui\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MINIMAL_SPLIT_SCREEN_DISPLAY_SIZE_DP",
    "type" : "int",
    "comment" : " The minimal size of a display's long-edge needed to support split-screen multi-window. ",
    "links" : [ ]
  }, {
    "name" : "sMaxRecentTasks",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "Singleton<ActivityTaskManager>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IActivityTaskManagerSingleton",
    "type" : "Singleton<IActivityTaskManager>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ActivityTaskManager getInstance()",
    "returnType" : "ActivityTaskManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static IActivityTaskManager getService()",
    "returnType" : "IActivityTaskManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeRootTasksInWindowingModes(@NonNull int[] windowingModes)",
    "returnType" : "void",
    "comment" : "\n     * Removes root tasks in the windowing modes from the system if they are of activity type\n     * ACTIVITY_TYPE_STANDARD or ACTIVITY_TYPE_UNDEFINED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeRootTasksWithActivityTypes(@NonNull int[] activityTypes)",
    "returnType" : "void",
    "comment" : " Removes root tasks of the activity types from the system. ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllVisibleRecentTasks()",
    "returnType" : "void",
    "comment" : "\n     * Removes all visible recent tasks from the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxRecentTasksStatic()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of recents entries that we will maintain and show.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSplashScreenViewCopyFinished(int taskId, @Nullable SplashScreenViewParcelable parcelable)",
    "returnType" : "void",
    "comment" : "\n     * Notify the server that splash screen of the given task has been copied\"\n     *\n     * @param taskId Id of task to handle the material to reconstruct the splash screen view.\n     * @param parcelable Used to reconstruct the view, null means the surface is un-copyable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultAppRecentsLimitStatic()",
    "returnType" : "int",
    "comment" : "\n     * Return the default limit on the number of recents that an app can make.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxAppRecentsLimitStatic()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum limit on the number of recents that an app can make.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean supportsMultiWindow(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the system supports at least one form of multi-window.\n     * E.g. freeform, split-screen, picture-in-picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean supportsSplitScreenMultiWindow(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the display the context is associated with supports split screen\n     * multi-window.\n     *\n     * @throws UnsupportedOperationException if the supplied {@link Context} is not associated with\n     * a display.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public void startSystemLockTaskMode(int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Start to enter lock task mode for given task by system(UI).\n     * @param taskId Id of task to lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopSystemLockTaskMode()",
    "returnType" : "void",
    "comment" : "\n     * Stop lock task mode by system(UI).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void moveTaskToRootTask(int taskId, int rootTaskId, boolean toTop)",
    "returnType" : "void",
    "comment" : "\n     * Move task to root task with given id.\n     * @param taskId Id of the task to move.\n     * @param rootTaskId Id of the rootTask for task moving.\n     * @param toTop Whether the given task should shown to top of stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resizeTask(int taskId, Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Resize task to given bounds.\n     * @param taskId Id of task to resize.\n     * @param bounds Bounds to resize task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearLaunchParamsForPackages(List<String> packageNames)",
    "returnType" : "void",
    "comment" : "\n     * Clears launch params for the given package.\n     * @param packageNames the names of the packages of which the launch params are to be cleared\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Configuration config)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the UI mode of the given config supports error dialogs (ANR, crash, etc).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : " @return whether the current UI mode supports error dialogs (ANR, crash, etc). ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxNumPictureInPictureActions(@NonNull Context context)",
    "returnType" : "int",
    "comment" : " @return max allowed number of actions in picture-in-picture mode. ",
    "links" : [ ]
  }, {
    "name" : "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : "\n     * @return List of running tasks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum, boolean filterOnlyVisibleRecents)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : "\n     * @return List of running tasks that can be filtered by visibility in recents.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum, boolean filterOnlyVisibleRecents, boolean keepIntentExtra)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : "\n     * @return List of running tasks that can be filtered by visibility in recents and keep intent\n     * extra.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum, boolean filterOnlyVisibleRecents, boolean keepIntentExtra, int displayId)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : "\n     * @return List of running tasks that can be filtered by visibility and displayId in recents\n     * and keep intent extra.\n     * @param displayId the target display id, or {@link INVALID_DISPLAY} not to filter by displayId\n     * @hide\n     ",
    "links" : [ "android.view.Display.INVALID_DISPLAY" ]
  }, {
    "name" : "public List<ActivityManager.RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId)",
    "returnType" : "List<ActivityManager.RecentTaskInfo>",
    "comment" : "\n     * @return List of recent tasks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerTaskStackListener(TaskStackListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterTaskStackListener(TaskStackListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Rect getTaskBounds(int taskId)",
    "returnType" : "Rect",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerRemoteAnimationsForDisplay(int displayId, RemoteAnimationDefinition definition)",
    "returnType" : "void",
    "comment" : "\n     * Registers remote animations for a display.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInLockTaskMode()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeTask(int taskId)",
    "returnType" : "boolean",
    "comment" : " Removes task by a given taskId ",
    "links" : [ ]
  }, {
    "name" : "public void detachNavigationBarFromApp(@NonNull IBinder transition)",
    "returnType" : "void",
    "comment" : "\n     * Detaches the navigation bar from the app it was attached to during a transition.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateLockTaskPackages(@NonNull Context context, @NonNull String[] packages)",
    "returnType" : "void",
    "comment" : " Update the list of packages allowed in lock task mode. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ActivityTaskManager getInstance()", "public static IActivityTaskManager getService()", "public void removeRootTasksInWindowingModes(@NonNull int[] windowingModes)", "public void removeRootTasksWithActivityTypes(@NonNull int[] activityTypes)", "public void removeAllVisibleRecentTasks()", "public static int getMaxRecentTasksStatic()", "public void onSplashScreenViewCopyFinished(int taskId, @Nullable SplashScreenViewParcelable parcelable)", "public static int getDefaultAppRecentsLimitStatic()", "public static int getMaxAppRecentsLimitStatic()", "public static boolean supportsMultiWindow(Context context)", "public static boolean supportsSplitScreenMultiWindow(Context context)", "public void startSystemLockTaskMode(int taskId)", "public void stopSystemLockTaskMode()", "public void moveTaskToRootTask(int taskId, int rootTaskId, boolean toTop)", "public void resizeTask(int taskId, Rect bounds)", "public void clearLaunchParamsForPackages(List<String> packageNames)", "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Configuration config)", "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Context context)", "public static int getMaxNumPictureInPictureActions(@NonNull Context context)", "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum)", "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum, boolean filterOnlyVisibleRecents)", "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum, boolean filterOnlyVisibleRecents, boolean keepIntentExtra)", "public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum, boolean filterOnlyVisibleRecents, boolean keepIntentExtra, int displayId)", "public List<ActivityManager.RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId)", "public void registerTaskStackListener(TaskStackListener listener)", "public void unregisterTaskStackListener(TaskStackListener listener)", "public Rect getTaskBounds(int taskId)", "public void registerRemoteAnimationsForDisplay(int displayId, RemoteAnimationDefinition definition)", "public boolean isInLockTaskMode()", "public boolean removeTask(int taskId)", "public void detachNavigationBarFromApp(@NonNull IBinder transition)", "public void updateLockTaskPackages(@NonNull Context context, @NonNull String[] packages)" ],
  "variableNames" : [ "INVALID_STACK_ID", "INVALID_TASK_ID", "INVALID_WINDOWING_MODE", "RESIZE_MODE_SYSTEM", "RESIZE_MODE_PRESERVE_WINDOW", "RESIZE_MODE_USER", "RESIZE_MODE_FORCED", "RESIZE_MODE_USER_FORCED", "EXTRA_OPTIONS", "EXTRA_IGNORE_TARGET_SECURITY", "DEFAULT_MINIMAL_SPLIT_SCREEN_DISPLAY_SIZE_DP", "sMaxRecentTasks", "sInstance", "IActivityTaskManagerSingleton" ]
}