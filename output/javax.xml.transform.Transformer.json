{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/transform/Transformer.java",
  "packageName" : "javax.xml.transform",
  "className" : "Transformer",
  "comment" : "\n * An instance of this abstract class can transform a\n * source tree into a result tree.\n *\n * <p>An instance of this class can be obtained with the\n * {@link TransformerFactory#newTransformer TransformerFactory.newTransformer}\n * method. This instance may then be used to process XML from a\n * variety of sources and write the transformation output to a\n * variety of sinks.</p>\n *\n * <p>An object of this class may not be used in multiple threads\n * running concurrently.  Different Transformers may be used\n * concurrently by different threads.</p>\n *\n * <p>A <code>Transformer</code> may be used multiple times.  Parameters and\n * output properties are preserved across transformations.</p>\n *\n * @author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 570103 $, $Date: 2007-08-27 06:24:55 -0700 (Mon, 27 Aug 2007) $\n ",
  "links" : [ "javax.xml.transform.TransformerFactory#newTransformer" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * <p>Reset this <code>Transformer</code> to its original configuration.</p>\n     *\n     * <p><code>Transformer</code> is reset to the same state as when it was created with\n     * {@link TransformerFactory#newTransformer()},\n     * {@link TransformerFactory#newTransformer(Source source)} or\n     * {@link Templates#newTransformer()}.\n     * <code>reset()</code> is designed to allow the reuse of existing <code>Transformer</code>s\n     * thus saving resources associated with the creation of new <code>Transformer</code>s.</p>\n     *\n     * <p>The reset <code>Transformer</code> is not guaranteed to have the same {@link URIResolver}\n     * or {@link ErrorListener} <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.\n     * It is guaranteed to have a functionally equal <code>URIResolver</code>\n     * and <code>ErrorListener</code>.</p>\n     *\n     * @since 1.5\n     ",
    "links" : [ "javax.xml.transform.TransformerFactory#newTransformer()", "javax.xml.transform.Templates#newTransformer()", "javax.xml.transform.TransformerFactory#newTransformer(Source", "javax.xml.transform.URIResolver", "#equals(Object", "javax.xml.transform.ErrorListener" ]
  }, {
    "name" : "public abstract void transform(Source xmlSource, Result outputTarget) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * <p>Transform the XML <code>Source</code> to a <code>Result</code>.\n     * Specific transformation behavior is determined by the settings of the\n     * <code>TransformerFactory</code> in effect when the\n     * <code>Transformer</code> was instantiated and any modifications made to\n     * the <code>Transformer</code> instance.</p>\n     *\n     * <p>An empty <code>Source</code> is represented as an empty document\n     * as constructed by {@link javax.xml.parsers.DocumentBuilder#newDocument()}.\n     * The result of transforming an empty <code>Source</code> depends on\n     * the transformation behavior; it is not always an empty\n     * <code>Result</code>.</p>\n     *\n     * @param xmlSource The XML input to transform.\n     * @param outputTarget The <code>Result</code> of transforming the\n     *   <code>xmlSource</code>.\n     *\n     * @throws TransformerException If an unrecoverable error occurs\n     *   during the course of the transformation.\n     ",
    "links" : [ "javax.xml.parsers.DocumentBuilder#newDocument()" ]
  }, {
    "name" : "public abstract void setParameter(String name, Object value)",
    "returnType" : "void",
    "comment" : "\n     * Add a parameter for the transformation.\n     *\n     * <p>Pass a qualified name as a two-part string, the namespace URI\n     * enclosed in curly braces ({}), followed by the local name. If the\n     * name has a null URL, the String only contain the local name. An\n     * application can safely check for a non-null URI by testing to see if the\n     * first character of the name is a '{' character.</p>\n     * <p>For example, if a URI and local name were obtained from an element\n     * defined with &lt;xyz:foo\n     * xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,\n     * then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\".\n     * Note that no prefix is used.</p>\n     *\n     * @param name The name of the parameter, which may begin with a\n     * namespace URI in curly braces ({}).\n     * @param value The value object.  This can be any valid Java object. It is\n     * up to the processor to provide the proper object coercion or to simply\n     * pass the object on for use in an extension.\n     *\n     * @throws NullPointerException If value is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object getParameter(String name)",
    "returnType" : "Object",
    "comment" : "\n     * Get a parameter that was explicitly set with setParameter.\n     *\n     * <p>This method does not return a default parameter value, which\n     * cannot be determined until the node context is evaluated during\n     * the transformation process.\n     *\n     * @param name of <code>Object</code> to get\n     * @return A parameter that has been set with setParameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void clearParameters()",
    "returnType" : "void",
    "comment" : "\n     * Clear all parameters set with setParameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setURIResolver(URIResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Set an object that will be used to resolve URIs used in\n     * document().\n     *\n     * <p>If the resolver argument is null, the URIResolver value will\n     * be cleared and the transformer will no longer have a resolver.</p>\n     *\n     * @param resolver An object that implements the URIResolver interface,\n     * or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract URIResolver getURIResolver()",
    "returnType" : "URIResolver",
    "comment" : "\n     * Get an object that will be used to resolve URIs used in\n     * document().\n     *\n     * @return An object that implements the URIResolver interface,\n     * or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setOutputProperties(Properties oformat)",
    "returnType" : "void",
    "comment" : "\n     * Set the output properties for the transformation.  These\n     * properties will override properties set in the Templates\n     * with xsl:output.\n     *\n     * <p>If argument to this function is null, any properties\n     * previously set are removed, and the value will revert to the value\n     * defined in the templates object.</p>\n     *\n     * <p>Pass a qualified property key name as a two-part string, the namespace\n     * URI enclosed in curly braces ({}), followed by the local name. If the\n     * name has a null URL, the String only contain the local name. An\n     * application can safely check for a non-null URI by testing to see if the\n     * first character of the name is a '{' character.</p>\n     * <p>For example, if a URI and local name were obtained from an element\n     * defined with &lt;xyz:foo\n     * xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,\n     * then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\".\n     * Note that no prefix is used.</p>\n     * An <code>IllegalArgumentException</code> is thrown  if any of the\n     * argument keys are not recognized and are not namespace qualified.\n     *\n     * @param oformat A set of output properties that will be\n     * used to override any of the same properties in affect\n     * for the transformation.\n     *\n     * @see javax.xml.transform.OutputKeys\n     * @see java.util.Properties\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Properties getOutputProperties()",
    "returnType" : "Properties",
    "comment" : "\n     * <p>Get a copy of the output properties for the transformation.</p>\n     *\n     * <p>The properties returned should contain properties set by the user,\n     * and properties set by the stylesheet, and these properties\n     * are \"defaulted\" by default properties specified by\n     * <a href=\"http://www.w3.org/TR/xslt#output\">section 16 of the\n     * XSL Transformations (XSLT) W3C Recommendation</a>.  The properties that\n     * were specifically set by the user or the stylesheet should be in the base\n     * Properties list, while the XSLT default properties that were not\n     * specifically set should be the default Properties list.  Thus,\n     * getOutputProperties().getProperty(String key) will obtain any\n     * property in that was set by {@link #setOutputProperty},\n     * {@link #setOutputProperties}, in the stylesheet, <em>or</em> the default\n     * properties, while\n     * getOutputProperties().get(String key) will only retrieve properties\n     * that were explicitly set by {@link #setOutputProperty},\n     * {@link #setOutputProperties}, or in the stylesheet.</p>\n     *\n     * <p>Note that mutation of the Properties object returned will not\n     * effect the properties that the transformer contains.</p>\n     *\n     * <p>If any of the argument keys are not recognized and are not\n     * namespace qualified, the property will be ignored and not returned.\n     * In other words the behavior is not orthogonal with\n     * {@link #setOutputProperties setOutputProperties}.</p>\n     *\n     * @return A copy of the set of output properties in effect for\n     *   the next transformation.\n     *\n     * @see javax.xml.transform.OutputKeys\n     * @see java.util.Properties\n     * @see <a href=\"http://www.w3.org/TR/xslt#output\">\n     *   XSL Transformations (XSLT) Version 1.0</a>\n     ",
    "links" : [ "#setOutputProperty", "#setOutputProperties" ]
  }, {
    "name" : "public abstract void setOutputProperty(String name, String value) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Set an output property that will be in effect for the\n     * transformation.\n     *\n     * <p>Pass a qualified property name as a two-part string, the namespace URI\n     * enclosed in curly braces ({}), followed by the local name. If the\n     * name has a null URL, the String only contain the local name. An\n     * application can safely check for a non-null URI by testing to see if the\n     * first character of the name is a '{' character.</p>\n     * <p>For example, if a URI and local name were obtained from an element\n     * defined with &lt;xyz:foo\n     * xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,\n     * then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\".\n     * Note that no prefix is used.</p>\n     *\n     * <p>The Properties object that was passed to {@link #setOutputProperties}\n     * won't be effected by calling this method.</p>\n     *\n     * @param name A non-null String that specifies an output\n     * property name, which may be namespace qualified.\n     * @param value The non-null string value of the output property.\n     *\n     * @throws IllegalArgumentException If the property is not supported, and is\n     * not qualified with a namespace.\n     *\n     * @see javax.xml.transform.OutputKeys\n     ",
    "links" : [ "#setOutputProperties" ]
  }, {
    "name" : "public abstract String getOutputProperty(String name) throws IllegalArgumentException",
    "returnType" : "String",
    "comment" : "\n     * Get an output property that is in effect for the\n     * transformer.  The property specified may be a property\n     * that was set with setOutputProperty, or it may be a\n     * property specified in the stylesheet.\n     *\n     * @param name A non-null String that specifies an output\n     * property name, which may be namespace qualified.\n     *\n     * @return The string value of the output property, or null\n     * if no property was found.\n     *\n     * @throws IllegalArgumentException If the property is not supported.\n     *\n     * @see javax.xml.transform.OutputKeys\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setErrorListener(ErrorListener listener) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Set the error event listener in effect for the transformation.\n     *\n     * @param listener The new error listener.\n     * @throws IllegalArgumentException if listener is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ErrorListener getErrorListener()",
    "returnType" : "ErrorListener",
    "comment" : "\n     * Get the error event handler in effect for the transformation.\n     * Implementations must provide a default error listener.\n     *\n     * @return The current error handler, which should never be null.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset()", "public abstract void transform(Source xmlSource, Result outputTarget) throws TransformerException", "public abstract void setParameter(String name, Object value)", "public abstract Object getParameter(String name)", "public abstract void clearParameters()", "public abstract void setURIResolver(URIResolver resolver)", "public abstract URIResolver getURIResolver()", "public abstract void setOutputProperties(Properties oformat)", "public abstract Properties getOutputProperties()", "public abstract void setOutputProperty(String name, String value) throws IllegalArgumentException", "public abstract String getOutputProperty(String name) throws IllegalArgumentException", "public abstract void setErrorListener(ErrorListener listener) throws IllegalArgumentException", "public abstract ErrorListener getErrorListener()" ],
  "variableNames" : [ ]
}