{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/DrawableWrapper.java",
  "packageName" : "android.graphics.drawable",
  "className" : "DrawableWrapper",
  "comment" : "\n * Drawable container with only one child element.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mState",
    "type" : "DrawableWrapperState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void updateLocalState(Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Initializes local dynamic properties from state. This should be called\n     * after significant state changes, e.g. from the One True Constructor and\n     * after inflating or applying a theme.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setXfermode(Xfermode mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDrawable(@Nullable Drawable dr)",
    "returnType" : "void",
    "comment" : "\n     * Sets the wrapped drawable.\n     *\n     * @param dr the wrapped drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return the wrapped drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * Updates constant state properties from the provided typed array.\n     * <p>\n     * Implementing subclasses should call through to the super method first.\n     *\n     * @param a the typed array rom which properties should be read\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getPadding(@NonNull Rect padding)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getHotspotBounds(@NonNull Rect outRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(@Nullable ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(@NonNull int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DrawableWrapperState mutateConstantState()",
    "returnType" : "DrawableWrapperState",
    "comment" : "\n     * Mutates the constant state and returns the new state. Responsible for\n     * updating any local copy.\n     * <p>\n     * This method should never call the super implementation; it should always\n     * mutate and return its own constant state.\n     *\n     * @return the new state\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide Only used by the framework for pre-loading resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflateChildDrawable(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Called during inflation to inflate the child element. The last valid\n     * child element will take precedence over any other child elements or\n     * explicit drawable attribute.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void updateLocalState(Resources res)", "public void setXfermode(Xfermode mode)", "public void setDrawable(@Nullable Drawable dr)", "public Drawable getDrawable()", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@NonNull Theme t)", "private void updateStateFromTypedArray(@NonNull TypedArray a)", "public boolean canApplyTheme()", "public void invalidateDrawable(@NonNull Drawable who)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public void draw(@NonNull Canvas canvas)", "public int getChangingConfigurations()", "public boolean getPadding(@NonNull Rect padding)", "public Insets getOpticalInsets()", "public void setHotspot(float x, float y)", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void getHotspotBounds(@NonNull Rect outRect)", "public boolean setVisible(boolean visible, boolean restart)", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setColorFilter(@Nullable ColorFilter colorFilter)", "public ColorFilter getColorFilter()", "public void setTintList(@Nullable ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)", "public int getOpacity()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "protected boolean onStateChange(@NonNull int[] state)", "public void jumpToCurrentState()", "protected boolean onLevelChange(int level)", "protected void onBoundsChange(@NonNull Rect bounds)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public void getOutline(@NonNull Outline outline)", "public ConstantState getConstantState()", "public Drawable mutate()", " DrawableWrapperState mutateConstantState()", "public void clearMutated()", "private void inflateChildDrawable(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException" ],
  "variableNames" : [ "mState", "mDrawable", "mMutated" ]
}