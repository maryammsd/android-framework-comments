{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/DiscardableReferencePool.java",
  "packageName" : "org.chromium.base",
  "className" : "DiscardableReferencePool",
  "comment" : "\n * A DiscardableReferencePool allows handing out typed references to objects (\"payloads\") that can\n * be dropped in one batch (\"drained\"), e.g. under memory pressure. In contrast to {@link\n * java.lang.ref.WeakReference}s, which drop their referents when they get garbage collected, a\n * reference pool gives more precise control over when exactly it is drained.\n *\n * <p>Internally it uses a {@link WeakHashMap} with the reference itself as a key to allow the\n * payloads to be garbage collected regularly when the last reference goes away before the pool is\n * drained.\n *\n * <p>This class and its references are not thread-safe and should not be used simultaneously by\n * multiple threads.\n ",
  "links" : [ "java.lang.ref.WeakReference", "java.util.WeakHashMap" ],
  "variables" : [ {
    "name" : "mPool",
    "type" : "Set<DiscardableReference<?>>",
    "comment" : "\n     * The underlying data storage. The wildcard type parameter allows using a single pool for\n     * references of any type.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DiscardableReference<T> put(T payload)",
    "returnType" : "DiscardableReference<T>",
    "comment" : "\n     * @param <T> The type of the object.\n     * @param payload The payload to add to the pool.\n     * @return A new reference to the {@code payload}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(DiscardableReference<?> ref)",
    "returnType" : "void",
    "comment" : "\n     * Remove this reference from the pool, allowing garbage collection to pick it up.\n     *\n     * @param ref The discardable reference to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void drain()",
    "returnType" : "void",
    "comment" : "\n     * Drains the pool, removing all references to objects in the pool and therefore allowing them\n     * to be garbage collected.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DiscardableReference<T> put(T payload)", "public void remove(DiscardableReference<?> ref)", "public void drain()" ],
  "variableNames" : [ "mPool" ]
}