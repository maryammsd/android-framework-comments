{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/InetSocketAddress.java",
  "packageName" : "java.net",
  "className" : "InetSocketAddress",
  "comment" : "\n *\n * This class implements an IP Socket Address (IP address + port number)\n * It can also be a pair (hostname + port number), in which case an attempt\n * will be made to resolve the hostname. If resolution fails then the address\n * is said to be <I>unresolved</I> but can still be used on some circumstances\n * like connecting through a proxy.\n * <p>\n * It provides an immutable object used by sockets for binding, connecting, or\n * as returned values.\n * <p>\n * The <i>wildcard</i> is a special local IP address. It usually means \"any\"\n * and can only be used for {@code bind} operations.\n *\n * @see java.net.Socket\n * @see java.net.ServerSocket\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "holder",
    "type" : "InetSocketAddressHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * @serialField hostname String the hostname of the Socket Address\n     * @serialField addr InetAddress the IP address of the Socket Address\n     * @serialField port int the port number of the Socket Address\n     ",
    "links" : [ ]
  }, {
    "name" : "UNSAFE",
    "type" : "jdk.internal.misc.Unsafe",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIELDS_OFFSET",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int checkPort(int port)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String checkHost(String hostname)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InetSocketAddress createUnresolved(String host, int port)",
    "returnType" : "InetSocketAddress",
    "comment" : "\n     *\n     * Creates an unresolved socket address from a hostname and a port number.\n     * <p>\n     * No attempt will be made to resolve the hostname into an InetAddress.\n     * The address will be flagged as <I>unresolved</I>.\n     * <p>\n     * A valid port value is between 0 and 65535.\n     * A port number of {@code zero} will let the system pick up an\n     * ephemeral port in a {@code bind} operation.\n     *\n     * @param   host    the Host name\n     * @param   port    The port number\n     * @throws IllegalArgumentException if the port parameter is outside\n     *                  the range of valid port values, or if the hostname\n     *                  parameter is {@code null}.\n     * @see     #isUnresolved()\n     * @return  an {@code InetSocketAddress} representing the unresolved\n     *          socket address\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the state of this object to the stream.\n     *\n     * @param  out the {@code ObjectOutputStream} to which data is written\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Restores the state of this object from the stream.\n     *\n     * @param  in the {@code ObjectInputStream} from which data is read\n     * @throws IOException if an I/O error occurs\n     * @throws ClassNotFoundException if a serialized class cannot be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObjectNoData() throws ObjectStreamException",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code InvalidObjectException}, always.\n     * @throws ObjectStreamException always\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Gets the port number.\n     *\n     * @return the port number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final InetAddress getAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Gets the {@code InetAddress}.\n     *\n     * @return the InetAddress or {@code null} if it is unresolved.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getHostName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the {@code hostname}.\n     * Note: This method may trigger a name service reverse lookup if the\n     * address was created with a literal IP address.\n     *\n     * @return  the hostname part of the address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getHostString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the hostname, or the String form of the address if it\n     * doesn't have a hostname (it was created using a literal).\n     * This has the benefit of <b>not</b> attempting a reverse lookup.\n     *\n     * @return the hostname, or String representation of the address.\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isUnresolved()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the address has been resolved or not.\n     *\n     * @return {@code true} if the hostname couldn't be resolved into\n     *          an {@code InetAddress}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Constructs a string representation of this InetSocketAddress.\n     * This string is constructed by calling {@link InetAddress#toString()}\n     * on the InetAddress and concatenating the port number (with a colon).\n     * <p>\n     * If the address is an IPv6 address, the IPv6 literal is enclosed in\n     * square brackets, for example: {@code \"localhost/[0:0:0:0:0:0:0:1]:80\"}.\n     * If the address is {@linkplain #isUnresolved() unresolved},\n     * {@code <unresolved>} is displayed in place of the address literal, for\n     * example {@code \"foo/<unresolved>:80\"}.\n     * <p>\n     * To retrieve a string representation of the hostname or the address, use\n     * {@link #getHostString()}, rather than parsing the string returned by this\n     * {@link #toString()} method.\n     *\n     * @return  a string representation of this object.\n     ",
    "links" : [ "java.net.InetAddress#toString()", "#getHostString()", "#toString()" ]
  }, {
    "name" : "public final boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object.\n     * The result is {@code true} if and only if the argument is\n     * not {@code null} and it represents the same address as\n     * this object.\n     * <p>\n     * Two instances of {@code InetSocketAddress} represent the same\n     * address if both the InetAddresses (or hostnames if it is unresolved) and port\n     * numbers are equal.\n     * If both addresses are unresolved, then the hostname and the port number\n     * are compared.\n     *\n     * Note: Hostnames are case insensitive. e.g. \"FooBar\" and \"foobar\" are\n     * considered equal.\n     *\n     * @param   obj   the object to compare against.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see java.net.InetAddress#equals(java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this socket address.\n     *\n     * @return  a hash code value for this socket address.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int checkPort(int port)", "private static String checkHost(String hostname)", "public static InetSocketAddress createUnresolved(String host, int port)", "private void writeObject(ObjectOutputStream out) throws IOException", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "private void readObjectNoData() throws ObjectStreamException", "public final int getPort()", "public final InetAddress getAddress()", "public final String getHostName()", "public final String getHostString()", "public final boolean isUnresolved()", "public String toString()", "public final boolean equals(Object obj)", "public final int hashCode()" ],
  "variableNames" : [ "holder", "serialVersionUID", "serialPersistentFields", "UNSAFE", "FIELDS_OFFSET" ]
}