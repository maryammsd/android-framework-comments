{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertPathValidatorSpi.java",
  "packageName" : "java.security.cert",
  "className" : "CertPathValidatorSpi",
  "comment" : "\n *\n * The <i>Service Provider Interface</i> (<b>SPI</b>)\n * for the {@link CertPathValidator CertPathValidator} class. All\n * {@code CertPathValidator} implementations must include a class (the\n * SPI class) that extends this class ({@code CertPathValidatorSpi})\n * and implements all of its methods. In general, instances of this class\n * should only be accessed through the {@code CertPathValidator} class.\n * For details, see the Java Cryptography Architecture.\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * Instances of this class need not be protected against concurrent\n * access from multiple threads. Threads that need to access a single\n * {@code CertPathValidatorSpi} instance concurrently should synchronize\n * amongst themselves and provide the necessary locking before calling the\n * wrapping {@code CertPathValidator} object.\n * <p>\n * However, implementations of {@code CertPathValidatorSpi} may still\n * encounter concurrency issues, since multiple threads each\n * manipulating a different {@code CertPathValidatorSpi} instance need not\n * synchronize.\n *\n * @since       1.4\n * @author      Yassir Elley\n ",
  "links" : [ "java.security.cert.CertPathValidator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params) throws CertPathValidatorException, InvalidAlgorithmParameterException",
    "returnType" : "CertPathValidatorResult",
    "comment" : "\n     * Validates the specified certification path using the specified\n     * algorithm parameter set.\n     * <p>\n     * The {@code CertPath} specified must be of a type that is\n     * supported by the validation algorithm, otherwise an\n     * {@code InvalidAlgorithmParameterException} will be thrown. For\n     * example, a {@code CertPathValidator} that implements the PKIX\n     * algorithm validates {@code CertPath} objects of type X.509.\n     *\n     * @param certPath the {@code CertPath} to be validated\n     * @param params the algorithm parameters\n     * @return the result of the validation algorithm\n     * @exception CertPathValidatorException if the {@code CertPath}\n     * does not validate\n     * @exception InvalidAlgorithmParameterException if the specified\n     * parameters or the type of the specified {@code CertPath} are\n     * inappropriate for this {@code CertPathValidator}\n     ",
    "links" : [ ]
  }, {
    "name" : "public CertPathChecker engineGetRevocationChecker()",
    "returnType" : "CertPathChecker",
    "comment" : "\n     * Returns a {@code CertPathChecker} that this implementation uses to\n     * check the revocation status of certificates. A PKIX implementation\n     * returns objects of type {@code PKIXRevocationChecker}.\n     *\n     * <p>The primary purpose of this method is to allow callers to specify\n     * additional input parameters and options specific to revocation checking.\n     * See the class description of {@code CertPathValidator} for an example.\n     *\n     * <p>This method was added to version 1.8 of the Java Platform Standard\n     * Edition. In order to maintain backwards compatibility with existing\n     * service providers, this method cannot be abstract and by default throws\n     * an {@code UnsupportedOperationException}.\n     *\n     * @return a {@code CertPathChecker} that this implementation uses to\n     * check the revocation status of certificates\n     * @throws UnsupportedOperationException if this method is not supported\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params) throws CertPathValidatorException, InvalidAlgorithmParameterException", "public CertPathChecker engineGetRevocationChecker()" ],
  "variableNames" : [ ]
}