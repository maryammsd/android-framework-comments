{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/apk/SourceStampVerifier.java",
  "packageName" : "android.util.apk",
  "className" : "SourceStampVerifier",
  "comment" : "\n * Source Stamp verifier.\n *\n * <p>SourceStamp improves traceability of apps with respect to unauthorized distribution.\n *\n * <p>The stamp is part of the APK that is protected by the signing block.\n *\n * <p>The APK contents hash is signed using the stamp key, and is saved as part of the signing\n * block.\n *\n * @hide for internal use only.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_SIGNATURE_SCHEME_V2_BLOCK_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_SIGNATURE_SCHEME_V3_BLOCK_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_STAMP_BLOCK_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROOF_OF_ROTATION_ATTR_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_JAR_SIGNATURE_SCHEME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_APK_SIGNATURE_SCHEME_V2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_APK_SIGNATURE_SCHEME_V3",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME",
    "type" : "String",
    "comment" : " Name of the SourceStamp certificate hash ZIP entry in APKs. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SourceStampVerificationResult verify(List<String> apkFiles)",
    "returnType" : "SourceStampVerificationResult",
    "comment" : " Verifies SourceStamp present in a list of (split) APKs for the same app. ",
    "links" : [ ]
  }, {
    "name" : "public static SourceStampVerificationResult verify(String apkFile)",
    "returnType" : "SourceStampVerificationResult",
    "comment" : " Verifies SourceStamp present in the provided APK. ",
    "links" : [ ]
  }, {
    "name" : "private static SourceStampVerificationResult verify(RandomAccessFile apk, byte[] sourceStampCertificateDigest, byte[] manifestBytes)",
    "returnType" : "SourceStampVerificationResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static SourceStampVerificationResult verify(SignatureInfo signatureInfo, Map<Integer, byte[]> signatureSchemeDigests, byte[] sourceStampCertificateDigest) throws SecurityException, IOException",
    "returnType" : "SourceStampVerificationResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static X509Certificate verifySourceStampCertificate(ByteBuffer sourceStampBlockData, byte[] sourceStampCertificateDigest) throws IOException",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Verify the SourceStamp certificate found in the signing block is the same as the SourceStamp\n     * certificate found in the APK. It returns the verified certificate.\n     *\n     * @param sourceStampBlockData         the source stamp block in the APK signing block which\n     *                                     contains\n     *                                     the certificate used to sign the stamp digests.\n     * @param sourceStampCertificateDigest the source stamp certificate digest found in the APK.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void verifySourceStampSignature(byte[] data, X509Certificate sourceStampCertificate, ByteBuffer signatures) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Verify the SourceStamp signature found in the signing block is signed by the SourceStamp\n     * certificate found in the APK.\n     *\n     * @param data                   the digest to be verified being signed by the source stamp\n     *                               certificate.\n     * @param sourceStampCertificate the source stamp certificate used to sign the stamp digests.\n     * @param signatures             the source stamp block in the APK signing block which contains\n     *                               the stamp signed digests.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<Integer, Map<Integer, byte[]>> getSignatureSchemeApkContentDigests(RandomAccessFile apk, byte[] manifestBytes) throws IOException",
    "returnType" : "Map<Integer, Map<Integer, byte[]>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Map<Integer, byte[]> getApkContentDigestsFromSignatureBlock(ByteBuffer signatureBlock) throws IOException",
    "returnType" : "Map<Integer, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Map<Integer, byte[]> getSignatureSchemeDigests(Map<Integer, Map<Integer, byte[]>> signatureSchemeApkContentDigests)",
    "returnType" : "Map<Integer, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Pair<Integer, byte[]>> getApkDigests(Map<Integer, byte[]> apkContentDigests)",
    "returnType" : "List<Pair<Integer, byte[]>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] getSourceStampCertificateDigest(StrictJarFile apkJar) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] getManifestBytes(StrictJarFile apkJar) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] encodeApkContentDigests(List<Pair<Integer, byte[]>> apkContentDigests)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApkSigningBlockUtils.VerifiedProofOfRotation verifySourceStampAttributes(ByteBuffer stampAttributeData, X509Certificate sourceStampCertificate) throws IOException",
    "returnType" : "ApkSigningBlockUtils.VerifiedProofOfRotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] computeSha256Digest(byte[] input)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void closeApkJar(StrictJarFile apkJar)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SourceStampVerificationResult verify(List<String> apkFiles)", "public static SourceStampVerificationResult verify(String apkFile)", "private static SourceStampVerificationResult verify(RandomAccessFile apk, byte[] sourceStampCertificateDigest, byte[] manifestBytes)", "private static SourceStampVerificationResult verify(SignatureInfo signatureInfo, Map<Integer, byte[]> signatureSchemeDigests, byte[] sourceStampCertificateDigest) throws SecurityException, IOException", "private static X509Certificate verifySourceStampCertificate(ByteBuffer sourceStampBlockData, byte[] sourceStampCertificateDigest) throws IOException", "private static void verifySourceStampSignature(byte[] data, X509Certificate sourceStampCertificate, ByteBuffer signatures) throws IOException", "private static Map<Integer, Map<Integer, byte[]>> getSignatureSchemeApkContentDigests(RandomAccessFile apk, byte[] manifestBytes) throws IOException", "private static Map<Integer, byte[]> getApkContentDigestsFromSignatureBlock(ByteBuffer signatureBlock) throws IOException", "private static Map<Integer, byte[]> getSignatureSchemeDigests(Map<Integer, Map<Integer, byte[]>> signatureSchemeApkContentDigests)", "private static List<Pair<Integer, byte[]>> getApkDigests(Map<Integer, byte[]> apkContentDigests)", "private static byte[] getSourceStampCertificateDigest(StrictJarFile apkJar) throws IOException", "private static byte[] getManifestBytes(StrictJarFile apkJar) throws IOException", "private static byte[] encodeApkContentDigests(List<Pair<Integer, byte[]>> apkContentDigests)", "private static ApkSigningBlockUtils.VerifiedProofOfRotation verifySourceStampAttributes(ByteBuffer stampAttributeData, X509Certificate sourceStampCertificate) throws IOException", "private static byte[] computeSha256Digest(byte[] input)", "private static void closeApkJar(StrictJarFile apkJar)" ],
  "variableNames" : [ "TAG", "APK_SIGNATURE_SCHEME_V2_BLOCK_ID", "APK_SIGNATURE_SCHEME_V3_BLOCK_ID", "SOURCE_STAMP_BLOCK_ID", "PROOF_OF_ROTATION_ATTR_ID", "VERSION_JAR_SIGNATURE_SCHEME", "VERSION_APK_SIGNATURE_SCHEME_V2", "VERSION_APK_SIGNATURE_SCHEME_V3", "SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME" ]
}