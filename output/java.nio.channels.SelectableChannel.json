{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/SelectableChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "SelectableChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract SelectorProvider provider()",
    "returnType" : "SelectorProvider",
    "comment" : "\n     * Returns the provider that created this channel.\n     *\n     * @return  The provider that created this channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int validOps()",
    "returnType" : "int",
    "comment" : "\n     * Returns an <a href=\"SelectionKey.html#opsets\">operation set</a>\n     * identifying this channel's supported operations.  The bits that are set\n     * in this integer value denote exactly the operations that are valid for\n     * this channel.  This method always returns the same value for a given\n     * concrete channel class.\n     *\n     * @return  The valid-operation set\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isRegistered()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this channel is currently registered with any\n     * selectors.  A newly-created channel is not registered.\n     *\n     * <p> Due to the inherent delay between key cancellation and channel\n     * deregistration, a channel may remain registered for some time after all\n     * of its keys have been cancelled.  A channel may also remain registered\n     * for some time after it is closed.  </p>\n     *\n     * @return {@code true} if, and only if, this channel is registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SelectionKey keyFor(Selector sel)",
    "returnType" : "SelectionKey",
    "comment" : "\n     * Retrieves the key representing the channel's registration with the given\n     * selector.\n     *\n     * @param   sel\n     *          The selector\n     *\n     * @return  The key returned when this channel was last registered with the\n     *          given selector, or {@code null} if this channel is not\n     *          currently registered with that selector\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SelectionKey register(Selector sel, int ops, Object att) throws ClosedChannelException",
    "returnType" : "SelectionKey",
    "comment" : "\n     * Registers this channel with the given selector, returning a selection\n     * key.\n     *\n     * <p> If this channel is currently registered with the given selector then\n     * the selection key representing that registration is returned.  The key's\n     * interest set will have been changed to {@code ops}, as if by invoking\n     * the {@link SelectionKey#interestOps(int) interestOps(int)} method.  If\n     * the {@code att} argument is not {@code null} then the key's attachment\n     * will have been set to that value.  A {@link CancelledKeyException} will\n     * be thrown if the key has already been cancelled.\n     *\n     * <p> Otherwise this channel has not yet been registered with the given\n     * selector, so it is registered and the resulting new key is returned.\n     * The key's initial interest set will be {@code ops} and its attachment\n     * will be {@code att}.\n     *\n     * <p> This method may be invoked at any time.  If this method is invoked\n     * while a selection operation is in progress then it has no effect upon\n     * that operation; the new registration or change to the key's interest set\n     * will be seen by the next selection operation.  If this method is invoked\n     * while an invocation of {@link #configureBlocking(boolean) configureBlocking}\n     * is in progress then it will block until the channel's blocking mode has\n     * been adjusted.\n     *\n     * <p> If this channel is closed while this operation is in progress then\n     * the key returned by this method will have been cancelled and will\n     * therefore be invalid. </p>\n     *\n     * @param  sel\n     *         The selector with which this channel is to be registered\n     *\n     * @param  ops\n     *         The interest set for the resulting key\n     *\n     * @param  att\n     *         The attachment for the resulting key; may be {@code null}\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  ClosedSelectorException\n     *          If the selector is closed\n     *\n     * @throws  IllegalBlockingModeException\n     *          If this channel is in blocking mode\n     *\n     * @throws  IllegalSelectorException\n     *          If this channel was not created by the same provider\n     *          as the given selector\n     *\n     * @throws  CancelledKeyException\n     *          If this channel is currently registered with the given selector\n     *          but the corresponding key has already been cancelled\n     *\n     * @throws  IllegalArgumentException\n     *          If a bit in the {@code ops} set does not correspond to an\n     *          operation that is supported by this channel, that is, if\n     *          {@code set & ~validOps() != 0}\n     *\n     * @return  A key representing the registration of this channel with\n     *          the given selector\n     ",
    "links" : [ "java.nio.channels.SelectionKey#interestOps(int)", "java.nio.channels.CancelledKeyException", "#configureBlocking(boolean)" ]
  }, {
    "name" : "public final SelectionKey register(Selector sel, int ops) throws ClosedChannelException",
    "returnType" : "SelectionKey",
    "comment" : "\n     * Registers this channel with the given selector, returning a selection\n     * key.\n     *\n     * <p> An invocation of this convenience method of the form\n     *\n     * <blockquote>{@code sc.register(sel, ops)}</blockquote>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <blockquote>{@code sc.}{@link\n     * #register(java.nio.channels.Selector,int,java.lang.Object)\n     * register(sel, ops, null)}</blockquote>\n     *\n     * @param  sel\n     *         The selector with which this channel is to be registered\n     *\n     * @param  ops\n     *         The interest set for the resulting key\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  ClosedSelectorException\n     *          If the selector is closed\n     *\n     * @throws  IllegalBlockingModeException\n     *          If this channel is in blocking mode\n     *\n     * @throws  IllegalSelectorException\n     *          If this channel was not created by the same provider\n     *          as the given selector\n     *\n     * @throws  CancelledKeyException\n     *          If this channel is currently registered with the given selector\n     *          but the corresponding key has already been cancelled\n     *\n     * @throws  IllegalArgumentException\n     *          If a bit in {@code ops} does not correspond to an operation\n     *          that is supported by this channel, that is, if {@code set &\n     *          ~validOps() != 0}\n     *\n     * @return  A key representing the registration of this channel with\n     *          the given selector\n     ",
    "links" : [ "#register(java.nio.channels.Selector" ]
  }, {
    "name" : "public abstract SelectableChannel configureBlocking(boolean block) throws IOException",
    "returnType" : "SelectableChannel",
    "comment" : "\n     * Adjusts this channel's blocking mode.\n     *\n     * <p> If this channel is registered with one or more selectors then an\n     * attempt to place it into blocking mode will cause an {@link\n     * IllegalBlockingModeException} to be thrown.\n     *\n     * <p> This method may be invoked at any time.  The new blocking mode will\n     * only affect I/O operations that are initiated after this method returns.\n     * For some implementations this may require blocking until all pending I/O\n     * operations are complete.\n     *\n     * <p> If this method is invoked while another invocation of this method or\n     * of the {@link #register(Selector, int) register} method is in progress\n     * then it will first block until the other operation is complete. </p>\n     *\n     * @param  block  If {@code true} then this channel will be placed in\n     *                blocking mode; if {@code false} then it will be placed\n     *                non-blocking mode\n     *\n     * @return  This selectable channel\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IllegalBlockingModeException\n     *          If {@code block} is {@code true} and this channel is\n     *          registered with one or more selectors\n     *\n     * @throws IOException\n     *         If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.IllegalBlockingModeException", "#register(Selector" ]
  }, {
    "name" : "public abstract boolean isBlocking()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not every I/O operation on this channel will block\n     * until it completes.  A newly-created channel is always in blocking mode.\n     *\n     * <p> If this channel is closed then the value returned by this method is\n     * not specified. </p>\n     *\n     * @return {@code true} if, and only if, this channel is in blocking mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object blockingLock()",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the object upon which the {@link #configureBlocking\n     * configureBlocking} and {@link #register register} methods synchronize.\n     * This is often useful in the implementation of adaptors that require a\n     * specific blocking mode to be maintained for a short period of time.\n     *\n     * @return  The blocking-mode lock object\n     ",
    "links" : [ "#register", "#configureBlockingconfigureBlocking" ]
  } ],
  "methodNames" : [ "public abstract SelectorProvider provider()", "public abstract int validOps()", "public abstract boolean isRegistered()", "public abstract SelectionKey keyFor(Selector sel)", "public abstract SelectionKey register(Selector sel, int ops, Object att) throws ClosedChannelException", "public final SelectionKey register(Selector sel, int ops) throws ClosedChannelException", "public abstract SelectableChannel configureBlocking(boolean block) throws IOException", "public abstract boolean isBlocking()", "public abstract Object blockingLock()" ],
  "variableNames" : [ ]
}