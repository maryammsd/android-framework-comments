{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/DisplayInfo.java",
  "packageName" : "android.view",
  "className" : "DisplayInfo",
  "comment" : "\n * Describes the characteristics of a particular logical display.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "layerStack",
    "type" : "int",
    "comment" : "\n     * The surface flinger layer stack associated with this logical display.\n     ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Display flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "int",
    "comment" : "\n     * Display type.\n     ",
    "links" : [ ]
  }, {
    "name" : "displayId",
    "type" : "int",
    "comment" : "\n     * Logical display identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "displayGroupId",
    "type" : "int",
    "comment" : "\n     * Display Group identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "address",
    "type" : "DisplayAddress",
    "comment" : "\n     * Display address, or null if none.\n     * Interpretation varies by display type.\n     ",
    "links" : [ ]
  }, {
    "name" : "deviceProductInfo",
    "type" : "DeviceProductInfo",
    "comment" : "\n     * Product-specific information about the display or the directly connected device on the\n     * display chain. For example, if the display is transitively connected, this field may contain\n     * product information about the intermediate device.\n     ",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * The human-readable name of the display.\n     ",
    "links" : [ ]
  }, {
    "name" : "uniqueId",
    "type" : "String",
    "comment" : "\n     * Unique identifier for the display. Shouldn't be displayed to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "appWidth",
    "type" : "int",
    "comment" : "\n     * The width of the portion of the display that is available to applications, in pixels.\n     * Represents the size of the display minus any system decorations.\n     ",
    "links" : [ ]
  }, {
    "name" : "appHeight",
    "type" : "int",
    "comment" : "\n     * The height of the portion of the display that is available to applications, in pixels.\n     * Represents the size of the display minus any system decorations.\n     ",
    "links" : [ ]
  }, {
    "name" : "smallestNominalAppWidth",
    "type" : "int",
    "comment" : "\n     * The smallest value of {@link #appWidth} that an application is likely to encounter,\n     * in pixels, excepting cases where the width may be even smaller due to the presence\n     * of a soft keyboard, for example.\n     ",
    "links" : [ "#appWidth" ]
  }, {
    "name" : "smallestNominalAppHeight",
    "type" : "int",
    "comment" : "\n     * The smallest value of {@link #appHeight} that an application is likely to encounter,\n     * in pixels, excepting cases where the height may be even smaller due to the presence\n     * of a soft keyboard, for example.\n     ",
    "links" : [ "#appHeight" ]
  }, {
    "name" : "largestNominalAppWidth",
    "type" : "int",
    "comment" : "\n     * The largest value of {@link #appWidth} that an application is likely to encounter,\n     * in pixels, excepting cases where the width may be even larger due to system decorations\n     * such as the status bar being hidden, for example.\n     ",
    "links" : [ "#appWidth" ]
  }, {
    "name" : "largestNominalAppHeight",
    "type" : "int",
    "comment" : "\n     * The largest value of {@link #appHeight} that an application is likely to encounter,\n     * in pixels, excepting cases where the height may be even larger due to system decorations\n     * such as the status bar being hidden, for example.\n     ",
    "links" : [ "#appHeight" ]
  }, {
    "name" : "logicalWidth",
    "type" : "int",
    "comment" : "\n     * The logical width of the display, in pixels.\n     * Represents the usable size of the display which may be smaller than the\n     * physical size when the system is emulating a smaller display.\n     ",
    "links" : [ ]
  }, {
    "name" : "logicalHeight",
    "type" : "int",
    "comment" : "\n     * The logical height of the display, in pixels.\n     * Represents the usable size of the display which may be smaller than the\n     * physical size when the system is emulating a smaller display.\n     ",
    "links" : [ ]
  }, {
    "name" : "displayCutout",
    "type" : "DisplayCutout",
    "comment" : " Remark on @UnsupportedAppUsage: Display.getCutout should be used instead",
    "links" : [ ]
  }, {
    "name" : "rotation",
    "type" : "int",
    "comment" : "\n     * The rotation of the display relative to its natural orientation.\n     * May be one of {@link android.view.Surface#ROTATION_0},\n     * {@link android.view.Surface#ROTATION_90}, {@link android.view.Surface#ROTATION_180},\n     * {@link android.view.Surface#ROTATION_270}.\n     * <p>\n     * The value of this field is indeterminate if the logical display is presented on\n     * more than one physical display.\n     * </p>\n     ",
    "links" : [ "android.view.Surface#ROTATION_270", "android.view.Surface#ROTATION_180", "android.view.Surface#ROTATION_90", "android.view.Surface#ROTATION_0" ]
  }, {
    "name" : "modeId",
    "type" : "int",
    "comment" : "\n     * The active display mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "renderFrameRate",
    "type" : "float",
    "comment" : "\n     * The render frame rate this display is scheduled at, which is a divisor of the active mode\n     * refresh rate. This is the rate SurfaceFlinger would consume frames and would be observable\n     * by applications via the cadence of {@link android.view.Choreographer} callbacks and\n     * by backpressure when submitting buffers as fast as possible.\n     * Apps can call {@link android.view.Display#getRefreshRate} to query this value.\n     *\n     ",
    "links" : [ "android.view.Choreographer", "android.view.Display#getRefreshRate" ]
  }, {
    "name" : "defaultModeId",
    "type" : "int",
    "comment" : "\n     * The default display mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "userPreferredModeId",
    "type" : "int",
    "comment" : "\n     * The user preferred display mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "supportedModes",
    "type" : "Display.Mode[]",
    "comment" : "\n     * The supported modes of this display.\n     ",
    "links" : [ ]
  }, {
    "name" : "colorMode",
    "type" : "int",
    "comment" : " The active color mode. ",
    "links" : [ ]
  }, {
    "name" : "supportedColorModes",
    "type" : "int[]",
    "comment" : " The list of supported color modes ",
    "links" : [ ]
  }, {
    "name" : "hdrCapabilities",
    "type" : "Display.HdrCapabilities",
    "comment" : " The display's HDR capabilities ",
    "links" : [ ]
  }, {
    "name" : "userDisabledHdrTypes",
    "type" : "int[]",
    "comment" : " The formats disabled by user *",
    "links" : [ ]
  }, {
    "name" : "minimalPostProcessingSupported",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the display can be switched into a mode with minimal post\n     * processing.\n     *\n     * @see android.view.Display#isMinimalPostProcessingSupported\n     ",
    "links" : [ ]
  }, {
    "name" : "logicalDensityDpi",
    "type" : "int",
    "comment" : "\n     * The logical display density which is the basis for density-independent\n     * pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "physicalXDpi",
    "type" : "float",
    "comment" : "\n     * The exact physical pixels per inch of the screen in the X dimension.\n     * <p>\n     * The value of this field is indeterminate if the logical display is presented on\n     * more than one physical display.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "physicalYDpi",
    "type" : "float",
    "comment" : "\n     * The exact physical pixels per inch of the screen in the Y dimension.\n     * <p>\n     * The value of this field is indeterminate if the logical display is presented on\n     * more than one physical display.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "appVsyncOffsetNanos",
    "type" : "long",
    "comment" : "\n     * This is a positive value indicating the phase offset of the VSYNC events provided by\n     * Choreographer relative to the display refresh.  For example, if Choreographer reports\n     * that the refresh occurred at time N, it actually occurred at (N - appVsyncOffsetNanos).\n     ",
    "links" : [ ]
  }, {
    "name" : "presentationDeadlineNanos",
    "type" : "long",
    "comment" : "\n     * This is how far in advance a buffer must be queued for presentation at\n     * a given time.  If you want a buffer to appear on the screen at\n     * time N, you must submit the buffer before (N - bufferDeadlineNanos).\n     ",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "\n     * The state of the display, such as {@link android.view.Display#STATE_ON}.\n     ",
    "links" : [ "android.view.Display#STATE_ON" ]
  }, {
    "name" : "committedState",
    "type" : "int",
    "comment" : "\n     * The current committed state of the display. For example, this becomes\n     * {@link android.view.Display#STATE_ON} only after the power state ON is fully committed.\n     ",
    "links" : [ "android.view.Display#STATE_ON" ]
  }, {
    "name" : "ownerUid",
    "type" : "int",
    "comment" : "\n     * The UID of the application that owns this display, or zero if it is owned by the system.\n     * <p>\n     * If the display is private, then only the owner can use it.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ownerPackageName",
    "type" : "String",
    "comment" : "\n     * The package name of the application that owns this display, or null if it is\n     * owned by the system.\n     * <p>\n     * If the display is private, then only the owner can use it.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "refreshRateOverride",
    "type" : "float",
    "comment" : "\n     * The refresh rate override for this app. 0 means no override.\n     ",
    "links" : [ ]
  }, {
    "name" : "removeMode",
    "type" : "int",
    "comment" : " TODO (b/114338689): Remove the flag and use IWindowManager#getRemoveContentMode",
    "links" : [ ]
  }, {
    "name" : "brightnessMinimum",
    "type" : "float",
    "comment" : "\n     * @hide\n     * The current minimum brightness constraint of the display. Value between 0.0 and 1.0,\n     * derived from the config constraints of the display device of this logical display.\n     ",
    "links" : [ ]
  }, {
    "name" : "brightnessMaximum",
    "type" : "float",
    "comment" : "\n     * @hide\n     * The current maximum brightness constraint of the display. Value between 0.0 and 1.0,\n     * derived from the config constraints of the display device of this logical display.\n     ",
    "links" : [ ]
  }, {
    "name" : "brightnessDefault",
    "type" : "float",
    "comment" : "\n     * @hide\n     * The current default brightness of the display. Value between 0.0 and 1.0,\n     * derived from the configuration of the display device of this logical display.\n     ",
    "links" : [ ]
  }, {
    "name" : "roundedCorners",
    "type" : "RoundedCorners",
    "comment" : "\n     * The {@link RoundedCorners} if present, otherwise {@code null}.\n     ",
    "links" : [ "android.view.RoundedCorners" ]
  }, {
    "name" : "installOrientation",
    "type" : "int",
    "comment" : "\n     * Install orientation of the display relative to its natural orientation.\n     ",
    "links" : [ ]
  }, {
    "name" : "displayShape",
    "type" : "DisplayShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "layoutLimitedRefreshRate",
    "type" : "SurfaceControl.RefreshRateRange",
    "comment" : "\n     * Refresh rate range limitation based on the current device layout\n     ",
    "links" : [ ]
  }, {
    "name" : "hdrSdrRatio",
    "type" : "float",
    "comment" : "\n     * The current hdr/sdr ratio for the display. If the display doesn't support hdr/sdr ratio\n     * queries then this is NaN\n     ",
    "links" : [ ]
  }, {
    "name" : "thermalRefreshRateThrottling",
    "type" : "SparseArray<SurfaceControl.RefreshRateRange>",
    "comment" : "\n     * RefreshRateRange limitation for @Temperature.ThrottlingStatus\n     ",
    "links" : [ ]
  }, {
    "name" : "thermalBrightnessThrottlingDataId",
    "type" : "String",
    "comment" : "\n     * The ID of the brightness throttling data that should be used. This can change e.g. in\n     * concurrent displays mode in which a stricter brightness throttling policy might need to be\n     * used.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<DisplayInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(DisplayInfo other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(DisplayInfo other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getRefreshRate()",
    "returnType" : "float",
    "comment" : "\n     * Returns the refresh rate the application would experience.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display.Mode getMode()",
    "returnType" : "Display.Mode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display.Mode getDefaultMode()",
    "returnType" : "Display.Mode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Display.Mode findMode(int id)",
    "returnType" : "Display.Mode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display.Mode findDefaultModeByRefreshRate(float refreshRate)",
    "returnType" : "Display.Mode",
    "comment" : "\n     * Returns the id of the \"default\" mode with the given refresh rate, or {@code 0} if no suitable\n     * mode could be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getDefaultRefreshRates()",
    "returnType" : "float[]",
    "comment" : "\n     * Returns the list of supported refresh rates in the default mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getAppMetrics(DisplayMetrics outMetrics)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getAppMetrics(DisplayMetrics outMetrics, DisplayAdjustments displayAdjustments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getAppMetrics(DisplayMetrics outMetrics, CompatibilityInfo ci, Configuration configuration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getLogicalMetrics(DisplayMetrics outMetrics, CompatibilityInfo compatInfo, Configuration configuration)",
    "returnType" : "void",
    "comment" : "\n     * Populates {@code outMetrics} with details of the logical display. Bounds are limited\n     * by the logical size of the display.\n     *\n     * @param outMetrics the {@link DisplayMetrics} to be populated\n     * @param compatInfo the {@link CompatibilityInfo} to be applied\n     * @param configuration the {@link Configuration}\n     ",
    "links" : [ "android.content.res.CompatibilityInfo", "android.app.WindowConfiguration", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public void getMaxBoundsMetrics(DisplayMetrics outMetrics, CompatibilityInfo compatInfo, Configuration configuration)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #getLogicalMetrics}, but the limiting bounds are determined from\n     * {@link WindowConfiguration#getMaxBounds()}\n     ",
    "links" : [ "android.app.WindowConfiguration#getMaxBounds()", "#getLogicalMetrics" ]
  }, {
    "name" : "public int getNaturalWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNaturalHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHdr()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWideColorGamut()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAccess(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified UID has access to this display.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getMetricsWithSize(DisplayMetrics outMetrics, CompatibilityInfo compatInfo, Configuration configuration, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " For debugging purposes",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.view.DisplayInfoProto}\n     *\n     * @param protoOutputStream Stream to write the Rect object to.\n     * @param fieldId           Field Id of the DisplayInfoProto as defined in the parent message\n     ",
    "links" : [ "android.view.DisplayInfoProto" ]
  }, {
    "name" : "private static String flagsToString(int flags)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(@Nullable Object o)", "public boolean equals(DisplayInfo other)", "public int hashCode()", "public void copyFrom(DisplayInfo other)", "public void readFromParcel(Parcel source)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public float getRefreshRate()", "public Display.Mode getMode()", "public Display.Mode getDefaultMode()", "private Display.Mode findMode(int id)", "public Display.Mode findDefaultModeByRefreshRate(float refreshRate)", "public float[] getDefaultRefreshRates()", "public void getAppMetrics(DisplayMetrics outMetrics)", "public void getAppMetrics(DisplayMetrics outMetrics, DisplayAdjustments displayAdjustments)", "public void getAppMetrics(DisplayMetrics outMetrics, CompatibilityInfo ci, Configuration configuration)", "public void getLogicalMetrics(DisplayMetrics outMetrics, CompatibilityInfo compatInfo, Configuration configuration)", "public void getMaxBoundsMetrics(DisplayMetrics outMetrics, CompatibilityInfo compatInfo, Configuration configuration)", "public int getNaturalWidth()", "public int getNaturalHeight()", "public boolean isHdr()", "public boolean isWideColorGamut()", "public boolean hasAccess(int uid)", "private void getMetricsWithSize(DisplayMetrics outMetrics, CompatibilityInfo compatInfo, Configuration configuration, int width, int height)", "public String toString()", "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId)", "private static String flagsToString(int flags)" ],
  "variableNames" : [ "layerStack", "flags", "type", "displayId", "displayGroupId", "address", "deviceProductInfo", "name", "uniqueId", "appWidth", "appHeight", "smallestNominalAppWidth", "smallestNominalAppHeight", "largestNominalAppWidth", "largestNominalAppHeight", "logicalWidth", "logicalHeight", "displayCutout", "rotation", "modeId", "renderFrameRate", "defaultModeId", "userPreferredModeId", "supportedModes", "colorMode", "supportedColorModes", "hdrCapabilities", "userDisabledHdrTypes", "minimalPostProcessingSupported", "logicalDensityDpi", "physicalXDpi", "physicalYDpi", "appVsyncOffsetNanos", "presentationDeadlineNanos", "state", "committedState", "ownerUid", "ownerPackageName", "refreshRateOverride", "removeMode", "brightnessMinimum", "brightnessMaximum", "brightnessDefault", "roundedCorners", "installOrientation", "displayShape", "layoutLimitedRefreshRate", "hdrSdrRatio", "thermalRefreshRateThrottling", "thermalBrightnessThrottlingDataId", "CREATOR" ]
}