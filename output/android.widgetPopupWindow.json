{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/PopupWindow.java",
  "packageName" : "android.widget",
  "className" : "PopupWindow",
  "comment" : "\n * <p>\n * This class represents a popup window that can be used to display an\n * arbitrary view. The popup window is a floating container that appears on top\n * of the current activity.\n * </p>\n * <a name=\"Animation\"></a>\n * <h3>Animation</h3>\n * <p>\n * On all versions of Android, popup window enter and exit animations may be\n * specified by calling {@link #setAnimationStyle(int)} and passing the\n * resource ID for an animation style that defines {@code windowEnterAnimation}\n * and {@code windowExitAnimation}. For example, passing\n * {@link android.R.style#Animation_Dialog} will give a scale and alpha\n * animation.\n * </br>\n * A window animation style may also be specified in the popup window's style\n * XML via the {@link android.R.styleable#PopupWindow_popupAnimationStyle popupAnimationStyle}\n * attribute.\n * </p>\n * <p>\n * Starting with API 23, more complex popup window enter and exit transitions\n * may be specified by calling either {@link #setEnterTransition(Transition)}\n * or {@link #setExitTransition(Transition)} and passing a  {@link Transition}.\n * </br>\n * Popup enter and exit transitions may also be specified in the popup window's\n * style XML via the {@link android.R.styleable#PopupWindow_popupEnterTransition popupEnterTransition}\n * and {@link android.R.styleable#PopupWindow_popupExitTransition popupExitTransition}\n * attributes, respectively.\n * </p>\n *\n * @attr ref android.R.styleable#PopupWindow_overlapAnchor\n * @attr ref android.R.styleable#PopupWindow_popupAnimationStyle\n * @attr ref android.R.styleable#PopupWindow_popupBackground\n * @attr ref android.R.styleable#PopupWindow_popupElevation\n * @attr ref android.R.styleable#PopupWindow_popupEnterTransition\n * @attr ref android.R.styleable#PopupWindow_popupExitTransition\n *\n * @see android.widget.AutoCompleteTextView\n * @see android.widget.Spinner\n ",
  "variables" : [ {
    "name" : "INPUT_METHOD_FROM_FOCUSABLE",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #setInputMethodMode(int)}: the requirements for the\n     * input method should be based on the focusability of the popup.  That is\n     * if it is focusable than it needs to work with the input method, else\n     * it doesn't.\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "INPUT_METHOD_NEEDED",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #setInputMethodMode(int)}: this popup always needs to\n     * work with an input method, regardless of whether it is focusable.  This\n     * means that it will always be displayed so that the user can also operate\n     * the input method while it is shown.\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "INPUT_METHOD_NOT_NEEDED",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #setInputMethodMode(int)}: this popup never needs to\n     * work with an input method, regardless of whether it is focusable.  This\n     * means that it will always be displayed to use as much space on the\n     * screen as needed, regardless of whether this covers the input method.\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "DEFAULT_ANCHORED_GRAVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_STYLE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default animation style indicating that separate animations should be\n     * used for top/bottom anchoring states.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTmpDrawingLocation",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpScreenLocation",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpAppLocation",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentRootView",
    "type" : "WeakReference<View>",
    "comment" : "\n     * Keeps track of popup's parent's decor view. This is needed to dispatch\n     * requestKeyboardShortcuts to the owning Activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsShowing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsTransitioningToDismiss",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDropdown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecorView",
    "type" : "PopupDecorView",
    "comment" : " View that handles event dispatch and content transitions. ",
    "links" : [ ]
  }, {
    "name" : "mBackgroundView",
    "type" : "View",
    "comment" : " View that holds the background and may animate during a transition. ",
    "links" : [ ]
  }, {
    "name" : "mContentView",
    "type" : "View",
    "comment" : " The contents of the popup. May be identical to the background view. ",
    "links" : [ ]
  }, {
    "name" : "mFocusable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputMethodMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoftInputMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutsideTouchable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClippingEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitTouchEnabled",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutInScreen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipToScreen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowScrollingAnchorParent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutInsetDecor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotTouchModal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttachedInDecor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttachedInDecorSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchInterceptor",
    "type" : "OnTouchListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidthMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeightMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElevation",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackground",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAboveAnchorBackgroundDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBelowAnchorBackgroundDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnterTransition",
    "type" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitTransition",
    "type" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEpicenterBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAboveAnchor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowLayoutType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDismissListener",
    "type" : "OnDismissListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreCheekPress",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ABOVE_ANCHOR_STATE_SET",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnAnchorDetachedListener",
    "type" : "OnAttachStateChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnAnchorRootDetachedListener",
    "type" : "OnAttachStateChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchor",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchorRoot",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAnchorRootAttached",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnScrollChangedListener",
    "type" : "OnScrollChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnLayoutChangeListener",
    "type" : "View.OnLayoutChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchorXoff",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchorYoff",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchoredGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlapAnchor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupViewInitialLayoutDirectionInherited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setEnterTransition(@Nullable Transition enterTransition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the enter transition to be used when the popup window is shown.\n     *\n     * @param enterTransition the enter transition, or {@code null} to clear\n     * @see #getEnterTransition()\n     * @attr ref android.R.styleable#PopupWindow_popupEnterTransition\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transition getEnterTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the enter transition to be used when the popup window is shown.\n     *\n     * @return the enter transition, or {@code null} if not set\n     * @see #setEnterTransition(Transition)\n     * @attr ref android.R.styleable#PopupWindow_popupEnterTransition\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExitTransition(@Nullable Transition exitTransition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the exit transition to be used when the popup window is dismissed.\n     *\n     * @param exitTransition the exit transition, or {@code null} to clear\n     * @see #getExitTransition()\n     * @attr ref android.R.styleable#PopupWindow_popupExitTransition\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transition getExitTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the exit transition to be used when the popup window is\n     * dismissed.\n     *\n     * @return the exit transition, or {@code null} if not set\n     * @see #setExitTransition(Transition)\n     * @attr ref android.R.styleable#PopupWindow_popupExitTransition\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getEpicenterBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * <p>Returns bounds which are used as a center of the enter and exit transitions.<p/>\n     *\n     * <p>Transitions use Rect, referred to as the epicenter, to orient\n     * the direction of travel. For popup windows, the anchor view bounds are\n     * used as the default epicenter.</p>\n     *\n     * <p>See {@link Transition#setEpicenterCallback(EpicenterCallback)} for more\n     * information about how transition epicenters work.</p>\n     *\n     * @return bounds relative to anchor view, or {@code null} if not set\n     * @see #setEpicenterBounds(Rect)\n     ",
    "links" : [ "Transition#setEpicenterCallback" ]
  }, {
    "name" : "public void setEpicenterBounds(@Nullable Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the bounds used as the epicenter of the enter and exit transitions.</p>\n     *\n     * <p>Transitions use Rect, referred to as the epicenter, to orient\n     * the direction of travel. For popup windows, the anchor view bounds are\n     * used as the default epicenter.</p>\n     *\n     * <p>See {@link Transition#setEpicenterCallback(EpicenterCallback)} for more\n     * information about how transition epicenters work.</p>\n     *\n     * @param bounds the epicenter bounds relative to the anchor view, or\n     *               {@code null} to use the default epicenter\n     *\n     * @see #getEpicenterBounds()\n     ",
    "links" : [ "Transition#setEpicenterCallback" ]
  }, {
    "name" : "private Transition getTransition(int resId)",
    "returnType" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBackground()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the drawable used as the popup window's background.\n     *\n     * @return the background drawable or {@code null} if not set\n     * @see #setBackgroundDrawable(Drawable)\n     * @attr ref android.R.styleable#PopupWindow_popupBackground\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundDrawable(Drawable background)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the background drawable for this popup window. The background\n     * can be set to {@code null}.\n     *\n     * @param background the popup's background\n     * @see #getBackground()\n     * @attr ref android.R.styleable#PopupWindow_popupBackground\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getElevation()",
    "returnType" : "float",
    "comment" : "\n     * @return the elevation for this popup window in pixels\n     * @see #setElevation(float)\n     * @attr ref android.R.styleable#PopupWindow_popupElevation\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setElevation(float elevation)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the elevation for this popup window.\n     *\n     * @param elevation the popup's elevation in pixels\n     * @see #getElevation()\n     * @attr ref android.R.styleable#PopupWindow_popupElevation\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAnimationStyle()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return the animation style to use the popup appears and disappears</p>\n     *\n     * @return the animation style to use the popup appears and disappears\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoreCheekPress()",
    "returnType" : "void",
    "comment" : "\n     * Set the flag on popup to ignore cheek press events; by default this flag\n     * is set to false\n     * which means the popup will not ignore cheek press dispatch events.\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @see #update()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public void setAnimationStyle(int animationStyle)",
    "returnType" : "void",
    "comment" : "\n     * <p>Change the animation style resource for this popup.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param animationStyle animation style to use when the popup appears\n     *      and disappears.  Set to -1 for the default animation, 0 for no\n     *      animation, or a resource identifier for an explicit animation.\n     *\n     * @see #update()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public View getContentView()",
    "returnType" : "View",
    "comment" : "\n     * <p>Return the view used as the content of the popup window.</p>\n     *\n     * @return a {@link android.view.View} representing the popup's content\n     *\n     * @see #setContentView(android.view.View)\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public void setContentView(View contentView)",
    "returnType" : "void",
    "comment" : "\n     * <p>Change the popup's content. The content is represented by an instance\n     * of {@link android.view.View}.</p>\n     *\n     * <p>This method has no effect if called when the popup is showing.</p>\n     *\n     * @param contentView the new content for the popup\n     *\n     * @see #getContentView()\n     * @see #isShowing()\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public void setTouchInterceptor(OnTouchListener l)",
    "returnType" : "void",
    "comment" : "\n     * Set a callback for all touch events being dispatched to the popup\n     * window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the popup window can grab the focus.</p>\n     *\n     * @return true if the popup is focusable, false otherwise\n     *\n     * @see #setFocusable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFocusable(boolean focusable)",
    "returnType" : "void",
    "comment" : "\n     * <p>Changes the focusability of the popup window. When focusable, the\n     * window will grab the focus from the current focused widget if the popup\n     * contains a focusable {@link android.view.View}.  By default a popup\n     * window is not focusable.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param focusable true if the popup should grab focus, false otherwise.\n     *\n     * @see #isFocusable()\n     * @see #isShowing()\n     * @see #update()\n     ",
    "links" : [ "android.view.View", "#update" ]
  }, {
    "name" : "public int getInputMethodMode()",
    "returnType" : "int",
    "comment" : "\n     * Return the current value in {@link #setInputMethodMode(int)}.\n     *\n     * @see #setInputMethodMode(int)\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "public void setInputMethodMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Control how the popup operates with an input method: one of\n     * {@link #INPUT_METHOD_FROM_FOCUSABLE}, {@link #INPUT_METHOD_NEEDED},\n     * or {@link #INPUT_METHOD_NOT_NEEDED}.\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @see #getInputMethodMode()\n     * @see #update()\n     ",
    "links" : [ "#INPUT_METHOD_FROM_FOCUSABLE", "#INPUT_METHOD_NEEDED", "#INPUT_METHOD_NOT_NEEDED", "#update" ]
  }, {
    "name" : "public void setSoftInputMode(@SoftInputModeFlags int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the operating mode for the soft input area.\n     *\n     * @param mode The desired mode, see\n     *        {@link android.view.WindowManager.LayoutParams#softInputMode}\n     *        for the full list\n     *\n     * @see android.view.WindowManager.LayoutParams#softInputMode\n     * @see #getSoftInputMode()\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#softInputMode" ]
  }, {
    "name" : "public int getSoftInputMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value in {@link #setSoftInputMode(int)}.\n     *\n     * @see #setSoftInputMode(int)\n     * @see android.view.WindowManager.LayoutParams#softInputMode\n     ",
    "links" : [ "#setSoftInputMode" ]
  }, {
    "name" : "public boolean isTouchable()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup window receives touch events.</p>\n     *\n     * @return true if the popup is touchable, false otherwise\n     *\n     * @see #setTouchable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTouchable(boolean touchable)",
    "returnType" : "void",
    "comment" : "\n     * <p>Changes the touchability of the popup window. When touchable, the\n     * window will receive touch events, otherwise touch events will go to the\n     * window below it. By default the window is touchable.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param touchable true if the popup should receive touch events, false otherwise\n     *\n     * @see #isTouchable()\n     * @see #isShowing()\n     * @see #update()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public boolean isOutsideTouchable()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup window will be informed of touch events\n     * outside of its window.</p>\n     *\n     * @return true if the popup is outside touchable, false otherwise\n     *\n     * @see #setOutsideTouchable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutsideTouchable(boolean touchable)",
    "returnType" : "void",
    "comment" : "\n     * <p>Controls whether the pop-up will be informed of touch events outside\n     * of its window.  This only makes sense for pop-ups that are touchable\n     * but not focusable, which means touches outside of the window will\n     * be delivered to the window behind.  The default is false.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param touchable true if the popup should receive outside\n     * touch events, false otherwise\n     *\n     * @see #isOutsideTouchable()\n     * @see #isShowing()\n     * @see #update()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public boolean isClippingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether clipping of the popup window is enabled.</p>\n     *\n     * @return true if the clipping is enabled, false otherwise\n     *\n     * @see #setClippingEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClippingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Allows the popup window to extend beyond the bounds of the screen. By default the\n     * window is clipped to the screen boundaries. Setting this to false will allow windows to be\n     * accurately positioned.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param enabled false if the window should be allowed to extend outside of the screen\n     * @see #isShowing()\n     * @see #isClippingEnabled()\n     * @see #update()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public boolean isClipToScreenEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether this popup will be clipped to the screen and not to the\n     * containing window<p/>\n     *\n     * @return true if popup will be clipped to the screen instead of the window, false otherwise\n     * @deprecated Use {@link #isClippedToScreen()} instead\n     * @removed\n     ",
    "links" : [ "#isClippedToScreen" ]
  }, {
    "name" : "public void setClipToScreenEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Clip this popup window to the screen, but not to the containing window.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @deprecated Use {@link #setIsClippedToScreen(boolean)} instead\n     * @removed\n     ",
    "links" : [ "#update", "#setIsClippedToScreen" ]
  }, {
    "name" : "public boolean isClippedToScreen()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether this popup will be clipped to the screen and not to the\n     * containing window<p/>\n     *\n     * @return true if popup will be clipped to the screen instead of the window, false otherwise\n     *\n     * @see #setIsClippedToScreen(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsClippedToScreen(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Clip this popup window to the screen, but not to the containing window.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param enabled true to clip to the screen.\n     *\n     * @see #isClippedToScreen()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : " void setAllowScrollingAnchorParent(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Allow PopupWindow to scroll the anchor's parent to provide more room\n     * for the popup. Enabled by default.\n     *\n     * @param enabled True to scroll the anchor's parent when more room is desired by the popup.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean getAllowScrollingAnchorParent()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSplitTouchEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup window supports splitting touches.</p>\n     *\n     * @return true if the touch splitting is enabled, false otherwise\n     *\n     * @see #setSplitTouchEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitTouchEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Allows the popup window to split touches across other windows that also\n     * support split touch.  When this flag is false, the first pointer\n     * that goes down determines the window to which all subsequent touches\n     * go until all pointers go up.  When this flag is true, each pointer\n     * (not necessarily the first) that goes down determines the window\n     * to which all subsequent touches of that pointer will go until that\n     * pointer goes up thereby enabling touches with multiple pointers\n     * to be split across multiple windows.</p>\n     *\n     * @param enabled true if the split touches should be enabled, false otherwise\n     * @see #isSplitTouchEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLayoutInScreenEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup window will be forced into using absolute screen coordinates\n     * for positioning.</p>\n     *\n     * @return true if the window will always be positioned in screen coordinates.\n     *\n     * @deprecated Use {@link #isLaidOutInScreen()} instead\n     * @removed\n     ",
    "links" : [ "#isLaidOutInScreen" ]
  }, {
    "name" : "public void setLayoutInScreenEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Allows the popup window to force the flag\n     * {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN}, overriding default behavior.\n     * This will cause the popup to be positioned in absolute screen coordinates.</p>\n     *\n     * @param enabled true if the popup should always be positioned in screen coordinates\n     * @deprecated Use {@link #setIsLaidOutInScreen(boolean)} instead\n     * @removed\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN", "#setIsLaidOutInScreen" ]
  }, {
    "name" : "public boolean isLaidOutInScreen()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup window will be forced into using absolute screen coordinates\n     * for positioning.</p>\n     *\n     * @return true if the window will always be positioned in screen coordinates.\n     *\n     * @see #setIsLaidOutInScreen(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsLaidOutInScreen(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Allows the popup window to force the flag\n     * {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN}, overriding default behavior.\n     * This will cause the popup to be positioned in absolute screen coordinates.</p>\n     *\n     * @param enabled true if the popup should always be positioned in screen coordinates\n     *\n     * @see #isLaidOutInScreen()\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN" ]
  }, {
    "name" : "public boolean isAttachedInDecor()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup window will be attached in the decor frame of its parent\n     * window.\n     *\n     * @return true if the window will be attached to the decor frame of its parent window.\n     *\n     * @see #setAttachedInDecor(boolean)\n     * @see WindowManager.LayoutParams#FLAG_LAYOUT_ATTACHED_IN_DECOR\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttachedInDecor(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>This will attach the popup window to the decor frame of the parent window to avoid\n     * overlaping with screen decorations like the navigation bar. Overrides the default behavior of\n     * the flag {@link WindowManager.LayoutParams#FLAG_LAYOUT_ATTACHED_IN_DECOR}.\n     *\n     * <p>By default the flag is set on SDK version {@link Build.VERSION_CODES#LOLLIPOP_MR1} or\n     * greater and cleared on lesser SDK versions.\n     *\n     * @param enabled true if the popup should be attached to the decor frame of its parent window.\n     *\n     * @see WindowManager.LayoutParams#FLAG_LAYOUT_ATTACHED_IN_DECOR\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_LAYOUT_ATTACHED_IN_DECOR", "Build.VERSION_CODES#LOLLIPOP_MR1" ]
  }, {
    "name" : "public void setLayoutInsetDecor(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Allows the popup window to force the flag\n     * {@link WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR}, overriding default behavior.\n     * This will cause the popup to inset its content to account for system windows overlaying\n     * the screen, such as the status bar.\n     *\n     * <p>This will often be combined with {@link #setIsLaidOutInScreen(boolean)}.\n     *\n     * @param enabled true if the popup's views should inset content to account for system windows,\n     *                the way that decor views behave for full-screen windows.\n     * @hide\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR", "#setIsLaidOutInScreen" ]
  }, {
    "name" : "protected final boolean isLayoutInsetDecor()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowLayoutType(int layoutType)",
    "returnType" : "void",
    "comment" : "\n     * Set the layout type for this window.\n     * <p>\n     * See {@link WindowManager.LayoutParams#type} for possible values.\n     *\n     * @param layoutType Layout type for this window.\n     *\n     * @see WindowManager.LayoutParams#type\n     ",
    "links" : [ "WindowManager.LayoutParams#type" ]
  }, {
    "name" : "public int getWindowLayoutType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the layout type for this window.\n     *\n     * @see #setWindowLayoutType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTouchModal()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether outside touches will be sent to this window\n     * or other windows behind it<p/>\n     *\n     * @return true if touches will be sent to this window, false otherwise\n     *\n     * @see #setTouchModal(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTouchModal(boolean touchModal)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set whether this window is touch modal or if outside touches will be sent to\n     * other windows behind it.<p/>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to one of\n     * the {@link #update()} methods.</p>\n     *\n     * @param touchModal true to sent all outside touches to this window,\n     * false to other windows behind it\n     *\n     * @see #isTouchModal()\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public void setWindowLayoutMode(int widthSpec, int heightSpec)",
    "returnType" : "void",
    "comment" : "\n     * <p>Change the width and height measure specs that are given to the\n     * window manager by the popup.  By default these are 0, meaning that\n     * the current width or height is requested as an explicit size from\n     * the window manager.  You can supply\n     * {@link ViewGroup.LayoutParams#WRAP_CONTENT} or\n     * {@link ViewGroup.LayoutParams#MATCH_PARENT} to have that measure\n     * spec supplied instead, replacing the absolute width and height that\n     * has been set in the popup.</p>\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown.</p>\n     *\n     * @param widthSpec an explicit width measure spec mode, either\n     * {@link ViewGroup.LayoutParams#WRAP_CONTENT},\n     * {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute\n     * width.\n     * @param heightSpec an explicit height measure spec mode, either\n     * {@link ViewGroup.LayoutParams#WRAP_CONTENT},\n     * {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute\n     * height.\n     *\n     * @deprecated Use {@link #setWidth(int)} and {@link #setHeight(int)}.\n     ",
    "links" : [ "ViewGroup.LayoutParams#WRAP_CONTENT", "ViewGroup.LayoutParams#MATCH_PARENT", "ViewGroup.LayoutParams#WRAP_CONTENT", "ViewGroup.LayoutParams#MATCH_PARENT", "ViewGroup.LayoutParams#WRAP_CONTENT", "ViewGroup.LayoutParams#MATCH_PARENT", "#setWidth", "#setHeight" ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the popup's requested height. May be a layout constant such as\n     * {@link LayoutParams#WRAP_CONTENT} or {@link LayoutParams#MATCH_PARENT}.\n     * <p>\n     * The actual size of the popup may depend on other factors such as\n     * clipping and window layout.\n     *\n     * @return the popup height in pixels or a layout constant\n     * @see #setHeight(int)\n     ",
    "links" : [ "LayoutParams#WRAP_CONTENT", "LayoutParams#MATCH_PARENT" ]
  }, {
    "name" : "public void setHeight(int height)",
    "returnType" : "void",
    "comment" : "\n     * Sets the popup's requested height. May be a layout constant such as\n     * {@link LayoutParams#WRAP_CONTENT} or {@link LayoutParams#MATCH_PARENT}.\n     * <p>\n     * The actual size of the popup may depend on other factors such as\n     * clipping and window layout.\n     * <p>\n     * If the popup is showing, calling this method will take effect the next\n     * time the popup is shown.\n     *\n     * @param height the popup height in pixels or a layout constant\n     * @see #getHeight()\n     * @see #isShowing()\n     ",
    "links" : [ "LayoutParams#WRAP_CONTENT", "LayoutParams#MATCH_PARENT" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the popup's requested width. May be a layout constant such as\n     * {@link LayoutParams#WRAP_CONTENT} or {@link LayoutParams#MATCH_PARENT}.\n     * <p>\n     * The actual size of the popup may depend on other factors such as\n     * clipping and window layout.\n     *\n     * @return the popup width in pixels or a layout constant\n     * @see #setWidth(int)\n     ",
    "links" : [ "LayoutParams#WRAP_CONTENT", "LayoutParams#MATCH_PARENT" ]
  }, {
    "name" : "public void setWidth(int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets the popup's requested width. May be a layout constant such as\n     * {@link LayoutParams#WRAP_CONTENT} or {@link LayoutParams#MATCH_PARENT}.\n     * <p>\n     * The actual size of the popup may depend on other factors such as\n     * clipping and window layout.\n     * <p>\n     * If the popup is showing, calling this method will take effect the next\n     * time the popup is shown.\n     *\n     * @param width the popup width in pixels or a layout constant\n     * @see #getWidth()\n     * @see #isShowing()\n     ",
    "links" : [ "LayoutParams#WRAP_CONTENT", "LayoutParams#MATCH_PARENT" ]
  }, {
    "name" : "public void setOverlapAnchor(boolean overlapAnchor)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the popup window should overlap its anchor view when\n     * displayed as a drop-down.\n     * <p>\n     * If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown.\n     *\n     * @param overlapAnchor Whether the popup should overlap its anchor.\n     *\n     * @see #getOverlapAnchor()\n     * @see #isShowing()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getOverlapAnchor()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the popup window should overlap its anchor view when\n     * displayed as a drop-down.\n     *\n     * @return Whether the popup should overlap its anchor.\n     *\n     * @see #setOverlapAnchor(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether this popup window is showing on screen.</p>\n     *\n     * @return true if the popup is showing, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void setShowing(boolean isShowing)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected final void setDropDown(boolean isDropDown)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected final void setTransitioningToDismiss(boolean transitioningToDismiss)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isTransitioningToDismiss()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void showAtLocation(View parent, int gravity, int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Display the content view in a popup window at the specified location. If the popup window\n     * cannot fit on screen, it will be clipped. See {@link android.view.WindowManager.LayoutParams}\n     * for more information on how gravity and the x and y parameters are related. Specifying\n     * a gravity of {@link android.view.Gravity#NO_GRAVITY} is similar to specifying\n     * <code>Gravity.LEFT | Gravity.TOP</code>.\n     * </p>\n     *\n     * @param parent a parent view to get the {@link android.view.View#getWindowToken()} token from\n     * @param gravity the gravity which controls the placement of the popup window\n     * @param x the popup's x location offset\n     * @param y the popup's y location offset\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams", "android.view.Gravity#NO_GRAVITY", "android.view.View#getWindowToken" ]
  }, {
    "name" : "public void showAtLocation(IBinder token, int gravity, int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Display the content view in a popup window at the specified location.\n     *\n     * @param token Window token to use for creating the new window\n     * @param gravity the gravity which controls the placement of the popup window\n     * @param x the popup's x location offset\n     * @param y the popup's y location offset\n     *\n     * @hide Internal use only. Applications should use\n     *       {@link #showAtLocation(View, int, int, int)} instead.\n     ",
    "links" : [ "#showAtLocation" ]
  }, {
    "name" : "public void showAsDropDown(View anchor)",
    "returnType" : "void",
    "comment" : "\n     * Display the content view in a popup window anchored to the bottom-left\n     * corner of the anchor view. If there is not enough room on screen to show\n     * the popup in its entirety, this method tries to find a parent scroll\n     * view to scroll. If no parent scroll view can be scrolled, the\n     * bottom-left corner of the popup is pinned at the top left corner of the\n     * anchor view.\n     *\n     * @param anchor the view on which to pin the popup window\n     *\n     * @see #dismiss()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showAsDropDown(View anchor, int xoff, int yoff)",
    "returnType" : "void",
    "comment" : "\n     * Display the content view in a popup window anchored to the bottom-left\n     * corner of the anchor view offset by the specified x and y coordinates.\n     * If there is not enough room on screen to show the popup in its entirety,\n     * this method tries to find a parent scroll view to scroll. If no parent\n     * scroll view can be scrolled, the bottom-left corner of the popup is\n     * pinned at the top left corner of the anchor view.\n     * <p>\n     * If the view later scrolls to move <code>anchor</code> to a different\n     * location, the popup will be moved correspondingly.\n     *\n     * @param anchor the view on which to pin the popup window\n     * @param xoff A horizontal offset from the anchor in pixels\n     * @param yoff A vertical offset from the anchor in pixels\n     *\n     * @see #dismiss()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showAsDropDown(View anchor, int xoff, int yoff, int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Displays the content view in a popup window anchored to the corner of\n     * another view. The window is positioned according to the specified\n     * gravity and offset by the specified x and y coordinates.\n     * <p>\n     * If there is not enough room on screen to show the popup in its entirety,\n     * this method tries to find a parent scroll view to scroll. If no parent\n     * view can be scrolled, the specified vertical gravity will be ignored and\n     * the popup will anchor itself such that it is visible.\n     * <p>\n     * If the view later scrolls to move <code>anchor</code> to a different\n     * location, the popup will be moved correspondingly.\n     *\n     * @param anchor the view on which to pin the popup window\n     * @param xoff A horizontal offset from the anchor in pixels\n     * @param yoff A vertical offset from the anchor in pixels\n     * @param gravity Alignment of the popup relative to the anchor\n     *\n     * @see #dismiss()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void updateAboveAnchor(boolean aboveAnchor)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAboveAnchor()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the popup is showing above (the y coordinate of the popup's bottom\n     * is less than the y coordinate of the anchor) or below the anchor view (the y coordinate\n     * of the popup is greater than y coordinate of the anchor's bottom).\n     *\n     * The value returned\n     * by this method is meaningful only after {@link #showAsDropDown(android.view.View)}\n     * or {@link #showAsDropDown(android.view.View, int, int)} was invoked.\n     *\n     * @return True if this popup is showing above the anchor view, false otherwise.\n     ",
    "links" : [ "#showAsDropDown", "#showAsDropDown" ]
  }, {
    "name" : "private void preparePopup(WindowManager.LayoutParams p)",
    "returnType" : "void",
    "comment" : "\n     * Prepare the popup by embedding it into a new ViewGroup if the background\n     * drawable is not null. If embedding is required, the layout parameters'\n     * height is modified to take into account the background's padding.\n     *\n     * @param p the layout parameters of the popup's content view\n     ",
    "links" : [ ]
  }, {
    "name" : "private PopupBackgroundView createBackgroundView(View contentView)",
    "returnType" : "PopupBackgroundView",
    "comment" : "\n     * Wraps a content view in a PopupViewContainer.\n     *\n     * @param contentView the content view to wrap\n     * @return a PopupViewContainer that wraps the content view\n     ",
    "links" : [ ]
  }, {
    "name" : "private PopupDecorView createDecorView(View contentView)",
    "returnType" : "PopupDecorView",
    "comment" : "\n     * Wraps a content view in a FrameLayout.\n     *\n     * @param contentView the content view to wrap\n     * @return a FrameLayout that wraps the content view\n     ",
    "links" : [ ]
  }, {
    "name" : "private void invokePopup(WindowManager.LayoutParams p)",
    "returnType" : "void",
    "comment" : "\n     * <p>Invoke the popup window by adding the content view to the window\n     * manager.</p>\n     *\n     * <p>The content view must be non-null when this method is invoked.</p>\n     *\n     * @param p the layout parameters of the popup's content view\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setLayoutDirectionFromAnchor()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int computeGravity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final WindowManager.LayoutParams createPopupLayoutParams(IBinder token)",
    "returnType" : "WindowManager.LayoutParams",
    "comment" : "\n     * <p>Generate the layout parameters for the popup window.</p>\n     *\n     * @param token the window token used to bind the popup's window\n     *\n     * @return the layout parameters to pass to the window manager\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int computeFlags(int curFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int computeAnimationResource()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean findDropDownPosition(View anchor, WindowManager.LayoutParams outParams, int xOffset, int yOffset, int width, int height, int gravity, boolean allowScroll)",
    "returnType" : "boolean",
    "comment" : "\n     * Positions the popup window on screen. When the popup window is too tall\n     * to fit under the anchor, a parent scroll view is seeked and scrolled up\n     * to reclaim space. If scrolling is not possible or not enough, the popup\n     * window gets moved on top of the anchor.\n     * <p>\n     * The results of positioning are placed in {@code outParams}.\n     *\n     * @param anchor the view on which the popup window must be anchored\n     * @param outParams the layout parameters used to display the drop down\n     * @param xOffset absolute horizontal offset from the left of the anchor\n     * @param yOffset absolute vertical offset from the top of the anchor\n     * @param gravity horizontal gravity specifying popup alignment\n     * @param allowScroll whether the anchor view's parent may be scrolled\n     *                    when the popup window doesn't fit on screen\n     * @return true if the popup is translated upwards to fit on screen\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean tryFitVertical(@NonNull LayoutParams outParams, int yOffset, int height, int anchorHeight, int drawingLocationY, int screenLocationY, int displayFrameTop, int displayFrameBottom, boolean allowResize)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean positionInDisplayVertical(@NonNull LayoutParams outParams, int height, int drawingLocationY, int screenLocationY, int displayFrameTop, int displayFrameBottom, boolean canResize)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean tryFitHorizontal(@NonNull LayoutParams outParams, int xOffset, int width, int anchorWidth, int drawingLocationX, int screenLocationX, int displayFrameLeft, int displayFrameRight, boolean allowResize)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean positionInDisplayHorizontal(@NonNull LayoutParams outParams, int width, int drawingLocationX, int screenLocationX, int displayFrameLeft, int displayFrameRight, boolean canResize)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxAvailableHeight(@NonNull View anchor)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum height that is available for the popup to be\n     * completely shown. It is recommended that this height be the maximum for\n     * the popup's height, otherwise it is possible that the popup will be\n     * clipped.\n     *\n     * @param anchor The view on which the popup window must be anchored.\n     * @return The maximum available height for the popup to be completely\n     *         shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxAvailableHeight(@NonNull View anchor, int yOffset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum height that is available for the popup to be\n     * completely shown. It is recommended that this height be the maximum for\n     * the popup's height, otherwise it is possible that the popup will be\n     * clipped.\n     *\n     * @param anchor The view on which the popup window must be anchored.\n     * @param yOffset y offset from the view's bottom edge\n     * @return The maximum available height for the popup to be completely\n     *         shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxAvailableHeight(@NonNull View anchor, int yOffset, boolean ignoreBottomDecorations)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum height that is available for the popup to be\n     * completely shown, optionally ignoring any bottom decorations such as\n     * the input method. It is recommended that this height be the maximum for\n     * the popup's height, otherwise it is possible that the popup will be\n     * clipped.\n     *\n     * @param anchor The view on which the popup window must be anchored.\n     * @param yOffset y offset from the view's bottom edge\n     * @param ignoreBottomDecorations if true, the height returned will be\n     *        all the way to the bottom of the display, ignoring any\n     *        bottom decorations\n     * @return The maximum available height for the popup to be completely\n     *         shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Disposes of the popup window. This method can be invoked only after\n     * {@link #showAsDropDown(android.view.View)} has been executed. Failing\n     * that, calling this method will have no effect.\n     *\n     * @see #showAsDropDown(android.view.View)\n     ",
    "links" : [ "#showAsDropDown" ]
  }, {
    "name" : "protected final Rect getTransitionEpicenter()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the window-relative epicenter bounds to be used by enter and\n     * exit transitions.\n     * <p>\n     * <strong>Note:</strong> This is distinct from the rect passed to\n     * {@link #setEpicenterBounds(Rect)}, which is anchor-relative.\n     *\n     * @return the window-relative epicenter bounds to be used by enter and\n     *         exit transitions\n     *\n     * @hide\n     ",
    "links" : [ "#setEpicenterBounds" ]
  }, {
    "name" : "private void dismissImmediate(View decorView, ViewGroup contentHolder, View contentView)",
    "returnType" : "void",
    "comment" : "\n     * Removes the popup from the window manager and tears down the supporting\n     * view hierarchy, if necessary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(OnDismissListener onDismissListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be called when the window is dismissed.\n     *\n     * @param onDismissListener The listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final OnDismissListener getOnDismissListener()",
    "returnType" : "OnDismissListener",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void update()",
    "returnType" : "void",
    "comment" : "\n     * Updates the state of the popup window, if it is currently being displayed,\n     * from the currently set state.\n     * <p>\n     * This includes:\n     * <ul>\n     *     <li>{@link #setClippingEnabled(boolean)}</li>\n     *     <li>{@link #setFocusable(boolean)}</li>\n     *     <li>{@link #setIgnoreCheekPress()}</li>\n     *     <li>{@link #setInputMethodMode(int)}</li>\n     *     <li>{@link #setTouchable(boolean)}</li>\n     *     <li>{@link #setAnimationStyle(int)}</li>\n     *     <li>{@link #setTouchModal(boolean)} (boolean)}</li>\n     *     <li>{@link #setIsClippedToScreen(boolean)}</li>\n     * </ul>\n     ",
    "links" : [ "#setClippingEnabled", "#setFocusable", "#setIgnoreCheekPress", "#setInputMethodMode", "#setTouchable", "#setAnimationStyle", "#setTouchModal", "#setIsClippedToScreen" ]
  }, {
    "name" : "protected void update(View anchor, WindowManager.LayoutParams params)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void update(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Updates the dimension of the popup window.\n     * <p>\n     * Calling this function also updates the window with the current popup\n     * state as described for {@link #update()}.\n     *\n     * @param width the new width in pixels, must be >= 0 or -1 to ignore\n     * @param height the new height in pixels, must be >= 0 or -1 to ignore\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public void update(int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Updates the position and the dimension of the popup window.\n     * <p>\n     * Width and height can be set to -1 to update location only. Calling this\n     * function also updates the window with the current popup state as\n     * described for {@link #update()}.\n     *\n     * @param x the new x location\n     * @param y the new y location\n     * @param width the new width in pixels, must be >= 0 or -1 to ignore\n     * @param height the new height in pixels, must be >= 0 or -1 to ignore\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public void update(int x, int y, int width, int height, boolean force)",
    "returnType" : "void",
    "comment" : "\n     * Updates the position and the dimension of the popup window.\n     * <p>\n     * Width and height can be set to -1 to update location only. Calling this\n     * function also updates the window with the current popup state as\n     * described for {@link #update()}.\n     *\n     * @param x the new x location\n     * @param y the new y location\n     * @param width the new width in pixels, must be >= 0 or -1 to ignore\n     * @param height the new height in pixels, must be >= 0 or -1 to ignore\n     * @param force {@code true} to reposition the window even if the specified\n     *              position already seems to correspond to the LayoutParams,\n     *              {@code false} to only reposition if needed\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "protected boolean hasContentView()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean hasDecorView()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected WindowManager.LayoutParams getDecorViewLayoutParams()",
    "returnType" : "WindowManager.LayoutParams",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void update(View anchor, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Updates the position and the dimension of the popup window.\n     * <p>\n     * Calling this function also updates the window with the current popup\n     * state as described for {@link #update()}.\n     *\n     * @param anchor the popup's anchor view\n     * @param width the new width in pixels, must be >= 0 or -1 to ignore\n     * @param height the new height in pixels, must be >= 0 or -1 to ignore\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "public void update(View anchor, int xoff, int yoff, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Updates the position and the dimension of the popup window.\n     * <p>\n     * Width and height can be set to -1 to update location only. Calling this\n     * function also updates the window with the current popup state as\n     * described for {@link #update()}.\n     * <p>\n     * If the view later scrolls to move {@code anchor} to a different\n     * location, the popup will be moved correspondingly.\n     *\n     * @param anchor the popup's anchor view\n     * @param xoff x offset from the view's left edge\n     * @param yoff y offset from the view's bottom edge\n     * @param width the new width in pixels, must be >= 0 or -1 to ignore\n     * @param height the new height in pixels, must be >= 0 or -1 to ignore\n     ",
    "links" : [ "#update" ]
  }, {
    "name" : "private void update(View anchor, boolean updateLocation, int xoff, int yoff, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void detachFromAnchor()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void attachToAnchor(View anchor, int xoff, int yoff, int gravity)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected View getAnchor()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void alignToAnchor()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View getAppRootView(View anchor)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "INPUT_METHOD_FROM_FOCUSABLE", "INPUT_METHOD_NEEDED", "INPUT_METHOD_NOT_NEEDED", "DEFAULT_ANCHORED_GRAVITY", "ANIMATION_STYLE_DEFAULT", "mTmpDrawingLocation", "mTmpScreenLocation", "mTmpAppLocation", "mTempRect", "mContext", "mWindowManager", "mParentRootView", "mIsShowing", "mIsTransitioningToDismiss", "mIsDropdown", "mDecorView", "mBackgroundView", "mContentView", "mFocusable", "mInputMethodMode", "mSoftInputMode", "mTouchable", "mOutsideTouchable", "mClippingEnabled", "mSplitTouchEnabled", "mLayoutInScreen", "mClipToScreen", "mAllowScrollingAnchorParent", "mLayoutInsetDecor", "mNotTouchModal", "mAttachedInDecor", "mAttachedInDecorSet", "mTouchInterceptor", "mWidthMode", "mWidth", "mLastWidth", "mHeightMode", "mHeight", "mLastHeight", "mElevation", "mBackground", "mAboveAnchorBackgroundDrawable", "mBelowAnchorBackgroundDrawable", "mEnterTransition", "mExitTransition", "mEpicenterBounds", "mAboveAnchor", "mWindowLayoutType", "mOnDismissListener", "mIgnoreCheekPress", "mAnimationStyle", "mGravity", "ABOVE_ANCHOR_STATE_SET", "mOnAnchorDetachedListener", "mOnAnchorRootDetachedListener", "mAnchor", "mAnchorRoot", "mIsAnchorRootAttached", "mOnScrollChangedListener", "mOnLayoutChangeListener", "mAnchorXoff", "mAnchorYoff", "mAnchoredGravity", "mOverlapAnchor", "mPopupViewInitialLayoutDirectionInherited" ],
  "methodNames" : [ "public void setEnterTransition(@Nullable Transition enterTransition)", "public Transition getEnterTransition()", "public void setExitTransition(@Nullable Transition exitTransition)", "public Transition getExitTransition()", "public Rect getEpicenterBounds()", "public void setEpicenterBounds(@Nullable Rect bounds)", "private Transition getTransition(int resId)", "public Drawable getBackground()", "public void setBackgroundDrawable(Drawable background)", "public float getElevation()", "public void setElevation(float elevation)", "public int getAnimationStyle()", "public void setIgnoreCheekPress()", "public void setAnimationStyle(int animationStyle)", "public View getContentView()", "public void setContentView(View contentView)", "public void setTouchInterceptor(OnTouchListener l)", "public boolean isFocusable()", "public void setFocusable(boolean focusable)", "public int getInputMethodMode()", "public void setInputMethodMode(int mode)", "public void setSoftInputMode(@SoftInputModeFlags int mode)", "public int getSoftInputMode()", "public boolean isTouchable()", "public void setTouchable(boolean touchable)", "public boolean isOutsideTouchable()", "public void setOutsideTouchable(boolean touchable)", "public boolean isClippingEnabled()", "public void setClippingEnabled(boolean enabled)", "public boolean isClipToScreenEnabled()", "public void setClipToScreenEnabled(boolean enabled)", "public boolean isClippedToScreen()", "public void setIsClippedToScreen(boolean enabled)", " void setAllowScrollingAnchorParent(boolean enabled)", "protected final boolean getAllowScrollingAnchorParent()", "public boolean isSplitTouchEnabled()", "public void setSplitTouchEnabled(boolean enabled)", "public boolean isLayoutInScreenEnabled()", "public void setLayoutInScreenEnabled(boolean enabled)", "public boolean isLaidOutInScreen()", "public void setIsLaidOutInScreen(boolean enabled)", "public boolean isAttachedInDecor()", "public void setAttachedInDecor(boolean enabled)", "public void setLayoutInsetDecor(boolean enabled)", "protected final boolean isLayoutInsetDecor()", "public void setWindowLayoutType(int layoutType)", "public int getWindowLayoutType()", "public boolean isTouchModal()", "public void setTouchModal(boolean touchModal)", "public void setWindowLayoutMode(int widthSpec, int heightSpec)", "public int getHeight()", "public void setHeight(int height)", "public int getWidth()", "public void setWidth(int width)", "public void setOverlapAnchor(boolean overlapAnchor)", "public boolean getOverlapAnchor()", "public boolean isShowing()", "protected final void setShowing(boolean isShowing)", "protected final void setDropDown(boolean isDropDown)", "protected final void setTransitioningToDismiss(boolean transitioningToDismiss)", "protected final boolean isTransitioningToDismiss()", "public void showAtLocation(View parent, int gravity, int x, int y)", "public void showAtLocation(IBinder token, int gravity, int x, int y)", "public void showAsDropDown(View anchor)", "public void showAsDropDown(View anchor, int xoff, int yoff)", "public void showAsDropDown(View anchor, int xoff, int yoff, int gravity)", "protected final void updateAboveAnchor(boolean aboveAnchor)", "public boolean isAboveAnchor()", "private void preparePopup(WindowManager.LayoutParams p)", "private PopupBackgroundView createBackgroundView(View contentView)", "private PopupDecorView createDecorView(View contentView)", "private void invokePopup(WindowManager.LayoutParams p)", "private void setLayoutDirectionFromAnchor()", "private int computeGravity()", "protected final WindowManager.LayoutParams createPopupLayoutParams(IBinder token)", "private int computeFlags(int curFlags)", "private int computeAnimationResource()", "protected boolean findDropDownPosition(View anchor, WindowManager.LayoutParams outParams, int xOffset, int yOffset, int width, int height, int gravity, boolean allowScroll)", "private boolean tryFitVertical(@NonNull LayoutParams outParams, int yOffset, int height, int anchorHeight, int drawingLocationY, int screenLocationY, int displayFrameTop, int displayFrameBottom, boolean allowResize)", "private boolean positionInDisplayVertical(@NonNull LayoutParams outParams, int height, int drawingLocationY, int screenLocationY, int displayFrameTop, int displayFrameBottom, boolean canResize)", "private boolean tryFitHorizontal(@NonNull LayoutParams outParams, int xOffset, int width, int anchorWidth, int drawingLocationX, int screenLocationX, int displayFrameLeft, int displayFrameRight, boolean allowResize)", "private boolean positionInDisplayHorizontal(@NonNull LayoutParams outParams, int width, int drawingLocationX, int screenLocationX, int displayFrameLeft, int displayFrameRight, boolean canResize)", "public int getMaxAvailableHeight(@NonNull View anchor)", "public int getMaxAvailableHeight(@NonNull View anchor, int yOffset)", "public int getMaxAvailableHeight(@NonNull View anchor, int yOffset, boolean ignoreBottomDecorations)", "public void dismiss()", "protected final Rect getTransitionEpicenter()", "private void dismissImmediate(View decorView, ViewGroup contentHolder, View contentView)", "public void setOnDismissListener(OnDismissListener onDismissListener)", "protected final OnDismissListener getOnDismissListener()", "public void update()", "protected void update(View anchor, WindowManager.LayoutParams params)", "public void update(int width, int height)", "public void update(int x, int y, int width, int height)", "public void update(int x, int y, int width, int height, boolean force)", "protected boolean hasContentView()", "protected boolean hasDecorView()", "protected WindowManager.LayoutParams getDecorViewLayoutParams()", "public void update(View anchor, int width, int height)", "public void update(View anchor, int xoff, int yoff, int width, int height)", "private void update(View anchor, boolean updateLocation, int xoff, int yoff, int width, int height)", "protected void detachFromAnchor()", "protected void attachToAnchor(View anchor, int xoff, int yoff, int gravity)", "protected View getAnchor()", "private void alignToAnchor()", "private View getAppRootView(View anchor)" ]
}