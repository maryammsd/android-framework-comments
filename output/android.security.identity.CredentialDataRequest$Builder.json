{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/identity/CredentialDataRequest.java",
  "packageName" : "android.security.identity",
  "className" : "Builder",
  "comment" : "\n     * A builder for {@link CredentialDataRequest}.\n     ",
  "links" : [ "android.security.identity.CredentialDataRequest" ],
  "variables" : [ {
    "name" : "mData",
    "type" : "CredentialDataRequest",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setDeviceSignedEntriesToRequest(@NonNull Map<String, Collection<String>> entriesToRequest)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the device-signed entries to request.\n         *\n         * @param entriesToRequest the device-signed entries to request.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIssuerSignedEntriesToRequest(@NonNull Map<String, Collection<String>> entriesToRequest)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the issuer-signed entries to request.\n         *\n         * @param entriesToRequest the issuer-signed entries to request.\n         * @return the builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAllowUsingExhaustedKeys(boolean allowUsingExhaustedKeys)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to allow using an authentication key which use count has been exceeded.\n         *\n         * <p>This is useful in situations where the application hasn't had a chance to renew\n         * authentication keys, for example if the device hasn't been connected to the Internet or\n         * if the issuing authority server has been down.\n         *\n         * <p>The reason this could be useful is that the privacy risk of reusing an authentication\n         * key for a credential presentation could be significantly smaller compared to the\n         * inconvenience of not being able to present the credential at all.\n         *\n         * <p>By default this is set to true.\n         *\n         * @param allowUsingExhaustedKeys whether to allow using an authentication key which use\n         *                                count has been exceeded if no other key is available.\n         * @return the builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAllowUsingExpiredKeys(boolean allowUsingExpiredKeys)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to allow using an authentication key which is expired.\n         *\n         * <p>This is useful in situations where the application hasn't had a chance to renew\n         * authentication keys, for example if the device hasn't been connected to the Internet or\n         * if the issuing authority server has been down.\n         *\n         * <p>The reason this could be useful is that many verifiers are likely to accept a\n         * credential presentation using an expired authentication key (the credential itself\n         * wouldn't be expired) and it's likely better for the holder to be able to do this than\n         * not present their credential at all.\n         *\n         * <p>By default this is set to false.\n         *\n         * @param allowUsingExpiredKeys whether to allow using an authentication key which is\n         *                              expired if no other key is available.\n         * @return the builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIncrementUseCount(boolean incrementUseCount)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to increment the use-count for the authentication key used.\n         *\n         * <p>Not incrementing the use-count for an authentication key is useful in situations\n         * where the authentication key is known with certainty to not be leaked. For example,\n         * consider an application doing a credential presentation for the sole purpose of\n         * displaying the credential data to the user (not for verification).\n         *\n         * <p>By default this is set to true.\n         *\n         * @param incrementUseCount whether to increment the use count of the authentication\n         *                          key used.\n         * @return the builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequestMessage(@NonNull byte[] requestMessage)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the request message CBOR.\n         *\n         * <p>This data structure is described in the documentation for the\n         * {@link PresentationSession#getCredentialData(String, CredentialDataRequest)} method.\n         *\n         * @param requestMessage the request message CBOR as described above.\n         * @return the builder.\n         ",
    "links" : [ "android.security.identity.PresentationSession#getCredentialData(String" ]
  }, {
    "name" : "public Builder setReaderSignature(@NonNull byte[] readerSignature)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the reader signature.\n         *\n         * <p>This data structure is described in the documentation for the\n         * {@link PresentationSession#getCredentialData(String, CredentialDataRequest)} method.\n         *\n         * @param readerSignature a {@code COSE_Sign1} structure as described above.\n         * @return the builder.\n         ",
    "links" : [ "android.security.identity.PresentationSession#getCredentialData(String" ]
  }, {
    "name" : "public CredentialDataRequest build()",
    "returnType" : "CredentialDataRequest",
    "comment" : "\n         * Finishes building a {@link CredentialDataRequest}.\n         *\n         * @return the {@link CredentialDataRequest} object.\n         ",
    "links" : [ "android.security.identity.CredentialDataRequest" ]
  } ],
  "methodNames" : [ "public Builder setDeviceSignedEntriesToRequest(@NonNull Map<String, Collection<String>> entriesToRequest)", "public Builder setIssuerSignedEntriesToRequest(@NonNull Map<String, Collection<String>> entriesToRequest)", "public Builder setAllowUsingExhaustedKeys(boolean allowUsingExhaustedKeys)", "public Builder setAllowUsingExpiredKeys(boolean allowUsingExpiredKeys)", "public Builder setIncrementUseCount(boolean incrementUseCount)", "public Builder setRequestMessage(@NonNull byte[] requestMessage)", "public Builder setReaderSignature(@NonNull byte[] readerSignature)", "public CredentialDataRequest build()" ],
  "variableNames" : [ "mData" ]
}