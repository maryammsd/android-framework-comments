{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/AccessibilityInteractionController.java",
  "packageName" : "android.view",
  "className" : "AccessibilityInteractionController",
  "comment" : "\n * Class for managing accessibility interactions initiated from the system\n * and targeting the view hierarchy. A *ClientThread method is to be\n * called from the interaction connection ViewAncestor gives the system to\n * talk to it and a corresponding *UiThread method that is executed on the\n * UI thread.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENFORCE_NODE_TREE_CONSISTENT",
    "type" : "boolean",
    "comment" : " Debugging flag",
    "links" : [ ]
  }, {
    "name" : "IGNORE_REQUEST_PREPARERS",
    "type" : "boolean",
    "comment" : " Constants for readability",
    "links" : [ ]
  }, {
    "name" : "CONSIDER_REQUEST_PREPARERS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_PREPARER_TIMEOUT_MS",
    "type" : "long",
    "comment" : " accessibility from hanging",
    "links" : [ ]
  }, {
    "name" : "mTempAccessibilityNodeInfoList",
    "type" : "ArrayList<AccessibilityNodeInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "PrivateHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewRootImpl",
    "type" : "ViewRootImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrefetcher",
    "type" : "AccessibilityNodePrefetcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMyLooperThreadId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMyProcessId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mA11yManager",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempArrayList",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempPoint",
    "type" : "Point",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect1",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect2",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRectF",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddNodeInfosForViewId",
    "type" : "AddNodeInfosForViewId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumActiveRequestPreparers",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessagesWaitingForRequestPreparer",
    "type" : "List<MessageHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveRequestPreparerId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void scheduleMessage(Message message, int interrogatingPid, long interrogatingTid, boolean ignoreRequestPreparers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isShown(View view)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findAccessibilityNodeInfoByAccessibilityIdClientThread(long accessibilityNodeId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, Bundle arguments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean holdOffMessageIfNeeded(Message originalMessage, int callingPid, long callingTid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this message needs to be held off while the app prepares to meet either this\n     * request, or a request ahead of it.\n     *\n     * @param originalMessage The message to be processed\n     * @param callingPid The calling process id\n     * @param callingTid The calling thread id\n     *\n     * @return {@code true} if the message is held off and will be processed later, {@code false} if\n     *         the message should be posted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void prepareForExtraDataRequestUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void queueMessageToHandleOncePrepared(Message message, int interrogatingPid, long interrogatingTid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void requestPreparerDoneUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void requestPreparerTimeoutUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleAllMessagesWaitingForRequestPreparerLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findAccessibilityNodeInfoByAccessibilityIdUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findAccessibilityNodeInfosByViewIdClientThread(long accessibilityNodeId, String viewId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findAccessibilityNodeInfosByViewIdUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findAccessibilityNodeInfosByTextClientThread(long accessibilityNodeId, String text, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findAccessibilityNodeInfosByTextUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findFocusClientThread(long accessibilityNodeId, int focusType, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findFocusUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void focusSearchClientThread(long accessibilityNodeId, int direction, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void focusSearchUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performAccessibilityActionClientThread(long accessibilityNodeId, int action, Bundle arguments, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performAccessibilityActionUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAccessibilityFocusClientThread()",
    "returnType" : "void",
    "comment" : "\n     * Finds the accessibility focused node in the root, and clears the accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearAccessibilityFocusUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyOutsideTouchClientThread()",
    "returnType" : "void",
    "comment" : "\n     * Notify outside touch event to the target window.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void notifyOutsideTouchUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findViewByAccessibilityId(int accessibilityId)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyAppScaleAndMagnificationSpecIfNeeded(List<AccessibilityNodeInfo> infos, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustIsVisibleToUserIfNeeded(List<AccessibilityNodeInfo> infos, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustIsVisibleToUserIfNeeded(AccessibilityNodeInfo info, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassAdjustIsVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustBoundsInScreenIfNeeded(List<AccessibilityNodeInfo> infos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustBoundsInScreenIfNeeded(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassAdjustBoundsInScreen()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyScreenMatrixIfNeeded(List<AccessibilityNodeInfo> infos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyScreenMatrixIfNeeded(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassApplyScreenMatrix()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void associateLeashedParentIfNeeded(List<AccessibilityNodeInfo> infos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void associateLeashedParentIfNeeded(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassAssociateLeashedParent()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyAppScaleAndMagnificationSpecIfNeeded(AccessibilityNodeInfo info, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldApplyAppScaleAndMagnificationSpec(float appScale, MagnificationSpec spec)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInfosForViewportAndReturnFindNodeResult(List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInfoForViewportAndReturnFindNodeResult(AccessibilityNodeInfo info, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recycleMagnificationSpecAndRegionIfNeeded(MagnificationSpec spec, Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleClickableSpanActionUiThread(View view, int virtualDescendantId, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "ENFORCE_NODE_TREE_CONSISTENT", "IGNORE_REQUEST_PREPARERS", "CONSIDER_REQUEST_PREPARERS", "REQUEST_PREPARER_TIMEOUT_MS", "mTempAccessibilityNodeInfoList", "mLock", "mHandler", "mViewRootImpl", "mPrefetcher", "mMyLooperThreadId", "mMyProcessId", "mA11yManager", "mTempArrayList", "mTempPoint", "mTempRect", "mTempRect1", "mTempRect2", "mTempRectF", "mAddNodeInfosForViewId", "mNumActiveRequestPreparers", "mMessagesWaitingForRequestPreparer", "mActiveRequestPreparerId" ],
  "methodNames" : [ "private void scheduleMessage(Message message, int interrogatingPid, long interrogatingTid, boolean ignoreRequestPreparers)", "private boolean isShown(View view)", "public void findAccessibilityNodeInfoByAccessibilityIdClientThread(long accessibilityNodeId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, Bundle arguments)", "private boolean holdOffMessageIfNeeded(Message originalMessage, int callingPid, long callingTid)", "private void prepareForExtraDataRequestUiThread(Message message)", "private void queueMessageToHandleOncePrepared(Message message, int interrogatingPid, long interrogatingTid)", "private void requestPreparerDoneUiThread(Message message)", "private void requestPreparerTimeoutUiThread()", "private void scheduleAllMessagesWaitingForRequestPreparerLocked()", "private void findAccessibilityNodeInfoByAccessibilityIdUiThread(Message message)", "public void findAccessibilityNodeInfosByViewIdClientThread(long accessibilityNodeId, String viewId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)", "private void findAccessibilityNodeInfosByViewIdUiThread(Message message)", "public void findAccessibilityNodeInfosByTextClientThread(long accessibilityNodeId, String text, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)", "private void findAccessibilityNodeInfosByTextUiThread(Message message)", "public void findFocusClientThread(long accessibilityNodeId, int focusType, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)", "private void findFocusUiThread(Message message)", "public void focusSearchClientThread(long accessibilityNodeId, int direction, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec)", "private void focusSearchUiThread(Message message)", "public void performAccessibilityActionClientThread(long accessibilityNodeId, int action, Bundle arguments, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid)", "private void performAccessibilityActionUiThread(Message message)", "public void clearAccessibilityFocusClientThread()", "private void clearAccessibilityFocusUiThread()", "public void notifyOutsideTouchClientThread()", "private void notifyOutsideTouchUiThread()", "private View findViewByAccessibilityId(int accessibilityId)", "private void applyAppScaleAndMagnificationSpecIfNeeded(List<AccessibilityNodeInfo> infos, MagnificationSpec spec)", "private void adjustIsVisibleToUserIfNeeded(List<AccessibilityNodeInfo> infos, Region interactiveRegion)", "private void adjustIsVisibleToUserIfNeeded(AccessibilityNodeInfo info, Region interactiveRegion)", "private boolean shouldBypassAdjustIsVisible()", "private void adjustBoundsInScreenIfNeeded(List<AccessibilityNodeInfo> infos)", "private void adjustBoundsInScreenIfNeeded(AccessibilityNodeInfo info)", "private boolean shouldBypassAdjustBoundsInScreen()", "private void applyScreenMatrixIfNeeded(List<AccessibilityNodeInfo> infos)", "private void applyScreenMatrixIfNeeded(AccessibilityNodeInfo info)", "private boolean shouldBypassApplyScreenMatrix()", "private void associateLeashedParentIfNeeded(List<AccessibilityNodeInfo> infos)", "private void associateLeashedParentIfNeeded(AccessibilityNodeInfo info)", "private boolean shouldBypassAssociateLeashedParent()", "private void applyAppScaleAndMagnificationSpecIfNeeded(AccessibilityNodeInfo info, MagnificationSpec spec)", "private boolean shouldApplyAppScaleAndMagnificationSpec(float appScale, MagnificationSpec spec)", "private void updateInfosForViewportAndReturnFindNodeResult(List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, Region interactiveRegion)", "private void updateInfoForViewportAndReturnFindNodeResult(AccessibilityNodeInfo info, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, Region interactiveRegion)", "private void recycleMagnificationSpecAndRegionIfNeeded(MagnificationSpec spec, Region region)", "private boolean handleClickableSpanActionUiThread(View view, int virtualDescendantId, Bundle arguments)" ]
}