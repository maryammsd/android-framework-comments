{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/AccessibilityInteractionController.java",
  "packageName" : "android.view",
  "className" : "AccessibilityInteractionController",
  "comment" : "\n * Class for managing accessibility interactions initiated from the system\n * and targeting the view hierarchy. A *ClientThread method is to be\n * called from the interaction connection ViewAncestor gives the system to\n * talk to it and a corresponding *UiThread method that is executed on the\n * UI thread.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENFORCE_NODE_TREE_CONSISTENT",
    "type" : "boolean",
    "comment" : " Debugging flag",
    "links" : [ ]
  }, {
    "name" : "IGNORE_REQUEST_PREPARERS",
    "type" : "boolean",
    "comment" : " Constants for readability",
    "links" : [ ]
  }, {
    "name" : "CONSIDER_REQUEST_PREPARERS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_PREPARER_TIMEOUT_MS",
    "type" : "long",
    "comment" : " accessibility from hanging",
    "links" : [ ]
  }, {
    "name" : "FLAGS_AFFECTING_REPORTED_DATA",
    "type" : "int",
    "comment" : " node request on prefetch",
    "links" : [ ]
  }, {
    "name" : "mTempAccessibilityNodeInfoList",
    "type" : "ArrayList<AccessibilityNodeInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "PrivateHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewRootImpl",
    "type" : "ViewRootImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrefetcher",
    "type" : "AccessibilityNodePrefetcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMyLooperThreadId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMyProcessId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mA11yManager",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempArrayList",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRectF",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddNodeInfosForViewId",
    "type" : "AddNodeInfosForViewId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingFindNodeByIdMessages",
    "type" : "ArrayList<Message>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumActiveRequestPreparers",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessagesWaitingForRequestPreparer",
    "type" : "List<MessageHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveRequestPreparerId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void scheduleMessage(Message message, int interrogatingPid, long interrogatingTid, boolean ignoreRequestPreparers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isShown(View view)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isVisibleToAccessibilityService(View view)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findAccessibilityNodeInfoByAccessibilityIdClientThread(long accessibilityNodeId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues, Bundle arguments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean holdOffMessageIfNeeded(Message originalMessage, int callingPid, long callingTid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this message needs to be held off while the app prepares to meet either this\n     * request, or a request ahead of it.\n     *\n     * @param originalMessage The message to be processed\n     * @param callingPid The calling process id\n     * @param callingTid The calling thread id\n     *\n     * @return {@code true} if the message is held off and will be processed later, {@code false} if\n     *         the message should be posted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void prepareForExtraDataRequestUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void queueMessageToHandleOncePrepared(Message message, int interrogatingPid, long interrogatingTid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void requestPreparerDoneUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void requestPreparerTimeoutUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleAllMessagesWaitingForRequestPreparerLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findAccessibilityNodeInfoByAccessibilityIdUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AccessibilityNodeInfo populateAccessibilityNodeInfoForView(View view, Bundle arguments, int virtualViewId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findAccessibilityNodeInfosByViewIdClientThread(long accessibilityNodeId, String viewId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findAccessibilityNodeInfosByViewIdUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findAccessibilityNodeInfosByTextClientThread(long accessibilityNodeId, String text, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findAccessibilityNodeInfosByTextUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void takeScreenshotOfWindowClientThread(int interactionId, ScreenCapture.ScreenCaptureListener listener, IAccessibilityInteractionConnectionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Take a screenshot using {@link ScreenCapture} of this {@link ViewRootImpl}'s {@link\n     * SurfaceControl}.\n     ",
    "links" : [ "android.view.SurfaceControl", "android.view.ViewRootImpl", "android.window.ScreenCapture" ]
  }, {
    "name" : "private void takeScreenshotOfWindowUiThread(int interactionId, ScreenCapture.ScreenCaptureListener listener, IAccessibilityInteractionConnectionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void findFocusClientThread(long accessibilityNodeId, int focusType, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findFocusUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void focusSearchClientThread(long accessibilityNodeId, int direction, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void focusSearchUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performAccessibilityActionClientThread(long accessibilityNodeId, int action, Bundle arguments, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performAccessibilityActionUiThread(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAccessibilityFocusClientThread()",
    "returnType" : "void",
    "comment" : "\n     * Finds the accessibility focused node in the root, and clears the accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearAccessibilityFocusUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyOutsideTouchClientThread()",
    "returnType" : "void",
    "comment" : "\n     * Notify outside touch event to the target window.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void notifyOutsideTouchUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findViewByAccessibilityId(int accessibilityId)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View getRootView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setAccessibilityFetchFlags(int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetAccessibilityFetchFlags()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustIsVisibleToUserIfNeeded(AccessibilityNodeInfo info, Region interactiveRegion, MagnificationSpec spec)",
    "returnType" : "void",
    "comment" : " determine the visibility.",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassAdjustIsVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyHostWindowMatrixIfNeeded(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Applies the host-window matrix to the embedded node. After this transform, The node bounds\n     *  will be transformed from embedded window coordinates to host-window coordinates.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassApplyWindowMatrix()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void associateLeashedParentIfNeeded(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBypassAssociateLeashedParent()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldApplyAppScaleAndMagnificationSpec(float appScale, MagnificationSpec spec)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInfosForViewPort(List<AccessibilityNodeInfo> infos, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInfoForViewPort(AccessibilityNodeInfo info, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void transformBoundsWithScreenMatrix(AccessibilityNodeInfo info, float[] matrixValues)",
    "returnType" : "void",
    "comment" : "\n     * Transforms the regions from local screen coordinate to global screen coordinate with the\n     * given transform matrix used in on-screen coordinate.\n     *\n     * @param info the AccessibilityNodeInfo that has the region in application screen coordinate\n     * @param matrixValues the matrix to be applied\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyTransformMatrixToBoundsInParentIfNeeded(AccessibilityNodeInfo info, Matrix transformMatrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInfosForViewportAndReturnFindNodeResult(List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void returnFindNodeResult(AccessibilityNodeInfo info, IAccessibilityInteractionConnectionCallback callback, int interactionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void returnFindNodeResult(SatisfiedFindAccessibilityNodeByAccessibilityIdRequest satisfiedRequest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void returnFindNodesResult(List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback, int interactionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SatisfiedFindAccessibilityNodeByAccessibilityIdRequest getSatisfiedRequestInPrefetch(AccessibilityNodeInfo requestedNode, List<AccessibilityNodeInfo> infos, int flags)",
    "returnType" : "SatisfiedFindAccessibilityNodeByAccessibilityIdRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AccessibilityNodeInfo nodeWithIdFromList(AccessibilityNodeInfo requestedNode, List<AccessibilityNodeInfo> infos, long nodeId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void returnPrefetchResult(int interactionId, List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInfoForViewportAndReturnFindNodeResult(AccessibilityNodeInfo info, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleClickableSpanActionUiThread(View view, int virtualDescendantId, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void roundRectFToRect(@NonNull RectF sourceRectF, @NonNull Rect outRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroy {@link AccessibilityInteractionController} and clean up the pending actions.\n     ",
    "links" : [ "android.view.AccessibilityInteractionController" ]
  }, {
    "name" : "public void attachAccessibilityOverlayToWindowClientThread(SurfaceControl sc, int interactionId, IAccessibilityInteractionConnectionCallback callback)",
    "returnType" : "void",
    "comment" : " Attaches an accessibility overlay to the specified window. ",
    "links" : [ ]
  }, {
    "name" : "private void attachAccessibilityOverlayToWindowUiThread(SurfaceControl sc, int interactionId, IAccessibilityInteractionConnectionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void scheduleMessage(Message message, int interrogatingPid, long interrogatingTid, boolean ignoreRequestPreparers)", "private boolean isShown(View view)", "private boolean isVisibleToAccessibilityService(View view)", "public void findAccessibilityNodeInfoByAccessibilityIdClientThread(long accessibilityNodeId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues, Bundle arguments)", "private boolean holdOffMessageIfNeeded(Message originalMessage, int callingPid, long callingTid)", "private void prepareForExtraDataRequestUiThread(Message message)", "private void queueMessageToHandleOncePrepared(Message message, int interrogatingPid, long interrogatingTid)", "private void requestPreparerDoneUiThread(Message message)", "private void requestPreparerTimeoutUiThread()", "private void scheduleAllMessagesWaitingForRequestPreparerLocked()", "private void findAccessibilityNodeInfoByAccessibilityIdUiThread(Message message)", "private AccessibilityNodeInfo populateAccessibilityNodeInfoForView(View view, Bundle arguments, int virtualViewId)", "public void findAccessibilityNodeInfosByViewIdClientThread(long accessibilityNodeId, String viewId, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)", "private void findAccessibilityNodeInfosByViewIdUiThread(Message message)", "public void findAccessibilityNodeInfosByTextClientThread(long accessibilityNodeId, String text, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)", "private void findAccessibilityNodeInfosByTextUiThread(Message message)", "public void takeScreenshotOfWindowClientThread(int interactionId, ScreenCapture.ScreenCaptureListener listener, IAccessibilityInteractionConnectionCallback callback)", "private void takeScreenshotOfWindowUiThread(int interactionId, ScreenCapture.ScreenCaptureListener listener, IAccessibilityInteractionConnectionCallback callback)", "public void findFocusClientThread(long accessibilityNodeId, int focusType, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)", "private void findFocusUiThread(Message message)", "public void focusSearchClientThread(long accessibilityNodeId, int direction, Region interactiveRegion, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid, MagnificationSpec spec, float[] matrixValues)", "private void focusSearchUiThread(Message message)", "public void performAccessibilityActionClientThread(long accessibilityNodeId, int action, Bundle arguments, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, int interrogatingPid, long interrogatingTid)", "private void performAccessibilityActionUiThread(Message message)", "public void clearAccessibilityFocusClientThread()", "private void clearAccessibilityFocusUiThread()", "public void notifyOutsideTouchClientThread()", "private void notifyOutsideTouchUiThread()", "private View findViewByAccessibilityId(int accessibilityId)", "private View getRootView()", "private void setAccessibilityFetchFlags(int flags)", "private void resetAccessibilityFetchFlags()", "private void adjustIsVisibleToUserIfNeeded(AccessibilityNodeInfo info, Region interactiveRegion, MagnificationSpec spec)", "private boolean shouldBypassAdjustIsVisible()", "private void applyHostWindowMatrixIfNeeded(AccessibilityNodeInfo info)", "private boolean shouldBypassApplyWindowMatrix()", "private void associateLeashedParentIfNeeded(AccessibilityNodeInfo info)", "private boolean shouldBypassAssociateLeashedParent()", "private boolean shouldApplyAppScaleAndMagnificationSpec(float appScale, MagnificationSpec spec)", "private void updateInfosForViewPort(List<AccessibilityNodeInfo> infos, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)", "private void updateInfoForViewPort(AccessibilityNodeInfo info, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)", "private void transformBoundsWithScreenMatrix(AccessibilityNodeInfo info, float[] matrixValues)", "private void applyTransformMatrixToBoundsInParentIfNeeded(AccessibilityNodeInfo info, Matrix transformMatrix)", "private void updateInfosForViewportAndReturnFindNodeResult(List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)", "private void returnFindNodeResult(AccessibilityNodeInfo info, IAccessibilityInteractionConnectionCallback callback, int interactionId)", "private void returnFindNodeResult(SatisfiedFindAccessibilityNodeByAccessibilityIdRequest satisfiedRequest)", "private void returnFindNodesResult(List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback, int interactionId)", "private SatisfiedFindAccessibilityNodeByAccessibilityIdRequest getSatisfiedRequestInPrefetch(AccessibilityNodeInfo requestedNode, List<AccessibilityNodeInfo> infos, int flags)", "private AccessibilityNodeInfo nodeWithIdFromList(AccessibilityNodeInfo requestedNode, List<AccessibilityNodeInfo> infos, long nodeId)", "private void returnPrefetchResult(int interactionId, List<AccessibilityNodeInfo> infos, IAccessibilityInteractionConnectionCallback callback)", "private void updateInfoForViewportAndReturnFindNodeResult(AccessibilityNodeInfo info, IAccessibilityInteractionConnectionCallback callback, int interactionId, MagnificationSpec spec, float[] matrixValues, Region interactiveRegion)", "private boolean handleClickableSpanActionUiThread(View view, int virtualDescendantId, Bundle arguments)", "private static void roundRectFToRect(@NonNull RectF sourceRectF, @NonNull Rect outRect)", "public void destroy()", "public void attachAccessibilityOverlayToWindowClientThread(SurfaceControl sc, int interactionId, IAccessibilityInteractionConnectionCallback callback)", "private void attachAccessibilityOverlayToWindowUiThread(SurfaceControl sc, int interactionId, IAccessibilityInteractionConnectionCallback callback)" ],
  "variableNames" : [ "LOG_TAG", "ENFORCE_NODE_TREE_CONSISTENT", "IGNORE_REQUEST_PREPARERS", "CONSIDER_REQUEST_PREPARERS", "REQUEST_PREPARER_TIMEOUT_MS", "FLAGS_AFFECTING_REPORTED_DATA", "mTempAccessibilityNodeInfoList", "mLock", "mHandler", "mViewRootImpl", "mPrefetcher", "mMyLooperThreadId", "mMyProcessId", "mA11yManager", "mTempArrayList", "mTempRect", "mTempRectF", "mAddNodeInfosForViewId", "mPendingFindNodeByIdMessages", "mNumActiveRequestPreparers", "mMessagesWaitingForRequestPreparer", "mActiveRequestPreparerId" ]
}