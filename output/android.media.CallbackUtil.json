{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/CallbackUtil.java",
  "packageName" : "android.media",
  "className" : "CallbackUtil",
  "comment" : "package",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static ListenerInfo<T> getListenerInfo(@NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners)",
    "returnType" : "ListenerInfo<T>",
    "comment" : "\n     * Finds the listener information (listener + Executor) in a given list of listeners\n     * @param listener the listener to find\n     * @param listeners the list of listener informations, can be null if not instantiated yet\n     * @param <T> the type of the listeners\n     * @return null if the listener is not in the given list of listener informations\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean hasListener(@NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given listener is present in the list of listener informations\n     * @param listener the listener to find\n     * @param listeners the list of listener informations, can be null if not instantiated yet\n     * @param <T> the type of the listeners\n     * @return true if the listener is in the list\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean removeListener(@NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the given listener from the list of listener informations\n     * @param listener the listener to remove\n     * @param listeners the list of listener informations, can be null if not instantiated yet\n     * @param <T> the type of the listeners\n     * @return true if the listener was found and removed from the list, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : " static Pair<ArrayList<ListenerInfo<T>>, S> addListener(String methodName, @NonNull Executor executor, @NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners, @Nullable S dispatchStub, @NonNull java.util.function.Supplier<S> newStub, @NonNull java.util.function.Consumer<S> registerStub)",
    "returnType" : "Pair<ArrayList<ListenerInfo<T>>, S>",
    "comment" : "\n     * Adds a listener and associated Executor in the list of listeners.\n     * This method handles the lazy initialization of both the list of listeners and the stub\n     * used to receive the events that will be forwarded to the listener, see the returned pair\n     * for the updated references.\n     * @param methodName the name of the method calling this, for inclusion in the\n     *                   string in case of IllegalArgumentException\n     * @param executor the Executor for the listener\n     * @param listener the listener to add\n     * @param listeners the list of listener informations, can be null if not instantiated yet\n     * @param dispatchStub the stub that receives the events to be forwarded to the listeners,\n     *                    can be null if not instantiated yet\n     * @param newStub the function to create a new stub if needed\n     * @param registerStub the function for the stub registration if needed\n     * @param <T> the type of the listener interface\n     * @param <S> the type of the event receiver stub\n     * @return a pair of the listener list and the event receiver stub which may have been\n     *         initialized if needed (e.g. on the first ever addition of a listener)\n     ",
    "links" : [ ]
  }, {
    "name" : " static Pair<ArrayList<ListenerInfo<T>>, S> removeListener(String methodName, @NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners, @Nullable S dispatchStub, @NonNull java.util.function.Consumer<S> unregisterStub)",
    "returnType" : "Pair<ArrayList<ListenerInfo<T>>, S>",
    "comment" : "\n     * Removes a listener from the list of listeners.\n     * This method handles the freeing of both the list of listeners and the stub\n     * used to receive the events that will be forwarded to the listener,see the returned pair\n     * for the updated references.\n     * @param methodName the name of the method calling this, for inclusion in the\n     *                   string in case of IllegalArgumentException\n     * @param listener the listener to remove\n     * @param listeners the list of listener informations, can be null if not instantiated yet\n     * @param dispatchStub the stub that receives the events to be forwarded to the listeners,\n     *                    can be null if not instantiated yet\n     * @param unregisterStub the function to unregister the stub if needed\n     * @param <T> the type of the listener interface\n     * @param <S> the type of the event receiver stub\n     * @return a pair of the listener list and the event receiver stub which may have been\n     *         changed if needed (e.g. on the removal of the last listener)\n     ",
    "links" : [ ]
  }, {
    "name" : " static void callListeners(@Nullable ArrayList<ListenerInfo<T>> listeners, @NonNull Object listenerLock, @NonNull CallbackMethod<T> callback)",
    "returnType" : "void",
    "comment" : "\n     * Exercise the callback of the listeners\n     * @param listeners the list of listeners\n     * @param listenerLock the lock guarding the list of listeners\n     * @param callback the function to call for each listener\n     * @param <T>  the type of the listener interface\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static ListenerInfo<T> getListenerInfo(@NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners)", " static boolean hasListener(@NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners)", " static boolean removeListener(@NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners)", " static Pair<ArrayList<ListenerInfo<T>>, S> addListener(String methodName, @NonNull Executor executor, @NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners, @Nullable S dispatchStub, @NonNull java.util.function.Supplier<S> newStub, @NonNull java.util.function.Consumer<S> registerStub)", " static Pair<ArrayList<ListenerInfo<T>>, S> removeListener(String methodName, @NonNull T listener, @Nullable ArrayList<ListenerInfo<T>> listeners, @Nullable S dispatchStub, @NonNull java.util.function.Consumer<S> unregisterStub)", " static void callListeners(@Nullable ArrayList<ListenerInfo<T>> listeners, @NonNull Object listenerLock, @NonNull CallbackMethod<T> callback)" ],
  "variableNames" : [ "TAG" ]
}