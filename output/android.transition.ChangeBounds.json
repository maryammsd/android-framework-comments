{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/transition/ChangeBounds.java",
  "packageName" : "android.transition",
  "className" : "ChangeBounds",
  "comment" : "\n * This transition captures the layout bounds of target views before and after\n * the scene change and animates those changes during the transition.\n *\n * <p>A ChangeBounds transition can be described in a resource file by using the\n * tag <code>changeBounds</code>, using its attributes of\n * {@link android.R.styleable#ChangeBounds} along with the other standard\n * attributes of {@link android.R.styleable#Transition}.</p>\n ",
  "variables" : [ {
    "name" : "PROPNAME_BOUNDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_CLIP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_WINDOW_X",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_WINDOW_Y",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTransitionProperties",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DRAWABLE_ORIGIN_PROPERTY",
    "type" : "Property<Drawable, PointF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOP_LEFT_PROPERTY",
    "type" : "Property<ViewBounds, PointF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOTTOM_RIGHT_PROPERTY",
    "type" : "Property<ViewBounds, PointF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOTTOM_RIGHT_ONLY_PROPERTY",
    "type" : "Property<View, PointF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOP_LEFT_ONLY_PROPERTY",
    "type" : "Property<View, PointF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POSITION_PROPERTY",
    "type" : "Property<View, PointF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tempLocation",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResizeClip",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReparent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRectEvaluator",
    "type" : "RectEvaluator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String[] getTransitionProperties()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setResizeClip(boolean resizeClip)",
    "returnType" : "void",
    "comment" : "\n     * When <code>resizeClip</code> is true, ChangeBounds resizes the view using the clipBounds\n     * instead of changing the dimensions of the view during the animation. When\n     * <code>resizeClip</code> is false, ChangeBounds resizes the View by changing its dimensions.\n     *\n     * <p>When resizeClip is set to true, the clip bounds is modified by ChangeBounds. Therefore,\n     * {@link android.transition.ChangeClipBounds} is not compatible with ChangeBounds\n     * in this mode.</p>\n     *\n     * @param resizeClip Used to indicate whether the view bounds should be modified or the\n     *                   clip bounds should be modified by ChangeBounds.\n     * @see android.view.View#setClipBounds(android.graphics.Rect)\n     * @attr ref android.R.styleable#ChangeBounds_resizeClip\n     ",
    "links" : [ "android.transition.ChangeClipBounds" ]
  }, {
    "name" : "public boolean getResizeClip()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true when the ChangeBounds will resize by changing the clip bounds during the\n     * view animation or false when bounds are changed. The default value is false.\n     *\n     * @return true when the ChangeBounds will resize by changing the clip bounds during the\n     * view animation or false when bounds are changed. The default value is false.\n     * @attr ref android.R.styleable#ChangeBounds_resizeClip\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReparent(boolean reparent)",
    "returnType" : "void",
    "comment" : "\n     * Setting this flag tells ChangeBounds to track the before/after parent\n     * of every view using this transition. The flag is not enabled by\n     * default because it requires the parent instances to be the same\n     * in the two scenes or else all parents must use ids to allow\n     * the transition to determine which parents are the same.\n     *\n     * @param reparent true if the transition should track the parent\n     * container of target views and animate parent changes.\n     * @deprecated Use {@link android.transition.ChangeTransform} to handle\n     * transitions between different parents.\n     ",
    "links" : [ "android.transition.ChangeTransform" ]
  }, {
    "name" : "private void captureValues(TransitionValues values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureStartValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureEndValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parentMatches(View startParent, View endParent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Animator createAnimator(final ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "PROPNAME_BOUNDS", "PROPNAME_CLIP", "PROPNAME_PARENT", "PROPNAME_WINDOW_X", "PROPNAME_WINDOW_Y", "sTransitionProperties", "DRAWABLE_ORIGIN_PROPERTY", "TOP_LEFT_PROPERTY", "BOTTOM_RIGHT_PROPERTY", "BOTTOM_RIGHT_ONLY_PROPERTY", "TOP_LEFT_ONLY_PROPERTY", "POSITION_PROPERTY", "tempLocation", "mResizeClip", "mReparent", "LOG_TAG", "sRectEvaluator" ],
  "methodNames" : [ "public String[] getTransitionProperties()", "public void setResizeClip(boolean resizeClip)", "public boolean getResizeClip()", "public void setReparent(boolean reparent)", "private void captureValues(TransitionValues values)", "public void captureStartValues(TransitionValues transitionValues)", "public void captureEndValues(TransitionValues transitionValues)", "private boolean parentMatches(View startParent, View endParent)", "public Animator createAnimator(final ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)" ]
}