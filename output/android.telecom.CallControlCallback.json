{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/CallControlCallback.java",
  "packageName" : "android.telecom",
  "className" : "CallControlCallback",
  "comment" : "\n * CallControlCallback relays call updates (that require a response) from the Telecom framework out\n * to the application.This can include operations which the app must implement on a Call due to the\n * presence of other calls on the device, requests relayed from a Bluetooth device, or from another\n * calling surface.\n *\n * <p>\n * All CallControlCallbacks are transactional, meaning that a client must\n * complete the {@link Consumer} via {@link Consumer#accept(Object)} in order to complete the\n * CallControlCallbacks. If a CallControlCallbacks can be completed, the\n * {@link Consumer#accept(Object)} should be called with {@link Boolean#TRUE}. Otherwise,\n * {@link Consumer#accept(Object)} should be called with {@link Boolean#FALSE} to represent the\n * CallControlCallbacks cannot be completed on the client side.\n *\n * <p>\n * Note: Each CallEventCallback has a timeout of 5000 milliseconds. Failing to complete the\n * {@link Consumer} before the timeout will result in a failed transaction.\n ",
  "links" : [ "java.util.function.Consumer", "#FALSE", "#TRUE", "java.util.function.Consumer#accept(Object)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onSetActive(@NonNull Consumer<Boolean> wasCompleted)",
    "returnType" : "void",
    "comment" : "\n     * Telecom is informing the client to set the call active\n     *\n     * @param wasCompleted The {@link Consumer} to be completed. If the client can set the call\n     *                     active on their end, the {@link Consumer#accept(Object)} should be\n     *                     called with {@link Boolean#TRUE}.\n     *\n     *                     Otherwise, {@link Consumer#accept(Object)} should be called with\n     *                     {@link Boolean#FALSE}.  Telecom will effectively ignore the remote\n     *                     setActive request and the call will remain in whatever state it is in.\n     ",
    "links" : [ "java.util.function.Consumer", "#FALSE", "#TRUE", "java.util.function.Consumer#accept(Object)" ]
  }, {
    "name" : " void onSetInactive(@NonNull Consumer<Boolean> wasCompleted)",
    "returnType" : "void",
    "comment" : "\n     * Telecom is informing the client to set the call inactive. This is the same as holding a call\n     * for two endpoints but can be extended to setting a meeting inactive.\n     *\n     * @param wasCompleted The {@link Consumer} to be completed. If the client can set the call\n     *                     inactive on their end, the {@link Consumer#accept(Object)} should be\n     *                     called with {@link Boolean#TRUE}.\n     *\n     *                     Otherwise, {@link Consumer#accept(Object)} should be called with\n     *                     {@link Boolean#FALSE}.  Telecom will effectively ignore the remote\n     *                     setInactive request and the call will remain in whatever state it is in.\n     ",
    "links" : [ "java.util.function.Consumer", "#FALSE", "#TRUE", "java.util.function.Consumer#accept(Object)" ]
  }, {
    "name" : " void onAnswer(@android.telecom.CallAttributes.CallType int videoState, @NonNull Consumer<Boolean> wasCompleted)",
    "returnType" : "void",
    "comment" : "\n     * Telecom is informing the client to answer an incoming call and set it to active.\n     *\n     * @param videoState   the video state\n     * @param wasCompleted The {@link Consumer} to be completed. If the client can answer the call\n     *                     on their end, {@link Consumer#accept(Object)} should be called with\n     *                     {@link Boolean#TRUE}.\n     *\n     *                     Otherwise,{@link Consumer#accept(Object)} should  be called with\n     *                     {@link Boolean#FALSE}. However, Telecom will still disconnect\n     *                     the call and remove it from tracking.\n     ",
    "links" : [ "java.util.function.Consumer", "#FALSE", "#TRUE", "java.util.function.Consumer#accept(Object)" ]
  }, {
    "name" : " void onDisconnect(@NonNull DisconnectCause disconnectCause, @NonNull Consumer<Boolean> wasCompleted)",
    "returnType" : "void",
    "comment" : "\n     * Telecom is informing the client to disconnect the call\n     *\n     * @param disconnectCause represents the cause for disconnecting the call.\n     * @param wasCompleted    The {@link Consumer} to be completed. If the client can disconnect\n     *                        the call on their end, {@link Consumer#accept(Object)} should be\n     *                        called with {@link Boolean#TRUE}.\n     *\n     *                        Otherwise,{@link Consumer#accept(Object)} should  be called with\n     *                        {@link Boolean#FALSE}. However, Telecom will still disconnect\n     *                        the call and remove it from tracking.\n     ",
    "links" : [ "java.util.function.Consumer", "#FALSE", "#TRUE", "java.util.function.Consumer#accept(Object)" ]
  }, {
    "name" : " void onCallStreamingStarted(@NonNull Consumer<Boolean> wasCompleted)",
    "returnType" : "void",
    "comment" : "\n     * Telecom is informing the client to set the call in streaming.\n     *\n     * @param wasCompleted The {@link Consumer} to be completed. If the client can stream the\n     *                     call on their end, {@link Consumer#accept(Object)} should be called with\n     *                     {@link Boolean#TRUE}. Otherwise, {@link Consumer#accept(Object)}\n     *                     should be called with {@link Boolean#FALSE}.\n     ",
    "links" : [ "java.util.function.Consumer", "#FALSE", "#TRUE", "java.util.function.Consumer#accept(Object)" ]
  } ],
  "methodNames" : [ " void onSetActive(@NonNull Consumer<Boolean> wasCompleted)", " void onSetInactive(@NonNull Consumer<Boolean> wasCompleted)", " void onAnswer(@android.telecom.CallAttributes.CallType int videoState, @NonNull Consumer<Boolean> wasCompleted)", " void onDisconnect(@NonNull DisconnectCause disconnectCause, @NonNull Consumer<Boolean> wasCompleted)", " void onCallStreamingStarted(@NonNull Consumer<Boolean> wasCompleted)" ],
  "variableNames" : [ ]
}