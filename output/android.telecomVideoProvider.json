{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/RemoteConnection.java",
  "packageName" : "android.telecom",
  "className" : "VideoProvider",
  "comment" : "\n     * {@link RemoteConnection.VideoProvider} associated with a {@link RemoteConnection}.  Used to\n     * receive video related events and control the video associated with a\n     * {@link RemoteConnection}.\n     *\n     * @see Connection.VideoProvider\n     ",
  "variables" : [ {
    "name" : "mVideoCallbackDelegate",
    "type" : "IVideoCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoCallbackServant",
    "type" : "VideoCallbackServant",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoProviderBinder",
    "type" : "IVideoProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetSdkVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Set<Callback>",
    "comment" : "\n         * ConcurrentHashMap constructor params: 8 is initial table size, 0.9f is\n         * load factor before resizing, 1 means we only expect a single thread to\n         * access the map so make only a single shard\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerCallback(Callback l)",
    "returnType" : "void",
    "comment" : "\n         * Registers a callback to receive commands and state changes for video calls.\n         *\n         * @param l The video call callback.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(Callback l)",
    "returnType" : "void",
    "comment" : "\n         * Clears the video call callback set via {@link #registerCallback}.\n         *\n         * @param l The video call callback to clear.\n         ",
    "links" : [ "#registerCallback" ]
  }, {
    "name" : "public void setCamera(String cameraId)",
    "returnType" : "void",
    "comment" : "\n         * Sets the camera to be used for the outgoing video for the\n         * {@link RemoteConnection.VideoProvider}.\n         *\n         * @param cameraId The id of the camera (use ids as reported by\n         * {@link CameraManager#getCameraIdList()}).\n         * @see Connection.VideoProvider#onSetCamera(String)\n         ",
    "links" : [ "RemoteConnection.VideoProvider", "CameraManager#getCameraIdList" ]
  }, {
    "name" : "public void setPreviewSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface to be used for displaying a preview of what the user's camera is\n         * currently capturing for the {@link RemoteConnection.VideoProvider}.\n         *\n         * @param surface The {@link Surface}.\n         * @see Connection.VideoProvider#onSetPreviewSurface(Surface)\n         ",
    "links" : [ "RemoteConnection.VideoProvider", "Surface" ]
  }, {
    "name" : "public void setDisplaySurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface to be used for displaying the video received from the remote device for\n         * the {@link RemoteConnection.VideoProvider}.\n         *\n         * @param surface The {@link Surface}.\n         * @see Connection.VideoProvider#onSetDisplaySurface(Surface)\n         ",
    "links" : [ "RemoteConnection.VideoProvider", "Surface" ]
  }, {
    "name" : "public void setDeviceOrientation(int rotation)",
    "returnType" : "void",
    "comment" : "\n         * Sets the device orientation, in degrees, for the {@link RemoteConnection.VideoProvider}.\n         * Assumes that a standard portrait orientation of the device is 0 degrees.\n         *\n         * @param rotation The device orientation, in degrees.\n         * @see Connection.VideoProvider#onSetDeviceOrientation(int)\n         ",
    "links" : [ "RemoteConnection.VideoProvider" ]
  }, {
    "name" : "public void setZoom(float value)",
    "returnType" : "void",
    "comment" : "\n         * Sets camera zoom ratio for the {@link RemoteConnection.VideoProvider}.\n         *\n         * @param value The camera zoom ratio.\n         * @see Connection.VideoProvider#onSetZoom(float)\n         ",
    "links" : [ "RemoteConnection.VideoProvider" ]
  }, {
    "name" : "public void sendSessionModifyRequest(VideoProfile fromProfile, VideoProfile toProfile)",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to modify the properties of the current video session for the\n         * {@link RemoteConnection.VideoProvider}.\n         *\n         * @param fromProfile The video profile prior to the request.\n         * @param toProfile The video profile with the requested changes made.\n         * @see Connection.VideoProvider#onSendSessionModifyRequest(VideoProfile, VideoProfile)\n         ",
    "links" : [ "RemoteConnection.VideoProvider" ]
  }, {
    "name" : "public void sendSessionModifyResponse(VideoProfile responseProfile)",
    "returnType" : "void",
    "comment" : "\n         * Provides a response to a request to change the current call video session\n         * properties for the {@link RemoteConnection.VideoProvider}.\n         *\n         * @param responseProfile The response call video properties.\n         * @see Connection.VideoProvider#onSendSessionModifyResponse(VideoProfile)\n         ",
    "links" : [ "RemoteConnection.VideoProvider" ]
  }, {
    "name" : "public void requestCameraCapabilities()",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to retrieve the capabilities of the current camera for the\n         * {@link RemoteConnection.VideoProvider}.\n         *\n         * @see Connection.VideoProvider#onRequestCameraCapabilities()\n         ",
    "links" : [ "RemoteConnection.VideoProvider" ]
  }, {
    "name" : "public void requestCallDataUsage()",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to retrieve the data usage (in bytes) of the video portion of the\n         * {@link RemoteConnection} for the {@link RemoteConnection.VideoProvider}.\n         *\n         * @see Connection.VideoProvider#onRequestConnectionDataUsage()\n         ",
    "links" : [ "RemoteConnection", "RemoteConnection.VideoProvider" ]
  }, {
    "name" : "public void setPauseImage(Uri uri)",
    "returnType" : "void",
    "comment" : "\n         * Sets the {@link Uri} of an image to be displayed to the peer device when the video signal\n         * is paused, for the {@link RemoteConnection.VideoProvider}.\n         *\n         * @see Connection.VideoProvider#onSetPauseImage(Uri)\n         ",
    "links" : [ "Uri", "RemoteConnection.VideoProvider" ]
  } ],
  "variableNames" : [ "mVideoCallbackDelegate", "mVideoCallbackServant", "mVideoProviderBinder", "mCallingPackage", "mTargetSdkVersion", "mCallbacks" ],
  "methodNames" : [ "public void registerCallback(Callback l)", "public void unregisterCallback(Callback l)", "public void setCamera(String cameraId)", "public void setPreviewSurface(Surface surface)", "public void setDisplaySurface(Surface surface)", "public void setDeviceOrientation(int rotation)", "public void setZoom(float value)", "public void sendSessionModifyRequest(VideoProfile fromProfile, VideoProfile toProfile)", "public void sendSessionModifyResponse(VideoProfile responseProfile)", "public void requestCameraCapabilities()", "public void requestCallDataUsage()", "public void setPauseImage(Uri uri)" ]
}