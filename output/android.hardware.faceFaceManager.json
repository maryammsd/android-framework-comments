{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/face/FaceManager.java",
  "packageName" : "android.hardware.face",
  "className" : "FaceManager",
  "comment" : "\n * A class that coordinates access to the face authentication hardware.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ENROLL_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ACQUIRED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_AUTHENTICATION_SUCCEEDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_AUTHENTICATION_FAILED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_GET_FEATURE_COMPLETED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_FEATURE_COMPLETED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IFaceService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationCallback",
    "type" : "AuthenticationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnrollmentCallback",
    "type" : "EnrollmentCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalCallback",
    "type" : "RemovalCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSetFeatureCallback",
    "type" : "SetFeatureCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetFeatureCallback",
    "type" : "GetFeatureCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoObject",
    "type" : "CryptoObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalFace",
    "type" : "Face",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceReceiver",
    "type" : "IFaceServiceReceiver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Request authentication of a crypto object. This call operates the face recognition hardware\n     * and starts capturing images. It terminates when\n     * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or\n     * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param crypto   object associated with the call or null if none required.\n     * @param cancel   an object that can be used to cancel authentication\n     * @param flags    optional flags; should be 0\n     * @param callback an object to receive authentication events\n     * @param handler  an optional handler to handle callback events\n     * @throws IllegalArgumentException if the crypto operation is not supported or is not backed\n     *                                  by\n     *                                  <a href=\"{@docRoot}training/articles/keystore.html\">Android\n     *                                  Keystore facility</a>.\n     * @throws IllegalStateException    if the crypto primitive is not initialized.\n     * @hide\n     ",
    "links" : [ "AuthenticationCallback#onAuthenticationError", "AuthenticationCallback#onAuthenticationSucceeded" ]
  }, {
    "name" : "private void useHandler(Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Use the provided handler thread for events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Request authentication of a crypto object. This call operates the face recognition hardware\n     * and starts capturing images. It terminates when\n     * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or\n     * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param crypto   object associated with the call or null if none required.\n     * @param cancel   an object that can be used to cancel authentication\n     * @param flags    optional flags; should be 0\n     * @param callback an object to receive authentication events\n     * @param handler  an optional handler to handle callback events\n     * @param userId   userId to authenticate for\n     * @throws IllegalArgumentException if the crypto operation is not supported or is not backed\n     *                                  by\n     *                                  <a href=\"{@docRoot}training/articles/keystore.html\">Android\n     *                                  Keystore facility</a>.\n     * @throws IllegalStateException    if the crypto primitive is not initialized.\n     * @hide\n     ",
    "links" : [ "AuthenticationCallback#onAuthenticationError", "AuthenticationCallback#onAuthenticationSucceeded" ]
  }, {
    "name" : "public void enroll(int userId, byte[] token, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures)",
    "returnType" : "void",
    "comment" : "\n     * Request face authentication enrollment. This call operates the face authentication hardware\n     * and starts capturing images. Progress will be indicated by callbacks to the\n     * {@link EnrollmentCallback} object. It terminates when\n     * {@link EnrollmentCallback#onEnrollmentError(int, CharSequence)} or\n     * {@link EnrollmentCallback#onEnrollmentProgress(int) is called with remaining == 0, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param token    a unique token provided by a recent creation or verification of device\n     *                 credentials (e.g. pin, pattern or password).\n     * @param cancel   an object that can be used to cancel enrollment\n     * @param flags    optional flags\n     * @param userId   the user to whom this face will belong to\n     * @param callback an object to receive enrollment events\n     * @hide\n     ",
    "links" : [ "EnrollmentCallback", "EnrollmentCallback#onEnrollmentError", "EnrollmentCallback#onEnrollmentProgress" ]
  }, {
    "name" : "public long generateChallenge()",
    "returnType" : "long",
    "comment" : "\n     * Requests an auth token to tie sensitive operations to the confirmation of\n     * existing device credentials (e.g. pin/pattern/password).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int revokeChallenge()",
    "returnType" : "int",
    "comment" : "\n     * Invalidates the current auth token.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(int userId, int feature, boolean enabled, byte[] token, SetFeatureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getFeature(int userId, int feature, GetFeatureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void userActivity()",
    "returnType" : "void",
    "comment" : "\n     * Pokes the the driver to have it start looking for faces again.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActiveUser(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the active user. This is meant to be used to select the current profile for enrollment\n     * to allow separate enrolled faces for a work profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(Face face, int userId, RemovalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove given face template from face hardware and/or protected storage.\n     *\n     * @param face     the face item to remove\n     * @param userId   the user who this face belongs to\n     * @param callback an optional callback to verify that face templates have been\n     *                 successfully removed. May be null if no callback is required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Face> getEnrolledFaces(int userId)",
    "returnType" : "List<Face>",
    "comment" : "\n     * Obtain the enrolled face template.\n     *\n     * @return the current face item\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Face> getEnrolledFaces()",
    "returnType" : "List<Face>",
    "comment" : "\n     * Obtain the enrolled face template.\n     *\n     * @return the current face item\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if there is a face enrolled.\n     *\n     * @return true if a face is enrolled, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareDetected()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if face authentication sensor hardware is present and functional.\n     *\n     * @return true if hardware is present and functional, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLockoutResetCallback(final LockoutResetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCurrentUserId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelEnrollment()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelAuthentication(CryptoObject cryptoObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getErrorString(Context context, int errMsg, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getAcquiredString(Context context, int acquireInfo, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMappedAcquiredInfo(int acquireInfo, int vendorCode)",
    "returnType" : "int",
    "comment" : "\n     * Used so BiometricPrompt can map the face ones onto existing public constants.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendSetFeatureCompleted(boolean success, int feature)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendGetFeatureCompleted(boolean success, int feature, boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendRemovedResult(Face face, int remaining)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendErrorResult(long deviceId, int errMsgId, int vendorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendEnrollResult(Face face, int remaining)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAuthenticatedSucceeded(Face face, int userId, boolean isStrongBiometric)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAuthenticatedFailed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAcquiredResult(long deviceId, int acquireInfo, int vendorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "MSG_ENROLL_RESULT", "MSG_ACQUIRED", "MSG_AUTHENTICATION_SUCCEEDED", "MSG_AUTHENTICATION_FAILED", "MSG_ERROR", "MSG_REMOVED", "MSG_GET_FEATURE_COMPLETED", "MSG_SET_FEATURE_COMPLETED", "mService", "mContext", "mToken", "mAuthenticationCallback", "mEnrollmentCallback", "mRemovalCallback", "mSetFeatureCallback", "mGetFeatureCallback", "mCryptoObject", "mRemovalFace", "mHandler", "mServiceReceiver" ],
  "methodNames" : [ "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)", "private void useHandler(Handler handler)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler, int userId)", "public void enroll(int userId, byte[] token, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures)", "public long generateChallenge()", "public int revokeChallenge()", "public void setFeature(int userId, int feature, boolean enabled, byte[] token, SetFeatureCallback callback)", "public void getFeature(int userId, int feature, GetFeatureCallback callback)", "public void userActivity()", "public void setActiveUser(int userId)", "public void remove(Face face, int userId, RemovalCallback callback)", "public List<Face> getEnrolledFaces(int userId)", "public List<Face> getEnrolledFaces()", "public boolean hasEnrolledTemplates()", "public boolean hasEnrolledTemplates(int userId)", "public boolean isHardwareDetected()", "public void addLockoutResetCallback(final LockoutResetCallback callback)", "private int getCurrentUserId()", "private void cancelEnrollment()", "private void cancelAuthentication(CryptoObject cryptoObject)", "public static String getErrorString(Context context, int errMsg, int vendorCode)", "public static String getAcquiredString(Context context, int acquireInfo, int vendorCode)", "public static int getMappedAcquiredInfo(int acquireInfo, int vendorCode)", "private void sendSetFeatureCompleted(boolean success, int feature)", "private void sendGetFeatureCompleted(boolean success, int feature, boolean value)", "private void sendRemovedResult(Face face, int remaining)", "private void sendErrorResult(long deviceId, int errMsgId, int vendorCode)", "private void sendEnrollResult(Face face, int remaining)", "private void sendAuthenticatedSucceeded(Face face, int userId, boolean isStrongBiometric)", "private void sendAuthenticatedFailed()", "private void sendAcquiredResult(long deviceId, int acquireInfo, int vendorCode)" ]
}