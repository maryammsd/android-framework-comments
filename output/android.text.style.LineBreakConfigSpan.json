{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/style/LineBreakConfigSpan.java",
  "packageName" : "android.text.style",
  "className" : "LineBreakConfigSpan",
  "comment" : "\n * LineBreakSpan for changing line break style of the specific region of the text.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mLineBreakConfig",
    "type" : "LineBreakConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNoHyphenationConfig",
    "type" : "LineBreakConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNoBreakConfig",
    "type" : "LineBreakConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<LineBreakConfigSpan>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public LineBreakConfig getLineBreakConfig()",
    "returnType" : "LineBreakConfig",
    "comment" : "\n     * Gets an associated line break config.\n     * @return associated line break config.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LineBreakConfigSpan createNoBreakSpan()",
    "returnType" : "LineBreakConfigSpan",
    "comment" : "\n     * A specialized {@link LineBreakConfigSpan} that used for preventing line break.\n     *\n     * This is useful when you want to preserve some words in the same line.\n     * Note that even if this style is specified, the grapheme based line break is still performed\n     * for preventing clipping text.\n     *\n     * @see LineBreakConfigSpan\n     ",
    "links" : [ "android.text.style.LineBreakConfigSpan" ]
  }, {
    "name" : "public static LineBreakConfigSpan createNoHyphenationSpan()",
    "returnType" : "LineBreakConfigSpan",
    "comment" : "\n     * A specialized {@link LineBreakConfigSpan} that used for preventing hyphenation.\n     ",
    "links" : [ "android.text.style.LineBreakConfigSpan" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanTypeId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanTypeIdInternal()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelInternal(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public LineBreakConfig getLineBreakConfig()", "public static LineBreakConfigSpan createNoBreakSpan()", "public static LineBreakConfigSpan createNoHyphenationSpan()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int getSpanTypeId()", "public int getSpanTypeIdInternal()", "public void writeToParcelInternal(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "mLineBreakConfig", "sNoHyphenationConfig", "sNoBreakConfig", "CREATOR" ]
}