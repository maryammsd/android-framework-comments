{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/session/MediaSession.java",
  "packageName" : "android.media.session",
  "className" : "Callback",
  "comment" : "\n     * Receives media buttons, transport controls, and commands from controllers\n     * and the system. A callback may be set using {@link #setCallback}.\n     ",
  "links" : [ "#setCallback" ],
  "variables" : [ {
    "name" : "mSession",
    "type" : "MediaSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "CallbackMessageHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaPlayPauseKeyPending",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCommand(@NonNull String command, @Nullable Bundle args, @Nullable ResultReceiver cb)",
    "returnType" : "void",
    "comment" : "\n         * Called when a controller has sent a command to this session.\n         * The owner of the session may handle custom commands but is not\n         * required to.\n         *\n         * @param command The command name.\n         * @param args Optional parameters for the command, may be null.\n         * @param cb A result receiver to which a result may be sent by the command, may be null.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onMediaButtonEvent(@NonNull Intent mediaButtonIntent)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a media button is pressed and this session has the\n         * highest priority or a controller sends a media button event to the\n         * session. The default behavior will call the relevant method if the\n         * action for it was set.\n         * <p>\n         * The intent will be of type {@link Intent#ACTION_MEDIA_BUTTON} with a\n         * KeyEvent in {@link Intent#EXTRA_KEY_EVENT}\n         *\n         * @param mediaButtonIntent an intent containing the KeyEvent as an\n         *            extra\n         * @return True if the event was handled, false otherwise.\n         ",
    "links" : [ "android.app.PendingIntent#ACTION_MEDIA_BUTTON", "android.app.PendingIntent#EXTRA_KEY_EVENT" ]
  }, {
    "name" : "private void handleMediaPlayPauseKeySingleTapIfPending()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPrepare()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to prepare playback. During the preparation, a session should\n         * not hold audio focus in order to allow other sessions play seamlessly. The state of\n         * playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is\n         * done.\n         ",
    "links" : [ "android.media.session.PlaybackState#STATE_PAUSED" ]
  }, {
    "name" : "public void onPrepareFromMediaId(String mediaId, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to prepare for playing a specific mediaId that was provided\n         * by your app's {@link MediaBrowserService}. During the preparation, a session should not\n         * hold audio focus in order to allow other sessions play seamlessly. The state of playback\n         * should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done.\n         * The playback of the prepared content should start in the implementation of\n         * {@link #onPlay}. Override {@link #onPlayFromMediaId} to handle requests for starting\n         * playback without preparation.\n         ",
    "links" : [ "android.service.media.MediaBrowserService", "#onPlayFromMediaId", "android.media.session.PlaybackState#STATE_PAUSED", "#onPlay" ]
  }, {
    "name" : "public void onPrepareFromSearch(String query, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to prepare playback from a search query. An empty query\n         * indicates that the app may prepare any music. The implementation should attempt to make a\n         * smart choice about what to play. During the preparation, a session should not hold audio\n         * focus in order to allow other sessions play seamlessly. The state of playback should be\n         * updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback\n         * of the prepared content should start in the implementation of {@link #onPlay}. Override\n         * {@link #onPlayFromSearch} to handle requests for starting playback without preparation.\n         ",
    "links" : [ "android.media.session.PlaybackState#STATE_PAUSED", "#onPlayFromSearch", "#onPlay" ]
  }, {
    "name" : "public void onPrepareFromUri(Uri uri, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to prepare a specific media item represented by a URI.\n         * During the preparation, a session should not hold audio focus in order to allow\n         * other sessions play seamlessly. The state of playback should be updated to\n         * {@link PlaybackState#STATE_PAUSED} after the preparation is done.\n         * The playback of the prepared content should start in the implementation of\n         * {@link #onPlay}. Override {@link #onPlayFromUri} to handle requests\n         * for starting playback without preparation.\n         ",
    "links" : [ "android.media.session.PlaybackState#STATE_PAUSED", "#onPlay", "#onPlayFromUri" ]
  }, {
    "name" : "public void onPlay()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to begin playback.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPlayFromSearch(String query, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to begin playback from a search query. An\n         * empty query indicates that the app may play any music. The\n         * implementation should attempt to make a smart choice about what to\n         * play.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPlayFromMediaId(String mediaId, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to play a specific mediaId that was\n         * provided by your app's {@link MediaBrowserService}.\n         ",
    "links" : [ "android.service.media.MediaBrowserService" ]
  }, {
    "name" : "public void onPlayFromUri(Uri uri, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to play a specific media item represented by a URI.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSkipToQueueItem(long id)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to play an item with a given id from the\n         * play queue.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPause()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to pause playback.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSkipToNext()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to skip to the next media item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSkipToPrevious()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to skip to the previous media item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onFastForward()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to fast forward.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRewind()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to rewind.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onStop()",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to stop playback.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSeekTo(long pos)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle requests to seek to a specific position in ms.\n         *\n         * @param pos New position to move to, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSetRating(@NonNull Rating rating)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle the item being rated.\n         *\n         * @param rating\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSetPlaybackSpeed(float speed)",
    "returnType" : "void",
    "comment" : "\n         * Override to handle the playback speed change.\n         * To update the new playback speed, create a new {@link PlaybackState} by using {@link\n         * PlaybackState.Builder#setState(int, long, float)}, and set it with\n         * {@link #setPlaybackState(PlaybackState)}.\n         * <p>\n         * A value of {@code 1.0f} is the default playback value, and a negative value indicates\n         * reverse playback. The {@code speed} will not be equal to zero.\n         *\n         * @param speed the playback speed\n         * @see #setPlaybackState(PlaybackState)\n         * @see PlaybackState.Builder#setState(int, long, float)\n         ",
    "links" : [ "#setPlaybackState(PlaybackState)", "android.media.session.PlaybackState", "PlaybackState.Builder#setState(int" ]
  }, {
    "name" : "public void onCustomAction(@NonNull String action, @Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Called when a {@link MediaController} wants a {@link PlaybackState.CustomAction} to be\n         * performed.\n         *\n         * @param action The action that was originally sent in the\n         *               {@link PlaybackState.CustomAction}.\n         * @param extras Optional extras specified by the {@link MediaController}.\n         ",
    "links" : [ "PlaybackState.CustomAction", "android.media.session.MediaController" ]
  } ],
  "methodNames" : [ "public void onCommand(@NonNull String command, @Nullable Bundle args, @Nullable ResultReceiver cb)", "public boolean onMediaButtonEvent(@NonNull Intent mediaButtonIntent)", "private void handleMediaPlayPauseKeySingleTapIfPending()", "public void onPrepare()", "public void onPrepareFromMediaId(String mediaId, Bundle extras)", "public void onPrepareFromSearch(String query, Bundle extras)", "public void onPrepareFromUri(Uri uri, Bundle extras)", "public void onPlay()", "public void onPlayFromSearch(String query, Bundle extras)", "public void onPlayFromMediaId(String mediaId, Bundle extras)", "public void onPlayFromUri(Uri uri, Bundle extras)", "public void onSkipToQueueItem(long id)", "public void onPause()", "public void onSkipToNext()", "public void onSkipToPrevious()", "public void onFastForward()", "public void onRewind()", "public void onStop()", "public void onSeekTo(long pos)", "public void onSetRating(@NonNull Rating rating)", "public void onSetPlaybackSpeed(float speed)", "public void onCustomAction(@NonNull String action, @Nullable Bundle extras)" ],
  "variableNames" : [ "mSession", "mHandler", "mMediaPlayPauseKeyPending" ]
}