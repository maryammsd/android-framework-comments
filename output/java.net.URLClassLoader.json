{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/URLClassLoader.java",
  "packageName" : "java.net",
  "className" : "URLClassLoader",
  "comment" : "\n * This class loader is used to load classes and resources from a search\n * path of URLs referring to both JAR files and directories. Any URL that\n * ends with a '/' is assumed to refer to a directory. Otherwise, the URL\n * is assumed to refer to a JAR file which will be opened as needed.\n * <p>\n * The AccessControlContext of the thread that created the instance of\n * URLClassLoader will be used when subsequently loading classes and\n * resources.\n * <p>\n * The classes that are loaded are by default granted permission only to\n * access the URLs specified when the URLClassLoader was created.\n *\n * @author  David Connelly\n * @since   1.2\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ucp",
    "type" : "URLClassPath",
    "comment" : " The search path for classes and resources ",
    "links" : [ ]
  }, {
    "name" : "acc",
    "type" : "AccessControlContext",
    "comment" : " The context to be used when loading classes and resources ",
    "links" : [ ]
  }, {
    "name" : "closeables",
    "type" : "WeakHashMap<Closeable, Void>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public InputStream getResourceAsStream(String name)",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an input stream for reading the specified resource.\n     * If this loader is closed, then any resources opened by this method\n     * will be closed.\n     *\n     * <p> The search order is described in the documentation for {@link\n     * #getResource(String)}.  </p>\n     *\n     * @param  name\n     *         The resource name\n     *\n     * @return  An input stream for reading the resource, or {@code null}\n     *          if the resource could not be found\n     *\n     * @since  1.7\n     ",
    "links" : [ "#getResource(String)" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n    * Closes this URLClassLoader, so that it can no longer be used to load\n    * new classes or resources that are defined by this loader.\n    * Classes and resources defined by any of this loader's parents in the\n    * delegation hierarchy are still accessible. Also, any classes or resources\n    * that are already loaded, are still accessible.\n    * <p>\n    * In the case of jar: and file: URLs, it also closes any files\n    * that were opened by it. If another thread is loading a\n    * class when the {@code close} method is invoked, then the result of\n    * that load is undefined.\n    * <p>\n    * The method makes a best effort attempt to close all opened files,\n    * by catching {@link IOException}s internally. Unchecked exceptions\n    * and errors are not caught. Calling close on an already closed\n    * loader has no effect.\n    * <p>\n    * @exception IOException if closing any file opened by this class loader\n    * resulted in an IOException. Any such exceptions are caught internally.\n    * If only one is caught, then it is re-thrown. If more than one exception\n    * is caught, then the second and following exceptions are added\n    * as suppressed exceptions of the first one caught, which is then re-thrown.\n    *\n    * @exception SecurityException if a security manager is set, and it denies\n    *   {@link RuntimePermission}{@code (\"closeClassLoader\")}\n    *\n    * @since 1.7\n    ",
    "links" : [ "java.io.IOException", "RuntimePermission" ]
  }, {
    "name" : "protected void addURL(URL url)",
    "returnType" : "void",
    "comment" : "\n     * Appends the specified URL to the list of URLs to search for\n     * classes and resources.\n     * <p>\n     * If the URL specified is {@code null} or is already in the\n     * list of URLs, or if this loader is closed, then invoking this\n     * method has no effect.\n     *\n     * @param url the URL to be added to the search path of URLs\n     ",
    "links" : [ ]
  }, {
    "name" : "public URL[] getURLs()",
    "returnType" : "URL[]",
    "comment" : "\n     * Returns the search path of URLs for loading classes and resources.\n     * This includes the original list of URLs specified to the constructor,\n     * along with any URLs subsequently appended by the addURL() method.\n     * @return the search path of URLs for loading classes and resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Class<?> findClass(final String name) throws ClassNotFoundException",
    "returnType" : "Class<?>",
    "comment" : "\n     * Finds and loads the class with the specified name from the URL search\n     * path. Any URLs referring to JAR files are loaded and opened as needed\n     * until the class is found.\n     *\n     * @param name the name of the class\n     * @return the resulting class\n     * @exception ClassNotFoundException if the class could not be found,\n     *            or if the loader is closed.\n     * @exception NullPointerException if {@code name} is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Package getAndVerifyPackage(String pkgname, Manifest man, URL url)",
    "returnType" : "Package",
    "comment" : "\n     * Retrieve the package using the specified package name.\n     * If non-null, verify the package using the specified code\n     * source and manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void definePackageInternal(String pkgname, Manifest man, URL url)",
    "returnType" : "void",
    "comment" : " archive",
    "links" : [ ]
  }, {
    "name" : "private Class<?> defineClass(String name, Resource res) throws IOException",
    "returnType" : "Class<?>",
    "comment" : "\n     * Defines a Class using the class bytes obtained from the specified\n     * Resource. The resulting Class must be resolved before it can be\n     * used.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Package definePackage(String name, Manifest man, URL url) throws IllegalArgumentException",
    "returnType" : "Package",
    "comment" : "\n     * Defines a new package by name in this ClassLoader. The attributes\n     * contained in the specified Manifest will be used to obtain package\n     * version and sealing information. For sealed packages, the additional\n     * URL specifies the code source URL from which the package was loaded.\n     *\n     * @param name  the package name\n     * @param man   the Manifest containing package version and sealing\n     *              information\n     * @param url   the code source url for the package, or null if none\n     * @exception   IllegalArgumentException if the package name duplicates\n     *              an existing package either in this class loader or one\n     *              of its ancestors\n     * @return the newly defined Package object\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isSealed(String name, Manifest man)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified package name is sealed according to the\n     * given manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public URL findResource(final String name)",
    "returnType" : "URL",
    "comment" : "\n     * Finds the resource with the specified name on the URL search path.\n     *\n     * @param name the name of the resource\n     * @return a {@code URL} for the resource, or {@code null}\n     * if the resource could not be found, or if the loader is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<URL> findResources(final String name) throws IOException",
    "returnType" : "Enumeration<URL>",
    "comment" : "\n     * Returns an Enumeration of URLs representing all of the resources\n     * on the URL search path having the specified name.\n     *\n     * @param name the resource name\n     * @exception IOException if an I/O exception occurs\n     * @return an {@code Enumeration} of {@code URL}s\n     *         If the loader is closed, the Enumeration will be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected PermissionCollection getPermissions(CodeSource codesource)",
    "returnType" : "PermissionCollection",
    "comment" : "\n     * Returns the permissions for the given codesource object.\n     * The implementation of this method first calls super.getPermissions\n     * and then adds permissions based on the URL of the codesource.\n     * <p>\n     * If the protocol of this URL is \"jar\", then the permission granted\n     * is based on the permission that is required by the URL of the Jar\n     * file.\n     * <p>\n     * If the protocol is \"file\" and there is an authority component, then\n     * permission to connect to and accept connections from that authority\n     * may be granted. If the protocol is \"file\"\n     * and the path specifies a file, then permission to read that\n     * file is granted. If protocol is \"file\" and the path is\n     * a directory, permission is granted to read all files\n     * and (recursively) all files and subdirectories contained in\n     * that directory.\n     * <p>\n     * If the protocol is not \"file\", then permission\n     * to connect to and accept connections from the URL's host is granted.\n     * @param codesource the codesource\n     * @exception NullPointerException if {@code codesource} is {@code null}.\n     * @return the permissions granted to the codesource\n     ",
    "links" : [ ]
  }, {
    "name" : "public static URLClassLoader newInstance(final URL[] urls, final ClassLoader parent)",
    "returnType" : "URLClassLoader",
    "comment" : "\n     * Creates a new instance of URLClassLoader for the specified\n     * URLs and parent class loader. If a security manager is\n     * installed, the {@code loadClass} method of the URLClassLoader\n     * returned by this method will invoke the\n     * {@code SecurityManager.checkPackageAccess} method before\n     * loading the class.\n     *\n     * @param urls the URLs to search for classes and resources\n     * @param parent the parent class loader for delegation\n     * @exception  NullPointerException if {@code urls} is {@code null}.\n     * @return the resulting class loader\n     ",
    "links" : [ ]
  }, {
    "name" : "public static URLClassLoader newInstance(final URL[] urls)",
    "returnType" : "URLClassLoader",
    "comment" : "\n     * Creates a new instance of URLClassLoader for the specified\n     * URLs and default parent class loader. If a security manager is\n     * installed, the {@code loadClass} method of the URLClassLoader\n     * returned by this method will invoke the\n     * {@code SecurityManager.checkPackageAccess} before\n     * loading the class.\n     *\n     * @param urls the URLs to search for classes and resources\n     * @exception  NullPointerException if {@code urls} is {@code null}.\n     * @return the resulting class loader\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public InputStream getResourceAsStream(String name)", "public void close() throws IOException", "protected void addURL(URL url)", "public URL[] getURLs()", "protected Class<?> findClass(final String name) throws ClassNotFoundException", "private Package getAndVerifyPackage(String pkgname, Manifest man, URL url)", "private void definePackageInternal(String pkgname, Manifest man, URL url)", "private Class<?> defineClass(String name, Resource res) throws IOException", "protected Package definePackage(String name, Manifest man, URL url) throws IllegalArgumentException", "private boolean isSealed(String name, Manifest man)", "public URL findResource(final String name)", "public Enumeration<URL> findResources(final String name) throws IOException", "protected PermissionCollection getPermissions(CodeSource codesource)", "public static URLClassLoader newInstance(final URL[] urls, final ClassLoader parent)", "public static URLClassLoader newInstance(final URL[] urls)" ],
  "variableNames" : [ "ucp", "acc", "closeables" ]
}