{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/FastStringBuffer.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "FastStringBuffer",
  "comment" : "\n * Bare-bones, unsafe, fast string buffer. No thread-safety, no\n * parameter range checking, exposed fields. Note that in typical\n * applications, thread-safety of a StringBuffer is a somewhat\n * dubious concept in any case.\n * <p>\n * Note that Stree and DTM used a single FastStringBuffer as a string pool,\n * by recording start and length indices within this single buffer. This\n * minimizes heap overhead, but of course requires more work when retrieving\n * the data.\n * <p>\n * FastStringBuffer operates as a \"chunked buffer\". Doing so\n * reduces the need to recopy existing information when an append\n * exceeds the space available; we just allocate another chunk and\n * flow across to it. (The array of chunks may need to grow,\n * admittedly, but that's a much smaller object.) Some excess\n * recopying may arise when we extract Strings which cross chunk\n * boundaries; larger chunks make that less frequent.\n * <p>\n * The size values are parameterized, to allow tuning this code. In\n * theory, Result Tree Fragments might want to be tuned differently \n * from the main document's text. \n * <p>\n * %REVIEW% An experiment in self-tuning is\n * included in the code (using nested FastStringBuffers to achieve\n * variation in chunk sizes), but this implementation has proven to\n * be problematic when data may be being copied from the FSB into itself.\n * We should either re-architect that to make this safe (if possible)\n * or remove that code and clean up for performance/maintainability reasons.\n * <p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG_FORCE_INIT_BITS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_FORCE_FIXED_CHUNKSIZE",
    "type" : "boolean",
    "comment" : " that issue. For now, I have forced us into fixed-size mode.",
    "links" : [ ]
  }, {
    "name" : "SUPPRESS_LEADING_WS",
    "type" : "int",
    "comment" : " Manifest constant: Suppress leading whitespace.\n\t * This should be used when normalize-to-SAX is called for the first chunk of a\n\t * multi-chunk output, or one following unsuppressed whitespace in a previous\n\t * chunk.\n\t * @see #sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)\n\t ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESS_TRAILING_WS",
    "type" : "int",
    "comment" : " Manifest constant: Suppress trailing whitespace.\n\t * This should be used when normalize-to-SAX is called for the last chunk of a\n\t * multi-chunk output; it may have to be or'ed with SUPPRESS_LEADING_WS.\n\t ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESS_BOTH",
    "type" : "int",
    "comment" : " Manifest constant: Suppress both leading and trailing whitespace.\n\t * This should be used when normalize-to-SAX is called for a complete string.\n\t * (I'm not wild about the name of this one. Ideas welcome.)\n\t * @see #sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)\n\t ",
    "links" : [ ]
  }, {
    "name" : "CARRY_WS",
    "type" : "int",
    "comment" : " Manifest constant: Carry trailing whitespace of one chunk as leading \n\t * whitespace of the next chunk. Used internally; I don't see any reason\n\t * to make it public right now.\n\t ",
    "links" : [ ]
  }, {
    "name" : "m_chunkBits",
    "type" : "int",
    "comment" : "\n   * Field m_chunkBits sets our chunking strategy, by saying how many\n   * bits of index can be used within a single chunk before flowing over\n   * to the next chunk. For example, if m_chunkbits is set to 15, each\n   * chunk can contain up to 2^15 (32K) characters  \n   ",
    "links" : [ ]
  }, {
    "name" : "m_maxChunkBits",
    "type" : "int",
    "comment" : "\n   * Field m_maxChunkBits affects our chunk-growth strategy, by saying what\n   * the largest permissible chunk size is in this particular FastStringBuffer\n   * hierarchy. \n   ",
    "links" : [ ]
  }, {
    "name" : "m_rebundleBits",
    "type" : "int",
    "comment" : "\n   * Field m_rechunkBits affects our chunk-growth strategy, by saying how\n   * many chunks should be allocated at one size before we encapsulate them\n   * into the first chunk of the next size up. For example, if m_rechunkBits\n   * is set to 3, then after 8 chunks at a given size we will rebundle\n   * them as the first element of a FastStringBuffer using a chunk size\n   * 8 times larger (chunkBits shifted left three bits).\n   ",
    "links" : [ ]
  }, {
    "name" : "m_chunkSize",
    "type" : "int",
    "comment" : " =1<<(m_chunkBits-1);",
    "links" : [ ]
  }, {
    "name" : "m_chunkMask",
    "type" : "int",
    "comment" : " =m_chunkSize-1;",
    "links" : [ ]
  }, {
    "name" : "m_array",
    "type" : "char[][]",
    "comment" : "\n   * Field m_array holds the string buffer's text contents, using an\n   * array-of-arrays. Note that this array, and the arrays it contains, may be\n   * reallocated when necessary in order to allow the buffer to grow;\n   * references to them should be considered to be invalidated after any\n   * append. However, the only time these arrays are directly exposed\n   * is in the sendSAXcharacters call.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_lastChunk",
    "type" : "int",
    "comment" : "\n   * Field m_lastChunk is an index into m_array[], pointing to the last\n   * chunk of the Chunked Array currently in use. Note that additional\n   * chunks may actually be allocated, eg if the FastStringBuffer had\n   * previously been truncated or if someone issued an ensureSpace request.\n   * <p>\n   * The insertion point for append operations is addressed by the combination\n   * of m_lastChunk and m_firstFree.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_firstFree",
    "type" : "int",
    "comment" : "\n   * Field m_firstFree is an index into m_array[m_lastChunk][], pointing to\n   * the first character in the Chunked Array which is not part of the\n   * FastStringBuffer's current content. Since m_array[][] is zero-based,\n   * the length of that content can be calculated as\n   * (m_lastChunk<<m_chunkBits) + m_firstFree \n   ",
    "links" : [ ]
  }, {
    "name" : "m_innerFSB",
    "type" : "FastStringBuffer",
    "comment" : "\n   * Field m_innerFSB, when non-null, is a FastStringBuffer whose total\n   * length equals m_chunkSize, and which replaces m_array[0]. This allows\n   * building a hierarchy of FastStringBuffers, where early appends use\n   * a smaller chunkSize (for less wasted memory overhead) but later\n   * ones use a larger chunkSize (for less heap activity overhead).\n   ",
    "links" : [ ]
  }, {
    "name" : "SINGLE_SPACE",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list. Synonym for length().\n   *\n   * @return the number of characters in the FastStringBuffer's content.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int length()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list. Synonym for size().\n   *\n   * @return the number of characters in the FastStringBuffer's content.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void reset()",
    "returnType" : "void",
    "comment" : "\n   * Discard the content of the FastStringBuffer, and most of the memory\n   * that was allocated by it, restoring the initial state. Note that this\n   * may eventually be different from setLength(0), which see.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setLength(int l)",
    "returnType" : "void",
    "comment" : "\n   * Directly set how much of the FastStringBuffer's storage is to be\n   * considered part of its content. This is a fast but hazardous\n   * operation. It is not protected against negative values, or values\n   * greater than the amount of storage currently available... and even\n   * if additional storage does exist, its contents are unpredictable.\n   * The only safe use for our setLength() is to truncate the FastStringBuffer\n   * to a shorter string.\n   *\n   * @param l New length. If l<0 or l>=getLength(), this operation will\n   * not report an error but future operations will almost certainly fail.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void setLength(int l, FastStringBuffer rootFSB)",
    "returnType" : "void",
    "comment" : "\n   * Subroutine for the public setLength() method. Deals with the fact\n   * that truncation may require restoring one of the innerFSBs\n   *\n   * NEEDSDOC @param l\n   * NEEDSDOC @param rootFSB\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "\n   * Note that this operation has been somewhat deoptimized by the shift to a\n   * chunked array, as there is no factory method to produce a String object\n   * directly from an array of arrays and hence a double copy is needed.\n   * By using ensureCapacity we hope to minimize the heap overhead of building\n   * the intermediate StringBuffer.\n   * <p>\n   * (It really is a pity that Java didn't design String as a final subclass\n   * of MutableString, rather than having StringBuffer be a separate hierarchy.\n   * We'd avoid a <strong>lot</strong> of double-buffering.)\n   *\n   * @return the contents of the FastStringBuffer as a standard Java string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void append(char value)",
    "returnType" : "void",
    "comment" : "\n   * Append a single character onto the FastStringBuffer, growing the\n   * storage if necessary.\n   * <p>\n   * NOTE THAT after calling append(), previously obtained\n   * references to m_array[][] may no longer be valid....\n   * though in fact they should be in this instance.\n   *\n   * @param value character to be appended.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void append(String value)",
    "returnType" : "void",
    "comment" : "\n   * Append the contents of a String onto the FastStringBuffer,\n   * growing the storage if necessary.\n   * <p>\n   * NOTE THAT after calling append(), previously obtained\n   * references to m_array[] may no longer be valid.\n   *\n   * @param value String whose contents are to be appended.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void append(StringBuffer value)",
    "returnType" : "void",
    "comment" : "\n   * Append the contents of a StringBuffer onto the FastStringBuffer,\n   * growing the storage if necessary.\n   * <p>\n   * NOTE THAT after calling append(), previously obtained\n   * references to m_array[] may no longer be valid.\n   *\n   * @param value StringBuffer whose contents are to be appended.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void append(char[] chars, int start, int length)",
    "returnType" : "void",
    "comment" : "\n   * Append part of the contents of a Character Array onto the\n   * FastStringBuffer,  growing the storage if necessary.\n   * <p>\n   * NOTE THAT after calling append(), previously obtained\n   * references to m_array[] may no longer be valid.\n   *\n   * @param chars character array from which data is to be copied\n   * @param start offset in chars of first character to be copied,\n   * zero-based.\n   * @param length number of characters to be copied\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void append(FastStringBuffer value)",
    "returnType" : "void",
    "comment" : "\n   * Append the contents of another FastStringBuffer onto\n   * this FastStringBuffer, growing the storage if necessary.\n   * <p>\n   * NOTE THAT after calling append(), previously obtained\n   * references to m_array[] may no longer be valid.\n   *\n   * @param value FastStringBuffer whose contents are\n   * to be appended.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWhitespace(int start, int length)",
    "returnType" : "boolean",
    "comment" : "\n   * @return true if the specified range of characters are all whitespace,\n   * as defined by XMLCharacterRecognizer.\n   * <p>\n   * CURRENTLY DOES NOT CHECK FOR OUT-OF-RANGE.\n   *\n   * @param start Offset of first character in the range.\n   * @param length Number of characters to send.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getString(int start, int length)",
    "returnType" : "String",
    "comment" : "\n   * @param start Offset of first character in the range.\n   * @param length Number of characters to send.\n   * @return a new String object initialized from the specified range of\n   * characters.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String getOneChunkString(int startChunk, int startColumn, int length)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StringBuffer getString(StringBuffer sb, int start, int length)",
    "returnType" : "StringBuffer",
    "comment" : "\n   * @param sb StringBuffer to be appended to\n   * @param start Offset of first character in the range.\n   * @param length Number of characters to send.\n   * @return sb with the requested text appended to it\n   ",
    "links" : [ ]
  }, {
    "name" : " StringBuffer getString(StringBuffer sb, int startChunk, int startColumn, int length)",
    "returnType" : "StringBuffer",
    "comment" : "\n   * Internal support for toString() and getString().\n   * PLEASE NOTE SIGNATURE CHANGE from earlier versions; it now appends into\n   * and returns a StringBuffer supplied by the caller. This simplifies\n   * m_innerFSB support.\n   * <p>\n   * Note that this operation has been somewhat deoptimized by the shift to a\n   * chunked array, as there is no factory method to produce a String object\n   * directly from an array of arrays and hence a double copy is needed.\n   * By presetting length we hope to minimize the heap overhead of building\n   * the intermediate StringBuffer.\n   * <p>\n   * (It really is a pity that Java didn't design String as a final subclass\n   * of MutableString, rather than having StringBuffer be a separate hierarchy.\n   * We'd avoid a <strong>lot</strong> of double-buffering.)\n   *\n   *\n   * @param sb\n   * @param startChunk\n   * @param startColumn\n   * @param length\n   * \n   * @return the contents of the FastStringBuffer as a standard Java string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int pos)",
    "returnType" : "char",
    "comment" : "\n   * Get a single character from the string buffer.\n   *\n   *\n   * @param pos character position requested.\n   * @return A character from the requested position.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void sendSAXcharacters(org.xml.sax.ContentHandler ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Sends the specified range of characters as one or more SAX characters()\n   * events.\n   * Note that the buffer reference passed to the ContentHandler may be\n   * invalidated if the FastStringBuffer is edited; it's the user's\n   * responsibility to manage access to the FastStringBuffer to prevent this\n   * problem from arising.\n   * <p>\n   * Note too that there is no promise that the output will be sent as a\n   * single call. As is always true in SAX, one logical string may be split\n   * across multiple blocks of memory and hence delivered as several\n   * successive events.\n   *\n   * @param ch SAX ContentHandler object to receive the event.\n   * @param start Offset of first character in the range.\n   * @param length Number of characters to send.\n   * @exception org.xml.sax.SAXException may be thrown by handler's\n   * characters() method.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "int",
    "comment" : "\n   * Sends the specified range of characters as one or more SAX characters()\n   * events, normalizing the characters according to XSLT rules.\n   *\n   * @param ch SAX ContentHandler object to receive the event.\n   * @param start Offset of first character in the range.\n   * @param length Number of characters to send.\n   * @return normalization status to apply to next chunk (because we may\n   * have been called recursively to process an inner FSB):\n   * <dl>\n   * <dt>0</dt>\n   * <dd>if this output did not end in retained whitespace, and thus whitespace\n   * at the start of the following chunk (if any) should be converted to a\n   * single space.\n   * <dt>SUPPRESS_LEADING_WS</dt>\n   * <dd>if this output ended in retained whitespace, and thus whitespace\n   * at the start of the following chunk (if any) should be completely\n   * suppressed.</dd>\n   * </dd>\n   * </dl>\n   * @exception org.xml.sax.SAXException may be thrown by handler's\n   * characters() method.\n   ",
    "links" : [ ]
  }, {
    "name" : " static int sendNormalizedSAXcharacters(char[] ch, int start, int length, org.xml.sax.ContentHandler handler, int edgeTreatmentFlags) throws org.xml.sax.SAXException",
    "returnType" : "int",
    "comment" : "\n   * Internal method to directly normalize and dispatch the character array.\n   * This version is aware of the fact that it may be called several times\n   * in succession if the data is made up of multiple \"chunks\", and thus\n   * must actively manage the handling of leading and trailing whitespace.\n   * \n   * Note: The recursion is due to the possible recursion of inner FSBs.\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @param handler SAX ContentHandler object to receive the event.\n   * @param edgeTreatmentFlags How leading/trailing spaces should be handled. \n   * This is a bitfield contining two flags, bitwise-ORed together:\n   * <dl>\n   * <dt>SUPPRESS_LEADING_WS</dt>\n   * <dd>When false, causes leading whitespace to be converted to a single\n   * space; when true, causes it to be discarded entirely.\n   * Should be set TRUE for the first chunk, and (in multi-chunk output)\n   * whenever the previous chunk ended in retained whitespace.</dd>\n   * <dt>SUPPRESS_TRAILING_WS</dt>\n   * <dd>When false, causes trailing whitespace to be converted to a single\n   * space; when true, causes it to be discarded entirely.\n   * Should be set TRUE for the last or only chunk.\n   * </dd>\n   * </dl>\n   * @return normalization status, as in the edgeTreatmentFlags parameter:\n   * <dl>\n   * <dt>0</dt>\n   * <dd>if this output did not end in retained whitespace, and thus whitespace\n   * at the start of the following chunk (if any) should be converted to a\n   * single space.\n   * <dt>SUPPRESS_LEADING_WS</dt>\n   * <dd>if this output ended in retained whitespace, and thus whitespace\n   * at the start of the following chunk (if any) should be completely\n   * suppressed.</dd>\n   * </dd>\n   * </dl>\n   *\n   * \n   * @exception org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static void sendNormalizedSAXcharacters(char[] ch, int start, int length, org.xml.sax.ContentHandler handler) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly normalize and dispatch the character array.\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @param handler SAX ContentHandler object to receive the event.\n   * @exception org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void sendSAXComment(org.xml.sax.ext.LexicalHandler ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Sends the specified range of characters as sax Comment.\n   * <p>\n   * Note that, unlike sendSAXcharacters, this has to be done as a single \n   * call to LexicalHandler#comment.\n   *\n   * @param ch SAX LexicalHandler object to receive the event.\n   * @param start Offset of first character in the range.\n   * @param length Number of characters to send.\n   * @exception org.xml.sax.SAXException may be thrown by handler's\n   * characters() method.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",
    "returnType" : "void",
    "comment" : "\n   * Copies characters from this string into the destination character\n   * array.\n   *\n   * @param      srcBegin   index of the first character in the string\n   *                        to copy.\n   * @param      srcEnd     index after the last character in the string\n   *                        to copy.\n   * @param      dst        the destination array.\n   * @param      dstBegin   the start offset in the destination array.\n   * @exception IndexOutOfBoundsException If any of the following\n   *            is true:\n   *            <ul><li><code>srcBegin</code> is negative.\n   *            <li><code>srcBegin</code> is greater than <code>srcEnd</code>\n   *            <li><code>srcEnd</code> is greater than the length of this\n   *                string\n   *            <li><code>dstBegin</code> is negative\n   *            <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than\n   *                <code>dst.length</code></ul>\n   * @exception NullPointerException if <code>dst</code> is <code>null</code>\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int size()", "public final int length()", "public final void reset()", "public final void setLength(int l)", "private final void setLength(int l, FastStringBuffer rootFSB)", "public final String toString()", "public final void append(char value)", "public final void append(String value)", "public final void append(StringBuffer value)", "public final void append(char[] chars, int start, int length)", "public final void append(FastStringBuffer value)", "public boolean isWhitespace(int start, int length)", "public String getString(int start, int length)", "protected String getOneChunkString(int startChunk, int startColumn, int length)", " StringBuffer getString(StringBuffer sb, int start, int length)", " StringBuffer getString(StringBuffer sb, int startChunk, int startColumn, int length)", "public char charAt(int pos)", "public void sendSAXcharacters(org.xml.sax.ContentHandler ch, int start, int length) throws org.xml.sax.SAXException", "public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler ch, int start, int length) throws org.xml.sax.SAXException", " static int sendNormalizedSAXcharacters(char[] ch, int start, int length, org.xml.sax.ContentHandler handler, int edgeTreatmentFlags) throws org.xml.sax.SAXException", "public static void sendNormalizedSAXcharacters(char[] ch, int start, int length, org.xml.sax.ContentHandler handler) throws org.xml.sax.SAXException", "public void sendSAXComment(org.xml.sax.ext.LexicalHandler ch, int start, int length) throws org.xml.sax.SAXException", "private void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)" ],
  "variableNames" : [ "DEBUG_FORCE_INIT_BITS", "DEBUG_FORCE_FIXED_CHUNKSIZE", "SUPPRESS_LEADING_WS", "SUPPRESS_TRAILING_WS", "SUPPRESS_BOTH", "CARRY_WS", "m_chunkBits", "m_maxChunkBits", "m_rebundleBits", "m_chunkSize", "m_chunkMask", "m_array", "m_lastChunk", "m_firstFree", "m_innerFSB", "SINGLE_SPACE" ]
}