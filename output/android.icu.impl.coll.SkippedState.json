{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationIterator.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "SkippedState",
  "comment" : " We create a state object on first use and keep it around deactivated between uses.",
  "links" : [ ],
  "variables" : [ {
    "name" : "oldBuffer",
    "type" : "StringBuilder",
    "comment" : " After that discontiguous contraction was completed, we start reading them from here.",
    "links" : [ ]
  }, {
    "name" : "newBuffer",
    "type" : "StringBuilder",
    "comment" : " These might have been read from the normal text or from the oldBuffer.",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : " or counter for how many code points have been read beyond oldBuffer (pos-oldBuffer.length()).",
    "links" : [ ]
  }, {
    "name" : "skipLengthAtMatch",
    "type" : "int",
    "comment" : " When a partial match fails, we back out skipped and partial-matching input characters.",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "CharsTrie.State",
    "comment" : " so that we can skip it and try the next one.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int next()",
    "returnType" : "int",
    "comment" : " Requires hasNext().",
    "links" : [ ]
  }, {
    "name" : " void incBeyond()",
    "returnType" : "void",
    "comment" : " Accounts for one more input code point read beyond the end of the marks buffer.",
    "links" : [ ]
  }, {
    "name" : " int backwardNumCodePoints(int n)",
    "returnType" : "int",
    "comment" : " that need to be backtracked through normal input.",
    "links" : [ ]
  }, {
    "name" : " void setFirstSkipped(int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void skip(int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void recordMatch()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void replaceMatch()",
    "returnType" : "void",
    "comment" : " Replaces the characters we consumed with the newly skipped ones.",
    "links" : [ ]
  }, {
    "name" : " void saveTrieState(CharsTrie trie)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void resetToTrieState(CharsTrie trie)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void clear()", " boolean isEmpty()", " boolean hasNext()", " int next()", " void incBeyond()", " int backwardNumCodePoints(int n)", " void setFirstSkipped(int c)", " void skip(int c)", " void recordMatch()", " void replaceMatch()", " void saveTrieState(CharsTrie trie)", " void resetToTrieState(CharsTrie trie)" ],
  "variableNames" : [ "oldBuffer", "newBuffer", "pos", "skipLengthAtMatch", "state" ]
}