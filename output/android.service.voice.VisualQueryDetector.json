{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/VisualQueryDetector.java",
  "packageName" : "android.service.voice",
  "className" : "VisualQueryDetector",
  "comment" : "\n * Manages VisualQueryDetectionService.\n *\n * This detector provides necessary functionalities to initialize, start, update and destroy a\n * {@link VisualQueryDetectionService}.\n *\n * @hide\n *",
  "links" : [ "android.service.voice.VisualQueryDetectionService" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SETTINGS_DISABLE_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SETTINGS_ENABLE_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManagerService",
    "type" : "IVoiceInteractionManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitializationDelegate",
    "type" : "VisualQueryDetectorInitializationDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveAccessibilityListenerWrapper",
    "type" : "AccessibilityDetectionEnabledListenerWrapper",
    "comment" : " Used to manage the internal mapping of exposed listener API and internal aidl impl",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the {@link VisualQueryDetectionService} by passing configurations and read-only\n     * data.\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService" ]
  }, {
    "name" : "public void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * Set configuration and pass read-only data to {@link VisualQueryDetectionService}.\n     *\n     * @see HotwordDetector#updateState(PersistableBundle, SharedMemory)\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService" ]
  }, {
    "name" : "public boolean startRecognition()",
    "returnType" : "boolean",
    "comment" : "\n     * On calling this method, {@link VisualQueryDetectionService\n     * #onStartDetection(VisualQueryDetectionService.Callback)} will be called to start using\n     * visual signals such as camera frames and microphone audio to perform detection. When user\n     * attention is captured and the {@link VisualQueryDetectionService} streams queries,\n     * {@link VisualQueryDetector.Callback#onQueryDetected(String)} is called to control the\n     * behavior of handling {@code transcribedText}. When the query streaming is finished,\n     * {@link VisualQueryDetector.Callback#onQueryFinished()} is called. If the current streamed\n     * query is invalid, {@link VisualQueryDetector.Callback#onQueryRejected()} is called to abandon\n     * the streamed query.\n     *\n     * @see HotwordDetector#startRecognition()\n     ",
    "links" : [ "VisualQueryDetector.Callback#onQueryRejected()", "VisualQueryDetector.Callback#onQueryFinished()", "android.service.voice.VisualQueryDetectionService#onStartDetection(VisualQueryDetectionService.Callback)", "android.service.voice.VisualQueryDetectionService", "VisualQueryDetector.Callback#onQueryDetected(String)" ]
  }, {
    "name" : "public boolean stopRecognition()",
    "returnType" : "boolean",
    "comment" : "\n     * Stops visual query detection recognition.\n     *\n     * @see HotwordDetector#stopRecognition()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroy the current detector.\n     *\n     * @see HotwordDetector#destroy()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilityDetectionEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the binary value that controls the egress of accessibility data from\n     * {@link VisualQueryDetectedResult#setAccessibilityDetectionData(byte[])} is enabled.\n     *\n     * @return boolean value denoting if the setting is on. Default is {@code false}.\n     * @hide\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectedResult#setAccessibilityDetectionData(byte" ]
  }, {
    "name" : "public void setAccessibilityDetectionEnabledListener(@NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener subscribing to the value of the system setting that controls the egress of\n     * accessibility data from\n     * {@link VisualQueryDetectedResult#setAccessibilityDetectionData(byte[])} is enabled.\n     *\n     * Only one listener can be set at a time. The listener set must be unset with\n     * {@link clearAccessibilityDetectionEnabledListener(Consumer<Boolean>)}\n     * in order to set a new listener. Otherwise, this method will throw a\n     * {@link IllegalStateException}.\n     *\n     * @param listener Listener of type {@code Consumer<Boolean>} to subscribe to the value update.\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "android.service.voice.VisualQueryDetectedResult#setAccessibilityDetectionData(byte", "clearAccessibilityDetectionEnabledListener(Consumer" ]
  }, {
    "name" : "public void clearAccessibilityDetectionEnabledListener()",
    "returnType" : "void",
    "comment" : "\n     * Clear the listener that has been set with\n     * {@link setAccessibilityDetectionEnabledListener(Consumer<Boolean>)} such that when the value\n     * of the setting that controls the egress of accessibility data is changed the listener gets\n     * notified.\n     *\n     * If there is not listener that has been registered, the call to this method will lead to a\n     * {@link IllegalStateException}.\n     *\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "setAccessibilityDetectionEnabledListener(Consumer" ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public HotwordDetector getInitializationDelegate()",
    "returnType" : "HotwordDetector",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void registerOnDestroyListener(Consumer<AbstractDetector> onDestroyListener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", "public void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", "public boolean startRecognition()", "public boolean stopRecognition()", "public void destroy()", "public boolean isAccessibilityDetectionEnabled()", "public void setAccessibilityDetectionEnabledListener(@NonNull Consumer<Boolean> listener)", "public void clearAccessibilityDetectionEnabledListener()", "public void dump(String prefix, PrintWriter pw)", "public HotwordDetector getInitializationDelegate()", " void registerOnDestroyListener(Consumer<AbstractDetector> onDestroyListener)" ],
  "variableNames" : [ "TAG", "DEBUG", "SETTINGS_DISABLE_BIT", "SETTINGS_ENABLE_BIT", "mCallback", "mExecutor", "mContext", "mManagerService", "mInitializationDelegate", "mAttributionTag", "mActiveAccessibilityListenerWrapper" ]
}