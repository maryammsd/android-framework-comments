{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/prefs/XmlSupport.java",
  "packageName" : "java.util.prefs",
  "className" : "XmlSupport",
  "comment" : "\n * XML Support for java.util.prefs. Methods to import and export preference\n * nodes and subtrees.\n *\n * @author  Josh Bloch and Mark Reinhold\n * @see     Preferences\n * @since   1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PREFS_DTD_URI",
    "type" : "String",
    "comment" : " The required DTD URI for exported preferences",
    "links" : [ ]
  }, {
    "name" : "PREFS_DTD",
    "type" : "String",
    "comment" : " The actual DTD corresponding to the URI",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_XML_VERSION",
    "type" : "String",
    "comment" : "\n     * Version number for the format exported preferences files.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAP_XML_VERSION",
    "type" : "String",
    "comment" : "\n     * Version number for the internal map files.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void export(OutputStream os, final Preferences p, boolean subTree) throws IOException, BackingStoreException",
    "returnType" : "void",
    "comment" : "\n     * Export the specified preferences node and, if subTree is true, all\n     * subnodes, to the specified output stream.  Preferences are exported as\n     * an XML document conforming to the definition in the Preferences spec.\n     *\n     * @throws IOException if writing to the specified output stream\n     *         results in an <tt>IOException</tt>.\n     * @throws BackingStoreException if preference data cannot be read from\n     *         backing store.\n     * @throws IllegalStateException if this node (or an ancestor) has been\n     *         removed with the {@link Preferences#removeNode()} method.\n     ",
    "links" : [ "java.util.prefs.Preferences#removeNode()" ]
  }, {
    "name" : "private static void putPreferencesInXml(Element elt, Document doc, Preferences prefs, boolean subTree) throws BackingStoreException",
    "returnType" : "void",
    "comment" : "\n     * Put the preferences in the specified Preferences node into the\n     * specified XML element which is assumed to represent a node\n     * in the specified XML document which is assumed to conform to\n     * PREFS_DTD.  If subTree is true, create children of the specified\n     * XML node conforming to all of the children of the specified\n     * Preferences node and recurse.\n     *\n     * @throws BackingStoreException if it is not possible to read\n     *         the preferences or children out of the specified\n     *         preferences node.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void importPreferences(InputStream is) throws IOException, InvalidPreferencesFormatException",
    "returnType" : "void",
    "comment" : "\n     * Import preferences from the specified input stream, which is assumed\n     * to contain an XML document in the format described in the Preferences\n     * spec.\n     *\n     * @throws IOException if reading from the specified output stream\n     *         results in an <tt>IOException</tt>.\n     * @throws InvalidPreferencesFormatException Data on input stream does not\n     *         constitute a valid XML document with the mandated document type.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Document createPrefsDoc(String qname)",
    "returnType" : "Document",
    "comment" : "\n     * Create a new prefs XML document.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Document loadPrefsDoc(InputStream in) throws SAXException, IOException",
    "returnType" : "Document",
    "comment" : "\n     * Load an XML document from specified input stream, which must\n     * have the requisite DTD URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void writeDoc(Document doc, OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write XML document to the specified output stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static NodeList elementNodesOf(NodeList xmlKids)",
    "returnType" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void ImportSubtree(Preferences prefsNode, Element xmlNode)",
    "returnType" : "void",
    "comment" : "\n     * Recursively traverse the specified preferences node and store\n     * the described preferences into the system or current user\n     * preferences tree, as appropriate.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void ImportPrefs(Preferences prefsNode, Element map)",
    "returnType" : "void",
    "comment" : "\n     * Import the preferences described by the specified XML element\n     * (a map from a preferences document) into the specified\n     * preferences node.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void exportMap(OutputStream os, Map<String, String> map) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Export the specified Map<String,String> to a map document on\n     * the specified OutputStream as per the prefs DTD.  This is used\n     * as the internal (undocumented) format for FileSystemPrefs.\n     *\n     * @throws IOException if writing to the specified output stream\n     *         results in an <tt>IOException</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void importMap(InputStream is, Map<String, String> m) throws IOException, InvalidPreferencesFormatException",
    "returnType" : "void",
    "comment" : "\n     * Import Map from the specified input stream, which is assumed\n     * to contain a map document as per the prefs DTD.  This is used\n     * as the internal (undocumented) format for FileSystemPrefs.  The\n     * key-value pairs specified in the XML document will be put into\n     * the specified Map.  (If this Map is empty, it will contain exactly\n     * the key-value pairs int the XML-document when this method returns.)\n     *\n     * @throws IOException if reading from the specified output stream\n     *         results in an <tt>IOException</tt>.\n     * @throws InvalidPreferencesFormatException Data on input stream does not\n     *         constitute a valid XML document with the mandated document type.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static void export(OutputStream os, final Preferences p, boolean subTree) throws IOException, BackingStoreException", "private static void putPreferencesInXml(Element elt, Document doc, Preferences prefs, boolean subTree) throws BackingStoreException", " static void importPreferences(InputStream is) throws IOException, InvalidPreferencesFormatException", "private static Document createPrefsDoc(String qname)", "private static Document loadPrefsDoc(InputStream in) throws SAXException, IOException", "private static final void writeDoc(Document doc, OutputStream out) throws IOException", "private static NodeList elementNodesOf(NodeList xmlKids)", "private static void ImportSubtree(Preferences prefsNode, Element xmlNode)", "private static void ImportPrefs(Preferences prefsNode, Element map)", " static void exportMap(OutputStream os, Map<String, String> map) throws IOException", " static void importMap(InputStream is, Map<String, String> m) throws IOException, InvalidPreferencesFormatException" ],
  "variableNames" : [ "PREFS_DTD_URI", "PREFS_DTD", "EXTERNAL_XML_VERSION", "MAP_XML_VERSION" ]
}