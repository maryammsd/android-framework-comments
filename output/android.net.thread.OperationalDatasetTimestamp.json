{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/thread/OperationalDatasetTimestamp.java",
  "packageName" : "android.net.thread",
  "className" : "OperationalDatasetTimestamp",
  "comment" : "\n * The timestamp of Thread Operational Dataset.\n *\n * @see ActiveOperationalDataset\n * @see PendingOperationalDataset\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LENGTH_TIMESTAMP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TICKS_UPPER_BOUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTicks",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAuthoritativeSource",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static OperationalDatasetTimestamp fromInstant(@NonNull Instant instant)",
    "returnType" : "OperationalDatasetTimestamp",
    "comment" : "\n     * Creates a new {@link OperationalDatasetTimestamp} object from an {@link Instant}.\n     *\n     * <p>The {@code seconds} is set to {@code instant.getEpochSecond()}, {@code ticks} is set to\n     * {@link instant#getNano()} based on frequency of 32768 Hz, and {@code isAuthoritativeSource}\n     * is set to {@code true}.\n     *\n     * <p>Note that this conversion can lose precision and a value returned by {@link #toInstant}\n     * may not equal exactly the {@code instant}.\n     *\n     * @throws IllegalArgumentException if {@code instant.getEpochSecond()} is larger than {@code\n     *     0xffffffffffffL}\n     * @see toInstant\n     ",
    "links" : [ "#toInstant", "#getNano()", "android.net.thread.OperationalDatasetTimestamp", "java.time.Instant" ]
  }, {
    "name" : "public Instant toInstant()",
    "returnType" : "Instant",
    "comment" : "\n     * Converts this {@link OperationalDatasetTimestamp} object to an {@link Instant}.\n     *\n     * <p>Note that the return value may not equal exactly the {@code instant} if this object is\n     * created with {@link #fromInstant}.\n     *\n     * @see fromInstant\n     ",
    "links" : [ "#fromInstant", "android.net.thread.OperationalDatasetTimestamp", "java.time.Instant" ]
  }, {
    "name" : "public static OperationalDatasetTimestamp fromTlvValue(@NonNull byte[] encodedTimestamp)",
    "returnType" : "OperationalDatasetTimestamp",
    "comment" : "\n     * Creates a new {@link OperationalDatasetTimestamp} object from the OperationalDatasetTimestamp\n     * TLV value.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.thread.OperationalDatasetTimestamp" ]
  }, {
    "name" : "public byte[] toTlvValue()",
    "returnType" : "byte[]",
    "comment" : "\n     * Converts this {@link OperationalDatasetTimestamp} object to Thread TLV value.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.thread.OperationalDatasetTimestamp" ]
  }, {
    "name" : "private static int getRoundedTicks(long nanos)",
    "returnType" : "int",
    "comment" : "\n     * Returns the rounded ticks converted from the nano seconds.\n     *\n     * <p>Note that rhe return value can be as large as {@code TICKS_UPPER_BOUND}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSeconds()",
    "returnType" : "long",
    "comment" : " Returns the seconds portion of the timestamp. ",
    "links" : [ ]
  }, {
    "name" : "public int getTicks()",
    "returnType" : "int",
    "comment" : " Returns the ticks portion of the timestamp. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAuthoritativeSource()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if the timestamp comes from an authoritative source. ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static OperationalDatasetTimestamp fromInstant(@NonNull Instant instant)", "public Instant toInstant()", "public static OperationalDatasetTimestamp fromTlvValue(@NonNull byte[] encodedTimestamp)", "public byte[] toTlvValue()", "private static int getRoundedTicks(long nanos)", "public long getSeconds()", "public int getTicks()", "public boolean isAuthoritativeSource()", "public String toString()", "public boolean equals(@Nullable Object other)", "public int hashCode()" ],
  "variableNames" : [ "LENGTH_TIMESTAMP", "TICKS_UPPER_BOUND", "mSeconds", "mTicks", "mIsAuthoritativeSource" ]
}