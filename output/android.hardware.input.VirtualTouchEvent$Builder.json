{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/VirtualTouchEvent.java",
  "packageName" : "android.hardware.input",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link VirtualTouchEvent}.\n     ",
  "links" : [ "android.hardware.input.VirtualTouchEvent" ],
  "variables" : [ {
    "name" : "mToolType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPointerId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPressure",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMajorAxisSize",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventTimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VirtualTouchEvent build()",
    "returnType" : "VirtualTouchEvent",
    "comment" : "\n         * Creates a {@link VirtualTouchEvent} object with the current builder configuration.\n         *\n         * @throws IllegalArgumentException if one of the required arguments is missing or if\n         * ACTION_CANCEL is not set in combination with TOOL_TYPE_PALM. See\n         * {@link VirtualTouchEvent} for a detailed explanation.\n         ",
    "links" : [ "android.hardware.input.VirtualTouchEvent" ]
  }, {
    "name" : "public Builder setPointerId(@IntRange(from = 0, to = MAX_POINTERS - 1) int pointerId)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the pointer id of the event.\n         *\n         * <p>A Valid pointer id need to be in the range of 0 to 15.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setToolType(@ToolType int toolType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the tool type of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAction(@Action int action)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the action of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setX(float absX)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the x-axis location of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setY(float absY)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the y-axis location of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPressure(@FloatRange(from = 0f) float pressure)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the pressure of the event. This field is optional and can be omitted.\n         *\n         * @param pressure The pressure of the touch.\n         *                 Note: The VirtualTouchscreen, consuming VirtualTouchEvents, is\n         *                 configured with a pressure axis range from 0.0 to 255.0. Only the\n         *                 lower end of the range is enforced. You can pass values larger than\n         *                 255.0. With physical input devices this could happen if the\n         *                 calibration is off. Values larger than 255.0 will not be trimmed and\n         *                 passed on as is.\n         *\n         * @throws IllegalArgumentException if the pressure is smaller than 0.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMajorAxisSize(@FloatRange(from = 0f) float majorAxisSize)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the major axis size of the event. This field is optional and can be omitted.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEventTimeNanos(long eventTimeNanos)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time (in nanoseconds) when this specific event was generated. This may be\n         * obtained from {@link SystemClock#uptimeMillis()} (with nanosecond precision instead of\n         * millisecond), but can be different depending on the use case.\n         * This field is optional and can be omitted.\n         *\n         * @return this builder, to allow for chaining of calls\n         * @see InputEvent#getEventTime()\n         ",
    "links" : [ "android.os.SystemClock#uptimeMillis()" ]
  } ],
  "methodNames" : [ "public VirtualTouchEvent build()", "public Builder setPointerId(@IntRange(from = 0, to = MAX_POINTERS - 1) int pointerId)", "public Builder setToolType(@ToolType int toolType)", "public Builder setAction(@Action int action)", "public Builder setX(float absX)", "public Builder setY(float absY)", "public Builder setPressure(@FloatRange(from = 0f) float pressure)", "public Builder setMajorAxisSize(@FloatRange(from = 0f) float majorAxisSize)", "public Builder setEventTimeNanos(long eventTimeNanos)" ],
  "variableNames" : [ "mToolType", "mPointerId", "mAction", "mX", "mY", "mPressure", "mMajorAxisSize", "mEventTimeNanos" ]
}