{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/random/RandomGeneratorFactory.java",
  "packageName" : "java.util.random",
  "className" : "RandomGeneratorFactory",
  "comment" : "\n * This is a factory class for generating multiple random number generators\n * of a specific <a href=\"package-summary.html#algorithms\">algorithm</a>.\n * {@link RandomGeneratorFactory} also provides\n * methods for selecting random number generator algorithms.\n *\n * A specific {@link RandomGeneratorFactory} can be located by using the\n * {@link RandomGeneratorFactory#of(String)} method, where the argument string\n * is the name of the <a href=\"package-summary.html#algorithms\">algorithm</a>\n * required. The method\n * {@link RandomGeneratorFactory#all()} produces a non-empty {@link Stream} of all available\n * {@link RandomGeneratorFactory RandomGeneratorFactorys} that can be searched\n * to locate a {@link RandomGeneratorFactory} suitable to the task.\n *\n * There are three methods for constructing a RandomGenerator instance,\n * depending on the type of initial seed required.\n * {@link RandomGeneratorFactory#create(long)} is used for long\n * seed construction,\n * {@link RandomGeneratorFactory#create(byte[])} is used for byte[]\n * seed construction, and\n * {@link RandomGeneratorFactory#create()} is used for random seed\n * construction. Example;\n *\n * <pre>{@code\n *    RandomGeneratorFactory<RandomGenerator> factory = RandomGeneratorFactory.of(\"Random\");\n *\n *     for (int i = 0; i < 10; i++) {\n *         new Thread(() -> {\n *             RandomGenerator random = factory.create(100L);\n *             System.out.println(random.nextDouble());\n *         }).start();\n *     }\n * }</pre>\n *\n * RandomGeneratorFactory also provides methods describing the attributes (or properties)\n * of a generator and can be used to select random number generator\n * <a href=\"package-summary.html#algorithms\">algorithms</a>.\n * These methods are typically used in\n * conjunction with {@link RandomGeneratorFactory#all()}. In this example, the code\n * locates the {@link RandomGeneratorFactory} that produces\n * {@link RandomGenerator RandomGenerators}\n * with the highest number of state bits.\n *\n * <pre>{@code\n *     RandomGeneratorFactory<RandomGenerator> best = RandomGeneratorFactory.all()\n *         .sorted(Comparator.comparingInt(RandomGenerator::stateBits).reversed())\n *         .findFirst()\n *         .orElse(RandomGeneratorFactory.of(\"Random\"));\n *     System.out.println(best.name() + \" in \" + best.group() + \" was selected\");\n *\n *     RandomGenerator rng = best.create();\n *     System.out.println(rng.nextLong());\n * }</pre>\n *\n * @since 17\n *\n * @see java.util.random\n *\n ",
  "links" : [ "java.util.random.RandomGenerator", "java.util.random.RandomGeneratorFactory#create(byte", "java.util.stream.Stream", "java.util.random.RandomGeneratorFactory#all()", "java.util.random.RandomGeneratorFactory", "java.util.random.RandomGeneratorFactory#create(long)", "java.util.random.RandomGeneratorFactory#of(String)", "java.util.random.RandomGeneratorFactory#create()" ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider<? extends RandomGenerator>",
    "comment" : "\n     * Instance provider class of random number algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "properties",
    "type" : "RandomGeneratorProperties",
    "comment" : "\n     * Provider RandomGeneratorProperties annotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ctor",
    "type" : "Constructor<T>",
    "comment" : "\n     * Default provider constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "ctorLong",
    "type" : "Constructor<T>",
    "comment" : "\n     * Provider constructor with long seed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ctorBytes",
    "type" : "Constructor<T>",
    "comment" : "\n     * Provider constructor with byte[] seed.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Map<String, Provider<? extends RandomGenerator>> getFactoryMap()",
    "returnType" : "Map<String, Provider<? extends RandomGenerator>>",
    "comment" : "\n     * Returns the factory map, lazily constructing map on first call.\n     *\n     * @return Map of RandomGeneratorFactory classes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private RandomGeneratorProperties getProperties()",
    "returnType" : "RandomGeneratorProperties",
    "comment" : "\n     * Return the annotation for the specified provider.\n     *\n     * @return RandomGeneratorProperties annotation for the specified provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isSubclass(Class<? extends RandomGenerator> category)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the provider is a subclass of the category.\n     *\n     * @param category Interface category, sub-interface of {@link RandomGenerator}.\n     *\n     * @return true if the provider is a subclass of the category.\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  }, {
    "name" : "private static boolean isSubclass(Class<? extends RandomGenerator> category, Provider<? extends RandomGenerator> provider)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the provider is a subclass of the category.\n     *\n     * @param category Interface category, sub-interface of {@link RandomGenerator}.\n     * @param provider Provider that is being filtered.\n     *\n     * @return true if the provider is a subclass of the category.\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  }, {
    "name" : "private static Provider<? extends RandomGenerator> findProvider(String name, Class<? extends RandomGenerator> category) throws IllegalArgumentException",
    "returnType" : "Provider<? extends RandomGenerator>",
    "comment" : "\n     * Returns the provider matching name and category.\n     *\n     * @param name      Name of RandomGenerator\n     * @param category  Interface category, sub-interface of {@link RandomGenerator}.\n     *\n     * @return A provider matching name and category.\n     *\n     * @throws IllegalArgumentException if provider is not a subclass of category.\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  }, {
    "name" : " static T of(String name, Class<T> category) throws IllegalArgumentException",
    "returnType" : "T",
    "comment" : "\n     * Returns a {@link RandomGenerator} that utilizes the {@code name}\n     * <a href=\"package-summary.html#algorithms\">algorithm</a>.\n     *\n     * @param name      Name of random number algorithm to use\n     * @param category  Sub-interface of {@link RandomGenerator} to type check\n     * @param <T>       Sub-interface of {@link RandomGenerator} to produce\n     *\n     * @return An instance of {@link RandomGenerator}\n     *\n     * @throws IllegalArgumentException when either the name or category is null\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  }, {
    "name" : " static RandomGeneratorFactory<T> factoryOf(String name, Class<T> category) throws IllegalArgumentException",
    "returnType" : "RandomGeneratorFactory<T>",
    "comment" : "\n     * Returns a {@link RandomGeneratorFactory} that will produce instances\n     * of {@link RandomGenerator} that utilizes the named algorithm.\n     *\n     * @param name  Name of random number algorithm to use\n     * @param category Sub-interface of {@link RandomGenerator} to type check\n     * @param <T> Sub-interface of {@link RandomGenerator} to produce\n     *\n     * @return Factory of {@link RandomGenerator}\n     *\n     * @throws IllegalArgumentException when either the name or category is null\n     ",
    "links" : [ "java.util.random.RandomGenerator", "java.util.random.RandomGeneratorFactory" ]
  }, {
    "name" : "private void getConstructors(Class<? extends RandomGenerator> randomGeneratorClass)",
    "returnType" : "void",
    "comment" : "\n     * Fetch the required constructors for class of random number algorithm.\n     *\n     * @param randomGeneratorClass class of random number algorithm (provider)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureConstructors()",
    "returnType" : "void",
    "comment" : "\n     * Ensure all the required constructors are fetched.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RandomGeneratorFactory<T> of(String name)",
    "returnType" : "RandomGeneratorFactory<T>",
    "comment" : "\n     * Returns a {@link RandomGeneratorFactory} that can produce instances of\n     * {@link RandomGenerator} that utilize the {@code name}\n     * <a href=\"package-summary.html#algorithms\">algorithm</a>.\n     *\n     * @implSpec Availability is determined by RandomGeneratorFactory using the\n     * service provider API to locate implementations of the RandomGenerator interface.\n     *\n     * @param name  Name of random number generator\n     * <a href=\"package-summary.html#algorithms\">algorithm</a>\n     * @param <T> Sub-interface of {@link RandomGenerator} to produce\n     *\n     * @return {@link RandomGeneratorFactory} of {@link RandomGenerator}\n     *\n     * @throws NullPointerException if name is null\n     * @throws IllegalArgumentException if the named algorithm is not found\n     ",
    "links" : [ "java.util.random.RandomGenerator", "java.util.random.RandomGeneratorFactory" ]
  }, {
    "name" : "public static RandomGeneratorFactory<RandomGenerator> getDefault()",
    "returnType" : "RandomGeneratorFactory<RandomGenerator>",
    "comment" : "\n     * Returns a {@link RandomGeneratorFactory} meeting the minimal requirement\n     * of having an algorithm whose state bits are greater than or equal 64.\n     *\n     * @implSpec  Since algorithms will improve over time, there is no\n     * guarantee that this method will return the same algorithm over time.\n     *\n     * @return a {@link RandomGeneratorFactory}\n     ",
    "links" : [ "java.util.random.RandomGeneratorFactory" ]
  }, {
    "name" : "public static Stream<RandomGeneratorFactory<RandomGenerator>> all()",
    "returnType" : "Stream<RandomGeneratorFactory<RandomGenerator>>",
    "comment" : "\n     * Returns a non-empty stream of available {@link RandomGeneratorFactory RandomGeneratorFactory(s)}.\n     *\n     * RandomGenerators that are marked as deprecated are not included in the result.\n     *\n     * @implSpec Availability is determined by RandomGeneratorFactory using the service provider API\n     * to locate implementations of the RandomGenerator interface.\n     *\n     * @return a non-empty stream of all available {@link RandomGeneratorFactory RandomGeneratorFactory(s)}.\n     ",
    "links" : [ "java.util.random.RandomGeneratorFactory" ]
  }, {
    "name" : "public String name()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of the <a href=\"package-summary.html#algorithms\">algorithm</a>\n     * used by the random number generator.\n     *\n     * @return Name of the <a href=\"package-summary.html#algorithms\">algorithm</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String group()",
    "returnType" : "String",
    "comment" : "\n     * Return the group name of the <a href=\"package-summary.html#algorithms\">algorithm</a>\n     * used by the random number generator.\n     *\n     * @return Group name of the <a href=\"package-summary.html#algorithms\">algorithm</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int stateBits()",
    "returnType" : "int",
    "comment" : "\n     * Returns number of bits used by the <a href=\"package-summary.html#algorithms\">algorithm</a>\n     * to maintain state of seed.\n     *\n     * @return number of bits used by the <a href=\"package-summary.html#algorithms\">algorithm</a>\n     *         to maintain state of seed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int equidistribution()",
    "returnType" : "int",
    "comment" : "\n     * Returns the equidistribution of the <a href=\"package-summary.html#algorithms\">algorithm</a>.\n     *\n     * @return the equidistribution of the <a href=\"package-summary.html#algorithms\">algorithm</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BigInteger period()",
    "returnType" : "BigInteger",
    "comment" : "\n     * Return the period of the <a href=\"package-summary.html#algorithms\">algorithm</a>\n     * used by the random number generator.\n     * Returns BigInteger.ZERO if period is not determinable.\n     *\n     * @return BigInteger period.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStatistical()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator is computed using an arithmetic\n     * <a href=\"package-summary.html#algorithms\">algorithm</a>\n     * and is statistically deterministic.\n     *\n     * @return true if random generator is statistical.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStochastic()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator is computed using external or entropic\n     * sources as inputs.\n     *\n     * @return true if random generator is stochastic.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardware()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator uses a hardware device (HRNG) to produce\n     * entropic input.\n     *\n     * @return true if random generator is generated by hardware.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isArbitrarilyJumpable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator can jump an arbitrarily specified distant\n     * point in the state cycle.\n     *\n     * @return true if random generator is arbitrarily jumpable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isJumpable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator can jump a specified distant point in\n     * the state cycle.\n     *\n     * @return true if random generator is jumpable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeapable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator is jumpable and can leap to a very distant\n     * point in the state cycle.\n     *\n     * @return true if random generator is leapable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSplittable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator can be cloned into a separate object with\n     * the same properties but positioned further in the state cycle.\n     *\n     * @return true if random generator is splittable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStreamable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if random generator can be used to create\n     * {@link java.util.stream.Stream Streams} of random numbers.\n     *\n     * @return true if random generator is streamable.\n     ",
    "links" : [ "java.util.stream.Stream" ]
  }, {
    "name" : "public boolean isDeprecated()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the implementation of RandomGenerator (algorithm) has been\n     * marked for deprecation.\n     *\n     * @implNote Random number generator algorithms evolve over time; new\n     *           algorithms will be introduced and old algorithms will\n     *           lose standing. If an older algorithm is deemed unsuitable\n     *           for continued use, it will be marked as deprecated to indicate\n     *           that it may be removed at some point in the future.\n     *\n     * @return true if the implementation of RandomGenerator (algorithm) has been\n     *         marked for deprecation\n     ",
    "links" : [ ]
  }, {
    "name" : "public T create()",
    "returnType" : "T",
    "comment" : "\n     * Create an instance of {@link RandomGenerator} based on\n     * <a href=\"package-summary.html#algorithms\">algorithm</a> chosen.\n     *\n     * @return new in instance of {@link RandomGenerator}.\n     *\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  }, {
    "name" : "public T create(long seed)",
    "returnType" : "T",
    "comment" : "\n     * Create an instance of {@link RandomGenerator} based on\n     * <a href=\"package-summary.html#algorithms\">algorithm</a> chosen\n     * providing a starting long seed. If long seed is not supported by an\n     * algorithm then the no argument form of create is used.\n     *\n     * @param seed long random seed value.\n     *\n     * @return new in instance of {@link RandomGenerator}.\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  }, {
    "name" : "public T create(byte[] seed)",
    "returnType" : "T",
    "comment" : "\n     * Create an instance of {@link RandomGenerator} based on\n     * <a href=\"package-summary.html#algorithms\">algorithm</a> chosen\n     * providing a starting byte[] seed. If byte[] seed is not supported by an\n     * <a href=\"package-summary.html#algorithms\">algorithm</a> then the no\n     * argument form of create is used.\n     *\n     * @param seed byte array random seed value.\n     *\n     * @return new in instance of {@link RandomGenerator}.\n     *\n     * @throws NullPointerException if seed is null.\n     ",
    "links" : [ "java.util.random.RandomGenerator" ]
  } ],
  "methodNames" : [ "private static Map<String, Provider<? extends RandomGenerator>> getFactoryMap()", "private RandomGeneratorProperties getProperties()", "private boolean isSubclass(Class<? extends RandomGenerator> category)", "private static boolean isSubclass(Class<? extends RandomGenerator> category, Provider<? extends RandomGenerator> provider)", "private static Provider<? extends RandomGenerator> findProvider(String name, Class<? extends RandomGenerator> category) throws IllegalArgumentException", " static T of(String name, Class<T> category) throws IllegalArgumentException", " static RandomGeneratorFactory<T> factoryOf(String name, Class<T> category) throws IllegalArgumentException", "private void getConstructors(Class<? extends RandomGenerator> randomGeneratorClass)", "private void ensureConstructors()", "public static RandomGeneratorFactory<T> of(String name)", "public static RandomGeneratorFactory<RandomGenerator> getDefault()", "public static Stream<RandomGeneratorFactory<RandomGenerator>> all()", "public String name()", "public String group()", "public int stateBits()", "public int equidistribution()", "public BigInteger period()", "public boolean isStatistical()", "public boolean isStochastic()", "public boolean isHardware()", "public boolean isArbitrarilyJumpable()", "public boolean isJumpable()", "public boolean isLeapable()", "public boolean isSplittable()", "public boolean isStreamable()", "public boolean isDeprecated()", "public T create()", "public T create(long seed)", "public T create(byte[] seed)" ],
  "variableNames" : [ "provider", "properties", "ctor", "ctorLong", "ctorBytes" ]
}