{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/ServerSocketChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "ServerSocketChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static ServerSocketChannel open() throws IOException",
    "returnType" : "ServerSocketChannel",
    "comment" : "\n     * Opens a server-socket channel.\n     *\n     * <p> The new channel is created by invoking the {@link\n     * java.nio.channels.spi.SelectorProvider#openServerSocketChannel\n     * openServerSocketChannel} method of the system-wide default {@link\n     * java.nio.channels.spi.SelectorProvider} object.\n     *\n     * <p> The new channel's socket is initially unbound; it must be bound to a\n     * specific address via one of its socket's {@link\n     * java.net.ServerSocket#bind(SocketAddress) bind} methods before\n     * connections can be accepted.  </p>\n     *\n     * @return  A new socket channel\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.spi.SelectorProvider#openServerSocketChannelopenServerSocketChannel", "java.nio.channels.spi.SelectorProvider", "java.net.ServerSocket#bind(SocketAddress)" ]
  }, {
    "name" : "public final int validOps()",
    "returnType" : "int",
    "comment" : "\n     * Returns an operation set identifying this channel's supported\n     * operations.\n     *\n     * <p> Server-socket channels only support the accepting of new\n     * connections, so this method returns {@link SelectionKey#OP_ACCEPT}.\n     * </p>\n     *\n     * @return  The valid-operation set\n     ",
    "links" : [ "java.nio.channels.SelectionKey#OP_ACCEPT" ]
  }, {
    "name" : "public final ServerSocketChannel bind(SocketAddress local) throws IOException",
    "returnType" : "ServerSocketChannel",
    "comment" : "\n     * Binds the channel's socket to a local address and configures the socket\n     * to listen for connections.\n     *\n     * <p> An invocation of this method is equivalent to the following:\n     * <blockquote><pre>\n     * bind(local, 0);\n     * </pre></blockquote>\n     *\n     * @param   local\n     *          The local address to bind the socket, or {@code null} to bind\n     *          to an automatically assigned socket address\n     *\n     * @return  This channel\n     *\n     * @throws  AlreadyBoundException               {@inheritDoc}\n     * @throws  UnsupportedAddressTypeException     {@inheritDoc}\n     * @throws  ClosedChannelException              {@inheritDoc}\n     * @throws  IOException                         {@inheritDoc}\n     * @throws  SecurityException\n     *          If a security manager has been installed and its {@link\n     *          SecurityManager#checkListen checkListen} method denies the\n     *          operation\n     *\n     * @since 1.7\n     ",
    "links" : [ "#checkListen" ]
  }, {
    "name" : "public abstract ServerSocketChannel bind(SocketAddress local, int backlog) throws IOException",
    "returnType" : "ServerSocketChannel",
    "comment" : "\n     * Binds the channel's socket to a local address and configures the socket to\n     * listen for connections.\n     *\n     * <p> This method is used to establish an association between the socket and\n     * a local address. Once an association is established then the socket remains\n     * bound until the channel is closed.\n     *\n     * <p> The {@code backlog} parameter is the maximum number of pending\n     * connections on the socket. Its exact semantics are implementation specific.\n     * In particular, an implementation may impose a maximum length or may choose\n     * to ignore the parameter altogther. If the {@code backlog} parameter has\n     * the value {@code 0}, or a negative value, then an implementation specific\n     * default is used.\n     *\n     * @param   local\n     *          The address to bind the socket, or {@code null} to bind to an\n     *          automatically assigned socket address\n     * @param   backlog\n     *          The maximum number of pending connections\n     *\n     * @return  This channel\n     *\n     * @throws  AlreadyBoundException\n     *          If the socket is already bound\n     * @throws  UnsupportedAddressTypeException\n     *          If the type of the given address is not supported\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager has been installed and its {@link\n     *          SecurityManager#checkListen checkListen} method denies the\n     *          operation\n     *\n     * @since 1.7\n     ",
    "links" : [ "#checkListen" ]
  }, {
    "name" : "public abstract ServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "ServerSocketChannel",
    "comment" : "\n     * @throws  UnsupportedOperationException           {@inheritDoc}\n     * @throws  IllegalArgumentException                {@inheritDoc}\n     * @throws  ClosedChannelException                  {@inheritDoc}\n     * @throws  IOException                             {@inheritDoc}\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ServerSocket socket()",
    "returnType" : "ServerSocket",
    "comment" : "\n     * Retrieves a server socket associated with this channel.\n     *\n     * <p> The returned object will not declare any public methods that are not\n     * declared in the {@link java.net.ServerSocket} class.  </p>\n     *\n     * @return  A server socket associated with this channel\n     ",
    "links" : [ "java.net.ServerSocket" ]
  }, {
    "name" : "public abstract SocketChannel accept() throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * Accepts a connection made to this channel's socket.\n     *\n     * <p> If this channel is in non-blocking mode then this method will\n     * immediately return {@code null} if there are no pending connections.\n     * Otherwise it will block indefinitely until a new connection is available\n     * or an I/O error occurs.\n     *\n     * <p> The socket channel returned by this method, if any, will be in\n     * blocking mode regardless of the blocking mode of this channel.\n     *\n     * <p> This method performs exactly the same security checks as the {@link\n     * java.net.ServerSocket#accept accept} method of the {@link\n     * java.net.ServerSocket} class.  That is, if a security manager has been\n     * installed then for each new connection this method verifies that the\n     * address and port number of the connection's remote endpoint are\n     * permitted by the security manager's {@link\n     * java.lang.SecurityManager#checkAccept checkAccept} method.  </p>\n     *\n     * @return  The socket channel for the new connection,\n     *          or {@code null} if this channel is in non-blocking mode\n     *          and no connection is available to be accepted\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the accept operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the accept operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  NotYetBoundException\n     *          If this channel's socket has not yet been bound\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed\n     *          and it does not permit access to the remote endpoint\n     *          of the new connection\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "java.net.ServerSocket", "java.net.ServerSocket#accept", "java.lang.SecurityManager#checkAccept" ]
  }, {
    "name" : "public abstract SocketAddress getLocalAddress() throws IOException",
    "returnType" : "SocketAddress",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * If there is a security manager set, its {@code checkConnect} method is\n     * called with the local address and {@code -1} as its arguments to see\n     * if the operation is allowed. If the operation is not allowed,\n     * a {@code SocketAddress} representing the\n     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n     * local port of the channel's socket is returned.\n     *\n     * @return  The {@code SocketAddress} that the socket is bound to, or the\n     *          {@code SocketAddress} representing the loopback address if\n     *          denied by the security manager, or {@code null} if the\n     *          channel's socket is not bound\n     *\n     * @throws  ClosedChannelException     {@inheritDoc}\n     * @throws  IOException                {@inheritDoc}\n     ",
    "links" : [ "java.net.InetAddress#getLoopbackAddress" ]
  } ],
  "methodNames" : [ "public static ServerSocketChannel open() throws IOException", "public final int validOps()", "public final ServerSocketChannel bind(SocketAddress local) throws IOException", "public abstract ServerSocketChannel bind(SocketAddress local, int backlog) throws IOException", "public abstract ServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException", "public abstract ServerSocket socket()", "public abstract SocketChannel accept() throws IOException", "public abstract SocketAddress getLocalAddress() throws IOException" ],
  "variableNames" : [ ]
}