{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/TailoredSet.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "TailoredSet",
  "comment" : "\n * Finds the set of characters and strings that sort differently in the tailoring\n * from the base data.\n *\n * Every mapping in the tailoring needs to be compared to the base,\n * because some mappings are copied for optimization, and\n * all contractions for a character are copied if any contractions for that character\n * are added, modified or removed.\n *\n * It might be simpler to re-parse the rule string, but:\n * - That would require duplicating some of the from-rules builder code.\n * - That would make the runtime code depend on the builder.\n * - That would only work if we have the rule string, and we allow users to\n *   omit the rule string from data files.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "data",
    "type" : "CollationData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "baseData",
    "type" : "CollationData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tailored",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unreversedPrefix",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "suffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void forData(CollationData d)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enumTailoredRange(int start, int end, int ce32, TailoredSet ts)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleCE32(int start, int end, int ce32)",
    "returnType" : "void",
    "comment" : "  function (enumTailoredRange()). This is not necessary for Java implementation.",
    "links" : [ ]
  }, {
    "name" : "private void compare(int c, int ce32, int baseCE32)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void comparePrefixes(int c, CharSequence p, int pidx, CharSequence q, int qidx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void compareContractions(int c, CharSequence p, int pidx, CharSequence q, int qidx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addPrefixes(CollationData d, int c, CharSequence p, int pidx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addPrefix(CollationData d, CharSequence pfx, int c, int ce32)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addContractions(int c, CharSequence p, int pidx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addSuffix(int c, CharSequence sfx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void add(int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPrefix(CharSequence pfx)",
    "returnType" : "void",
    "comment" : " Prefixes are reversed in the data structure.",
    "links" : [ ]
  }, {
    "name" : "private void resetPrefix()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void forData(CollationData d)", "private void enumTailoredRange(int start, int end, int ce32, TailoredSet ts)", "private void handleCE32(int start, int end, int ce32)", "private void compare(int c, int ce32, int baseCE32)", "private void comparePrefixes(int c, CharSequence p, int pidx, CharSequence q, int qidx)", "private void compareContractions(int c, CharSequence p, int pidx, CharSequence q, int qidx)", "private void addPrefixes(CollationData d, int c, CharSequence p, int pidx)", "private void addPrefix(CollationData d, CharSequence pfx, int c, int ce32)", "private void addContractions(int c, CharSequence p, int pidx)", "private void addSuffix(int c, CharSequence sfx)", "private void add(int c)", "private void setPrefix(CharSequence pfx)", "private void resetPrefix()" ],
  "variableNames" : [ "data", "baseData", "tailored", "unreversedPrefix", "suffix" ]
}