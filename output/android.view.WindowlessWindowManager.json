{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowlessWindowManager.java",
  "packageName" : "android.view",
  "className" : "WindowlessWindowManager",
  "comment" : "\n* A simplistic implementation of IWindowSession. Rather than managing Surfaces\n* as children of the display, it manages Surfaces as children of a given root.\n*\n* By parcelling the root surface, the app can offer another app content for embedding.\n* @hide\n",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateForWindow",
    "type" : "HashMap<IBinder, State>",
    "comment" : "\n     * Used to store SurfaceControl we've built for clients to\n     * reconfigure them if relayout is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResizeCompletionForWindow",
    "type" : "HashMap<IBinder, ResizeCompleteCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceSession",
    "type" : "SurfaceSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootSurface",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRealWm",
    "type" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHostInputTransferToken",
    "type" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputTransferToken",
    "type" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsetsState",
    "type" : "InsetsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpFrames",
    "type" : "ClientWindowFrames",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpConfig",
    "type" : "MergedConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayout",
    "type" : "WindowlessWindowLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentInterface",
    "type" : "ISurfaceControlViewHostParent",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setConfiguration(Configuration configuration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InputTransferToken getInputTransferToken(IBinder window)",
    "returnType" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setCompletionCallback(IBinder window, ResizeCompleteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Utility API.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setTouchRegion(IBinder window, @Nullable Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected SurfaceControl getParentSurface(IWindow window, WindowManager.LayoutParams attrs)",
    "returnType" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addToDisplay(IWindow window, WindowManager.LayoutParams attrs, int viewVisibility, int displayId, @InsetsType int requestedVisibleTypes, InputChannel outInputChannel, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame, float[] outSizeCompatScale)",
    "returnType" : "int",
    "comment" : "\n     * IWindowSession implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addToDisplayAsUser(IWindow window, WindowManager.LayoutParams attrs, int viewVisibility, int displayId, int userId, @InsetsType int requestedVisibleTypes, InputChannel outInputChannel, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame, float[] outSizeCompatScale)",
    "returnType" : "int",
    "comment" : "\n     * IWindowSession implementation. Currently this class doesn't need to support for multi-user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addToDisplayWithoutInputChannel(android.view.IWindow window, android.view.WindowManager.LayoutParams attrs, int viewVisibility, int layerStackId, android.view.InsetsState insetsState, Rect outAttachedFrame, float[] outSizeCompatScale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void remove(IBinder clientToken) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void removeSurface(SurfaceControl sc)",
    "returnType" : "void",
    "comment" : " Separate from {@link #remove} so that subclasses can put removal on a sync transaction. ",
    "links" : [ "#remove" ]
  }, {
    "name" : "private boolean isOpaque(WindowManager.LayoutParams attrs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isInTouchModeInternal(int displayId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected IBinder getWindowBinder(View rootView)",
    "returnType" : "IBinder",
    "comment" : " Access to package members for SystemWindow leashing\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected SurfaceControl getSurfaceControl(View rootView)",
    "returnType" : "SurfaceControl",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected SurfaceControl getSurfaceControl(IWindow window)",
    "returnType" : "SurfaceControl",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int relayoutLegacy(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId, ClientWindowFrames outFrames, MergedConfiguration outMergedConfiguration, SurfaceControl outSurfaceControl, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls, Bundle outSyncSeqIdBundle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int relayout(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId, WindowRelayoutResult outRelayoutResult)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int relayoutInner(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId, ClientWindowFrames outFrames, MergedConfiguration outMergedConfiguration, SurfaceControl outSurfaceControl, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void relayoutAsync(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean outOfMemory(android.view.IWindow window)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInsets(android.view.IWindow window, int touchableInsets, android.graphics.Rect contentInsets, android.graphics.Rect visibleInsets, android.graphics.Region touchableRegion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearTouchableRegion(android.view.IWindow window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finishDrawing(android.view.IWindow window, android.view.SurfaceControl.Transaction postDrawTransaction, int seqId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performHapticFeedback(int effectId, boolean always, boolean fromIme)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performHapticFeedbackAsync(int effectId, boolean always, boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder performDrag(android.view.IWindow window, int flags, android.view.SurfaceControl surface, int touchSource, int touchDeviceId, int touchPointerId, float touchX, float touchY, float thumbCenterX, float thumbCenterY, android.content.ClipData data)",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportDropResult(android.view.IWindow window, boolean consumed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancelDragAndDrop(android.os.IBinder dragToken, boolean skipAnimation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dragRecipientEntered(android.view.IWindow window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dragRecipientExited(android.view.IWindow window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaperPosition(android.os.IBinder windowToken, float x, float y, float xstep, float ystep)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaperZoomOut(android.os.IBinder windowToken, float zoom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShouldZoomOutWallpaper(android.os.IBinder windowToken, boolean shouldZoom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void wallpaperOffsetsComplete(android.os.IBinder window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaperDisplayOffset(android.os.IBinder windowToken, int x, int y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendWallpaperCommand(android.os.IBinder window, java.lang.String action, int x, int y, int z, android.os.Bundle extras, boolean sync)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void wallpaperCommandComplete(android.os.IBinder window, android.os.Bundle result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRectangleOnScreenRequested(android.os.IBinder token, android.graphics.Rect rectangle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.view.IWindowId getWindowId(android.os.IBinder window)",
    "returnType" : "android.view.IWindowId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pokeDrawLock(android.os.IBinder window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startMovingTask(android.view.IWindow window, float startX, float startY)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finishMovingTask(android.view.IWindow window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateTapExcludeRegion(android.view.IWindow window, android.graphics.Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateRequestedVisibleTypes(IWindow window, @InsetsType int requestedVisibleTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportSystemGestureExclusionChanged(android.view.IWindow window, List<Rect> exclusionRects)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportDecorViewGestureInterceptionChanged(IWindow window, boolean intercepted)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportKeepClearAreasChanged(android.view.IWindow window, List<Rect> restrictedRects, List<Rect> unrestrictedRects)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantInputChannel(int displayId, SurfaceControl surface, IBinder clientToken, InputTransferToken hostInputToken, int flags, int privateFlags, int inputFeatures, int type, IBinder windowToken, InputTransferToken embeddedInputTransferToken, String inputHandleName, InputChannel outInputChannel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateInputChannel(IBinder channelToken, int displayId, SurfaceControl surface, int flags, int privateFlags, int inputFeatures, Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantEmbeddedWindowFocus(IWindow callingWindow, InputTransferToken targetInputToken, boolean grantFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void generateDisplayHash(IWindow window, Rect boundsInWindow, String hashAlgorithm, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnBackInvokedCallbackInfo(IWindow iWindow, OnBackInvokedCallbackInfo callbackInfo) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dropForAccessibility(IWindow window, int x, int y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInsetsState(InsetsState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean cancelDraw(IWindow window)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveFocusToAdjacentWindow(IWindow fromWindow, @FocusDirection int direction)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setParentInterface(@Nullable ISurfaceControlViewHostParent parentInterface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearLastReportedParams()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendLayoutParamsToParent()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean forwardBackKeyToParent(@NonNull KeyEvent keyEvent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setConfiguration(Configuration configuration)", " InputTransferToken getInputTransferToken(IBinder window)", " void setCompletionCallback(IBinder window, ResizeCompleteCallback callback)", "protected void setTouchRegion(IBinder window, @Nullable Region region)", "protected SurfaceControl getParentSurface(IWindow window, WindowManager.LayoutParams attrs)", "public int addToDisplay(IWindow window, WindowManager.LayoutParams attrs, int viewVisibility, int displayId, @InsetsType int requestedVisibleTypes, InputChannel outInputChannel, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame, float[] outSizeCompatScale)", "public int addToDisplayAsUser(IWindow window, WindowManager.LayoutParams attrs, int viewVisibility, int displayId, int userId, @InsetsType int requestedVisibleTypes, InputChannel outInputChannel, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame, float[] outSizeCompatScale)", "public int addToDisplayWithoutInputChannel(android.view.IWindow window, android.view.WindowManager.LayoutParams attrs, int viewVisibility, int layerStackId, android.view.InsetsState insetsState, Rect outAttachedFrame, float[] outSizeCompatScale)", "public void remove(IBinder clientToken) throws RemoteException", "protected void removeSurface(SurfaceControl sc)", "private boolean isOpaque(WindowManager.LayoutParams attrs)", "private boolean isInTouchModeInternal(int displayId)", "protected IBinder getWindowBinder(View rootView)", "protected SurfaceControl getSurfaceControl(View rootView)", "protected SurfaceControl getSurfaceControl(IWindow window)", "public int relayoutLegacy(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId, ClientWindowFrames outFrames, MergedConfiguration outMergedConfiguration, SurfaceControl outSurfaceControl, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls, Bundle outSyncSeqIdBundle)", "public int relayout(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId, WindowRelayoutResult outRelayoutResult)", "private int relayoutInner(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId, ClientWindowFrames outFrames, MergedConfiguration outMergedConfiguration, SurfaceControl outSurfaceControl, InsetsState outInsetsState, InsetsSourceControl.Array outActiveControls)", "public void relayoutAsync(IWindow window, WindowManager.LayoutParams inAttrs, int requestedWidth, int requestedHeight, int viewFlags, int flags, int seq, int lastSyncSeqId)", "public boolean outOfMemory(android.view.IWindow window)", "public void setInsets(android.view.IWindow window, int touchableInsets, android.graphics.Rect contentInsets, android.graphics.Rect visibleInsets, android.graphics.Region touchableRegion)", "public void clearTouchableRegion(android.view.IWindow window)", "public void finishDrawing(android.view.IWindow window, android.view.SurfaceControl.Transaction postDrawTransaction, int seqId)", "public boolean performHapticFeedback(int effectId, boolean always, boolean fromIme)", "public void performHapticFeedbackAsync(int effectId, boolean always, boolean fromIme)", "public android.os.IBinder performDrag(android.view.IWindow window, int flags, android.view.SurfaceControl surface, int touchSource, int touchDeviceId, int touchPointerId, float touchX, float touchY, float thumbCenterX, float thumbCenterY, android.content.ClipData data)", "public void reportDropResult(android.view.IWindow window, boolean consumed)", "public void cancelDragAndDrop(android.os.IBinder dragToken, boolean skipAnimation)", "public void dragRecipientEntered(android.view.IWindow window)", "public void dragRecipientExited(android.view.IWindow window)", "public void setWallpaperPosition(android.os.IBinder windowToken, float x, float y, float xstep, float ystep)", "public void setWallpaperZoomOut(android.os.IBinder windowToken, float zoom)", "public void setShouldZoomOutWallpaper(android.os.IBinder windowToken, boolean shouldZoom)", "public void wallpaperOffsetsComplete(android.os.IBinder window)", "public void setWallpaperDisplayOffset(android.os.IBinder windowToken, int x, int y)", "public void sendWallpaperCommand(android.os.IBinder window, java.lang.String action, int x, int y, int z, android.os.Bundle extras, boolean sync)", "public void wallpaperCommandComplete(android.os.IBinder window, android.os.Bundle result)", "public void onRectangleOnScreenRequested(android.os.IBinder token, android.graphics.Rect rectangle)", "public android.view.IWindowId getWindowId(android.os.IBinder window)", "public void pokeDrawLock(android.os.IBinder window)", "public boolean startMovingTask(android.view.IWindow window, float startX, float startY)", "public void finishMovingTask(android.view.IWindow window)", "public void updateTapExcludeRegion(android.view.IWindow window, android.graphics.Region region)", "public void updateRequestedVisibleTypes(IWindow window, @InsetsType int requestedVisibleTypes)", "public void reportSystemGestureExclusionChanged(android.view.IWindow window, List<Rect> exclusionRects)", "public void reportDecorViewGestureInterceptionChanged(IWindow window, boolean intercepted)", "public void reportKeepClearAreasChanged(android.view.IWindow window, List<Rect> restrictedRects, List<Rect> unrestrictedRects)", "public void grantInputChannel(int displayId, SurfaceControl surface, IBinder clientToken, InputTransferToken hostInputToken, int flags, int privateFlags, int inputFeatures, int type, IBinder windowToken, InputTransferToken embeddedInputTransferToken, String inputHandleName, InputChannel outInputChannel)", "public void updateInputChannel(IBinder channelToken, int displayId, SurfaceControl surface, int flags, int privateFlags, int inputFeatures, Region region)", "public android.os.IBinder asBinder()", "public void grantEmbeddedWindowFocus(IWindow callingWindow, InputTransferToken targetInputToken, boolean grantFocus)", "public void generateDisplayHash(IWindow window, Rect boundsInWindow, String hashAlgorithm, RemoteCallback callback)", "public void setOnBackInvokedCallbackInfo(IWindow iWindow, OnBackInvokedCallbackInfo callbackInfo) throws RemoteException", "public boolean dropForAccessibility(IWindow window, int x, int y)", "public void setInsetsState(InsetsState state)", "public boolean cancelDraw(IWindow window)", "public boolean moveFocusToAdjacentWindow(IWindow fromWindow, @FocusDirection int direction)", " void setParentInterface(@Nullable ISurfaceControlViewHostParent parentInterface)", "private void clearLastReportedParams()", "private void sendLayoutParamsToParent()", " boolean forwardBackKeyToParent(@NonNull KeyEvent keyEvent)" ],
  "variableNames" : [ "TAG", "mStateForWindow", "mResizeCompletionForWindow", "mSurfaceSession", "mRootSurface", "mConfiguration", "mRealWm", "mHostInputTransferToken", "mInputTransferToken", "mInsetsState", "mTmpFrames", "mTmpConfig", "mLayout", "mParentInterface" ]
}