{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Magnifier.java",
  "packageName" : "android.widget",
  "className" : "Magnifier",
  "comment" : "\n * Android magnifier widget. Can be used by any view which is attached to a window.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONEXISTENT_PREVIOUS_CONFIG_VALUE",
    "type" : "int",
    "comment" : " Use this to specify that a previous configuration value does not exist.",
    "links" : [ ]
  }, {
    "name" : "sPixelCopyHandlerThread",
    "type" : "HandlerThread",
    "comment" : " the Handler of this Thread when the copy is finished.",
    "links" : [ ]
  }, {
    "name" : "FISHEYE_RAMP_WIDTH",
    "type" : "float",
    "comment" : " The width of the ramp region in DP on the left & right sides of the fish-eye effect.",
    "links" : [ ]
  }, {
    "name" : "mView",
    "type" : "View",
    "comment" : " The view to which this magnifier is attached.",
    "links" : [ ]
  }, {
    "name" : "mViewCoordinatesInSurface",
    "type" : "int[]",
    "comment" : " The coordinates of the view in the surface.",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "InternalPopupWindow",
    "comment" : " The window containing the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mWindowWidth",
    "type" : "int",
    "comment" : " The width of the window containing the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mWindowHeight",
    "type" : "int",
    "comment" : " The height of the window containing the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mZoom",
    "type" : "float",
    "comment" : " The zoom applied to the view region copied to the magnifier view.",
    "links" : [ ]
  }, {
    "name" : "mSourceWidth",
    "type" : "int",
    "comment" : " The width of the content that will be copied to the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mSourceHeight",
    "type" : "int",
    "comment" : " The height of the content that will be copied to the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mDirtyState",
    "type" : "boolean",
    "comment" : " Whether the zoom of the magnifier or the view position have changed since last content copy.",
    "links" : [ ]
  }, {
    "name" : "mWindowElevation",
    "type" : "float",
    "comment" : " The elevation of the window containing the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mWindowCornerRadius",
    "type" : "float",
    "comment" : " The corner radius of the window containing the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mOverlay",
    "type" : "Drawable",
    "comment" : " The overlay to be drawn on the top of the magnifier content.",
    "links" : [ ]
  }, {
    "name" : "mDefaultHorizontalSourceToMagnifierOffset",
    "type" : "int",
    "comment" : " The horizontal offset between the source and window coords when #show(float, float) is used.",
    "links" : [ ]
  }, {
    "name" : "mDefaultVerticalSourceToMagnifierOffset",
    "type" : "int",
    "comment" : " The vertical offset between the source and window coords when #show(float, float) is used.",
    "links" : [ ]
  }, {
    "name" : "mClippingEnabled",
    "type" : "boolean",
    "comment" : " and within system insets.",
    "links" : [ ]
  }, {
    "name" : "mLeftContentBound",
    "type" : "int",
    "comment" : " The behavior of the left bound of the rectangle where the content can be copied from.",
    "links" : [ ]
  }, {
    "name" : "mTopContentBound",
    "type" : "int",
    "comment" : " The behavior of the top bound of the rectangle where the content can be copied from.",
    "links" : [ ]
  }, {
    "name" : "mRightContentBound",
    "type" : "int",
    "comment" : " The behavior of the right bound of the rectangle where the content can be copied from.",
    "links" : [ ]
  }, {
    "name" : "mBottomContentBound",
    "type" : "int",
    "comment" : " The behavior of the bottom bound of the rectangle where the content can be copied from.",
    "links" : [ ]
  }, {
    "name" : "mParentSurface",
    "type" : "SurfaceInfo",
    "comment" : " The parent surface for the magnifier surface.",
    "links" : [ ]
  }, {
    "name" : "mContentCopySurface",
    "type" : "SurfaceInfo",
    "comment" : " The surface where the content will be copied from.",
    "links" : [ ]
  }, {
    "name" : "mWindowCoords",
    "type" : "Point",
    "comment" : " The center coordinates of the window containing the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mClampedCenterZoomCoords",
    "type" : "Point",
    "comment" : " clamped inside the visible region of the magnified view.",
    "links" : [ ]
  }, {
    "name" : "mPrevStartCoordsInSurface",
    "type" : "Point",
    "comment" : " Variables holding previous states, used for detecting redundant calls and invalidation.",
    "links" : [ ]
  }, {
    "name" : "mPrevShowSourceCoords",
    "type" : "PointF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevShowWindowCoords",
    "type" : "PointF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPixelCopyRequestRect",
    "type" : "Rect",
    "comment" : " Rectangle defining the view surface area we pixel copy content from.",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " Only sync mWindow writes from UI thread with mWindow reads from sPixelCopyHandlerThread.",
    "links" : [ ]
  }, {
    "name" : "mDestroyLock",
    "type" : "Object",
    "comment" : " The lock used to synchronize the UI and render threads when a #dismiss is performed.",
    "links" : [ ]
  }, {
    "name" : "mIsFishEyeStyle",
    "type" : "boolean",
    "comment" : " Whether the magnifier is in new style.",
    "links" : [ ]
  }, {
    "name" : "mLeftCutWidth",
    "type" : "int",
    "comment" : " The width of the cut region on the left edge of the pixel copy source rect.",
    "links" : [ ]
  }, {
    "name" : "mRightCutWidth",
    "type" : "int",
    "comment" : " The width of the cut region on the right edge of the pixel copy source rect.",
    "links" : [ ]
  }, {
    "name" : "mLeftBound",
    "type" : "int",
    "comment" : " The horizontal bounds of the content source in pixels, relative to the view.",
    "links" : [ ]
  }, {
    "name" : "mRightBound",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRamp",
    "type" : "int",
    "comment" : " The width of the ramp region in pixels on the left & right sides of the fish-eye effect.",
    "links" : [ ]
  }, {
    "name" : "SOURCE_BOUND_MAX_IN_SURFACE",
    "type" : "int",
    "comment" : "\n     * A source bound that will extend as much as possible, while remaining within the surface\n     * the content is copied from.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_BOUND_MAX_VISIBLE",
    "type" : "int",
    "comment" : "\n     * A source bound that will extend as much as possible, while remaining within the\n     * visible region of the magnified view, as determined by\n     * {@link View#getGlobalVisibleRect(Rect)}.\n     ",
    "links" : [ "android.view.SurfaceView#getGlobalVisibleRect(Rect)" ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "\n     * See {@link #setOnOperationCompleteCallback(Callback)}.\n     ",
    "links" : [ "#setOnOperationCompleteCallback(Callback)" ]
  } ],
  "methods" : [ {
    "name" : " static Builder createBuilderWithOldMagnifierDefaults(final View view)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getDeviceDefaultDialogCornerRadius(final Context context)",
    "returnType" : "float",
    "comment" : "\n     * Returns the device default theme dialog corner radius attribute.\n     * We retrieve this from the device default theme to avoid\n     * using the values set in the custom application themes.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSourceHorizontalBounds(int left, int right)",
    "returnType" : "void",
    "comment" : "\n     * Sets the horizontal bounds of the source when showing the magnifier.\n     * This is used for new style magnifier. e.g. limit the source bounds by the text line bounds.\n     *\n     * @param left the left of the bounds, relative to the view.\n     * @param right the right of the bounds, relative to the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void show(@FloatRange(from = 0) float sourceCenterX, @FloatRange(from = 0) float sourceCenterY)",
    "returnType" : "void",
    "comment" : "\n     * Shows the magnifier on the screen. The method takes the coordinates of the center\n     * of the content source going to be magnified and copied to the magnifier. The coordinates\n     * are relative to the top left corner of the magnified view. The magnifier will be\n     * positioned such that its center will be at the default offset from the center of the source.\n     * The default offset can be specified using the method\n     * {@link Builder#setDefaultSourceToMagnifierOffset(int, int)}. If the offset should\n     * be different across calls to this method, you should consider to use method\n     * {@link #show(float, float, float, float)} instead.\n     *\n     * @param sourceCenterX horizontal coordinate of the source center, relative to the view\n     * @param sourceCenterY vertical coordinate of the source center, relative to the view\n     *\n     * @see Builder#setDefaultSourceToMagnifierOffset(int, int)\n     * @see Builder#getDefaultHorizontalSourceToMagnifierOffset()\n     * @see Builder#getDefaultVerticalSourceToMagnifierOffset()\n     * @see #show(float, float, float, float)\n     ",
    "links" : [ "#setDefaultSourceToMagnifierOffset(int", "#show(float" ]
  }, {
    "name" : "public void show(@FloatRange(from = 0) float sourceCenterX, @FloatRange(from = 0) float sourceCenterY, float magnifierCenterX, float magnifierCenterY)",
    "returnType" : "void",
    "comment" : "\n     * Shows the magnifier on the screen at a position that is independent from its content\n     * position. The first two arguments represent the coordinates of the center of the\n     * content source going to be magnified and copied to the magnifier. The last two arguments\n     * represent the coordinates of the center of the magnifier itself. All four coordinates\n     * are relative to the top left corner of the magnified view. If you consider using this\n     * method such that the offset between the source center and the magnifier center coordinates\n     * remains constant, you should consider using method {@link #show(float, float)} instead.\n     *\n     * @param sourceCenterX horizontal coordinate of the source center relative to the view\n     * @param sourceCenterY vertical coordinate of the source center, relative to the view\n     * @param magnifierCenterX horizontal coordinate of the magnifier center, relative to the view\n     * @param magnifierCenterY vertical coordinate of the magnifier center, relative to the view\n     ",
    "links" : [ "#show(float" ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Dismisses the magnifier from the screen. Calling this on a dismissed magnifier is a no-op.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update()",
    "returnType" : "void",
    "comment" : "\n     * Asks the magnifier to update its content. It uses the previous coordinates passed to\n     * {@link #show(float, float)} or {@link #show(float, float, float, float)}. The\n     * method only has effect if the magnifier is currently showing.\n     ",
    "links" : [ "#show(float" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * @return the width of the magnifier window, in pixels\n     * @see Magnifier.Builder#setSize(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * @return the height of the magnifier window, in pixels\n     * @see Magnifier.Builder#setSize(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceWidth()",
    "returnType" : "int",
    "comment" : "\n     * @return the initial width of the content magnified and copied to the magnifier, in pixels\n     * @see Magnifier.Builder#setSize(int, int)\n     * @see Magnifier.Builder#setInitialZoom(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceHeight()",
    "returnType" : "int",
    "comment" : "\n     * @return the initial height of the content magnified and copied to the magnifier, in pixels\n     * @see Magnifier.Builder#setSize(int, int)\n     * @see Magnifier.Builder#setInitialZoom(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setZoom(@FloatRange(from = 0f) float zoom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the zoom to be applied to the chosen content before being copied to the magnifier popup.\n     * The change will become effective at the next #show or #update call.\n     * @param zoom the zoom to be set\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateSourceFactors(final int sourceHeight, final float zoom)",
    "returnType" : "void",
    "comment" : "\n     * Updates the factors of source which may impact the magnifier's size.\n     * This can be called while the magnifier is showing and moving.\n     * @param sourceHeight the new source height.\n     * @param zoom the new zoom factor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getZoom()",
    "returnType" : "float",
    "comment" : "\n     * Returns the zoom to be applied to the magnified view region copied to the magnifier.\n     * If the zoom is x and the magnifier window size is (width, height), the original size\n     * of the content being magnified will be (width / x, height / x).\n     * @return the zoom applied to the content\n     * @see Magnifier.Builder#setInitialZoom(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getElevation()",
    "returnType" : "float",
    "comment" : "\n     * @return the elevation set for the magnifier window, in pixels\n     * @see Magnifier.Builder#setElevation(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCornerRadius()",
    "returnType" : "float",
    "comment" : "\n     * @return the corner radius of the magnifier window, in pixels\n     * @see Magnifier.Builder#setCornerRadius(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultHorizontalSourceToMagnifierOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the horizontal offset, in pixels, to be applied to the source center position\n     * to obtain the magnifier center position when {@link #show(float, float)} is called.\n     * The value is ignored when {@link #show(float, float, float, float)} is used instead.\n     *\n     * @return the default horizontal offset between the source center and the magnifier\n     * @see Magnifier.Builder#setDefaultSourceToMagnifierOffset(int, int)\n     * @see Magnifier#show(float, float)\n     ",
    "links" : [ "#show(float" ]
  }, {
    "name" : "public int getDefaultVerticalSourceToMagnifierOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the vertical offset, in pixels, to be applied to the source center position\n     * to obtain the magnifier center position when {@link #show(float, float)} is called.\n     * The value is ignored when {@link #show(float, float, float, float)} is used instead.\n     *\n     * @return the default vertical offset between the source center and the magnifier\n     * @see Magnifier.Builder#setDefaultSourceToMagnifierOffset(int, int)\n     * @see Magnifier#show(float, float)\n     ",
    "links" : [ "#show(float" ]
  }, {
    "name" : "public Drawable getOverlay()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the overlay to be drawn on the top of the magnifier, or\n     * {@code null} if no overlay should be drawn.\n     * @return the overlay\n     * @see Magnifier.Builder#setOverlay(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isClippingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the magnifier position will be adjusted such that the magnifier will be\n     * fully within the bounds of the main application window, by also avoiding any overlap\n     * with system insets (such as the one corresponding to the status bar) i.e. whether the\n     * area where the magnifier can be positioned will be clipped to the main application window\n     * and the system insets.\n     * @return whether the magnifier position will be adjusted\n     * @see Magnifier.Builder#setClippingEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Point getPosition()",
    "returnType" : "Point",
    "comment" : "\n     * Returns the top left coordinates of the magnifier, relative to the main application\n     * window. They will be determined by the coordinates of the last {@link #show(float, float)}\n     * or {@link #show(float, float, float, float)} call, adjusted to take into account any\n     * potential clamping behavior. The method can be used immediately after a #show\n     * call to find out where the magnifier will be positioned. However, the position of the\n     * magnifier will not be updated visually in the same frame, due to the async nature of\n     * the content copying and of the magnifier rendering.\n     * The method will return {@code null} if #show has not yet been called, or if the last\n     * operation performed was a #dismiss.\n     *\n     * @return the top left coordinates of the magnifier\n     ",
    "links" : [ "#show(float" ]
  }, {
    "name" : "public Point getSourcePosition()",
    "returnType" : "Point",
    "comment" : "\n     * Returns the top left coordinates of the magnifier source (i.e. the view region going to\n     * be magnified and copied to the magnifier), relative to the window or surface the content\n     * is copied from. The content will be copied:\n     * - if the magnified view is a {@link SurfaceView}, from the surface backing it\n     * - otherwise, from the surface backing the main application window, and the coordinates\n     *   returned will be relative to the main application window\n     * The method will return {@code null} if #show has not yet been called, or if the last\n     * operation performed was a #dismiss.\n     *\n     * @return the top left coordinates of the magnifier source\n     ",
    "links" : [ "android.view.SurfaceView" ]
  }, {
    "name" : "private void obtainSurfaces()",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the surfaces used by the magnifier:\n     * - a parent surface for the magnifier surface. This will usually be the main app window.\n     * - a surface where the magnified content will be copied from. This will be the main app\n     *   window unless the magnified view is a SurfaceView, in which case its backing surface\n     *   will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void obtainContentCoordinates(final float xPosInView, final float yPosInView)",
    "returnType" : "void",
    "comment" : "\n     * Computes the coordinates of the center of the content going to be displayed in the\n     * magnifier. These are relative to the surface the content is copied from.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void obtainWindowCoordinates(final float xWindowPos, final float yWindowPos)",
    "returnType" : "void",
    "comment" : "\n     * Computes the coordinates of the top left corner of the magnifier window.\n     * These are relative to the surface the magnifier window is attached to.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void performPixelCopy(final int startXInSurface, final int startYInSurface, final boolean updateWindowPosition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onPixelCopyFailed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Point getCurrentClampedWindowCoordinates()",
    "returnType" : "Point",
    "comment" : "\n     * Clamp window coordinates inside the surface the magnifier is attached to, to avoid\n     * displaying the magnifier out of screen or overlapping with system insets.\n     * @return the current window coordinates, after they are clamped inside the parent surface\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnOperationCompleteCallback(final Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a callback which will be invoked at the end of the next\n     * {@link #show(float, float)} or {@link #update()} operation.\n     *\n     * @hide\n     ",
    "links" : [ "#show(float", "#update()" ]
  }, {
    "name" : "public Bitmap getContent()",
    "returnType" : "Bitmap",
    "comment" : "\n     * @return the drawing being currently displayed in the magnifier, as bitmap\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getOriginalContent()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a bitmap containing the content that was magnified and drew to the\n     * magnifier, at its original size, without the overlay applied.\n     * @return the content that is magnified, as bitmap\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PointF getMagnifierDefaultSize()",
    "returnType" : "PointF",
    "comment" : "\n     * @return the size of the magnifier window in dp\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "NONEXISTENT_PREVIOUS_CONFIG_VALUE", "sPixelCopyHandlerThread", "FISHEYE_RAMP_WIDTH", "mView", "mViewCoordinatesInSurface", "mWindow", "mWindowWidth", "mWindowHeight", "mZoom", "mSourceWidth", "mSourceHeight", "mDirtyState", "mWindowElevation", "mWindowCornerRadius", "mOverlay", "mDefaultHorizontalSourceToMagnifierOffset", "mDefaultVerticalSourceToMagnifierOffset", "mClippingEnabled", "mLeftContentBound", "mTopContentBound", "mRightContentBound", "mBottomContentBound", "mParentSurface", "mContentCopySurface", "mWindowCoords", "mClampedCenterZoomCoords", "mPrevStartCoordsInSurface", "mPrevShowSourceCoords", "mPrevShowWindowCoords", "mPixelCopyRequestRect", "mLock", "mDestroyLock", "mIsFishEyeStyle", "mLeftCutWidth", "mRightCutWidth", "mLeftBound", "mRightBound", "mRamp", "SOURCE_BOUND_MAX_IN_SURFACE", "SOURCE_BOUND_MAX_VISIBLE", "mCallback" ],
  "methodNames" : [ " static Builder createBuilderWithOldMagnifierDefaults(final View view)", "private static float getDeviceDefaultDialogCornerRadius(final Context context)", " void setSourceHorizontalBounds(int left, int right)", "public void show(@FloatRange(from = 0) float sourceCenterX, @FloatRange(from = 0) float sourceCenterY)", "public void show(@FloatRange(from = 0) float sourceCenterX, @FloatRange(from = 0) float sourceCenterY, float magnifierCenterX, float magnifierCenterY)", "public void dismiss()", "public void update()", "public int getWidth()", "public int getHeight()", "public int getSourceWidth()", "public int getSourceHeight()", "public void setZoom(@FloatRange(from = 0f) float zoom)", " void updateSourceFactors(final int sourceHeight, final float zoom)", "public float getZoom()", "public float getElevation()", "public float getCornerRadius()", "public int getDefaultHorizontalSourceToMagnifierOffset()", "public int getDefaultVerticalSourceToMagnifierOffset()", "public Drawable getOverlay()", "public boolean isClippingEnabled()", "public Point getPosition()", "public Point getSourcePosition()", "private void obtainSurfaces()", "private void obtainContentCoordinates(final float xPosInView, final float yPosInView)", "private void obtainWindowCoordinates(final float xWindowPos, final float yWindowPos)", "private void performPixelCopy(final int startXInSurface, final int startYInSurface, final boolean updateWindowPosition)", "private void onPixelCopyFailed()", "private Point getCurrentClampedWindowCoordinates()", "public void setOnOperationCompleteCallback(final Callback callback)", "public Bitmap getContent()", "public Bitmap getOriginalContent()", "public static PointF getMagnifierDefaultSize()" ]
}