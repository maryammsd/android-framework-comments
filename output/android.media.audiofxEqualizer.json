{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/Equalizer.java",
  "packageName" : "android.media.audiofx",
  "className" : "Equalizer",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_NUM_BANDS",
    "type" : "int",
    "comment" : "\n     * Number of bands. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_LEVEL_RANGE",
    "type" : "int",
    "comment" : "\n     * Band level range. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_BAND_LEVEL",
    "type" : "int",
    "comment" : "\n     * Band level. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_CENTER_FREQ",
    "type" : "int",
    "comment" : "\n     * Band center frequency. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_BAND_FREQ_RANGE",
    "type" : "int",
    "comment" : "\n     * Band frequency range. Parameter ID for\n     * {@link android.media.audiofx.Equalizer.OnParameterChangeListener}\n     ",
    "links" : [ "android.media.audiofx.Equalizer.OnParameterChangeListener" ]
  }, {
    "name" : "PARAM_GET_BAND",
    "type" : "int",
    "comment" : "\n     * Band for a given frequency. Parameter ID for OnParameterChangeListener\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_CURRENT_PRESET",
    "type" : "int",
    "comment" : "\n     * Current preset. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_GET_NUM_OF_PRESETS",
    "type" : "int",
    "comment" : "\n     * Request number of presets. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_GET_PRESET_NAME",
    "type" : "int",
    "comment" : "\n     * Request preset name. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_PROPERTIES",
    "type" : "int",
    "comment" : " used by setProperties()/getProperties",
    "links" : [ ]
  }, {
    "name" : "PARAM_STRING_SIZE_MAX",
    "type" : "int",
    "comment" : "\n     * Maximum size for preset name\n     ",
    "links" : [ ]
  }, {
    "name" : "mNumBands",
    "type" : "short",
    "comment" : "\n     * Number of bands implemented by Equalizer engine\n     ",
    "links" : [ ]
  }, {
    "name" : "mNumPresets",
    "type" : "int",
    "comment" : "\n     * Number of presets implemented by Equalizer engine\n     ",
    "links" : [ ]
  }, {
    "name" : "mPresetNames",
    "type" : "String[]",
    "comment" : "\n     * Names of presets implemented by Equalizer engine\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change event from AudioEffect super class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public short getNumberOfBands() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the number of frequency bands supported by the Equalizer engine.\n     * @return the number of bands\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short[] getBandLevelRange() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short[]",
    "comment" : "\n     * Gets the level range for use by {@link #setBandLevel(short,short)}. The level is expressed in\n     * milliBel.\n     * @return the band level range in an array of short integers. The first element is the lower\n     * limit of the range, the second element the upper limit.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#setBandLevel" ]
  }, {
    "name" : "public void setBandLevel(short band, short level) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the given equalizer band to the given gain value.\n     * @param band frequency band that will have the new gain. The numbering of the bands starts\n     * from 0 and ends at (number of bands - 1).\n     * @param level new gain in millibels that will be set to the given band. getBandLevelRange()\n     * will define the maximum and minimum values.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     * @see #getNumberOfBands()\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getBandLevel(short band) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the gain set for the given equalizer band.\n     * @param band frequency band whose gain is requested. The numbering of the bands starts\n     * from 0 and ends at (number of bands - 1).\n     * @return the gain in millibels of the given band.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCenterFreq(short band) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "int",
    "comment" : "\n     * Gets the center frequency of the given band.\n     * @param band frequency band whose center frequency is requested. The numbering of the bands\n     * starts from 0 and ends at (number of bands - 1).\n     * @return the center frequency in milliHertz\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getBandFreqRange(short band) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "int[]",
    "comment" : "\n     * Gets the frequency range of the given frequency band.\n     * @param band frequency band whose frequency range is requested. The numbering of the bands\n     * starts from 0 and ends at (number of bands - 1).\n     * @return the frequency range in millHertz in an array of integers. The first element is the\n     * lower limit of the range, the second element the upper limit.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getBand(int frequency) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the band that has the most effect on the given frequency.\n     * @param frequency frequency in milliHertz which is to be equalized via the returned band.\n     * @return the frequency band that has most effect on the given frequency.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getCurrentPreset() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets current preset.\n     * @return the preset that is set at the moment.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void usePreset(short preset) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the equalizer according to the given preset.\n     * @param preset new preset that will be taken into use. The valid range is [0,\n     * number of presets-1].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     * @see #getNumberOfPresets()\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getNumberOfPresets() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the total number of presets the equalizer supports. The presets will have indices\n     * [0, number of presets-1].\n     * @return the number of presets the equalizer supports.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPresetName(short preset)",
    "returnType" : "String",
    "comment" : "\n     * Gets the preset name based on the index.\n     * @param preset index of the preset. The valid range is [0, number of presets-1].\n     * @return a string containing the name of the given preset.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public Equalizer.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "Equalizer.Settings",
    "comment" : "\n     * Gets the equalizer properties. This method is useful when a snapshot of current\n     * equalizer settings must be saved by the application.\n     * @return an Equalizer.Settings object containing all current parameters values\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(Equalizer.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the equalizer properties. This method is useful when equalizer settings have to\n     * be applied from a previous backup.\n     * @param settings an Equalizer.Settings object containing the properties to apply\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PARAM_NUM_BANDS", "PARAM_LEVEL_RANGE", "PARAM_BAND_LEVEL", "PARAM_CENTER_FREQ", "PARAM_BAND_FREQ_RANGE", "PARAM_GET_BAND", "PARAM_CURRENT_PRESET", "PARAM_GET_NUM_OF_PRESETS", "PARAM_GET_PRESET_NAME", "PARAM_PROPERTIES", "PARAM_STRING_SIZE_MAX", "mNumBands", "mNumPresets", "mPresetNames", "mParamListener", "mBaseParamListener", "mParamListenerLock" ],
  "methodNames" : [ "public short getNumberOfBands() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short[] getBandLevelRange() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setBandLevel(short band, short level) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getBandLevel(short band) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public int getCenterFreq(short band) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public int[] getBandFreqRange(short band) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getBand(int frequency) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getCurrentPreset() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void usePreset(short preset) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getNumberOfPresets() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public String getPresetName(short preset)", "public void setParameterListener(OnParameterChangeListener listener)", "public Equalizer.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setProperties(Equalizer.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException" ]
}