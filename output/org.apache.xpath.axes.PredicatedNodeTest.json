{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/PredicatedNodeTest.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "PredicatedNodeTest",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_predCount",
    "type" : "int",
    "comment" : " Only for clones for findLastPos.  See bug4638.",
    "links" : [ ]
  }, {
    "name" : "m_foundLast",
    "type" : "boolean",
    "comment" : " This is true if nextNode returns null. ",
    "links" : [ ]
  }, {
    "name" : "m_lpi",
    "type" : "LocPathIterator",
    "comment" : " The owning location path iterator.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_predicateIndex",
    "type" : "int",
    "comment" : "\n   * Which predicate we are executing.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_predicates",
    "type" : "Expression[]",
    "comment" : " The list of predicate expressions. Is static and does not need \n   *  to be deep cloned.\n   *  @serial \n   ",
    "links" : [ ]
  }, {
    "name" : "m_proximityPositions",
    "type" : "int[]",
    "comment" : "\n   * An array of counts that correspond to the number\n   * of predicates the step contains.\n   ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_PREDICATECOUNTING",
    "type" : "boolean",
    "comment" : " If true, diagnostic messages about predicate execution will be posted.  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Read the object from a serialization stream.\n   *\n   * @param stream Input stream to read from\n   *\n   * @throws java.io.IOException\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a cloned PrdicatedNodeTest.\n   *\n   * @return A new PredicatedNodeTest that can be used without mutating this one.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getPredicateCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of predicates that this walker has.\n   *\n   * @return the number of predicates that this walker has.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPredicateCount(int count)",
    "returnType" : "void",
    "comment" : "\n   * Set the number of predicates that this walker has.  This does more \n   * that one would think, as it creates a new predicate array of the \n   * size of the count argument, and copies count predicates into the new \n   * one from the old, and then reassigns the predicates value.  All this \n   * to keep from having to have a predicate count value.\n   *\n   * @param count The number of predicates, which must be equal or less \n   *               than the existing count.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void initPredicateInfo(Compiler compiler, int opPos) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Init predicate info.\n   *\n   * @param compiler The Compiler object that has information about this \n   *                 walker in the op map.\n   * @param opPos The op code position of this location step.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getPredicate(int index)",
    "returnType" : "Expression",
    "comment" : "\n   * Get a predicate expression at the given index.\n   *\n   *\n   * @param index Index of the predicate.\n   *\n   * @return A predicate expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getProximityPosition()",
    "returnType" : "int",
    "comment" : "\n   * Get the current sub-context position.\n   *\n   * @return The node position of this walker in the sub-context node list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getProximityPosition(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the current sub-context position.\n   *\n   * @param xctxt The XPath runtime context.\n   *\n   * @return The node position of this walker in the sub-context node list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getLastPos(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the index of the last node that can be itterated to.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return the index of the last node that can be itterated to.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getProximityPosition(int predicateIndex)",
    "returnType" : "int",
    "comment" : "\n   * Get the current sub-context position.\n   *\n   * @param predicateIndex The index of the predicate where the proximity \n   *                       should be taken from.\n   *\n   * @return The node position of this walker in the sub-context node list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void resetProximityPositions()",
    "returnType" : "void",
    "comment" : "\n   * Reset the proximity positions counts.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void initProximityPosition(int i) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Init the proximity position to zero for a forward axes.\n   *\n   * @param i The index into the m_proximityPositions array.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void countProximityPosition(int i)",
    "returnType" : "void",
    "comment" : "\n   * Count forward one proximity position.\n   *\n   * @param i The index into the m_proximityPositions array, where the increment \n   *          will occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReverseAxes()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this is a reverse axes.\n   *\n   * @return false, unless a derived class overrides.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getPredicateIndex()",
    "returnType" : "int",
    "comment" : "\n   * Get which predicate is executing.\n   *\n   * @return The current predicate index, or -1 if no predicate is executing.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean executePredicates(int context, XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Process the predicates.\n   *\n   * @param context The current context node.\n   * @param xctxt The XPath runtime context.\n   *\n   * @return the result of executing the predicate expressions.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String nodeToString(int n)",
    "returnType" : "String",
    "comment" : "\n   * Diagnostics.\n   *\n   * @param n Node to give diagnostic information about, or null.\n   *\n   * @return Informative string about the argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "public short acceptNode(int n)",
    "returnType" : "short",
    "comment" : "\n   *  Test whether a specified node is visible in the logical view of a\n   * TreeWalker or NodeIterator. This function will be called by the\n   * implementation of TreeWalker and NodeIterator; it is not intended to\n   * be called directly from user code.\n   * @param n  The node to check to see if it passes the filter or not.\n   * @return  a constant to determine whether the node is accepted,\n   *   rejected, or skipped, as defined  above .\n   ",
    "links" : [ ]
  }, {
    "name" : "public LocPathIterator getLocPathIterator()",
    "returnType" : "LocPathIterator",
    "comment" : "\n   * Get the owning location path iterator.\n   *\n   * @return the owning location path iterator, which should not be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLocPathIterator(LocPathIterator li)",
    "returnType" : "void",
    "comment" : "\n   * Set the location path iterator owner for this walker.  Besides \n   * initialization, this function is called during cloning operations.\n   *\n   * @param li non-null reference to the owning location path iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside \n   * the current subtree.\n   * \n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callPredicateVisitors(XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n\t * This will traverse the heararchy, calling the visitor for \n\t * each member.  If the called visitor method returns \n\t * false, the subtree should not be called.\n\t * \n\t * @param visitor The visitor whose appropriate method will be called.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Expression#deepEquals(Expression)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException", "public Object clone() throws CloneNotSupportedException", "public int getPredicateCount()", "public void setPredicateCount(int count)", "protected void initPredicateInfo(Compiler compiler, int opPos) throws javax.xml.transform.TransformerException", "public Expression getPredicate(int index)", "public int getProximityPosition()", "public int getProximityPosition(XPathContext xctxt)", "public abstract int getLastPos(XPathContext xctxt)", "protected int getProximityPosition(int predicateIndex)", "public void resetProximityPositions()", "public void initProximityPosition(int i) throws javax.xml.transform.TransformerException", "protected void countProximityPosition(int i)", "public boolean isReverseAxes()", "public int getPredicateIndex()", " boolean executePredicates(int context, XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "protected String nodeToString(int n)", "public short acceptNode(int n)", "public LocPathIterator getLocPathIterator()", "public void setLocPathIterator(LocPathIterator li)", "public boolean canTraverseOutsideSubtree()", "public void callPredicateVisitors(XPathVisitor visitor)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_predCount", "m_foundLast", "m_lpi", "m_predicateIndex", "m_predicates", "m_proximityPositions", "DEBUG_PREDICATECOUNTING" ]
}