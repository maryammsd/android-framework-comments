{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AudioPlaybackCaptureConfiguration.java",
  "packageName" : "android.media",
  "className" : "AudioPlaybackCaptureConfiguration",
  "comment" : "\n * Configuration for capturing audio played by other apps.\n *\n *  When capturing audio signals played by other apps (and yours),\n *  you will only capture a mix of the audio signals played by players\n *  (such as AudioTrack or MediaPlayer) which present the following characteristics:\n *  <ul>\n *  <li> the usage value MUST be {@link AudioAttributes#USAGE_UNKNOWN} or\n *       {@link AudioAttributes#USAGE_GAME}\n *       or {@link AudioAttributes#USAGE_MEDIA}. All other usages CAN NOT be captured. </li>\n *  <li> AND the capture policy set by their app (with {@link AudioManager#setAllowedCapturePolicy})\n *       or on each player (with {@link AudioAttributes.Builder#setAllowedCapturePolicy}) is\n *       {@link AudioAttributes#ALLOW_CAPTURE_BY_ALL}, whichever is the most strict. </li>\n *  <li> AND their app attribute allowAudioPlaybackCapture in their manifest\n *       MUST either be: <ul>\n *       <li> set to \"true\" </li>\n *       <li> not set, and their {@code targetSdkVersion} MUST be equal to or greater than\n *            {@link android.os.Build.VERSION_CODES#Q}.\n *            Ie. Apps that do not target at least Android Q must explicitly opt-in to be captured\n *            by a MediaProjection. </li></ul>\n *  <li> AND their apps MUST be in the same user profile as your app\n *       (eg work profile cannot capture user profile apps and vice-versa). </li>\n *  </ul>\n *\n * <p>An example for creating a capture configuration for capturing all media playback:\n *\n * <pre>\n *     MediaProjection mediaProjection;\n *     // Retrieve a audio capable projection from the MediaProjectionManager\n *     AudioPlaybackCaptureConfiguration config =\n *         new AudioPlaybackCaptureConfiguration.Builder(mediaProjection)\n *         .addMatchingUsage(AudioAttributes.USAGE_MEDIA)\n *         .build();\n *     AudioRecord record = new AudioRecord.Builder()\n *         .setAudioPlaybackCaptureConfig(config)\n *         .build();\n * </pre>\n *\n * @see Builder\n * @see android.media.projection.MediaProjectionManager#getMediaProjection(int, Intent)\n * @see AudioRecord.Builder#setAudioPlaybackCaptureConfig(AudioPlaybackCaptureConfiguration)\n ",
  "variables" : [ {
    "name" : "mAudioMixingRule",
    "type" : "AudioMixingRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjection",
    "type" : "MediaProjection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MediaProjection getMediaProjection()",
    "returnType" : "MediaProjection",
    "comment" : "\n     * @return the {@code MediaProjection} used to build this object.\n     * @see Builder#Builder(MediaProjection)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getMatchingUsages()",
    "returnType" : "int[]",
    "comment" : " @return the usages passed to {@link Builder#addMatchingUsage(int)}. ",
    "links" : [ "#addMatchingUsage(int)" ]
  }, {
    "name" : "public int[] getMatchingUids()",
    "returnType" : "int[]",
    "comment" : " @return the UIDs passed to {@link Builder#addMatchingUid(int)}. ",
    "links" : [ "#addMatchingUid(int)" ]
  }, {
    "name" : "public int[] getExcludeUsages()",
    "returnType" : "int[]",
    "comment" : " @return the usages passed to {@link Builder#excludeUsage(int)}. ",
    "links" : [ "#excludeUsage(int)" ]
  }, {
    "name" : "public int[] getExcludeUids()",
    "returnType" : "int[]",
    "comment" : " @return the UIDs passed to {@link Builder#excludeUid(int)}.  ",
    "links" : [ "#excludeUid(int)" ]
  }, {
    "name" : "private int[] getIntPredicates(int rule, ToIntFunction<AudioMixMatchCriterion> getPredicate)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AudioMix createAudioMix(@NonNull AudioFormat audioFormat)",
    "returnType" : "AudioMix",
    "comment" : "\n     * Returns a mix that routes audio back into the app while still playing it from the speakers.\n     *\n     * @param audioFormat The format in which to capture the audio.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mAudioMixingRule", "mProjection" ],
  "methodNames" : [ "public MediaProjection getMediaProjection()", "public int[] getMatchingUsages()", "public int[] getMatchingUids()", "public int[] getExcludeUsages()", "public int[] getExcludeUids()", "private int[] getIntPredicates(int rule, ToIntFunction<AudioMixMatchCriterion> getPredicate)", " AudioMix createAudioMix(@NonNull AudioFormat audioFormat)" ]
}