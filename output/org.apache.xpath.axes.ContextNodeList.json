{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/ContextNodeList.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "ContextNodeList",
  "comment" : "\n * Classes who implement this interface can be a\n * <a href=\"http://www.w3.org/TR/xslt#dt-current-node-list\">current node list</a>,\n * also refered to here as a <term>context node list</term>.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Node getCurrentNode()",
    "returnType" : "Node",
    "comment" : "\n   * Get the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a>.\n   *\n   *\n   * @return The current node, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentPos()",
    "returnType" : "int",
    "comment" : "\n   * Get the current position, which is one less than\n   * the next nextNode() call will retrieve.  i.e. if\n   * you call getCurrentPos() and the return is 0, the next\n   * fetch will take place at index 1.\n   *\n   * @return The position of the\n   * <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a>\n   * in the  <a href=\"http://www.w3.org/TR/xslt#dt-current-node-list\">current node list</a>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldCacheNodes(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * If setShouldCacheNodes(true) is called, then nodes will\n   * be cached.  They are not cached by default.\n   *\n   * @param b true if the nodes should be cached.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void runTo(int index)",
    "returnType" : "void",
    "comment" : "\n   * If an index is requested, NodeSetDTM will call this method\n   * to run the iterator to the index.  By default this sets\n   * m_next to the index.  If the index argument is -1, this\n   * signals that the iterator should be run to the end.\n   *\n   * @param index The index to run to, or -1 if the iterator should be run\n   *              to the end.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPos(int i)",
    "returnType" : "void",
    "comment" : "\n   * Set the current position in the node set.\n   * @param i Must be a valid index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list.\n   *\n   * @return The number of nodes in this node list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFresh()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this NodeSetDTM is \"fresh\", in other words, if\n   * the first nextNode() that is called will return the\n   * first node in the set.\n   *\n   * @return true if the iteration of this list has not yet begun.\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeIterator cloneWithReset() throws CloneNotSupportedException",
    "returnType" : "NodeIterator",
    "comment" : "\n   * Get a cloned Iterator that is reset to the start of the iteration.\n   *\n   * @return A clone of this iteration that has been reset.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a clone of this iterator.  Be aware that this operation may be\n   * somewhat expensive.\n   *\n   *\n   * @return A clone of this object.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLast()",
    "returnType" : "int",
    "comment" : "\n   * Get the index of the last node in this list.\n   *\n   *\n   * @return the index of the last node in this list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLast(int last)",
    "returnType" : "void",
    "comment" : "\n   * Set the index of the last node in this list.\n   *\n   *\n   * @param last the index of the last node in this list.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node getCurrentNode()", "public int getCurrentPos()", "public void reset()", "public void setShouldCacheNodes(boolean b)", "public void runTo(int index)", "public void setCurrentPos(int i)", "public int size()", "public boolean isFresh()", "public NodeIterator cloneWithReset() throws CloneNotSupportedException", "public Object clone() throws CloneNotSupportedException", "public int getLast()", "public void setLast(int last)" ],
  "variableNames" : [ ]
}