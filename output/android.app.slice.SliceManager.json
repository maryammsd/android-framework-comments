{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/slice/SliceManager.java",
  "packageName" : "android.app.slice",
  "className" : "SliceManager",
  "comment" : "\n * Class to handle interactions with {@link Slice}s.\n * <p>\n * The SliceManager manages permissions and pinned state for slices.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_REQUEST_SLICE_PERMISSION",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SLICE",
    "type" : "String",
    "comment" : "\n     * Category used to resolve intents that can be rendered as slices.\n     * <p>\n     * This category should be included on intent filters on providers that extend\n     * {@link SliceProvider}.\n     * @see SliceProvider\n     * @see SliceProvider#onMapIntentToUri(Intent)\n     * @see #mapIntentToUri(Intent)\n     ",
    "links" : [ "android.app.slice.SliceProvider" ]
  }, {
    "name" : "SLICE_METADATA_KEY",
    "type" : "String",
    "comment" : "\n     * The meta-data key that allows an activity to easily be linked directly to a slice.\n     * <p>\n     * An activity can be statically linked to a slice uri by including a meta-data item\n     * for this key that contains a valid slice uri for the same application declaring\n     * the activity.\n     *\n     * <pre class=\"prettyprint\">\n     * {@literal\n     * <activity android:name=\"com.example.mypkg.MyActivity\">\n     *     <meta-data android:name=\"android.metadata.SLICE_URI\"\n     *                android:value=\"content://com.example.mypkg/main_slice\" />\n     *  </activity>}\n     * </pre>\n     *\n     * @see #mapIntentToUri(Intent)\n     * @see SliceProvider#onMapIntentToUri(Intent)\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISliceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void pinSlice(@NonNull Uri uri, @NonNull Set<SliceSpec> specs)",
    "returnType" : "void",
    "comment" : "\n     * Ensures that a slice is in a pinned state.\n     * <p>\n     * Pinned state is not persisted across reboots, so apps are expected to re-pin any slices\n     * they still care about after a reboot.\n     * <p>\n     * This may only be called by apps that are the default launcher for the device\n     * or the default voice interaction service. Otherwise will throw {@link SecurityException}.\n     *\n     * @param uri The uri of the slice being pinned.\n     * @param specs The list of supported {@link SliceSpec}s of the callback.\n     * @see SliceProvider#onSlicePinned(Uri)\n     * @see Intent#ACTION_ASSIST\n     * @see Intent#CATEGORY_HOME\n     ",
    "links" : [ "android.app.slice.SliceSpec", "SecurityException" ]
  }, {
    "name" : "public void pinSlice(@NonNull Uri uri, @NonNull List<SliceSpec> specs)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated TO BE REMOVED\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unpinSlice(@NonNull Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Remove a pin for a slice.\n     * <p>\n     * If the slice has no other pins/callbacks then the slice will be unpinned.\n     * <p>\n     * This may only be called by apps that are the default launcher for the device\n     * or the default voice interaction service. Otherwise will throw {@link SecurityException}.\n     *\n     * @param uri The uri of the slice being unpinned.\n     * @see #pinSlice\n     * @see SliceProvider#onSliceUnpinned(Uri)\n     * @see Intent#ACTION_ASSIST\n     * @see Intent#CATEGORY_HOME\n     ",
    "links" : [ "SecurityException" ]
  }, {
    "name" : "public boolean hasSliceAccess()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<SliceSpec> getPinnedSpecs(Uri uri)",
    "returnType" : "Set<SliceSpec>",
    "comment" : "\n     * Get the current set of specs for a pinned slice.\n     * <p>\n     * This is the set of specs supported for a specific pinned slice. It will take\n     * into account all clients and returns only specs supported by all.\n     * @see SliceSpec\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Uri> getPinnedSlices()",
    "returnType" : "List<Uri>",
    "comment" : "\n     * Get the list of currently pinned slices for this app.\n     * @see SliceProvider#onSlicePinned\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<Uri> getSliceDescendants(@NonNull Uri uri)",
    "returnType" : "Collection<Uri>",
    "comment" : "\n     * Obtains a list of slices that are descendants of the specified Uri.\n     * <p>\n     * Not all slice providers will implement this functionality, in which case,\n     * an empty collection will be returned.\n     *\n     * @param uri The uri to look for descendants under.\n     * @return All slices within the space.\n     * @see SliceProvider#onGetSliceDescendants(Uri)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Slice bindSlice(@NonNull Uri uri, @NonNull Set<SliceSpec> supportedSpecs)",
    "returnType" : "Slice",
    "comment" : "\n     * Turns a slice Uri into slice content.\n     *\n     * @param uri The URI to a slice provider\n     * @param supportedSpecs List of supported specs.\n     * @return The Slice provided by the app or null if none is given.\n     * @see Slice\n     ",
    "links" : [ ]
  }, {
    "name" : "public Slice bindSlice(@NonNull Uri uri, @NonNull List<SliceSpec> supportedSpecs)",
    "returnType" : "Slice",
    "comment" : "\n     * @deprecated TO BE REMOVED\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri mapIntentToUri(@NonNull Intent intent)",
    "returnType" : "Uri",
    "comment" : "\n     * Turns a slice intent into a slice uri. Expects an explicit intent.\n     * <p>\n     * This goes through a several stage resolution process to determine if any slice\n     * can represent this intent.\n     * <ol>\n     *  <li> If the intent contains data that {@link ContentResolver#getType} is\n     *  {@link SliceProvider#SLICE_TYPE} then the data will be returned.</li>\n     *  <li>If the intent explicitly points at an activity, and that activity has\n     *  meta-data for key {@link #SLICE_METADATA_KEY}, then the Uri specified there will be\n     *  returned.</li>\n     *  <li>Lastly, if the intent with {@link #CATEGORY_SLICE} added resolves to a provider, then\n     *  the provider will be asked to {@link SliceProvider#onMapIntentToUri} and that result\n     *  will be returned.</li>\n     *  <li>If no slice is found, then {@code null} is returned.</li>\n     * </ol>\n     * @param intent The intent associated with a slice.\n     * @return The Slice Uri provided by the app or null if none exists.\n     * @see Slice\n     * @see SliceProvider#onMapIntentToUri(Intent)\n     * @see Intent\n     ",
    "links" : [ "#CATEGORY_SLICE", "android.content.ContentResolver#getType", "#SLICE_METADATA_KEY", "android.app.slice.SliceProvider#SLICE_TYPE", "android.app.slice.SliceProvider#onMapIntentToUri" ]
  }, {
    "name" : "private String getAuthority(Intent intent)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Uri resolveStatic(@NonNull Intent intent, ContentResolver resolver)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Slice bindSlice(@NonNull Intent intent, @NonNull Set<SliceSpec> supportedSpecs)",
    "returnType" : "Slice",
    "comment" : "\n     * Turns a slice intent into slice content. Is a shortcut to perform the action\n     * of both {@link #mapIntentToUri(Intent)} and {@link #bindSlice(Uri, Set)} at once.\n     *\n     * @param intent The intent associated with a slice.\n     * @param supportedSpecs List of supported specs.\n     * @return The Slice provided by the app or null if none is given.\n     * @see Slice\n     * @see SliceProvider#onMapIntentToUri(Intent)\n     * @see Intent\n     ",
    "links" : [ "#mapIntentToUri(Intent)", "#bindSlice(Uri" ]
  }, {
    "name" : "public Slice bindSlice(@NonNull Intent intent, @NonNull List<SliceSpec> supportedSpecs)",
    "returnType" : "Slice",
    "comment" : "\n     * @deprecated TO BE REMOVED.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int checkSlicePermission(@NonNull Uri uri, int pid, int uid)",
    "returnType" : "int",
    "comment" : "\n     * Determine whether a particular process and user ID has been granted\n     * permission to access a specific slice URI.\n     *\n     * @param uri The uri that is being checked.\n     * @param pid The process ID being checked against.  Must be &gt; 0.\n     * @param uid The user ID being checked against.  A uid of 0 is the root\n     * user, which will pass every permission check.\n     *\n     * @return {@link PackageManager#PERMISSION_GRANTED} if the given\n     * pid/uid is allowed to access that uri, or\n     * {@link PackageManager#PERMISSION_DENIED} if it is not.\n     *\n     * @see #grantSlicePermission(String, Uri)\n     ",
    "links" : [ "android.content.pm.PackageManager#PERMISSION_DENIED", "android.content.pm.PackageManager#PERMISSION_GRANTED" ]
  }, {
    "name" : "public void grantSlicePermission(@NonNull String toPackage, @NonNull Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Grant permission to access a specific slice Uri to another package.\n     *\n     * @param toPackage The package you would like to allow to access the Uri.\n     * @param uri The Uri you would like to grant access to.\n     *\n     * @see #revokeSlicePermission\n     ",
    "links" : [ ]
  }, {
    "name" : "public void revokeSlicePermission(@NonNull String toPackage, @NonNull Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Remove permissions to access a particular content provider Uri\n     * that were previously added with {@link #grantSlicePermission} for a specific target\n     * package.  The given Uri will match all previously granted Uris that are the same or a\n     * sub-path of the given Uri.  That is, revoking \"content://foo/target\" will\n     * revoke both \"content://foo/target\" and \"content://foo/target/sub\", but not\n     * \"content://foo\".  It will not remove any prefix grants that exist at a\n     * higher level.\n     *\n     * @param toPackage The package you would like to allow to access the Uri.\n     * @param uri The Uri you would like to revoke access to.\n     *\n     * @see #grantSlicePermission\n     ",
    "links" : [ "#grantSlicePermission" ]
  }, {
    "name" : "public void enforceSlicePermission(Uri uri, String pkg, int pid, int uid, String[] autoGrantPermissions)",
    "returnType" : "void",
    "comment" : "\n     * Does the permission check to see if a caller has access to a specific slice.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantPermissionFromUser(Uri uri, String pkg, boolean allSlices)",
    "returnType" : "void",
    "comment" : "\n     * Called by SystemUI to grant a slice permission after a dialog is shown.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ACTION_REQUEST_SLICE_PERMISSION", "CATEGORY_SLICE", "SLICE_METADATA_KEY", "mService", "mContext", "mToken" ],
  "methodNames" : [ "public void pinSlice(@NonNull Uri uri, @NonNull Set<SliceSpec> specs)", "public void pinSlice(@NonNull Uri uri, @NonNull List<SliceSpec> specs)", "public void unpinSlice(@NonNull Uri uri)", "public boolean hasSliceAccess()", "public Set<SliceSpec> getPinnedSpecs(Uri uri)", "public List<Uri> getPinnedSlices()", "public Collection<Uri> getSliceDescendants(@NonNull Uri uri)", "public Slice bindSlice(@NonNull Uri uri, @NonNull Set<SliceSpec> supportedSpecs)", "public Slice bindSlice(@NonNull Uri uri, @NonNull List<SliceSpec> supportedSpecs)", "public Uri mapIntentToUri(@NonNull Intent intent)", "private String getAuthority(Intent intent)", "private Uri resolveStatic(@NonNull Intent intent, ContentResolver resolver)", "public Slice bindSlice(@NonNull Intent intent, @NonNull Set<SliceSpec> supportedSpecs)", "public Slice bindSlice(@NonNull Intent intent, @NonNull List<SliceSpec> supportedSpecs)", "public int checkSlicePermission(@NonNull Uri uri, int pid, int uid)", "public void grantSlicePermission(@NonNull String toPackage, @NonNull Uri uri)", "public void revokeSlicePermission(@NonNull String toPackage, @NonNull Uri uri)", "public void enforceSlicePermission(Uri uri, String pkg, int pid, int uid, String[] autoGrantPermissions)", "public void grantPermissionFromUser(Uri uri, String pkg, boolean allSlices)" ]
}