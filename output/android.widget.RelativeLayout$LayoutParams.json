{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/RelativeLayout.java",
  "packageName" : "android.widget",
  "className" : "LayoutParams",
  "comment" : "\n     * Specifies how a view is positioned within a {@link RelativeLayout}.\n     * The relative layout containing the view uses the value of these layout parameters to\n     * determine where to position the view on the screen.  If the view is not contained\n     * within a relative layout, these attributes are ignored.\n     *\n     * See the <a href=\"{@docRoot}guide/topics/ui/layout/relative.html\">Relative\n     * Layout</a> guide for example code demonstrating how to use relative layout's\n     * layout parameters in a layout XML.\n     *\n     * To learn more about layout parameters and how they differ from typical view attributes,\n     * see the <a href=\"{@docRoot}guide/topics/ui/declaring-layout.html#attributes\">Layouts\n     * guide</a>.\n     *\n     *\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignWithParentIfMissing\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_toLeftOf\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_toRightOf\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_above\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_below\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignBaseline\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignLeft\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignTop\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignRight\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignBottom\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignParentLeft\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignParentTop\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignParentRight\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignParentBottom\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_centerInParent\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_centerHorizontal\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_centerVertical\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_toStartOf\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_toEndOf\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignStart\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignEnd\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignParentStart\n     * @attr ref android.R.styleable#RelativeLayout_Layout_layout_alignParentEnd\n     ",
  "links" : [ "android.widget.RelativeLayout" ],
  "variables" : [ {
    "name" : "mRules",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialRules",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeft",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNeedsLayoutResolution",
    "type" : "boolean",
    "comment" : "\n         * Whether this view had any relative rules modified following the most\n         * recent resolution of layout direction.\n         ",
    "links" : [ ]
  }, {
    "name" : "mRulesChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRtlCompatibilityMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "alignWithParent",
    "type" : "boolean",
    "comment" : "\n         * When true, uses the parent as the anchor if the anchor doesn't exist or if\n         * the anchor's visibility is GONE.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String debug(String output)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addRule(int verb)",
    "returnType" : "void",
    "comment" : "\n         * Adds a layout rule to be interpreted by the RelativeLayout.\n         * <p>\n         * This method should only be used for verbs that don't refer to a\n         * sibling (ex. {@link #ALIGN_RIGHT}) or take a boolean\n         * value ({@link #TRUE} for true or 0 for false). To\n         * specify a verb that takes a subject, use {@link #addRule(int, int)}.\n         * <p>\n         * If the rule is relative to the layout direction (ex.\n         * {@link #ALIGN_PARENT_START}), then the layout direction must be\n         * resolved using {@link #resolveLayoutDirection(int)} before calling\n         * {@link #getRule(int)} an absolute rule (ex.\n         * {@link #ALIGN_PARENT_LEFT}.\n         *\n         * @param verb a layout verb, such as {@link #ALIGN_PARENT_LEFT}\n         * @see #addRule(int, int)\n         * @see #removeRule(int)\n         * @see #getRule(int)\n         ",
    "links" : [ "#TRUE", "#addRule(int", "#resolveLayoutDirection(int)", "#ALIGN_RIGHT", "#ALIGN_PARENT_START", "#getRule(int)", "#ALIGN_PARENT_LEFT" ]
  }, {
    "name" : "public void addRule(int verb, int subject)",
    "returnType" : "void",
    "comment" : "\n         * Adds a layout rule to be interpreted by the RelativeLayout.\n         * <p>\n         * Use this for verbs that refer to a sibling (ex.\n         * {@link #ALIGN_RIGHT}) or take a boolean value (ex.\n         * {@link #CENTER_IN_PARENT}).\n         * <p>\n         * If the rule is relative to the layout direction (ex.\n         * {@link #START_OF}), then the layout direction must be resolved using\n         * {@link #resolveLayoutDirection(int)} before calling\n         * {@link #getRule(int)} with an absolute rule (ex. {@link #LEFT_OF}.\n         *\n         * @param verb a layout verb, such as {@link #ALIGN_RIGHT}\n         * @param subject the ID of another view to use as an anchor, or a\n         *                boolean value (represented as {@link #TRUE} for true\n         *                or 0 for false)\n         * @see #addRule(int)\n         * @see #removeRule(int)\n         * @see #getRule(int)\n         ",
    "links" : [ "#CENTER_IN_PARENT", "#TRUE", "#resolveLayoutDirection(int)", "#ALIGN_RIGHT", "#START_OF", "#getRule(int)", "#LEFT_OF" ]
  }, {
    "name" : "public void removeRule(int verb)",
    "returnType" : "void",
    "comment" : "\n         * Removes a layout rule to be interpreted by the RelativeLayout.\n         * <p>\n         * If the rule is relative to the layout direction (ex.\n         * {@link #START_OF}, {@link #ALIGN_PARENT_START}, etc.) then the\n         * layout direction must be resolved using\n         * {@link #resolveLayoutDirection(int)} before before calling\n         * {@link #getRule(int)} with an absolute rule (ex. {@link #LEFT_OF}.\n         *\n         * @param verb One of the verbs defined by\n         *        {@link android.widget.RelativeLayout RelativeLayout}, such as\n         *         ALIGN_WITH_PARENT_LEFT.\n         * @see #addRule(int)\n         * @see #addRule(int, int)\n         * @see #getRule(int)\n         ",
    "links" : [ "#resolveLayoutDirection(int)", "#ALIGN_PARENT_START", "#START_OF", "android.widget.RelativeLayout", "#getRule(int)", "#LEFT_OF" ]
  }, {
    "name" : "public int getRule(int verb)",
    "returnType" : "int",
    "comment" : "\n         * Returns the layout rule associated with a specific verb.\n         *\n         * @param verb one of the verbs defined by {@link RelativeLayout}, such\n         *             as ALIGN_WITH_PARENT_LEFT\n         * @return the id of another view to use as an anchor, a boolean value\n         *         (represented as {@link RelativeLayout#TRUE} for true\n         *         or 0 for false), or -1 for verbs that don't refer to another\n         *         sibling (for example, ALIGN_WITH_PARENT_BOTTOM)\n         * @see #addRule(int)\n         * @see #addRule(int, int)\n         ",
    "links" : [ "android.widget.RelativeLayout#TRUE", "android.widget.RelativeLayout" ]
  }, {
    "name" : "private boolean hasRelativeRules()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isRelativeRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resolveRules(int layoutDirection)",
    "returnType" : "void",
    "comment" : " only the \"left\"/\"right\" rules at the end.",
    "links" : [ ]
  }, {
    "name" : "public int[] getRules(int layoutDirection)",
    "returnType" : "int[]",
    "comment" : "\n         * Retrieves a complete list of all supported rules, where the index is the rule\n         * verb, and the element value is the value specified, or \"false\" if it was never\n         * set. If there are relative rules defined (*_START / *_END), they will be resolved\n         * depending on the layout direction.\n         *\n         * @param layoutDirection the direction of the layout.\n         *                        Should be either {@link View#LAYOUT_DIRECTION_LTR}\n         *                        or {@link View#LAYOUT_DIRECTION_RTL}\n         * @return the supported rules\n         * @see #addRule(int, int)\n         *\n         * @hide\n         ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR", "android.view.View#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public int[] getRules()",
    "returnType" : "int[]",
    "comment" : "\n         * Retrieves a complete list of all supported rules, where the index is the rule\n         * verb, and the element value is the value specified, or \"false\" if it was never\n         * set. There will be no resolution of relative rules done.\n         *\n         * @return the supported rules\n         * @see #addRule(int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void resolveLayoutDirection(int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n         * This will be called by {@link android.view.View#requestLayout()} to\n         * resolve layout parameters that are relative to the layout direction.\n         * <p>\n         * After this method is called, any rules using layout-relative verbs\n         * (ex. {@link #START_OF}) previously added via {@link #addRule(int)}\n         * may only be accessed via their resolved absolute verbs (ex.\n         * {@link #LEFT_OF}).\n         ",
    "links" : [ "android.view.View#requestLayout()", "#START_OF", "#addRule(int)", "#LEFT_OF" ]
  }, {
    "name" : "private boolean shouldResolveLayoutDirection(int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String debug(String output)", "public void addRule(int verb)", "public void addRule(int verb, int subject)", "public void removeRule(int verb)", "public int getRule(int verb)", "private boolean hasRelativeRules()", "private boolean isRelativeRule(int rule)", "private void resolveRules(int layoutDirection)", "public int[] getRules(int layoutDirection)", "public int[] getRules()", "public void resolveLayoutDirection(int layoutDirection)", "private boolean shouldResolveLayoutDirection(int layoutDirection)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ],
  "variableNames" : [ "mRules", "mInitialRules", "mLeft", "mTop", "mRight", "mBottom", "mNeedsLayoutResolution", "mRulesChanged", "mIsRtlCompatibilityMode", "alignWithParent" ]
}