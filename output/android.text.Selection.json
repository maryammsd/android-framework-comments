{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/Selection.java",
  "packageName" : "android.text",
  "className" : "Selection",
  "comment" : "\n * Utility class for manipulating cursors and selections in CharSequences.\n * A cursor is a selection where the start and end are at the same offset.\n ",
  "variables" : [ {
    "name" : "SELECTION_MEMORY",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECTION_START",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECTION_END",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final int getSelectionStart(CharSequence text)",
    "returnType" : "int",
    "comment" : "\n     * Return the offset of the selection anchor or cursor, or -1 if\n     * there is no selection or cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getSelectionEnd(CharSequence text)",
    "returnType" : "int",
    "comment" : "\n     * Return the offset of the selection edge or cursor, or -1 if\n     * there is no selection or cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getSelectionMemory(CharSequence text)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setSelection(Spannable text, int start, int stop)",
    "returnType" : "void",
    "comment" : "\n     * Set the selection anchor to <code>start</code> and the selection edge\n     * to <code>stop</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setSelection(Spannable text, int start, int stop, int memory)",
    "returnType" : "void",
    "comment" : "\n     * Set the selection anchor to <code>start</code>, the selection edge\n     * to <code>stop</code> and the memory horizontal to <code>memory</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void updateMemory(Spannable text, int memory)",
    "returnType" : "void",
    "comment" : "\n     * Update the memory position for text. This is used to ensure vertical navigation of lines\n     * with different lengths behaves as expected and remembers the longest horizontal position\n     * seen during a vertical traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void removeMemory(Spannable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void setSelection(Spannable text, int index)",
    "returnType" : "void",
    "comment" : "\n     * Move the cursor to offset <code>index</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void selectAll(Spannable text)",
    "returnType" : "void",
    "comment" : "\n     * Select the entire text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void extendSelection(Spannable text, int index)",
    "returnType" : "void",
    "comment" : "\n     * Move the selection edge to offset <code>index</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void extendSelection(Spannable text, int index, int memory)",
    "returnType" : "void",
    "comment" : "\n     * Move the selection edge to offset <code>index</code> and update the memory horizontal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void removeSelection(Spannable text)",
    "returnType" : "void",
    "comment" : "\n     * Remove the selection or cursor, if any, from the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveUp(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the buffer offset physically above the current\n     * offset, to the beginning if it is on the top line but not at the\n     * start, or return false if the cursor is already on the top line.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setSelectionAndMemory(Spannable text, Layout layout, int line, int end, int direction, boolean extend)",
    "returnType" : "void",
    "comment" : "\n     * Calculate the movement and memory positions needed, and set or extend the selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveDown(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the buffer offset physically below the current\n     * offset, to the end of the buffer if it is on the bottom line but\n     * not at the end, or return false if the cursor is already at the\n     * end of the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveLeft(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the buffer offset physically to the left of\n     * the current offset, or return false if the cursor is already\n     * at the left edge of the line and there is not another line to move it to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveRight(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the buffer offset physically to the right of\n     * the current offset, or return false if the cursor is already at\n     * at the right edge of the line and there is not another line\n     * to move it to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean extendUp(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the selection end to the buffer offset physically above\n     * the current selection end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean extendDown(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the selection end to the buffer offset physically below\n     * the current selection end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean extendLeft(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the selection end to the buffer offset physically to the left of\n     * the current selection end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean extendRight(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the selection end to the buffer offset physically to the right of\n     * the current selection end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean extendToLeftEdge(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean extendToRightEdge(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveToLeftEdge(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveToRightEdge(Spannable text, Layout layout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveToPreceding(Spannable text, PositionIterator iter, boolean extendSelection)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean moveToFollowing(Spannable text, PositionIterator iter, boolean extendSelection)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static int findEdge(Spannable text, Layout layout, int dir)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int chooseHorizontal(Layout layout, int direction, int off1, int off2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SELECTION_MEMORY", "SELECTION_START", "SELECTION_END" ],
  "methodNames" : [ "public static final int getSelectionStart(CharSequence text)", "public static final int getSelectionEnd(CharSequence text)", "private static int getSelectionMemory(CharSequence text)", "public static void setSelection(Spannable text, int start, int stop)", "private static void setSelection(Spannable text, int start, int stop, int memory)", "private static void updateMemory(Spannable text, int memory)", "private static void removeMemory(Spannable text)", "public static final void setSelection(Spannable text, int index)", "public static final void selectAll(Spannable text)", "public static final void extendSelection(Spannable text, int index)", "private static void extendSelection(Spannable text, int index, int memory)", "public static final void removeSelection(Spannable text)", "public static boolean moveUp(Spannable text, Layout layout)", "private static void setSelectionAndMemory(Spannable text, Layout layout, int line, int end, int direction, boolean extend)", "public static boolean moveDown(Spannable text, Layout layout)", "public static boolean moveLeft(Spannable text, Layout layout)", "public static boolean moveRight(Spannable text, Layout layout)", "public static boolean extendUp(Spannable text, Layout layout)", "public static boolean extendDown(Spannable text, Layout layout)", "public static boolean extendLeft(Spannable text, Layout layout)", "public static boolean extendRight(Spannable text, Layout layout)", "public static boolean extendToLeftEdge(Spannable text, Layout layout)", "public static boolean extendToRightEdge(Spannable text, Layout layout)", "public static boolean moveToLeftEdge(Spannable text, Layout layout)", "public static boolean moveToRightEdge(Spannable text, Layout layout)", "public static boolean moveToPreceding(Spannable text, PositionIterator iter, boolean extendSelection)", "public static boolean moveToFollowing(Spannable text, PositionIterator iter, boolean extendSelection)", "private static int findEdge(Spannable text, Layout layout, int dir)", "private static int chooseHorizontal(Layout layout, int direction, int off1, int off2)" ]
}