{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/View.java",
  "packageName" : "android.view",
  "className" : "View",
  "comment" : "\n * <p>\n * This class represents the basic building block for user interface components. A View\n * occupies a rectangular area on the screen and is responsible for drawing and\n * event handling. View is the base class for <em>widgets</em>, which are\n * used to create interactive UI components (buttons, text fields, etc.). The\n * {@link android.view.ViewGroup} subclass is the base class for <em>layouts</em>, which\n * are invisible containers that hold other Views (or other ViewGroups) and define\n * their layout properties.\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about using this class to develop your application's user interface,\n * read the <a href=\"{@docRoot}guide/topics/ui/index.html\">User Interface</a> developer guide.\n * </div>\n *\n * <a name=\"Using\"></a>\n * <h3>Using Views</h3>\n * <p>\n * All of the views in a window are arranged in a single tree. You can add views\n * either from code or by specifying a tree of views in one or more XML layout\n * files. There are many specialized subclasses of views that act as controls or\n * are capable of displaying text, images, or other content.\n * </p>\n * <p>\n * Once you have created a tree of views, there are typically a few types of\n * common operations you may wish to perform:\n * <ul>\n * <li><strong>Set properties:</strong> for example setting the text of a\n * {@link android.widget.TextView}. The available properties and the methods\n * that set them will vary among the different subclasses of views. Note that\n * properties that are known at build time can be set in the XML layout\n * files.</li>\n * <li><strong>Set focus:</strong> The framework will handle moving focus in\n * response to user input. To force focus to a specific view, call\n * {@link #requestFocus}.</li>\n * <li><strong>Set up listeners:</strong> Views allow clients to set listeners\n * that will be notified when something interesting happens to the view. For\n * example, all views will let you set a listener to be notified when the view\n * gains or loses focus. You can register such a listener using\n * {@link #setOnFocusChangeListener(android.view.View.OnFocusChangeListener)}.\n * Other view subclasses offer more specialized listeners. For example, a Button\n * exposes a listener to notify clients when the button is clicked.</li>\n * <li><strong>Set visibility:</strong> You can hide or show views using\n * {@link #setVisibility(int)}.</li>\n * </ul>\n * </p>\n * <p><em>\n * Note: The Android framework is responsible for measuring, laying out and\n * drawing views. You should not call methods that perform these actions on\n * views yourself unless you are actually implementing a\n * {@link android.view.ViewGroup}.\n * </em></p>\n *\n * <a name=\"Lifecycle\"></a>\n * <h3>Implementing a Custom View</h3>\n *\n * <p>\n * To implement a custom view, you will usually begin by providing overrides for\n * some of the standard methods that the framework calls on all views. You do\n * not need to override all of these methods. In fact, you can start by just\n * overriding {@link #onDraw(android.graphics.Canvas)}.\n * <table border=\"2\" width=\"85%\" align=\"center\" cellpadding=\"5\">\n *     <thead>\n *         <tr><th>Category</th> <th>Methods</th> <th>Description</th></tr>\n *     </thead>\n *\n *     <tbody>\n *     <tr>\n *         <td rowspan=\"2\">Creation</td>\n *         <td>Constructors</td>\n *         <td>There is a form of the constructor that are called when the view\n *         is created from code and a form that is called when the view is\n *         inflated from a layout file. The second form should parse and apply\n *         any attributes defined in the layout file.\n *         </td>\n *     </tr>\n *     <tr>\n *         <td><code>{@link #onFinishInflate()}</code></td>\n *         <td>Called after a view and all of its children has been inflated\n *         from XML.</td>\n *     </tr>\n *\n *     <tr>\n *         <td rowspan=\"3\">Layout</td>\n *         <td><code>{@link #onMeasure(int, int)}</code></td>\n *         <td>Called to determine the size requirements for this view and all\n *         of its children.\n *         </td>\n *     </tr>\n *     <tr>\n *         <td><code>{@link #onLayout(boolean, int, int, int, int)}</code></td>\n *         <td>Called when this view should assign a size and position to all\n *         of its children.\n *         </td>\n *     </tr>\n *     <tr>\n *         <td><code>{@link #onSizeChanged(int, int, int, int)}</code></td>\n *         <td>Called when the size of this view has changed.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td>Drawing</td>\n *         <td><code>{@link #onDraw(android.graphics.Canvas)}</code></td>\n *         <td>Called when the view should render its content.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td rowspan=\"4\">Event processing</td>\n *         <td><code>{@link #onKeyDown(int, KeyEvent)}</code></td>\n *         <td>Called when a new hardware key event occurs.\n *         </td>\n *     </tr>\n *     <tr>\n *         <td><code>{@link #onKeyUp(int, KeyEvent)}</code></td>\n *         <td>Called when a hardware key up event occurs.\n *         </td>\n *     </tr>\n *     <tr>\n *         <td><code>{@link #onTrackballEvent(MotionEvent)}</code></td>\n *         <td>Called when a trackball motion event occurs.\n *         </td>\n *     </tr>\n *     <tr>\n *         <td><code>{@link #onTouchEvent(MotionEvent)}</code></td>\n *         <td>Called when a touch screen motion event occurs.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td rowspan=\"2\">Focus</td>\n *         <td><code>{@link #onFocusChanged(boolean, int, android.graphics.Rect)}</code></td>\n *         <td>Called when the view gains or loses focus.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td><code>{@link #onWindowFocusChanged(boolean)}</code></td>\n *         <td>Called when the window containing the view gains or loses focus.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td rowspan=\"3\">Attaching</td>\n *         <td><code>{@link #onAttachedToWindow()}</code></td>\n *         <td>Called when the view is attached to a window.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td><code>{@link #onDetachedFromWindow}</code></td>\n *         <td>Called when the view is detached from its window.\n *         </td>\n *     </tr>\n *\n *     <tr>\n *         <td><code>{@link #onWindowVisibilityChanged(int)}</code></td>\n *         <td>Called when the visibility of the window containing the view\n *         has changed.\n *         </td>\n *     </tr>\n *     </tbody>\n *\n * </table>\n * </p>\n *\n * <a name=\"IDs\"></a>\n * <h3>IDs</h3>\n * Views may have an integer id associated with them. These ids are typically\n * assigned in the layout XML files, and are used to find specific views within\n * the view tree. A common pattern is to:\n * <ul>\n * <li>Define a Button in the layout file and assign it a unique ID.\n * <pre>\n * &lt;Button\n *     android:id=\"@+id/my_button\"\n *     android:layout_width=\"wrap_content\"\n *     android:layout_height=\"wrap_content\"\n *     android:text=\"@string/my_button_text\"/&gt;\n * </pre></li>\n * <li>From the onCreate method of an Activity, find the Button\n * <pre class=\"prettyprint\">\n *      Button myButton = findViewById(R.id.my_button);\n * </pre></li>\n * </ul>\n * <p>\n * View IDs need not be unique throughout the tree, but it is good practice to\n * ensure that they are at least unique within the part of the tree you are\n * searching.\n * </p>\n *\n * <a name=\"Position\"></a>\n * <h3>Position</h3>\n * <p>\n * The geometry of a view is that of a rectangle. A view has a location,\n * expressed as a pair of <em>left</em> and <em>top</em> coordinates, and\n * two dimensions, expressed as a width and a height. The unit for location\n * and dimensions is the pixel.\n * </p>\n *\n * <p>\n * It is possible to retrieve the location of a view by invoking the methods\n * {@link #getLeft()} and {@link #getTop()}. The former returns the left, or X,\n * coordinate of the rectangle representing the view. The latter returns the\n * top, or Y, coordinate of the rectangle representing the view. These methods\n * both return the location of the view relative to its parent. For instance,\n * when getLeft() returns 20, that means the view is located 20 pixels to the\n * right of the left edge of its direct parent.\n * </p>\n *\n * <p>\n * In addition, several convenience methods are offered to avoid unnecessary\n * computations, namely {@link #getRight()} and {@link #getBottom()}.\n * These methods return the coordinates of the right and bottom edges of the\n * rectangle representing the view. For instance, calling {@link #getRight()}\n * is similar to the following computation: <code>getLeft() + getWidth()</code>\n * (see <a href=\"#SizePaddingMargins\">Size</a> for more information about the width.)\n * </p>\n *\n * <a name=\"SizePaddingMargins\"></a>\n * <h3>Size, padding and margins</h3>\n * <p>\n * The size of a view is expressed with a width and a height. A view actually\n * possess two pairs of width and height values.\n * </p>\n *\n * <p>\n * The first pair is known as <em>measured width</em> and\n * <em>measured height</em>. These dimensions define how big a view wants to be\n * within its parent (see <a href=\"#Layout\">Layout</a> for more details.) The\n * measured dimensions can be obtained by calling {@link #getMeasuredWidth()}\n * and {@link #getMeasuredHeight()}.\n * </p>\n *\n * <p>\n * The second pair is simply known as <em>width</em> and <em>height</em>, or\n * sometimes <em>drawing width</em> and <em>drawing height</em>. These\n * dimensions define the actual size of the view on screen, at drawing time and\n * after layout. These values may, but do not have to, be different from the\n * measured width and height. The width and height can be obtained by calling\n * {@link #getWidth()} and {@link #getHeight()}.\n * </p>\n *\n * <p>\n * To measure its dimensions, a view takes into account its padding. The padding\n * is expressed in pixels for the left, top, right and bottom parts of the view.\n * Padding can be used to offset the content of the view by a specific amount of\n * pixels. For instance, a left padding of 2 will push the view's content by\n * 2 pixels to the right of the left edge. Padding can be set using the\n * {@link #setPadding(int, int, int, int)} or {@link #setPaddingRelative(int, int, int, int)}\n * method and queried by calling {@link #getPaddingLeft()}, {@link #getPaddingTop()},\n * {@link #getPaddingRight()}, {@link #getPaddingBottom()}, {@link #getPaddingStart()},\n * {@link #getPaddingEnd()}.\n * </p>\n *\n * <p>\n * Even though a view can define a padding, it does not provide any support for\n * margins. However, view groups provide such a support. Refer to\n * {@link android.view.ViewGroup} and\n * {@link android.view.ViewGroup.MarginLayoutParams} for further information.\n * </p>\n *\n * <a name=\"Layout\"></a>\n * <h3>Layout</h3>\n * <p>\n * Layout is a two pass process: a measure pass and a layout pass. The measuring\n * pass is implemented in {@link #measure(int, int)} and is a top-down traversal\n * of the view tree. Each view pushes dimension specifications down the tree\n * during the recursion. At the end of the measure pass, every view has stored\n * its measurements. The second pass happens in\n * {@link #layout(int,int,int,int)} and is also top-down. During\n * this pass each parent is responsible for positioning all of its children\n * using the sizes computed in the measure pass.\n * </p>\n *\n * <p>\n * When a view's measure() method returns, its {@link #getMeasuredWidth()} and\n * {@link #getMeasuredHeight()} values must be set, along with those for all of\n * that view's descendants. A view's measured width and measured height values\n * must respect the constraints imposed by the view's parents. This guarantees\n * that at the end of the measure pass, all parents accept all of their\n * children's measurements. A parent view may call measure() more than once on\n * its children. For example, the parent may measure each child once with\n * unspecified dimensions to find out how big they want to be, then call\n * measure() on them again with actual numbers if the sum of all the children's\n * unconstrained sizes is too big or too small.\n * </p>\n *\n * <p>\n * The measure pass uses two classes to communicate dimensions. The\n * {@link MeasureSpec} class is used by views to tell their parents how they\n * want to be measured and positioned. The base LayoutParams class just\n * describes how big the view wants to be for both width and height. For each\n * dimension, it can specify one of:\n * <ul>\n * <li> an exact number\n * <li>MATCH_PARENT, which means the view wants to be as big as its parent\n * (minus padding)\n * <li> WRAP_CONTENT, which means that the view wants to be just big enough to\n * enclose its content (plus padding).\n * </ul>\n * There are subclasses of LayoutParams for different subclasses of ViewGroup.\n * For example, AbsoluteLayout has its own subclass of LayoutParams which adds\n * an X and Y value.\n * </p>\n *\n * <p>\n * MeasureSpecs are used to push requirements down the tree from parent to\n * child. A MeasureSpec can be in one of three modes:\n * <ul>\n * <li>UNSPECIFIED: This is used by a parent to determine the desired dimension\n * of a child view. For example, a LinearLayout may call measure() on its child\n * with the height set to UNSPECIFIED and a width of EXACTLY 240 to find out how\n * tall the child view wants to be given a width of 240 pixels.\n * <li>EXACTLY: This is used by the parent to impose an exact size on the\n * child. The child must use this size, and guarantee that all of its\n * descendants will fit within this size.\n * <li>AT_MOST: This is used by the parent to impose a maximum size on the\n * child. The child must guarantee that it and all of its descendants will fit\n * within this size.\n * </ul>\n * </p>\n *\n * <p>\n * To initiate a layout, call {@link #requestLayout}. This method is typically\n * called by a view on itself when it believes that it can no longer fit within\n * its current bounds.\n * </p>\n *\n * <a name=\"Drawing\"></a>\n * <h3>Drawing</h3>\n * <p>\n * Drawing is handled by walking the tree and recording the drawing commands of\n * any View that needs to update. After this, the drawing commands of the\n * entire tree are issued to screen, clipped to the newly damaged area.\n * </p>\n *\n * <p>\n * The tree is largely recorded and drawn in order, with parents drawn before\n * (i.e., behind) their children, with siblings drawn in the order they appear\n * in the tree. If you set a background drawable for a View, then the View will\n * draw it before calling back to its <code>onDraw()</code> method. The child\n * drawing order can be overridden with\n * {@link ViewGroup#setChildrenDrawingOrderEnabled(boolean) custom child drawing order}\n * in a ViewGroup, and with {@link #setZ(float)} custom Z values} set on Views.\n * </p>\n *\n * <p>\n * To force a view to draw, call {@link #invalidate()}.\n * </p>\n *\n * <a name=\"EventHandlingThreading\"></a>\n * <h3>Event Handling and Threading</h3>\n * <p>\n * The basic cycle of a view is as follows:\n * <ol>\n * <li>An event comes in and is dispatched to the appropriate view. The view\n * handles the event and notifies any listeners.</li>\n * <li>If in the course of processing the event, the view's bounds may need\n * to be changed, the view will call {@link #requestLayout()}.</li>\n * <li>Similarly, if in the course of processing the event the view's appearance\n * may need to be changed, the view will call {@link #invalidate()}.</li>\n * <li>If either {@link #requestLayout()} or {@link #invalidate()} were called,\n * the framework will take care of measuring, laying out, and drawing the tree\n * as appropriate.</li>\n * </ol>\n * </p>\n *\n * <p><em>Note: The entire view tree is single threaded. You must always be on\n * the UI thread when calling any method on any view.</em>\n * If you are doing work on other threads and want to update the state of a view\n * from that thread, you should use a {@link Handler}.\n * </p>\n *\n * <a name=\"FocusHandling\"></a>\n * <h3>Focus Handling</h3>\n * <p>\n * The framework will handle routine focus movement in response to user input.\n * This includes changing the focus as views are removed or hidden, or as new\n * views become available. Views indicate their willingness to take focus\n * through the {@link #isFocusable} method. To change whether a view can take\n * focus, call {@link #setFocusable(boolean)}.  When in touch mode (see notes below)\n * views indicate whether they still would like focus via {@link #isFocusableInTouchMode}\n * and can change this via {@link #setFocusableInTouchMode(boolean)}.\n * </p>\n * <p>\n * Focus movement is based on an algorithm which finds the nearest neighbor in a\n * given direction. In rare cases, the default algorithm may not match the\n * intended behavior of the developer. In these situations, you can provide\n * explicit overrides by using these XML attributes in the layout file:\n * <pre>\n * nextFocusDown\n * nextFocusLeft\n * nextFocusRight\n * nextFocusUp\n * </pre>\n * </p>\n *\n *\n * <p>\n * To get a particular view to take focus, call {@link #requestFocus()}.\n * </p>\n *\n * <a name=\"TouchMode\"></a>\n * <h3>Touch Mode</h3>\n * <p>\n * When a user is navigating a user interface via directional keys such as a D-pad, it is\n * necessary to give focus to actionable items such as buttons so the user can see\n * what will take input.  If the device has touch capabilities, however, and the user\n * begins interacting with the interface by touching it, it is no longer necessary to\n * always highlight, or give focus to, a particular view.  This motivates a mode\n * for interaction named 'touch mode'.\n * </p>\n * <p>\n * For a touch capable device, once the user touches the screen, the device\n * will enter touch mode.  From this point onward, only views for which\n * {@link #isFocusableInTouchMode} is true will be focusable, such as text editing widgets.\n * Other views that are touchable, like buttons, will not take focus when touched; they will\n * only fire the on click listeners.\n * </p>\n * <p>\n * Any time a user hits a directional key, such as a D-pad direction, the view device will\n * exit touch mode, and find a view to take focus, so that the user may resume interacting\n * with the user interface without touching the screen again.\n * </p>\n * <p>\n * The touch mode state is maintained across {@link android.app.Activity}s.  Call\n * {@link #isInTouchMode} to see whether the device is currently in touch mode.\n * </p>\n *\n * <a name=\"Scrolling\"></a>\n * <h3>Scrolling</h3>\n * <p>\n * The framework provides basic support for views that wish to internally\n * scroll their content. This includes keeping track of the X and Y scroll\n * offset as well as mechanisms for drawing scrollbars. See\n * {@link #scrollBy(int, int)}, {@link #scrollTo(int, int)}, and\n * {@link #awakenScrollBars()} for more details.\n * </p>\n *\n * <a name=\"Tags\"></a>\n * <h3>Tags</h3>\n * <p>\n * Unlike IDs, tags are not used to identify views. Tags are essentially an\n * extra piece of information that can be associated with a view. They are most\n * often used as a convenience to store data related to views in the views\n * themselves rather than by putting them in a separate structure.\n * </p>\n * <p>\n * Tags may be specified with character sequence values in layout XML as either\n * a single tag using the {@link android.R.styleable#View_tag android:tag}\n * attribute or multiple tags using the {@code <tag>} child element:\n * <pre>\n *     &lt;View ...\n *           android:tag=\"@string/mytag_value\" /&gt;\n *     &lt;View ...&gt;\n *         &lt;tag android:id=\"@+id/mytag\"\n *              android:value=\"@string/mytag_value\" /&gt;\n *     &lt;/View>\n * </pre>\n * </p>\n * <p>\n * Tags may also be specified with arbitrary objects from code using\n * {@link #setTag(Object)} or {@link #setTag(int, Object)}.\n * </p>\n *\n * <a name=\"Themes\"></a>\n * <h3>Themes</h3>\n * <p>\n * By default, Views are created using the theme of the Context object supplied\n * to their constructor; however, a different theme may be specified by using\n * the {@link android.R.styleable#View_theme android:theme} attribute in layout\n * XML or by passing a {@link ContextThemeWrapper} to the constructor from\n * code.\n * </p>\n * <p>\n * When the {@link android.R.styleable#View_theme android:theme} attribute is\n * used in XML, the specified theme is applied on top of the inflation\n * context's theme (see {@link LayoutInflater}) and used for the view itself as\n * well as any child elements.\n * </p>\n * <p>\n * In the following example, both views will be created using the Material dark\n * color scheme; however, because an overlay theme is used which only defines a\n * subset of attributes, the value of\n * {@link android.R.styleable#Theme_colorAccent android:colorAccent} defined on\n * the inflation context's theme (e.g. the Activity theme) will be preserved.\n * <pre>\n *     &lt;LinearLayout\n *             ...\n *             android:theme=\"@android:theme/ThemeOverlay.Material.Dark\"&gt;\n *         &lt;View ...&gt;\n *     &lt;/LinearLayout&gt;\n * </pre>\n * </p>\n *\n * <a name=\"Properties\"></a>\n * <h3>Properties</h3>\n * <p>\n * The View class exposes an {@link #ALPHA} property, as well as several transform-related\n * properties, such as {@link #TRANSLATION_X} and {@link #TRANSLATION_Y}. These properties are\n * available both in the {@link Property} form as well as in similarly-named setter/getter\n * methods (such as {@link #setAlpha(float)} for {@link #ALPHA}). These properties can\n * be used to set persistent state associated with these rendering-related properties on the view.\n * The properties and methods can also be used in conjunction with\n * {@link android.animation.Animator Animator}-based animations, described more in the\n * <a href=\"#Animation\">Animation</a> section.\n * </p>\n *\n * <a name=\"Animation\"></a>\n * <h3>Animation</h3>\n * <p>\n * Starting with Android 3.0, the preferred way of animating views is to use the\n * {@link android.animation} package APIs. These {@link android.animation.Animator Animator}-based\n * classes change actual properties of the View object, such as {@link #setAlpha(float) alpha} and\n * {@link #setTranslationX(float) translationX}. This behavior is contrasted to that of the pre-3.0\n * {@link android.view.animation.Animation Animation}-based classes, which instead animate only\n * how the view is drawn on the display. In particular, the {@link ViewPropertyAnimator} class\n * makes animating these View properties particularly easy and efficient.\n * </p>\n * <p>\n * Alternatively, you can use the pre-3.0 animation classes to animate how Views are rendered.\n * You can attach an {@link Animation} object to a view using\n * {@link #setAnimation(Animation)} or\n * {@link #startAnimation(Animation)}. The animation can alter the scale,\n * rotation, translation and alpha of a view over time. If the animation is\n * attached to a view that has children, the animation will affect the entire\n * subtree rooted by that node. When an animation is started, the framework will\n * take care of redrawing the appropriate views until the animation completes.\n * </p>\n *\n * <a name=\"Security\"></a>\n * <h3>Security</h3>\n * <p>\n * Sometimes it is essential that an application be able to verify that an action\n * is being performed with the full knowledge and consent of the user, such as\n * granting a permission request, making a purchase or clicking on an advertisement.\n * Unfortunately, a malicious application could try to spoof the user into\n * performing these actions, unaware, by concealing the intended purpose of the view.\n * As a remedy, the framework offers a touch filtering mechanism that can be used to\n * improve the security of views that provide access to sensitive functionality.\n * </p><p>\n * To enable touch filtering, call {@link #setFilterTouchesWhenObscured(boolean)} or set the\n * android:filterTouchesWhenObscured layout attribute to true.  When enabled, the framework\n * will discard touches that are received whenever the view's window is obscured by\n * another visible window.  As a result, the view will not receive touches whenever a\n * toast, dialog or other window appears above the view's window.\n * </p><p>\n * For more fine-grained control over security, consider overriding the\n * {@link #onFilterTouchEventForSecurity(MotionEvent)} method to implement your own\n * security policy. See also {@link MotionEvent#FLAG_WINDOW_IS_OBSCURED}.\n * </p>\n *\n * @attr ref android.R.styleable#View_accessibilityHeading\n * @attr ref android.R.styleable#View_alpha\n * @attr ref android.R.styleable#View_background\n * @attr ref android.R.styleable#View_clickable\n * @attr ref android.R.styleable#View_contentDescription\n * @attr ref android.R.styleable#View_drawingCacheQuality\n * @attr ref android.R.styleable#View_duplicateParentState\n * @attr ref android.R.styleable#View_id\n * @attr ref android.R.styleable#View_requiresFadingEdge\n * @attr ref android.R.styleable#View_fadeScrollbars\n * @attr ref android.R.styleable#View_fadingEdgeLength\n * @attr ref android.R.styleable#View_filterTouchesWhenObscured\n * @attr ref android.R.styleable#View_fitsSystemWindows\n * @attr ref android.R.styleable#View_isScrollContainer\n * @attr ref android.R.styleable#View_focusable\n * @attr ref android.R.styleable#View_focusableInTouchMode\n * @attr ref android.R.styleable#View_focusedByDefault\n * @attr ref android.R.styleable#View_hapticFeedbackEnabled\n * @attr ref android.R.styleable#View_keepScreenOn\n * @attr ref android.R.styleable#View_keyboardNavigationCluster\n * @attr ref android.R.styleable#View_layerType\n * @attr ref android.R.styleable#View_layoutDirection\n * @attr ref android.R.styleable#View_longClickable\n * @attr ref android.R.styleable#View_minHeight\n * @attr ref android.R.styleable#View_minWidth\n * @attr ref android.R.styleable#View_nextClusterForward\n * @attr ref android.R.styleable#View_nextFocusDown\n * @attr ref android.R.styleable#View_nextFocusLeft\n * @attr ref android.R.styleable#View_nextFocusRight\n * @attr ref android.R.styleable#View_nextFocusUp\n * @attr ref android.R.styleable#View_onClick\n * @attr ref android.R.styleable#View_outlineSpotShadowColor\n * @attr ref android.R.styleable#View_outlineAmbientShadowColor\n * @attr ref android.R.styleable#View_padding\n * @attr ref android.R.styleable#View_paddingHorizontal\n * @attr ref android.R.styleable#View_paddingVertical\n * @attr ref android.R.styleable#View_paddingBottom\n * @attr ref android.R.styleable#View_paddingLeft\n * @attr ref android.R.styleable#View_paddingRight\n * @attr ref android.R.styleable#View_paddingTop\n * @attr ref android.R.styleable#View_paddingStart\n * @attr ref android.R.styleable#View_paddingEnd\n * @attr ref android.R.styleable#View_saveEnabled\n * @attr ref android.R.styleable#View_rotation\n * @attr ref android.R.styleable#View_rotationX\n * @attr ref android.R.styleable#View_rotationY\n * @attr ref android.R.styleable#View_scaleX\n * @attr ref android.R.styleable#View_scaleY\n * @attr ref android.R.styleable#View_scrollX\n * @attr ref android.R.styleable#View_scrollY\n * @attr ref android.R.styleable#View_scrollbarSize\n * @attr ref android.R.styleable#View_scrollbarStyle\n * @attr ref android.R.styleable#View_scrollbars\n * @attr ref android.R.styleable#View_scrollbarDefaultDelayBeforeFade\n * @attr ref android.R.styleable#View_scrollbarFadeDuration\n * @attr ref android.R.styleable#View_scrollbarTrackHorizontal\n * @attr ref android.R.styleable#View_scrollbarThumbHorizontal\n * @attr ref android.R.styleable#View_scrollbarThumbVertical\n * @attr ref android.R.styleable#View_scrollbarTrackVertical\n * @attr ref android.R.styleable#View_scrollbarAlwaysDrawHorizontalTrack\n * @attr ref android.R.styleable#View_scrollbarAlwaysDrawVerticalTrack\n * @attr ref android.R.styleable#View_stateListAnimator\n * @attr ref android.R.styleable#View_transitionName\n * @attr ref android.R.styleable#View_soundEffectsEnabled\n * @attr ref android.R.styleable#View_tag\n * @attr ref android.R.styleable#View_textAlignment\n * @attr ref android.R.styleable#View_textDirection\n * @attr ref android.R.styleable#View_transformPivotX\n * @attr ref android.R.styleable#View_transformPivotY\n * @attr ref android.R.styleable#View_translationX\n * @attr ref android.R.styleable#View_translationY\n * @attr ref android.R.styleable#View_translationZ\n * @attr ref android.R.styleable#View_visibility\n * @attr ref android.R.styleable#View_theme\n *\n * @see android.view.ViewGroup\n ",
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_DRAW",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_LOG_TAG",
    "type" : "String",
    "comment" : "\n     * The logging tag used by this class with android.util.Log.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_LOG_TAG",
    "type" : "String",
    "comment" : " set if a session is not started.",
    "links" : [ ]
  }, {
    "name" : "CONTENT_CAPTURE_LOG_TAG",
    "type" : "String",
    "comment" : "\n     * The logging tag used by this class when logging content capture-related messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CONTENT_CAPTURE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDebugViewAttributes",
    "type" : "boolean",
    "comment" : "\n     * When set to true, this view will save its attribute data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sDebugViewAttributesApplicationPackage",
    "type" : "String",
    "comment" : "\n     * When set to this application package view will save its attribute data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_ID",
    "type" : "int",
    "comment" : "\n     * Used to mark a View that has no ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_APP_AUTOFILL_ID",
    "type" : "int",
    "comment" : "\n     * Last ID that is given to Views that are no part of activities.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_HIGHLIGHT_ATTR",
    "type" : "int[]",
    "comment" : "\n     * Attribute to find the autofilled highlight\n     *\n     * @see #getAutofilledDrawable()\n     ",
    "links" : [ ]
  }, {
    "name" : "sCompatibilityDone",
    "type" : "boolean",
    "comment" : "\n     * Signals that compatibility booleans have been initialized according to\n     * target SDK versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "sUseBrokenMakeMeasureSpec",
    "type" : "boolean",
    "comment" : "\n     * Use the old (broken) way of building MeasureSpecs.\n     ",
    "links" : [ ]
  }, {
    "name" : "sUseZeroUnspecifiedMeasureSpec",
    "type" : "boolean",
    "comment" : "\n     * Always return a size of 0 for MeasureSpec values with a mode of UNSPECIFIED\n     ",
    "links" : [ ]
  }, {
    "name" : "sIgnoreMeasureCache",
    "type" : "boolean",
    "comment" : "\n     * Ignore any optimizations using the measure cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "sAlwaysRemeasureExactly",
    "type" : "boolean",
    "comment" : "\n     * Ignore an optimization that skips unnecessary EXACTLY layout passes.\n     ",
    "links" : [ ]
  }, {
    "name" : "sTextureViewIgnoresDrawableSetters",
    "type" : "boolean",
    "comment" : "\n     * Allow setForeground/setBackground to be called (and ignored) on a textureview,\n     * without throwing\n     ",
    "links" : [ ]
  }, {
    "name" : "sPreserveMarginParamsInLayoutParamConversion",
    "type" : "boolean",
    "comment" : "\n     * Prior to N, some ViewGroups would not convert LayoutParams properly even though both extend\n     * MarginLayoutParams. For instance, converting LinearLayout.LayoutParams to\n     * RelativeLayout.LayoutParams would lose margin information. This is fixed on N but target API\n     * check is implemented for backwards compatibility.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "sCascadedDragDrop",
    "type" : "boolean",
    "comment" : "\n     * Prior to N, when drag enters into child of a view that has already received an\n     * ACTION_DRAG_ENTERED event, the parent doesn't get a ACTION_DRAG_EXITED event.\n     * ACTION_DRAG_LOCATION and ACTION_DROP were delivered to the parent of a view that returned\n     * false from its event handler for these events.\n     * Starting from N, the parent will get ACTION_DRAG_EXITED event before the child gets its\n     * ACTION_DRAG_ENTERED. ACTION_DRAG_LOCATION and ACTION_DROP are never propagated to the parent.\n     * sCascadedDragDrop is true for pre-N apps for backwards compatibility implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "sHasFocusableExcludeAutoFocusable",
    "type" : "boolean",
    "comment" : "\n     * Prior to O, auto-focusable didn't exist and widgets such as ListView use hasFocusable\n     * to determine things like whether or not to permit item click events. We can't break\n     * apps that do this just because more things (clickable things) are now auto-focusable\n     * and they would get different results, so give old behavior to old apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "sAutoFocusableOffUIThreadWontNotifyParents",
    "type" : "boolean",
    "comment" : "\n     * Prior to O, auto-focusable didn't exist and views marked as clickable weren't implicitly\n     * made focusable by default. As a result, apps could (incorrectly) change the clickable\n     * setting of views off the UI thread. Now that clickable can effect the focusable state,\n     * changing the clickable attribute off the UI thread will cause an exception (since changing\n     * the focusable state checks). In order to prevent apps from crashing, we will handle this\n     * specific case and just not notify parents on new focusables resulting from marking views\n     * clickable from outside the UI thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "sThrowOnInvalidFloatProperties",
    "type" : "boolean",
    "comment" : "\n     * Prior to P things like setScaleX() allowed passing float values that were bogus such as\n     * Float.NaN. If the app is targetting P or later then passing these values will result in an\n     * exception being thrown. If the app is targetting an earlier SDK version, then we will\n     * silently clamp these values to avoid crashes elsewhere when the rendering code hits\n     * these bogus values.\n     ",
    "links" : [ ]
  }, {
    "name" : "sAcceptZeroSizeDragShadow",
    "type" : "boolean",
    "comment" : "\n     * Prior to P, {@code #startDragAndDrop} accepts a builder which produces an empty drag shadow.\n     * Currently zero size SurfaceControl cannot be created thus we create a dummy 1x1 surface\n     * instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "sBrokenInsetsDispatch",
    "type" : "boolean",
    "comment" : "\n     * Prior to R, {@link #dispatchApplyWindowInsets} had an issue:\n     * <p>The modified insets changed by {@link #onApplyWindowInsets} were passed to the\n     * entire view hierarchy in prefix order, including siblings as well as siblings of parents\n     * further down the hierarchy. This violates the basic concepts of the view hierarchy, and\n     * thus, the hierarchical dispatching mechanism was hard to use for apps.\n     * <p>\n     * In order to make window inset dispatching work properly, we dispatch window insets\n     * in the view hierarchy in a proper hierarchical manner if this flag is set to {@code false}.\n     ",
    "links" : [ "#dispatchApplyWindowInsets", "#onApplyWindowInsets" ]
  }, {
    "name" : "sBrokenWindowBackground",
    "type" : "boolean",
    "comment" : "\n     * Prior to Q, calling\n     * {@link com.android.internal.policy.DecorView#setBackgroundDrawable(Drawable)}\n     * did not call update the window format so the opacity of the background was not correctly\n     * applied to the window. Some applications rely on this misbehavior to work properly.\n     * <p>\n     * From Q, {@link com.android.internal.policy.DecorView#setBackgroundDrawable(Drawable)} is\n     * the same as {@link com.android.internal.policy.DecorView#setWindowBackground(Drawable)}\n     * which updates the window format.\n     * @hide\n     ",
    "links" : [ "com.android.internal.policy.DecorView#setBackgroundDrawable(Drawable)", "com.android.internal.policy.DecorView#setWindowBackground(Drawable)" ]
  }, {
    "name" : "sForceLayoutWhenInsetsChanged",
    "type" : "boolean",
    "comment" : "\n     * Prior to R, we were always forcing a layout of the entire hierarchy when insets changed from\n     * the server. This is inefficient and not all apps use it. Instead, we want to rely on apps\n     * calling {@link #requestLayout} when they need to relayout based on an insets change.\n     ",
    "links" : [ "#requestLayout" ]
  }, {
    "name" : "NOT_FOCUSABLE",
    "type" : "int",
    "comment" : "\n     * This view does not want keystrokes.\n     * <p>\n     * Use with {@link #setFocusable(int)} and <a href=\"#attr_android:focusable\">{@code\n     * android:focusable}.\n     ",
    "links" : [ "#setFocusable(int)" ]
  }, {
    "name" : "FOCUSABLE",
    "type" : "int",
    "comment" : "\n     * This view wants keystrokes.\n     * <p>\n     * Use with {@link #setFocusable(int)} and <a href=\"#attr_android:focusable\">{@code\n     * android:focusable}.\n     ",
    "links" : [ "#setFocusable(int)" ]
  }, {
    "name" : "FOCUSABLE_AUTO",
    "type" : "int",
    "comment" : "\n     * This view determines focusability automatically. This is the default.\n     * <p>\n     * Use with {@link #setFocusable(int)} and <a href=\"#attr_android:focusable\">{@code\n     * android:focusable}.\n     ",
    "links" : [ "#setFocusable(int)" ]
  }, {
    "name" : "FOCUSABLE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with setFlags indicating bits used for focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "FITS_SYSTEM_WINDOWS",
    "type" : "int",
    "comment" : "\n     * This view will adjust its padding to fit sytem windows (e.g. status bar)\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBLE",
    "type" : "int",
    "comment" : "\n     * This view is visible.\n     * Use with {@link #setVisibility} and <a href=\"#attr_android:visibility\">{@code\n     * android:visibility}.\n     ",
    "links" : [ "#setVisibility" ]
  }, {
    "name" : "INVISIBLE",
    "type" : "int",
    "comment" : "\n     * This view is invisible, but it still takes up space for layout purposes.\n     * Use with {@link #setVisibility} and <a href=\"#attr_android:visibility\">{@code\n     * android:visibility}.\n     ",
    "links" : [ "#setVisibility" ]
  }, {
    "name" : "GONE",
    "type" : "int",
    "comment" : "\n     * This view is invisible, and it doesn't take any space for layout\n     * purposes. Use with {@link #setVisibility} and <a href=\"#attr_android:visibility\">{@code\n     * android:visibility}.\n     ",
    "links" : [ "#setVisibility" ]
  }, {
    "name" : "VISIBILITY_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with setFlags indicating bits used for visibility.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_FLAGS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_HINT_EMAIL_ADDRESS",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with an email address.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_EMAIL_ADDRESS}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_NAME",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a user's real name.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_NAME}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_USERNAME",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a username.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_USERNAME}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_PASSWORD",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a password.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_PASSWORD}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_PHONE",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a phone number.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_PHONE}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_POSTAL_ADDRESS",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a postal address.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_POSTAL_ADDRESS}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_POSTAL_CODE",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a postal code.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_POSTAL_CODE}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_CREDIT_CARD_NUMBER",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a credit card number.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_CREDIT_CARD_NUMBER}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a credit card security code.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a credit card expiration date.\n     *\n     * <p>It should be used when the credit card expiration date is represented by just one view;\n     * if it is represented by more than one (for example, one view for the month and another view\n     * for the year), then each of these views should use the hint specific for the unit\n     * ({@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY},\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH},\n     * or {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR}).\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE}</code>).\n     *\n     * <p>When annotating a view with this hint, it's recommended to use a date autofill value to\n     * avoid ambiguity when the autofill service provides a value for it. To understand why a\n     * value can be ambiguous, consider \"April of 2020\", which could be represented as either of\n     * the following options:\n     *\n     * <ul>\n     *   <li>{@code \"04/2020\"}\n     *   <li>{@code \"4/2020\"}\n     *   <li>{@code \"2020/04\"}\n     *   <li>{@code \"2020/4\"}\n     *   <li>{@code \"April/2020\"}\n     *   <li>{@code \"Apr/2020\"}\n     * </ul>\n     *\n     * <p>You define a date autofill value for the view by overriding the following methods:\n     *\n     * <ol>\n     *   <li>{@link #getAutofillType()} to return {@link #AUTOFILL_TYPE_DATE}.\n     *   <li>{@link #getAutofillValue()} to return a\n     *       {@link AutofillValue#forDate(long) date autofillvalue}.\n     *   <li>{@link #autofill(AutofillValue)} to expect a data autofillvalue.\n     * </ol>\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR", "#autofill(AutofillValue)", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY", "#AUTOFILL_TYPE_DATE", "#getAutofillType()", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH", "#setAutofillHints(String...)", "#getAutofillValue()", "android.view.autofill.AutofillValue#forDate(long)" ]
  }, {
    "name" : "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a credit card expiration month.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH}</code>).\n     *\n     * <p>When annotating a view with this hint, it's recommended to use a text autofill value\n     * whose value is the numerical representation of the month, starting on {@code 1} to avoid\n     * ambiguity when the autofill service provides a value for it. To understand why a\n     * value can be ambiguous, consider \"January\", which could be represented as either of\n     *\n     * <ul>\n     *   <li>{@code \"1\"}: recommended way.\n     *   <li>{@code \"0\"}: if following the {@link Calendar#MONTH} convention.\n     *   <li>{@code \"January\"}: full name, in English.\n     *   <li>{@code \"jan\"}: abbreviated name, in English.\n     *   <li>{@code \"Janeiro\"}: full name, in another language.\n     * </ul>\n     *\n     * <p>Another recommended approach is to use a date autofill value - see\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE} for more details.\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE", "java.util.Calendar#MONTH" ]
  }, {
    "name" : "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a credit card expiration year.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY",
    "type" : "String",
    "comment" : "\n     * Hint indicating that this view can be autofilled with a credit card expiration day.\n     *\n     * <p>Can be used with either {@link #setAutofillHints(String[])} or\n     * <a href=\"#attr_android:autofillHint\"> {@code android:autofillHint}</a> (in which case the\n     * value should be <code>{@value #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY}</code>).\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about autofill hints.\n     ",
    "links" : [ "#setAutofillHints(String", "#setAutofillHints(String...)" ]
  }, {
    "name" : "mAutofillHints",
    "type" : "String[]",
    "comment" : "\n     * Hints for the autofill services that describes the content of the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutofillId",
    "type" : "AutofillId",
    "comment" : "\n     * Autofill id, lazily created on calls to {@link #getAutofillId()}.\n     ",
    "links" : [ "#getAutofillId()" ]
  }, {
    "name" : "AUTOFILL_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Autofill type for views that cannot be autofilled.\n     *\n     * <p>Typically used when the view is read-only; for example, a text label.\n     *\n     * @see #getAutofillType()\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_TYPE_TEXT",
    "type" : "int",
    "comment" : "\n     * Autofill type for a text field, which is filled by a {@link CharSequence}.\n     *\n     * <p>{@link AutofillValue} instances for autofilling a {@link View} can be obtained through\n     * {@link AutofillValue#forText(CharSequence)}, and the value passed to autofill a\n     * {@link View} can be fetched through {@link AutofillValue#getTextValue()}.\n     *\n     * @see #getAutofillType()\n     ",
    "links" : [ "android.view.autofill.AutofillValue#forText(CharSequence)", "android.view.autofill.AutofillValue#getTextValue()", "android.view.autofill.AutofillValue", "CharSequence", "android.view.View" ]
  }, {
    "name" : "AUTOFILL_TYPE_TOGGLE",
    "type" : "int",
    "comment" : "\n     * Autofill type for a togglable field, which is filled by a {@code boolean}.\n     *\n     * <p>{@link AutofillValue} instances for autofilling a {@link View} can be obtained through\n     * {@link AutofillValue#forToggle(boolean)}, and the value passed to autofill a\n     * {@link View} can be fetched through {@link AutofillValue#getToggleValue()}.\n     *\n     * @see #getAutofillType()\n     ",
    "links" : [ "android.view.autofill.AutofillValue", "android.view.autofill.AutofillValue#forToggle(boolean)", "android.view.View", "android.view.autofill.AutofillValue#getToggleValue()" ]
  }, {
    "name" : "AUTOFILL_TYPE_LIST",
    "type" : "int",
    "comment" : "\n     * Autofill type for a selection list field, which is filled by an {@code int}\n     * representing the element index inside the list (starting at {@code 0}).\n     *\n     * <p>{@link AutofillValue} instances for autofilling a {@link View} can be obtained through\n     * {@link AutofillValue#forList(int)}, and the value passed to autofill a\n     * {@link View} can be fetched through {@link AutofillValue#getListValue()}.\n     *\n     * <p>The available options in the selection list are typically provided by\n     * {@link android.app.assist.AssistStructure.ViewNode#getAutofillOptions()}.\n     *\n     * @see #getAutofillType()\n     ",
    "links" : [ "android.view.autofill.AutofillValue", "android.view.autofill.AutofillValue#getListValue()", "android.view.View", "android.view.autofill.AutofillValue#forList(int)", "android.app.assist.AssistStructure.ViewNode#getAutofillOptions()" ]
  }, {
    "name" : "AUTOFILL_TYPE_DATE",
    "type" : "int",
    "comment" : "\n     * Autofill type for a field that contains a date, which is represented by a long representing\n     * the number of milliseconds since the standard base time known as \"the epoch\", namely\n     * January 1, 1970, 00:00:00 GMT (see {@link java.util.Date#getTime()}.\n     *\n     * <p>{@link AutofillValue} instances for autofilling a {@link View} can be obtained through\n     * {@link AutofillValue#forDate(long)}, and the values passed to\n     * autofill a {@link View} can be fetched through {@link AutofillValue#getDateValue()}.\n     *\n     * @see #getAutofillType()\n     ",
    "links" : [ "android.view.autofill.AutofillValue", "android.view.autofill.AutofillValue#getDateValue()", "android.view.View", "android.view.autofill.AutofillValue#forDate(long)", "java.util.Date#getTime()" ]
  }, {
    "name" : "IMPORTANT_FOR_AUTOFILL_AUTO",
    "type" : "int",
    "comment" : "\n     * Automatically determine whether a view is important for autofill.\n     *\n     * @see #isImportantForAutofill()\n     * @see #setImportantForAutofill(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_AUTOFILL_YES",
    "type" : "int",
    "comment" : "\n     * The view is important for autofill, and its children (if any) will be traversed.\n     *\n     * @see #isImportantForAutofill()\n     * @see #setImportantForAutofill(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_AUTOFILL_NO",
    "type" : "int",
    "comment" : "\n     * The view is not important for autofill, but its children (if any) will be traversed.\n     *\n     * @see #isImportantForAutofill()\n     * @see #setImportantForAutofill(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS",
    "type" : "int",
    "comment" : "\n     * The view is important for autofill, but its children (if any) will not be traversed.\n     *\n     * @see #isImportantForAutofill()\n     * @see #setImportantForAutofill(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS",
    "type" : "int",
    "comment" : "\n     * The view is not important for autofill, and its children (if any) will not be traversed.\n     *\n     * @see #isImportantForAutofill()\n     * @see #setImportantForAutofill(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS",
    "type" : "int",
    "comment" : "\n     * Flag requesting you to add views that are marked as not important for autofill\n     * (see {@link #setImportantForAutofill(int)}) to a {@link ViewStructure}.\n     ",
    "links" : [ "#setImportantForAutofill(int)", "android.view.ViewStructure" ]
  }, {
    "name" : "IMPORTANT_FOR_CONTENT_CAPTURE_AUTO",
    "type" : "int",
    "comment" : "\n     * Automatically determine whether a view is important for content capture.\n     *\n     * @see #isImportantForContentCapture()\n     * @see #setImportantForContentCapture(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_CONTENT_CAPTURE_YES",
    "type" : "int",
    "comment" : "\n     * The view is important for content capture, and its children (if any) will be traversed.\n     *\n     * @see #isImportantForContentCapture()\n     * @see #setImportantForContentCapture(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_CONTENT_CAPTURE_NO",
    "type" : "int",
    "comment" : "\n     * The view is not important for content capture, but its children (if any) will be traversed.\n     *\n     * @see #isImportantForContentCapture()\n     * @see #setImportantForContentCapture(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS",
    "type" : "int",
    "comment" : "\n     * The view is important for content capture, but its children (if any) will not be traversed.\n     *\n     * @see #isImportantForContentCapture()\n     * @see #setImportantForContentCapture(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS",
    "type" : "int",
    "comment" : "\n     * The view is not important for content capture, and its children (if any) will not be\n     * traversed.\n     *\n     * @see #isImportantForContentCapture()\n     * @see #setImportantForContentCapture(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_CAPTURE_HINT_AUTO",
    "type" : "int",
    "comment" : "\n     * The content of this view will be considered for scroll capture if scrolling is possible.\n     *\n     * @see #getScrollCaptureHint()\n     * @see #setScrollCaptureHint(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_CAPTURE_HINT_EXCLUDE",
    "type" : "int",
    "comment" : "\n     * Explicitly exclcude this view as a potential scroll capture target. The system will not\n     * consider it. Mutually exclusive with {@link #SCROLL_CAPTURE_HINT_INCLUDE}, which this flag\n     * takes precedence over.\n     *\n     * @see #getScrollCaptureHint()\n     * @see #setScrollCaptureHint(int)\n     * @hide\n     ",
    "links" : [ "#SCROLL_CAPTURE_HINT_INCLUDE" ]
  }, {
    "name" : "SCROLL_CAPTURE_HINT_INCLUDE",
    "type" : "int",
    "comment" : "\n     * Explicitly include this view as a potential scroll capture target. When locating a scroll\n     * capture target, this view will be prioritized before others without this flag. Mutually\n     * exclusive with {@link #SCROLL_CAPTURE_HINT_EXCLUDE}, which takes precedence.\n     *\n     * @see #getScrollCaptureHint()\n     * @see #setScrollCaptureHint(int)\n     * @hide\n     ",
    "links" : [ "#SCROLL_CAPTURE_HINT_EXCLUDE" ]
  }, {
    "name" : "SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS",
    "type" : "int",
    "comment" : "\n     * Explicitly exclude all children of this view as potential scroll capture targets. This view\n     * is unaffected. Note: Excluded children are not considered, regardless of {@link\n     * #SCROLL_CAPTURE_HINT_INCLUDE}.\n     *\n     * @see #getScrollCaptureHint()\n     * @see #setScrollCaptureHint(int)\n     * @hide\n     ",
    "links" : [ "#SCROLL_CAPTURE_HINT_INCLUDE" ]
  }, {
    "name" : "ENABLED",
    "type" : "int",
    "comment" : "\n     * This view is enabled. Interpretation varies by subclass.\n     * Use with ENABLED_MASK when calling setFlags.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED",
    "type" : "int",
    "comment" : "\n     * This view is disabled. Interpretation varies by subclass.\n     * Use with ENABLED_MASK when calling setFlags.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_MASK",
    "type" : "int",
    "comment" : "\n    * Mask for use with setFlags indicating bits used for indicating whether\n    * this view is enabled\n    * {@hide}\n    ",
    "links" : [ ]
  }, {
    "name" : "WILL_NOT_DRAW",
    "type" : "int",
    "comment" : "\n     * This view won't draw. {@link #onDraw(android.graphics.Canvas)} won't be\n     * called and further optimizations will be performed. It is okay to have\n     * this flag set and a background. Use with DRAW_MASK when calling setFlags.\n     * {@hide}\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)" ]
  }, {
    "name" : "DRAW_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with setFlags indicating bits used for indicating whether\n     * this view is will draw\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_NONE",
    "type" : "int",
    "comment" : "\n     * <p>This view doesn't show scrollbars.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * <p>This view shows horizontal scrollbars.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_VERTICAL",
    "type" : "int",
    "comment" : "\n     * <p>This view shows vertical scrollbars.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_MASK",
    "type" : "int",
    "comment" : "\n     * <p>Mask for use with setFlags indicating bits used for indicating which\n     * scrollbars are enabled.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_TOUCHES_WHEN_OBSCURED",
    "type" : "int",
    "comment" : "\n     * Indicates that the view should filter touches when its window is obscured.\n     * Refer to the class comments for more information about this security feature.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_FITS_SYSTEM_WINDOWS",
    "type" : "int",
    "comment" : "\n     * Set for framework elements that use FITS_SYSTEM_WINDOWS, to indicate\n     * that they are optional and should be skipped if the window has\n     * requested system UI flags that ignore those insets for layout.\n     * <p>\n     * This is only used for support library as of Android R. The framework now uses\n     * {@link #PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS} such that it can skip the legacy\n     * insets path that loses insets information.\n     ",
    "links" : [ "#PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS" ]
  }, {
    "name" : "FADING_EDGE_NONE",
    "type" : "int",
    "comment" : "\n     * <p>This view doesn't show fading edges.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FADING_EDGE_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * <p>This view shows horizontal fading edges.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FADING_EDGE_VERTICAL",
    "type" : "int",
    "comment" : "\n     * <p>This view shows vertical fading edges.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FADING_EDGE_MASK",
    "type" : "int",
    "comment" : "\n     * <p>Mask for use with setFlags indicating bits used for indicating which\n     * fading edges are enabled.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "CLICKABLE",
    "type" : "int",
    "comment" : "\n     * <p>Indicates this view can be clicked. When clickable, a View reacts\n     * to clicks by notifying the OnClickListener.<p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DRAWING_CACHE_ENABLED",
    "type" : "int",
    "comment" : "\n     * <p>Indicates this view is caching its drawing into a bitmap.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SAVE_DISABLED",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that no icicle should be saved for this view.<p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SAVE_DISABLED_MASK",
    "type" : "int",
    "comment" : "\n     * <p>Mask for use with setFlags indicating bits used for the saveEnabled\n     * property.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "WILL_NOT_CACHE_DRAWING",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that no drawing cache should ever be created for this view.<p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FOCUSABLE_IN_TOUCH_MODE",
    "type" : "int",
    "comment" : "\n     * <p>Indicates this view can take / keep focus when int touch mode.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DRAWING_CACHE_QUALITY_LOW",
    "type" : "int",
    "comment" : "\n     * <p>Enables low quality mode for the drawing cache.</p>\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "DRAWING_CACHE_QUALITY_HIGH",
    "type" : "int",
    "comment" : "\n     * <p>Enables high quality mode for the drawing cache.</p>\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "DRAWING_CACHE_QUALITY_AUTO",
    "type" : "int",
    "comment" : "\n     * <p>Enables automatic quality mode for the drawing cache.</p>\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "DRAWING_CACHE_QUALITY_FLAGS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DRAWING_CACHE_QUALITY_MASK",
    "type" : "int",
    "comment" : "\n     * <p>Mask for use with setFlags indicating bits used for the cache\n     * quality property.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_CLICKABLE",
    "type" : "int",
    "comment" : "\n     * <p>\n     * Indicates this view can be long clicked. When long clickable, a View\n     * reacts to long clicks by notifying the OnLongClickListener or showing a\n     * context menu.\n     * </p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DUPLICATE_PARENT_STATE",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that this view gets its drawable states from its direct parent\n     * and ignores its original internal states.</p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_CLICKABLE",
    "type" : "int",
    "comment" : "\n     * <p>\n     * Indicates this view can be context clicked. When context clickable, a View reacts to a\n     * context click (e.g. a primary stylus button press or right mouse click) by notifying the\n     * OnContextClickListener.\n     * </p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_INSIDE_OVERLAY",
    "type" : "int",
    "comment" : "\n     * The scrollbar style to display the scrollbars inside the content area,\n     * without increasing the padding. The scrollbars will be overlaid with\n     * translucency on the view's content.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_INSIDE_INSET",
    "type" : "int",
    "comment" : "\n     * The scrollbar style to display the scrollbars inside the padded area,\n     * increasing the padding of the view. The scrollbars will not overlap the\n     * content area of the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_OUTSIDE_OVERLAY",
    "type" : "int",
    "comment" : "\n     * The scrollbar style to display the scrollbars at the edge of the view,\n     * without increasing the padding. The scrollbars will be overlaid with\n     * translucency.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_OUTSIDE_INSET",
    "type" : "int",
    "comment" : "\n     * The scrollbar style to display the scrollbars at the edge of the view,\n     * increasing the padding of the view. The scrollbars will only overlap the\n     * background, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_INSET_MASK",
    "type" : "int",
    "comment" : "\n     * Mask to check if the scrollbar style is overlay or inset.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_OUTSIDE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask to check if the scrollbar style is inside or outside.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBARS_STYLE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for scrollbar style.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "KEEP_SCREEN_ON",
    "type" : "int",
    "comment" : "\n     * View flag indicating that the screen should remain on while the\n     * window containing this view is visible to the user.  This effectively\n     * takes care of automatically setting the WindowManager's\n     * {@link WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON}.\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON" ]
  }, {
    "name" : "SOUND_EFFECTS_ENABLED",
    "type" : "int",
    "comment" : "\n     * View flag indicating whether this view should have sound effects enabled\n     * for events such as clicking and touching.\n     ",
    "links" : [ ]
  }, {
    "name" : "HAPTIC_FEEDBACK_ENABLED",
    "type" : "int",
    "comment" : "\n     * View flag indicating whether this view should have haptic feedback\n     * enabled for events such as long presses.\n     ",
    "links" : [ ]
  }, {
    "name" : "PARENT_SAVE_DISABLED",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that the view hierarchy should stop saving state when\n     * it reaches this view.  If state saving is initiated immediately at\n     * the view, it will be allowed.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "PARENT_SAVE_DISABLED_MASK",
    "type" : "int",
    "comment" : "\n     * <p>Mask for use with setFlags indicating bits used for PARENT_SAVE_DISABLED.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "sDebugPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOOLTIP",
    "type" : "int",
    "comment" : "\n     * <p>Indicates this view can display a tooltip on hover or long press.</p>\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FOCUSABLES_ALL",
    "type" : "int",
    "comment" : "\n     * View flag indicating whether {@link #addFocusables(ArrayList, int, int)}\n     * should add all focusable Views regardless if they are focusable in touch mode.\n     ",
    "links" : [ "#addFocusables(ArrayList" ]
  }, {
    "name" : "FOCUSABLES_TOUCH_MODE",
    "type" : "int",
    "comment" : "\n     * View flag indicating whether {@link #addFocusables(ArrayList, int, int)}\n     * should add only Views focusable in touch mode.\n     ",
    "links" : [ "#addFocusables(ArrayList" ]
  }, {
    "name" : "FOCUS_BACKWARD",
    "type" : "int",
    "comment" : "\n     * Use with {@link #focusSearch(int)}. Move focus to the previous selectable\n     * item.\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "FOCUS_FORWARD",
    "type" : "int",
    "comment" : "\n     * Use with {@link #focusSearch(int)}. Move focus to the next selectable\n     * item.\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "FOCUS_LEFT",
    "type" : "int",
    "comment" : "\n     * Use with {@link #focusSearch(int)}. Move focus to the left.\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "FOCUS_UP",
    "type" : "int",
    "comment" : "\n     * Use with {@link #focusSearch(int)}. Move focus up.\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "FOCUS_RIGHT",
    "type" : "int",
    "comment" : "\n     * Use with {@link #focusSearch(int)}. Move focus to the right.\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "FOCUS_DOWN",
    "type" : "int",
    "comment" : "\n     * Use with {@link #focusSearch(int)}. Move focus down.\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "MEASURED_SIZE_MASK",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #getMeasuredWidthAndState()} and\n     * {@link #getMeasuredWidthAndState()} that provide the actual measured size.\n     ",
    "links" : [ "#getMeasuredWidthAndState()" ]
  }, {
    "name" : "MEASURED_STATE_MASK",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #getMeasuredWidthAndState()} and\n     * {@link #getMeasuredWidthAndState()} that provide the additional state bits.\n     ",
    "links" : [ "#getMeasuredWidthAndState()" ]
  }, {
    "name" : "MEASURED_HEIGHT_STATE_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift of {@link #MEASURED_STATE_MASK} to get to the height bits\n     * for functions that combine both width and height into a single int,\n     * such as {@link #getMeasuredState()} and the childState argument of\n     * {@link #resolveSizeAndState(int, int, int)}.\n     ",
    "links" : [ "#resolveSizeAndState(int", "#getMeasuredState()", "#MEASURED_STATE_MASK" ]
  }, {
    "name" : "MEASURED_STATE_TOO_SMALL",
    "type" : "int",
    "comment" : "\n     * Bit of {@link #getMeasuredWidthAndState()} and\n     * {@link #getMeasuredWidthAndState()} that indicates the measured size\n     * is smaller that the space the view would like to have.\n     ",
    "links" : [ "#getMeasuredWidthAndState()" ]
  }, {
    "name" : "EMPTY_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view has no states set. States are used with\n     * {@link android.graphics.drawable.Drawable} to change the drawing of the\n     * view depending on its state.\n     *\n     * @see android.graphics.drawable.Drawable\n     * @see #getDrawableState()\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "ENABLED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled. States are used with\n     * {@link android.graphics.drawable.Drawable} to change the drawing of the\n     * view depending on its state.\n     *\n     * @see android.graphics.drawable.Drawable\n     * @see #getDrawableState()\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is focused. States are used with\n     * {@link android.graphics.drawable.Drawable} to change the drawing of the\n     * view depending on its state.\n     *\n     * @see android.graphics.drawable.Drawable\n     * @see #getDrawableState()\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is selected. States are used with\n     * {@link android.graphics.drawable.Drawable} to change the drawing of the\n     * view depending on its state.\n     *\n     * @see android.graphics.drawable.Drawable\n     * @see #getDrawableState()\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "PRESSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed. States are used with\n     * {@link android.graphics.drawable.Drawable} to change the drawing of the\n     * view depending on its state.\n     *\n     * @see android.graphics.drawable.Drawable\n     * @see #getDrawableState()\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view's window has focus. States are used with\n     * {@link android.graphics.drawable.Drawable} to change the drawing of the\n     * view depending on its state.\n     *\n     * @see android.graphics.drawable.Drawable\n     * @see #getDrawableState()\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "ENABLED_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled and has the focus.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled and selected.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled and that its window has focus.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "FOCUSED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is focused and selected.\n     *\n     * @see #FOCUSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "FOCUSED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view has the focus and that its window has the focus.\n     *\n     * @see #FOCUSED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is selected and that its window has the focus.\n     *\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_FOCUSED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled, focused and selected.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled, focused and its window has the focus.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled, selected and its window has the focus.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is focused, selected and its window has the focus.\n     *\n     * @see #FOCUSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is enabled, focused, selected and its window\n     * has the focus.\n     *\n     * @see #ENABLED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed and its window has the focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed and selected.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, selected and its window has the focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed and focused.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, focused and its window has the focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_FOCUSED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, focused and selected.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, focused, selected and its window has the focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed and enabled.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled and its window has the focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled and selected.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled, selected and its window has the\n     * focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled and focused.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled, focused and its window has the\n     * focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled, focused and selected.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET",
    "type" : "int[]",
    "comment" : "\n     * Indicates the view is pressed, enabled, focused, selected and its window\n     * has the focus.\n     *\n     * @see #PRESSED_STATE_SET\n     * @see #ENABLED_STATE_SET\n     * @see #SELECTED_STATE_SET\n     * @see #FOCUSED_STATE_SET\n     * @see #WINDOW_FOCUSED_STATE_SET\n     ",
    "links" : [ ]
  }, {
    "name" : "POPULATING_ACCESSIBILITY_EVENT_TYPES",
    "type" : "int",
    "comment" : "\n     * Accessibility event types that are dispatched for text population.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CORNERS_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CORNERS_SIZE_DIP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThreadLocal",
    "type" : "ThreadLocal<Rect>",
    "comment" : "\n     * Temporary Rect currently for use in setBackground().  This will probably\n     * be extended in the future to hold our own class with more than just\n     * a Rect. :)\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeyedTags",
    "type" : "SparseArray<Object>",
    "comment" : "\n     * Map used to store views' tags.\n     ",
    "links" : [ ]
  }, {
    "name" : "sNextAccessibilityViewId",
    "type" : "int",
    "comment" : "\n     * The next available accessibility id.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentAnimation",
    "type" : "Animation",
    "comment" : "\n     * The animation currently associated with this view.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMeasuredWidth",
    "type" : "int",
    "comment" : "\n     * Width as measured during measure pass.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mMeasuredHeight",
    "type" : "int",
    "comment" : "\n     * Height as measured during measure pass.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mRecreateDisplayList",
    "type" : "boolean",
    "comment" : "\n     * Flag to indicate that this view was marked INVALIDATED, or had its display list\n     * invalidated, prior to the current drawing iteration. If true, the view must re-draw\n     * its display list. This flag, used only when hw accelerated, allows us to clear the\n     * flag while retaining this information until it's needed (at getDisplayList() time and\n     * in drawChild(), when we decide to draw a view's children's display lists into our own).\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mID",
    "type" : "int",
    "comment" : "\n     * The view's identifier.\n     * {@hide}\n     *\n     * @see #setId(int)\n     * @see #getId()\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutofillViewId",
    "type" : "int",
    "comment" : " The ID of this view for autofill purposes.\n     * <ul>\n     *     <li>== {@link #NO_ID}: ID has not been assigned yet\n     *     <li>&le; {@link #LAST_APP_AUTOFILL_ID}: View is not part of a activity. The ID is\n     *                                                  unique in the process. This might change\n     *                                                  over activity lifecycle events.\n     *     <li>&gt; {@link #LAST_APP_AUTOFILL_ID}: View is part of a activity. The ID is\n     *                                                  unique in the activity. This stays the same\n     *                                                  over activity lifecycle events.\n     ",
    "links" : [ "#LAST_APP_AUTOFILL_ID", "#NO_ID" ]
  }, {
    "name" : "mAccessibilityViewId",
    "type" : "int",
    "comment" : " ID for accessibility purposes. This ID must be unique for every window",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityCursorPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "Object",
    "comment" : "\n     * The view's tag.\n     * {@hide}\n     *\n     * @see #setTag(Object)\n     * @see #getTag()\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_WANTS_FOCUS",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_FOCUSED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_SELECTED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_IS_ROOT_NAMESPACE",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_HAS_BOUNDS",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_DRAWN",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_DRAW_ANIMATION",
    "type" : "int",
    "comment" : "\n     * When this flag is set, this view is running an animation on behalf of its\n     * children and should therefore not cancel invalidate requests, even if they\n     * lie outside of this view's bounds.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_SKIP_DRAW",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_REQUEST_TRANSPARENT_REGIONS",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_DRAWABLE_STATE_DIRTY",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_MEASURED_DIMENSION_SET",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_FORCE_LAYOUT",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_LAYOUT_REQUIRED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_PRESSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PFLAG_DRAWING_CACHE_VALID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_ANIMATION_STARTED",
    "type" : "int",
    "comment" : "\n     * Flag used to indicate that this view should be drawn once more (and only once\n     * more) after its animation has completed.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_SAVE_STATE_CALLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PFLAG_ALPHA_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that the View returned true when onSetAlpha() was called and that\n     * the alpha must be restored.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_SCROLL_CONTAINER",
    "type" : "int",
    "comment" : "\n     * Set by {@link #setScrollContainer(boolean)}.\n     ",
    "links" : [ "#setScrollContainer(boolean)" ]
  }, {
    "name" : "PFLAG_SCROLL_CONTAINER_ADDED",
    "type" : "int",
    "comment" : "\n     * Set by {@link #setScrollContainer(boolean)}.\n     ",
    "links" : [ "#setScrollContainer(boolean)" ]
  }, {
    "name" : "PFLAG_DIRTY",
    "type" : "int",
    "comment" : "\n     * View flag indicating whether this view was invalidated (fully or partially.)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_DIRTY_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for {@link #PFLAG_DIRTY}.\n     *\n     * @hide\n     ",
    "links" : [ "#PFLAG_DIRTY" ]
  }, {
    "name" : "PFLAG_OPAQUE_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Indicates whether the background is opaque.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_OPAQUE_SCROLLBARS",
    "type" : "int",
    "comment" : "\n     * Indicates whether the scrollbars are opaque.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_OPAQUE_MASK",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view is opaque.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_PREPRESSED",
    "type" : "int",
    "comment" : "\n     * Indicates a prepressed state;\n     * the short time between ACTION_DOWN and recognizing\n     * a 'real' press. Prepressed is used to recognize quick taps\n     * even when they are shorter than ViewConfiguration.getTapTimeout().\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_CANCEL_NEXT_UP_EVENT",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view is temporarily detached.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH",
    "type" : "int",
    "comment" : "\n     * Indicates that we should awaken scroll bars once attached\n     *\n     * PLEASE NOTE: This flag is now unused as we now send onVisibilityChanged\n     * during window attachment and it is no longer needed. Feel free to repurpose it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_HOVERED",
    "type" : "int",
    "comment" : "\n     * Indicates that the view has received HOVER_ENTER.  Cleared on HOVER_EXIT.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK",
    "type" : "int",
    "comment" : "\n     * Flag set by {@link AutofillManager} if it needs to be notified when this view is clicked.\n     ",
    "links" : [ "android.view.autofill.AutofillManager" ]
  }, {
    "name" : "PFLAG_ACTIVATED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PFLAG_INVALIDATED",
    "type" : "int",
    "comment" : "\n     * Indicates that this view was specifically invalidated, not just dirtied because some\n     * child view was invalidated. The flag is used to determine when we need to recreate\n     * a view's display list (as opposed to just returning a reference to its existing\n     * display list).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_DRAG_CAN_ACCEPT",
    "type" : "int",
    "comment" : "\n     * Indicates that this view has reported that it can accept the current drag's content.\n     * Cleared when the drag operation concludes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_DRAG_HOVERED",
    "type" : "int",
    "comment" : "\n     * Indicates that this view is currently directly under the drag location in a\n     * drag-and-drop operation involving content that it can accept.  Cleared when\n     * the drag exits the view, or when the drag operation concludes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_DIRECTION_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * A flag to indicate that the layout direction of this view has not been defined yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_DIRECTION_LTR",
    "type" : "int",
    "comment" : "\n     * Horizontal layout direction of this view is from Left to Right.\n     * Use with {@link #setLayoutDirection}.\n     ",
    "links" : [ "#setLayoutDirection" ]
  }, {
    "name" : "LAYOUT_DIRECTION_RTL",
    "type" : "int",
    "comment" : "\n     * Horizontal layout direction of this view is from Right to Left.\n     * Use with {@link #setLayoutDirection}.\n     ",
    "links" : [ "#setLayoutDirection" ]
  }, {
    "name" : "LAYOUT_DIRECTION_INHERIT",
    "type" : "int",
    "comment" : "\n     * Horizontal layout direction of this view is inherited from its parent.\n     * Use with {@link #setLayoutDirection}.\n     ",
    "links" : [ "#setLayoutDirection" ]
  }, {
    "name" : "LAYOUT_DIRECTION_LOCALE",
    "type" : "int",
    "comment" : "\n     * Horizontal layout direction of this view is from deduced from the default language\n     * script for the locale. Use with {@link #setLayoutDirection}.\n     ",
    "links" : [ "#setLayoutDirection" ]
  }, {
    "name" : "PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift to get the horizontal layout direction. (bits after DRAG_HOVERED)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_LAYOUT_DIRECTION_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with private flags indicating bits used for horizontal layout direction.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view horizontal layout direction has been resolved and drawn to the\n     * right-to-left direction.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_LAYOUT_DIRECTION_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view horizontal layout direction has been resolved.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with private flags indicating bits used for resolved horizontal layout direction.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_DIRECTION_FLAGS",
    "type" : "int[]",
    "comment" : "\n     * Array of horizontal layout direction flags for mapping attribute \"layoutDirection\" to correct\n     * flag value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_DIRECTION_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default horizontal layout direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_DIRECTION_RESOLVED_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default horizontal layout direction.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_INHERIT",
    "type" : "int",
    "comment" : "\n     * Text direction is inherited through {@link ViewGroup}\n     ",
    "links" : [ "android.view.ViewGroup" ]
  }, {
    "name" : "TEXT_DIRECTION_FIRST_STRONG",
    "type" : "int",
    "comment" : "\n     * Text direction is using \"first strong algorithm\". The first strong directional character\n     * determines the paragraph direction. If there is no strong directional character, the\n     * paragraph direction is the view's resolved layout direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_ANY_RTL",
    "type" : "int",
    "comment" : "\n     * Text direction is using \"any-RTL\" algorithm. The paragraph direction is RTL if it contains\n     * any strong RTL character, otherwise it is LTR if it contains any strong LTR characters.\n     * If there are neither, the paragraph direction is the view's resolved layout direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_LTR",
    "type" : "int",
    "comment" : "\n     * Text direction is forced to LTR.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_RTL",
    "type" : "int",
    "comment" : "\n     * Text direction is forced to RTL.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_LOCALE",
    "type" : "int",
    "comment" : "\n     * Text direction is coming from the system Locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_FIRST_STRONG_LTR",
    "type" : "int",
    "comment" : "\n     * Text direction is using \"first strong algorithm\". The first strong directional character\n     * determines the paragraph direction. If there is no strong directional character, the\n     * paragraph direction is LTR.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_FIRST_STRONG_RTL",
    "type" : "int",
    "comment" : "\n     * Text direction is using \"first strong algorithm\". The first strong directional character\n     * determines the paragraph direction. If there is no strong directional character, the\n     * paragraph direction is RTL.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default text direction is inherited\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_DIRECTION_RESOLVED_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default resolved text direction\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_MASK_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift to get the horizontal layout direction. (bits after LAYOUT_DIRECTION_RESOLVED)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with private flags indicating bits used for text direction.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_FLAGS",
    "type" : "int[]",
    "comment" : "\n     * Array of text direction flags for mapping attribute \"textDirection\" to correct\n     * flag value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view text direction has been resolved.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift to get the horizontal layout direction. (bits after DRAG_HOVERED)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with private flags indicating bits used for resolved text direction.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view text direction has been resolved to the \"first strong\" heuristic.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_ALIGNMENT_INHERIT",
    "type" : "int",
    "comment" : "\n     * Default text alignment. The text alignment of this View is inherited from its parent.\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_GRAVITY",
    "type" : "int",
    "comment" : "\n     * Default for the root view. The gravity determines the text alignment, ALIGN_NORMAL,\n     * ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph's text direction.\n     *\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_TEXT_START",
    "type" : "int",
    "comment" : "\n     * Align to the start of the paragraph, e.g. ALIGN_NORMAL.\n     *\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_TEXT_END",
    "type" : "int",
    "comment" : "\n     * Align to the end of the paragraph, e.g. ALIGN_OPPOSITE.\n     *\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_CENTER",
    "type" : "int",
    "comment" : "\n     * Center the paragraph, e.g. ALIGN_CENTER.\n     *\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_VIEW_START",
    "type" : "int",
    "comment" : "\n     * Align to the start of the view, which is ALIGN_LEFT if the view's resolved\n     * layoutDirection is LTR, and ALIGN_RIGHT otherwise.\n     *\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_VIEW_END",
    "type" : "int",
    "comment" : "\n     * Align to the end of the view, which is ALIGN_RIGHT if the view's resolved\n     * layoutDirection is LTR, and ALIGN_LEFT otherwise.\n     *\n     * Use with {@link #setTextAlignment(int)}\n     ",
    "links" : [ "#setTextAlignment(int)" ]
  }, {
    "name" : "TEXT_ALIGNMENT_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default text alignment is inherited\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_ALIGNMENT_RESOLVED_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default resolved text alignment\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT",
    "type" : "int",
    "comment" : "\n      * Bit shift to get the horizontal layout direction. (bits after DRAG_HOVERED)\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_MASK",
    "type" : "int",
    "comment" : "\n      * Mask for use with private flags indicating bits used for text alignment.\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_FLAGS",
    "type" : "int[]",
    "comment" : "\n     * Array of text direction flags for mapping attribute \"textAlignment\" to correct\n     * flag value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Indicates whether the view text alignment has been resolved.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift to get the resolved text alignment.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with private flags indicating bits used for text alignment.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Indicates whether if the view text alignment has been resolved to gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT",
    "type" : "int",
    "comment" : "\n     * Shift for the bits in {@link #mPrivateFlags2} related to the\n     * \"importantForAccessibility\" attribute.\n     ",
    "links" : [ "#mPrivateFlags2" ]
  }, {
    "name" : "IMPORTANT_FOR_ACCESSIBILITY_AUTO",
    "type" : "int",
    "comment" : "\n     * Automatically determine whether a view is important for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_ACCESSIBILITY_YES",
    "type" : "int",
    "comment" : "\n     * The view is important for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_ACCESSIBILITY_NO",
    "type" : "int",
    "comment" : "\n     * The view is not important for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS",
    "type" : "int",
    "comment" : "\n     * The view is not important for accessibility, nor are any of its\n     * descendant views.\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPORTANT_FOR_ACCESSIBILITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * The default whether the view is important for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for obtaining the bits which specify how to determine\n     * whether a view is important for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT",
    "type" : "int",
    "comment" : "\n     * Shift for the bits in {@link #mPrivateFlags2} related to the\n     * \"accessibilityLiveRegion\" attribute.\n     ",
    "links" : [ "#mPrivateFlags2" ]
  }, {
    "name" : "ACCESSIBILITY_LIVE_REGION_NONE",
    "type" : "int",
    "comment" : "\n     * Live region mode specifying that accessibility services should not\n     * automatically announce changes to this view. This is the default live\n     * region mode for most views.\n     * <p>\n     * Use with {@link #setAccessibilityLiveRegion(int)}.\n     ",
    "links" : [ "#setAccessibilityLiveRegion(int)" ]
  }, {
    "name" : "ACCESSIBILITY_LIVE_REGION_POLITE",
    "type" : "int",
    "comment" : "\n     * Live region mode specifying that accessibility services should announce\n     * changes to this view.\n     * <p>\n     * Use with {@link #setAccessibilityLiveRegion(int)}.\n     ",
    "links" : [ "#setAccessibilityLiveRegion(int)" ]
  }, {
    "name" : "ACCESSIBILITY_LIVE_REGION_ASSERTIVE",
    "type" : "int",
    "comment" : "\n     * Live region mode specifying that accessibility services should interrupt\n     * ongoing speech to immediately announce changes to this view.\n     * <p>\n     * Use with {@link #setAccessibilityLiveRegion(int)}.\n     ",
    "links" : [ "#setAccessibilityLiveRegion(int)" ]
  }, {
    "name" : "ACCESSIBILITY_LIVE_REGION_DEFAULT",
    "type" : "int",
    "comment" : "\n     * The default whether the view is important for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for obtaining the bits which specify a view's accessibility live\n     * region mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_ACCESSIBILITY_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Flag indicating whether a view has accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Flag whether the accessibility state of the subtree rooted at this view changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_VIEW_QUICK_REJECTED",
    "type" : "int",
    "comment" : "\n     * Flag indicating whether a view failed the quickReject() check in draw(). This condition\n     * is used to check whether later changes to the view's transform should invalidate the\n     * view to force the quickReject test to run again.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_PADDING_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that start/end padding has been resolved into left/right padding\n     * for use in measurement, layout, drawing, etc. This is set by {@link #resolvePadding()}\n     * and checked by {@link #measure(int, int)} to determine if padding needs to be resolved\n     * during measurement. In some special cases this is required such as when an adapter-based\n     * view measures prospective children without attaching them to a window.\n     ",
    "links" : [ "#resolvePadding()", "#measure(int" ]
  }, {
    "name" : "PFLAG2_DRAWABLE_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the start/end drawables has been resolved into left/right ones.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG2_HAS_TRANSIENT_STATE",
    "type" : "int",
    "comment" : "\n     * Indicates that the view is tracking some sort of transient state\n     * that the app should not need to be aware of, but that the framework\n     * should take special care to preserve.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL_RTL_PROPERTIES_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Group of bits indicating that RTL properties resolution is done.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_VIEW_IS_ANIMATING_TRANSFORM",
    "type" : "int",
    "comment" : "\n     * Flag indicating that view has a transform animation set on it. This is used to track whether\n     * an animation is cleared between successive frames, in order to tell the associated\n     * DisplayList to clear its animation matrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_VIEW_IS_ANIMATING_ALPHA",
    "type" : "int",
    "comment" : "\n     * Flag indicating that view has an alpha animation set on it. This is used to track whether an\n     * animation is cleared between successive frames, in order to tell the associated\n     * DisplayList to restore its alpha value.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_IS_LAID_OUT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the view has been through at least one layout since it\n     * was last attached to a window.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that a call to measure() was skipped and should be done\n     * instead when layout() is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_CALLED_SUPER",
    "type" : "int",
    "comment" : "\n     * Flag indicating that an overridden method correctly called down to\n     * the superclass implementation as required by the API spec.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_APPLYING_INSETS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that we're in the process of applying window insets.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_FITTING_SYSTEM_WINDOWS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that we're in the process of fitting system windows using the old method.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_NESTED_SCROLLING_ENABLED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that nested scrolling is enabled for this view.\n     * The view will optionally cooperate with views up its parent chain to allow for\n     * integrated nested scrolling along the same axis.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCROLL_INDICATOR_TOP",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the bottom scroll indicator should be displayed\n     * when this view can scroll up.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCROLL_INDICATOR_BOTTOM",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the bottom scroll indicator should be displayed\n     * when this view can scroll down.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCROLL_INDICATOR_LEFT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the left scroll indicator should be displayed\n     * when this view can scroll left.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCROLL_INDICATOR_RIGHT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the right scroll indicator should be displayed\n     * when this view can scroll right.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCROLL_INDICATOR_START",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the start scroll indicator should be displayed\n     * when this view can scroll in the start direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCROLL_INDICATOR_END",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the end scroll indicator should be displayed\n     * when this view can scroll in the end direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "DRAG_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATORS_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATORS_PFLAG3_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for use with setFlags indicating bits used for indicating which\n     * scroll indicators are enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT",
    "type" : "int",
    "comment" : "\n     * Left-shift required to translate between public scroll indicator flags\n     * and internal PFLAGS3 flags. When used as a right-shift, translates\n     * PFLAGS3 flags to public flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATOR_TOP",
    "type" : "int",
    "comment" : "\n     * Scroll indicator direction for the top edge of the view.\n     *\n     * @see #setScrollIndicators(int)\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATOR_BOTTOM",
    "type" : "int",
    "comment" : "\n     * Scroll indicator direction for the bottom edge of the view.\n     *\n     * @see #setScrollIndicators(int)\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATOR_LEFT",
    "type" : "int",
    "comment" : "\n     * Scroll indicator direction for the left edge of the view.\n     *\n     * @see #setScrollIndicators(int)\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATOR_RIGHT",
    "type" : "int",
    "comment" : "\n     * Scroll indicator direction for the right edge of the view.\n     *\n     * @see #setScrollIndicators(int)\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_INDICATOR_START",
    "type" : "int",
    "comment" : "\n     * Scroll indicator direction for the starting edge of the view.\n     * <p>\n     * Resolved according to the view's layout direction, see\n     * {@link #getLayoutDirection()} for more information.\n     *\n     * @see #setScrollIndicators(int)\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     ",
    "links" : [ "#getLayoutDirection()" ]
  }, {
    "name" : "SCROLL_INDICATOR_END",
    "type" : "int",
    "comment" : "\n     * Scroll indicator direction for the ending edge of the view.\n     * <p>\n     * Resolved according to the view's layout direction, see\n     * {@link #getLayoutDirection()} for more information.\n     *\n     * @see #setScrollIndicators(int)\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     ",
    "links" : [ "#getLayoutDirection()" ]
  }, {
    "name" : "PFLAG3_ASSIST_BLOCKED",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that we are allowing {@link ViewStructure} to traverse\n     * into this view.<p>\n     ",
    "links" : [ "android.view.ViewStructure" ]
  }, {
    "name" : "PFLAG3_CLUSTER",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the view is a root of a keyboard navigation cluster.\n     *\n     * @see #isKeyboardNavigationCluster()\n     * @see #setKeyboardNavigationCluster(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_IS_AUTOFILLED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the view is autofilled\n     *\n     * @see #isAutofilled()\n     * @see #setAutofilled(boolean, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_FINGER_DOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the user is currently touching the screen.\n     * Currently used for the tooltip positioning only.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_FOCUSED_BY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this view is the default-focus view.\n     *\n     * @see #isFocusedByDefault()\n     * @see #setFocusedByDefault(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_IMPORTANT_FOR_AUTOFILL_SHIFT",
    "type" : "int",
    "comment" : "\n     * Shift for the bits in {@link #mPrivateFlags3} related to the\n     * \"importantForAutofill\" attribute.\n     ",
    "links" : [ "#mPrivateFlags3" ]
  }, {
    "name" : "PFLAG3_IMPORTANT_FOR_AUTOFILL_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for obtaining the bits which specify how to determine\n     * whether a view is important for autofill.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE",
    "type" : "int",
    "comment" : "\n     * Whether this view has rendered elements that overlap (see {@link\n     * #hasOverlappingRendering()}, {@link #forceHasOverlappingRendering(boolean)}, and\n     * {@link #getHasOverlappingRendering()} ). The value in this bit is only valid when\n     * PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED has been set. Otherwise, the value is\n     * determined by whatever {@link #hasOverlappingRendering()} returns.\n     ",
    "links" : [ "#hasOverlappingRendering()", "#forceHasOverlappingRendering(boolean)", "#getHasOverlappingRendering()" ]
  }, {
    "name" : "PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED",
    "type" : "int",
    "comment" : "\n     * Whether {@link #forceHasOverlappingRendering(boolean)} has been called. When true, value\n     * in PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE is valid.\n     ",
    "links" : [ "#forceHasOverlappingRendering(boolean)" ]
  }, {
    "name" : "PFLAG3_TEMPORARY_DETACH",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the view is temporarily detached from the parent view.\n     *\n     * @see #onStartTemporaryDetach()\n     * @see #onFinishTemporaryDetach()\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_NO_REVEAL_ON_FOCUS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the view does not wish to be revealed within its parent\n     * hierarchy when it gains focus. Expressed in the negative since the historical\n     * default behavior is to reveal on focus; this flag suppresses that behavior.\n     *\n     * @see #setRevealOnFocusHint(boolean)\n     * @see #getRevealOnFocusHint()\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that when layout is completed we should notify\n     * that the view was entered for autofill purposes. To minimize\n     * showing autofill for views not visible to the user we evaluate\n     * user visibility which cannot be done until the view is laid out.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_SCREEN_READER_FOCUSABLE",
    "type" : "int",
    "comment" : "\n     * Works like focusable for screen readers, but without the side effects on input focus.\n     * @see #setScreenReaderFocusable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_AGGREGATED_VISIBLE",
    "type" : "int",
    "comment" : "\n     * The last aggregated visibility. Used to detect when it truly changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG3_AUTOFILLID_EXPLICITLY_SET",
    "type" : "int",
    "comment" : "\n     * Used to indicate that {@link #mAutofillId} was explicitly set through\n     * {@link #setAutofillId(AutofillId)}.\n     ",
    "links" : [ "#setAutofillId(AutofillId)", "#mAutofillId" ]
  }, {
    "name" : "PFLAG3_ACCESSIBILITY_HEADING",
    "type" : "int",
    "comment" : "\n     * Indicates if the View is a heading for accessibility purposes\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_IMPORTANT_FOR_CONTENT_CAPTURE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for obtaining the bits which specify how to determine\n     * whether a view is important for autofill.\n     *\n     * <p>NOTE: the important for content capture values were the first flags added and are set in\n     * the rightmost position, so we don't need to shift them\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_NOTIFIED_CONTENT_CAPTURE_APPEARED",
    "type" : "int",
    "comment" : "\n     * Variables used to control when the IntelligenceManager.notifyNodeAdded()/removed() methods\n     * should be called.\n     *\n     * The idea is to call notifyAppeared() after the view is layout and visible, then call\n     * notifyDisappeared() when it's gone (without known when it was removed from the parent).\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_NOTIFIED_CONTENT_CAPTURE_DISAPPEARED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_CONTENT_CAPTURE_IMPORTANCE_IS_CACHED",
    "type" : "int",
    "comment" : "\n     * Flags used to cache the value returned by isImportantForContentCapture while the view\n     * hierarchy is being traversed.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_CONTENT_CAPTURE_IMPORTANCE_CACHED_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_CONTENT_CAPTURE_IMPORTANCE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS",
    "type" : "int",
    "comment" : "\n     * @see #OPTIONAL_FITS_SYSTEM_WINDOWS\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_AUTOFILL_HIDE_HIGHLIGHT",
    "type" : "int",
    "comment" : "\n     * Flag indicating the field should not have yellow highlight when autofilled.\n     ",
    "links" : [ ]
  }, {
    "name" : "PFLAG4_SCROLL_CAPTURE_HINT_SHIFT",
    "type" : "int",
    "comment" : "\n     * Shift for the bits in {@link #mPrivateFlags4} related to scroll capture.\n     ",
    "links" : [ "#mPrivateFlags4" ]
  }, {
    "name" : "PFLAG4_SCROLL_CAPTURE_HINT_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_STRUCTURE_FOR_ASSIST",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STRUCTURE_FOR_AUTOFILL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STRUCTURE_FOR_CONTENT_CAPTURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OVER_SCROLL_ALWAYS",
    "type" : "int",
    "comment" : "\n     * Always allow a user to over-scroll this view, provided it is a\n     * view that can scroll.\n     *\n     * @see #getOverScrollMode()\n     * @see #setOverScrollMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "OVER_SCROLL_IF_CONTENT_SCROLLS",
    "type" : "int",
    "comment" : "\n     * Allow a user to over-scroll this view only if the content is large\n     * enough to meaningfully scroll, provided it is a view that can scroll.\n     *\n     * @see #getOverScrollMode()\n     * @see #setOverScrollMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "OVER_SCROLL_NEVER",
    "type" : "int",
    "comment" : "\n     * Never allow a user to over-scroll this view.\n     *\n     * @see #getOverScrollMode()\n     * @see #setOverScrollMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_FLAG_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Special constant for {@link #setSystemUiVisibility(int)}: View has\n     * requested the system UI (status bar) to be visible (the default).\n     *\n     * @see #setSystemUiVisibility(int)\n     * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n     * instead.\n     ",
    "links" : [ "android.view.WindowInsetsController", "#setSystemUiVisibility(int)" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_LOW_PROFILE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View has requested the\n     * system UI to enter an unobtrusive \"low profile\" mode.\n     *\n     * <p>This is for use in games, book readers, video players, or any other\n     * \"immersive\" application where the usual system chrome is deemed too distracting.\n     *\n     * <p>In low profile mode, the status bar and/or navigation icons may dim.\n     *\n     * @see #setSystemUiVisibility(int)\n     * @deprecated Low profile mode is deprecated. Hide the system bars instead if the application\n     * needs to be in a unobtrusive mode. Use {@link WindowInsetsController#hide(int)} with\n     * {@link Type#systemBars()}.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.text.InputType#systemBars()", "android.view.WindowInsetsController#hide(int)" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_HIDE_NAVIGATION",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View has requested that the\n     * system navigation be temporarily hidden.\n     *\n     * <p>This is an even less obtrusive state than that called for by\n     * {@link #SYSTEM_UI_FLAG_LOW_PROFILE}; on devices that draw essential navigation controls\n     * (Home, Back, and the like) on screen, <code>SYSTEM_UI_FLAG_HIDE_NAVIGATION</code> will cause\n     * those to disappear. This is useful (in conjunction with the\n     * {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN FLAG_FULLSCREEN} and\n     * {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN FLAG_LAYOUT_IN_SCREEN}\n     * window flags) for displaying content using every last pixel on the display.\n     *\n     * <p>There is a limitation: because navigation controls are so important, the least user\n     * interaction will cause them to reappear immediately.  When this happens, both\n     * this flag and {@link #SYSTEM_UI_FLAG_FULLSCREEN} will be cleared automatically,\n     * so that both elements reappear at the same time.\n     *\n     * @see #setSystemUiVisibility(int)\n     * @deprecated Use {@link WindowInsetsController#hide(int)} with {@link Type#navigationBars()}\n     * instead.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN", "android.view.WindowInsetsController#hide(int)", "#SYSTEM_UI_FLAG_LOW_PROFILE", "#SYSTEM_UI_FLAG_FULLSCREEN", "android.text.InputType#navigationBars()", "android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_FULLSCREEN",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View has requested to go\n     * into the normal fullscreen mode so that its content can take over the screen\n     * while still allowing the user to interact with the application.\n     *\n     * <p>This has the same visual effect as\n     * {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN\n     * WindowManager.LayoutParams.FLAG_FULLSCREEN},\n     * meaning that non-critical screen decorations (such as the status bar) will be\n     * hidden while the user is in the View's window, focusing the experience on\n     * that content.  Unlike the window flag, if you are using ActionBar in\n     * overlay mode with {@link Window#FEATURE_ACTION_BAR_OVERLAY\n     * Window.FEATURE_ACTION_BAR_OVERLAY}, then enabling this flag will also\n     * hide the action bar.\n     *\n     * <p>This approach to going fullscreen is best used over the window flag when\n     * it is a transient state -- that is, the application does this at certain\n     * points in its user interaction where it wants to allow the user to focus\n     * on content, but not as a continuous state.  For situations where the application\n     * would like to simply stay full screen the entire time (such as a game that\n     * wants to take over the screen), the\n     * {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN window flag}\n     * is usually a better approach.  The state set here will be removed by the system\n     * in various situations (such as the user moving to another application) like\n     * the other system UI states.\n     *\n     * <p>When using this flag, the application should provide some easy facility\n     * for the user to go out of it.  A common example would be in an e-book\n     * reader, where tapping on the screen brings back whatever screen and UI\n     * decorations that had been hidden while the user was immersed in reading\n     * the book.\n     *\n     * @see #setSystemUiVisibility(int)\n     * @deprecated Use {@link WindowInsetsController#hide(int)} with {@link Type#statusBars()}\n     * instead.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_FULLSCREENWindowManager.LayoutParams.FLAG_FULLSCREEN", "#setSystemUiVisibility(int)", "android.view.WindowInsetsController#hide(int)", "android.view.Window#FEATURE_ACTION_BAR_OVERLAYWindow.FEATURE_ACTION_BAR_OVERLAY", "android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN", "android.text.InputType#statusBars()" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_LAYOUT_STABLE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: When using other layout\n     * flags, we would like a stable view of the content insets given to\n     * {@link #fitSystemWindows(Rect)}.  This means that the insets seen there\n     * will always represent the worst case that the application can expect\n     * as a continuous state.  In the stock Android UI this is the space for\n     * the system bar, nav bar, and status bar, but not more transient elements\n     * such as an input method.\n     *\n     * The stable layout your UI sees is based on the system UI modes you can\n     * switch to.  That is, if you specify {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}\n     * then you will get a stable layout for changes of the\n     * {@link #SYSTEM_UI_FLAG_FULLSCREEN} mode; if you specify\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN} and\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}, then you can transition\n     * to {@link #SYSTEM_UI_FLAG_FULLSCREEN} and {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}\n     * with a stable layout.  (Note that you should avoid using\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION} by itself.)\n     *\n     * If you have set the window flag {@link WindowManager.LayoutParams#FLAG_FULLSCREEN}\n     * to hide the status bar (instead of using {@link #SYSTEM_UI_FLAG_FULLSCREEN}),\n     * then a hidden status bar will be considered a \"stable\" state for purposes\n     * here.  This allows your UI to continually hide the status bar, while still\n     * using the system UI flags to hide the action bar while still retaining\n     * a stable layout.  Note that changing the window fullscreen flag will never\n     * provide a stable layout for a clean transition.\n     *\n     * <p>If you are using ActionBar in\n     * overlay mode with {@link Window#FEATURE_ACTION_BAR_OVERLAY\n     * Window.FEATURE_ACTION_BAR_OVERLAY}, this flag will also impact the\n     * insets it adds to those given to the application.\n     *\n     * @deprecated Use {@link WindowInsets#getInsetsIgnoringVisibility(int)} instead to retrieve\n     * insets that don't change when system bars change visibility state.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "android.view.WindowInsets#getInsetsIgnoringVisibility(int)", "#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "#SYSTEM_UI_FLAG_FULLSCREEN", "WindowManager.LayoutParams#FLAG_FULLSCREEN", "#SYSTEM_UI_FLAG_HIDE_NAVIGATION", "android.view.Window#FEATURE_ACTION_BAR_OVERLAYWindow.FEATURE_ACTION_BAR_OVERLAY", "#fitSystemWindows(Rect)" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View would like its window\n     * to be laid out as if it has requested\n     * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, even if it currently hasn't.  This\n     * allows it to avoid artifacts when switching in and out of that mode, at\n     * the expense that some of its user interface may be covered by screen\n     * decorations when they are shown.  You can perform layout of your inner\n     * UI elements to account for the navigation system UI through the\n     * {@link #fitSystemWindows(Rect)} method.\n     *\n     * @deprecated For floating windows, use {@link LayoutParams#setFitInsetsTypes(int)} with\n     * {@link Type#navigationBars()}. For non-floating windows that fill the screen, call\n     * {@link Window#setDecorFitsSystemWindows(boolean)} with {@code false}.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.view.WindowManager.LayoutParams#setFitInsetsTypes(int)", "android.view.Window#setDecorFitsSystemWindows(boolean)", "#SYSTEM_UI_FLAG_HIDE_NAVIGATION", "#fitSystemWindows(Rect)", "android.text.InputType#navigationBars()" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View would like its window\n     * to be laid out as if it has requested\n     * {@link #SYSTEM_UI_FLAG_FULLSCREEN}, even if it currently hasn't.  This\n     * allows it to avoid artifacts when switching in and out of that mode, at\n     * the expense that some of its user interface may be covered by screen\n     * decorations when they are shown.  You can perform layout of your inner\n     * UI elements to account for non-fullscreen system UI through the\n     * {@link #fitSystemWindows(Rect)} method.\n     *\n     * <p>Note: on displays that have a {@link DisplayCutout}, the window may still be placed\n     *  differently than if {@link #SYSTEM_UI_FLAG_FULLSCREEN} was set, if the\n     *  window's {@link WindowManager.LayoutParams#layoutInDisplayCutoutMode\n     *  layoutInDisplayCutoutMode} is\n     *  {@link WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT\n     *  LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT}. To avoid this, use either of the other modes.\n     *\n     * @see WindowManager.LayoutParams#layoutInDisplayCutoutMode\n     * @see WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT\n     * @see WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES\n     * @see WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER\n     *\n     * @deprecated For floating windows, use {@link LayoutParams#setFitInsetsTypes(int)} with\n     * {@link Type#statusBars()} ()}. For non-floating windows that fill the screen, call\n     * {@link Window#setDecorFitsSystemWindows(boolean)} with {@code false}.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.view.DisplayCutout", "android.view.WindowManager.LayoutParams#setFitInsetsTypes(int)", "WindowManager.LayoutParams#layoutInDisplayCutoutModelayoutInDisplayCutoutMode", "#SYSTEM_UI_FLAG_FULLSCREEN", "android.view.Window#setDecorFitsSystemWindows(boolean)", "#fitSystemWindows(Rect)", "WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTLAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT", "android.text.InputType#statusBars()" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_IMMERSIVE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View would like to remain interactive when\n     * hiding the navigation bar with {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}.  If this flag is\n     * not set, {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION} will be force cleared by the system on any\n     * user interaction.\n     * <p>Since this flag is a modifier for {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, it only\n     * has an effect when used in combination with that flag.</p>\n     *\n     * @deprecated Use {@link WindowInsetsController#BEHAVIOR_SHOW_BARS_BY_SWIPE} instead.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.view.WindowInsetsController#BEHAVIOR_SHOW_BARS_BY_SWIPE", "#SYSTEM_UI_FLAG_HIDE_NAVIGATION" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_IMMERSIVE_STICKY",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: View would like to remain interactive when\n     * hiding the status bar with {@link #SYSTEM_UI_FLAG_FULLSCREEN} and/or hiding the navigation\n     * bar with {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}.  Use this flag to create an immersive\n     * experience while also hiding the system bars.  If this flag is not set,\n     * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION} will be force cleared by the system on any user\n     * interaction, and {@link #SYSTEM_UI_FLAG_FULLSCREEN} will be force-cleared by the system\n     * if the user swipes from the top of the screen.\n     * <p>When system bars are hidden in immersive mode, they can be revealed temporarily with\n     * system gestures, such as swiping from the top of the screen.  These transient system bars\n     * will overlay app's content, may have some degree of transparency, and will automatically\n     * hide after a short timeout.\n     * </p><p>Since this flag is a modifier for {@link #SYSTEM_UI_FLAG_FULLSCREEN} and\n     * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, it only has an effect when used in combination\n     * with one or both of those flags.</p>\n     *\n     * @deprecated Use {@link WindowInsetsController#BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE} instead.\n     ",
    "links" : [ "android.view.WindowInsetsController#BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE", "#setSystemUiVisibility(int)", "#SYSTEM_UI_FLAG_FULLSCREEN", "#SYSTEM_UI_FLAG_HIDE_NAVIGATION" ]
  }, {
    "name" : "SYSTEM_UI_FLAG_LIGHT_STATUS_BAR",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: Requests the status bar to draw in a mode that\n     * is compatible with light status bar backgrounds.\n     *\n     * <p>For this to take effect, the window must request\n     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS\n     *         FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} but not\n     * {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS\n     *         FLAG_TRANSLUCENT_STATUS}.\n     *\n     * @see android.R.attr#windowLightStatusBar\n     * @deprecated Use {@link WindowInsetsController#APPEARANCE_LIGHT_STATUS_BARS} instead.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSFLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS", "android.view.WindowInsetsController#APPEARANCE_LIGHT_STATUS_BARS", "android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUSFLAG_TRANSLUCENT_STATUS" ]
  }, {
    "name" : "SYSTEM_UI_RESERVED_LEGACY1",
    "type" : "int",
    "comment" : "\n     * This flag was previously used for a private API. DO NOT reuse it for a public API as it might\n     * trigger undefined behavior on older platforms with apps compiled against a new SDK.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_RESERVED_LEGACY2",
    "type" : "int",
    "comment" : "\n     * This flag was previously used for a private API. DO NOT reuse it for a public API as it might\n     * trigger undefined behavior on older platforms with apps compiled against a new SDK.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setSystemUiVisibility(int)}: Requests the navigation bar to draw in a mode\n     * that is compatible with light navigation bar backgrounds.\n     *\n     * <p>For this to take effect, the window must request\n     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS\n     *         FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} but not\n     * {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION\n     *         FLAG_TRANSLUCENT_NAVIGATION}.\n     *\n     * @see android.R.attr#windowLightNavigationBar\n     * @deprecated Use {@link WindowInsetsController#APPEARANCE_LIGHT_NAVIGATION_BARS} instead.\n     ",
    "links" : [ "#setSystemUiVisibility(int)", "android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSFLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS", "android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATIONFLAG_TRANSLUCENT_NAVIGATION", "android.view.WindowInsetsController#APPEARANCE_LIGHT_NAVIGATION_BARS" ]
  }, {
    "name" : "STATUS_BAR_HIDDEN",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #SYSTEM_UI_FLAG_LOW_PROFILE} instead.\n     ",
    "links" : [ "#SYSTEM_UI_FLAG_LOW_PROFILE" ]
  }, {
    "name" : "STATUS_BAR_VISIBLE",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #SYSTEM_UI_FLAG_VISIBLE} instead.\n     ",
    "links" : [ "#SYSTEM_UI_FLAG_VISIBLE" ]
  }, {
    "name" : "STATUS_BAR_DISABLE_EXPAND",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to make the status bar not expandable.  Unless you also\n     * set {@link #STATUS_BAR_DISABLE_NOTIFICATION_ICONS}, new notifications will continue to show.\n     ",
    "links" : [ "#STATUS_BAR_DISABLE_NOTIFICATION_ICONS" ]
  }, {
    "name" : "STATUS_BAR_DISABLE_NOTIFICATION_ICONS",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide notification icons and scrolling ticker text.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_NOTIFICATION_ALERTS",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to disable incoming notification alerts.  This will not block\n     * icons, but it will block sound, vibrating and other visual or aural notifications.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_NOTIFICATION_TICKER",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide only the scrolling ticker.  Note that\n     * {@link #STATUS_BAR_DISABLE_NOTIFICATION_ICONS} implies\n     * {@link #STATUS_BAR_DISABLE_NOTIFICATION_TICKER}.\n     ",
    "links" : [ "#STATUS_BAR_DISABLE_NOTIFICATION_ICONS", "#STATUS_BAR_DISABLE_NOTIFICATION_TICKER" ]
  }, {
    "name" : "STATUS_BAR_DISABLE_SYSTEM_INFO",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide the center system info area.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_HOME",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide only the home button.  Don't use this\n     * unless you're a special part of the system UI (i.e., setup wizard, keyguard).\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_BACK",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide only the back button. Don't use this\n     * unless you're a special part of the system UI (i.e., setup wizard, keyguard).\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_CLOCK",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide only the clock.  You might use this if your activity has\n     * its own clock making the status bar's clock redundant.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_RECENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to hide only the recent apps button. Don't use this\n     * unless you're a special part of the system UI (i.e., setup wizard, keyguard).\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_DISABLE_SEARCH",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to disable the global search gesture. Don't use this\n     * unless you're a special part of the system UI (i.e., setup wizard, keyguard).\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_TRANSIENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to specify that the status bar is displayed in transient mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_BAR_TRANSIENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to specify that the navigation bar is displayed in transient mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_UNHIDE",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to specify that the hidden status bar would like to be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_BAR_UNHIDE",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to specify that the hidden navigation bar would like to be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_TRANSLUCENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to specify that the status bar is displayed in translucent mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_BAR_TRANSLUCENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * NOTE: This flag may only be used in subtreeSystemUiVisibility. It is masked\n     * out of the public fields to keep the undefined bits out of the developer's way.\n     *\n     * Flag to specify that the navigation bar is displayed in translucent mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_BAR_TRANSPARENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * Makes navigation bar transparent (but not the status bar).\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAR_TRANSPARENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * Makes status bar transparent (but not the navigation bar).\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_TRANSPARENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     *\n     * Makes both status bar and navigation bar transparent.\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLIC_STATUS_BAR_VISIBILITY_MASK",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_CLEARABLE_FLAGS",
    "type" : "int",
    "comment" : "\n     * These are the system UI flags that can be cleared by events outside\n     * of an application.  Currently this is just the ability to tap on the\n     * screen while hiding the navigation bar to have it return.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_LAYOUT_FLAGS",
    "type" : "int",
    "comment" : "\n     * Flags that can impact the layout in relation to system UI.\n     *\n     * @deprecated System UI layout flags are deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIND_VIEWS_WITH_TEXT",
    "type" : "int",
    "comment" : "\n     * Find views that render the specified text.\n     *\n     * @see #findViewsWithText(ArrayList, CharSequence, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FIND_VIEWS_WITH_CONTENT_DESCRIPTION",
    "type" : "int",
    "comment" : "\n     * Find find views that contain the specified content description.\n     *\n     * @see #findViewsWithText(ArrayList, CharSequence, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS",
    "type" : "int",
    "comment" : "\n     * Find views that contain {@link AccessibilityNodeProvider}. Such\n     * a View is a root of virtual view hierarchy and may contain the searched\n     * text. If this flag is set Views with providers are automatically\n     * added and it is a responsibility of the client to call the APIs of\n     * the provider to determine whether the virtual tree rooted at this View\n     * contains the text, i.e. getting the list of {@link AccessibilityNodeInfo}s\n     * representing the virtual views with this text.\n     *\n     * @see #findViewsWithText(ArrayList, CharSequence, int)\n     *\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeProvider" ]
  }, {
    "name" : "ACCESSIBILITY_CURSOR_POSITION_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * The undefined cursor position.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_STATE_OFF",
    "type" : "int",
    "comment" : "\n     * Indicates that the screen has changed state and is now off.\n     *\n     * @see #onScreenStateChanged(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_STATE_ON",
    "type" : "int",
    "comment" : "\n     * Indicates that the screen has changed state and is now on.\n     *\n     * @see #onScreenStateChanged(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_AXIS_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates no axis of view scrolling.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_AXIS_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * Indicates scrolling along the horizontal axis.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_AXIS_VERTICAL",
    "type" : "int",
    "comment" : "\n     * Indicates scrolling along the vertical axis.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOverScrollMode",
    "type" : "int",
    "comment" : "\n     * Controls the over-scroll mode for this view.\n     * See {@link #overScrollBy(int, int, int, int, int, int, int, int, boolean)},\n     * {@link #OVER_SCROLL_ALWAYS}, {@link #OVER_SCROLL_IF_CONTENT_SCROLLS},\n     * and {@link #OVER_SCROLL_NEVER}.\n     ",
    "links" : [ "#OVER_SCROLL_ALWAYS", "#OVER_SCROLL_IF_CONTENT_SCROLLS", "#overScrollBy(int", "#OVER_SCROLL_NEVER" ]
  }, {
    "name" : "mParent",
    "type" : "ViewParent",
    "comment" : "\n     * The parent this view is attached to.\n     * {@hide}\n     *\n     * @see #getParent()\n     ",
    "links" : [ ]
  }, {
    "name" : "mAttachInfo",
    "type" : "AttachInfo",
    "comment" : "\n     * {@hide}\n     *\n     * Not available for general use. If you need help, hang up and then dial one of the following\n     * public APIs:\n     *\n     * @see #isAttachedToWindow() for current attach state\n     * @see #onAttachedToWindow() for subclasses performing work when becoming attached\n     * @see #onDetachedFromWindow() for subclasses performing work when becoming detached\n     * @see OnAttachStateChangeListener for other code performing work on attach/detach\n     * @see #getHandler() for posting messages to this view's UI thread/looper\n     * @see #getParent() for interacting with the parent chain\n     * @see #getWindowToken() for the current window token\n     * @see #getRootView() for the view at the root of the attached hierarchy\n     * @see #getDisplay() for the Display this view is presented on\n     * @see #getRootWindowInsets() for the current insets applied to the whole attached window\n     * @see #hasWindowFocus() for whether the attached window is currently focused\n     * @see #getWindowVisibility() for checking the visibility of the attached window\n     ",
    "links" : [ ]
  }, {
    "name" : "mPrivateFlags",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mPrivateFlags2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivateFlags3",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivateFlags4",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemUiVisibility",
    "type" : "int",
    "comment" : "\n     * This view's request for the visibility of the status bar.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransientStateCount",
    "type" : "int",
    "comment" : "\n     * Reference count for transient state.\n     * @see #setHasTransientState(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "mWindowAttachCount",
    "type" : "int",
    "comment" : "\n     * Count of how many windows this view has been attached to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLayoutParams",
    "type" : "ViewGroup.LayoutParams",
    "comment" : "\n     * The layout parameters associated with this view and used by the parent\n     * {@link android.view.ViewGroup} to determine how this view should be\n     * laid out.\n     *\n     * The field should not be used directly. Instead {@link #getLayoutParams()} and {@link\n     * #setLayoutParams(ViewGroup.LayoutParams)} should be used. The setter guarantees internal\n     * state correctness of the class.\n     * {@hide}\n     ",
    "links" : [ "#getLayoutParams()", "android.view.ViewGroup", "#setLayoutParams(ViewGroup.LayoutParams)" ]
  }, {
    "name" : "mViewFlags",
    "type" : "int",
    "comment" : "\n     * The view flags hold various views states.\n     *\n     * Use {@link #setTransitionVisibility(int)} to change the visibility of this view without\n     * triggering updates.\n     * {@hide}\n     ",
    "links" : [ "#setTransitionVisibility(int)" ]
  }, {
    "name" : "mTransformationInfo",
    "type" : "TransformationInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mClipBounds",
    "type" : "Rect",
    "comment" : "\n     * Current clip bounds. to which all drawing of this view are constrained.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastIsOpaque",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeft",
    "type" : "int",
    "comment" : "\n     * The distance in pixels from the left edge of this view's parent\n     * to the left edge of this view.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mRight",
    "type" : "int",
    "comment" : "\n     * The distance in pixels from the left edge of this view's parent\n     * to the right edge of this view.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mTop",
    "type" : "int",
    "comment" : "\n     * The distance in pixels from the top edge of this view's parent\n     * to the top edge of this view.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mBottom",
    "type" : "int",
    "comment" : "\n     * The distance in pixels from the top edge of this view's parent\n     * to the bottom edge of this view.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mScrollX",
    "type" : "int",
    "comment" : "\n     * The offset, in pixels, by which the content of this view is scrolled\n     * horizontally.\n     * Please use {@link View#getScrollX()} and {@link View#setScrollX(int)} instead of\n     * accessing these directly.\n     * {@hide}\n     ",
    "links" : [ "android.view.View#setScrollX(int)", "android.view.View#getScrollX()" ]
  }, {
    "name" : "mScrollY",
    "type" : "int",
    "comment" : "\n     * The offset, in pixels, by which the content of this view is scrolled\n     * vertically.\n     * Please use {@link View#getScrollY()} and {@link View#setScrollY(int)} instead of\n     * accessing these directly.\n     * {@hide}\n     ",
    "links" : [ "android.view.View#setScrollY(int)", "android.view.View#getScrollY()" ]
  }, {
    "name" : "mPaddingLeft",
    "type" : "int",
    "comment" : "\n     * The final computed left padding in pixels that is used for drawing. This is the distance in\n     * pixels between the left edge of this view and the left edge of its content.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mPaddingRight",
    "type" : "int",
    "comment" : "\n     * The final computed right padding in pixels that is used for drawing. This is the distance in\n     * pixels between the right edge of this view and the right edge of its content.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mPaddingTop",
    "type" : "int",
    "comment" : "\n     * The final computed top padding in pixels that is used for drawing. This is the distance in\n     * pixels between the top edge of this view and the top edge of its content.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mPaddingBottom",
    "type" : "int",
    "comment" : "\n     * The final computed bottom padding in pixels that is used for drawing. This is the distance in\n     * pixels between the bottom edge of this view and the bottom edge of its content.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mLayoutInsets",
    "type" : "Insets",
    "comment" : "\n     * The layout insets in pixels, that is the distance in pixels between the\n     * visible edges of this view its bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStateDescription",
    "type" : "CharSequence",
    "comment" : "\n     * Briefly describes the state of the view and is primarily used for accessibility support.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContentDescription",
    "type" : "CharSequence",
    "comment" : "\n     * Briefly describes the view and is primarily used for accessibility support.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityPaneTitle",
    "type" : "CharSequence",
    "comment" : "\n     * If this view represents a distinct part of the window, it can have a title that labels the\n     * area.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLabelForId",
    "type" : "int",
    "comment" : "\n     * Specifies the id of a view for which this view serves as a label for\n     * accessibility purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMatchLabelForPredicate",
    "type" : "MatchLabelForPredicate",
    "comment" : "\n     * Predicate for matching labeled view id with its label for\n     * accessibility purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityTraversalBeforeId",
    "type" : "int",
    "comment" : "\n     * Specifies a view before which this one is visited in accessibility traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityTraversalAfterId",
    "type" : "int",
    "comment" : "\n     * Specifies a view after which this one is visited in accessibility traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMatchIdPredicate",
    "type" : "MatchIdPredicate",
    "comment" : "\n     * Predicate for matching a view by its id.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingRight",
    "type" : "int",
    "comment" : "\n     * The right padding after RTL resolution, but before taking account of scroll bars.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingBottom",
    "type" : "int",
    "comment" : "\n     * The resolved bottom padding before taking account of scroll bars.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingLeft",
    "type" : "int",
    "comment" : "\n     * The left padding after RTL resolution, but before taking account of scroll bars.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingStart",
    "type" : "int",
    "comment" : "\n     * Cache the paddingStart set by the user to append to the scrollbar's size.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingEnd",
    "type" : "int",
    "comment" : "\n     * Cache the paddingEnd set by the user to append to the scrollbar's size.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingLeftInitial",
    "type" : "int",
    "comment" : "\n     * The left padding as set by a setter method, a background's padding, or via XML property\n     * resolution. This value is the padding before LTR resolution or taking account of scrollbars.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserPaddingRightInitial",
    "type" : "int",
    "comment" : "\n     * The right padding as set by a setter method, a background's padding, or via XML property\n     * resolution. This value is the padding before LTR resolution or taking account of scrollbars.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_PADDING",
    "type" : "int",
    "comment" : "\n     * Default undefined padding\n     ",
    "links" : [ ]
  }, {
    "name" : "mLeftPaddingDefined",
    "type" : "boolean",
    "comment" : "\n     * Cache if a left padding has been defined explicitly via padding, horizontal padding,\n     * or leftPadding in XML, or by setPadding(...) or setRelativePadding(...)\n     ",
    "links" : [ ]
  }, {
    "name" : "mRightPaddingDefined",
    "type" : "boolean",
    "comment" : "\n     * Cache if a right padding has been defined explicitly via padding, horizontal padding,\n     * or rightPadding in XML, or by setPadding(...) or setRelativePadding(...)\n     ",
    "links" : [ ]
  }, {
    "name" : "mOldWidthMeasureSpec",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mOldHeightMeasureSpec",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMeasureCache",
    "type" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackground",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundTint",
    "type" : "TintInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForegroundInfo",
    "type" : "ForegroundInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollIndicatorDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundRenderNode",
    "type" : "RenderNode",
    "comment" : "\n     * RenderNode used for backgrounds.\n     * <p>\n     * When non-null and valid, this is expected to contain an up-to-date copy\n     * of the background drawable. It is cleared on temporary detach, and reset\n     * on cleanup.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mBackgroundResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundSizeChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultFocusHighlight",
    "type" : "Drawable",
    "comment" : " The default focus highlight.\n     * @see #mDefaultFocusHighlightEnabled\n     * @see Drawable#hasFocusStateSpecified()\n     ",
    "links" : [ ]
  }, {
    "name" : "mDefaultFocusHighlightCache",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultFocusHighlightSizeChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUseDefaultFocusHighlight",
    "type" : "boolean",
    "comment" : "\n     * True if the default focus highlight is needed on the target device.\n     ",
    "links" : [ ]
  }, {
    "name" : "sCanFocusZeroSized",
    "type" : "boolean",
    "comment" : "\n     * True if zero-sized views can be focused.\n     ",
    "links" : [ ]
  }, {
    "name" : "sAlwaysAssignFocus",
    "type" : "boolean",
    "comment" : "\n     * Always assign focus if a focusable View is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransitionName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerInfo",
    "type" : "ListenerInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTooltipInfo",
    "type" : "TooltipInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLongClickX",
    "type" : "float",
    "comment" : " two-arg performLongClick() method to the legacy no-arg version.",
    "links" : [ ]
  }, {
    "name" : "mLongClickY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * The application environment this view lives in.\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollCache",
    "type" : "ScrollabilityCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableState",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutlineProvider",
    "type" : "ViewOutlineProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateListAnimator",
    "type" : "StateListAnimator",
    "comment" : "\n     * Animator that automatically runs based on state changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNextFocusLeftId",
    "type" : "int",
    "comment" : "\n     * When this view has focus and the next focus is {@link #FOCUS_LEFT},\n     * the user may specify which view to go to next.\n     ",
    "links" : [ "#FOCUS_LEFT" ]
  }, {
    "name" : "mNextFocusRightId",
    "type" : "int",
    "comment" : "\n     * When this view has focus and the next focus is {@link #FOCUS_RIGHT},\n     * the user may specify which view to go to next.\n     ",
    "links" : [ "#FOCUS_RIGHT" ]
  }, {
    "name" : "mNextFocusUpId",
    "type" : "int",
    "comment" : "\n     * When this view has focus and the next focus is {@link #FOCUS_UP},\n     * the user may specify which view to go to next.\n     ",
    "links" : [ "#FOCUS_UP" ]
  }, {
    "name" : "mNextFocusDownId",
    "type" : "int",
    "comment" : "\n     * When this view has focus and the next focus is {@link #FOCUS_DOWN},\n     * the user may specify which view to go to next.\n     ",
    "links" : [ "#FOCUS_DOWN" ]
  }, {
    "name" : "mNextFocusForwardId",
    "type" : "int",
    "comment" : "\n     * When this view has focus and the next focus is {@link #FOCUS_FORWARD},\n     * the user may specify which view to go to next.\n     ",
    "links" : [ "#FOCUS_FORWARD" ]
  }, {
    "name" : "mNextClusterForwardId",
    "type" : "int",
    "comment" : "\n     * User-specified next keyboard navigation cluster in the {@link #FOCUS_FORWARD} direction.\n     *\n     * @see #findUserSetNextKeyboardNavigationCluster(View, int)\n     ",
    "links" : [ "#FOCUS_FORWARD" ]
  }, {
    "name" : "mDefaultFocusHighlightEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether this View should use a default focus highlight when it gets focused but doesn't\n     * have {@link android.R.attr#state_focused} defined in its background.\n     ",
    "links" : [ "android.R.attr#state_focused" ]
  }, {
    "name" : "mPendingCheckForLongPress",
    "type" : "CheckForLongPress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingCheckForTap",
    "type" : "CheckForTap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerformClick",
    "type" : "PerformClick",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSendViewScrolledAccessibilityEvent",
    "type" : "SendViewScrolledAccessibilityEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSendStateChangedAccessibilityEvent",
    "type" : "SendAccessibilityEventThrottle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnsetPressedState",
    "type" : "UnsetPressedState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasPerformedLongPress",
    "type" : "boolean",
    "comment" : "\n     * Whether the long press's action has been invoked.  The tap's action is invoked on the\n     * up event while a long press is invoked as soon as the long press duration is reached, so\n     * a long press could be performed before the tap is checked, in which case the tap's action\n     * should not be invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInContextButtonPress",
    "type" : "boolean",
    "comment" : "\n     * Whether a context click button is currently pressed down. This is true when the stylus is\n     * touching the screen and the primary button has been pressed, or if a mouse's right button is\n     * pressed. This is false once the button is released or if the stylus has been lifted.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIgnoreNextUpEvent",
    "type" : "boolean",
    "comment" : "\n     * Whether the next up event should be ignored for the purposes of gesture recognition. This is\n     * true after a stylus button press has occured, when the next up event should not be recognized\n     * as a tap.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinHeight",
    "type" : "int",
    "comment" : "\n     * The minimum height of the view. We'll try our best to have the height\n     * of this view to at least this amount.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinWidth",
    "type" : "int",
    "comment" : "\n     * The minimum width of the view. We'll try our best to have the width\n     * of this view to at least this amount.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTouchDelegate",
    "type" : "TouchDelegate",
    "comment" : "\n     * The delegate to handle touch events that are physically in this view\n     * but should be handled by another view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHoveringTouchDelegate",
    "type" : "boolean",
    "comment" : "\n     * While touch exploration is in use, set to true when hovering across boundaries and\n     * inside the touch area of the delegate at receiving {@link MotionEvent#ACTION_HOVER_ENTER}\n     * or {@link MotionEvent#ACTION_HOVER_MOVE}. False when leaving boundaries or receiving a\n     * {@link MotionEvent#ACTION_HOVER_EXIT}.\n     * Note that children of view group are excluded in the touch area.\n     * @see #dispatchTouchExplorationHoverEvent\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_HOVER_EXIT", "android.view.MotionEvent#ACTION_HOVER_MOVE", "android.view.MotionEvent#ACTION_HOVER_ENTER" ]
  }, {
    "name" : "mDrawingCacheBackgroundColor",
    "type" : "int",
    "comment" : "\n     * Solid color to use as a background when creating the drawing cache. Enables\n     * the cache to use 16 bit bitmaps instead of 32 bit.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFloatingTreeObserver",
    "type" : "ViewTreeObserver",
    "comment" : "\n     * Special tree observer used when mAttachInfo is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTouchSlop",
    "type" : "int",
    "comment" : "\n     * Cache the touch slop from the context that created the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAmbiguousGestureMultiplier",
    "type" : "float",
    "comment" : "\n     * Cache the ambiguous gesture multiplier from the context that created the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimator",
    "type" : "ViewPropertyAnimator",
    "comment" : "\n     * Object that handles automatic animation of view properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrameMetricsObservers",
    "type" : "ArrayList<FrameMetricsObserver>",
    "comment" : "\n     * List of registered FrameMetricsObservers.\n     ",
    "links" : [ ]
  }, {
    "name" : "DRAG_FLAG_GLOBAL",
    "type" : "int",
    "comment" : " 256",
    "links" : [ ]
  }, {
    "name" : "DRAG_FLAG_GLOBAL_URI_READ",
    "type" : "int",
    "comment" : "\n     * When this flag is used with {@link #DRAG_FLAG_GLOBAL}, the drag recipient will be able to\n     * request read access to the content URI(s) contained in the {@link ClipData} object.\n     * @see android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION\n     ",
    "links" : [ "android.content.ClipData", "#DRAG_FLAG_GLOBAL" ]
  }, {
    "name" : "DRAG_FLAG_GLOBAL_URI_WRITE",
    "type" : "int",
    "comment" : "\n     * When this flag is used with {@link #DRAG_FLAG_GLOBAL}, the drag recipient will be able to\n     * request write access to the content URI(s) contained in the {@link ClipData} object.\n     * @see android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION\n     ",
    "links" : [ "android.content.ClipData", "#DRAG_FLAG_GLOBAL" ]
  }, {
    "name" : "DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION",
    "type" : "int",
    "comment" : "\n     * When this flag is used with {@link #DRAG_FLAG_GLOBAL_URI_READ} and/or {@link\n     * #DRAG_FLAG_GLOBAL_URI_WRITE}, the URI permission grant can be persisted across device\n     * reboots until explicitly revoked with\n     * {@link android.content.Context#revokeUriPermission(Uri, int)} Context.revokeUriPermission}.\n     * @see android.content.Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION\n     ",
    "links" : [ "android.content.Context#revokeUriPermission(Uri", "#DRAG_FLAG_GLOBAL_URI_WRITE", "#DRAG_FLAG_GLOBAL_URI_READ" ]
  }, {
    "name" : "DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION",
    "type" : "int",
    "comment" : "\n     * When this flag is used with {@link #DRAG_FLAG_GLOBAL_URI_READ} and/or {@link\n     * #DRAG_FLAG_GLOBAL_URI_WRITE}, the URI permission grant applies to any URI that is a prefix\n     * match against the original granted URI.\n     * @see android.content.Intent#FLAG_GRANT_PREFIX_URI_PERMISSION\n     ",
    "links" : [ "#DRAG_FLAG_GLOBAL_URI_WRITE", "#DRAG_FLAG_GLOBAL_URI_READ" ]
  }, {
    "name" : "DRAG_FLAG_OPAQUE",
    "type" : "int",
    "comment" : "\n     * Flag indicating that the drag shadow will be opaque.  When\n     * {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)} is called\n     * with this flag set, the drag shadow will be opaque, otherwise, it will be semitransparent.\n     ",
    "links" : [ "#startDragAndDrop(ClipData" ]
  }, {
    "name" : "mVerticalScrollFactor",
    "type" : "float",
    "comment" : "\n     * Vertical scroll factor cached by {@link #getVerticalScrollFactor}.\n     ",
    "links" : [ "#getVerticalScrollFactor" ]
  }, {
    "name" : "mVerticalScrollbarPosition",
    "type" : "int",
    "comment" : "\n     * Position of the vertical scroll bar.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBAR_POSITION_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Position the scroll bar at the default position as determined by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBAR_POSITION_LEFT",
    "type" : "int",
    "comment" : "\n     * Position the scroll bar along the left edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLLBAR_POSITION_RIGHT",
    "type" : "int",
    "comment" : "\n     * Position the scroll bar along the right edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYER_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates that the view does not have a layer.\n     *\n     * @see #getLayerType()\n     * @see #setLayerType(int, android.graphics.Paint)\n     * @see #LAYER_TYPE_SOFTWARE\n     * @see #LAYER_TYPE_HARDWARE\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYER_TYPE_SOFTWARE",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that the view has a software layer. A software layer is backed\n     * by a bitmap and causes the view to be rendered using Android's software\n     * rendering pipeline, even if hardware acceleration is enabled.</p>\n     *\n     * <p>Software layers have various usages:</p>\n     * <p>When the application is not using hardware acceleration, a software layer\n     * is useful to apply a specific color filter and/or blending mode and/or\n     * translucency to a view and all its children.</p>\n     * <p>When the application is using hardware acceleration, a software layer\n     * is useful to render drawing primitives not supported by the hardware\n     * accelerated pipeline. It can also be used to cache a complex view tree\n     * into a texture and reduce the complexity of drawing operations. For instance,\n     * when animating a complex view tree with a translation, a software layer can\n     * be used to render the view tree only once.</p>\n     * <p>Software layers should be avoided when the affected view tree updates\n     * often. Every update will require to re-render the software layer, which can\n     * potentially be slow (particularly when hardware acceleration is turned on\n     * since the layer will have to be uploaded into a hardware texture after every\n     * update.)</p>\n     *\n     * @see #getLayerType()\n     * @see #setLayerType(int, android.graphics.Paint)\n     * @see #LAYER_TYPE_NONE\n     * @see #LAYER_TYPE_HARDWARE\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYER_TYPE_HARDWARE",
    "type" : "int",
    "comment" : "\n     * <p>Indicates that the view has a hardware layer. A hardware layer is backed\n     * by a hardware specific texture (generally Frame Buffer Objects or FBO on\n     * OpenGL hardware) and causes the view to be rendered using Android's hardware\n     * rendering pipeline, but only if hardware acceleration is turned on for the\n     * view hierarchy. When hardware acceleration is turned off, hardware layers\n     * behave exactly as {@link #LAYER_TYPE_SOFTWARE software layers}.</p>\n     *\n     * <p>A hardware layer is useful to apply a specific color filter and/or\n     * blending mode and/or translucency to a view and all its children.</p>\n     * <p>A hardware layer can be used to cache a complex view tree into a\n     * texture and reduce the complexity of drawing operations. For instance,\n     * when animating a complex view tree with a translation, a hardware layer can\n     * be used to render the view tree only once.</p>\n     * <p>A hardware layer can also be used to increase the rendering quality when\n     * rotation transformations are applied on a view. It can also be used to\n     * prevent potential clipping issues when applying 3D transforms on a view.</p>\n     *\n     * @see #getLayerType()\n     * @see #setLayerType(int, android.graphics.Paint)\n     * @see #LAYER_TYPE_NONE\n     * @see #LAYER_TYPE_SOFTWARE\n     ",
    "links" : [ "#LAYER_TYPE_SOFTWARE" ]
  }, {
    "name" : "mLayerType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayerPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachingFailed",
    "type" : "boolean",
    "comment" : "\n     * Set to true when drawing cache is enabled and cannot be created.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDrawingCache",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnscaledDrawingCache",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderNode",
    "type" : "RenderNode",
    "comment" : "\n     * RenderNode holding View properties, potentially holding a DisplayList of View content.\n     * <p>\n     * When non-null and valid, this is expected to contain an up-to-date copy\n     * of the View content. Its DisplayList content is cleared on temporary detach and reset on\n     * cleanup.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSendingHoverAccessibilityEvents",
    "type" : "boolean",
    "comment" : "\n     * Set to true when the view is sending hover accessibility events because it\n     * is the innermost hovered view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityDelegate",
    "type" : "AccessibilityDelegate",
    "comment" : "\n     * Delegate for injecting accessibility functionality.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOverlay",
    "type" : "ViewOverlay",
    "comment" : "\n     * The view's overlay layer. Developers get a reference to the overlay via getOverlay()\n     * and add/remove objects to/from the overlay directly through the Overlay methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNestedScrollingParent",
    "type" : "ViewParent",
    "comment" : "\n     * The currently active parent view for receiving delegated nested scrolling events.\n     * This is set by {@link #startNestedScroll(int)} during a touch interaction and cleared\n     * by {@link #stopNestedScroll()} at the same point where we clear\n     * requestDisallowInterceptTouchEvent.\n     ",
    "links" : [ "#startNestedScroll(int)", "#stopNestedScroll()" ]
  }, {
    "name" : "mInputEventConsistencyVerifier",
    "type" : "InputEventConsistencyVerifier",
    "comment" : "\n     * Consistency verifier for debugging purposes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sNextGeneratedId",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempNestedScrollConsumed",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGhostView",
    "type" : "GhostView",
    "comment" : "\n     * An overlay is going to draw this View instead of being drawn as part of this\n     * View's parent. mGhostView is the View in the Overlay that must be invalidated\n     * when this view is invalidated.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAttributes",
    "type" : "String[]",
    "comment" : "\n     * Holds pairs of adjacent attribute data: attribute name followed by its value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAttributeMap",
    "type" : "SparseArray<String>",
    "comment" : "\n     * Maps a Resource id to its name.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRunQueue",
    "type" : "HandlerActionQueue",
    "comment" : "\n     * Queue of pending runnables. Used to postpone calls to post() until this\n     * view is attached and has a handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPointerIcon",
    "type" : "PointerIcon",
    "comment" : "\n     * The pointer icon when the mouse hovers on this view. The default is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartActivityRequestWho",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mRoundScrollbarRenderer",
    "type" : "RoundScrollbarRenderer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisibilityChangeForAutofillHandler",
    "type" : "Handler",
    "comment" : " Used to delay visibility updates sent to the autofill manager ",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureSession",
    "type" : "ContentCaptureSession",
    "comment" : "\n     * Used when app developers explicitly set the {@link ContentCaptureSession} associated with the\n     * view (through {@link #setContentCaptureSession(ContentCaptureSession)}.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession", "#setContentCaptureSession(ContentCaptureSession)" ]
  }, {
    "name" : "mContentCaptureSessionCached",
    "type" : "boolean",
    "comment" : "\n     * Whether {@link ContentCaptureSession} is cached, resets on {@link #invalidate()}.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession", "#invalidate()" ]
  }, {
    "name" : "mSourceLayoutId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributeSourceResId",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributeResolutionStacks",
    "type" : "SparseArray<int[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExplicitStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnbufferedInputSource",
    "type" : "int",
    "comment" : "\n     * Specifies which input source classes should provide unbuffered input events to this view\n     *\n     * @see View#requestUnbufferedDispatch(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_BACKGROUND",
    "type" : "int",
    "comment" : " correspond to the enum values of View_outlineProvider",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_BOUNDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_PADDED_BOUNDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALPHA",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>alpha</code> functionality handled by the\n     * {@link View#setAlpha(float)} and {@link View#getAlpha()} methods.\n     ",
    "links" : [ "android.view.View#getAlpha()", "android.view.View#setAlpha(float)" ]
  }, {
    "name" : "TRANSLATION_X",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>translationX</code> functionality handled by the\n     * {@link View#setTranslationX(float)} and {@link View#getTranslationX()} methods.\n     ",
    "links" : [ "android.view.View#getTranslationX()", "android.view.View#setTranslationX(float)" ]
  }, {
    "name" : "TRANSLATION_Y",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>translationY</code> functionality handled by the\n     * {@link View#setTranslationY(float)} and {@link View#getTranslationY()} methods.\n     ",
    "links" : [ "android.view.View#getTranslationY()", "android.view.View#setTranslationY(float)" ]
  }, {
    "name" : "TRANSLATION_Z",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>translationZ</code> functionality handled by the\n     * {@link View#setTranslationZ(float)} and {@link View#getTranslationZ()} methods.\n     ",
    "links" : [ "android.view.View#setTranslationZ(float)", "android.view.View#getTranslationZ()" ]
  }, {
    "name" : "X",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>x</code> functionality handled by the\n     * {@link View#setX(float)} and {@link View#getX()} methods.\n     ",
    "links" : [ "android.view.View#getX()", "android.view.View#setX(float)" ]
  }, {
    "name" : "Y",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>y</code> functionality handled by the\n     * {@link View#setY(float)} and {@link View#getY()} methods.\n     ",
    "links" : [ "android.view.View#getY()", "android.view.View#setY(float)" ]
  }, {
    "name" : "Z",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>z</code> functionality handled by the\n     * {@link View#setZ(float)} and {@link View#getZ()} methods.\n     ",
    "links" : [ "android.view.View#getZ()", "android.view.View#setZ(float)" ]
  }, {
    "name" : "ROTATION",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>rotation</code> functionality handled by the\n     * {@link View#setRotation(float)} and {@link View#getRotation()} methods.\n     ",
    "links" : [ "android.view.View#setRotation(float)", "android.view.View#getRotation()" ]
  }, {
    "name" : "ROTATION_X",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>rotationX</code> functionality handled by the\n     * {@link View#setRotationX(float)} and {@link View#getRotationX()} methods.\n     ",
    "links" : [ "android.view.View#getRotationX()", "android.view.View#setRotationX(float)" ]
  }, {
    "name" : "ROTATION_Y",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>rotationY</code> functionality handled by the\n     * {@link View#setRotationY(float)} and {@link View#getRotationY()} methods.\n     ",
    "links" : [ "android.view.View#setRotationY(float)", "android.view.View#getRotationY()" ]
  }, {
    "name" : "SCALE_X",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>scaleX</code> functionality handled by the\n     * {@link View#setScaleX(float)} and {@link View#getScaleX()} methods.\n     ",
    "links" : [ "android.view.View#setScaleX(float)", "android.view.View#getScaleX()" ]
  }, {
    "name" : "SCALE_Y",
    "type" : "Property<View, Float>",
    "comment" : "\n     * A Property wrapper around the <code>scaleY</code> functionality handled by the\n     * {@link View#setScaleY(float)} and {@link View#getScaleY()} methods.\n     ",
    "links" : [ "android.view.View#setScaleY(float)", "android.view.View#getScaleY()" ]
  } ],
  "methods" : [ {
    "name" : "public int[] getAttributeResolutionStack(@AttrRes int attribute)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the ordered list of resource ID that are considered when resolving attribute values\n     * for this {@link View}. The list will include layout resource ID if the View is inflated from\n     * XML. It will also include a set of explicit styles if specified in XML using\n     * {@code style=\"...\"}. Finally, it will include the default styles resolved from the theme.\n     *\n     * <p>\n     * <b>Note:</b> this method will only return actual values if the view attribute debugging\n     * is enabled in Android developer options.\n     *\n     * @param attribute Attribute resource ID for which the resolution stack should be returned.\n     * @return ordered list of resource ID that are considered when resolving attribute values for\n     * this {@link View}.\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public Map<Integer, Integer> getAttributeSourceResourceMap()",
    "returnType" : "Map<Integer, Integer>",
    "comment" : "\n     * Returns the mapping of attribute resource ID to source resource ID where the attribute value\n     * was set. Source resource ID can either be a layout resource ID, if the value was set in XML\n     * within the View tag, or a style resource ID, if the attribute was set in a style. The source\n     * resource value will be one of the resource IDs from {@link #getAttributeSourceResourceMap()}.\n     *\n     * <p>\n     * <b>Note:</b> this method will only return actual values if the view attribute debugging\n     * is enabled in Android developer options.\n     *\n     * @return mapping of attribute resource ID to source resource ID where the attribute value\n     * was set.\n     ",
    "links" : [ "#getAttributeSourceResourceMap()" ]
  }, {
    "name" : "public int getExplicitStyle()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource ID for the style specified using {@code style=\"...\"} in the\n     * {@link AttributeSet}'s backing XML element or {@link Resources#ID_NULL} otherwise if not\n     * specified or otherwise not applicable.\n     * <p>\n     * Each {@link View} can have an explicit style specified in the layout file.\n     * This style is used first during the {@link View} attribute resolution, then if an attribute\n     * is not defined there the resource system looks at default style and theme as fallbacks.\n     *\n     * <p>\n     * <b>Note:</b> this method will only return actual values if the view attribute debugging\n     * is enabled in Android developer options.\n     *\n     * @return The resource ID for the style specified using {@code style=\"...\"} in the\n     *      {@link AttributeSet}'s backing XML element or {@link Resources#ID_NULL} otherwise\n     *      if not specified or otherwise not applicable.\n     ",
    "links" : [ "android.util.AttributeSet", "android.view.View", "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : "public final boolean isShowingLayoutBounds()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} when the View is attached and the system developer setting to show\n     * the layout bounds is enabled or {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setShowingLayoutBounds(boolean debugLayout)",
    "returnType" : "void",
    "comment" : "\n     * Used to test isShowingLayoutBounds(). This sets the local value used\n     * by that function. This method does nothing if the layout isn't attached.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SparseArray<String> getAttributeMap()",
    "returnType" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void retrieveExplicitStyle(@NonNull Resources.Theme theme, @Nullable AttributeSet attrs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void saveAttributeDataForStyleable(@NonNull Context context, @NonNull int[] styleable, @Nullable AttributeSet attrs, @NonNull TypedArray t, int defStyleAttr, int defStyleRes)",
    "returnType" : "void",
    "comment" : "\n     * Stores debugging information about attributes. This should be called in a constructor by\n     * every custom {@link View} that uses a custom styleable. If the custom view does not call it,\n     * then the custom attributes used by this view will not be visible in layout inspection tools.\n     *\n     *  @param context Context under which this view is created.\n     * @param styleable A reference to styleable array R.styleable.Foo\n     * @param attrs AttributeSet used to construct this view.\n     * @param t Resolved {@link TypedArray} returned by a call to\n     *        {@link Resources#obtainAttributes(AttributeSet, int[])}.\n     * @param defStyleAttr Default style attribute passed into the view constructor.\n     * @param defStyleRes Default style resource passed into the view constructor.\n     ",
    "links" : [ "android.view.View", "android.content.res.Resources#obtainAttributes(AttributeSet", "android.content.res.TypedArray" ]
  }, {
    "name" : "private void saveAttributeData(@Nullable AttributeSet attrs, @NonNull TypedArray t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void initializeFadingEdge(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Initializes the fading edges from a given set of styled attributes. This\n     * method should be called by subclasses that need fading edges and when an\n     * instance of these subclasses is created programmatically rather than\n     * being inflated from XML. This method is automatically called when the XML\n     * is inflated.\n     * </p>\n     *\n     * @param a the styled attributes set to initialize the fading edges from\n     *\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initializeFadingEdgeInternal(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Initializes the fading edges from a given set of styled attributes. This\n     * method should be called by subclasses that need fading edges and when an\n     * instance of these subclasses is created programmatically rather than\n     * being inflated from XML. This method is automatically called when the XML\n     * is inflated.\n     * </p>\n     *\n     * @param a the styled attributes set to initialize the fading edges from\n     * @hide This is the real method; the public one is shimmed to be safe to call from apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVerticalFadingEdgeLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the vertical faded edges used to indicate that more\n     * content in this view is visible.\n     *\n     * @return The size in pixels of the vertical faded edge or 0 if vertical\n     *         faded edges are not enabled for this view.\n     * @attr ref android.R.styleable#View_fadingEdgeLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFadingEdgeLength(int length)",
    "returnType" : "void",
    "comment" : "\n     * Set the size of the faded edge used to indicate that more content in this\n     * view is available.  Will not change whether the fading edge is enabled; use\n     * {@link #setVerticalFadingEdgeEnabled(boolean)} or\n     * {@link #setHorizontalFadingEdgeEnabled(boolean)} to enable the fading edge\n     * for the vertical or horizontal fading edges.\n     *\n     * @param length The size in pixels of the faded edge used to indicate that more\n     *        content in this view is visible.\n     ",
    "links" : [ "#setVerticalFadingEdgeEnabled(boolean)", "#setHorizontalFadingEdgeEnabled(boolean)" ]
  }, {
    "name" : "public int getHorizontalFadingEdgeLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the horizontal faded edges used to indicate that more\n     * content in this view is visible.\n     *\n     * @return The size in pixels of the horizontal faded edge or 0 if horizontal\n     *         faded edges are not enabled for this view.\n     * @attr ref android.R.styleable#View_fadingEdgeLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVerticalScrollbarWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the width of the vertical scrollbar.\n     *\n     * @return The width in pixels of the vertical scrollbar or 0 if there\n     *         is no vertical scrollbar.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getHorizontalScrollbarHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the height of the horizontal scrollbar.\n     *\n     * @return The height in pixels of the horizontal scrollbar or 0 if\n     *         there is no horizontal scrollbar.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initializeScrollbars(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Initializes the scrollbars from a given set of styled attributes. This\n     * method should be called by subclasses that need scrollbars and when an\n     * instance of these subclasses is created programmatically rather than\n     * being inflated from XML. This method is automatically called when the XML\n     * is inflated.\n     * </p>\n     *\n     * @param a the styled attributes set to initialize the scrollbars from\n     *\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeScrollBarDrawable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void initializeScrollbarsInternal(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Initializes the scrollbars from a given set of styled attributes. This\n     * method should be called by subclasses that need scrollbars and when an\n     * instance of these subclasses is created programmatically rather than\n     * being inflated from XML. This method is automatically called when the XML\n     * is inflated.\n     * </p>\n     *\n     * @param a the styled attributes set to initialize the scrollbars from\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalScrollbarThumbDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Defines the vertical scrollbar thumb drawable\n     * @attr ref android.R.styleable#View_scrollbarThumbVertical\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalScrollbarTrackDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Defines the vertical scrollbar track drawable\n     * @attr ref android.R.styleable#View_scrollbarTrackVertical\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalScrollbarThumbDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Defines the horizontal thumb drawable\n     * @attr ref android.R.styleable#View_scrollbarThumbHorizontal\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalScrollbarTrackDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Defines the horizontal track drawable\n     * @attr ref android.R.styleable#View_scrollbarTrackHorizontal\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getVerticalScrollbarThumbDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the currently configured Drawable for the thumb of the vertical scroll bar if it\n     * exists, null otherwise.\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getVerticalScrollbarTrackDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the currently configured Drawable for the track of the vertical scroll bar if it\n     * exists, null otherwise.\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getHorizontalScrollbarThumbDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the currently configured Drawable for the thumb of the horizontal scroll bar if it\n     * exists, null otherwise.\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getHorizontalScrollbarTrackDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the currently configured Drawable for the track of the horizontal scroll bar if it\n     * exists, null otherwise.\n     *\n     * @see #awakenScrollBars(int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeScrollIndicatorsInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initScrollCache()",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Initalizes the scrollability cache if necessary.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "private ScrollabilityCache getScrollCache()",
    "returnType" : "ScrollabilityCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalScrollbarPosition(int position)",
    "returnType" : "void",
    "comment" : "\n     * Set the position of the vertical scroll bar. Should be one of\n     * {@link #SCROLLBAR_POSITION_DEFAULT}, {@link #SCROLLBAR_POSITION_LEFT} or\n     * {@link #SCROLLBAR_POSITION_RIGHT}.\n     *\n     * @param position Where the vertical scroll bar should be positioned.\n     ",
    "links" : [ "#SCROLLBAR_POSITION_RIGHT", "#SCROLLBAR_POSITION_LEFT", "#SCROLLBAR_POSITION_DEFAULT" ]
  }, {
    "name" : "public int getVerticalScrollbarPosition()",
    "returnType" : "int",
    "comment" : "\n     * @return The position where the vertical scroll bar will show, if applicable.\n     * @see #setVerticalScrollbarPosition(int)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isOnScrollbar(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isOnScrollbarThumb(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isOnVerticalScrollbarThumb(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isOnHorizontalScrollbarThumb(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isDraggingScrollBar()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScrollIndicators(@ScrollIndicators int indicators)",
    "returnType" : "void",
    "comment" : "\n     * Sets the state of all scroll indicators.\n     * <p>\n     * See {@link #setScrollIndicators(int, int)} for usage information.\n     *\n     * @param indicators a bitmask of indicators that should be enabled, or\n     *                   {@code 0} to disable all indicators\n     * @see #setScrollIndicators(int, int)\n     * @see #getScrollIndicators()\n     * @attr ref android.R.styleable#View_scrollIndicators\n     ",
    "links" : [ "#setScrollIndicators(int" ]
  }, {
    "name" : "public void setScrollIndicators(@ScrollIndicators int indicators, @ScrollIndicators int mask)",
    "returnType" : "void",
    "comment" : "\n     * Sets the state of the scroll indicators specified by the mask. To change\n     * all scroll indicators at once, see {@link #setScrollIndicators(int)}.\n     * <p>\n     * When a scroll indicator is enabled, it will be displayed if the view\n     * can scroll in the direction of the indicator.\n     * <p>\n     * Multiple indicator types may be enabled or disabled by passing the\n     * logical OR of the desired types. If multiple types are specified, they\n     * will all be set to the same enabled state.\n     * <p>\n     * For example, to enable the top scroll indicatorExample: {@code setScrollIndicators\n     *\n     * @param indicators the indicator direction, or the logical OR of multiple\n     *             indicator directions. One or more of:\n     *             <ul>\n     *               <li>{@link #SCROLL_INDICATOR_TOP}</li>\n     *               <li>{@link #SCROLL_INDICATOR_BOTTOM}</li>\n     *               <li>{@link #SCROLL_INDICATOR_LEFT}</li>\n     *               <li>{@link #SCROLL_INDICATOR_RIGHT}</li>\n     *               <li>{@link #SCROLL_INDICATOR_START}</li>\n     *               <li>{@link #SCROLL_INDICATOR_END}</li>\n     *             </ul>\n     * @see #setScrollIndicators(int)\n     * @see #getScrollIndicators()\n     * @attr ref android.R.styleable#View_scrollIndicators\n     ",
    "links" : [ "#SCROLL_INDICATOR_END", "#SCROLL_INDICATOR_BOTTOM", "#setScrollIndicators(int)", "#SCROLL_INDICATOR_LEFT", "#SCROLL_INDICATOR_START", "#SCROLL_INDICATOR_TOP", "#SCROLL_INDICATOR_RIGHT" ]
  }, {
    "name" : "public int getScrollIndicators()",
    "returnType" : "int",
    "comment" : "\n     * Returns a bitmask representing the enabled scroll indicators.\n     * <p>\n     * For example, if the top and left scroll indicators are enabled and all\n     * other indicators are disabled, the return value will be\n     * {@code View.SCROLL_INDICATOR_TOP | View.SCROLL_INDICATOR_LEFT}.\n     * <p>\n     * To check whether the bottom scroll indicator is enabled, use the value\n     * of {@code (getScrollIndicators() & View.SCROLL_INDICATOR_BOTTOM) != 0}.\n     *\n     * @return a bitmask representing the enabled scroll indicators\n     ",
    "links" : [ ]
  }, {
    "name" : " ListenerInfo getListenerInfo()",
    "returnType" : "ListenerInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnScrollChangeListener(OnScrollChangeListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the scroll X or Y positions of\n     * this view change.\n     * <p>\n     * <b>Note:</b> Some views handle scrolling independently from View and may\n     * have their own separate listeners for scroll-type events. For example,\n     * {@link android.widget.ListView ListView} allows clients to register an\n     * {@link android.widget.ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener) AbsListView.OnScrollListener}\n     * to listen for changes in list scroll position.\n     *\n     * @param l The listener to notify when the scroll X or Y position changes.\n     * @see android.view.View#getScrollX()\n     * @see android.view.View#getScrollY()\n     ",
    "links" : [ "android.widget.ListView", "android.widget.ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener)" ]
  }, {
    "name" : "public void setOnFocusChangeListener(OnFocusChangeListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when focus of this view changed.\n     *\n     * @param l The callback that will run.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnLayoutChangeListener(OnLayoutChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener that will be called when the bounds of the view change due to\n     * layout processing.\n     *\n     * @param listener The listener that will be called when layout bounds change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnLayoutChangeListener(OnLayoutChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener for layout changes.\n     *\n     * @param listener The listener for layout bounds change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnAttachStateChangeListener(OnAttachStateChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener for attach state changes.\n     *\n     * This listener will be called whenever this view is attached or detached\n     * from a window. Remove the listener using\n     * {@link #removeOnAttachStateChangeListener(OnAttachStateChangeListener)}.\n     *\n     * @param listener Listener to attach\n     * @see #removeOnAttachStateChangeListener(OnAttachStateChangeListener)\n     ",
    "links" : [ "#removeOnAttachStateChangeListener(OnAttachStateChangeListener)" ]
  }, {
    "name" : "public void removeOnAttachStateChangeListener(OnAttachStateChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener for attach state changes. The listener will receive no further\n     * notification of window attach/detach events.\n     *\n     * @param listener Listener to remove\n     * @see #addOnAttachStateChangeListener(OnAttachStateChangeListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnFocusChangeListener getOnFocusChangeListener()",
    "returnType" : "OnFocusChangeListener",
    "comment" : "\n     * Returns the focus-change callback registered for this view.\n     *\n     * @return The callback, or null if one is not registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnClickListener(@Nullable OnClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when this view is clicked. If this view is not\n     * clickable, it becomes clickable.\n     *\n     * @param l The callback that will run\n     *\n     * @see #setClickable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOnClickListeners()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this view has an attached OnClickListener.  Returns\n     * true if there is a listener, false if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnLongClickListener(@Nullable OnLongClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when this view is clicked and held. If this view is not\n     * long clickable, it becomes long clickable.\n     *\n     * @param l The callback that will run\n     *\n     * @see #setLongClickable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOnLongClickListeners()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this view has an attached OnLongClickListener.  Returns\n     * true if there is a listener, false if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnLongClickListener getOnLongClickListener()",
    "returnType" : "OnLongClickListener",
    "comment" : "\n     * @return the registered {@link OnLongClickListener} if there is one, {@code null} otherwise.\n     * @hide\n     ",
    "links" : [ "OnLongClickListener" ]
  }, {
    "name" : "public void setOnContextClickListener(@Nullable OnContextClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when this view is context clicked. If the view is not\n     * context clickable, it becomes context clickable.\n     *\n     * @param l The callback that will run\n     * @see #setContextClickable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCreateContextMenuListener(OnCreateContextMenuListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the context menu for this view is\n     * being built. If this view is not long clickable, it becomes long clickable.\n     *\n     * @param l The callback that will run\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFrameMetricsListener(Window window, Window.OnFrameMetricsAvailableListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set an observer to collect stats for each frame rendered for this view.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeFrameMetricsListener(Window.OnFrameMetricsAvailableListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove observer configured to collect frame stats for this view.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerPendingFrameMetricsObservers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FrameMetricsObserver findFrameMetricsObserver(Window.OnFrameMetricsAvailableListener listener)",
    "returnType" : "FrameMetricsObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNotifyAutofillManagerOnClick(boolean notify)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void notifyAutofillManagerOnClick()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean performClickInternal()",
    "returnType" : "boolean",
    "comment" : "\n     * Entry point for {@link #performClick()} - other methods on View should call it instead of\n     * {@code performClick()} directly to make sure the autofill manager is notified when\n     * necessary (as subclasses could extend {@code performClick()} without calling the parent's\n     * method).\n     ",
    "links" : [ "#performClick()" ]
  }, {
    "name" : "public boolean performClick()",
    "returnType" : "boolean",
    "comment" : " could extend this method without calling super.performClick()).",
    "links" : [ ]
  }, {
    "name" : "public boolean callOnClick()",
    "returnType" : "boolean",
    "comment" : "\n     * Directly call any attached OnClickListener.  Unlike {@link #performClick()},\n     * this only calls the listener, and does not do any associated clicking\n     * actions like reporting an accessibility event.\n     *\n     * @return True there was an assigned OnClickListener that was called, false\n     *         otherwise is returned.\n     ",
    "links" : [ "#performClick()" ]
  }, {
    "name" : "public boolean performLongClick()",
    "returnType" : "boolean",
    "comment" : "\n     * Calls this view's OnLongClickListener, if it is defined. Invokes the\n     * context menu if the OnLongClickListener did not consume the event.\n     *\n     * @return {@code true} if one of the above receivers consumed the event,\n     *         {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performLongClick(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * Calls this view's OnLongClickListener, if it is defined. Invokes the\n     * context menu if the OnLongClickListener did not consume the event,\n     * anchoring it to an (x,y) coordinate.\n     *\n     * @param x x coordinate of the anchoring touch event, or {@link Float#NaN}\n     *          to disable anchoring\n     * @param y y coordinate of the anchoring touch event, or {@link Float#NaN}\n     *          to disable anchoring\n     * @return {@code true} if one of the above receivers consumed the event,\n     *         {@code false} otherwise\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "private boolean performLongClickInternal(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * Calls this view's OnLongClickListener, if it is defined. Invokes the\n     * context menu if the OnLongClickListener did not consume the event,\n     * optionally anchoring it to an (x,y) coordinate.\n     *\n     * @param x x coordinate of the anchoring touch event, or {@link Float#NaN}\n     *          to disable anchoring\n     * @param y y coordinate of the anchoring touch event, or {@link Float#NaN}\n     *          to disable anchoring\n     * @return {@code true} if one of the above receivers consumed the event,\n     *         {@code false} otherwise\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public boolean performContextClick(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * Call this view's OnContextClickListener, if it is defined.\n     *\n     * @param x the x coordinate of the context click\n     * @param y the y coordinate of the context click\n     * @return True if there was an assigned OnContextClickListener that consumed the event, false\n     *         otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performContextClick()",
    "returnType" : "boolean",
    "comment" : "\n     * Call this view's OnContextClickListener, if it is defined.\n     *\n     * @return True if there was an assigned OnContextClickListener that consumed the event, false\n     *         otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean performButtonActionOnTouchDown(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs button-related actions during a touch down event.\n     *\n     * @param event The event.\n     * @return True if the down was consumed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean showContextMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Shows the context menu for this view.\n     *\n     * @return {@code true} if the context menu was shown, {@code false}\n     *         otherwise\n     * @see #showContextMenu(float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean showContextMenu(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * Shows the context menu for this view anchored to the specified\n     * view-relative coordinate.\n     *\n     * @param x the X coordinate in pixels relative to the view to which the\n     *          menu should be anchored, or {@link Float#NaN} to disable anchoring\n     * @param y the Y coordinate in pixels relative to the view to which the\n     *          menu should be anchored, or {@link Float#NaN} to disable anchoring\n     * @return {@code true} if the context menu was shown, {@code false}\n     *         otherwise\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public ActionMode startActionMode(ActionMode.Callback callback)",
    "returnType" : "ActionMode",
    "comment" : "\n     * Start an action mode with the default type {@link ActionMode#TYPE_PRIMARY}.\n     *\n     * @param callback Callback that will control the lifecycle of the action mode\n     * @return The new action mode if it is started, null otherwise\n     *\n     * @see ActionMode\n     * @see #startActionMode(android.view.ActionMode.Callback, int)\n     ",
    "links" : [ "android.view.ActionMode#TYPE_PRIMARY" ]
  }, {
    "name" : "public ActionMode startActionMode(ActionMode.Callback callback, int type)",
    "returnType" : "ActionMode",
    "comment" : "\n     * Start an action mode with the given type.\n     *\n     * @param callback Callback that will control the lifecycle of the action mode\n     * @param type One of {@link ActionMode#TYPE_PRIMARY} or {@link ActionMode#TYPE_FLOATING}.\n     * @return The new action mode if it is started, null otherwise\n     *\n     * @see ActionMode\n     ",
    "links" : [ "android.view.ActionMode#TYPE_FLOATING", "android.view.ActionMode#TYPE_PRIMARY" ]
  }, {
    "name" : "public void startActivityForResult(Intent intent, int requestCode)",
    "returnType" : "void",
    "comment" : "\n     * Call {@link Context#startActivityForResult(String, Intent, int, Bundle)} for the View's\n     * Context, creating a unique View identifier to retrieve the result.\n     *\n     * @param intent The Intent to be started.\n     * @param requestCode The request code to use.\n     * @hide\n     ",
    "links" : [ "android.content.Context#startActivityForResult(String" ]
  }, {
    "name" : "public boolean dispatchActivityResult(String who, int requestCode, int resultCode, Intent data)",
    "returnType" : "boolean",
    "comment" : "\n     * If this View corresponds to the calling who, dispatches the activity result.\n     * @param who The identifier for the targeted View to receive the result.\n     * @param requestCode The integer request code originally supplied to\n     *                    startActivityForResult(), allowing you to identify who this\n     *                    result came from.\n     * @param resultCode The integer result code returned by the child activity\n     *                   through its setResult().\n     * @param data An Intent, which can return result data to the caller\n     *               (various data can be attached to Intent \"extras\").\n     * @return {@code true} if the activity result was dispatched.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActivityResult(int requestCode, int resultCode, Intent data)",
    "returnType" : "void",
    "comment" : "\n     * Receive the result from a previous call to {@link #startActivityForResult(Intent, int)}.\n     *\n     * @param requestCode The integer request code originally supplied to\n     *                    startActivityForResult(), allowing you to identify who this\n     *                    result came from.\n     * @param resultCode The integer result code returned by the child activity\n     *                   through its setResult().\n     * @param data An Intent, which can return result data to the caller\n     *               (various data can be attached to Intent \"extras\").\n     * @hide\n     ",
    "links" : [ "#startActivityForResult(Intent" ]
  }, {
    "name" : "public void setOnKeyListener(OnKeyListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a hardware key is pressed in this view.\n     * Key presses in software input methods will generally not trigger the methods of\n     * this listener.\n     * @param l the key listener to attach to this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnTouchListener(OnTouchListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a touch event is sent to this view.\n     * @param l the touch listener to attach to this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnGenericMotionListener(OnGenericMotionListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a generic motion event is sent to this view.\n     * @param l the generic motion listener to attach to this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnHoverListener(OnHoverListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a hover event is sent to this view.\n     * @param l the hover listener to attach to this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDragListener(OnDragListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a drag event listener callback object for this View. The parameter is\n     * an implementation of {@link android.view.View.OnDragListener}. To send a drag event to a\n     * View, the system calls the\n     * {@link android.view.View.OnDragListener#onDrag(View,DragEvent)} method.\n     * @param l An implementation of {@link android.view.View.OnDragListener}.\n     ",
    "links" : [ "android.view.View.OnDragListener", "android.view.View.OnDragListener#onDrag(View" ]
  }, {
    "name" : " void handleFocusGainInternal(@FocusRealDirection int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "\n     * Give this view focus. This will cause\n     * {@link #onFocusChanged(boolean, int, android.graphics.Rect)} to be called.\n     *\n     * Note: this does not check whether this {@link View} should get focus, it just\n     * gives it focus no matter what.  It should only be called internally by framework\n     * code that knows what it is doing, namely {@link #requestFocus(int, Rect)}.\n     *\n     * @param direction values are {@link View#FOCUS_UP}, {@link View#FOCUS_DOWN},\n     *        {@link View#FOCUS_LEFT} or {@link View#FOCUS_RIGHT}. This is the direction which\n     *        focus moved when requestFocus() is called. It may not always\n     *        apply, in which case use the default View.FOCUS_DOWN.\n     * @param previouslyFocusedRect The rectangle of the view that had focus\n     *        prior in this View's coordinate system.\n     ",
    "links" : [ "#requestFocus(int", "android.view.View#FOCUS_DOWN", "#onFocusChanged(boolean", "android.view.View", "android.view.View#FOCUS_LEFT", "android.view.View#FOCUS_RIGHT", "android.view.View#FOCUS_UP" ]
  }, {
    "name" : "public final void setRevealOnFocusHint(boolean revealOnFocus)",
    "returnType" : "void",
    "comment" : "\n     * Sets this view's preference for reveal behavior when it gains focus.\n     *\n     * <p>When set to true, this is a signal to ancestor views in the hierarchy that\n     * this view would prefer to be brought fully into view when it gains focus.\n     * For example, a text field that a user is meant to type into. Other views such\n     * as scrolling containers may prefer to opt-out of this behavior.</p>\n     *\n     * <p>The default value for views is true, though subclasses may change this\n     * based on their preferred behavior.</p>\n     *\n     * @param revealOnFocus true to request reveal on focus in ancestors, false otherwise\n     *\n     * @see #getRevealOnFocusHint()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getRevealOnFocusHint()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns this view's preference for reveal behavior when it gains focus.\n     *\n     * <p>When this method returns true for a child view requesting focus, ancestor\n     * views responding to a focus change in {@link ViewParent#requestChildFocus(View, View)}\n     * should make a best effort to make the newly focused child fully visible to the user.\n     * When it returns false, ancestor views should preferably not disrupt scroll positioning or\n     * other properties affecting visibility to the user as part of the focus change.</p>\n     *\n     * @return true if this view would prefer to become fully visible when it gains focus,\n     *         false if it would prefer not to disrupt scroll positioning\n     *\n     * @see #setRevealOnFocusHint(boolean)\n     ",
    "links" : [ "android.view.ViewParent#requestChildFocus(View" ]
  }, {
    "name" : "public void getHotspotBounds(Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Populates <code>outRect</code> with the hotspot bounds. By default,\n     * the hotspot bounds are identical to the screen bounds.\n     *\n     * @param outRect rect to populate with hotspot bounds\n     * @hide Only for internal use by views and widgets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestRectangleOnScreen(Rect rectangle)",
    "returnType" : "boolean",
    "comment" : "\n     * Request that a rectangle of this view be visible on the screen,\n     * scrolling if necessary just enough.\n     *\n     * <p>A View should call this if it maintains some notion of which part\n     * of its content is interesting.  For example, a text editing view\n     * should call this when its cursor moves.\n     * <p>The Rectangle passed into this method should be in the View's content coordinate space.\n     * It should not be affected by which part of the View is currently visible or its scroll\n     * position.\n     *\n     * @param rectangle The rectangle in the View's content coordinate space\n     * @return Whether any parent scrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestRectangleOnScreen(Rect rectangle, boolean immediate)",
    "returnType" : "boolean",
    "comment" : "\n     * Request that a rectangle of this view be visible on the screen,\n     * scrolling if necessary just enough.\n     *\n     * <p>A View should call this if it maintains some notion of which part\n     * of its content is interesting.  For example, a text editing view\n     * should call this when its cursor moves.\n     * <p>The Rectangle passed into this method should be in the View's content coordinate space.\n     * It should not be affected by which part of the View is currently visible or its scroll\n     * position.\n     * <p>When <code>immediate</code> is set to true, scrolling will not be\n     * animated.\n     *\n     * @param rectangle The rectangle in the View's content coordinate space\n     * @param immediate True to forbid animated scrolling, false otherwise\n     * @return Whether any parent scrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearFocus()",
    "returnType" : "void",
    "comment" : "\n     * Called when this view wants to give up focus. If focus is cleared\n     * {@link #onFocusChanged(boolean, int, android.graphics.Rect)} is called.\n     * <p>\n     * <strong>Note:</strong> When not in touch-mode, the framework will try to give focus\n     * to the first focusable View from the top after focus is cleared. Hence, if this\n     * View is the first from the top that can take focus, then all callbacks\n     * related to clearing focus will be invoked after which the framework will\n     * give focus to this view.\n     * </p>\n     ",
    "links" : [ "#onFocusChanged(boolean" ]
  }, {
    "name" : " void clearFocusInternal(View focused, boolean propagate, boolean refocus)",
    "returnType" : "void",
    "comment" : "\n     * Clears focus from the view, optionally propagating the change up through\n     * the parent hierarchy and requesting that the root view place new focus.\n     *\n     * @param propagate whether to propagate the change up through the parent\n     *            hierarchy\n     * @param refocus when propagate is true, specifies whether to request the\n     *            root view place new focus\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyGlobalFocusCleared(View oldFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean rootViewRequestFocus()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unFocus(View focused)",
    "returnType" : "void",
    "comment" : "\n     * Called internally by the view system when a new view is getting focus.\n     * This is what clears the old focus.\n     * <p>\n     * <b>NOTE:</b> The parent view's focused child must be updated manually\n     * after calling this method. Otherwise, the view hierarchy may be left in\n     * an inconstent state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view has focus itself, or is the ancestor of the\n     * view that has focus.\n     *\n     * @return True if this view has or contains focus, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view is focusable or if it contains a reachable View\n     * for which {@link #hasFocusable()} returns {@code true}. A \"reachable hasFocusable()\"\n     * is a view whose parents do not block descendants focus.\n     * Only {@link #VISIBLE} views are considered focusable.\n     *\n     * <p>As of {@link Build.VERSION_CODES#O} views that are determined to be focusable\n     * through {@link #FOCUSABLE_AUTO} will also cause this method to return {@code true}.\n     * Apps that declare a {@link android.content.pm.ApplicationInfo#targetSdkVersion} of\n     * earlier than {@link Build.VERSION_CODES#O} will continue to see this method return\n     * {@code false} for views not explicitly marked as focusable.\n     * Use {@link #hasExplicitFocusable()} if you require the pre-{@link Build.VERSION_CODES#O}\n     * behavior.</p>\n     *\n     * @return {@code true} if the view is focusable or if the view contains a focusable\n     *         view, {@code false} otherwise\n     *\n     * @see ViewGroup#FOCUS_BLOCK_DESCENDANTS\n     * @see ViewGroup#getTouchscreenBlocksFocus()\n     * @see #hasExplicitFocusable()\n     ",
    "links" : [ "Build.VERSION_CODES#O", "#hasExplicitFocusable()", "android.content.pm.ApplicationInfo#targetSdkVersion", "#VISIBLE", "#hasFocusable()", "#FOCUSABLE_AUTO" ]
  }, {
    "name" : "public boolean hasExplicitFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view is focusable or if it contains a reachable View\n     * for which {@link #hasExplicitFocusable()} returns {@code true}.\n     * A \"reachable hasExplicitFocusable()\" is a view whose parents do not block descendants focus.\n     * Only {@link #VISIBLE} views for which {@link #getFocusable()} would return\n     * {@link #FOCUSABLE} are considered focusable.\n     *\n     * <p>This method preserves the pre-{@link Build.VERSION_CODES#O} behavior of\n     * {@link #hasFocusable()} in that only views explicitly set focusable will cause\n     * this method to return true. A view set to {@link #FOCUSABLE_AUTO} that resolves\n     * to focusable will not.</p>\n     *\n     * @return {@code true} if the view is focusable or if the view contains a focusable\n     *         view, {@code false} otherwise\n     *\n     * @see #hasFocusable()\n     ",
    "links" : [ "#hasExplicitFocusable()", "Build.VERSION_CODES#O", "#FOCUSABLE", "#getFocusable()", "#VISIBLE", "#hasFocusable()", "#FOCUSABLE_AUTO" ]
  }, {
    "name" : " boolean hasFocusable(boolean allowAutoFocus, boolean dispatchExplicit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean gainFocus, @FocusDirection int direction, @Nullable Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "\n     * Called by the view system when the focus state of this view changes.\n     * When the focus change event is caused by directional navigation, direction\n     * and previouslyFocusedRect provide insight into where the focus is coming from.\n     * When overriding, be sure to call up through to the super class so that\n     * the standard focus handling will occur.\n     *\n     * @param gainFocus True if the View has focus; false otherwise.\n     * @param direction The direction focus has moved when requestFocus()\n     *                  is called to give this view focus. Values are\n     *                  {@link #FOCUS_UP}, {@link #FOCUS_DOWN}, {@link #FOCUS_LEFT},\n     *                  {@link #FOCUS_RIGHT}, {@link #FOCUS_FORWARD}, or {@link #FOCUS_BACKWARD}.\n     *                  It may not always apply, in which case use the default.\n     * @param previouslyFocusedRect The rectangle, in this view's coordinate\n     *        system, of the previously focused view.  If applicable, this will be\n     *        passed in as finer grained information about where the focus is coming\n     *        from (in addition to direction).  Will be <code>null</code> otherwise.\n     ",
    "links" : [ "#FOCUS_RIGHT", "#FOCUS_UP", "#FOCUS_DOWN", "#FOCUS_LEFT", "#FOCUS_BACKWARD", "#FOCUS_FORWARD" ]
  }, {
    "name" : "private void notifyFocusChangeToImeFocusController(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link ImeFocusController} about the focus change of the {@link View}.\n     *\n     * @param hasFocus {@code true} when the {@link View} is being focused.\n     ",
    "links" : [ "android.view.View", "android.view.ImeFocusController" ]
  }, {
    "name" : "public void notifyEnterOrExitForAutoFillIfNeeded(boolean enter)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityPaneTitle(@Nullable CharSequence accessibilityPaneTitle)",
    "returnType" : "void",
    "comment" : "\n     * Visually distinct portion of a window with window-like semantics are considered panes for\n     * accessibility purposes. One example is the content view of a fragment that is replaced.\n     * In order for accessibility services to understand a pane's window-like behavior, panes\n     * should have descriptive titles. Views with pane titles produce {@link AccessibilityEvent}s\n     * when they appear, disappear, or change title.\n     *\n     * @param accessibilityPaneTitle The pane's title. Setting to {@code null} indicates that this\n     *                               View is not a pane.\n     *\n     * {@see AccessibilityNodeInfo#setPaneTitle(CharSequence)}\n     *\n     * @attr ref android.R.styleable#View_accessibilityPaneTitle\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public CharSequence getAccessibilityPaneTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the title of the pane for purposes of accessibility.\n     *\n     * @return The current pane title.\n     *\n     * {@see #setAccessibilityPaneTitle}.\n     *\n     * @attr ref android.R.styleable#View_accessibilityPaneTitle\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isAccessibilityPane()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendAccessibilityEvent(int eventType)",
    "returnType" : "void",
    "comment" : "\n     * Sends an accessibility event of the given type. If accessibility is\n     * not enabled this method has no effect. The default implementation calls\n     * {@link #onInitializeAccessibilityEvent(AccessibilityEvent)} first\n     * to populate information about the event source (this View), then calls\n     * {@link #dispatchPopulateAccessibilityEvent(AccessibilityEvent)} to\n     * populate the text content of the event source including its descendants,\n     * and last calls\n     * {@link ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)}\n     * on its parent to request sending of the event to interested parties.\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#sendAccessibilityEvent(View, int)} is\n     * responsible for handling this call.\n     * </p>\n     *\n     * @param eventType The type of the event to send, as defined by several types from\n     * {@link android.view.accessibility.AccessibilityEvent}, such as\n     * {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} or\n     * {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER}.\n     *\n     * @see #onInitializeAccessibilityEvent(AccessibilityEvent)\n     * @see #dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n     * @see ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)\n     * @see AccessibilityDelegate\n     ",
    "links" : [ "#dispatchPopulateAccessibilityEvent(AccessibilityEvent)", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED", "#setAccessibilityDelegate(AccessibilityDelegate)", "AccessibilityDelegate", "android.view.ViewParent#requestSendAccessibilityEvent(View", "#onInitializeAccessibilityEvent(AccessibilityEvent)", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER", "#sendAccessibilityEvent(View", "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public void announceForAccessibility(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method for sending a {@link AccessibilityEvent#TYPE_ANNOUNCEMENT}\n     * {@link AccessibilityEvent} to suggest that an accessibility service announce the\n     * specified text to its users.\n     * <p>\n     * Note: The event generated with this API carries no semantic meaning, and is appropriate only\n     * in exceptional situations. Apps can generally achieve correct behavior for accessibility by\n     * accurately supplying the semantics of their UI.\n     * They should not need to specify what exactly is announced to users.\n     *\n     * @param text The announcement text.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT", "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public void sendAccessibilityEventInternal(int eventType)",
    "returnType" : "void",
    "comment" : "\n     * @see #sendAccessibilityEvent(int)\n     *\n     * Note: Called from the default {@link AccessibilityDelegate}.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "public void sendAccessibilityEventUnchecked(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * This method behaves exactly as {@link #sendAccessibilityEvent(int)} but\n     * takes as an argument an empty {@link AccessibilityEvent} and does not\n     * perform a check whether accessibility is enabled.\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#sendAccessibilityEventUnchecked(View, AccessibilityEvent)}\n     * is responsible for handling this call.\n     * </p>\n     *\n     * @param event The event to send.\n     *\n     * @see #sendAccessibilityEvent(int)\n     ",
    "links" : [ "#setAccessibilityDelegate(AccessibilityDelegate)", "AccessibilityDelegate", "android.view.accessibility.AccessibilityEvent", "#sendAccessibilityEventUnchecked(View", "#sendAccessibilityEvent(int)" ]
  }, {
    "name" : "public void sendAccessibilityEventUncheckedInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * @see #sendAccessibilityEventUnchecked(AccessibilityEvent)\n     *\n     * Note: Called from the default {@link AccessibilityDelegate}.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "private void requestParentSendAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SendAccessibilityEventThrottle getThrottleForAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "SendAccessibilityEventThrottle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearAccessibilityThrottles()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatches an {@link AccessibilityEvent} to the {@link View} first and then\n     * to its children for adding their text content to the event. Note that the\n     * event text is populated in a separate dispatch path since we add to the\n     * event not only the text of the source but also the text of all its descendants.\n     * A typical implementation will call\n     * {@link #onPopulateAccessibilityEvent(AccessibilityEvent)} on the this view\n     * and then call the {@link #dispatchPopulateAccessibilityEvent(AccessibilityEvent)}\n     * on each child. Override this method if custom population of the event text\n     * content is required.\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#dispatchPopulateAccessibilityEvent(View, AccessibilityEvent)}\n     * is responsible for handling this call.\n     * </p>\n     * <p>\n     * <em>Note:</em> Accessibility events of certain types are not dispatched for\n     * populating the event text via this method. For details refer to {@link AccessibilityEvent}.\n     * </p>\n     *\n     * @param event The event.\n     *\n     * @return True if the event population was completed.\n     ",
    "links" : [ "#dispatchPopulateAccessibilityEvent(AccessibilityEvent)", "#setAccessibilityDelegate(AccessibilityDelegate)", "AccessibilityDelegate", "#dispatchPopulateAccessibilityEvent(View", "android.view.View", "android.view.accessibility.AccessibilityEvent", "#onPopulateAccessibilityEvent(AccessibilityEvent)" ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * @see #dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n     *\n     * Note: Called from the default {@link AccessibilityDelegate}.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "public void onPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Called from {@link #dispatchPopulateAccessibilityEvent(AccessibilityEvent)}\n     * giving a chance to this View to populate the accessibility event with its\n     * text content. While this method is free to modify event\n     * attributes other than text content, doing so should normally be performed in\n     * {@link #onInitializeAccessibilityEvent(AccessibilityEvent)}.\n     * <p>\n     * Example: Adding formatted date string to an accessibility event in addition\n     *          to the text added by the super implementation:\n     * <pre> public void onPopulateAccessibilityEvent(AccessibilityEvent event) {\n     *     super.onPopulateAccessibilityEvent(event);\n     *     final int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_WEEKDAY;\n     *     String selectedDateUtterance = DateUtils.formatDateTime(mContext,\n     *         mCurrentDate.getTimeInMillis(), flags);\n     *     event.getText().add(selectedDateUtterance);\n     * }</pre>\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#onPopulateAccessibilityEvent(View, AccessibilityEvent)}\n     * is responsible for handling this call.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Always call the super implementation before adding\n     * information to the event, in case the default implementation has basic information to add.\n     * </p>\n     *\n     * @param event The accessibility event which to populate.\n     *\n     * @see #sendAccessibilityEvent(int)\n     * @see #dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n     ",
    "links" : [ "#dispatchPopulateAccessibilityEvent(AccessibilityEvent)", "#onPopulateAccessibilityEvent(View", "#setAccessibilityDelegate(AccessibilityDelegate)", "AccessibilityDelegate", "#onInitializeAccessibilityEvent(AccessibilityEvent)" ]
  }, {
    "name" : "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * @see #onPopulateAccessibilityEvent(AccessibilityEvent)\n     *\n     * Note: Called from the default {@link AccessibilityDelegate}.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "public void onInitializeAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Initializes an {@link AccessibilityEvent} with information about\n     * this View which is the event source. In other words, the source of\n     * an accessibility event is the view whose state change triggered firing\n     * the event.\n     * <p>\n     * Example: Setting the password property of an event in addition\n     *          to properties set by the super implementation:\n     * <pre> public void onInitializeAccessibilityEvent(AccessibilityEvent event) {\n     *     super.onInitializeAccessibilityEvent(event);\n     *     event.setPassword(true);\n     * }</pre>\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#onInitializeAccessibilityEvent(View, AccessibilityEvent)}\n     * is responsible for handling this call.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Always call the super implementation before adding\n     * information to the event, in case the default implementation has basic information to add.\n     * </p>\n     * @param event The event to initialize.\n     *\n     * @see #sendAccessibilityEvent(int)\n     * @see #dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n     ",
    "links" : [ "#setAccessibilityDelegate(AccessibilityDelegate)", "AccessibilityDelegate", "android.view.accessibility.AccessibilityEvent", "#onInitializeAccessibilityEvent(View" ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * @see #onInitializeAccessibilityEvent(AccessibilityEvent)\n     *\n     * Note: Called from the default {@link AccessibilityDelegate}.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "public AccessibilityNodeInfo createAccessibilityNodeInfo()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Returns an {@link AccessibilityNodeInfo} representing this view from the\n     * point of view of an {@link android.accessibilityservice.AccessibilityService}.\n     * This method is responsible for obtaining an accessibility node info from a\n     * pool of reusable instances and calling\n     * {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on this view to\n     * initialize the former.\n     * <p>\n     * Note: The client is responsible for recycling the obtained instance by calling\n     *       {@link AccessibilityNodeInfo#recycle()} to minimize object creation.\n     * </p>\n     *\n     * @return A populated {@link AccessibilityNodeInfo}.\n     *\n     * @see AccessibilityNodeInfo\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityService", "#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)", "android.view.accessibility.AccessibilityNodeInfo#recycle()" ]
  }, {
    "name" : "public AccessibilityNodeInfo createAccessibilityNodeInfoInternal()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * @see #createAccessibilityNodeInfo()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Initializes an {@link AccessibilityNodeInfo} with information about this view.\n     * The base implementation sets:\n     * <ul>\n     *   <li>{@link AccessibilityNodeInfo#setParent(View)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setBoundsInParent(Rect)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setBoundsInScreen(Rect)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setPackageName(CharSequence)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setClassName(CharSequence)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setContentDescription(CharSequence)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setEnabled(boolean)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setClickable(boolean)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setFocusable(boolean)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setFocused(boolean)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setLongClickable(boolean)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setSelected(boolean)},</li>\n     *   <li>{@link AccessibilityNodeInfo#setContextClickable(boolean)}</li>\n     * </ul>\n     * <p>\n     * Subclasses should override this method, call the super implementation,\n     * and set additional attributes.\n     * </p>\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)}\n     * is responsible for handling this call.\n     * </p>\n     *\n     * @param info The instance to initialize.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#setSelected(boolean)", "#setAccessibilityDelegate(AccessibilityDelegate)", "android.view.accessibility.AccessibilityNodeInfo#setParent(View)", "android.view.accessibility.AccessibilityNodeInfo#setContentDescription(CharSequence)", "android.view.accessibility.AccessibilityNodeInfo#setBoundsInScreen(Rect)", "android.view.accessibility.AccessibilityNodeInfo#setEnabled(boolean)", "android.view.accessibility.AccessibilityNodeInfo#setClassName(CharSequence)", "android.view.accessibility.AccessibilityNodeInfo#setFocused(boolean)", "android.view.accessibility.AccessibilityNodeInfo#setClickable(boolean)", "AccessibilityDelegate", "android.view.accessibility.AccessibilityNodeInfo#setFocusable(boolean)", "android.view.accessibility.AccessibilityNodeInfo#setContextClickable(boolean)", "android.view.accessibility.AccessibilityNodeInfo#setPackageName(CharSequence)", "android.view.accessibility.AccessibilityNodeInfo#setBoundsInParent(Rect)", "android.view.accessibility.AccessibilityNodeInfo#setLongClickable(boolean)", "#onInitializeAccessibilityNodeInfo(View" ]
  }, {
    "name" : "public void getBoundsOnScreen(Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Gets the location of this view in screen coordinates.\n     *\n     * @param outRect The output location\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getBoundsOnScreen(Rect outRect, boolean clipToParent)",
    "returnType" : "void",
    "comment" : "\n     * Gets the location of this view in screen coordinates.\n     *\n     * @param outRect The output location\n     * @param clipToParent Whether to clip child bounds to the parent ones.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mapRectFromViewToScreenCoords(RectF rect, boolean clipToParent)",
    "returnType" : "void",
    "comment" : "\n     * Map a rectangle from view-relative coordinates to screen-relative coordinates\n     *\n     * @param rect The rectangle to be mapped\n     * @param clipToParent Whether to clip child bounds to the parent ones.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the class name of this object to be used for accessibility purposes.\n     * Subclasses should only override this if they are implementing something that\n     * should be seen as a completely new class of view when used by accessibility,\n     * unrelated to the class it is deriving from.  This is used to fill in\n     * {@link AccessibilityNodeInfo#setClassName AccessibilityNodeInfo.setClassName}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#setClassName" ]
  }, {
    "name" : "public void onProvideStructure(ViewStructure structure)",
    "returnType" : "void",
    "comment" : "\n     * Called when assist structure is being retrieved from a view as part of\n     * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData}.\n     * @param structure Fill in with structured view data.  The default implementation\n     * fills in all data that can be inferred from the view itself.\n     ",
    "links" : [ "android.app.Activity#onProvideAssistData" ]
  }, {
    "name" : "public void onProvideAutofillStructure(ViewStructure structure, @AutofillFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Populates a {@link ViewStructure} to fullfil an autofill request.\n     *\n     * <p>The structure should contain at least the following properties:\n     * <ul>\n     *   <li>Autofill id ({@link ViewStructure#setAutofillId(AutofillId, int)}).\n     *   <li>Autofill type ({@link ViewStructure#setAutofillType(int)}).\n     *   <li>Autofill value ({@link ViewStructure#setAutofillValue(AutofillValue)}).\n     *   <li>Whether the data is sensitive ({@link ViewStructure#setDataIsSensitive(boolean)}).\n     * </ul>\n     *\n     * <p>It's also recommended to set the following properties - the more properties the structure\n     * has, the higher the chances of an {@link android.service.autofill.AutofillService} properly\n     * using the structure:\n     *\n     * <ul>\n     *   <li>Autofill hints ({@link ViewStructure#setAutofillHints(String[])}).\n     *   <li>Autofill options ({@link ViewStructure#setAutofillOptions(CharSequence[])}) when the\n     *       view can only be filled with predefined values (typically used when the autofill type\n     *       is {@link #AUTOFILL_TYPE_LIST}).\n     *   <li>Resource id ({@link ViewStructure#setId(int, String, String, String)}).\n     *   <li>Class name ({@link ViewStructure#setClassName(String)}).\n     *   <li>Content description ({@link ViewStructure#setContentDescription(CharSequence)}).\n     *   <li>Visual properties such as visibility ({@link ViewStructure#setVisibility(int)}),\n     *       dimensions ({@link ViewStructure#setDimens(int, int, int, int, int, int)}), and\n     *       opacity ({@link ViewStructure#setOpaque(boolean)}).\n     *   <li>For views representing text fields, text properties such as the text itself\n     *       ({@link ViewStructure#setText(CharSequence)}), text hints\n     *       ({@link ViewStructure#setHint(CharSequence)}, input type\n     *       ({@link ViewStructure#setInputType(int)}),\n     *   <li>For views representing HTML nodes, its web domain\n     *       ({@link ViewStructure#setWebDomain(String)}) and HTML properties\n     *       (({@link ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)}).\n     * </ul>\n     *\n     * <p>The default implementation of this method already sets most of these properties based on\n     * related {@link View} methods (for example, the autofill id is set using\n     * {@link #getAutofillId()}, the autofill type set using {@link #getAutofillType()}, etc.),\n     * and views in the standard Android widgets library also override it to set their\n     * relevant properties (for example, {@link android.widget.TextView} already sets the text\n     * properties), so it's recommended to only override this method\n     * (and call {@code super.onProvideAutofillStructure()}) when:\n     *\n     * <ul>\n     *   <li>The view contents does not include PII (Personally Identifiable Information), so it\n     *       can call {@link ViewStructure#setDataIsSensitive(boolean)} passing {@code false}.\n     *   <li>The view can only be autofilled with predefined options, so it can call\n     *       {@link ViewStructure#setAutofillOptions(CharSequence[])}.\n     * </ul>\n     *\n     * <p><b>Note:</b> The {@code left} and {@code top} values set in\n     * {@link ViewStructure#setDimens(int, int, int, int, int, int)} must be relative to the next\n     * {@link ViewGroup#isImportantForAutofill()} predecessor view included in the structure.\n     *\n     * <p>Views support the Autofill Framework mainly by:\n     * <ul>\n     *   <li>Providing the metadata defining what the view means and how it can be autofilled.\n     *   <li>Notifying the Android System when the view value changed by calling\n     *       {@link AutofillManager#notifyValueChanged(View)}.\n     *   <li>Implementing the methods that autofill the view.\n     * </ul>\n     * <p>This method is responsible for the former; {@link #autofill(AutofillValue)} is responsible\n     * for the latter.\n     *\n     * @param structure fill in with structured view data for autofill purposes.\n     * @param flags optional flags.\n     *\n     * @see #AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS\n     ",
    "links" : [ "android.view.ViewStructure#setVisibility(int)", "#getAutofillType()", "android.view.ViewStructure#setDimens(int", "android.view.ViewStructure#setAutofillId(AutofillId", "android.view.ViewStructure#setAutofillType(int)", "android.view.ViewStructure#setClassName(String)", "android.view.ViewStructure#setAutofillHints(String", "android.view.ViewStructure#setInputType(int)", "#getAutofillId()", "android.view.autofill.AutofillManager#notifyValueChanged(View)", "#autofill(AutofillValue)", "android.view.ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)", "android.view.ViewStructure#setAutofillOptions(CharSequence", "#AUTOFILL_TYPE_LIST", "android.view.View", "android.view.ViewStructure#setId(int", "android.view.ViewStructure#setOpaque(boolean)", "android.view.ViewStructure#setWebDomain(String)", "android.view.ViewStructure#setDataIsSensitive(boolean)", "android.view.ViewStructure#setAutofillValue(AutofillValue)", "android.view.ViewStructure", "android.widget.TextView", "android.view.ViewGroup#isImportantForAutofill()", "android.view.ViewStructure#setHint(CharSequence)", "android.service.autofill.AutofillService", "android.view.ViewStructure#setContentDescription(CharSequence)", "android.view.ViewStructure#setText(CharSequence)" ]
  }, {
    "name" : "public void onProvideContentCaptureStructure(@NonNull ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Populates a {@link ViewStructure} for content capture.\n     *\n     * <p>This method is called after a view is that is eligible for content capture\n     * (for example, if it {@link #isImportantForAutofill()}, an intelligence service is enabled for\n     * the user, and the activity rendering the view is enabled for content capture) is laid out and\n     * is visible.\n     *\n     * <p>The populated structure is then passed to the service through\n     * {@link ContentCaptureSession#notifyViewAppeared(ViewStructure)}.\n     *\n     * <p><b>Note: </b>views that manage a virtual structure under this view must populate just\n     * the node representing this view and return right away, then asynchronously report (not\n     * necessarily in the UI thread) when the children nodes appear, disappear or have their text\n     * changed by calling\n     * {@link ContentCaptureSession#notifyViewAppeared(ViewStructure)},\n     * {@link ContentCaptureSession#notifyViewDisappeared(AutofillId)}, and\n     * {@link ContentCaptureSession#notifyViewTextChanged(AutofillId, CharSequence)}\n     * respectively. The structure for the a child must be created using\n     * {@link ContentCaptureSession#newVirtualViewStructure(AutofillId, long)}, and the\n     * {@code autofillId} for a child can be obtained either through\n     * {@code childStructure.getAutofillId()} or\n     * {@link ContentCaptureSession#newAutofillId(AutofillId, long)}.\n     *\n     * <p>When the virtual view hierarchy represents a web page, you should also:\n     *\n     * <ul>\n     *   <li>Call {@link ContentCaptureManager#getContentCaptureConditions()} to infer content\n     *   capture events should be generate for that URL.\n     *   <li>Create a new {@link ContentCaptureSession} child for every HTML element that\n     *   renders a new URL (like an {@code IFRAME}) and use that session to notify events from\n     *   that subtree.\n     * </ul>\n     *\n     * <p><b>Note: </b>the following methods of the {@code structure} will be ignored:\n     * <ul>\n     *   <li>{@link ViewStructure#setChildCount(int)}\n     *   <li>{@link ViewStructure#addChildCount(int)}\n     *   <li>{@link ViewStructure#getChildCount()}\n     *   <li>{@link ViewStructure#newChild(int)}\n     *   <li>{@link ViewStructure#asyncNewChild(int)}\n     *   <li>{@link ViewStructure#asyncCommit()}\n     *   <li>{@link ViewStructure#setWebDomain(String)}\n     *   <li>{@link ViewStructure#newHtmlInfoBuilder(String)}\n     *   <li>{@link ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)}\n     *   <li>{@link ViewStructure#setDataIsSensitive(boolean)}\n     *   <li>{@link ViewStructure#setAlpha(float)}\n     *   <li>{@link ViewStructure#setElevation(float)}\n     *   <li>{@link ViewStructure#setTransformation(Matrix)}\n     *\n     * </ul>\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession#newVirtualViewStructure(AutofillId", "android.view.contentcapture.ContentCaptureSession#notifyViewTextChanged(AutofillId", "android.view.ViewStructure#setChildCount(int)", "android.view.contentcapture.ContentCaptureSession#newAutofillId(AutofillId", "android.view.ViewStructure#asyncCommit()", "android.view.ViewStructure#setAlpha(float)", "android.view.ViewStructure#setWebDomain(String)", "android.view.ViewStructure#addChildCount(int)", "android.view.ViewStructure#setDataIsSensitive(boolean)", "android.view.contentcapture.ContentCaptureSession#notifyViewAppeared(ViewStructure)", "android.view.ViewStructure#newChild(int)", "#isImportantForAutofill()", "android.view.contentcapture.ContentCaptureSession", "android.view.ViewStructure#asyncNewChild(int)", "android.view.ViewStructure", "android.view.ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)", "android.view.ViewStructure#getChildCount()", "android.view.ViewStructure#newHtmlInfoBuilder(String)", "android.view.contentcapture.ContentCaptureSession#notifyViewDisappeared(AutofillId)", "android.view.ViewStructure#setElevation(float)", "android.view.contentcapture.ContentCaptureManager#getContentCaptureConditions()", "android.view.ViewStructure#setTransformation(Matrix)" ]
  }, {
    "name" : "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onProvideVirtualStructure(ViewStructure structure)",
    "returnType" : "void",
    "comment" : "\n     * Called when assist structure is being retrieved from a view as part of\n     * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData} to\n     * generate additional virtual structure under this view.  The defaullt implementation\n     * uses {@link #getAccessibilityNodeProvider()} to try to generate this from the\n     * view's virtual accessibility nodes, if any.  You can override this for a more\n     * optimal implementation providing this data.\n     ",
    "links" : [ "android.app.Activity#onProvideAssistData", "#getAccessibilityNodeProvider()" ]
  }, {
    "name" : "private void onProvideVirtualStructureCompat(ViewStructure structure, boolean forAutofill)",
    "returnType" : "void",
    "comment" : "\n     * Fallback implementation to populate a ViewStructure from accessibility state.\n     *\n     * @param structure The structure to populate.\n     * @param forAutofill Whether the structure is needed for autofill.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Populates a {@link ViewStructure} containing virtual children to fullfil an autofill\n     * request.\n     *\n     * <p>This method should be used when the view manages a virtual structure under this view. For\n     * example, a view that draws input fields using {@link #draw(Canvas)}.\n     *\n     * <p>When implementing this method, subclasses must follow the rules below:\n     *\n     * <ul>\n     *   <li>Add virtual children by calling the {@link ViewStructure#newChild(int)} or\n     *       {@link ViewStructure#asyncNewChild(int)} methods, where the {@code id} is an unique id\n     *       identifying the children in the virtual structure.\n     *   <li>The children hierarchy can have multiple levels if necessary, but ideally it should\n     *       exclude intermediate levels that are irrelevant for autofill; that would improve the\n     *       autofill performance.\n     *   <li>Also implement {@link #autofill(SparseArray)} to autofill the virtual\n     *       children.\n     *   <li>Set the autofill properties of the child structure as defined by\n     *       {@link #onProvideAutofillStructure(ViewStructure, int)}, using\n     *       {@link ViewStructure#setAutofillId(AutofillId, int)} to set its autofill id.\n     *   <li>Call {@link android.view.autofill.AutofillManager#notifyViewEntered(View, int, Rect)}\n     *       and/or {@link android.view.autofill.AutofillManager#notifyViewExited(View, int)}\n     *       when the focused virtual child changed.\n     *   <li>Override {@link #isVisibleToUserForAutofill(int)} to allow the platform to query\n     *       whether a given virtual view is visible to the user in order to support triggering\n     *       save when all views of interest go away.\n     *   <li>Call\n     *    {@link android.view.autofill.AutofillManager#notifyValueChanged(View, int, AutofillValue)}\n     *       when the value of a virtual child changed.\n     *   <li>Call {@link\n     *    android.view.autofill.AutofillManager#notifyViewVisibilityChanged(View, int, boolean)}\n     *       when the visibility of a virtual child changed.\n     *   <li>Call\n     *    {@link android.view.autofill.AutofillManager#notifyViewClicked(View, int)} when a virtual\n     *       child is clicked.\n     *   <li>Call {@link AutofillManager#commit()} when the autofill context of the view structure\n     *       changed and the current context should be committed (for example, when the user tapped\n     *       a {@code SUBMIT} button in an HTML page).\n     *   <li>Call {@link AutofillManager#cancel()} when the autofill context of the view structure\n     *       changed and the current context should be canceled (for example, when the user tapped\n     *       a {@code CANCEL} button in an HTML page).\n     *   <li>Provide ways for users to manually request autofill by calling\n     *       {@link AutofillManager#requestAutofill(View, int, Rect)}.\n     *   <li>The {@code left} and {@code top} values set in\n     *       {@link ViewStructure#setDimens(int, int, int, int, int, int)} must be relative to the\n     *       next {@link ViewGroup#isImportantForAutofill()} predecessor view included in the\n     *       structure.\n     * </ul>\n     *\n     * <p>Views with virtual children support the Autofill Framework mainly by:\n     * <ul>\n     *   <li>Providing the metadata defining what the virtual children mean and how they can be\n     *       autofilled.\n     *   <li>Implementing the methods that autofill the virtual children.\n     * </ul>\n     * <p>This method is responsible for the former; {@link #autofill(SparseArray)} is responsible\n     * for the latter.\n     *\n     * @param structure fill in with virtual children data for autofill purposes.\n     * @param flags optional flags.\n     *\n     * @see #AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS\n     ",
    "links" : [ "android.view.autofill.AutofillManager#notifyViewExited(View", "android.view.autofill.AutofillManager#cancel()", "#isVisibleToUserForAutofill(int)", "android.view.ViewStructure#setDimens(int", "android.view.ViewStructure#setAutofillId(AutofillId", "android.view.autofill.AutofillManager#notifyViewVisibilityChanged(View", "android.view.autofill.AutofillManager#notifyValueChanged(View", "android.view.autofill.AutofillManager#notifyViewClicked(View", "android.view.autofill.AutofillManager#requestAutofill(View", "android.view.ViewStructure#newChild(int)", "android.view.ViewStructure#asyncNewChild(int)", "android.view.ViewStructure", "android.view.ViewGroup#isImportantForAutofill()", "android.view.autofill.AutofillManager#commit()", "#draw(Canvas)", "android.view.autofill.AutofillManager#notifyViewEntered(View", "#onProvideAutofillStructure(ViewStructure", "#autofill(SparseArray)" ]
  }, {
    "name" : "public void autofill(@SuppressWarnings(\"unused\") AutofillValue value)",
    "returnType" : "void",
    "comment" : "\n     * Automatically fills the content of this view with the {@code value}.\n     *\n     * <p>Views support the Autofill Framework mainly by:\n     * <ul>\n     *   <li>Providing the metadata defining what the view means and how it can be autofilled.\n     *   <li>Implementing the methods that autofill the view.\n     * </ul>\n     * <p>{@link #onProvideAutofillStructure(ViewStructure, int)} is responsible for the former,\n     * this method is responsible for latter.\n     *\n     * <p>This method does nothing by default, but when overridden it typically:\n     * <ol>\n     *   <li>Checks if the provided value matches the expected type (which is defined by\n     *       {@link #getAutofillType()}).\n     *   <li>Checks if the view is editable - if it isn't, it should return right away.\n     *   <li>Call the proper getter method on {@link AutofillValue} to fetch the actual value.\n     *   <li>Pass the actual value to the equivalent setter in the view.\n     * </ol>\n     *\n     * <p>For example, a text-field view could implement the method this way:\n     *\n     * <pre class=\"prettyprint\">\n     * &#64;Override\n     * public void autofill(AutofillValue value) {\n     *   if (!value.isText() || !this.isEditable()) {\n     *      return;\n     *   }\n     *   CharSequence text = value.getTextValue();\n     *   if (text != null) {\n     *     this.setText(text);\n     *   }\n     * }\n     * </pre>\n     *\n     * <p>If the value is updated asynchronously, the next call to\n     * {@link AutofillManager#notifyValueChanged(View)} must happen <b>after</b> the value was\n     * changed to the autofilled value. If not, the view will not be considered autofilled.\n     *\n     * <p><b>Note:</b> After this method is called, the value returned by\n     * {@link #getAutofillValue()} must be equal to the {@code value} passed to it, otherwise the\n     * view will not be highlighted as autofilled.\n     *\n     * @param value value to be autofilled.\n     ",
    "links" : [ "android.view.autofill.AutofillValue", "android.view.autofill.AutofillManager#notifyValueChanged(View)", "#getAutofillType()", "#onProvideAutofillStructure(ViewStructure", "#getAutofillValue()" ]
  }, {
    "name" : "public void autofill(@NonNull @SuppressWarnings(\"unused\") SparseArray<AutofillValue> values)",
    "returnType" : "void",
    "comment" : "\n     * Automatically fills the content of the virtual children within this view.\n     *\n     * <p>Views with virtual children support the Autofill Framework mainly by:\n     * <ul>\n     *   <li>Providing the metadata defining what the virtual children mean and how they can be\n     *       autofilled.\n     *   <li>Implementing the methods that autofill the virtual children.\n     * </ul>\n     * <p>{@link #onProvideAutofillVirtualStructure(ViewStructure, int)} is responsible for the\n     * former, this method is responsible for the latter - see {@link #autofill(AutofillValue)} and\n     * {@link #onProvideAutofillVirtualStructure(ViewStructure, int)} for more info about autofill.\n     *\n     * <p>If a child value is updated asynchronously, the next call to\n     * {@link AutofillManager#notifyValueChanged(View, int, AutofillValue)} must happen\n     * <b>after</b> the value was changed to the autofilled value. If not, the child will not be\n     * considered autofilled.\n     *\n     * <p><b>Note:</b> To indicate that a virtual view was autofilled,\n     * <code>?android:attr/autofilledHighlight</code> should be drawn over it until the data\n     * changes.\n     *\n     * @param values map of values to be autofilled, keyed by virtual child id.\n     *\n     * @attr ref android.R.styleable#Theme_autofilledHighlight\n     ",
    "links" : [ "#autofill(AutofillValue)", "#onProvideAutofillVirtualStructure(ViewStructure", "android.view.autofill.AutofillManager#notifyValueChanged(View" ]
  }, {
    "name" : "public final AutofillId getAutofillId()",
    "returnType" : "AutofillId",
    "comment" : "\n     * Gets the unique, logical identifier of this view in the activity, for autofill purposes.\n     *\n     * <p>The autofill id is created on demand, unless it is explicitly set by\n     * {@link #setAutofillId(AutofillId)}.\n     *\n     * <p>See {@link #setAutofillId(AutofillId)} for more info.\n     *\n     * @return The View's autofill id.\n     ",
    "links" : [ "#setAutofillId(AutofillId)" ]
  }, {
    "name" : "public void setAutofillId(@Nullable AutofillId id)",
    "returnType" : "void",
    "comment" : "\n     * Sets the unique, logical identifier of this view in the activity, for autofill purposes.\n     *\n     * <p>The autofill id is created on demand, and this method should only be called when a view is\n     * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as\n     * that method creates a snapshot of the view that is passed along to the autofill service.\n     *\n     * <p>This method is typically used when view subtrees are recycled to represent different\n     * content* &mdash;in this case, the autofill id can be saved before the view content is swapped\n     * out, and restored later when it's swapped back in. For example:\n     *\n     * <pre>\n     * EditText reusableView = ...;\n     * ViewGroup parentView = ...;\n     * AutofillManager afm = ...;\n     *\n     * // Swap out the view and change its contents\n     * AutofillId oldId = reusableView.getAutofillId();\n     * CharSequence oldText = reusableView.getText();\n     * parentView.removeView(reusableView);\n     * AutofillId newId = afm.getNextAutofillId();\n     * reusableView.setText(\"New I am\");\n     * reusableView.setAutofillId(newId);\n     * parentView.addView(reusableView);\n     *\n     * // Later, swap the old content back in\n     * parentView.removeView(reusableView);\n     * reusableView.setAutofillId(oldId);\n     * reusableView.setText(oldText);\n     * parentView.addView(reusableView);\n     * </pre>\n     *\n     * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,\n     * or {@code null} to reset it. Usually it's an id previously allocated to another view (and\n     * obtained through {@link #getAutofillId()}), or a new value obtained through\n     * {@link AutofillManager#getNextAutofillId()}.\n     *\n     * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to\n     * a window}.\n     *\n     * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.\n     ",
    "links" : [ "#getAutofillId()", "#dispatchProvideAutofillStructure(ViewStructure", "android.view.autofill.AutofillManager#getNextAutofillId()", "android.app.Activity", "#isAttachedToWindow()" ]
  }, {
    "name" : "public int getAutofillType()",
    "returnType" : "int",
    "comment" : "\n     * Describes the autofill type of this view, so an\n     * {@link android.service.autofill.AutofillService} can create the proper {@link AutofillValue}\n     * when autofilling the view.\n     *\n     * <p>By default returns {@link #AUTOFILL_TYPE_NONE}, but views should override it to properly\n     * support the Autofill Framework.\n     *\n     * @return either {@link #AUTOFILL_TYPE_NONE}, {@link #AUTOFILL_TYPE_TEXT},\n     * {@link #AUTOFILL_TYPE_LIST}, {@link #AUTOFILL_TYPE_DATE}, or {@link #AUTOFILL_TYPE_TOGGLE}.\n     *\n     * @see #onProvideAutofillStructure(ViewStructure, int)\n     * @see #autofill(AutofillValue)\n     ",
    "links" : [ "#AUTOFILL_TYPE_NONE", "android.view.autofill.AutofillValue", "#AUTOFILL_TYPE_DATE", "#AUTOFILL_TYPE_LIST", "android.service.autofill.AutofillService", "#AUTOFILL_TYPE_TEXT", "#AUTOFILL_TYPE_TOGGLE" ]
  }, {
    "name" : "public String[] getAutofillHints()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the hints that help an {@link android.service.autofill.AutofillService} determine how\n     * to autofill the view with the user's data.\n     *\n     * <p>See {@link #setAutofillHints(String...)} for more info about these hints.\n     *\n     * @return The hints set via the attribute or {@link #setAutofillHints(String...)}, or\n     * {@code null} if no hints were set.\n     *\n     * @attr ref android.R.styleable#View_autofillHints\n     ",
    "links" : [ "#setAutofillHints(String...)", "android.service.autofill.AutofillService" ]
  }, {
    "name" : "public boolean isAutofilled()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hideAutofillHighlight()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AutofillValue getAutofillValue()",
    "returnType" : "AutofillValue",
    "comment" : "\n     * Gets the {@link View}'s current autofill value.\n     *\n     * <p>By default returns {@code null}, but subclasses should override it and return an\n     * appropriate value to properly support the Autofill Framework.\n     *\n     * @see #onProvideAutofillStructure(ViewStructure, int)\n     * @see #autofill(AutofillValue)\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public int getImportantForAutofill()",
    "returnType" : "int",
    "comment" : "\n     * Gets the mode for determining whether this view is important for autofill.\n     *\n     * <p>See {@link #setImportantForAutofill(int)} and {@link #isImportantForAutofill()} for more\n     * info about this mode.\n     *\n     * @return {@link #IMPORTANT_FOR_AUTOFILL_AUTO} by default, or value passed to\n     * {@link #setImportantForAutofill(int)}.\n     *\n     * @attr ref android.R.styleable#View_importantForAutofill\n     ",
    "links" : [ "#setImportantForAutofill(int)", "#isImportantForAutofill()", "#IMPORTANT_FOR_AUTOFILL_AUTO" ]
  }, {
    "name" : "public void setImportantForAutofill(@AutofillImportance int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the mode for determining whether this view is considered important for autofill.\n     *\n     * <p>The platform determines the importance for autofill automatically but you\n     * can use this method to customize the behavior. For example:\n     *\n     * <ol>\n     *   <li>When the view contents is irrelevant for autofill (for example, a text field used in a\n     *       \"Captcha\" challenge), it should be {@link #IMPORTANT_FOR_AUTOFILL_NO}.\n     *   <li>When both the view and its children are irrelevant for autofill (for example, the root\n     *       view of an activity containing a spreadhseet editor), it should be\n     *       {@link #IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}.\n     *   <li>When the view content is relevant for autofill but its children aren't (for example,\n     *       a credit card expiration date represented by a custom view that overrides the proper\n     *       autofill methods and has 2 children representing the month and year), it should\n     *       be {@link #IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS}.\n     * </ol>\n     *\n     * <p><b>Note:</b> Setting the mode as {@link #IMPORTANT_FOR_AUTOFILL_NO} or\n     * {@link #IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS} does not guarantee the view (and its\n     * children) will be always be considered not important; for example, when the user explicitly\n     * makes an autofill request, all views are considered important. See\n     * {@link #isImportantForAutofill()} for more details about how the View's importance for\n     * autofill is used.\n     *\n     * @param mode {@link #IMPORTANT_FOR_AUTOFILL_AUTO}, {@link #IMPORTANT_FOR_AUTOFILL_YES},\n     * {@link #IMPORTANT_FOR_AUTOFILL_NO}, {@link #IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS},\n     * or {@link #IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}.\n     *\n     * @attr ref android.R.styleable#View_importantForAutofill\n     ",
    "links" : [ "#IMPORTANT_FOR_AUTOFILL_NO", "#isImportantForAutofill()", "#IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS", "#IMPORTANT_FOR_AUTOFILL_YES", "#IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS", "#IMPORTANT_FOR_AUTOFILL_AUTO" ]
  }, {
    "name" : "public final boolean isImportantForAutofill()",
    "returnType" : "boolean",
    "comment" : "\n     * Hints the Android System whether the {@link android.app.assist.AssistStructure.ViewNode}\n     * associated with this view is considered important for autofill purposes.\n     *\n     * <p>Generally speaking, a view is important for autofill if:\n     * <ol>\n     * <li>The view can be autofilled by an {@link android.service.autofill.AutofillService}.\n     * <li>The view contents can help an {@link android.service.autofill.AutofillService}\n     *     determine how other views can be autofilled.\n     * <ol>\n     *\n     * <p>For example, view containers should typically return {@code false} for performance reasons\n     * (since the important info is provided by their children), but if its properties have relevant\n     * information (for example, a resource id called {@code credentials}, it should return\n     * {@code true}. On the other hand, views representing labels or editable fields should\n     * typically return {@code true}, but in some cases they could return {@code false}\n     * (for example, if they're part of a \"Captcha\" mechanism).\n     *\n     * <p>The value returned by this method depends on the value returned by\n     * {@link #getImportantForAutofill()}:\n     *\n     * <ol>\n     *   <li>if it returns {@link #IMPORTANT_FOR_AUTOFILL_YES} or\n     *       {@link #IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS}, then it returns {@code true}\n     *   <li>if it returns {@link #IMPORTANT_FOR_AUTOFILL_NO} or\n     *       {@link #IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}, then it returns {@code false}\n     *   <li>if it returns {@link #IMPORTANT_FOR_AUTOFILL_AUTO}, then it uses some simple heuristics\n     *       that can return {@code true} in some cases (like a container with a resource id),\n     *       but {@code false} in most.\n     *   <li>otherwise, it returns {@code false}.\n     * </ol>\n     *\n     * <p>When a view is considered important for autofill:\n     * <ul>\n     *   <li>The view might automatically trigger an autofill request when focused on.\n     *   <li>The contents of the view are included in the {@link ViewStructure} used in an autofill\n     *       request.\n     * </ul>\n     *\n     * <p>On the other hand, when a view is considered not important for autofill:\n     * <ul>\n     *   <li>The view never automatically triggers autofill requests, but it can trigger a manual\n     *       request through {@link AutofillManager#requestAutofill(View)}.\n     *   <li>The contents of the view are not included in the {@link ViewStructure} used in an\n     *       autofill request, unless the request has the\n     *       {@link #AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS} flag.\n     * </ul>\n     *\n     * @return whether the view is considered important for autofill.\n     *\n     * @see #setImportantForAutofill(int)\n     * @see #IMPORTANT_FOR_AUTOFILL_AUTO\n     * @see #IMPORTANT_FOR_AUTOFILL_YES\n     * @see #IMPORTANT_FOR_AUTOFILL_NO\n     * @see #IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS\n     * @see #IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS\n     * @see AutofillManager#requestAutofill(View)\n     ",
    "links" : [ "#IMPORTANT_FOR_AUTOFILL_NO", "android.view.autofill.AutofillManager#requestAutofill(View)", "android.app.assist.AssistStructure.ViewNode", "android.view.ViewStructure", "#getImportantForAutofill()", "#IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS", "#IMPORTANT_FOR_AUTOFILL_YES", "android.service.autofill.AutofillService", "#IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS", "#IMPORTANT_FOR_AUTOFILL_AUTO", "#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS" ]
  }, {
    "name" : "public int getImportantForContentCapture()",
    "returnType" : "int",
    "comment" : "\n     * Gets the mode for determining whether this view is important for content capture.\n     *\n     * <p>See {@link #setImportantForContentCapture(int)} and\n     * {@link #isImportantForContentCapture()} for more info about this mode.\n     *\n     * @return {@link #IMPORTANT_FOR_CONTENT_CAPTURE_AUTO} by default, or value passed to\n     * {@link #setImportantForContentCapture(int)}.\n     *\n     * @attr ref android.R.styleable#View_importantForContentCapture\n     ",
    "links" : [ "#setImportantForContentCapture(int)", "#IMPORTANT_FOR_CONTENT_CAPTURE_AUTO", "#isImportantForContentCapture()" ]
  }, {
    "name" : "public void setImportantForContentCapture(@ContentCaptureImportance int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the mode for determining whether this view is considered important for content capture.\n     *\n     * <p>The platform determines the importance for autofill automatically but you\n     * can use this method to customize the behavior. Typically, a view that provides text should\n     * be marked as {@link #IMPORTANT_FOR_CONTENT_CAPTURE_YES}.\n     *\n     * @param mode {@link #IMPORTANT_FOR_CONTENT_CAPTURE_AUTO},\n     * {@link #IMPORTANT_FOR_CONTENT_CAPTURE_YES}, {@link #IMPORTANT_FOR_CONTENT_CAPTURE_NO},\n     * {@link #IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS},\n     * or {@link #IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS}.\n     *\n     * @attr ref android.R.styleable#View_importantForContentCapture\n     ",
    "links" : [ "#IMPORTANT_FOR_CONTENT_CAPTURE_YES", "#IMPORTANT_FOR_CONTENT_CAPTURE_AUTO", "#IMPORTANT_FOR_CONTENT_CAPTURE_NO", "#IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS", "#IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS" ]
  }, {
    "name" : "public final boolean isImportantForContentCapture()",
    "returnType" : "boolean",
    "comment" : "\n     * Hints the Android System whether this view is considered important for content capture, based\n     * on the value explicitly set by {@link #setImportantForContentCapture(int)} and heuristics\n     * when it's {@link #IMPORTANT_FOR_CONTENT_CAPTURE_AUTO}.\n     *\n     * <p>See {@link ContentCaptureManager} for more info about content capture.\n     *\n     * @return whether the view is considered important for content capture.\n     *\n     * @see #setImportantForContentCapture(int)\n     * @see #IMPORTANT_FOR_CONTENT_CAPTURE_AUTO\n     * @see #IMPORTANT_FOR_CONTENT_CAPTURE_YES\n     * @see #IMPORTANT_FOR_CONTENT_CAPTURE_NO\n     * @see #IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS\n     * @see #IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager", "#setImportantForContentCapture(int)", "#IMPORTANT_FOR_CONTENT_CAPTURE_AUTO" ]
  }, {
    "name" : "private boolean calculateIsImportantForContentCapture()",
    "returnType" : "boolean",
    "comment" : "\n     * Calculates whether the flag is important for content capture so it can be used by\n     * {@link #isImportantForContentCapture()} while the tree is traversed.\n     ",
    "links" : [ "#isImportantForContentCapture()" ]
  }, {
    "name" : "private void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean appeared)",
    "returnType" : "void",
    "comment" : "\n     * Helper used to notify the {@link ContentCaptureManager} when the view is removed or\n     * added, based on whether it's laid out and visible, and without knowing if the parent removed\n     * it from the view hierarchy.\n     *\n     * <p>This method is called from many places (visibility changed, view laid out, view attached\n     * or detached to/from window, etc...) and hence must contain the logic to call the manager, as\n     * described below:\n     *\n     * <ol>\n     *   <li>It should only be called when content capture is enabled for the view.\n     *   <li>It must call viewAppeared() before viewDisappeared()\n     *   <li>viewAppearead() can only be called when the view is visible and laidout\n     *   <li>It should not call the same event twice.\n     * </ol>\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager" ]
  }, {
    "name" : "private void notifyAppearedOrDisappearedForContentCaptureIfNeededNoTrace(boolean appeared)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setNotifiedContentCaptureAppeared()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean getNotifiedContentCaptureAppeared()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setContentCaptureSession(@Nullable ContentCaptureSession contentCaptureSession)",
    "returnType" : "void",
    "comment" : "\n     * Sets the (optional) {@link ContentCaptureSession} associated with this view.\n     *\n     * <p>This method should be called when you need to associate a {@link ContentCaptureContext} to\n     * the content capture events associated with this view or its view hierarchy (if it's a\n     * {@link ViewGroup}).\n     *\n     * <p>For example, if your activity is associated with a web domain, first you would need to\n     * set the context for the main DOM:\n     *\n     * <pre>\n     *   ContentCaptureSession mainSession = rootView.getContentCaptureSession();\n     *   mainSession.setContentCaptureContext(ContentCaptureContext.forLocusId(Uri.parse(myUrl));\n     * </pre>\n     *\n     * <p>Then if the page had an {@code IFRAME}, you would create a new session for it:\n     *\n     * <pre>\n     *   ContentCaptureSession iframeSession = mainSession.createContentCaptureSession(\n     *       ContentCaptureContext.forLocusId(Uri.parse(iframeUrl)));\n     *   iframeView.setContentCaptureSession(iframeSession);\n     * </pre>\n     *\n     * @param contentCaptureSession a session created by\n     * {@link ContentCaptureSession#createContentCaptureSession(\n     *        android.view.contentcapture.ContentCaptureContext)}.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession", "android.view.contentcapture.ContentCaptureSession#createContentCaptureSession(", "android.view.contentcapture.ContentCaptureContext", "android.view.ViewGroup" ]
  }, {
    "name" : "public final ContentCaptureSession getContentCaptureSession()",
    "returnType" : "ContentCaptureSession",
    "comment" : "\n     * Gets the session used to notify content capture events.\n     *\n     * @return session explicitly set by {@link #setContentCaptureSession(ContentCaptureSession)},\n     * inherited by ancestors, default session or {@code null} if content capture is disabled for\n     * this view.\n     ",
    "links" : [ "#setContentCaptureSession(ContentCaptureSession)" ]
  }, {
    "name" : "private ContentCaptureSession getAndCacheContentCaptureSession()",
    "returnType" : "ContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AutofillManager getAutofillManager()",
    "returnType" : "AutofillManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAutofillable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canNotifyAutofillEnterExitEvent()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void populateVirtualStructure(ViewStructure structure, AccessibilityNodeProvider provider, AccessibilityNodeInfo info, boolean forAutofill)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchProvideStructure(ViewStructure structure)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch creation of {@link ViewStructure} down the hierarchy.  The default\n     * implementation calls {@link #onProvideStructure} and\n     * {@link #onProvideVirtualStructure}.\n     ",
    "links" : [ "android.view.ViewStructure", "#onProvideVirtualStructure", "#onProvideStructure" ]
  }, {
    "name" : "public void dispatchProvideAutofillStructure(@NonNull ViewStructure structure, @AutofillFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches creation of a {@link ViewStructure}s for autofill purposes down the hierarchy,\n     * when an Assist structure is being created as part of an autofill request.\n     *\n     * <p>The default implementation does the following:\n     * <ul>\n     *   <li>Sets the {@link AutofillId} in the structure.\n     *   <li>Calls {@link #onProvideAutofillStructure(ViewStructure, int)}.\n     *   <li>Calls {@link #onProvideAutofillVirtualStructure(ViewStructure, int)}.\n     * </ul>\n     *\n     * <p>Typically, this method should only be overridden by subclasses that provide a view\n     * hierarchy (such as {@link ViewGroup}) - other classes should override\n     * {@link #onProvideAutofillStructure(ViewStructure, int)} or\n     * {@link #onProvideAutofillVirtualStructure(ViewStructure, int)} instead.\n     *\n     * <p>When overridden, it must:\n     *\n     * <ul>\n     *   <li>Either call\n     *       {@code super.dispatchProvideAutofillStructure(structure, flags)} or explicitly\n     *       set the {@link AutofillId} in the structure (for example, by calling\n     *       {@code structure.setAutofillId(getAutofillId())}).\n     *   <li>Decide how to handle the {@link #AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS} flag - when\n     *       set, all views in the structure should be considered important for autofill,\n     *       regardless of what {@link #isImportantForAutofill()} returns. We encourage you to\n     *       respect this flag to provide a better user experience - this flag is typically used\n     *       when an user explicitly requested autofill. If the flag is not set,\n     *       then only views marked as important for autofill should be included in the\n     *       structure - skipping non-important views optimizes the overall autofill performance.\n     * </ul>\n     *\n     * @param structure fill in with structured view data for autofill purposes.\n     * @param flags optional flags.\n     *\n     * @see #AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS\n     ",
    "links" : [ "#isImportantForAutofill()", "android.view.ViewStructure", "#onProvideAutofillVirtualStructure(ViewStructure", "#onProvideAutofillStructure(ViewStructure", "android.view.autofill.AutofillId", "android.view.ViewGroup", "#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS" ]
  }, {
    "name" : "private void dispatchProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, @AutofillFlags int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchInitialProvideContentCaptureStructure()",
    "returnType" : "void",
    "comment" : "\n     * Dispatches the initial content capture events for a view structure.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchProvideContentCaptureStructure()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "\n     * @see #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)\n     *\n     * Note: Called from the default {@link AccessibilityDelegate}.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "public void addExtraDataToAccessibilityNodeInfo(@NonNull AccessibilityNodeInfo info, @NonNull String extraDataKey, @Nullable Bundle arguments)",
    "returnType" : "void",
    "comment" : "\n     * Adds extra data to an {@link AccessibilityNodeInfo} based on an explicit request for the\n     * additional data.\n     * <p>\n     * This method only needs overloading if the node is marked as having extra data available.\n     * </p>\n     *\n     * @param info The info to which to add the extra data. Never {@code null}.\n     * @param extraDataKey A key specifying the type of extra data to add to the info. The\n     *                     extra data should be added to the {@link Bundle} returned by\n     *                     the info's {@link AccessibilityNodeInfo#getExtras} method. Never\n     *                     {@code null}.\n     * @param arguments A {@link Bundle} holding any arguments relevant for this request. May be\n     *                  {@code null} if the service provided no arguments.\n     *\n     * @see AccessibilityNodeInfo#setAvailableExtraData(List)\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.os.Bundle", "android.view.accessibility.AccessibilityNodeInfo#getExtras" ]
  }, {
    "name" : "private void populateAccessibilityNodeInfoDrawingOrderInParent(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Determine the order in which this view will be drawn relative to its siblings for a11y\n     *\n     * @param info The info whose drawing order should be populated\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int numViewsForAccessibility(View view)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findLabelForView(View view, int labeledId)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisibleToUserForAutofill(int virtualId)",
    "returnType" : "boolean",
    "comment" : "\n     * Computes whether this virtual autofill view is visible to the user.\n     *\n     * <p><b>Note: </b>By default it returns {@code true}, but views providing a virtual hierarchy\n     * view must override it.\n     *\n     * @return Whether the view is visible on the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisibleToUser()",
    "returnType" : "boolean",
    "comment" : "\n     * Computes whether this view is visible to the user. Such a view is\n     * attached, visible, all its predecessors are visible, it is not clipped\n     * entirely by its predecessors, and has an alpha greater than zero.\n     *\n     * @return Whether the view is visible on the screen.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isVisibleToUser(Rect boundInView)",
    "returnType" : "boolean",
    "comment" : "\n     * Computes whether the given portion of this view is visible to the user.\n     * Such a view is attached, visible, all its predecessors are visible,\n     * has an alpha greater than zero, and the specified portion is not\n     * clipped entirely by its predecessors.\n     *\n     * @param boundInView the portion of the view to test; coordinates should be relative; may be\n     *                    <code>null</code>, and the entire view will be tested in this case.\n     *                    When <code>true</code> is returned by the function, the actual visible\n     *                    region will be stored in this parameter; that is, if boundInView is fully\n     *                    contained within the view, no modification will be made, otherwise regions\n     *                    outside of the visible area of the view will be clipped.\n     *\n     * @return Whether the specified portion of the view is visible on the screen.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityDelegate getAccessibilityDelegate()",
    "returnType" : "AccessibilityDelegate",
    "comment" : "\n     * Returns the delegate for implementing accessibility support via\n     * composition. For more details see {@link AccessibilityDelegate}.\n     *\n     * @return The delegate, or null if none set.\n     ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "public void setAccessibilityDelegate(@Nullable AccessibilityDelegate delegate)",
    "returnType" : "void",
    "comment" : "\n     * Sets a delegate for implementing accessibility support via composition\n     * (as opposed to inheritance). For more details, see\n     * {@link AccessibilityDelegate}.\n     * <p>\n     * <strong>Note:</strong> On platform versions prior to\n     * {@link android.os.Build.VERSION_CODES#M API 23}, delegate methods on\n     * views in the {@code android.widget.*} package are called <i>before</i>\n     * host methods. This prevents certain properties such as class name from\n     * being modified by overriding\n     * {@link AccessibilityDelegate#onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)},\n     * as any changes will be overwritten by the host class.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#M API 23}, delegate\n     * methods are called <i>after</i> host methods, which all properties to be\n     * modified without being overwritten by the host class.\n     *\n     * @param delegate the object to which accessibility method calls should be\n     *                 delegated\n     * @see AccessibilityDelegate\n     ",
    "links" : [ "AccessibilityDelegate", "android.os.Build.VERSION_CODES#M", "#onInitializeAccessibilityNodeInfo(View" ]
  }, {
    "name" : "public AccessibilityNodeProvider getAccessibilityNodeProvider()",
    "returnType" : "AccessibilityNodeProvider",
    "comment" : "\n     * Gets the provider for managing a virtual view hierarchy rooted at this View\n     * and reported to {@link android.accessibilityservice.AccessibilityService}s\n     * that explore the window content.\n     * <p>\n     * If this method returns an instance, this instance is responsible for managing\n     * {@link AccessibilityNodeInfo}s describing the virtual sub-tree rooted at this\n     * View including the one representing the View itself. Similarly the returned\n     * instance is responsible for performing accessibility actions on any virtual\n     * view or the root view itself.\n     * </p>\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#getAccessibilityNodeProvider(View)}\n     * is responsible for handling this call.\n     * </p>\n     *\n     * @return The provider.\n     *\n     * @see AccessibilityNodeProvider\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.accessibility.AccessibilityNodeInfo", "#getAccessibilityNodeProvider(View)", "#setAccessibilityDelegate(AccessibilityDelegate)", "AccessibilityDelegate" ]
  }, {
    "name" : "public int getAccessibilityViewId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique identifier of this view on the screen for accessibility purposes.\n     *\n     * @return The view accessibility id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAutofillViewId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique identifier of this view on the screen for autofill purposes.\n     *\n     * @return The view autofill id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessibilityWindowId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique identifier of the window in which this View resides.\n     *\n     * @return The window accessibility id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharSequence getStateDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the {@link View}'s state description.\n     * <p>\n     * <strong>Note:</strong> Do not override this method, as it will have no\n     * effect on the state description presented to accessibility services.\n     * You must call {@link #setStateDescription(CharSequence)} to modify the\n     * state description.\n     *\n     * @return the state description\n     * @see #setStateDescription(CharSequence)\n     ",
    "links" : [ "#setStateDescription(CharSequence)", "android.view.View" ]
  }, {
    "name" : "public CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the {@link View}'s content description.\n     * <p>\n     * <strong>Note:</strong> Do not override this method, as it will have no\n     * effect on the content description presented to accessibility services.\n     * You must call {@link #setContentDescription(CharSequence)} to modify the\n     * content description.\n     *\n     * @return the content description\n     * @see #setContentDescription(CharSequence)\n     * @attr ref android.R.styleable#View_contentDescription\n     ",
    "links" : [ "#setContentDescription(CharSequence)", "android.view.View" ]
  }, {
    "name" : "public void setStateDescription(@Nullable CharSequence stateDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link View}'s state description.\n     * <p>\n     * A state description briefly describes the states of the view and is primarily used\n     * for accessibility support to determine how the states of a view should be presented to\n     * the user. It is a supplement to the boolean states (for example, checked/unchecked) and\n     * it is used for customized state description (for example, \"wifi, connected, three bars\").\n     * State description changes frequently while content description should change less often.\n     * State description should be localized. For android widgets which have default state\n     * descriptions, app developers can call this method to override the state descriptions.\n     * Setting state description to null restores the default behavior.\n     *\n     * @param stateDescription The state description.\n     * @see #getStateDescription()\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public void setContentDescription(CharSequence contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link View}'s content description.\n     * <p>\n     * A content description briefly describes the view and is primarily used\n     * for accessibility support to determine how a view should be presented to\n     * the user. In the case of a view with no textual representation, such as\n     * {@link android.widget.ImageButton}, a useful content description\n     * explains what the view does. For example, an image button with a phone\n     * icon that is used to place a call may use \"Call\" as its content\n     * description. An image of a floppy disk that is used to save a file may\n     * use \"Save\".\n     *\n     * @param contentDescription The content description.\n     * @see #getContentDescription()\n     * @attr ref android.R.styleable#View_contentDescription\n     ",
    "links" : [ "android.widget.ImageButton", "android.view.View" ]
  }, {
    "name" : "public void setAccessibilityTraversalBefore(@IdRes int beforeId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of a view before which this one is visited in accessibility traversal.\n     * A screen-reader must visit the content of this view before the content of the one\n     * it precedes. For example, if view B is set to be before view A, then a screen-reader\n     * will traverse the entire content of B before traversing the entire content of A,\n     * regardles of what traversal strategy it is using.\n     * <p>\n     * Views that do not have specified before/after relationships are traversed in order\n     * determined by the screen-reader.\n     * </p>\n     * <p>\n     * Setting that this view is before a view that is not important for accessibility\n     * or if this view is not important for accessibility will have no effect as the\n     * screen-reader is not aware of unimportant views.\n     * </p>\n     *\n     * @param beforeId The id of a view this one precedes in accessibility traversal.\n     *\n     * @attr ref android.R.styleable#View_accessibilityTraversalBefore\n     *\n     * @see #setImportantForAccessibility(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessibilityTraversalBefore()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of a view before which this one is visited in accessibility traversal.\n     *\n     * @return The id of a view this one precedes in accessibility traversal if\n     *         specified, otherwise {@link #NO_ID}.\n     *\n     * @see #setAccessibilityTraversalBefore(int)\n     ",
    "links" : [ "#NO_ID" ]
  }, {
    "name" : "public void setAccessibilityTraversalAfter(@IdRes int afterId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of a view after which this one is visited in accessibility traversal.\n     * A screen-reader must visit the content of the other view before the content of this\n     * one. For example, if view B is set to be after view A, then a screen-reader\n     * will traverse the entire content of A before traversing the entire content of B,\n     * regardles of what traversal strategy it is using.\n     * <p>\n     * Views that do not have specified before/after relationships are traversed in order\n     * determined by the screen-reader.\n     * </p>\n     * <p>\n     * Setting that this view is after a view that is not important for accessibility\n     * or if this view is not important for accessibility will have no effect as the\n     * screen-reader is not aware of unimportant views.\n     * </p>\n     *\n     * @param afterId The id of a view this one succedees in accessibility traversal.\n     *\n     * @attr ref android.R.styleable#View_accessibilityTraversalAfter\n     *\n     * @see #setImportantForAccessibility(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessibilityTraversalAfter()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of a view after which this one is visited in accessibility traversal.\n     *\n     * @return The id of a view this one succeedes in accessibility traversal if\n     *         specified, otherwise {@link #NO_ID}.\n     *\n     * @see #setAccessibilityTraversalAfter(int)\n     ",
    "links" : [ "#NO_ID" ]
  }, {
    "name" : "public int getLabelFor()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of a view for which this view serves as a label for\n     * accessibility purposes.\n     *\n     * @return The labeled view id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLabelFor(@IdRes int id)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of a view for which this view serves as a label for\n     * accessibility purposes.\n     *\n     * @param id The labeled view id.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusLost()",
    "returnType" : "void",
    "comment" : "\n     * Invoked whenever this view loses focus, either by losing window focus or by losing\n     * focus within its window. This method can be used to clear any state tied to the\n     * focus. For instance, if a button is held pressed with the trackball and the window\n     * loses focus, this method can be used to cancel the press.\n     *\n     * Subclasses of View overriding this method should always call super.onFocusLost().\n     *\n     * @see #onFocusChanged(boolean, int, android.graphics.Rect)\n     * @see #onWindowFocusChanged(boolean)\n     *\n     * @hide pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetPressedState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view has focus\n     *\n     * @return True if this view has focus, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View findFocus()",
    "returnType" : "View",
    "comment" : "\n     * Find the view in the hierarchy rooted at this view that currently has\n     * focus.\n     *\n     * @return The view that currently has focus, or null if no focused view can\n     *         be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScrollContainer()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this view is one of the set of scrollable containers in\n     * its window.\n     *\n     * @return whether this view is one of the set of scrollable containers in\n     * its window\n     *\n     * @attr ref android.R.styleable#View_isScrollContainer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollContainer(boolean isScrollContainer)",
    "returnType" : "void",
    "comment" : "\n     * Change whether this view is one of the set of scrollable containers in\n     * its window.  This will be used to determine whether the window can\n     * resize or must pan when a soft input area is open -- scrollable\n     * containers allow the window to use resize mode since the container\n     * will appropriately shrink.\n     *\n     * @attr ref android.R.styleable#View_isScrollContainer\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDrawingCacheQuality()",
    "returnType" : "int",
    "comment" : "\n     * Returns the quality of the drawing cache.\n     *\n     * @return One of {@link #DRAWING_CACHE_QUALITY_AUTO},\n     *         {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}\n     *\n     * @see #setDrawingCacheQuality(int)\n     * @see #setDrawingCacheEnabled(boolean)\n     * @see #isDrawingCacheEnabled()\n     *\n     * @attr ref android.R.styleable#View_drawingCacheQuality\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "#DRAWING_CACHE_QUALITY_AUTO", "#DRAWING_CACHE_QUALITY_HIGH", "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas", "#DRAWING_CACHE_QUALITY_LOW" ]
  }, {
    "name" : "public void setDrawingCacheQuality(@DrawingCacheQuality int quality)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawing cache quality of this view. This value is used only when the\n     * drawing cache is enabled\n     *\n     * @param quality One of {@link #DRAWING_CACHE_QUALITY_AUTO},\n     *        {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}\n     *\n     * @see #getDrawingCacheQuality()\n     * @see #setDrawingCacheEnabled(boolean)\n     * @see #isDrawingCacheEnabled()\n     *\n     * @attr ref android.R.styleable#View_drawingCacheQuality\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "#DRAWING_CACHE_QUALITY_AUTO", "#DRAWING_CACHE_QUALITY_HIGH", "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas", "#DRAWING_CACHE_QUALITY_LOW" ]
  }, {
    "name" : "public boolean getKeepScreenOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the screen should remain on, corresponding to the current\n     * value of {@link #KEEP_SCREEN_ON}.\n     *\n     * @return Returns true if {@link #KEEP_SCREEN_ON} is set.\n     *\n     * @see #setKeepScreenOn(boolean)\n     *\n     * @attr ref android.R.styleable#View_keepScreenOn\n     ",
    "links" : [ "#KEEP_SCREEN_ON" ]
  }, {
    "name" : "public void setKeepScreenOn(boolean keepScreenOn)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether the screen should remain on, modifying the\n     * value of {@link #KEEP_SCREEN_ON}.\n     *\n     * @param keepScreenOn Supply true to set {@link #KEEP_SCREEN_ON}.\n     *\n     * @see #getKeepScreenOn()\n     *\n     * @attr ref android.R.styleable#View_keepScreenOn\n     ",
    "links" : [ "#KEEP_SCREEN_ON" ]
  }, {
    "name" : "public int getNextFocusLeftId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the view to use when the next focus is {@link #FOCUS_LEFT}.\n     * @return The next focus ID, or {@link #NO_ID} if the framework should decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusLeft\n     ",
    "links" : [ "#FOCUS_LEFT", "#NO_ID" ]
  }, {
    "name" : "public void setNextFocusLeftId(@IdRes int nextFocusLeftId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the view to use when the next focus is {@link #FOCUS_LEFT}.\n     * @param nextFocusLeftId The next focus ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusLeft\n     ",
    "links" : [ "#FOCUS_LEFT", "#NO_ID" ]
  }, {
    "name" : "public int getNextFocusRightId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the view to use when the next focus is {@link #FOCUS_RIGHT}.\n     * @return The next focus ID, or {@link #NO_ID} if the framework should decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusRight\n     ",
    "links" : [ "#FOCUS_RIGHT", "#NO_ID" ]
  }, {
    "name" : "public void setNextFocusRightId(@IdRes int nextFocusRightId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the view to use when the next focus is {@link #FOCUS_RIGHT}.\n     * @param nextFocusRightId The next focus ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusRight\n     ",
    "links" : [ "#FOCUS_RIGHT", "#NO_ID" ]
  }, {
    "name" : "public int getNextFocusUpId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the view to use when the next focus is {@link #FOCUS_UP}.\n     * @return The next focus ID, or {@link #NO_ID} if the framework should decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusUp\n     ",
    "links" : [ "#FOCUS_UP", "#NO_ID" ]
  }, {
    "name" : "public void setNextFocusUpId(@IdRes int nextFocusUpId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the view to use when the next focus is {@link #FOCUS_UP}.\n     * @param nextFocusUpId The next focus ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusUp\n     ",
    "links" : [ "#FOCUS_UP", "#NO_ID" ]
  }, {
    "name" : "public int getNextFocusDownId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the view to use when the next focus is {@link #FOCUS_DOWN}.\n     * @return The next focus ID, or {@link #NO_ID} if the framework should decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusDown\n     ",
    "links" : [ "#FOCUS_DOWN", "#NO_ID" ]
  }, {
    "name" : "public void setNextFocusDownId(@IdRes int nextFocusDownId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the view to use when the next focus is {@link #FOCUS_DOWN}.\n     * @param nextFocusDownId The next focus ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusDown\n     ",
    "links" : [ "#FOCUS_DOWN", "#NO_ID" ]
  }, {
    "name" : "public int getNextFocusForwardId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the view to use when the next focus is {@link #FOCUS_FORWARD}.\n     * @return The next focus ID, or {@link #NO_ID} if the framework should decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusForward\n     ",
    "links" : [ "#NO_ID", "#FOCUS_FORWARD" ]
  }, {
    "name" : "public void setNextFocusForwardId(@IdRes int nextFocusForwardId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the view to use when the next focus is {@link #FOCUS_FORWARD}.\n     * @param nextFocusForwardId The next focus ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextFocusForward\n     ",
    "links" : [ "#NO_ID", "#FOCUS_FORWARD" ]
  }, {
    "name" : "public int getNextClusterForwardId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the root of the next keyboard navigation cluster.\n     * @return The next keyboard navigation cluster ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextClusterForward\n     ",
    "links" : [ "#NO_ID" ]
  }, {
    "name" : "public void setNextClusterForwardId(@IdRes int nextClusterForwardId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the view to use as the root of the next keyboard navigation cluster.\n     * @param nextClusterForwardId The next cluster ID, or {@link #NO_ID} if the framework should\n     * decide automatically.\n     *\n     * @attr ref android.R.styleable#View_nextClusterForward\n     ",
    "links" : [ "#NO_ID" ]
  }, {
    "name" : "public boolean isShown()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the visibility of this view and all of its ancestors\n     *\n     * @return True if this view and all of its ancestors are {@link #VISIBLE}\n     ",
    "links" : [ "#VISIBLE" ]
  }, {
    "name" : "protected boolean fitSystemWindows(Rect insets)",
    "returnType" : "boolean",
    "comment" : "\n     * Called by the view hierarchy when the content insets for a window have\n     * changed, to allow it to adjust its content to fit within those windows.\n     * The content insets tell you the space that the status bar, input method,\n     * and other system windows infringe on the application's window.\n     *\n     * <p>You do not normally need to deal with this function, since the default\n     * window decoration given to applications takes care of applying it to the\n     * content of the window.  If you use {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}\n     * or {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION} this will not be the case,\n     * and your content can be placed under those system elements.  You can then\n     * use this method within your view hierarchy if you have parts of your UI\n     * which you would like to ensure are not being covered.\n     *\n     * <p>The default implementation of this method simply applies the content\n     * insets to the view's padding, consuming that content (modifying the\n     * insets to be 0), and returning true.  This behavior is off by default, but can\n     * be enabled through {@link #setFitsSystemWindows(boolean)}.\n     *\n     * <p>This function's traversal down the hierarchy is depth-first.  The same content\n     * insets object is propagated down the hierarchy, so any changes made to it will\n     * be seen by all following views (including potentially ones above in\n     * the hierarchy since this is a depth-first traversal).  The first view\n     * that returns true will abort the entire traversal.\n     *\n     * <p>The default implementation works well for a situation where it is\n     * used with a container that covers the entire window, allowing it to\n     * apply the appropriate insets to its content on all edges.  If you need\n     * a more complicated layout (such as two different views fitting system\n     * windows, one on the top of the window, and one on the bottom),\n     * you can override the method and handle the insets however you would like.\n     * Note that the insets provided by the framework are always relative to the\n     * far edges of the window, not accounting for the location of the called view\n     * within that window.  (In fact when this method is called you do not yet know\n     * where the layout will place the view, as it is done before layout happens.)\n     *\n     * <p>Note: unlike many View methods, there is no dispatch phase to this\n     * call.  If you are overriding it in a ViewGroup and want to allow the\n     * call to continue to your children, you must be sure to call the super\n     * implementation.\n     *\n     * <p>Here is a sample layout that makes use of fitting system windows\n     * to have controls for a video view placed inside of the window decorations\n     * that it hides and shows.  This can be used with code like the second\n     * sample (video player) shown in {@link #setSystemUiVisibility(int)}.\n     *\n     * {@sample development/samples/ApiDemos/res/layout/video_player.xml complete}\n     *\n     * @param insets Current content insets of the window.  Prior to\n     * {@link android.os.Build.VERSION_CODES#JELLY_BEAN} you must not modify\n     * the insets or else you and Android will be unhappy.\n     *\n     * @return {@code true} if this view applied the insets and it should not\n     * continue propagating further down the hierarchy, {@code false} otherwise.\n     * @see #getFitsSystemWindows()\n     * @see #setFitsSystemWindows(boolean)\n     * @see #setSystemUiVisibility(int)\n     *\n     * @deprecated As of API 20 use {@link #dispatchApplyWindowInsets(WindowInsets)} to apply\n     * insets to views. Views should override {@link #onApplyWindowInsets(WindowInsets)} or use\n     * {@link #setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)}\n     * to implement handling their own insets.\n     ",
    "links" : [ "#onApplyWindowInsets(WindowInsets)", "#setSystemUiVisibility(int)", "#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "#dispatchApplyWindowInsets(WindowInsets)", "#setFitsSystemWindows(boolean)", "android.os.Build.VERSION_CODES#JELLY_BEAN", "#setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)" ]
  }, {
    "name" : "private boolean fitSystemWindowsInt(Rect insets)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyInsets(Rect insets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets onApplyWindowInsets(WindowInsets insets)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Called when the view should apply {@link WindowInsets} according to its internal policy.\n     *\n     * <p>This method should be overridden by views that wish to apply a policy different from or\n     * in addition to the default behavior. Clients that wish to force a view subtree\n     * to apply insets should call {@link #dispatchApplyWindowInsets(WindowInsets)}.</p>\n     *\n     * <p>Clients may supply an {@link OnApplyWindowInsetsListener} to a view. If one is set\n     * it will be called during dispatch instead of this method. The listener may optionally\n     * call this method from its own implementation if it wishes to apply the view's default\n     * insets policy in addition to its own.</p>\n     *\n     * <p>Implementations of this method should either return the insets parameter unchanged\n     * or a new {@link WindowInsets} cloned from the supplied insets with any insets consumed\n     * that this view applied itself. This allows new inset types added in future platform\n     * versions to pass through existing implementations unchanged without being erroneously\n     * consumed.</p>\n     *\n     * <p>By default if a view's {@link #setFitsSystemWindows(boolean) fitsSystemWindows}\n     * property is set then the view will consume the system window insets and apply them\n     * as padding for the view.</p>\n     *\n     * @param insets Insets to apply\n     * @return The supplied insets with any applied insets consumed\n     ",
    "links" : [ "OnApplyWindowInsetsListener", "android.view.WindowInsets", "#dispatchApplyWindowInsets(WindowInsets)", "#setFitsSystemWindows(boolean)" ]
  }, {
    "name" : "private WindowInsets onApplyFrameworkOptionalFitSystemWindows(WindowInsets insets)",
    "returnType" : "WindowInsets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnApplyWindowInsetsListener(OnApplyWindowInsetsListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set an {@link OnApplyWindowInsetsListener} to take over the policy for applying\n     * window insets to this view. The listener's\n     * {@link OnApplyWindowInsetsListener#onApplyWindowInsets(View, WindowInsets) onApplyWindowInsets}\n     * method will be called instead of the view's\n     * {@link #onApplyWindowInsets(WindowInsets) onApplyWindowInsets} method.\n     *\n     * @param listener Listener to set\n     *\n     * @see #onApplyWindowInsets(WindowInsets)\n     ",
    "links" : [ "#onApplyWindowInsets(WindowInsets)", "OnApplyWindowInsetsListener", "#onApplyWindowInsets(View" ]
  }, {
    "name" : "public WindowInsets dispatchApplyWindowInsets(WindowInsets insets)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Request to apply the given window insets to this view or another view in its subtree.\n     *\n     * <p>This method should be called by clients wishing to apply insets corresponding to areas\n     * obscured by window decorations or overlays. This can include the status and navigation bars,\n     * action bars, input methods and more. New inset categories may be added in the future.\n     * The method returns the insets provided minus any that were applied by this view or its\n     * children.</p>\n     *\n     * <p>Clients wishing to provide custom behavior should override the\n     * {@link #onApplyWindowInsets(WindowInsets)} method or alternatively provide a\n     * {@link OnApplyWindowInsetsListener} via the\n     * {@link #setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener) setOnApplyWindowInsetsListener}\n     * method.</p>\n     *\n     * <p>This method replaces the older {@link #fitSystemWindows(Rect) fitSystemWindows} method.\n     * </p>\n     *\n     * @param insets Insets to apply\n     * @return The provided insets minus the insets that were consumed\n     ",
    "links" : [ "#onApplyWindowInsets(WindowInsets)", "OnApplyWindowInsetsListener", "#setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener)", "#fitSystemWindows(Rect)" ]
  }, {
    "name" : "public void setWindowInsetsAnimationCallback(@Nullable WindowInsetsAnimation.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@link WindowInsetsAnimation.Callback} to be notified about animations of windows that\n     * cause insets.\n     * <p>\n     * The callback's {@link WindowInsetsAnimation.Callback#getDispatchMode()\n     * dispatch mode} will affect whether animation callbacks are dispatched to the children of\n     * this view.\n     * </p>\n     * @param callback The callback to set.\n     ",
    "links" : [ "WindowInsetsAnimation.Callback", "WindowInsetsAnimation.Callback#getDispatchMode()" ]
  }, {
    "name" : "public boolean hasWindowInsetsAnimationCallback()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if any {@link WindowInsetsAnimation.Callback} is registered on the view\n     *         or view tree of the sub-hierarchy {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "WindowInsetsAnimation.Callback" ]
  }, {
    "name" : "public void dispatchWindowInsetsAnimationPrepare(@NonNull WindowInsetsAnimation animation)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches {@link WindowInsetsAnimation.Callback#onPrepare(WindowInsetsAnimation)}\n     * when Window Insets animation is being prepared.\n     * @param animation current animation\n     *\n     * @see WindowInsetsAnimation.Callback#onPrepare(WindowInsetsAnimation)\n     ",
    "links" : [ "WindowInsetsAnimation.Callback#onPrepare(WindowInsetsAnimation)" ]
  }, {
    "name" : "public Bounds dispatchWindowInsetsAnimationStart(@NonNull WindowInsetsAnimation animation, @NonNull Bounds bounds)",
    "returnType" : "Bounds",
    "comment" : "\n     * Dispatches {@link WindowInsetsAnimation.Callback#onStart(WindowInsetsAnimation, Bounds)}\n     * when Window Insets animation is started.\n     * @param animation current animation\n     * @param bounds the upper and lower {@link Bounds} that provides range of\n     *  {@link WindowInsetsAnimation}.\n     * @return the upper and lower {@link Bounds}.\n     ",
    "links" : [ "WindowInsetsAnimation.Callback#onStart(WindowInsetsAnimation", "android.view.WindowInsetsAnimation", "android.view.WindowInsetsAnimation.Bounds" ]
  }, {
    "name" : "public WindowInsets dispatchWindowInsetsAnimationProgress(@NonNull WindowInsets insets, @NonNull List<WindowInsetsAnimation> runningAnimations)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Dispatches {@link WindowInsetsAnimation.Callback#onProgress(WindowInsets, List)}\n     * when Window Insets animation makes progress.\n     * @param insets The current {@link WindowInsets}.\n     * @param runningAnimations The currently running {@link WindowInsetsAnimation}s.\n     * @return current {@link WindowInsets}.\n     ",
    "links" : [ "android.view.WindowInsets", "WindowInsetsAnimation.Callback#onProgress(WindowInsets", "android.view.WindowInsetsAnimation" ]
  }, {
    "name" : "public void dispatchWindowInsetsAnimationEnd(@NonNull WindowInsetsAnimation animation)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches {@link WindowInsetsAnimation.Callback#onEnd(WindowInsetsAnimation)}\n     * when Window Insets animation ends.\n     * @param animation The current ongoing {@link WindowInsetsAnimation}.\n     ",
    "links" : [ "WindowInsetsAnimation.Callback#onEnd(WindowInsetsAnimation)", "android.view.WindowInsetsAnimation" ]
  }, {
    "name" : "public void setSystemGestureExclusionRects(@NonNull List<Rect> rects)",
    "returnType" : "void",
    "comment" : "\n     * Sets a list of areas within this view's post-layout coordinate space where the system\n     * should not intercept touch or other pointing device gestures. <em>This method should\n     * be called by {@link #onLayout(boolean, int, int, int, int)} or {@link #onDraw(Canvas)}.</em>\n     *\n     * <p>Use this to tell the system which specific sub-areas of a view need to receive gesture\n     * input in order to function correctly in the presence of global system gestures that may\n     * conflict. For example, if the system wishes to capture swipe-in-from-screen-edge gestures\n     * to provide system-level navigation functionality, a view such as a navigation drawer\n     * container can mark the left (or starting) edge of itself as requiring gesture capture\n     * priority using this API. The system may then choose to relax its own gesture recognition\n     * to allow the app to consume the user's gesture. It is not necessary for an app to register\n     * exclusion rects for broadly spanning regions such as the entirety of a\n     * <code>ScrollView</code> or for simple press and release click targets such as\n     * <code>Button</code>. Mark an exclusion rect when interacting with a view requires\n     * a precision touch gesture in a small area in either the X or Y dimension, such as\n     * an edge swipe or dragging a <code>SeekBar</code> thumb.</p>\n     *\n     * <p>Do not modify the provided list after this method is called.</p>\n     *\n     * <p>Note: the system will put a limit of <code>200dp</code> on the vertical extent of the\n     * exclusions it takes into account. The limit does not apply while the navigation\n     * bar is {@link #SYSTEM_UI_FLAG_IMMERSIVE_STICKY stickily} hidden, nor to the\n     * {@link android.inputmethodservice.InputMethodService input method} and\n     * {@link Intent#CATEGORY_HOME home activity}.\n     * </p>\n     *\n     * @param rects A list of precision gesture regions that this view needs to function correctly\n     ",
    "links" : [ "android.content.Intent#CATEGORY_HOME", "#SYSTEM_UI_FLAG_IMMERSIVE_STICKY", "#onDraw(Canvas)", "#onLayout(boolean", "android.inputmethodservice.InputMethodService" ]
  }, {
    "name" : " void postUpdateSystemGestureExclusionRects()",
    "returnType" : "void",
    "comment" : "\n     * WARNING: this can be called by a hwui worker thread, not just the UI thread!\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateSystemGestureExclusionRects()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Rect> getSystemGestureExclusionRects()",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Retrieve the list of areas within this view's post-layout coordinate space where the system\n     * should not intercept touch or other pointing device gestures.\n     *\n     * <p>Do not modify the returned list.</p>\n     *\n     * @return the list set by {@link #setSystemGestureExclusionRects(List)}\n     ",
    "links" : [ "#setSystemGestureExclusionRects(List)" ]
  }, {
    "name" : "public void getLocationInSurface(@NonNull @Size(2) int[] location)",
    "returnType" : "void",
    "comment" : "\n     * Compute the view's coordinate within the surface.\n     *\n     * <p>Computes the coordinates of this view in its surface. The argument\n     * must be an array of two integers. After the method returns, the array\n     * contains the x and y location in that order.</p>\n     *\n     * @param location an array of two integers in which to hold the coordinates\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets getRootWindowInsets()",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Provide original WindowInsets that are dispatched to the view hierarchy. The insets are\n     * only available if the view is attached.\n     *\n     * @return WindowInsets from the top of the view hierarchy or null if View is detached\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsetsController getWindowInsetsController()",
    "returnType" : "WindowInsetsController",
    "comment" : "\n     * Retrieves the single {@link WindowInsetsController} of the window this view is attached to.\n     *\n     * @return The {@link WindowInsetsController} or {@code null} if the view is neither attached to\n     *         a window nor a view tree with a decor.\n     * @see Window#getInsetsController()\n     ",
    "links" : [ "android.view.WindowInsetsController" ]
  }, {
    "name" : "protected boolean computeFitSystemWindows(Rect inoutInsets, Rect outLocalInsets)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide Compute the insets that should be consumed by this view and the ones\n     * that should propagate to those under it.\n     *\n     * Note: This is used by appcompat's ActionBarOverlayLayout through reflection.\n     *\n     * @param inoutInsets the insets given to this view\n     * @param outLocalInsets the insets that should be applied to this view\n     * @deprecated use {@link #computeSystemWindowInsets}\n     * @return\n     ",
    "links" : [ "#computeSystemWindowInsets" ]
  }, {
    "name" : "public WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Compute insets that should be consumed by this view and the ones that should propagate\n     * to those under it.\n     *\n     * @param in Insets currently being processed by this View, likely received as a parameter\n     *           to {@link #onApplyWindowInsets(WindowInsets)}.\n     * @param outLocalInsets A Rect that will receive the insets that should be consumed\n     *                       by this view\n     * @return Insets that should be passed along to views under this one\n     ",
    "links" : [ "#onApplyWindowInsets(WindowInsets)" ]
  }, {
    "name" : "public void setFitsSystemWindows(boolean fitSystemWindows)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not this view should account for system screen decorations\n     * such as the status bar and inset its content; that is, controlling whether\n     * the default implementation of {@link #fitSystemWindows(Rect)} will be\n     * executed.  See that method for more details.\n     *\n     * <p>Note that if you are providing your own implementation of\n     * {@link #fitSystemWindows(Rect)}, then there is no need to set this\n     * flag to true -- your implementation will be overriding the default\n     * implementation that checks this flag.\n     *\n     * @param fitSystemWindows If true, then the default implementation of\n     * {@link #fitSystemWindows(Rect)} will be executed.\n     *\n     * @attr ref android.R.styleable#View_fitsSystemWindows\n     * @see #getFitsSystemWindows()\n     * @see #fitSystemWindows(Rect)\n     * @see #setSystemUiVisibility(int)\n     ",
    "links" : [ "#fitSystemWindows(Rect)" ]
  }, {
    "name" : "public boolean getFitsSystemWindows()",
    "returnType" : "boolean",
    "comment" : "\n     * Check for state of {@link #setFitsSystemWindows(boolean)}. If this method\n     * returns {@code true}, the default implementation of {@link #fitSystemWindows(Rect)}\n     * will be executed.\n     *\n     * @return {@code true} if the default implementation of\n     * {@link #fitSystemWindows(Rect)} will be executed.\n     *\n     * @attr ref android.R.styleable#View_fitsSystemWindows\n     * @see #setFitsSystemWindows(boolean)\n     * @see #fitSystemWindows(Rect)\n     * @see #setSystemUiVisibility(int)\n     ",
    "links" : [ "#setFitsSystemWindows(boolean)", "#fitSystemWindows(Rect)" ]
  }, {
    "name" : "public boolean fitsSystemWindows()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void requestFitSystemWindows()",
    "returnType" : "void",
    "comment" : "\n     * Ask that a new dispatch of {@link #fitSystemWindows(Rect)} be performed.\n     * @deprecated Use {@link #requestApplyInsets()} for newer platform versions.\n     ",
    "links" : [ "#requestApplyInsets()", "#fitSystemWindows(Rect)" ]
  }, {
    "name" : "public void requestApplyInsets()",
    "returnType" : "void",
    "comment" : "\n     * Ask that a new dispatch of {@link #onApplyWindowInsets(WindowInsets)} be performed.\n     ",
    "links" : [ "#onApplyWindowInsets(WindowInsets)" ]
  }, {
    "name" : "public void makeOptionalFitsSystemWindows()",
    "returnType" : "void",
    "comment" : "\n     * @see #OPTIONAL_FITS_SYSTEM_WINDOWS\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeFrameworkOptionalFitsSystemWindows()",
    "returnType" : "void",
    "comment" : "\n     * @see #PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrameworkOptionalFitsSystemWindows()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVisibility()",
    "returnType" : "int",
    "comment" : "\n     * Returns the visibility status for this view.\n     *\n     * @return One of {@link #VISIBLE}, {@link #INVISIBLE}, or {@link #GONE}.\n     * @attr ref android.R.styleable#View_visibility\n     ",
    "links" : [ "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : "public void setVisibility(@Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Set the visibility state of this view.\n     *\n     * @param visibility One of {@link #VISIBLE}, {@link #INVISIBLE}, or {@link #GONE}.\n     * @attr ref android.R.styleable#View_visibility\n     ",
    "links" : [ "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the enabled status for this view. The interpretation of the\n     * enabled state varies by subclass.\n     *\n     * @return True if this view is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set the enabled state of this view. The interpretation of the enabled\n     * state varies by subclass.\n     *\n     * @param enabled True if this view is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFocusable(boolean focusable)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this view can receive the focus.\n     * <p>\n     * Setting this to false will also ensure that this view is not focusable\n     * in touch mode.\n     *\n     * @param focusable If true, this view can receive the focus.\n     *\n     * @see #setFocusableInTouchMode(boolean)\n     * @see #setFocusable(int)\n     * @attr ref android.R.styleable#View_focusable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFocusable(@Focusable int focusable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this view can receive focus.\n     * <p>\n     * Setting this to {@link #FOCUSABLE_AUTO} tells the framework to determine focusability\n     * automatically based on the view's interactivity. This is the default.\n     * <p>\n     * Setting this to NOT_FOCUSABLE will ensure that this view is also not focusable\n     * in touch mode.\n     *\n     * @param focusable One of {@link #NOT_FOCUSABLE}, {@link #FOCUSABLE},\n     *                  or {@link #FOCUSABLE_AUTO}.\n     * @see #setFocusableInTouchMode(boolean)\n     * @attr ref android.R.styleable#View_focusable\n     ",
    "links" : [ "#FOCUSABLE", "#NOT_FOCUSABLE", "#FOCUSABLE_AUTO" ]
  }, {
    "name" : "public void setFocusableInTouchMode(boolean focusableInTouchMode)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this view can receive focus while in touch mode.\n     *\n     * Setting this to true will also ensure that this view is focusable.\n     *\n     * @param focusableInTouchMode If true, this view can receive the focus while\n     *   in touch mode.\n     *\n     * @see #setFocusable(boolean)\n     * @attr ref android.R.styleable#View_focusableInTouchMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillHints(@Nullable String... autofillHints)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hints that help an {@link android.service.autofill.AutofillService} determine how\n     * to autofill the view with the user's data.\n     *\n     * <p>Typically, there is only one way to autofill a view, but there could be more than one.\n     * For example, if the application accepts either an username or email address to identify\n     * an user.\n     *\n     * <p>These hints are not validated by the Android System, but passed \"as is\" to the service.\n     * Hence, they can have any value, but it's recommended to use the {@code AUTOFILL_HINT_}\n     * constants such as:\n     * {@link #AUTOFILL_HINT_USERNAME}, {@link #AUTOFILL_HINT_PASSWORD},\n     * {@link #AUTOFILL_HINT_EMAIL_ADDRESS},\n     * {@link #AUTOFILL_HINT_NAME},\n     * {@link #AUTOFILL_HINT_PHONE},\n     * {@link #AUTOFILL_HINT_POSTAL_ADDRESS}, {@link #AUTOFILL_HINT_POSTAL_CODE},\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_NUMBER}, {@link #AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE},\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE},\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY},\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH} or\n     * {@link #AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR}.\n     *\n     * @param autofillHints The autofill hints to set. If the array is emtpy, {@code null} is set.\n     * @attr ref android.R.styleable#View_autofillHints\n     ",
    "links" : [ "#AUTOFILL_HINT_EMAIL_ADDRESS", "#AUTOFILL_HINT_USERNAME", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR", "#AUTOFILL_HINT_CREDIT_CARD_NUMBER", "#AUTOFILL_HINT_PHONE", "#AUTOFILL_HINT_POSTAL_CODE", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE", "#AUTOFILL_HINT_PASSWORD", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY", "#AUTOFILL_HINT_POSTAL_ADDRESS", "#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH", "android.service.autofill.AutofillService", "#AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE", "#AUTOFILL_HINT_NAME" ]
  }, {
    "name" : "public void setAutofilled(boolean isAutofilled, boolean hideHighlight)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSoundEffectsEnabled(boolean soundEffectsEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this view should have sound effects enabled for events such as\n     * clicking and touching.\n     *\n     * <p>You may wish to disable sound effects for a view if you already play sounds,\n     * for instance, a dial key that plays dtmf tones.\n     *\n     * @param soundEffectsEnabled whether sound effects are enabled for this view.\n     * @see #isSoundEffectsEnabled()\n     * @see #playSoundEffect(int)\n     * @attr ref android.R.styleable#View_soundEffectsEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSoundEffectsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this view should have sound effects enabled for events such as\n     *     clicking and touching.\n     *\n     * @see #setSoundEffectsEnabled(boolean)\n     * @see #playSoundEffect(int)\n     * @attr ref android.R.styleable#View_soundEffectsEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this view should have haptic feedback for events such as\n     * long presses.\n     *\n     * <p>You may wish to disable haptic feedback if your view already controls\n     * its own haptic feedback.\n     *\n     * @param hapticFeedbackEnabled whether haptic feedback enabled for this view.\n     * @see #isHapticFeedbackEnabled()\n     * @see #performHapticFeedback(int)\n     * @attr ref android.R.styleable#View_hapticFeedbackEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHapticFeedbackEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this view should have haptic feedback enabled for events\n     * long presses.\n     *\n     * @see #setHapticFeedbackEnabled(boolean)\n     * @see #performHapticFeedback(int)\n     * @attr ref android.R.styleable#View_hapticFeedbackEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawLayoutDirection()",
    "returnType" : "int",
    "comment" : "\n     * Returns the layout direction for this view.\n     *\n     * @return One of {@link #LAYOUT_DIRECTION_LTR},\n     *   {@link #LAYOUT_DIRECTION_RTL},\n     *   {@link #LAYOUT_DIRECTION_INHERIT} or\n     *   {@link #LAYOUT_DIRECTION_LOCALE}.\n     *\n     * @attr ref android.R.styleable#View_layoutDirection\n     *\n     * @hide\n     ",
    "links" : [ "#LAYOUT_DIRECTION_INHERIT", "#LAYOUT_DIRECTION_LOCALE", "#LAYOUT_DIRECTION_LTR", "#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public void setLayoutDirection(@LayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * Set the layout direction for this view. This will propagate a reset of layout direction\n     * resolution to the view's children and resolve layout direction for this view.\n     *\n     * @param layoutDirection the layout direction to set. Should be one of:\n     *\n     * {@link #LAYOUT_DIRECTION_LTR},\n     * {@link #LAYOUT_DIRECTION_RTL},\n     * {@link #LAYOUT_DIRECTION_INHERIT},\n     * {@link #LAYOUT_DIRECTION_LOCALE}.\n     *\n     * Resolution will be done if the value is set to LAYOUT_DIRECTION_INHERIT. The resolution\n     * proceeds up the parent chain of the view to get the value. If there is no parent, then it\n     * will return the default {@link #LAYOUT_DIRECTION_LTR}.\n     *\n     * @attr ref android.R.styleable#View_layoutDirection\n     ",
    "links" : [ "#LAYOUT_DIRECTION_INHERIT", "#LAYOUT_DIRECTION_LOCALE", "#LAYOUT_DIRECTION_LTR", "#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public int getLayoutDirection()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resolved layout direction for this view.\n     *\n     * @return {@link #LAYOUT_DIRECTION_RTL} if the layout direction is RTL or returns\n     * {@link #LAYOUT_DIRECTION_LTR} if the layout direction is not RTL.\n     *\n     * For compatibility, this will return {@link #LAYOUT_DIRECTION_LTR} if API version\n     * is lower than {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}.\n     *\n     * @attr ref android.R.styleable#View_layoutDirection\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#LAYOUT_DIRECTION_RTL", "#LAYOUT_DIRECTION_LTR" ]
  }, {
    "name" : "public boolean isLayoutRtl()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether or not this view's layout is right-to-left. This is resolved from\n     * layout attribute and/or the inherited value from the parent\n     *\n     * @return true if the layout is right-to-left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTransientState()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the view is currently tracking transient state that the\n     * app should not need to concern itself with saving and restoring, but that\n     * the framework should take special note to preserve when possible.\n     *\n     * <p>A view with transient state cannot be trivially rebound from an external\n     * data source, such as an adapter binding item views in a list. This may be\n     * because the view is performing an animation, tracking user selection\n     * of content, or similar.</p>\n     *\n     * @return true if the view has transient state\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHasTransientState(boolean hasTransientState)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this view is currently tracking transient state that the\n     * framework should attempt to preserve when possible. This flag is reference counted,\n     * so every call to setHasTransientState(true) should be paired with a later call\n     * to setHasTransientState(false).\n     *\n     * <p>A view with transient state cannot be trivially rebound from an external\n     * data source, such as an adapter binding item views in a list. This may be\n     * because the view is performing an animation, tracking user selection\n     * of content, or similar.</p>\n     *\n     * @param hasTransientState true if this view has transient state\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAttachedToWindow()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view is currently attached to a window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLaidOut()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view has been through at least one layout since it\n     * was last attached to or detached from a window.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isLayoutValid()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if laid-out and not about to do another layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWillNotDraw(boolean willNotDraw)",
    "returnType" : "void",
    "comment" : "\n     * If this view doesn't do any drawing on its own, set this flag to\n     * allow further optimizations. By default, this flag is not set on\n     * View, but could be set on some View subclasses such as ViewGroup.\n     *\n     * Typically, if you override {@link #onDraw(android.graphics.Canvas)}\n     * you should clear this flag.\n     *\n     * @param willNotDraw whether or not this View draw on its own\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)" ]
  }, {
    "name" : "public boolean willNotDraw()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this View draws on its own.\n     *\n     * @return true if this view has nothing to draw, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWillNotCacheDrawing(boolean willNotCacheDrawing)",
    "returnType" : "void",
    "comment" : "\n     * When a View's drawing cache is enabled, drawing is redirected to an\n     * offscreen bitmap. Some views, like an ImageView, must be able to\n     * bypass this mechanism if they already draw a single bitmap, to avoid\n     * unnecessary usage of the memory.\n     *\n     * @param willNotCacheDrawing true if this view does not cache its\n     *        drawing, false otherwise\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public boolean willNotCacheDrawing()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this View can cache its drawing or not.\n     *\n     * @return true if this view does not cache its drawing, false otherwise\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public boolean isClickable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this view reacts to click events or not.\n     *\n     * @return true if the view is clickable, false otherwise\n     *\n     * @see #setClickable(boolean)\n     * @attr ref android.R.styleable#View_clickable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClickable(boolean clickable)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables click events for this view. When a view\n     * is clickable it will change its state to \"pressed\" on every click.\n     * Subclasses should set the view clickable to visually react to\n     * user's clicks.\n     *\n     * @param clickable true to make the view clickable, false otherwise\n     *\n     * @see #isClickable()\n     * @attr ref android.R.styleable#View_clickable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLongClickable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this view reacts to long click events or not.\n     *\n     * @return true if the view is long clickable, false otherwise\n     *\n     * @see #setLongClickable(boolean)\n     * @attr ref android.R.styleable#View_longClickable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLongClickable(boolean longClickable)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables long click events for this view. When a view is long\n     * clickable it reacts to the user holding down the button for a longer\n     * duration than a tap. This event can either launch the listener or a\n     * context menu.\n     *\n     * @param longClickable true to make the view long clickable, false otherwise\n     * @see #isLongClickable()\n     * @attr ref android.R.styleable#View_longClickable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isContextClickable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this view reacts to context clicks or not.\n     *\n     * @return true if the view is context clickable, false otherwise\n     * @see #setContextClickable(boolean)\n     * @attr ref android.R.styleable#View_contextClickable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContextClickable(boolean contextClickable)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables context clicking for this view. This event can launch the listener.\n     *\n     * @param contextClickable true to make the view react to a context click, false otherwise\n     * @see #isContextClickable()\n     * @attr ref android.R.styleable#View_contextClickable\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setPressed(boolean pressed, float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pressed state for this view and provides a touch coordinate for\n     * animation hinting.\n     *\n     * @param pressed Pass true to set the View's internal state to \"pressed\",\n     *            or false to reverts the View's internal state from a\n     *            previously set \"pressed\" state.\n     * @param x The x coordinate of the touch that caused the press\n     * @param y The y coordinate of the touch that caused the press\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPressed(boolean pressed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pressed state for this view.\n     *\n     * @see #isClickable()\n     * @see #setClickable(boolean)\n     *\n     * @param pressed Pass true to set the View's internal state to \"pressed\", or false to reverts\n     *        the View's internal state from a previously set \"pressed\" state.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSetPressed(boolean pressed)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch setPressed to all of this View's children.\n     *\n     * @see #setPressed(boolean)\n     *\n     * @param pressed The new pressed state\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the view is currently in pressed state. Unless\n     * {@link #setPressed(boolean)} is explicitly called, only clickable views can enter\n     * the pressed state.\n     *\n     * @see #setPressed(boolean)\n     * @see #isClickable()\n     * @see #setClickable(boolean)\n     *\n     * @return true if the view is currently pressed, false otherwise\n     ",
    "links" : [ "#setPressed(boolean)" ]
  }, {
    "name" : "public boolean isAssistBlocked()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Indicates whether this view will participate in data collection through\n     * {@link ViewStructure}.  If true, it will not provide any data\n     * for itself or its children.  If false, the normal data collection will be allowed.\n     *\n     * @return Returns false if assist data collection is not blocked, else true.\n     *\n     * @see #setAssistBlocked(boolean)\n     * @attr ref android.R.styleable#View_assistBlocked\n     ",
    "links" : [ "android.view.ViewStructure" ]
  }, {
    "name" : "public void setAssistBlocked(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Controls whether assist data collection from this view and its children is enabled\n     * (that is, whether {@link #onProvideStructure} and\n     * {@link #onProvideVirtualStructure} will be called).  The default value is false,\n     * allowing normal assist collection.  Setting this to false will disable assist collection.\n     *\n     * @param enabled Set to true to <em>disable</em> assist data collection, or false\n     * (the default) to allow it.\n     *\n     * @see #isAssistBlocked()\n     * @see #onProvideStructure\n     * @see #onProvideVirtualStructure\n     * @attr ref android.R.styleable#View_assistBlocked\n     ",
    "links" : [ "#onProvideVirtualStructure", "#onProvideStructure" ]
  }, {
    "name" : "public boolean isSaveEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this view will save its state (that is,\n     * whether its {@link #onSaveInstanceState} method will be called).\n     *\n     * @return Returns true if the view state saving is enabled, else false.\n     *\n     * @see #setSaveEnabled(boolean)\n     * @attr ref android.R.styleable#View_saveEnabled\n     ",
    "links" : [ "#onSaveInstanceState" ]
  }, {
    "name" : "public void setSaveEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether the saving of this view's state is\n     * enabled (that is, whether its {@link #onSaveInstanceState} method\n     * will be called).  Note that even if freezing is enabled, the\n     * view still must have an id assigned to it (via {@link #setId(int)})\n     * for its state to be saved.  This flag can only disable the\n     * saving of this view; any child views may still have their state saved.\n     *\n     * @param enabled Set to false to <em>disable</em> state saving, or true\n     * (the default) to allow it.\n     *\n     * @see #isSaveEnabled()\n     * @see #setId(int)\n     * @see #onSaveInstanceState()\n     * @attr ref android.R.styleable#View_saveEnabled\n     ",
    "links" : [ "#setId(int)", "#onSaveInstanceState" ]
  }, {
    "name" : "public boolean getFilterTouchesWhenObscured()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the framework should discard touches when the view's\n     * window is obscured by another visible window.\n     * Refer to the {@link View} security documentation for more details.\n     *\n     * @return True if touch filtering is enabled.\n     *\n     * @see #setFilterTouchesWhenObscured(boolean)\n     * @attr ref android.R.styleable#View_filterTouchesWhenObscured\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public void setFilterTouchesWhenObscured(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the framework should discard touches when the view's\n     * window is obscured by another visible window.\n     * Refer to the {@link View} security documentation for more details.\n     *\n     * @param enabled True if touch filtering should be enabled.\n     *\n     * @see #getFilterTouchesWhenObscured\n     * @attr ref android.R.styleable#View_filterTouchesWhenObscured\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public boolean isSaveFromParentEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the entire hierarchy under this view will save its\n     * state when a state saving traversal occurs from its parent.  The default\n     * is true; if false, these views will not be saved unless\n     * {@link #saveHierarchyState(SparseArray)} is called directly on this view.\n     *\n     * @return Returns true if the view state saving from parent is enabled, else false.\n     *\n     * @see #setSaveFromParentEnabled(boolean)\n     ",
    "links" : [ "#saveHierarchyState(SparseArray)" ]
  }, {
    "name" : "public void setSaveFromParentEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether the entire hierarchy under this view will save its\n     * state when a state saving traversal occurs from its parent.  The default\n     * is true; if false, these views will not be saved unless\n     * {@link #saveHierarchyState(SparseArray)} is called directly on this view.\n     *\n     * @param enabled Set to false to <em>disable</em> state saving, or true\n     * (the default) to allow it.\n     *\n     * @see #isSaveFromParentEnabled()\n     * @see #setId(int)\n     * @see #onSaveInstanceState()\n     ",
    "links" : [ "#saveHierarchyState(SparseArray)" ]
  }, {
    "name" : "public final boolean isFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this View is currently able to take focus.\n     *\n     * @return True if this view can take focus, or false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFocusable()",
    "returnType" : "int",
    "comment" : "\n     * Returns the focusable setting for this view.\n     *\n     * @return One of {@link #NOT_FOCUSABLE}, {@link #FOCUSABLE}, or {@link #FOCUSABLE_AUTO}.\n     * @attr ref android.R.styleable#View_focusable\n     ",
    "links" : [ "#FOCUSABLE", "#NOT_FOCUSABLE", "#FOCUSABLE_AUTO" ]
  }, {
    "name" : "public final boolean isFocusableInTouchMode()",
    "returnType" : "boolean",
    "comment" : "\n     * When a view is focusable, it may not want to take focus when in touch mode.\n     * For example, a button would like focus when the user is navigating via a D-pad\n     * so that the user can click on it, but once the user starts touching the screen,\n     * the button shouldn't take focus\n     * @return Whether the view is focusable in touch mode.\n     * @attr ref android.R.styleable#View_focusableInTouchMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenReaderFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the view should be treated as a focusable unit by screen reader\n     * accessibility tools.\n     * @see #setScreenReaderFocusable(boolean)\n     *\n     * @return Whether the view should be treated as a focusable unit by screen reader.\n     *\n     * @attr ref android.R.styleable#View_screenReaderFocusable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScreenReaderFocusable(boolean screenReaderFocusable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this View should be a focusable element for screen readers\n     * and include non-focusable Views from its subtree when providing feedback.\n     * <p>\n     * Note: this is similar to using <a href=\"#attr_android:focusable\">{@code android:focusable},\n     * but does not impact input focus behavior.\n     *\n     * @param screenReaderFocusable Whether the view should be treated as a unit by screen reader\n     *                              accessibility tools.\n     *\n     * @attr ref android.R.styleable#View_screenReaderFocusable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilityHeading()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this view is a heading for accessibility purposes.\n     *\n     * @return {@code true} if the view is a heading, {@code false} otherwise.\n     *\n     * @attr ref android.R.styleable#View_accessibilityHeading\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityHeading(boolean isHeading)",
    "returnType" : "void",
    "comment" : "\n     * Set if view is a heading for a section of content for accessibility purposes.\n     *\n     * @param isHeading {@code true} if the view is a heading, {@code false} otherwise.\n     *\n     * @attr ref android.R.styleable#View_accessibilityHeading\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updatePflags3AndNotifyA11yIfChanged(int mask, boolean newValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View focusSearch(@FocusRealDirection int direction)",
    "returnType" : "View",
    "comment" : "\n     * Find the nearest view in the specified direction that can take focus.\n     * This does not actually give focus to that view.\n     *\n     * @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT\n     *\n     * @return The nearest focusable in the specified direction, or null if none\n     *         can be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isKeyboardNavigationCluster()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this View is a root of a keyboard navigation cluster.\n     *\n     * @return True if this view is a root of a cluster, or false otherwise.\n     * @attr ref android.R.styleable#View_keyboardNavigationCluster\n     ",
    "links" : [ ]
  }, {
    "name" : " View findKeyboardNavigationCluster()",
    "returnType" : "View",
    "comment" : "\n     * Searches up the view hierarchy to find the top-most cluster. All deeper/nested clusters\n     * will be ignored.\n     *\n     * @return the keyboard navigation cluster that this view is in (can be this view)\n     *         or {@code null} if not in one\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setKeyboardNavigationCluster(boolean isCluster)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this view is a root of a keyboard navigation cluster.\n     *\n     * @param isCluster If true, this view is a root of a cluster.\n     *\n     * @attr ref android.R.styleable#View_keyboardNavigationCluster\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setFocusedInCluster()",
    "returnType" : "void",
    "comment" : "\n     * Sets this View as the one which receives focus the next time cluster navigation jumps\n     * to the cluster containing this View. This does NOT change focus even if the cluster\n     * containing this view is current.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setFocusedInCluster(View cluster)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateFocusedInCluster(View oldFocus, @FocusDirection int direction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFocusedByDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this View should receive focus when the focus is restored for the view\n     * hierarchy containing this view.\n     * <p>\n     * Focus gets restored for a view hierarchy when the root of the hierarchy gets added to a\n     * window or serves as a target of cluster navigation.\n     *\n     * @see #restoreDefaultFocus()\n     *\n     * @return {@code true} if this view is the default-focus view, {@code false} otherwise\n     * @attr ref android.R.styleable#View_focusedByDefault\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFocusedByDefault(boolean isFocusedByDefault)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this View should receive focus when the focus is restored for the view\n     * hierarchy containing this view.\n     * <p>\n     * Focus gets restored for a view hierarchy when the root of the hierarchy gets added to a\n     * window or serves as a target of cluster navigation.\n     *\n     * @param isFocusedByDefault {@code true} to set this view as the default-focus view,\n     *                           {@code false} otherwise.\n     *\n     * @see #restoreDefaultFocus()\n     *\n     * @attr ref android.R.styleable#View_focusedByDefault\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasDefaultFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the view hierarchy with this view as a root contain a default-focus view.\n     *\n     * @return {@code true} if this view has default focus, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public View keyboardNavigationClusterSearch(View currentCluster, @FocusDirection int direction)",
    "returnType" : "View",
    "comment" : "\n     * Find the nearest keyboard navigation cluster in the specified direction.\n     * This does not actually give focus to that cluster.\n     *\n     * @param currentCluster The starting point of the search. Null means the current cluster is not\n     *                       found yet\n     * @param direction Direction to look\n     *\n     * @return The nearest keyboard navigation cluster in the specified direction, or null if none\n     *         can be found\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchUnhandledMove(View focused, @FocusRealDirection int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * This method is the last chance for the focused view and its ancestors to\n     * respond to an arrow key. This is called when the focused view did not\n     * consume the key internally, nor could the view system find a new view in\n     * the requested direction to give focus to.\n     *\n     * @param focused The currently focused view.\n     * @param direction The direction focus wants to move. One of FOCUS_UP,\n     *        FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT.\n     * @return True if the this view consumed this unhandled move.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this View should use a default focus highlight when it gets focused but doesn't\n     * have {@link android.R.attr#state_focused} defined in its background.\n     *\n     * @param defaultFocusHighlightEnabled {@code true} to set this view to use a default focus\n     *                                      highlight, {@code false} otherwise.\n     *\n     * @attr ref android.R.styleable#View_defaultFocusHighlightEnabled\n     ",
    "links" : [ "android.R.attr#state_focused" ]
  }, {
    "name" : "public final boolean getDefaultFocusHighlightEnabled()",
    "returnType" : "boolean",
    "comment" : "\n\n    /**\n     * Returns whether this View should use a default focus highlight when it gets focused but\n     * doesn't have {@link android.R.attr#state_focused} defined in its background.\n     *\n     * @return True if this View should use a default focus highlight.\n     * @attr ref android.R.styleable#View_defaultFocusHighlightEnabled\n     ",
    "links" : [ "android.R.attr#state_focused" ]
  }, {
    "name" : " View findUserSetNextFocus(View root, @FocusDirection int direction)",
    "returnType" : "View",
    "comment" : "\n     * If a user manually specified the next view id for a particular direction,\n     * use the root to look up the view.\n     * @param root The root view of the hierarchy containing this view.\n     * @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT, FOCUS_FORWARD,\n     * or FOCUS_BACKWARD.\n     * @return The user specified next view, or null if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : " View findUserSetNextKeyboardNavigationCluster(View root, @FocusDirection int direction)",
    "returnType" : "View",
    "comment" : "\n     * If a user manually specified the next keyboard-navigation cluster for a particular direction,\n     * use the root to look up the view.\n     *\n     * @param root the root view of the hierarchy containing this view\n     * @param direction {@link #FOCUS_FORWARD} or {@link #FOCUS_BACKWARD}\n     * @return the user-specified next cluster, or {@code null} if there is none\n     ",
    "links" : [ "#FOCUS_BACKWARD", "#FOCUS_FORWARD" ]
  }, {
    "name" : "private View findViewInsideOutShouldExist(View root, int id)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findViewInsideOutShouldExist(View root, View start, int id)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<View> getFocusables(@FocusDirection int direction)",
    "returnType" : "ArrayList<View>",
    "comment" : "\n     * Find and return all focusable views that are descendants of this view,\n     * possibly including this view if it is focusable itself.\n     *\n     * @param direction The direction of the focus\n     * @return A list of focusable views\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFocusables(ArrayList<View> views, @FocusDirection int direction)",
    "returnType" : "void",
    "comment" : "\n     * Add any focusable views that are descendants of this view (possibly\n     * including this view if it is focusable itself) to views.  If we are in touch mode,\n     * only add views that are also focusable in touch mode.\n     *\n     * @param views Focusable views found so far\n     * @param direction The direction of the focus\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFocusables(ArrayList<View> views, @FocusDirection int direction, @FocusableMode int focusableMode)",
    "returnType" : "void",
    "comment" : "\n     * Adds any focusable views that are descendants of this view (possibly\n     * including this view if it is focusable itself) to views. This method\n     * adds all focusable views regardless if we are in touch mode or\n     * only views focusable in touch mode if we are in touch mode or\n     * only views that can take accessibility focus if accessibility is enabled\n     * depending on the focusable mode parameter.\n     *\n     * @param views Focusable views found so far or null if all we are interested is\n     *        the number of focusables.\n     * @param direction The direction of the focus.\n     * @param focusableMode The type of focusables to be added.\n     *\n     * @see #FOCUSABLES_ALL\n     * @see #FOCUSABLES_TOUCH_MODE\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addKeyboardNavigationClusters(@NonNull Collection<View> views, int direction)",
    "returnType" : "void",
    "comment" : "\n     * Adds any keyboard navigation cluster roots that are descendants of this view (possibly\n     * including this view if it is a cluster root itself) to views.\n     *\n     * @param views Keyboard navigation cluster roots found so far\n     * @param direction Direction to look\n     ",
    "links" : [ ]
  }, {
    "name" : "public void findViewsWithText(ArrayList<View> outViews, CharSequence searched, @FindViewFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Finds the Views that contain given text. The containment is case insensitive.\n     * The search is performed by either the text that the View renders or the content\n     * description that describes the view for accessibility purposes and the view does\n     * not render or both. Clients can specify how the search is to be performed via\n     * passing the {@link #FIND_VIEWS_WITH_TEXT} and\n     * {@link #FIND_VIEWS_WITH_CONTENT_DESCRIPTION} flags.\n     *\n     * @param outViews The output list of matching Views.\n     * @param searched The text to match against.\n     *\n     * @see #FIND_VIEWS_WITH_TEXT\n     * @see #FIND_VIEWS_WITH_CONTENT_DESCRIPTION\n     * @see #setContentDescription(CharSequence)\n     ",
    "links" : [ "#FIND_VIEWS_WITH_TEXT", "#FIND_VIEWS_WITH_CONTENT_DESCRIPTION" ]
  }, {
    "name" : "public ArrayList<View> getTouchables()",
    "returnType" : "ArrayList<View>",
    "comment" : "\n     * Find and return all touchable views that are descendants of this view,\n     * possibly including this view if it is touchable itself.\n     *\n     * @return A list of touchable views\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addTouchables(ArrayList<View> views)",
    "returnType" : "void",
    "comment" : "\n     * Add any touchable views that are descendants of this view (possibly\n     * including this view if it is touchable itself) to views.\n     *\n     * @param views Touchable views found so far\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilityFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this View is accessibility focused.\n     *\n     * @return True if this View is accessibility focused.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestAccessibilityFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Call this to try to give accessibility focus to this view.\n     *\n     * A view will not actually take focus if {@link AccessibilityManager#isEnabled()}\n     * returns false or the view is no visible or the view already has accessibility\n     * focus.\n     *\n     * See also {@link #focusSearch(int)}, which is what you call to say that you\n     * have focus, and you want your parent to look for the next one.\n     *\n     * @return Whether this view actually took accessibility focus.\n     *\n     * @hide\n     ",
    "links" : [ "#focusSearch(int)", "android.view.accessibility.AccessibilityManager#isEnabled()" ]
  }, {
    "name" : "public void clearAccessibilityFocus()",
    "returnType" : "void",
    "comment" : "\n     * Call this to try to clear accessibility focus of this view.\n     *\n     * See also {@link #focusSearch(int)}, which is what you call to say that you\n     * have focus, and you want your parent to look for the next one.\n     *\n     * @hide\n     ",
    "links" : [ "#focusSearch(int)" ]
  }, {
    "name" : "private void sendAccessibilityHoverEvent(int eventType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void clearAccessibilityFocusNoCallbacks(int action)",
    "returnType" : "void",
    "comment" : "\n     * Clears accessibility focus without calling any callback methods\n     * normally invoked in {@link #clearAccessibilityFocus()}. This method\n     * is used separately from that one for clearing accessibility focus when\n     * giving this focus to another view.\n     *\n     * @param action The action, if any, that led to focus being cleared. Set to\n     * AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS to specify that focus is moving within\n     * the window.\n     ",
    "links" : [ "#clearAccessibilityFocus()" ]
  }, {
    "name" : "public final boolean requestFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Call this to try to give focus to a specific view or to one of its\n     * descendants.\n     *\n     * A view will not actually take focus if it is not focusable ({@link #isFocusable} returns\n     * false), or if it can't be focused due to other conditions (not focusable in touch mode\n     * ({@link #isFocusableInTouchMode}) while the device is in touch mode, not visible, not\n     * enabled, or has no size).\n     *\n     * See also {@link #focusSearch(int)}, which is what you call to say that you\n     * have focus, and you want your parent to look for the next one.\n     *\n     * This is equivalent to calling {@link #requestFocus(int, Rect)} with arguments\n     * {@link #FOCUS_DOWN} and <code>null</code>.\n     *\n     * @return Whether this view or one of its descendants actually took focus.\n     ",
    "links" : [ "#requestFocus(int", "#FOCUS_DOWN", "#isFocusable", "#focusSearch(int)", "#isFocusableInTouchMode" ]
  }, {
    "name" : "public boolean restoreFocusInCluster(@FocusRealDirection int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * This will request focus for whichever View was last focused within this\n     * cluster before a focus-jump out of it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean restoreFocusNotInCluster()",
    "returnType" : "boolean",
    "comment" : "\n     * This will request focus for whichever View not in a cluster was last focused before a\n     * focus-jump to a cluster. If no non-cluster View has previously had focus, this will focus\n     * the \"first\" focusable view it finds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean restoreDefaultFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Gives focus to the default-focus view in the view hierarchy that has this view as a root.\n     * If the default-focus view cannot be found, falls back to calling {@link #requestFocus(int)}.\n     *\n     * @return Whether this view or one of its descendants actually took focus\n     ",
    "links" : [ "#requestFocus(int)" ]
  }, {
    "name" : "public final boolean requestFocus(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Call this to try to give focus to a specific view or to one of its\n     * descendants and give it a hint about what direction focus is heading.\n     *\n     * A view will not actually take focus if it is not focusable ({@link #isFocusable} returns\n     * false), or if it is focusable and it is not focusable in touch mode\n     * ({@link #isFocusableInTouchMode}) while the device is in touch mode.\n     *\n     * See also {@link #focusSearch(int)}, which is what you call to say that you\n     * have focus, and you want your parent to look for the next one.\n     *\n     * This is equivalent to calling {@link #requestFocus(int, Rect)} with\n     * <code>null</code> set for the previously focused rectangle.\n     *\n     * @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT\n     * @return Whether this view or one of its descendants actually took focus.\n     ",
    "links" : [ "#requestFocus(int", "#isFocusable", "#focusSearch(int)", "#isFocusableInTouchMode" ]
  }, {
    "name" : "public boolean requestFocus(int direction, Rect previouslyFocusedRect)",
    "returnType" : "boolean",
    "comment" : "\n     * Call this to try to give focus to a specific view or to one of its descendants\n     * and give it hints about the direction and a specific rectangle that the focus\n     * is coming from.  The rectangle can help give larger views a finer grained hint\n     * about where focus is coming from, and therefore, where to show selection, or\n     * forward focus change internally.\n     *\n     * A view will not actually take focus if it is not focusable ({@link #isFocusable} returns\n     * false), or if it is focusable and it is not focusable in touch mode\n     * ({@link #isFocusableInTouchMode}) while the device is in touch mode.\n     *\n     * A View will not take focus if it is not visible.\n     *\n     * A View will not take focus if one of its parents has\n     * {@link android.view.ViewGroup#getDescendantFocusability()} equal to\n     * {@link ViewGroup#FOCUS_BLOCK_DESCENDANTS}.\n     *\n     * See also {@link #focusSearch(int)}, which is what you call to say that you\n     * have focus, and you want your parent to look for the next one.\n     *\n     * You may wish to override this method if your custom {@link View} has an internal\n     * {@link View} that it wishes to forward the request to.\n     *\n     * @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT\n     * @param previouslyFocusedRect The rectangle (in this View's coordinate system)\n     *        to give a finer grained hint about where focus is coming from.  May be null\n     *        if there is no hint.\n     * @return Whether this view or one of its descendants actually took focus.\n     ",
    "links" : [ "android.view.ViewGroup#FOCUS_BLOCK_DESCENDANTS", "android.view.View", "#isFocusable", "#focusSearch(int)", "android.view.ViewGroup#getDescendantFocusability()", "#isFocusableInTouchMode" ]
  }, {
    "name" : "private boolean requestFocusNoSearch(int direction, Rect previouslyFocusedRect)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void clearParentsWantFocus()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean requestFocusFromTouch()",
    "returnType" : "boolean",
    "comment" : "\n     * Call this to try to give focus to a specific view or to one of its descendants. This is a\n     * special variant of {@link #requestFocus() } that will allow views that are not focusable in\n     * touch mode to request focus when they are touched.\n     *\n     * @return Whether this view or one of its descendants actually took focus.\n     *\n     * @see #isInTouchMode()\n     *\n     ",
    "links" : [ "#requestFocus()" ]
  }, {
    "name" : "private boolean hasAncestorThatBlocksDescendantFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether any ancestor of this view blocks descendant focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getImportantForAccessibility()",
    "returnType" : "int",
    "comment" : "\n     * Gets the mode for determining whether this View is important for accessibility.\n     * A view is important for accessibility if it fires accessibility events and if it\n     * is reported to accessibility services that query the screen.\n     *\n     * @return The mode for determining whether a view is important for accessibility, one\n     * of {@link #IMPORTANT_FOR_ACCESSIBILITY_AUTO}, {@link #IMPORTANT_FOR_ACCESSIBILITY_YES},\n     * {@link #IMPORTANT_FOR_ACCESSIBILITY_NO}, or\n     * {@link #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}.\n     *\n     * @attr ref android.R.styleable#View_importantForAccessibility\n     *\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_YES\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_NO\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_AUTO\n     ",
    "links" : [ "#IMPORTANT_FOR_ACCESSIBILITY_YES", "#IMPORTANT_FOR_ACCESSIBILITY_AUTO", "#IMPORTANT_FOR_ACCESSIBILITY_NO", "#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS" ]
  }, {
    "name" : "public void setAccessibilityLiveRegion(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the live region mode for this view. This indicates to accessibility\n     * services whether they should automatically notify the user about changes\n     * to the view's content description or text, or to the content descriptions\n     * or text of the view's children (where applicable).\n     * <p>\n     * For example, in a login screen with a TextView that displays an \"incorrect\n     * password\" notification, that view should be marked as a live region with\n     * mode {@link #ACCESSIBILITY_LIVE_REGION_POLITE}.\n     * <p>\n     * To disable change notifications for this view, use\n     * {@link #ACCESSIBILITY_LIVE_REGION_NONE}. This is the default live region\n     * mode for most views.\n     * <p>\n     * To indicate that the user should be notified of changes, use\n     * {@link #ACCESSIBILITY_LIVE_REGION_POLITE}.\n     * <p>\n     * If the view's changes should interrupt ongoing speech and notify the user\n     * immediately, use {@link #ACCESSIBILITY_LIVE_REGION_ASSERTIVE}.\n     *\n     * @param mode The live region mode for this view, one of:\n     *        <ul>\n     *        <li>{@link #ACCESSIBILITY_LIVE_REGION_NONE}\n     *        <li>{@link #ACCESSIBILITY_LIVE_REGION_POLITE}\n     *        <li>{@link #ACCESSIBILITY_LIVE_REGION_ASSERTIVE}\n     *        </ul>\n     * @attr ref android.R.styleable#View_accessibilityLiveRegion\n     ",
    "links" : [ "#ACCESSIBILITY_LIVE_REGION_ASSERTIVE", "#ACCESSIBILITY_LIVE_REGION_NONE", "#ACCESSIBILITY_LIVE_REGION_POLITE" ]
  }, {
    "name" : "public int getAccessibilityLiveRegion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the live region mode for this View.\n     *\n     * @return The live region mode for the view.\n     *\n     * @attr ref android.R.styleable#View_accessibilityLiveRegion\n     *\n     * @see #setAccessibilityLiveRegion(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImportantForAccessibility(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets how to determine whether this view is important for accessibility\n     * which is if it fires accessibility events and if it is reported to\n     * accessibility services that query the screen.\n     *\n     * @param mode How to determine whether this view is important for accessibility.\n     *\n     * @attr ref android.R.styleable#View_importantForAccessibility\n     *\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_YES\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_NO\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS\n     * @see #IMPORTANT_FOR_ACCESSIBILITY_AUTO\n     ",
    "links" : [ ]
  }, {
    "name" : "private View findAccessibilityFocusHost(boolean searchDescendants)",
    "returnType" : "View",
    "comment" : "\n     * Returns the view within this view's hierarchy that is hosting\n     * accessibility focus.\n     *\n     * @param searchDescendants whether to search for focus in descendant views\n     * @return the view hosting accessibility focus, or {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImportantForAccessibility()",
    "returnType" : "boolean",
    "comment" : "\n     * Computes whether this view should be exposed for accessibility. In\n     * general, views that are interactive or provide information are exposed\n     * while views that serve only as containers are hidden.\n     * <p>\n     * If an ancestor of this view has importance\n     * {@link #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}, this method\n     * returns <code>false</code>.\n     * <p>\n     * Otherwise, the value is computed according to the view's\n     * {@link #getImportantForAccessibility()} value:\n     * <ol>\n     * <li>{@link #IMPORTANT_FOR_ACCESSIBILITY_NO} or\n     * {@link #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}, return <code>false\n     * </code>\n     * <li>{@link #IMPORTANT_FOR_ACCESSIBILITY_YES}, return <code>true</code>\n     * <li>{@link #IMPORTANT_FOR_ACCESSIBILITY_AUTO}, return <code>true</code> if\n     * view satisfies any of the following:\n     * <ul>\n     * <li>Is actionable, e.g. {@link #isClickable()},\n     * {@link #isLongClickable()}, or {@link #isFocusable()}\n     * <li>Has an {@link AccessibilityDelegate}\n     * <li>Has an interaction listener, e.g. {@link OnTouchListener},\n     * {@link OnKeyListener}, etc.\n     * <li>Is an accessibility live region, e.g.\n     * {@link #getAccessibilityLiveRegion()} is not\n     * {@link #ACCESSIBILITY_LIVE_REGION_NONE}.\n     * </ul>\n     * <li>Has an accessibility pane title, see {@link #setAccessibilityPaneTitle}</li>\n     * </ol>\n     *\n     * @return Whether the view is exposed for accessibility.\n     * @see #setImportantForAccessibility(int)\n     * @see #getImportantForAccessibility()\n     ",
    "links" : [ "OnTouchListener", "#isClickable()", "#getImportantForAccessibility()", "#isFocusable()", "#IMPORTANT_FOR_ACCESSIBILITY_YES", "#IMPORTANT_FOR_ACCESSIBILITY_AUTO", "#setAccessibilityPaneTitle", "#ACCESSIBILITY_LIVE_REGION_NONE", "AccessibilityDelegate", "#getAccessibilityLiveRegion()", "#isLongClickable()", "OnKeyListener", "#IMPORTANT_FOR_ACCESSIBILITY_NO", "#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS" ]
  }, {
    "name" : "public ViewParent getParentForAccessibility()",
    "returnType" : "ViewParent",
    "comment" : "\n     * Gets the parent for accessibility purposes. Note that the parent for\n     * accessibility is not necessary the immediate parent. It is the first\n     * predecessor that is important for accessibility.\n     *\n     * @return The parent for accessibility purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : " View getSelfOrParentImportantForA11y()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addChildrenForAccessibility(ArrayList<View> outChildren)",
    "returnType" : "void",
    "comment" : "\n     * Adds the children of this View relevant for accessibility to the given list\n     * as output. Since some Views are not important for accessibility the added\n     * child views are not necessarily direct children of this view, rather they are\n     * the first level of descendants important for accessibility.\n     *\n     * @param outChildren The output list that will receive children for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean includeForAccessibility()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether to regard this view for accessibility. A view is regarded for\n     * accessibility if it is important for accessibility or the querying\n     * accessibility service has explicitly requested that view not\n     * important for accessibility are regarded.\n     *\n     * @return Whether to regard the view for accessibility.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isActionableForAccessibility()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the View is considered actionable from\n     * accessibility perspective. Such view are important for\n     * accessibility.\n     *\n     * @return True if the view is actionable for accessibility.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasListenersForAccessibility()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the View has registered callbacks which makes it\n     * important for accessibility.\n     *\n     * @return True if the view is actionable for accessibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyViewAccessibilityStateChangedIfNeeded(int changeType)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the accessibility state of this view changed. The change\n     * is local to this view and does not represent structural changes such\n     * as children and parent. For example, the view became focusable. The\n     * notification is at at most once every\n     * {@link ViewConfiguration#getSendRecurringAccessibilityEventsInterval()}\n     * to avoid unnecessary load to the system. Also once a view has a pending\n     * notification this method is a NOP until the notification has been sent.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.ViewConfiguration#getSendRecurringAccessibilityEventsInterval()" ]
  }, {
    "name" : "public void notifySubtreeAccessibilityStateChangedIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the accessibility state of this view changed. The change\n     * is *not* local to this view and does represent structural changes such\n     * as children and parent. For example, the view size changed. The\n     * notification is at at most once every\n     * {@link ViewConfiguration#getSendRecurringAccessibilityEventsInterval()}\n     * to avoid unnecessary load to the system. Also once a view has a pending\n     * notification this method is a NOP until the notification has been sent.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.ViewConfiguration#getSendRecurringAccessibilityEventsInterval()" ]
  }, {
    "name" : "public void setTransitionVisibility(@Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Changes the visibility of this View without triggering any other changes. This should only\n     * be used by animation frameworks, such as {@link android.transition.Transition}, where\n     * visibility changes should not adjust focus or trigger a new layout. Application developers\n     * should use {@link #setVisibility} instead to ensure that the hierarchy is correctly updated.\n     *\n     * <p>Only call this method when a temporary visibility must be applied during an\n     * animation and the original visibility value is guaranteed to be reset after the\n     * animation completes. Use {@link #setVisibility} in all other cases.</p>\n     *\n     * @param visibility One of {@link #VISIBLE}, {@link #INVISIBLE}, or {@link #GONE}.\n     * @see #setVisibility(int)\n     ",
    "links" : [ "#VISIBLE", "android.transition.Transition", "#setVisibility", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : " void resetSubtreeAccessibilityStateChanged()",
    "returnType" : "void",
    "comment" : "\n     * Reset the flag indicating the accessibility state of the subtree rooted\n     * at this view changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "\n     * Report an accessibility action to this view's parents for delegated processing.\n     *\n     * <p>Implementations of {@link #performAccessibilityAction(int, Bundle)} may internally\n     * call this method to delegate an accessibility action to a supporting parent. If the parent\n     * returns true from its\n     * {@link ViewParent#onNestedPrePerformAccessibilityAction(View, int, android.os.Bundle)}\n     * method this method will return true to signify that the action was consumed.</p>\n     *\n     * <p>This method is useful for implementing nested scrolling child views. If\n     * {@link #isNestedScrollingEnabled()} returns true and the action is a scrolling action\n     * a custom view implementation may invoke this method to allow a parent to consume the\n     * scroll first. If this method returns true the custom view should skip its own scrolling\n     * behavior.</p>\n     *\n     * @param action Accessibility action to delegate\n     * @param arguments Optional action arguments\n     * @return true if the action was consumed by a parent\n     ",
    "links" : [ "android.view.ViewParent#onNestedPrePerformAccessibilityAction(View", "#isNestedScrollingEnabled()", "#performAccessibilityAction(int" ]
  }, {
    "name" : "public boolean performAccessibilityAction(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs the specified accessibility action on the view. For\n     * possible accessibility actions look at {@link AccessibilityNodeInfo}.\n     * <p>\n     * If an {@link AccessibilityDelegate} has been specified via calling\n     * {@link #setAccessibilityDelegate(AccessibilityDelegate)} its\n     * {@link AccessibilityDelegate#performAccessibilityAction(View, int, Bundle)}\n     * is responsible for handling this call.\n     * </p>\n     *\n     * <p>The default implementation will delegate\n     * {@link AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD} and\n     * {@link AccessibilityNodeInfo#ACTION_SCROLL_FORWARD} to nested scrolling parents if\n     * {@link #isNestedScrollingEnabled() nested scrolling is enabled} on this view.</p>\n     *\n     * @param action The action to perform.\n     * @param arguments Optional action arguments.\n     * @return Whether the action was performed.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "#performAccessibilityAction(View", "#setAccessibilityDelegate(AccessibilityDelegate)", "android.view.accessibility.AccessibilityNodeInfo#ACTION_SCROLL_FORWARD", "AccessibilityDelegate", "#isNestedScrollingEnabled()", "android.view.accessibility.AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD" ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "\n    * @see #performAccessibilityAction(int, Bundle)\n    *\n    * Note: Called from the default {@link AccessibilityDelegate}.\n    *\n    * @hide\n    ",
    "links" : [ "AccessibilityDelegate" ]
  }, {
    "name" : "private boolean traverseAtGranularity(int granularity, boolean forward, boolean extendSelection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getIterableTextForAccessibility()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the text reported for accessibility purposes.\n     *\n     * @return The accessibility text.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilitySelectionExtendable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether accessibility selection can be extended.\n     *\n     * @return If selection is extensible.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessibilitySelectionStart()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessibilitySelectionEnd()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilitySelection(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendViewTextTraversedAtGranularityEvent(int action, int granularity, int fromIndex, int toIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TextSegmentIterator getIteratorForGranularity(int granularity)",
    "returnType" : "TextSegmentIterator",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isTemporarilyDetached()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether the {@link View} is in the state between {@link #onStartTemporaryDetach()}\n     * and {@link #onFinishTemporaryDetach()}.\n     *\n     * <p>This method always returns {@code true} when called directly or indirectly from\n     * {@link #onStartTemporaryDetach()}. The return value when called directly or indirectly from\n     * {@link #onFinishTemporaryDetach()}, however, depends on the OS version.\n     * <ul>\n     *     <li>{@code true} on {@link android.os.Build.VERSION_CODES#N API 24}</li>\n     *     <li>{@code false} on {@link android.os.Build.VERSION_CODES#N_MR1 API 25}} and later</li>\n     * </ul>\n     * </p>\n     *\n     * @return {@code true} when the View is in the state between {@link #onStartTemporaryDetach()}\n     * and {@link #onFinishTemporaryDetach()}.\n     ",
    "links" : [ "android.view.View", "android.os.Build.VERSION_CODES#N_MR1", "#onStartTemporaryDetach()", "android.os.Build.VERSION_CODES#N", "#onFinishTemporaryDetach()" ]
  }, {
    "name" : "public void dispatchStartTemporaryDetach()",
    "returnType" : "void",
    "comment" : "\n     * Dispatch {@link #onStartTemporaryDetach()} to this View and its direct children if this is\n     * a container View.\n     ",
    "links" : [ "#onStartTemporaryDetach()" ]
  }, {
    "name" : "public void onStartTemporaryDetach()",
    "returnType" : "void",
    "comment" : "\n     * This is called when a container is going to temporarily detach a child, with\n     * {@link ViewGroup#detachViewFromParent(View) ViewGroup.detachViewFromParent}.\n     * It will either be followed by {@link #onFinishTemporaryDetach()} or\n     * {@link #onDetachedFromWindow()} when the container is done.\n     ",
    "links" : [ "android.view.ViewGroup#detachViewFromParent(View)", "#onDetachedFromWindow()", "#onFinishTemporaryDetach()" ]
  }, {
    "name" : "public void dispatchFinishTemporaryDetach()",
    "returnType" : "void",
    "comment" : "\n     * Dispatch {@link #onFinishTemporaryDetach()} to this View and its direct children if this is\n     * a container View.\n     ",
    "links" : [ "#onFinishTemporaryDetach()" ]
  }, {
    "name" : "public void onFinishTemporaryDetach()",
    "returnType" : "void",
    "comment" : "\n     * Called after {@link #onStartTemporaryDetach} when the container is done\n     * changing the view.\n     ",
    "links" : [ "#onStartTemporaryDetach" ]
  }, {
    "name" : "public KeyEvent.DispatcherState getKeyDispatcherState()",
    "returnType" : "KeyEvent.DispatcherState",
    "comment" : "\n     * Return the global {@link KeyEvent.DispatcherState KeyEvent.DispatcherState}\n     * for this view's window.  Returns null if the view is not currently attached\n     * to the window.  Normally you will not need to use this directly, but\n     * just use the standard high-level event callbacks like\n     * {@link #onKeyDown(int, KeyEvent)}.\n     ",
    "links" : [ "#onKeyDown(int", "KeyEvent.DispatcherState" ]
  }, {
    "name" : "public boolean dispatchKeyEventPreIme(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a key event before it is processed by any input method\n     * associated with the view hierarchy.  This can be used to intercept\n     * key events in special situations before the IME consumes them; a\n     * typical example would be handling the BACK key to update the application's\n     * UI instead of allowing the IME to see it and close itself.\n     *\n     * @param event The key event to be dispatched.\n     * @return True if the event was handled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a key event to the next view on the focus path. This path runs\n     * from the top of the view tree down to the currently focused view. If this\n     * view has focus, it will dispatch to itself. Otherwise it will dispatch\n     * the next node down the focus path. This method also fires any key\n     * listeners.\n     *\n     * @param event The key event to be dispatched.\n     * @return True if the event was handled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyShortcutEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatches a key shortcut event.\n     *\n     * @param event The key event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Pass the touch screen motion event down to the target view, or this\n     * view if it is the target.\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isAccessibilityFocusedViewOrHost()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean canReceivePointerEvents()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this view can receive pointer events.\n     *\n     * @return {@code true} if this view can receive pointer events.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onFilterTouchEventForSecurity(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Filter the touch event to apply security policies.\n     *\n     * @param event The motion event to be filtered.\n     * @return True if the event should be dispatched, false if the event should be dropped.\n     *\n     * @see #getFilterTouchesWhenObscured\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Pass a trackball motion event down to the focused view.\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchCapturedPointerEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Pass a captured pointer event down to the focused view.\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a generic motion event.\n     * <p>\n     * Generic motion events with source class {@link InputDevice#SOURCE_CLASS_POINTER}\n     * are delivered to the view under the pointer.  All other generic motion events are\n     * delivered to the focused view.  Hover events are handled specially and are delivered\n     * to {@link #onHoverEvent(MotionEvent)}.\n     * </p>\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ "#onHoverEvent(MotionEvent)", "android.view.InputDevice#SOURCE_CLASS_POINTER" ]
  }, {
    "name" : "private boolean dispatchGenericMotionEventInternal(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean dispatchHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a hover event.\n     * <p>\n     * Do not call this method directly.\n     * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.\n     * </p>\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ "#dispatchGenericMotionEvent(MotionEvent)" ]
  }, {
    "name" : "protected boolean hasHoveredChild()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the view has a child to which it has recently sent\n     * {@link MotionEvent#ACTION_HOVER_ENTER}.  If this view is hovered and\n     * it does not have a hovered child, then it must be the innermost hovered view.\n     * @hide\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_HOVER_ENTER" ]
  }, {
    "name" : "protected boolean pointInHoveredChild(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given point, in local coordinates, is inside the hovered child.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean dispatchGenericPointerEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a generic motion event to the view under the first pointer.\n     * <p>\n     * Do not call this method directly.\n     * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.\n     * </p>\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ "#dispatchGenericMotionEvent(MotionEvent)" ]
  }, {
    "name" : "protected boolean dispatchGenericFocusedEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a generic motion event to the currently focused view.\n     * <p>\n     * Do not call this method directly.\n     * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.\n     * </p>\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     ",
    "links" : [ "#dispatchGenericMotionEvent(MotionEvent)" ]
  }, {
    "name" : "public final boolean dispatchPointerEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a pointer event.\n     * <p>\n     * Dispatches touch related pointer events to {@link #onTouchEvent(MotionEvent)} and all\n     * other events to {@link #onGenericMotionEvent(MotionEvent)}.  This separation of concerns\n     * reinforces the invariant that {@link #onTouchEvent(MotionEvent)} is really about touches\n     * and should not be expected to handle other pointing device features.\n     * </p>\n     *\n     * @param event The motion event to be dispatched.\n     * @return True if the event was handled by the view, false otherwise.\n     * @hide\n     ",
    "links" : [ "#onGenericMotionEvent(MotionEvent)", "#onTouchEvent(MotionEvent)" ]
  }, {
    "name" : "public void dispatchWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "\n     * Called when the window containing this view gains or loses window focus.\n     * ViewGroups should override to route to their children.\n     *\n     * @param hasFocus True if the window containing this view now has focus,\n     *        false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "\n     * Called when the window containing this view gains or loses focus.  Note\n     * that this is separate from view focus: to receive key events, both\n     * your view and its window must have focus.  If a window is displayed\n     * on top of yours that takes input focus, then your own window will lose\n     * focus but the view focus will remain unchanged.\n     *\n     * @param hasWindowFocus True if the window containing this view now has\n     *        focus, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasWindowFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view is in a window that currently has window focus.\n     * Note that this is not the same as the view itself having focus.\n     *\n     * @return True if this view is in a window that currently has window focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasImeFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this view is in a window that currently has IME focusable state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchVisibilityChanged(@NonNull View changedView, @Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch a view visibility change down the view hierarchy.\n     * ViewGroups should override to route to their children.\n     * @param changedView The view whose visibility changed. Could be 'this' or\n     * an ancestor view.\n     * @param visibility The new visibility of changedView: {@link #VISIBLE},\n     * {@link #INVISIBLE} or {@link #GONE}.\n     ",
    "links" : [ "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : "protected void onVisibilityChanged(@NonNull View changedView, @Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Called when the visibility of the view or an ancestor of the view has\n     * changed.\n     *\n     * @param changedView The view whose visibility changed. May be\n     *                    {@code this} or an ancestor view.\n     * @param visibility The new visibility, one of {@link #VISIBLE},\n     *                   {@link #INVISIBLE} or {@link #GONE}.\n     ",
    "links" : [ "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : "public void dispatchDisplayHint(@Visibility int hint)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch a hint about whether this view is displayed. For instance, when\n     * a View moves out of the screen, it might receives a display hint indicating\n     * the view is not displayed. Applications should not <em>rely</em> on this hint\n     * as there is no guarantee that they will receive one.\n     *\n     * @param hint A hint about whether or not this view is displayed:\n     * {@link #VISIBLE} or {@link #INVISIBLE}.\n     ",
    "links" : [ "#VISIBLE", "#INVISIBLE" ]
  }, {
    "name" : "protected void onDisplayHint(@Visibility int hint)",
    "returnType" : "void",
    "comment" : "\n     * Gives this view a hint about whether is displayed or not. For instance, when\n     * a View moves out of the screen, it might receives a display hint indicating\n     * the view is not displayed. Applications should not <em>rely</em> on this hint\n     * as there is no guarantee that they will receive one.\n     *\n     * @param hint A hint about whether or not this view is displayed:\n     * {@link #VISIBLE} or {@link #INVISIBLE}.\n     ",
    "links" : [ "#VISIBLE", "#INVISIBLE" ]
  }, {
    "name" : "public void dispatchWindowVisibilityChanged(@Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch a window visibility change down the view hierarchy.\n     * ViewGroups should override to route to their children.\n     *\n     * @param visibility The new visibility of the window.\n     *\n     * @see #onWindowVisibilityChanged(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onWindowVisibilityChanged(@Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Called when the window containing has change its visibility\n     * (between {@link #GONE}, {@link #INVISIBLE}, and {@link #VISIBLE}).  Note\n     * that this tells you whether or not your window is being made visible\n     * to the window manager; this does <em>not</em> tell you whether or not\n     * your window is obscured by other windows on the screen, even if it\n     * is itself visible.\n     *\n     * @param visibility The new visibility of the window.\n     ",
    "links" : [ "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : " boolean isAggregatedVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this view and all ancestors are visible as of the last\n     * {@link #onVisibilityAggregated(boolean)} call.\n     ",
    "links" : [ "#onVisibilityAggregated(boolean)" ]
  }, {
    "name" : " boolean dispatchVisibilityAggregated(boolean isVisible)",
    "returnType" : "boolean",
    "comment" : "\n     * Internal dispatching method for {@link #onVisibilityAggregated}. Overridden by\n     * ViewGroup. Intended to only be called when {@link #isAttachedToWindow()},\n     * {@link #getWindowVisibility()} is {@link #VISIBLE} and this view's parent {@link #isShown()}.\n     *\n     * @param isVisible true if this view's visibility to the user is uninterrupted by its\n     *                  ancestors or by window visibility\n     * @return true if this view is visible to the user, not counting clipping or overlapping\n     ",
    "links" : [ "#isShown()", "#onVisibilityAggregated", "#VISIBLE", "#getWindowVisibility()", "#isAttachedToWindow()" ]
  }, {
    "name" : "public void onVisibilityAggregated(boolean isVisible)",
    "returnType" : "void",
    "comment" : "\n     * Called when the user-visibility of this View is potentially affected by a change\n     * to this view itself, an ancestor view or the window this view is attached to.\n     *\n     * @param isVisible true if this view and all of its ancestors are {@link #VISIBLE}\n     *                  and this view's window is also visible\n     ",
    "links" : [ "#VISIBLE" ]
  }, {
    "name" : "public int getWindowVisibility()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current visibility of the window this view is attached to\n     * (either {@link #GONE}, {@link #INVISIBLE}, or {@link #VISIBLE}).\n     *\n     * @return Returns the current visibility of the view's window.\n     ",
    "links" : [ "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : "public void getWindowVisibleDisplayFrame(Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the overall visible display size in which the window this view is\n     * attached to has been positioned in.  This takes into account screen\n     * decorations above the window, for both cases where the window itself\n     * is being position inside of them or the window is being placed under\n     * then and covered insets are used for the window to position its content\n     * inside.  In effect, this tells you the available area where content can\n     * be placed and remain visible to users.\n     *\n     * <p>This function requires an IPC back to the window manager to retrieve\n     * the requested information, so should not be used in performance critical\n     * code like drawing.\n     *\n     * @param outRect Filled in with the visible display frame.  If the view\n     * is not attached to a window, this is simply the raw display size.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getWindowDisplayFrame(Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #getWindowVisibleDisplayFrame}, but returns the \"full\" display frame this window\n     * is currently in without any insets.\n     *\n     * @hide\n     ",
    "links" : [ "#getWindowVisibleDisplayFrame" ]
  }, {
    "name" : "public void dispatchConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch a notification about a resource configuration change down\n     * the view hierarchy.\n     * ViewGroups should override to route to their children.\n     *\n     * @param newConfig The new resource configuration.\n     *\n     * @see #onConfigurationChanged(android.content.res.Configuration)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Called when the current configuration of the resources being used\n     * by the application have changed.  You can use this to decide when\n     * to reload resources that can changed based on orientation and other\n     * configuration characteristics.  You only need to use this if you are\n     * not relying on the normal {@link android.app.Activity} mechanism of\n     * recreating the activity instance upon a configuration change.\n     *\n     * @param newConfig The new resource configuration.\n     ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : " void dispatchCollectViewAttributes(AttachInfo attachInfo, int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Private function to aggregate all per-view attributes in to the view\n     * root.\n     ",
    "links" : [ ]
  }, {
    "name" : " void performCollectViewAttributes(AttachInfo attachInfo, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void needGlobalAttributesUpdate(boolean force)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInTouchMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the device is currently in touch mode.  Touch mode is entered\n     * once the user begins interacting with the device by touch, and affects various\n     * things like whether focus is always visible to the user.\n     *\n     * @return Whether the device is in touch mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Returns the context the view is running in, through which it can\n     * access the current theme, resources, etc.\n     *\n     * @return The view's Context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyPreIme(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handle a key event before it is processed by any input method\n     * associated with the view hierarchy.  This can be used to intercept\n     * key events in special situations before the IME consumes them; a\n     * typical example would be handling the BACK key to update the application's\n     * UI instead of allowing the IME to see it and close itself.\n     *\n     * @param keyCode The value in event.getKeyCode().\n     * @param event Description of the key event.\n     * @return If you handled the event, return true. If you want to allow the\n     *         event to be handled by the next receiver, return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation of {@link KeyEvent.Callback#onKeyDown(int, KeyEvent)\n     * KeyEvent.Callback.onKeyDown()}: perform press of the view\n     * when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER}\n     * is released, if the view is enabled and clickable.\n     * <p>\n     * Key presses in software keyboards will generally NOT trigger this\n     * listener, although some may elect to do so in some situations. Do not\n     * rely on this to catch software key presses.\n     *\n     * @param keyCode a key code that represents the button pressed, from\n     *                {@link android.view.KeyEvent}\n     * @param event the KeyEvent object that defines the button action\n     ",
    "links" : [ "android.view.KeyEvent", "KeyEvent.Callback#onKeyDown(int", "android.view.KeyEvent#KEYCODE_DPAD_CENTER", "android.view.KeyEvent#KEYCODE_ENTER" ]
  }, {
    "name" : "public boolean onKeyLongPress(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation of {@link KeyEvent.Callback#onKeyLongPress(int, KeyEvent)\n     * KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle\n     * the event).\n     * <p>Key presses in software keyboards will generally NOT trigger this listener,\n     * although some may elect to do so in some situations. Do not rely on this to\n     * catch software key presses.\n     ",
    "links" : [ "KeyEvent.Callback#onKeyLongPress(int" ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation of {@link KeyEvent.Callback#onKeyUp(int, KeyEvent)\n     * KeyEvent.Callback.onKeyUp()}: perform clicking of the view\n     * when {@link KeyEvent#KEYCODE_DPAD_CENTER}, {@link KeyEvent#KEYCODE_ENTER}\n     * or {@link KeyEvent#KEYCODE_SPACE} is released.\n     * <p>Key presses in software keyboards will generally NOT trigger this listener,\n     * although some may elect to do so in some situations. Do not rely on this to\n     * catch software key presses.\n     *\n     * @param keyCode A key code that represents the button pressed, from\n     *                {@link android.view.KeyEvent}.\n     * @param event   The KeyEvent object that defines the button action.\n     ",
    "links" : [ "android.view.KeyEvent", "android.view.KeyEvent#KEYCODE_DPAD_CENTER", "android.view.KeyEvent#KEYCODE_SPACE", "KeyEvent.Callback#onKeyUp(int", "android.view.KeyEvent#KEYCODE_ENTER" ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation of {@link KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent)\n     * KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle\n     * the event).\n     * <p>Key presses in software keyboards will generally NOT trigger this listener,\n     * although some may elect to do so in some situations. Do not rely on this to\n     * catch software key presses.\n     *\n     * @param keyCode     A key code that represents the button pressed, from\n     *                    {@link android.view.KeyEvent}.\n     * @param repeatCount The number of times the action was made.\n     * @param event       The KeyEvent object that defines the button action.\n     ",
    "links" : [ "android.view.KeyEvent", "KeyEvent.Callback#onKeyMultiple(int" ]
  }, {
    "name" : "public boolean onKeyShortcut(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called on the focused view when a key shortcut event is not handled.\n     * Override this method to implement local key shortcuts for the View.\n     * Key shortcuts can also be implemented by setting the\n     * {@link MenuItem#setShortcut(char, char) shortcut} property of menu items.\n     *\n     * @param keyCode The value in event.getKeyCode().\n     * @param event Description of the key event.\n     * @return If you handled the event, return true. If you want to allow the\n     *         event to be handled by the next receiver, return false.\n     ",
    "links" : [ "android.view.MenuItem#setShortcut(char" ]
  }, {
    "name" : "public boolean onCheckIsTextEditor()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the called view is a text editor, in which case it\n     * would make sense to automatically display a soft input window for\n     * it.  Subclasses should override this if they implement\n     * {@link #onCreateInputConnection(EditorInfo)} to return true if\n     * a call on that method would return a non-null InputConnection, and\n     * they are really a first-class editor that the user would normally\n     * start typing on when the go into a window containing your view.\n     *\n     * <p>The default implementation always returns false.  This does\n     * <em>not</em> mean that its {@link #onCreateInputConnection(EditorInfo)}\n     * will not be called or the user can not otherwise perform edits on your\n     * view; it is just a hint to the system that this is not the primary\n     * purpose of this view.\n     *\n     * @return Returns true if this view is a text editor, else false.\n     ",
    "links" : [ "#onCreateInputConnection(EditorInfo)" ]
  }, {
    "name" : "public InputConnection onCreateInputConnection(EditorInfo outAttrs)",
    "returnType" : "InputConnection",
    "comment" : "\n     * Create a new InputConnection for an InputMethod to interact\n     * with the view.  The default implementation returns null, since it doesn't\n     * support input methods.  You can override this to implement such support.\n     * This is only needed for views that take focus and text input.\n     *\n     * <p>When implementing this, you probably also want to implement\n     * {@link #onCheckIsTextEditor()} to indicate you will return a\n     * non-null InputConnection.</p>\n     *\n     * <p>Also, take good care to fill in the {@link android.view.inputmethod.EditorInfo}\n     * object correctly and in its entirety, so that the connected IME can rely\n     * on its values. For example, {@link android.view.inputmethod.EditorInfo#initialSelStart}\n     * and  {@link android.view.inputmethod.EditorInfo#initialSelEnd} members\n     * must be filled in with the correct cursor position for IMEs to work correctly\n     * with your application.</p>\n     *\n     * @param outAttrs Fill in with attribute information about the connection.\n     ",
    "links" : [ "android.view.inputmethod.EditorInfo#initialSelEnd", "android.view.inputmethod.EditorInfo", "#onCheckIsTextEditor()", "android.view.inputmethod.EditorInfo#initialSelStart" ]
  }, {
    "name" : "public boolean checkInputConnectionProxy(View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Called by the {@link android.view.inputmethod.InputMethodManager}\n     * when a view who is not the current\n     * input connection target is trying to make a call on the manager.  The\n     * default implementation returns false; you can override this to return\n     * true for certain views if you are performing InputConnection proxying\n     * to them.\n     * @param view The View that is making the InputMethodManager call.\n     * @return Return true to allow the call, false to reject.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager" ]
  }, {
    "name" : "public void createContextMenu(ContextMenu menu)",
    "returnType" : "void",
    "comment" : "\n     * Show the context menu for this view. It is not safe to hold on to the\n     * menu after returning from this method.\n     *\n     * You should normally not overload this method. Overload\n     * {@link #onCreateContextMenu(ContextMenu)} or define an\n     * {@link OnCreateContextMenuListener} to add items to the context menu.\n     *\n     * @param menu The context menu to populate\n     ",
    "links" : [ "#onCreateContextMenu(ContextMenu)", "OnCreateContextMenuListener" ]
  }, {
    "name" : "protected ContextMenuInfo getContextMenuInfo()",
    "returnType" : "ContextMenuInfo",
    "comment" : "\n     * Views should implement this if they have extra information to associate\n     * with the context menu. The return result is supplied as a parameter to\n     * the {@link OnCreateContextMenuListener#onCreateContextMenu(ContextMenu, View, ContextMenuInfo)}\n     * callback.\n     *\n     * @return Extra information about the item for which the context menu\n     *         should be shown. This information will vary across different\n     *         subclasses of View.\n     ",
    "links" : [ "#onCreateContextMenu(ContextMenu" ]
  }, {
    "name" : "protected void onCreateContextMenu(ContextMenu menu)",
    "returnType" : "void",
    "comment" : "\n     * Views should implement this if the view itself is going to add items to\n     * the context menu.\n     *\n     * @param menu the context menu to populate\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this method to handle trackball motion events.  The\n     * <em>relative</em> movement of the trackball since the last event\n     * can be retrieve with {@link MotionEvent#getX MotionEvent.getX()} and\n     * {@link MotionEvent#getY MotionEvent.getY()}.  These are normalized so\n     * that a movement of 1 corresponds to the user pressing one DPAD key (so\n     * they will often be fractional values, representing the more fine-grained\n     * movement information available from a trackball).\n     *\n     * @param event The motion event.\n     * @return True if the event was handled, false otherwise.\n     ",
    "links" : [ "android.view.MotionEvent#getX", "android.view.MotionEvent#getY" ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this method to handle generic motion events.\n     * <p>\n     * Generic motion events describe joystick movements, mouse hovers, track pad\n     * touches, scroll wheel movements and other input events.  The\n     * {@link MotionEvent#getSource() source} of the motion event specifies\n     * the class of input that was received.  Implementations of this method\n     * must examine the bits in the source before processing the event.\n     * The following code example shows how this is done.\n     * </p><p>\n     * Generic motion events with source class {@link InputDevice#SOURCE_CLASS_POINTER}\n     * are delivered to the view under the pointer.  All other generic motion events are\n     * delivered to the focused view.\n     * </p>\n     * <pre> public boolean onGenericMotionEvent(MotionEvent event) {\n     *     if (event.isFromSource(InputDevice.SOURCE_CLASS_JOYSTICK)) {\n     *         if (event.getAction() == MotionEvent.ACTION_MOVE) {\n     *             // process the joystick movement...\n     *             return true;\n     *         }\n     *     }\n     *     if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {\n     *         switch (event.getAction()) {\n     *             case MotionEvent.ACTION_HOVER_MOVE:\n     *                 // process the mouse hover movement...\n     *                 return true;\n     *             case MotionEvent.ACTION_SCROLL:\n     *                 // process the scroll wheel movement...\n     *                 return true;\n     *         }\n     *     }\n     *     return super.onGenericMotionEvent(event);\n     * }</pre>\n     *\n     * @param event The generic motion event being processed.\n     * @return True if the event was handled, false otherwise.\n     ",
    "links" : [ "android.view.MotionEvent#getSource()", "android.view.InputDevice#SOURCE_CLASS_POINTER" ]
  }, {
    "name" : "private boolean dispatchTouchExplorationHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatching hover events to {@link TouchDelegate} to improve accessibility.\n     * <p>\n     * This method is dispatching hover events to the delegate target to support explore by touch.\n     * Similar to {@link ViewGroup#dispatchTouchEvent}, this method send proper hover events to\n     * the delegate target according to the pointer and the touch area of the delegate while touch\n     * exploration enabled.\n     * </p>\n     *\n     * @param event The motion event dispatch to the delegate target.\n     * @return True if the event was handled, false otherwise.\n     *\n     * @see #onHoverEvent\n     ",
    "links" : [ "android.view.ViewGroup#dispatchTouchEvent", "android.view.TouchDelegate" ]
  }, {
    "name" : "public boolean onHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this method to handle hover events.\n     * <p>\n     * This method is called whenever a pointer is hovering into, over, or out of the\n     * bounds of a view and the view is not currently being touched.\n     * Hover events are represented as pointer events with action\n     * {@link MotionEvent#ACTION_HOVER_ENTER}, {@link MotionEvent#ACTION_HOVER_MOVE},\n     * or {@link MotionEvent#ACTION_HOVER_EXIT}.\n     * </p>\n     * <ul>\n     * <li>The view receives a hover event with action {@link MotionEvent#ACTION_HOVER_ENTER}\n     * when the pointer enters the bounds of the view.</li>\n     * <li>The view receives a hover event with action {@link MotionEvent#ACTION_HOVER_MOVE}\n     * when the pointer has already entered the bounds of the view and has moved.</li>\n     * <li>The view receives a hover event with action {@link MotionEvent#ACTION_HOVER_EXIT}\n     * when the pointer has exited the bounds of the view or when the pointer is\n     * about to go down due to a button click, tap, or similar user action that\n     * causes the view to be touched.</li>\n     * </ul>\n     * <p>\n     * The view should implement this method to return true to indicate that it is\n     * handling the hover event, such as by changing its drawable state.\n     * </p><p>\n     * The default implementation calls {@link #setHovered} to update the hovered state\n     * of the view when a hover enter or hover exit event is received, if the view\n     * is enabled and is clickable.  The default implementation also sends hover\n     * accessibility events.\n     * </p>\n     *\n     * @param event The motion event that describes the hover.\n     * @return True if the view handled the hover event.\n     *\n     * @see #isHovered\n     * @see #setHovered\n     * @see #onHoverChanged\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_HOVER_EXIT", "android.view.MotionEvent#ACTION_HOVER_MOVE", "android.view.MotionEvent#ACTION_HOVER_ENTER", "#setHovered" ]
  }, {
    "name" : "private boolean isHoverable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the view should handle {@link #onHoverEvent}\n     * by calling {@link #setHovered} to change its hovered state.\n     *\n     * @return True if the view is hoverable.\n     ",
    "links" : [ "#onHoverEvent", "#setHovered" ]
  }, {
    "name" : "public boolean isHovered()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the view is currently hovered.\n     *\n     * @return True if the view is currently hovered.\n     *\n     * @see #setHovered\n     * @see #onHoverChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHovered(boolean hovered)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the view is currently hovered.\n     * <p>\n     * Calling this method also changes the drawable state of the view.  This\n     * enables the view to react to hover by using different drawable resources\n     * to change its appearance.\n     * </p><p>\n     * The {@link #onHoverChanged} method is called when the hovered state changes.\n     * </p>\n     *\n     * @param hovered True if the view is hovered.\n     *\n     * @see #isHovered\n     * @see #onHoverChanged\n     ",
    "links" : [ "#onHoverChanged" ]
  }, {
    "name" : "public void onHoverChanged(boolean hovered)",
    "returnType" : "void",
    "comment" : "\n     * Implement this method to handle hover state changes.\n     * <p>\n     * This method is called whenever the hover state changes as a result of a\n     * call to {@link #setHovered}.\n     * </p>\n     *\n     * @param hovered The current hover state, as returned by {@link #isHovered}.\n     *\n     * @see #isHovered\n     * @see #setHovered\n     ",
    "links" : [ "#isHovered", "#setHovered" ]
  }, {
    "name" : "protected boolean handleScrollBarDragging(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles scroll bar dragging by mouse input.\n     *\n     * @hide\n     * @param event The motion event.\n     *\n     * @return true if the event was handled as a scroll bar dragging, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this method to handle touch screen motion events.\n     * <p>\n     * If this method is used to detect click actions, it is recommended that\n     * the actions be performed by implementing and calling\n     * {@link #performClick()}. This will ensure consistent system behavior,\n     * including:\n     * <ul>\n     * <li>obeying click sound preferences\n     * <li>dispatching OnClickListener calls\n     * <li>handling {@link AccessibilityNodeInfo#ACTION_CLICK ACTION_CLICK} when\n     * accessibility features are enabled\n     * </ul>\n     *\n     * @param event The motion event.\n     * @return True if the event was handled, false otherwise.\n     ",
    "links" : [ "#performClick()", "android.view.accessibility.AccessibilityNodeInfo#ACTION_CLICK" ]
  }, {
    "name" : "public boolean isInScrollingContainer()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeLongPressCallback()",
    "returnType" : "void",
    "comment" : "\n     * Remove the longpress detection timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasPendingLongPressCallback()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the long press callback is scheduled to run sometime in the future.\n     * Return false if there is no scheduled long press callback at the moment.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removePerformClickCallback()",
    "returnType" : "void",
    "comment" : "\n     * Remove the pending click action\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeUnsetPressCallback()",
    "returnType" : "void",
    "comment" : "\n     * Remove the prepress detection timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeTapCallback()",
    "returnType" : "void",
    "comment" : "\n     * Remove the tap detection timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancelLongPress()",
    "returnType" : "void",
    "comment" : "\n     * Cancels a pending long press.  Your subclass can use this if you\n     * want the context menu to come up if the user presses and holds\n     * at the same place, but you don't want it to come up if they press\n     * and then move around enough to cause scrolling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTouchDelegate(TouchDelegate delegate)",
    "returnType" : "void",
    "comment" : "\n     * Sets the TouchDelegate for this View.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TouchDelegate getTouchDelegate()",
    "returnType" : "TouchDelegate",
    "comment" : "\n     * Gets the TouchDelegate for this View.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void requestUnbufferedDispatch(MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Request unbuffered dispatch of the given stream of MotionEvents to this View.\n     *\n     * Until this View receives a corresponding {@link MotionEvent#ACTION_UP}, ask that the input\n     * system not batch {@link MotionEvent}s but instead deliver them as soon as they're\n     * available. This method should only be called for touch events.\n     *\n     * <p class=\"note\">This API is not intended for most applications. Buffered dispatch\n     * provides many of benefits, and just requesting unbuffered dispatch on most MotionEvent\n     * streams will not improve your input latency. Side effects include: increased latency,\n     * jittery scrolls and inability to take advantage of system resampling. Talk to your input\n     * professional to see if {@link #requestUnbufferedDispatch(MotionEvent)} is right for\n     * you.</p>\n     *\n     * To receive unbuffered events for arbitrary input device source classes, use\n     * {@link #requestUnbufferedDispatch(int)},\n     *\n     * @see View#requestUnbufferedDispatch(int)\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_UP", "android.view.MotionEvent", "#requestUnbufferedDispatch(MotionEvent)", "#requestUnbufferedDispatch(int)" ]
  }, {
    "name" : "public final void requestUnbufferedDispatch(@InputSourceClass int source)",
    "returnType" : "void",
    "comment" : "\n     * Request unbuffered dispatch of the given event source class to this view.\n     * This is similar to {@link View#requestUnbufferedDispatch(MotionEvent)}, but does not\n     * automatically terminate, and allows the specification of arbitrary input source classes.\n     *\n     * @param source The combined input source class to request unbuffered dispatch for. All\n     *               events coming from these source classes will not be buffered. Set to\n     *               {@link InputDevice#SOURCE_CLASS_NONE} in order to return to default behaviour.\n     *\n     * @see View#requestUnbufferedDispatch(MotionEvent)\n     ",
    "links" : [ "android.view.InputDevice#SOURCE_CLASS_NONE", "android.view.View#requestUnbufferedDispatch(MotionEvent)" ]
  }, {
    "name" : "private boolean hasSize()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean canTakeFocus()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setFlags(int flags, int mask)",
    "returnType" : "void",
    "comment" : "\n     * Set flags controlling behavior of this view.\n     *\n     * @param flags Constant indicating the value which should be set\n     * @param mask Constant indicating the bit range that should be changed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bringToFront()",
    "returnType" : "void",
    "comment" : "\n     * Change the view's z order in the tree, so it's on top of other sibling\n     * views. This ordering change may affect layout, if the parent container\n     * uses an order-dependent layout scheme (e.g., LinearLayout). Prior\n     * to {@link android.os.Build.VERSION_CODES#KITKAT} this\n     * method should be followed by calls to {@link #requestLayout()} and\n     * {@link View#invalidate()} on the view's parent to force the parent to redraw\n     * with the new child ordering.\n     *\n     * @see ViewGroup#bringChildToFront(View)\n     ",
    "links" : [ "android.view.View#invalidate()", "android.os.Build.VERSION_CODES#KITKAT", "#requestLayout()" ]
  }, {
    "name" : "protected void onScrollChanged(int l, int t, int oldl, int oldt)",
    "returnType" : "void",
    "comment" : "\n     * This is called in response to an internal scroll in this view (i.e., the\n     * view scrolled its own contents). This is typically as a result of\n     * {@link #scrollBy(int, int)} or {@link #scrollTo(int, int)} having been\n     * called.\n     *\n     * @param l Current horizontal scroll origin.\n     * @param t Current vertical scroll origin.\n     * @param oldl Previous horizontal scroll origin.\n     * @param oldt Previous vertical scroll origin.\n     ",
    "links" : [ "#scrollBy(int", "#scrollTo(int" ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "\n     * This is called during layout when the size of this view has changed. If\n     * you were just added to the view hierarchy, you're called with the old\n     * values of 0.\n     *\n     * @param w Current width of this view.\n     * @param h Current height of this view.\n     * @param oldw Old width of this view.\n     * @param oldh Old height of this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Called by draw to draw the child views. This may be overridden\n     * by derived classes to gain control just before its children are drawn\n     * (but after its own view has been drawn).\n     * @param canvas the canvas on which to draw the view\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ViewParent getParent()",
    "returnType" : "ViewParent",
    "comment" : "\n     * Gets the parent of this view. Note that the parent is a\n     * ViewParent and not necessarily a View.\n     *\n     * @return Parent of this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollX(int value)",
    "returnType" : "void",
    "comment" : "\n     * Set the horizontal scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param value the x position to scroll to\n     ",
    "links" : [ "#onScrollChanged(int" ]
  }, {
    "name" : "public void setScrollY(int value)",
    "returnType" : "void",
    "comment" : "\n     * Set the vertical scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param value the y position to scroll to\n     ",
    "links" : [ "#onScrollChanged(int" ]
  }, {
    "name" : "public final int getScrollX()",
    "returnType" : "int",
    "comment" : "\n     * Return the scrolled left position of this view. This is the left edge of\n     * the displayed part of your view. You do not need to draw any pixels\n     * farther left, since those are outside of the frame of your view on\n     * screen.\n     *\n     * @return The left edge of the displayed part of your view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getScrollY()",
    "returnType" : "int",
    "comment" : "\n     * Return the scrolled top position of this view. This is the top edge of\n     * the displayed part of your view. You do not need to draw any pixels above\n     * it, since those are outside of the frame of your view on screen.\n     *\n     * @return The top edge of the displayed part of your view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Return the width of your view.\n     *\n     * @return The width of your view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Return the height of your view.\n     *\n     * @return The height of your view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getDrawingRect(Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Return the visible drawing bounds of your view. Fills in the output\n     * rectangle with the values from getScrollX(), getScrollY(),\n     * getWidth(), and getHeight(). These bounds do not account for any\n     * transformation properties currently set on the view, such as\n     * {@link #setScaleX(float)} or {@link #setRotation(float)}.\n     *\n     * @param outRect The (scrolled) drawing bounds of the view.\n     ",
    "links" : [ "#setRotation(float)", "#setScaleX(float)" ]
  }, {
    "name" : "public final int getMeasuredWidth()",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #getMeasuredWidthAndState()}, but only returns the\n     * raw width component (that is the result is masked by\n     * {@link #MEASURED_SIZE_MASK}).\n     *\n     * @return The raw measured width of this view.\n     ",
    "links" : [ "#getMeasuredWidthAndState()", "#MEASURED_SIZE_MASK" ]
  }, {
    "name" : "public final int getMeasuredWidthAndState()",
    "returnType" : "int",
    "comment" : "\n     * Return the full width measurement information for this view as computed\n     * by the most recent call to {@link #measure(int, int)}.  This result is a bit mask\n     * as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.\n     * This should be used during measurement and layout calculations only. Use\n     * {@link #getWidth()} to see how wide a view is after layout.\n     *\n     * @return The measured width of this view as a bit mask.\n     ",
    "links" : [ "#MEASURED_STATE_TOO_SMALL", "#MEASURED_SIZE_MASK", "#measure(int", "#getWidth()" ]
  }, {
    "name" : "public final int getMeasuredHeight()",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #getMeasuredHeightAndState()}, but only returns the\n     * raw height component (that is the result is masked by\n     * {@link #MEASURED_SIZE_MASK}).\n     *\n     * @return The raw measured height of this view.\n     ",
    "links" : [ "#MEASURED_SIZE_MASK", "#getMeasuredHeightAndState()" ]
  }, {
    "name" : "public final int getMeasuredHeightAndState()",
    "returnType" : "int",
    "comment" : "\n     * Return the full height measurement information for this view as computed\n     * by the most recent call to {@link #measure(int, int)}.  This result is a bit mask\n     * as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.\n     * This should be used during measurement and layout calculations only. Use\n     * {@link #getHeight()} to see how high a view is after layout.\n     *\n     * @return The measured height of this view as a bit mask.\n     ",
    "links" : [ "#MEASURED_STATE_TOO_SMALL", "#MEASURED_SIZE_MASK", "#getHeight()", "#measure(int" ]
  }, {
    "name" : "public final int getMeasuredState()",
    "returnType" : "int",
    "comment" : "\n     * Return only the state bits of {@link #getMeasuredWidthAndState()}\n     * and {@link #getMeasuredHeightAndState()}, combined into one integer.\n     * The width component is in the regular bits {@link #MEASURED_STATE_MASK}\n     * and the height component is at the shifted bits\n     * {@link #MEASURED_HEIGHT_STATE_SHIFT}>>{@link #MEASURED_STATE_MASK}.\n     ",
    "links" : [ "#getMeasuredWidthAndState()", "#MEASURED_HEIGHT_STATE_SHIFT", "#MEASURED_STATE_MASK", "#getMeasuredHeightAndState()" ]
  }, {
    "name" : "public Matrix getMatrix()",
    "returnType" : "Matrix",
    "comment" : "\n     * The transform matrix of this view, which is calculated based on the current\n     * rotation, scale, and pivot properties.\n     *\n     * @see #getRotation()\n     * @see #getScaleX()\n     * @see #getScaleY()\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @return The current transform matrix for the view\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasIdentityMatrix()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the transform matrix is the identity matrix.\n     * Recomputes the matrix if necessary.\n     *\n     * @return True if the transform matrix is the identity matrix, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void ensureTransformationInfo()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Matrix getInverseMatrix()",
    "returnType" : "Matrix",
    "comment" : "\n     * Utility method to retrieve the inverse of the current mMatrix property.\n     * We cache the matrix to avoid recalculating it when transform properties\n     * have not changed.\n     *\n     * @return The inverse of the current matrix of this view.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCameraDistance()",
    "returnType" : "float",
    "comment" : "\n     * Gets the distance along the Z axis from the camera to this view.\n     *\n     * @see #setCameraDistance(float)\n     *\n     * @return The distance along the Z axis.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCameraDistance(float distance)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the distance along the Z axis (orthogonal to the X/Y plane on which\n     * views are drawn) from the camera to this view. The camera's distance\n     * affects 3D transformations, for instance rotations around the X and Y\n     * axis. If the rotationX or rotationY properties are changed and this view is\n     * large (more than half the size of the screen), it is recommended to always\n     * use a camera distance that's greater than the height (X axis rotation) or\n     * the width (Y axis rotation) of this view.</p>\n     *\n     * <p>The distance of the camera from the view plane can have an affect on the\n     * perspective distortion of the view when it is rotated around the x or y axis.\n     * For example, a large distance will result in a large viewing angle, and there\n     * will not be much perspective distortion of the view as it rotates. A short\n     * distance may cause much more perspective distortion upon rotation, and can\n     * also result in some drawing artifacts if the rotated view ends up partially\n     * behind the camera (which is why the recommendation is to use a distance at\n     * least as far as the size of the view, if the view is to be rotated.)</p>\n     *\n     * <p>The distance is expressed in \"depth pixels.\" The default distance depends\n     * on the screen density. For instance, on a medium density display, the\n     * default distance is 1280. On a high density display, the default distance\n     * is 1920.</p>\n     *\n     * <p>If you want to specify a distance that leads to visually consistent\n     * results across various densities, use the following formula:</p>\n     * <pre>\n     * float scale = context.getResources().getDisplayMetrics().density;\n     * view.setCameraDistance(distance * scale);\n     * </pre>\n     *\n     * <p>The density scale factor of a high density display is 1.5,\n     * and 1920 = 1280 * 1.5.</p>\n     *\n     * @param distance The distance in \"depth pixels\", if negative the opposite\n     *        value is used\n     *\n     * @see #setRotationX(float)\n     * @see #setRotationY(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getRotation()",
    "returnType" : "float",
    "comment" : "\n     * The degrees that the view is rotated around the pivot point.\n     *\n     * @see #setRotation(float)\n     * @see #getPivotX()\n     * @see #getPivotY()\n     *\n     * @return The degrees of rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRotation(float rotation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the degrees that the view is rotated around the pivot point. Increasing values\n     * result in clockwise rotation.\n     *\n     * @param rotation The degrees of rotation.\n     *\n     * @see #getRotation()\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @see #setRotationX(float)\n     * @see #setRotationY(float)\n     *\n     * @attr ref android.R.styleable#View_rotation\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getRotationY()",
    "returnType" : "float",
    "comment" : "\n     * The degrees that the view is rotated around the vertical axis through the pivot point.\n     *\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @see #setRotationY(float)\n     *\n     * @return The degrees of Y rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRotationY(float rotationY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the degrees that the view is rotated around the vertical axis through the pivot point.\n     * Increasing values result in counter-clockwise rotation from the viewpoint of looking\n     * down the y axis.\n     *\n     * When rotating large views, it is recommended to adjust the camera distance\n     * accordingly. Refer to {@link #setCameraDistance(float)} for more information.\n     *\n     * @param rotationY The degrees of Y rotation.\n     *\n     * @see #getRotationY()\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @see #setRotation(float)\n     * @see #setRotationX(float)\n     * @see #setCameraDistance(float)\n     *\n     * @attr ref android.R.styleable#View_rotationY\n     ",
    "links" : [ "#setCameraDistance(float)" ]
  }, {
    "name" : "public float getRotationX()",
    "returnType" : "float",
    "comment" : "\n     * The degrees that the view is rotated around the horizontal axis through the pivot point.\n     *\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @see #setRotationX(float)\n     *\n     * @return The degrees of X rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRotationX(float rotationX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the degrees that the view is rotated around the horizontal axis through the pivot point.\n     * Increasing values result in clockwise rotation from the viewpoint of looking down the\n     * x axis.\n     *\n     * When rotating large views, it is recommended to adjust the camera distance\n     * accordingly. Refer to {@link #setCameraDistance(float)} for more information.\n     *\n     * @param rotationX The degrees of X rotation.\n     *\n     * @see #getRotationX()\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @see #setRotation(float)\n     * @see #setRotationY(float)\n     * @see #setCameraDistance(float)\n     *\n     * @attr ref android.R.styleable#View_rotationX\n     ",
    "links" : [ "#setCameraDistance(float)" ]
  }, {
    "name" : "public float getScaleX()",
    "returnType" : "float",
    "comment" : "\n     * The amount that the view is scaled in x around the pivot point, as a proportion of\n     * the view's unscaled width. A value of 1, the default, means that no scaling is applied.\n     *\n     * <p>By default, this is 1.0f.\n     *\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @return The scaling factor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScaleX(float scaleX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the amount that the view is scaled in x around the pivot point, as a proportion of\n     * the view's unscaled width. A value of 1 means that no scaling is applied.\n     *\n     * @param scaleX The scaling factor.\n     * @see #getPivotX()\n     * @see #getPivotY()\n     *\n     * @attr ref android.R.styleable#View_scaleX\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getScaleY()",
    "returnType" : "float",
    "comment" : "\n     * The amount that the view is scaled in y around the pivot point, as a proportion of\n     * the view's unscaled height. A value of 1, the default, means that no scaling is applied.\n     *\n     * <p>By default, this is 1.0f.\n     *\n     * @see #getPivotX()\n     * @see #getPivotY()\n     * @return The scaling factor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScaleY(float scaleY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the amount that the view is scaled in Y around the pivot point, as a proportion of\n     * the view's unscaled width. A value of 1 means that no scaling is applied.\n     *\n     * @param scaleY The scaling factor.\n     * @see #getPivotX()\n     * @see #getPivotY()\n     *\n     * @attr ref android.R.styleable#View_scaleY\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getPivotX()",
    "returnType" : "float",
    "comment" : "\n     * The x location of the point around which the view is {@link #setRotation(float) rotated}\n     * and {@link #setScaleX(float) scaled}.\n     *\n     * @see #getRotation()\n     * @see #getScaleX()\n     * @see #getScaleY()\n     * @see #getPivotY()\n     * @return The x location of the pivot point.\n     *\n     * @attr ref android.R.styleable#View_transformPivotX\n     ",
    "links" : [ "#setRotation(float)", "#setScaleX(float)" ]
  }, {
    "name" : "public void setPivotX(float pivotX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the x location of the point around which the view is\n     * {@link #setRotation(float) rotated} and {@link #setScaleX(float) scaled}.\n     * By default, the pivot point is centered on the object.\n     * Setting this property disables this behavior and causes the view to use only the\n     * explicitly set pivotX and pivotY values.\n     *\n     * @param pivotX The x location of the pivot point.\n     * @see #getRotation()\n     * @see #getScaleX()\n     * @see #getScaleY()\n     * @see #getPivotY()\n     *\n     * @attr ref android.R.styleable#View_transformPivotX\n     ",
    "links" : [ "#setRotation(float)", "#setScaleX(float)" ]
  }, {
    "name" : "public float getPivotY()",
    "returnType" : "float",
    "comment" : "\n     * The y location of the point around which the view is {@link #setRotation(float) rotated}\n     * and {@link #setScaleY(float) scaled}.\n     *\n     * @see #getRotation()\n     * @see #getScaleX()\n     * @see #getScaleY()\n     * @see #getPivotY()\n     * @return The y location of the pivot point.\n     *\n     * @attr ref android.R.styleable#View_transformPivotY\n     ",
    "links" : [ "#setScaleY(float)", "#setRotation(float)" ]
  }, {
    "name" : "public void setPivotY(float pivotY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the y location of the point around which the view is {@link #setRotation(float) rotated}\n     * and {@link #setScaleY(float) scaled}. By default, the pivot point is centered on the object.\n     * Setting this property disables this behavior and causes the view to use only the\n     * explicitly set pivotX and pivotY values.\n     *\n     * @param pivotY The y location of the pivot point.\n     * @see #getRotation()\n     * @see #getScaleX()\n     * @see #getScaleY()\n     * @see #getPivotY()\n     *\n     * @attr ref android.R.styleable#View_transformPivotY\n     ",
    "links" : [ "#setScaleY(float)", "#setRotation(float)" ]
  }, {
    "name" : "public boolean isPivotSet()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not a pivot has been set by a call to {@link #setPivotX(float)} or\n     * {@link #setPivotY(float)}. If no pivot has been set then the pivot will be the center\n     * of the view.\n     *\n     * @return True if a pivot has been set, false if the default pivot is being used\n     ",
    "links" : [ "#setPivotY(float)", "#setPivotX(float)" ]
  }, {
    "name" : "public void resetPivot()",
    "returnType" : "void",
    "comment" : "\n     * Clears any pivot previously set by a call to  {@link #setPivotX(float)} or\n     * {@link #setPivotY(float)}. After calling this {@link #isPivotSet()} will be false\n     * and the pivot used for rotation will return to default of being centered on the view.\n     ",
    "links" : [ "#setPivotY(float)", "#isPivotSet()", "#setPivotX(float)" ]
  }, {
    "name" : "public float getAlpha()",
    "returnType" : "float",
    "comment" : "\n     * The opacity of the view. This is a value from 0 to 1, where 0 means the view is\n     * completely transparent and 1 means the view is completely opaque.\n     *\n     * <p>By default this is 1.0f.\n     * @return The opacity of the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forceHasOverlappingRendering(boolean hasOverlappingRendering)",
    "returnType" : "void",
    "comment" : "\n     * Sets the behavior for overlapping rendering for this view (see {@link\n     * #hasOverlappingRendering()} for more details on this behavior). Calling this method\n     * is an alternative to overriding {@link #hasOverlappingRendering()} in a subclass,\n     * providing the value which is then used internally. That is, when {@link\n     * #forceHasOverlappingRendering(boolean)} is called, the value of {@link\n     * #hasOverlappingRendering()} is ignored and the value passed into this method is used\n     * instead.\n     *\n     * @param hasOverlappingRendering The value for overlapping rendering to be used internally\n     * instead of that returned by {@link #hasOverlappingRendering()}.\n     *\n     * @attr ref android.R.styleable#View_forceHasOverlappingRendering\n     ",
    "links" : [ "#hasOverlappingRendering()", "#forceHasOverlappingRendering(boolean)" ]
  }, {
    "name" : "public final boolean getHasOverlappingRendering()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value for overlapping rendering that is used internally. This is either\n     * the value passed into {@link #forceHasOverlappingRendering(boolean)}, if called, or\n     * the return value of {@link #hasOverlappingRendering()}, otherwise.\n     *\n     * @return The value for overlapping rendering being used internally.\n     ",
    "links" : [ "#hasOverlappingRendering()", "#forceHasOverlappingRendering(boolean)" ]
  }, {
    "name" : "public boolean hasOverlappingRendering()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this View has content which overlaps.\n     *\n     * <p>This function, intended to be overridden by specific View types, is an optimization when\n     * alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to\n     * an offscreen buffer and then composited into place, which can be expensive. If the view has\n     * no overlapping rendering, the view can draw each primitive with the appropriate alpha value\n     * directly. An example of overlapping rendering is a TextView with a background image, such as\n     * a Button. An example of non-overlapping rendering is a TextView with no background, or an\n     * ImageView with only the foreground image. The default implementation returns true; subclasses\n     * should override if they have cases which can be optimized.</p>\n     *\n     * <p><strong>Note:</strong> The return value of this method is ignored if {@link\n     * #forceHasOverlappingRendering(boolean)} has been called on this view.</p>\n     *\n     * @return true if the content in this view might overlap, false otherwise.\n     ",
    "links" : [ "#forceHasOverlappingRendering(boolean)" ]
  }, {
    "name" : "public void setAlpha(@FloatRange(from = 0.0, to = 1.0) float alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the opacity of the view to a value from 0 to 1, where 0 means the view is\n     * completely transparent and 1 means the view is completely opaque.\n     *\n     * <p class=\"note\"><strong>Note:</strong> setting alpha to a translucent value (0 < alpha < 1)\n     * can have significant performance implications, especially for large views. It is best to use\n     * the alpha property sparingly and transiently, as in the case of fading animations.</p>\n     *\n     * <p>For a view with a frequently changing alpha, such as during a fading animation, it is\n     * strongly recommended for performance reasons to either override\n     * {@link #hasOverlappingRendering()} to return <code>false</code> if appropriate, or setting a\n     * {@link #setLayerType(int, android.graphics.Paint) layer type} on the view for the duration\n     * of the animation. On versions {@link android.os.Build.VERSION_CODES#M} and below,\n     * the default path for rendering an unlayered View with alpha could add multiple milliseconds\n     * of rendering cost, even for simple or small views. Starting with\n     * {@link android.os.Build.VERSION_CODES#M}, {@link #LAYER_TYPE_HARDWARE} is automatically\n     * applied to the view at the rendering level.</p>\n     *\n     * <p>If this view overrides {@link #onSetAlpha(int)} to return true, then this view is\n     * responsible for applying the opacity itself.</p>\n     *\n     * <p>On versions {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} and below, note that if\n     * the view is backed by a {@link #setLayerType(int, android.graphics.Paint) layer} and is\n     * associated with a {@link #setLayerPaint(android.graphics.Paint) layer paint}, setting an\n     * alpha value less than 1.0 will supersede the alpha of the layer paint.</p>\n     *\n     * <p>Starting with {@link android.os.Build.VERSION_CODES#M}, setting a translucent alpha\n     * value will clip a View to its bounds, unless the View returns <code>false</code> from\n     * {@link #hasOverlappingRendering}.</p>\n     *\n     * @param alpha The opacity of the view.\n     *\n     * @see #hasOverlappingRendering()\n     * @see #setLayerType(int, android.graphics.Paint)\n     *\n     * @attr ref android.R.styleable#View_alpha\n     ",
    "links" : [ "#hasOverlappingRendering()", "#hasOverlappingRendering", "#setLayerType(int", "#LAYER_TYPE_HARDWARE", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "#onSetAlpha(int)", "#setLayerPaint(android.graphics.Paint)", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : " boolean setAlphaNoInvalidation(float alpha)",
    "returnType" : "boolean",
    "comment" : "\n     * Faster version of setAlpha() which performs the same steps except there are\n     * no calls to invalidate(). The caller of this function should perform proper invalidation\n     * on the parent and this object. The return value indicates whether the subclass handles\n     * alpha (the return value for onSetAlpha()).\n     *\n     * @param alpha The new value for the alpha property\n     * @return true if the View subclass handles alpha (the return value for onSetAlpha()) and\n     *         the new value for the alpha property is different from the old value\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAlphaInternal(float alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTransitionAlpha(float alpha)",
    "returnType" : "void",
    "comment" : "\n     * This property is intended only for use by the Fade transition, which animates it\n     * to produce a visual translucency that does not side-effect (or get affected by)\n     * the real alpha property. This value is composited with the other alpha value\n     * (and the AlphaAnimation value, when that is present) to produce a final visual\n     * translucency result, which is what is passed into the DisplayList.\n     ",
    "links" : [ ]
  }, {
    "name" : "private float getFinalAlpha()",
    "returnType" : "float",
    "comment" : "\n     * Calculates the visual alpha of this view, which is a combination of the actual\n     * alpha value and the transitionAlpha value (if set).\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTransitionAlpha()",
    "returnType" : "float",
    "comment" : "\n     * This property is intended only for use by the Fade transition, which animates\n     * it to produce a visual translucency that does not side-effect (or get affected\n     * by) the real alpha property. This value is composited with the other alpha\n     * value (and the AlphaAnimation value, when that is present) to produce a final\n     * visual translucency result, which is what is passed into the DisplayList.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForceDarkAllowed(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not to allow force dark to apply to this view.\n     *\n     * Setting this to false will disable the auto-dark feature on everything this view\n     * draws, including any descendants.\n     *\n     * Setting this to true will allow this view to be automatically made dark, however\n     * a value of 'true' will not override any 'false' value in its parent chain nor will\n     * it prevent any 'false' in any of its children.\n     *\n     * The default behavior of force dark is also influenced by the Theme's\n     * {@link android.R.styleable#Theme_isLightTheme isLightTheme} attribute.\n     * If a theme is isLightTheme=\"false\", then force dark is globally disabled for that theme.\n     *\n     * @param allow Whether or not to allow force dark.\n     ",
    "links" : [ "android.R.styleable#Theme_isLightTheme" ]
  }, {
    "name" : "public boolean isForceDarkAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link #setForceDarkAllowed(boolean)}\n     *\n     * @return true if force dark is allowed (default), false if it is disabled\n     ",
    "links" : [ "#setForceDarkAllowed(boolean)" ]
  }, {
    "name" : "public final int getTop()",
    "returnType" : "int",
    "comment" : "\n     * Top position of this view relative to its parent.\n     *\n     * @return The top of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setTop(int top)",
    "returnType" : "void",
    "comment" : "\n     * Sets the top position of this view relative to its parent. This method is meant to be called\n     * by the layout system and should not generally be called otherwise, because the property\n     * may be changed at any time by the layout.\n     *\n     * @param top The top of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getBottom()",
    "returnType" : "int",
    "comment" : "\n     * Bottom position of this view relative to its parent.\n     *\n     * @return The bottom of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDirty()",
    "returnType" : "boolean",
    "comment" : "\n     * True if this view has changed since the last time being drawn.\n     *\n     * @return The dirty state of this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setBottom(int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bottom position of this view relative to its parent. This method is meant to be\n     * called by the layout system and should not generally be called otherwise, because the\n     * property may be changed at any time by the layout.\n     *\n     * @param bottom The bottom of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getLeft()",
    "returnType" : "int",
    "comment" : "\n     * Left position of this view relative to its parent.\n     *\n     * @return The left edge of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setLeft(int left)",
    "returnType" : "void",
    "comment" : "\n     * Sets the left position of this view relative to its parent. This method is meant to be called\n     * by the layout system and should not generally be called otherwise, because the property\n     * may be changed at any time by the layout.\n     *\n     * @param left The left of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getRight()",
    "returnType" : "int",
    "comment" : "\n     * Right position of this view relative to its parent.\n     *\n     * @return The right edge of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setRight(int right)",
    "returnType" : "void",
    "comment" : "\n     * Sets the right position of this view relative to its parent. This method is meant to be called\n     * by the layout system and should not generally be called otherwise, because the property\n     * may be changed at any time by the layout.\n     *\n     * @param right The right of this view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float sanitizeFloatPropertyValue(float value, String propertyName)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float sanitizeFloatPropertyValue(float value, String propertyName, float min, float max)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getX()",
    "returnType" : "float",
    "comment" : "\n     * The visual x position of this view, in pixels. This is equivalent to the\n     * {@link #setTranslationX(float) translationX} property plus the current\n     * {@link #getLeft() left} property.\n     *\n     * @return The visual x position of this view, in pixels.\n     ",
    "links" : [ "#setTranslationX(float)", "#getLeft()" ]
  }, {
    "name" : "public void setX(float x)",
    "returnType" : "void",
    "comment" : "\n     * Sets the visual x position of this view, in pixels. This is equivalent to setting the\n     * {@link #setTranslationX(float) translationX} property to be the difference between\n     * the x value passed in and the current {@link #getLeft() left} property.\n     *\n     * @param x The visual x position of this view, in pixels.\n     ",
    "links" : [ "#setTranslationX(float)", "#getLeft()" ]
  }, {
    "name" : "public float getY()",
    "returnType" : "float",
    "comment" : "\n     * The visual y position of this view, in pixels. This is equivalent to the\n     * {@link #setTranslationY(float) translationY} property plus the current\n     * {@link #getTop() top} property.\n     *\n     * @return The visual y position of this view, in pixels.\n     ",
    "links" : [ "#setTranslationY(float)", "#getTop()" ]
  }, {
    "name" : "public void setY(float y)",
    "returnType" : "void",
    "comment" : "\n     * Sets the visual y position of this view, in pixels. This is equivalent to setting the\n     * {@link #setTranslationY(float) translationY} property to be the difference between\n     * the y value passed in and the current {@link #getTop() top} property.\n     *\n     * @param y The visual y position of this view, in pixels.\n     ",
    "links" : [ "#setTranslationY(float)", "#getTop()" ]
  }, {
    "name" : "public float getZ()",
    "returnType" : "float",
    "comment" : "\n     * The visual z position of this view, in pixels. This is equivalent to the\n     * {@link #setTranslationZ(float) translationZ} property plus the current\n     * {@link #getElevation() elevation} property.\n     *\n     * @return The visual z position of this view, in pixels.\n     ",
    "links" : [ "#setTranslationZ(float)", "#getElevation()" ]
  }, {
    "name" : "public void setZ(float z)",
    "returnType" : "void",
    "comment" : "\n     * Sets the visual z position of this view, in pixels. This is equivalent to setting the\n     * {@link #setTranslationZ(float) translationZ} property to be the difference between\n     * the z value passed in and the current {@link #getElevation() elevation} property.\n     *\n     * @param z The visual z position of this view, in pixels.\n     ",
    "links" : [ "#setTranslationZ(float)", "#getElevation()" ]
  }, {
    "name" : "public float getElevation()",
    "returnType" : "float",
    "comment" : "\n     * The base elevation of this view relative to its parent, in pixels.\n     *\n     * @return The base depth position of the view, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setElevation(float elevation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the base elevation of this view, in pixels.\n     *\n     * @attr ref android.R.styleable#View_elevation\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTranslationX()",
    "returnType" : "float",
    "comment" : "\n     * The horizontal location of this view relative to its {@link #getLeft() left} position.\n     * This position is post-layout, in addition to wherever the object's\n     * layout placed it.\n     *\n     * @return The horizontal position of this view relative to its left position, in pixels.\n     ",
    "links" : [ "#getLeft()" ]
  }, {
    "name" : "public void setTranslationX(float translationX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the horizontal location of this view relative to its {@link #getLeft() left} position.\n     * This effectively positions the object post-layout, in addition to wherever the object's\n     * layout placed it.\n     *\n     * @param translationX The horizontal position of this view relative to its left position,\n     * in pixels.\n     *\n     * @attr ref android.R.styleable#View_translationX\n     ",
    "links" : [ "#getLeft()" ]
  }, {
    "name" : "public float getTranslationY()",
    "returnType" : "float",
    "comment" : "\n     * The vertical location of this view relative to its {@link #getTop() top} position.\n     * This position is post-layout, in addition to wherever the object's\n     * layout placed it.\n     *\n     * @return The vertical position of this view relative to its top position,\n     * in pixels.\n     ",
    "links" : [ "#getTop()" ]
  }, {
    "name" : "public void setTranslationY(float translationY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the vertical location of this view relative to its {@link #getTop() top} position.\n     * This effectively positions the object post-layout, in addition to wherever the object's\n     * layout placed it.\n     *\n     * @param translationY The vertical position of this view relative to its top position,\n     * in pixels.\n     *\n     * @attr ref android.R.styleable#View_translationY\n     ",
    "links" : [ "#getTop()" ]
  }, {
    "name" : "public float getTranslationZ()",
    "returnType" : "float",
    "comment" : "\n     * The depth location of this view relative to its {@link #getElevation() elevation}.\n     *\n     * @return The depth of this view relative to its elevation.\n     ",
    "links" : [ "#getElevation()" ]
  }, {
    "name" : "public void setTranslationZ(float translationZ)",
    "returnType" : "void",
    "comment" : "\n     * Sets the depth location of this view relative to its {@link #getElevation() elevation}.\n     *\n     * @attr ref android.R.styleable#View_translationZ\n     ",
    "links" : [ "#getElevation()" ]
  }, {
    "name" : "public void setAnimationMatrix(@Nullable Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Changes the transformation matrix on the view. This is used in animation frameworks,\n     * such as {@link android.transition.Transition}. When the animation finishes, the matrix\n     * should be cleared by calling this method with <code>null</code> as the matrix parameter.\n     * Application developers should use transformation methods like {@link #setRotation(float)},\n     * {@link #setScaleX(float)}, {@link #setScaleX(float)}, {@link #setTranslationX(float)}}\n     * and {@link #setTranslationY(float)} (float)}} instead.\n     *\n     * @param matrix The matrix, null indicates that the matrix should be cleared.\n     * @see #getAnimationMatrix()\n     ",
    "links" : [ "#setRotation(float)", "#setTranslationX(float)", "#setTranslationY(float)", "android.transition.Transition", "#setScaleX(float)" ]
  }, {
    "name" : "public Matrix getAnimationMatrix()",
    "returnType" : "Matrix",
    "comment" : "\n     * Return the current transformation matrix of the view. This is used in animation frameworks,\n     * such as {@link android.transition.Transition}. Returns <code>null</code> when there is no\n     * transformation provided by {@link #setAnimationMatrix(Matrix)}.\n     * Application developers should use transformation methods like {@link #setRotation(float)},\n     * {@link #setScaleX(float)}, {@link #setScaleX(float)}, {@link #setTranslationX(float)}}\n     * and {@link #setTranslationY(float)} (float)}} instead.\n     *\n     * @return the Matrix, null indicates there is no transformation\n     * @see #setAnimationMatrix(Matrix)\n     ",
    "links" : [ "#setRotation(float)", "#setTranslationX(float)", "#setTranslationY(float)", "android.transition.Transition", "#setAnimationMatrix(Matrix)", "#setScaleX(float)" ]
  }, {
    "name" : "public StateListAnimator getStateListAnimator()",
    "returnType" : "StateListAnimator",
    "comment" : "\n     * Returns the current StateListAnimator if exists.\n     *\n     * @return StateListAnimator or null if it does not exists\n     * @see    #setStateListAnimator(android.animation.StateListAnimator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStateListAnimator(StateListAnimator stateListAnimator)",
    "returnType" : "void",
    "comment" : "\n     * Attaches the provided StateListAnimator to this View.\n     * <p>\n     * Any previously attached StateListAnimator will be detached.\n     *\n     * @param stateListAnimator The StateListAnimator to update the view\n     * @see android.animation.StateListAnimator\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getClipToOutline()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the Outline should be used to clip the contents of the View.\n     * <p>\n     * Note that this flag will only be respected if the View's Outline returns true from\n     * {@link Outline#canClip()}.\n     *\n     * @see #setOutlineProvider(ViewOutlineProvider)\n     * @see #setClipToOutline(boolean)\n     ",
    "links" : [ "android.graphics.Outline#canClip()" ]
  }, {
    "name" : "public void setClipToOutline(boolean clipToOutline)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the View's Outline should be used to clip the contents of the View.\n     * <p>\n     * Only a single non-rectangular clip can be applied on a View at any time.\n     * Circular clips from a {@link ViewAnimationUtils#createCircularReveal(View, int, int, float, float)\n     * circular reveal} animation take priority over Outline clipping, and\n     * child Outline clipping takes priority over Outline clipping done by a\n     * parent.\n     * <p>\n     * Note that this flag will only be respected if the View's Outline returns true from\n     * {@link Outline#canClip()}.\n     *\n     * @see #setOutlineProvider(ViewOutlineProvider)\n     * @see #getClipToOutline()\n     ",
    "links" : [ "android.view.ViewAnimationUtils#createCircularReveal(View", "android.graphics.Outline#canClip()" ]
  }, {
    "name" : "private void setOutlineProviderFromAttribute(int providerInt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOutlineProvider(ViewOutlineProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link ViewOutlineProvider} of the view, which generates the Outline that defines\n     * the shape of the shadow it casts, and enables outline clipping.\n     * <p>\n     * The default ViewOutlineProvider, {@link ViewOutlineProvider#BACKGROUND}, queries the Outline\n     * from the View's background drawable, via {@link Drawable#getOutline(Outline)}. Changing the\n     * outline provider with this method allows this behavior to be overridden.\n     * <p>\n     * If the ViewOutlineProvider is null, if querying it for an outline returns false,\n     * or if the produced Outline is {@link Outline#isEmpty()}, shadows will not be cast.\n     * <p>\n     * Only outlines that return true from {@link Outline#canClip()} may be used for clipping.\n     *\n     * @see #setClipToOutline(boolean)\n     * @see #getClipToOutline()\n     * @see #getOutlineProvider()\n     ",
    "links" : [ "android.graphics.Outline#isEmpty()", "android.graphics.drawable.ColorDrawable#getOutline(Outline)", "android.view.ViewOutlineProvider", "android.graphics.Outline#canClip()", "android.view.ViewOutlineProvider#BACKGROUND" ]
  }, {
    "name" : "public ViewOutlineProvider getOutlineProvider()",
    "returnType" : "ViewOutlineProvider",
    "comment" : "\n     * Returns the current {@link ViewOutlineProvider} of the view, which generates the Outline\n     * that defines the shape of the shadow it casts, and enables outline clipping.\n     *\n     * @see #setOutlineProvider(ViewOutlineProvider)\n     ",
    "links" : [ "android.view.ViewOutlineProvider" ]
  }, {
    "name" : "public void invalidateOutline()",
    "returnType" : "void",
    "comment" : "\n     * Called to rebuild this View's Outline from its {@link ViewOutlineProvider outline provider}\n     *\n     * @see #setOutlineProvider(ViewOutlineProvider)\n     ",
    "links" : [ "android.view.ViewOutlineProvider" ]
  }, {
    "name" : "private void rebuildOutline()",
    "returnType" : "void",
    "comment" : "\n     * Internal version of {@link #invalidateOutline()} which invalidates the\n     * outline without invalidating the view itself. This is intended to be called from\n     * within methods in the View class itself which are the result of the view being\n     * invalidated already. For example, when we are drawing the background of a View,\n     * we invalidate the outline in case it changed in the meantime, but we do not\n     * need to invalidate the view because we're already drawing the background as part\n     * of drawing the view in response to an earlier invalidation of the view.\n     ",
    "links" : [ "#invalidateOutline()" ]
  }, {
    "name" : "public boolean hasShadow()",
    "returnType" : "boolean",
    "comment" : "\n     * HierarchyViewer only\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutlineSpotShadowColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color of the spot shadow that is drawn when the view has a positive Z or\n     * elevation value.\n     * <p>\n     * By default the shadow color is black. Generally, this color will be opaque so the intensity\n     * of the shadow is consistent between different views with different colors.\n     * <p>\n     * The opacity of the final spot shadow is a function of the shadow caster height, the\n     * alpha channel of the outlineSpotShadowColor (typically opaque), and the\n     * {@link android.R.attr#spotShadowAlpha} theme attribute.\n     *\n     * @attr ref android.R.styleable#View_outlineSpotShadowColor\n     * @param color The color this View will cast for its elevation spot shadow.\n     ",
    "links" : [ "android.R.attr#spotShadowAlpha" ]
  }, {
    "name" : "public int getOutlineSpotShadowColor()",
    "returnType" : "int",
    "comment" : "\n     * @return The shadow color set by {@link #setOutlineSpotShadowColor(int)}, or black if nothing\n     * was set\n     ",
    "links" : [ "#setOutlineSpotShadowColor(int)" ]
  }, {
    "name" : "public void setOutlineAmbientShadowColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color of the ambient shadow that is drawn when the view has a positive Z or\n     * elevation value.\n     * <p>\n     * By default the shadow color is black. Generally, this color will be opaque so the intensity\n     * of the shadow is consistent between different views with different colors.\n     * <p>\n     * The opacity of the final ambient shadow is a function of the shadow caster height, the\n     * alpha channel of the outlineAmbientShadowColor (typically opaque), and the\n     * {@link android.R.attr#ambientShadowAlpha} theme attribute.\n     *\n     * @attr ref android.R.styleable#View_outlineAmbientShadowColor\n     * @param color The color this View will cast for its elevation shadow.\n     ",
    "links" : [ "android.R.attr#ambientShadowAlpha" ]
  }, {
    "name" : "public int getOutlineAmbientShadowColor()",
    "returnType" : "int",
    "comment" : "\n     * @return The shadow color set by {@link #setOutlineAmbientShadowColor(int)}, or black if\n     * nothing was set\n     ",
    "links" : [ "#setOutlineAmbientShadowColor(int)" ]
  }, {
    "name" : "public void setRevealClip(boolean shouldClip, float x, float y, float radius)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void getHitRect(Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Hit rectangle in parent's coordinates\n     *\n     * @param outRect The hit rectangle of the view.\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean pointInView(float localX, float localY)",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public boolean pointInView(float localX, float localY, float slop)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility method to determine whether the given point, in local coordinates,\n     * is inside the view, where the area of the view is expanded by the slop factor.\n     * This method is called while processing touch-move events to determine if the event\n     * is still within the view.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getFocusedRect(Rect r)",
    "returnType" : "void",
    "comment" : "\n     * When a view has focus and the user navigates away from it, the next view is searched for\n     * starting from the rectangle filled in by this method.\n     *\n     * By default, the rectangle is the {@link #getDrawingRect(android.graphics.Rect)})\n     * of the view.  However, if your view maintains some idea of internal selection,\n     * such as a cursor, or a selected row or column, you should override this method and\n     * fill in a more specific rectangle.\n     *\n     * @param r The rectangle to fill in, in this view's coordinates.\n     ",
    "links" : [ "#getDrawingRect(android.graphics.Rect)" ]
  }, {
    "name" : "public boolean getGlobalVisibleRect(Rect r, Point globalOffset)",
    "returnType" : "boolean",
    "comment" : "\n     * If some part of this view is not clipped by any of its parents, then\n     * return that area in r in global (root) coordinates. To convert r to local\n     * coordinates (without taking possible View rotations into account), offset\n     * it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)).\n     * If the view is completely clipped or translated out, return false.\n     *\n     * @param r If true is returned, r holds the global coordinates of the\n     *        visible portion of this view.\n     * @param globalOffset If true is returned, globalOffset holds the dx,dy\n     *        between this view and its root. globalOffet may be null.\n     * @return true if r is non-empty (i.e. part of the view is visible at the\n     *         root level.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getGlobalVisibleRect(Rect r)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean getLocalVisibleRect(Rect r)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void offsetTopAndBottom(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Offset this view's vertical location by the specified number of pixels.\n     *\n     * @param offset the number of pixels to offset the view by\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offsetLeftAndRight(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Offset this view's horizontal location by the specified amount of pixels.\n     *\n     * @param offset the number of pixels to offset the view by\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewGroup.LayoutParams getLayoutParams()",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "\n     * Get the LayoutParams associated with this view. All views should have\n     * layout parameters. These supply parameters to the <i>parent</i> of this\n     * view specifying how it should be arranged. There are many subclasses of\n     * ViewGroup.LayoutParams, and these correspond to the different subclasses\n     * of ViewGroup that are responsible for arranging their children.\n     *\n     * This method may return null if this View is not attached to a parent\n     * ViewGroup or {@link #setLayoutParams(android.view.ViewGroup.LayoutParams)}\n     * was not invoked successfully. When a View is attached to a parent\n     * ViewGroup, this method must not return null.\n     *\n     * @return The LayoutParams associated with this view, or null if no\n     *         parameters have been set yet\n     ",
    "links" : [ "#setLayoutParams(android.view.ViewGroup.LayoutParams)" ]
  }, {
    "name" : "public void setLayoutParams(ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Set the layout parameters associated with this view. These supply\n     * parameters to the <i>parent</i> of this view specifying how it should be\n     * arranged. There are many subclasses of ViewGroup.LayoutParams, and these\n     * correspond to the different subclasses of ViewGroup that are responsible\n     * for arranging their children.\n     *\n     * @param params The layout parameters for this view, cannot be null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resolveLayoutParams()",
    "returnType" : "void",
    "comment" : "\n     * Resolve the layout parameters depending on the resolved layout direction\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scrollTo(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     ",
    "links" : [ "#onScrollChanged(int" ]
  }, {
    "name" : "public void scrollBy(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     ",
    "links" : [ "#onScrollChanged(int" ]
  }, {
    "name" : "protected boolean awakenScrollBars()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Trigger the scrollbars to draw. When invoked this method starts an\n     * animation to fade the scrollbars out after a default delay. If a subclass\n     * provides animated scrolling, the start delay should equal the duration\n     * of the scrolling animation.</p>\n     *\n     * <p>The animation starts only if at least one of the scrollbars is\n     * enabled, as specified by {@link #isHorizontalScrollBarEnabled()} and\n     * {@link #isVerticalScrollBarEnabled()}. When the animation is started,\n     * this method returns true, and false otherwise. If the animation is\n     * started, this method calls {@link #invalidate()}; in that case the\n     * caller should not call {@link #invalidate()}.</p>\n     *\n     * <p>This method should be invoked every time a subclass directly updates\n     * the scroll parameters.</p>\n     *\n     * <p>This method is automatically invoked by {@link #scrollBy(int, int)}\n     * and {@link #scrollTo(int, int)}.</p>\n     *\n     * @return true if the animation is played, false otherwise\n     *\n     * @see #awakenScrollBars(int)\n     * @see #scrollBy(int, int)\n     * @see #scrollTo(int, int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ "#isHorizontalScrollBarEnabled()", "#scrollBy(int", "#isVerticalScrollBarEnabled()", "#invalidate()", "#scrollTo(int" ]
  }, {
    "name" : "private boolean initialAwakenScrollBars()",
    "returnType" : "boolean",
    "comment" : "\n     * Trigger the scrollbars to draw.\n     * This method differs from awakenScrollBars() only in its default duration.\n     * initialAwakenScrollBars() will show the scroll bars for longer than\n     * usual to give the user more of a chance to notice them.\n     *\n     * @return true if the animation is played, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean awakenScrollBars(int startDelay)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>\n     * Trigger the scrollbars to draw. When invoked this method starts an\n     * animation to fade the scrollbars out after a fixed delay. If a subclass\n     * provides animated scrolling, the start delay should equal the duration of\n     * the scrolling animation.\n     * </p>\n     *\n     * <p>\n     * The animation starts only if at least one of the scrollbars is enabled,\n     * as specified by {@link #isHorizontalScrollBarEnabled()} and\n     * {@link #isVerticalScrollBarEnabled()}. When the animation is started,\n     * this method returns true, and false otherwise. If the animation is\n     * started, this method calls {@link #invalidate()}; in that case the caller\n     * should not call {@link #invalidate()}.\n     * </p>\n     *\n     * <p>\n     * This method should be invoked every time a subclass directly updates the\n     * scroll parameters.\n     * </p>\n     *\n     * @param startDelay the delay, in milliseconds, after which the animation\n     *        should start; when the delay is 0, the animation starts\n     *        immediately\n     * @return true if the animation is played, false otherwise\n     *\n     * @see #scrollBy(int, int)\n     * @see #scrollTo(int, int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ "#isHorizontalScrollBarEnabled()", "#isVerticalScrollBarEnabled()", "#invalidate()" ]
  }, {
    "name" : "protected boolean awakenScrollBars(int startDelay, boolean invalidate)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>\n     * Trigger the scrollbars to draw. When invoked this method starts an\n     * animation to fade the scrollbars out after a fixed delay. If a subclass\n     * provides animated scrolling, the start delay should equal the duration of\n     * the scrolling animation.\n     * </p>\n     *\n     * <p>\n     * The animation starts only if at least one of the scrollbars is enabled,\n     * as specified by {@link #isHorizontalScrollBarEnabled()} and\n     * {@link #isVerticalScrollBarEnabled()}. When the animation is started,\n     * this method returns true, and false otherwise. If the animation is\n     * started, this method calls {@link #invalidate()} if the invalidate parameter\n     * is set to true; in that case the caller\n     * should not call {@link #invalidate()}.\n     * </p>\n     *\n     * <p>\n     * This method should be invoked every time a subclass directly updates the\n     * scroll parameters.\n     * </p>\n     *\n     * @param startDelay the delay, in milliseconds, after which the animation\n     *        should start; when the delay is 0, the animation starts\n     *        immediately\n     *\n     * @param invalidate Whether this method should call invalidate\n     *\n     * @return true if the animation is played, false otherwise\n     *\n     * @see #scrollBy(int, int)\n     * @see #scrollTo(int, int)\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #isVerticalScrollBarEnabled()\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ "#isHorizontalScrollBarEnabled()", "#isVerticalScrollBarEnabled()", "#invalidate()" ]
  }, {
    "name" : "private boolean skipInvalidate()",
    "returnType" : "boolean",
    "comment" : "\n     * Do not invalidate views which are not visible and which are not running an animation. They\n     * will not get drawn and they should not set dirty flags as if they will be drawn\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidate(Rect dirty)",
    "returnType" : "void",
    "comment" : "\n     * Mark the area defined by dirty as needing to be drawn. If the view is\n     * visible, {@link #onDraw(android.graphics.Canvas)} will be called at some\n     * point in the future.\n     * <p>\n     * This must be called from a UI thread. To call from a non-UI thread, call\n     * {@link #postInvalidate()}.\n     * <p>\n     * <b>WARNING:</b> In API 19 and below, this method may be destructive to\n     * {@code dirty}.\n     *\n     * @param dirty the rectangle representing the bounds of the dirty region\n     *\n     * @deprecated The switch to hardware accelerated rendering in API 14 reduced\n     * the importance of the dirty rectangle. In API 21 the given rectangle is\n     * ignored entirely in favor of an internally-calculated area instead.\n     * Because of this, clients are encouraged to just call {@link #invalidate()}.\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)", "#postInvalidate()", "#invalidate()" ]
  }, {
    "name" : "public void invalidate(int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * Mark the area defined by the rect (l,t,r,b) as needing to be drawn. The\n     * coordinates of the dirty rect are relative to the view. If the view is\n     * visible, {@link #onDraw(android.graphics.Canvas)} will be called at some\n     * point in the future.\n     * <p>\n     * This must be called from a UI thread. To call from a non-UI thread, call\n     * {@link #postInvalidate()}.\n     *\n     * @param l the left position of the dirty region\n     * @param t the top position of the dirty region\n     * @param r the right position of the dirty region\n     * @param b the bottom position of the dirty region\n     *\n     * @deprecated The switch to hardware accelerated rendering in API 14 reduced\n     * the importance of the dirty rectangle. In API 21 the given rectangle is\n     * ignored entirely in favor of an internally-calculated area instead.\n     * Because of this, clients are encouraged to just call {@link #invalidate()}.\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)", "#postInvalidate()", "#invalidate()" ]
  }, {
    "name" : "public void invalidate()",
    "returnType" : "void",
    "comment" : "\n     * Invalidate the whole view. If the view is visible,\n     * {@link #onDraw(android.graphics.Canvas)} will be called at some point in\n     * the future.\n     * <p>\n     * This must be called from a UI thread. To call from a non-UI thread, call\n     * {@link #postInvalidate()}.\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)", "#postInvalidate()" ]
  }, {
    "name" : "public void invalidate(boolean invalidateCache)",
    "returnType" : "void",
    "comment" : "\n     * This is where the invalidate() work actually happens. A full invalidate()\n     * causes the drawing cache to be invalidated, but this function can be\n     * called with invalidateCache set to false to skip that invalidation step\n     * for cases that do not need it (for example, a component that remains at\n     * the same dimensions with the same content).\n     *\n     * @param invalidateCache Whether the drawing cache for this view should be\n     *            invalidated as well. This is usually true for a full\n     *            invalidate, but may be set to false if the View's contents or\n     *            dimensions have not changed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache, boolean fullInvalidate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View getProjectionReceiver()",
    "returnType" : "View",
    "comment" : "\n     * @return this view's projection receiver, or {@code null} if none exists\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isProjectionReceiver()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the view is a projection receiver\n     ",
    "links" : [ ]
  }, {
    "name" : " void invalidateViewProperty(boolean invalidateParent, boolean forceRedraw)",
    "returnType" : "void",
    "comment" : "\n     * Quick invalidation for View property changes (alpha, translationXY, etc.). We don't want to\n     * set any flags or handle all of the cases handled by the default invalidation methods.\n     * Instead, we just want to schedule a traversal in ViewRootImpl with the appropriate\n     * dirty rect. This method calls into fast invalidation methods in ViewGroup that\n     * walk up the hierarchy, transforming the dirty rect as necessary.\n     *\n     * The method also handles normal invalidation logic if display list properties are not\n     * being used in this view. The invalidateParent and forceRedraw flags are used by that\n     * backup approach, to handle these cases used in the various property-setting methods.\n     *\n     * @param invalidateParent Force a call to invalidateParentCaches() if display list properties\n     * are not being used in this view\n     * @param forceRedraw Mark the view as DRAWN to force the invalidation to propagate, if display\n     * list properties are not being used in this view\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void damageInParent()",
    "returnType" : "void",
    "comment" : "\n     * Tells the parent view to damage this view's bounds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void invalidateParentCaches()",
    "returnType" : "void",
    "comment" : "\n     * Used to indicate that the parent of this view should clear its caches. This functionality\n     * is used to force the parent to rebuild its display list (when hardware-accelerated),\n     * which is necessary when various parent-managed properties of the view change, such as\n     * alpha, translationX/Y, scrollX/Y, scaleX/Y, and rotation/X/Y. This method only\n     * clears the parent caches and does not causes an invalidate event.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void invalidateParentIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * Used to indicate that the parent of this view should be invalidated. This functionality\n     * is used to force the parent to rebuild its display list (when hardware-accelerated),\n     * which is necessary when various parent-managed properties of the view change, such as\n     * alpha, translationX/Y, scrollX/Y, scaleX/Y, and rotation/X/Y. This method will propagate\n     * an invalidation event to the parent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void invalidateParentIfNeededAndWasQuickRejected()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this View is opaque. An opaque View guarantees that it will\n     * draw all the pixels overlapping its bounds using a fully opaque color.\n     *\n     * Subclasses of View should override this method whenever possible to indicate\n     * whether an instance is opaque. Opaque Views are treated in a special way by\n     * the View hierarchy, possibly allowing it to perform optimizations during\n     * invalidate/draw passes.\n     *\n     * @return True if this View is guaranteed to be fully opaque, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void computeOpaqueFlags()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean hasOpaqueScrollbars()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * @return A handler associated with the thread running the View. This\n     * handler can be used to pump events in the UI events queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "private HandlerActionQueue getRunQueue()",
    "returnType" : "HandlerActionQueue",
    "comment" : "\n     * Returns the queue of runnable for this view.\n     *\n     * @return the queue of runnables for this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewRootImpl getViewRootImpl()",
    "returnType" : "ViewRootImpl",
    "comment" : "\n     * Gets the view root associated with the View.\n     * @return The view root, or null if none.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ThreadedRenderer getThreadedRenderer()",
    "returnType" : "ThreadedRenderer",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean post(Runnable action)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Causes the Runnable to be added to the message queue.\n     * The runnable will be run on the user interface thread.</p>\n     *\n     * @param action The Runnable that will be executed.\n     *\n     * @return Returns true if the Runnable was successfully placed in to the\n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     *\n     * @see #postDelayed\n     * @see #removeCallbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postDelayed(Runnable action, long delayMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Causes the Runnable to be added to the message queue, to be run\n     * after the specified amount of time elapses.\n     * The runnable will be run on the user interface thread.</p>\n     *\n     * @param action The Runnable that will be executed.\n     * @param delayMillis The delay (in milliseconds) until the Runnable\n     *        will be executed.\n     *\n     * @return true if the Runnable was successfully placed in to the\n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the Runnable will be processed --\n     *         if the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     *\n     * @see #post\n     * @see #removeCallbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postOnAnimation(Runnable action)",
    "returnType" : "void",
    "comment" : "\n     * <p>Causes the Runnable to execute on the next animation time step.\n     * The runnable will be run on the user interface thread.</p>\n     *\n     * @param action The Runnable that will be executed.\n     *\n     * @see #postOnAnimationDelayed\n     * @see #removeCallbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postOnAnimationDelayed(Runnable action, long delayMillis)",
    "returnType" : "void",
    "comment" : "\n     * <p>Causes the Runnable to execute on the next animation time step,\n     * after the specified amount of time elapses.\n     * The runnable will be run on the user interface thread.</p>\n     *\n     * @param action The Runnable that will be executed.\n     * @param delayMillis The delay (in milliseconds) until the Runnable\n     *        will be executed.\n     *\n     * @see #postOnAnimation\n     * @see #removeCallbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeCallbacks(Runnable action)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Removes the specified Runnable from the message queue.</p>\n     *\n     * @param action The Runnable to remove from the message handling queue\n     *\n     * @return true if this view could ask the Handler to remove the Runnable,\n     *         false otherwise. When the returned value is true, the Runnable\n     *         may or may not have been actually removed from the message queue\n     *         (for instance, if the Runnable was not in the queue already.)\n     *\n     * @see #post\n     * @see #postDelayed\n     * @see #postOnAnimation\n     * @see #postOnAnimationDelayed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidate()",
    "returnType" : "void",
    "comment" : "\n     * <p>Cause an invalidate to happen on a subsequent cycle through the event loop.\n     * Use this to invalidate the View from a non-UI thread.</p>\n     *\n     * <p>This method can be invoked from outside of the UI thread\n     * only when this View is attached to a window.</p>\n     *\n     * @see #invalidate()\n     * @see #postInvalidateDelayed(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidate(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * <p>Cause an invalidate of the specified area to happen on a subsequent cycle\n     * through the event loop. Use this to invalidate the View from a non-UI thread.</p>\n     *\n     * <p>This method can be invoked from outside of the UI thread\n     * only when this View is attached to a window.</p>\n     *\n     * @param left The left coordinate of the rectangle to invalidate.\n     * @param top The top coordinate of the rectangle to invalidate.\n     * @param right The right coordinate of the rectangle to invalidate.\n     * @param bottom The bottom coordinate of the rectangle to invalidate.\n     *\n     * @see #invalidate(int, int, int, int)\n     * @see #invalidate(Rect)\n     * @see #postInvalidateDelayed(long, int, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidateDelayed(long delayMilliseconds)",
    "returnType" : "void",
    "comment" : "\n     * <p>Cause an invalidate to happen on a subsequent cycle through the event\n     * loop. Waits for the specified amount of time.</p>\n     *\n     * <p>This method can be invoked from outside of the UI thread\n     * only when this View is attached to a window.</p>\n     *\n     * @param delayMilliseconds the duration in milliseconds to delay the\n     *         invalidation by\n     *\n     * @see #invalidate()\n     * @see #postInvalidate()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * <p>Cause an invalidate of the specified area to happen on a subsequent cycle\n     * through the event loop. Waits for the specified amount of time.</p>\n     *\n     * <p>This method can be invoked from outside of the UI thread\n     * only when this View is attached to a window.</p>\n     *\n     * @param delayMilliseconds the duration in milliseconds to delay the\n     *         invalidation by\n     * @param left The left coordinate of the rectangle to invalidate.\n     * @param top The top coordinate of the rectangle to invalidate.\n     * @param right The right coordinate of the rectangle to invalidate.\n     * @param bottom The bottom coordinate of the rectangle to invalidate.\n     *\n     * @see #invalidate(int, int, int, int)\n     * @see #invalidate(Rect)\n     * @see #postInvalidate(int, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidateOnAnimation()",
    "returnType" : "void",
    "comment" : "\n     * <p>Cause an invalidate to happen on the next animation time step, typically the\n     * next display frame.</p>\n     *\n     * <p>This method can be invoked from outside of the UI thread\n     * only when this View is attached to a window.</p>\n     *\n     * @see #invalidate()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidateOnAnimation(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * <p>Cause an invalidate of the specified area to happen on the next animation\n     * time step, typically the next display frame.</p>\n     *\n     * <p>This method can be invoked from outside of the UI thread\n     * only when this View is attached to a window.</p>\n     *\n     * @param left The left coordinate of the rectangle to invalidate.\n     * @param top The top coordinate of the rectangle to invalidate.\n     * @param right The right coordinate of the rectangle to invalidate.\n     * @param bottom The bottom coordinate of the rectangle to invalidate.\n     *\n     * @see #invalidate(int, int, int, int)\n     * @see #invalidate(Rect)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void postSendViewScrolledAccessibilityEventCallback(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Post a callback to send a {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n     * This event is sent at most once every\n     * {@link ViewConfiguration#getSendRecurringAccessibilityEventsInterval()}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED", "android.view.ViewConfiguration#getSendRecurringAccessibilityEventsInterval()" ]
  }, {
    "name" : "public void computeScroll()",
    "returnType" : "void",
    "comment" : "\n     * Called by a parent to request that a child update its values for mScrollX\n     * and mScrollY if necessary. This will typically be done if the child is\n     * animating a scroll using a {@link android.widget.Scroller Scroller}\n     * object.\n     ",
    "links" : [ "android.widget.Scroller" ]
  }, {
    "name" : "public boolean isHorizontalFadingEdgeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the horizontal edges are faded when the view is\n     * scrolled horizontally.</p>\n     *\n     * @return true if the horizontal edges should are faded on scroll, false\n     *         otherwise\n     *\n     * @see #setHorizontalFadingEdgeEnabled(boolean)\n     *\n     * @attr ref android.R.styleable#View_requiresFadingEdge\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Define whether the horizontal edges should be faded when this view\n     * is scrolled horizontally.</p>\n     *\n     * @param horizontalFadingEdgeEnabled true if the horizontal edges should\n     *                                    be faded when the view is scrolled\n     *                                    horizontally\n     *\n     * @see #isHorizontalFadingEdgeEnabled()\n     *\n     * @attr ref android.R.styleable#View_requiresFadingEdge\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVerticalFadingEdgeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the vertical edges are faded when the view is\n     * scrolled horizontally.</p>\n     *\n     * @return true if the vertical edges should are faded on scroll, false\n     *         otherwise\n     *\n     * @see #setVerticalFadingEdgeEnabled(boolean)\n     *\n     * @attr ref android.R.styleable#View_requiresFadingEdge\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Define whether the vertical edges should be faded when this view\n     * is scrolled vertically.</p>\n     *\n     * @param verticalFadingEdgeEnabled true if the vertical edges should\n     *                                  be faded when the view is scrolled\n     *                                  vertically\n     *\n     * @see #isVerticalFadingEdgeEnabled()\n     *\n     * @attr ref android.R.styleable#View_requiresFadingEdge\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFadingEdge()",
    "returnType" : "int",
    "comment" : "\n     * Get the fading edge flags, used for inspection.\n     *\n     * @return One of {@link #FADING_EDGE_NONE}, {@link #FADING_EDGE_VERTICAL},\n     *         or {@link #FADING_EDGE_HORIZONTAL}\n     * @hide\n     ",
    "links" : [ "#FADING_EDGE_HORIZONTAL", "#FADING_EDGE_NONE", "#FADING_EDGE_VERTICAL" ]
  }, {
    "name" : "public int getFadingEdgeLength()",
    "returnType" : "int",
    "comment" : "\n     * Get the fading edge length, used for inspection\n     *\n     * @return The fading edge length or 0\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected float getTopFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "\n     * Returns the strength, or intensity, of the top faded edge. The strength is\n     * a value between 0.0 (no fade) and 1.0 (full fade). The default implementation\n     * returns 0.0 or 1.0 but no value in between.\n     *\n     * Subclasses should override this method to provide a smoother fade transition\n     * when scrolling occurs.\n     *\n     * @return the intensity of the top fade as a float between 0.0f and 1.0f\n     ",
    "links" : [ ]
  }, {
    "name" : "protected float getBottomFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "\n     * Returns the strength, or intensity, of the bottom faded edge. The strength is\n     * a value between 0.0 (no fade) and 1.0 (full fade). The default implementation\n     * returns 0.0 or 1.0 but no value in between.\n     *\n     * Subclasses should override this method to provide a smoother fade transition\n     * when scrolling occurs.\n     *\n     * @return the intensity of the bottom fade as a float between 0.0f and 1.0f\n     ",
    "links" : [ ]
  }, {
    "name" : "protected float getLeftFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "\n     * Returns the strength, or intensity, of the left faded edge. The strength is\n     * a value between 0.0 (no fade) and 1.0 (full fade). The default implementation\n     * returns 0.0 or 1.0 but no value in between.\n     *\n     * Subclasses should override this method to provide a smoother fade transition\n     * when scrolling occurs.\n     *\n     * @return the intensity of the left fade as a float between 0.0f and 1.0f\n     ",
    "links" : [ ]
  }, {
    "name" : "protected float getRightFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "\n     * Returns the strength, or intensity, of the right faded edge. The strength is\n     * a value between 0.0 (no fade) and 1.0 (full fade). The default implementation\n     * returns 0.0 or 1.0 but no value in between.\n     *\n     * Subclasses should override this method to provide a smoother fade transition\n     * when scrolling occurs.\n     *\n     * @return the intensity of the right fade as a float between 0.0f and 1.0f\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHorizontalScrollBarEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the horizontal scrollbar should be drawn or not. The\n     * scrollbar is not drawn by default.</p>\n     *\n     * @return true if the horizontal scrollbar should be painted, false\n     *         otherwise\n     *\n     * @see #setHorizontalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Define whether the horizontal scrollbar should be drawn or not. The\n     * scrollbar is not drawn by default.</p>\n     *\n     * @param horizontalScrollBarEnabled true if the horizontal scrollbar should\n     *                                   be painted\n     *\n     * @see #isHorizontalScrollBarEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVerticalScrollBarEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the vertical scrollbar should be drawn or not. The\n     * scrollbar is not drawn by default.</p>\n     *\n     * @return true if the vertical scrollbar should be painted, false\n     *         otherwise\n     *\n     * @see #setVerticalScrollBarEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Define whether the vertical scrollbar should be drawn or not. The\n     * scrollbar is not drawn by default.</p>\n     *\n     * @param verticalScrollBarEnabled true if the vertical scrollbar should\n     *                                 be painted\n     *\n     * @see #isVerticalScrollBarEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void recomputePadding()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollbarFadingEnabled(boolean fadeScrollbars)",
    "returnType" : "void",
    "comment" : "\n     * Define whether scrollbars will fade when the view is not scrolling.\n     *\n     * @param fadeScrollbars whether to enable fading\n     *\n     * @attr ref android.R.styleable#View_fadeScrollbars\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScrollbarFadingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     *\n     * Returns true if scrollbars will fade when this view is not scrolling\n     *\n     * @return true if scrollbar fading is enabled\n     *\n     * @attr ref android.R.styleable#View_fadeScrollbars\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollBarDefaultDelayBeforeFade()",
    "returnType" : "int",
    "comment" : "\n     *\n     * Returns the delay before scrollbars fade.\n     *\n     * @return the delay before scrollbars fade\n     *\n     * @attr ref android.R.styleable#View_scrollbarDefaultDelayBeforeFade\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade)",
    "returnType" : "void",
    "comment" : "\n     * Define the delay before scrollbars fade.\n     *\n     * @param scrollBarDefaultDelayBeforeFade - the delay before scrollbars fade\n     *\n     * @attr ref android.R.styleable#View_scrollbarDefaultDelayBeforeFade\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollBarFadeDuration()",
    "returnType" : "int",
    "comment" : "\n     *\n     * Returns the scrollbar fade duration.\n     *\n     * @return the scrollbar fade duration, in milliseconds\n     *\n     * @attr ref android.R.styleable#View_scrollbarFadeDuration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollBarFadeDuration(int scrollBarFadeDuration)",
    "returnType" : "void",
    "comment" : "\n     * Define the scrollbar fade duration.\n     *\n     * @param scrollBarFadeDuration - the scrollbar fade duration, in milliseconds\n     *\n     * @attr ref android.R.styleable#View_scrollbarFadeDuration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollBarSize()",
    "returnType" : "int",
    "comment" : "\n     *\n     * Returns the scrollbar size.\n     *\n     * @return the scrollbar size\n     *\n     * @attr ref android.R.styleable#View_scrollbarSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollBarSize(int scrollBarSize)",
    "returnType" : "void",
    "comment" : "\n     * Define the scrollbar size.\n     *\n     * @param scrollBarSize - the scrollbar size\n     *\n     * @attr ref android.R.styleable#View_scrollbarSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollBarStyle(@ScrollBarStyle int style)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specify the style of the scrollbars. The scrollbars can be overlaid or\n     * inset. When inset, they add to the padding of the view. And the scrollbars\n     * can be drawn inside the padding area or on the edge of the view. For example,\n     * if a view has a background drawable and you want to draw the scrollbars\n     * inside the padding specified by the drawable, you can use\n     * SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to\n     * appear at the edge of the view, ignoring the padding, then you can use\n     * SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.</p>\n     * @param style the style of the scrollbars. Should be one of\n     * SCROLLBARS_INSIDE_OVERLAY, SCROLLBARS_INSIDE_INSET,\n     * SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.\n     * @see #SCROLLBARS_INSIDE_OVERLAY\n     * @see #SCROLLBARS_INSIDE_INSET\n     * @see #SCROLLBARS_OUTSIDE_OVERLAY\n     * @see #SCROLLBARS_OUTSIDE_INSET\n     *\n     * @attr ref android.R.styleable#View_scrollbarStyle\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollBarStyle()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the current scrollbar style.</p>\n     * @return the current scrollbar style\n     * @see #SCROLLBARS_INSIDE_OVERLAY\n     * @see #SCROLLBARS_INSIDE_INSET\n     * @see #SCROLLBARS_OUTSIDE_OVERLAY\n     * @see #SCROLLBARS_OUTSIDE_INSET\n     *\n     * @attr ref android.R.styleable#View_scrollbarStyle\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollRange()",
    "returnType" : "int",
    "comment" : "\n     * <p>Compute the horizontal range that the horizontal scrollbar\n     * represents.</p>\n     *\n     * <p>The range is expressed in arbitrary units that must be the same as the\n     * units used by {@link #computeHorizontalScrollExtent()} and\n     * {@link #computeHorizontalScrollOffset()}.</p>\n     *\n     * <p>The default range is the drawing width of this view.</p>\n     *\n     * @return the total horizontal range represented by the horizontal\n     *         scrollbar\n     *\n     * @see #computeHorizontalScrollExtent()\n     * @see #computeHorizontalScrollOffset()\n     ",
    "links" : [ "#computeHorizontalScrollExtent()", "#computeHorizontalScrollOffset()" ]
  }, {
    "name" : "protected int computeHorizontalScrollOffset()",
    "returnType" : "int",
    "comment" : "\n     * <p>Compute the horizontal offset of the horizontal scrollbar's thumb\n     * within the horizontal range. This value is used to compute the position\n     * of the thumb within the scrollbar's track.</p>\n     *\n     * <p>The range is expressed in arbitrary units that must be the same as the\n     * units used by {@link #computeHorizontalScrollRange()} and\n     * {@link #computeHorizontalScrollExtent()}.</p>\n     *\n     * <p>The default offset is the scroll offset of this view.</p>\n     *\n     * @return the horizontal offset of the scrollbar's thumb\n     *\n     * @see #computeHorizontalScrollRange()\n     * @see #computeHorizontalScrollExtent()\n     ",
    "links" : [ "#computeHorizontalScrollExtent()", "#computeHorizontalScrollRange()" ]
  }, {
    "name" : "protected int computeHorizontalScrollExtent()",
    "returnType" : "int",
    "comment" : "\n     * <p>Compute the horizontal extent of the horizontal scrollbar's thumb\n     * within the horizontal range. This value is used to compute the length\n     * of the thumb within the scrollbar's track.</p>\n     *\n     * <p>The range is expressed in arbitrary units that must be the same as the\n     * units used by {@link #computeHorizontalScrollRange()} and\n     * {@link #computeHorizontalScrollOffset()}.</p>\n     *\n     * <p>The default extent is the drawing width of this view.</p>\n     *\n     * @return the horizontal extent of the scrollbar's thumb\n     *\n     * @see #computeHorizontalScrollRange()\n     * @see #computeHorizontalScrollOffset()\n     ",
    "links" : [ "#computeHorizontalScrollOffset()", "#computeHorizontalScrollRange()" ]
  }, {
    "name" : "protected int computeVerticalScrollRange()",
    "returnType" : "int",
    "comment" : "\n     * <p>Compute the vertical range that the vertical scrollbar represents.</p>\n     *\n     * <p>The range is expressed in arbitrary units that must be the same as the\n     * units used by {@link #computeVerticalScrollExtent()} and\n     * {@link #computeVerticalScrollOffset()}.</p>\n     *\n     * @return the total vertical range represented by the vertical scrollbar\n     *\n     * <p>The default range is the drawing height of this view.</p>\n     *\n     * @see #computeVerticalScrollExtent()\n     * @see #computeVerticalScrollOffset()\n     ",
    "links" : [ "#computeVerticalScrollExtent()", "#computeVerticalScrollOffset()" ]
  }, {
    "name" : "protected int computeVerticalScrollOffset()",
    "returnType" : "int",
    "comment" : "\n     * <p>Compute the vertical offset of the vertical scrollbar's thumb\n     * within the horizontal range. This value is used to compute the position\n     * of the thumb within the scrollbar's track.</p>\n     *\n     * <p>The range is expressed in arbitrary units that must be the same as the\n     * units used by {@link #computeVerticalScrollRange()} and\n     * {@link #computeVerticalScrollExtent()}.</p>\n     *\n     * <p>The default offset is the scroll offset of this view.</p>\n     *\n     * @return the vertical offset of the scrollbar's thumb\n     *\n     * @see #computeVerticalScrollRange()\n     * @see #computeVerticalScrollExtent()\n     ",
    "links" : [ "#computeVerticalScrollExtent()", "#computeVerticalScrollRange()" ]
  }, {
    "name" : "protected int computeVerticalScrollExtent()",
    "returnType" : "int",
    "comment" : "\n     * <p>Compute the vertical extent of the vertical scrollbar's thumb\n     * within the vertical range. This value is used to compute the length\n     * of the thumb within the scrollbar's track.</p>\n     *\n     * <p>The range is expressed in arbitrary units that must be the same as the\n     * units used by {@link #computeVerticalScrollRange()} and\n     * {@link #computeVerticalScrollOffset()}.</p>\n     *\n     * <p>The default extent is the drawing height of this view.</p>\n     *\n     * @return the vertical extent of the scrollbar's thumb\n     *\n     * @see #computeVerticalScrollRange()\n     * @see #computeVerticalScrollOffset()\n     ",
    "links" : [ "#computeVerticalScrollOffset()", "#computeVerticalScrollRange()" ]
  }, {
    "name" : "public boolean canScrollHorizontally(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this view can be scrolled horizontally in a certain direction.\n     *\n     * @param direction Negative to check scrolling left, positive to check scrolling right.\n     * @return true if this view can be scrolled in the specified direction, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canScrollVertically(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this view can be scrolled vertically in a certain direction.\n     *\n     * @param direction Negative to check scrolling up, positive to check scrolling down.\n     * @return true if this view can be scrolled in the specified direction, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " void getScrollIndicatorBounds(@NonNull Rect out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onDrawScrollIndicators(Canvas c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getHorizontalScrollBarBounds(@Nullable Rect drawBounds, @Nullable Rect touchBounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getVerticalScrollBarBounds(@Nullable Rect bounds, @Nullable Rect touchBounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getRoundVerticalScrollBarBounds(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getStraightVerticalScrollBarBounds(@Nullable Rect drawBounds, @Nullable Rect touchBounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void onDrawScrollBars(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * <p>Request the drawing of the horizontal and the vertical scrollbar. The\n     * scrollbars are painted only if they have been awakened first.</p>\n     *\n     * @param canvas the canvas on which to draw the scrollbars\n     *\n     * @see #awakenScrollBars(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isVerticalScrollBarHidden()",
    "returnType" : "boolean",
    "comment" : "\n     * Override this if the vertical scrollbar needs to be hidden in a subclass, like when\n     * FastScroller is visible.\n     * @return whether to temporarily hide the vertical scrollbar\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDrawHorizontalScrollBar(Canvas canvas, Drawable scrollBar, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * <p>Draw the horizontal scrollbar if\n     * {@link #isHorizontalScrollBarEnabled()} returns true.</p>\n     *\n     * @param canvas the canvas on which to draw the scrollbar\n     * @param scrollBar the scrollbar's drawable\n     *\n     * @see #isHorizontalScrollBarEnabled()\n     * @see #computeHorizontalScrollRange()\n     * @see #computeHorizontalScrollExtent()\n     * @see #computeHorizontalScrollOffset()\n     * @hide\n     ",
    "links" : [ "#isHorizontalScrollBarEnabled()" ]
  }, {
    "name" : "protected void onDrawVerticalScrollBar(Canvas canvas, Drawable scrollBar, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * <p>Draw the vertical scrollbar if {@link #isVerticalScrollBarEnabled()}\n     * returns true.</p>\n     *\n     * @param canvas the canvas on which to draw the scrollbar\n     * @param scrollBar the scrollbar's drawable\n     *\n     * @see #isVerticalScrollBarEnabled()\n     * @see #computeVerticalScrollRange()\n     * @see #computeVerticalScrollExtent()\n     * @see #computeVerticalScrollOffset()\n     * @hide\n     ",
    "links" : [ "#isVerticalScrollBarEnabled()" ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to do your drawing.\n     *\n     * @param canvas the canvas on which the background will be drawn\n     ",
    "links" : [ ]
  }, {
    "name" : " void assignParent(ViewParent parent)",
    "returnType" : "void",
    "comment" : "\n     * Caller is responsible for calling requestLayout if necessary.\n     * (This allows addViewInLayout to not request a new layout.)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "\n     * This is called when the view is attached to a window.  At this point it\n     * has a Surface and will start drawing.  Note that this function is\n     * guaranteed to be called before {@link #onDraw(android.graphics.Canvas)},\n     * however it may be called any time before the first onDraw -- including\n     * before or after {@link #onMeasure(int, int)}.\n     *\n     * @see #onDetachedFromWindow()\n     ",
    "links" : [ "#onMeasure(int", "#onDraw(android.graphics.Canvas)" ]
  }, {
    "name" : "public boolean resolveRtlPropertiesIfNeeded()",
    "returnType" : "boolean",
    "comment" : "\n     * Resolve all RTL related properties.\n     *\n     * @return true if resolution of RTL properties has been done\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetRtlProperties()",
    "returnType" : "void",
    "comment" : "\n     * Reset resolution of all RTL related properties.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchScreenStateChanged(int screenState)",
    "returnType" : "void",
    "comment" : "\n     * @see #onScreenStateChanged(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onScreenStateChanged(int screenState)",
    "returnType" : "void",
    "comment" : "\n     * This method is called whenever the state of the screen this view is\n     * attached to changes. A state change will usually occurs when the screen\n     * turns on or off (whether it happens automatically or the user does it\n     * manually.)\n     *\n     * @param screenState The new state of the screen. Can be either\n     *                    {@link #SCREEN_STATE_ON} or {@link #SCREEN_STATE_OFF}\n     ",
    "links" : [ "#SCREEN_STATE_ON", "#SCREEN_STATE_OFF" ]
  }, {
    "name" : " void dispatchMovedToDisplay(Display display, Configuration config)",
    "returnType" : "void",
    "comment" : "\n     * @see #onMovedToDisplay(int, Configuration)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onMovedToDisplay(int displayId, Configuration config)",
    "returnType" : "void",
    "comment" : "\n     * Called by the system when the hosting activity is moved from one display to another without\n     * recreation. This means that the activity is declared to handle all changes to configuration\n     * that happened when it was switched to another display, so it wasn't destroyed and created\n     * again.\n     *\n     * <p>This call will be followed by {@link #onConfigurationChanged(Configuration)} if the\n     * applied configuration actually changed. It is up to app developer to choose whether to handle\n     * the change in this method or in the following {@link #onConfigurationChanged(Configuration)}\n     * call.\n     *\n     * <p>Use this callback to track changes to the displays if some functionality relies on an\n     * association with some display properties.\n     *\n     * @param displayId The id of the display to which the view was moved.\n     * @param config Configuration of the resources on new display after move.\n     *\n     * @see #onConfigurationChanged(Configuration)\n     * @hide\n     ",
    "links" : [ "#onConfigurationChanged(Configuration)" ]
  }, {
    "name" : "private boolean hasRtlSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the application tag in the AndroidManifest has set \"supportRtl\" to true\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isRtlCompatibilityMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if we are in RTL compatibility mode (either before Jelly Bean MR1 or\n     * RTL not supported)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean needRtlPropertiesResolution()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if RTL properties need resolution.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(@ResolvedLayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * Called when any RTL property (layout direction or text direction or text alignment) has\n     * been changed.\n     *\n     * Subclasses need to override this method to take care of cached information that depends on the\n     * resolved layout direction, or to inform child views that inherit their layout direction.\n     *\n     * The default implementation does nothing.\n     *\n     * @param layoutDirection the direction of the layout\n     *\n     * @see #LAYOUT_DIRECTION_LTR\n     * @see #LAYOUT_DIRECTION_RTL\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean resolveLayoutDirection()",
    "returnType" : "boolean",
    "comment" : "\n     * Resolve and cache the layout direction. LTR is set initially. This is implicitly supposing\n     * that the parent directionality can and will be resolved before its children.\n     *\n     * @return true if resolution has been done, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canResolveLayoutDirection()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if layout direction resolution can be done.\n     *\n     * @return true if layout direction resolution can be done otherwise return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetResolvedLayoutDirection()",
    "returnType" : "void",
    "comment" : "\n     * Reset the resolved layout direction. Layout direction will be resolved during a call to\n     * {@link #onMeasure(int, int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#onMeasure(int" ]
  }, {
    "name" : "public boolean isLayoutDirectionInherited()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the layout direction is inherited.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLayoutDirectionResolved()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if layout direction has been resolved.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isPaddingResolved()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if padding has been resolved\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resolvePadding()",
    "returnType" : "void",
    "comment" : "\n     * Resolves padding depending on layout direction, if applicable, and\n     * recomputes internal padding values to adjust for scroll bars.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetResolvedPadding()",
    "returnType" : "void",
    "comment" : "\n     * Reset the resolved layout direction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void resetResolvedPaddingInternal()",
    "returnType" : "void",
    "comment" : "\n     * Used when we only want to reset *this* view's padding and not trigger overrides\n     * in ViewGroup that reset children too.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "\n     * This is called when the view is detached from a window.  At this point it\n     * no longer has a surface for drawing.\n     *\n     * @see #onAttachedToWindow()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindowInternal()",
    "returnType" : "void",
    "comment" : "\n     * This is a framework-internal mirror of onDetachedFromWindow() that's called\n     * after onDetachedFromWindow().\n     *\n     * If you override this you *MUST* call super.onDetachedFromWindowInternal()!\n     * The super method should be called at the end of the overridden method to ensure\n     * subclasses are destroyed first\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void cleanupDraw()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidateInheritedLayoutMode(int layoutModeOfRoot)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getWindowAttachCount()",
    "returnType" : "int",
    "comment" : "\n     * @return The number of times this view has been attached to a window\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getWindowToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Retrieve a unique token identifying the window this view is attached to.\n     * @return Return the window's token for use in\n     * {@link WindowManager.LayoutParams#token WindowManager.LayoutParams.token}.\n     ",
    "links" : [ "WindowManager.LayoutParams#token" ]
  }, {
    "name" : "public WindowId getWindowId()",
    "returnType" : "WindowId",
    "comment" : "\n     * Retrieve the {@link WindowId} for the window this view is\n     * currently attached to.\n     ",
    "links" : [ "android.view.WindowId" ]
  }, {
    "name" : "public IBinder getApplicationWindowToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Retrieve a unique token identifying the top-level \"real\" window of\n     * the window that this view is attached to.  That is, this is like\n     * {@link #getWindowToken}, except if the window this view in is a panel\n     * window (attached to another containing window), then the token of\n     * the containing window is returned instead.\n     *\n     * @return Returns the associated window token, either\n     * {@link #getWindowToken()} or the containing window's token.\n     ",
    "links" : [ "#getWindowToken()", "#getWindowToken" ]
  }, {
    "name" : "public Display getDisplay()",
    "returnType" : "Display",
    "comment" : "\n     * Gets the logical display to which the view's window has been attached.\n     *\n     * @return The logical display, or null if the view is not currently attached to a window.\n     ",
    "links" : [ ]
  }, {
    "name" : " IWindowSession getWindowSession()",
    "returnType" : "IWindowSession",
    "comment" : "\n     * Retrieve private session object this view hierarchy is using to\n     * communicate with the window manager.\n     * @return the session object to communicate with the window manager\n     ",
    "links" : [ ]
  }, {
    "name" : "protected IWindow getWindow()",
    "returnType" : "IWindow",
    "comment" : "\n     * Return the window this view is currently attached to. Used in\n     * {@link android.app.ActivityView} to communicate with WM.\n     * @hide\n     ",
    "links" : [ "android.app.ActivityView" ]
  }, {
    "name" : " int combineVisibility(int vis1, int vis2)",
    "returnType" : "int",
    "comment" : "\n     * Return the visibility value of the least visible component passed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchAttachedToWindow(AttachInfo info, int visibility)",
    "returnType" : "void",
    "comment" : "\n     * @param info the {@link android.view.View.AttachInfo} to associated with\n     *        this view\n     ",
    "links" : [ "android.view.View.AttachInfo" ]
  }, {
    "name" : " void dispatchDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void cancelPendingInputEvents()",
    "returnType" : "void",
    "comment" : "\n     * Cancel any deferred high-level input events that were previously posted to the event queue.\n     *\n     * <p>Many views post high-level events such as click handlers to the event queue\n     * to run deferred in order to preserve a desired user experience - clearing visible\n     * pressed states before executing, etc. This method will abort any events of this nature\n     * that are currently in flight.</p>\n     *\n     * <p>Custom views that generate their own high-level deferred input events should override\n     * {@link #onCancelPendingInputEvents()} and remove those pending events from the queue.</p>\n     *\n     * <p>This will also cancel pending input events for any child views.</p>\n     *\n     * <p>Note that this may not be sufficient as a debouncing strategy for clicks in all cases.\n     * This will not impact newer events posted after this call that may occur as a result of\n     * lower-level input events still waiting in the queue. If you are trying to prevent\n     * double-submitted  events for the duration of some sort of asynchronous transaction\n     * you should also take other steps to protect against unexpected double inputs e.g. calling\n     * {@link #setEnabled(boolean) setEnabled(false)} and re-enabling the view when\n     * the transaction completes, tracking already submitted transaction IDs, etc.</p>\n     ",
    "links" : [ "#setEnabled(boolean)", "#onCancelPendingInputEvents()" ]
  }, {
    "name" : " void dispatchCancelPendingInputEvents()",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #cancelPendingInputEvents()} to cancel input events in flight.\n     * Overridden by ViewGroup to dispatch. Package scoped to prevent app-side meddling.\n     ",
    "links" : [ "#cancelPendingInputEvents()" ]
  }, {
    "name" : "public void onCancelPendingInputEvents()",
    "returnType" : "void",
    "comment" : "\n     * Called as the result of a call to {@link #cancelPendingInputEvents()} on this view or\n     * a parent view.\n     *\n     * <p>This method is responsible for removing any pending high-level input events that were\n     * posted to the event queue to run later. Custom view classes that post their own deferred\n     * high-level events via {@link #post(Runnable)}, {@link #postDelayed(Runnable, long)} or\n     * {@link android.os.Handler} should override this method, call\n     * <code>super.onCancelPendingInputEvents()</code> and remove those callbacks as appropriate.\n     * </p>\n     ",
    "links" : [ "android.os.Handler", "#cancelPendingInputEvents()", "#postDelayed(Runnable", "#post(Runnable)" ]
  }, {
    "name" : "public void saveHierarchyState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "\n     * Store this view hierarchy's frozen state into the given container.\n     *\n     * @param container The SparseArray in which to save the view's state.\n     *\n     * @see #restoreHierarchyState(android.util.SparseArray)\n     * @see #dispatchSaveInstanceState(android.util.SparseArray)\n     * @see #onSaveInstanceState()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSaveInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #saveHierarchyState(android.util.SparseArray)} to store the state for\n     * this view and its children. May be overridden to modify how freezing happens to a\n     * view's children; for example, some views may want to not store state for their children.\n     *\n     * @param container The SparseArray in which to save the view's state.\n     *\n     * @see #dispatchRestoreInstanceState(android.util.SparseArray)\n     * @see #saveHierarchyState(android.util.SparseArray)\n     * @see #onSaveInstanceState()\n     ",
    "links" : [ "#saveHierarchyState(android.util.SparseArray)" ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "\n     * Hook allowing a view to generate a representation of its internal state\n     * that can later be used to create a new instance with that same state.\n     * This state should only contain information that is not persistent or can\n     * not be reconstructed later. For example, you will never store your\n     * current position on screen because that will be computed again when a\n     * new instance of the view is placed in its view hierarchy.\n     * <p>\n     * Some examples of things you may store here: the current cursor position\n     * in a text view (but usually not the text itself since that is stored in a\n     * content provider or other persistent storage), the currently selected\n     * item in a list view.\n     *\n     * @return Returns a Parcelable object containing the view's current dynamic\n     *         state, or null if there is nothing interesting to save.\n     * @see #onRestoreInstanceState(Parcelable)\n     * @see #saveHierarchyState(SparseArray)\n     * @see #dispatchSaveInstanceState(SparseArray)\n     * @see #setSaveEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restoreHierarchyState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "\n     * Restore this view hierarchy's frozen state from the given container.\n     *\n     * @param container The SparseArray which holds previously frozen states.\n     *\n     * @see #saveHierarchyState(android.util.SparseArray)\n     * @see #dispatchRestoreInstanceState(android.util.SparseArray)\n     * @see #onRestoreInstanceState(android.os.Parcelable)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #restoreHierarchyState(android.util.SparseArray)} to retrieve the\n     * state for this view and its children. May be overridden to modify how restoring\n     * happens to a view's children; for example, some views may want to not store state\n     * for their children.\n     *\n     * @param container The SparseArray which holds previously saved state.\n     *\n     * @see #dispatchSaveInstanceState(android.util.SparseArray)\n     * @see #restoreHierarchyState(android.util.SparseArray)\n     * @see #onRestoreInstanceState(android.os.Parcelable)\n     ",
    "links" : [ "#restoreHierarchyState(android.util.SparseArray)" ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "\n     * Hook allowing a view to re-apply a representation of its internal state that had previously\n     * been generated by {@link #onSaveInstanceState}. This function will never be called with a\n     * null state.\n     *\n     * @param state The frozen state that had previously been returned by\n     *        {@link #onSaveInstanceState}.\n     *\n     * @see #onSaveInstanceState()\n     * @see #restoreHierarchyState(android.util.SparseArray)\n     * @see #dispatchRestoreInstanceState(android.util.SparseArray)\n     ",
    "links" : [ "#onSaveInstanceState" ]
  }, {
    "name" : "public long getDrawingTime()",
    "returnType" : "long",
    "comment" : "\n     * <p>Return the time at which the drawing of the view hierarchy started.</p>\n     *\n     * @return the drawing start time in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDuplicateParentStateEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Enables or disables the duplication of the parent's state into this view. When\n     * duplication is enabled, this view gets its drawable state from its parent rather\n     * than from its own internal properties.</p>\n     *\n     * <p>Note: in the current implementation, setting this property to true after the\n     * view was added to a ViewGroup might have no effect at all. This property should\n     * always be used from XML or set to true before adding this view to a ViewGroup.</p>\n     *\n     * <p>Note: if this view's parent addStateFromChildren property is enabled and this\n     * property is enabled, an exception will be thrown.</p>\n     *\n     * <p>Note: if the child view uses and updates additional states which are unknown to the\n     * parent, these states should not be affected by this method.</p>\n     *\n     * @param enabled True to enable duplication of the parent's drawable state, false\n     *                to disable it.\n     *\n     * @see #getDrawableState()\n     * @see #isDuplicateParentStateEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDuplicateParentStateEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether this duplicates its drawable state from its parent.</p>\n     *\n     * @return True if this view's drawable state is duplicated from the parent,\n     *         false otherwise\n     *\n     * @see #getDrawableState()\n     * @see #setDuplicateParentStateEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerType(@LayerType int layerType, @Nullable Paint paint)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specifies the type of layer backing this view. The layer can be\n     * {@link #LAYER_TYPE_NONE}, {@link #LAYER_TYPE_SOFTWARE} or\n     * {@link #LAYER_TYPE_HARDWARE}.</p>\n     *\n     * <p>A layer is associated with an optional {@link android.graphics.Paint}\n     * instance that controls how the layer is composed on screen. The following\n     * properties of the paint are taken into account when composing the layer:</p>\n     * <ul>\n     * <li>{@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li>\n     * <li>{@link android.graphics.Paint#getXfermode() Blending mode}</li>\n     * <li>{@link android.graphics.Paint#getColorFilter() Color filter}</li>\n     * </ul>\n     *\n     * <p>If this view has an alpha value set to < 1.0 by calling\n     * {@link #setAlpha(float)}, the alpha value of the layer's paint is superseded\n     * by this view's alpha value.</p>\n     *\n     * <p>Refer to the documentation of {@link #LAYER_TYPE_NONE},\n     * {@link #LAYER_TYPE_SOFTWARE} and {@link #LAYER_TYPE_HARDWARE}\n     * for more information on when and how to use layers.</p>\n     *\n     * @param layerType The type of layer to use with this view, must be one of\n     *        {@link #LAYER_TYPE_NONE}, {@link #LAYER_TYPE_SOFTWARE} or\n     *        {@link #LAYER_TYPE_HARDWARE}\n     * @param paint The paint used to compose the layer. This argument is optional\n     *        and can be null. It is ignored when the layer type is\n     *        {@link #LAYER_TYPE_NONE}\n     *\n     * @see #getLayerType()\n     * @see #LAYER_TYPE_NONE\n     * @see #LAYER_TYPE_SOFTWARE\n     * @see #LAYER_TYPE_HARDWARE\n     * @see #setAlpha(float)\n     *\n     * @attr ref android.R.styleable#View_layerType\n     ",
    "links" : [ "android.graphics.Paint#getColorFilter()", "#setAlpha(float)", "#LAYER_TYPE_HARDWARE", "android.graphics.Paint", "android.graphics.Paint#getAlpha()", "android.graphics.Paint#getXfermode()", "#LAYER_TYPE_SOFTWARE", "#LAYER_TYPE_NONE" ]
  }, {
    "name" : "public void setLayerPaint(@Nullable Paint paint)",
    "returnType" : "void",
    "comment" : "\n     * Updates the {@link Paint} object used with the current layer (used only if the current\n     * layer type is not set to {@link #LAYER_TYPE_NONE}). Changed properties of the Paint\n     * provided to {@link #setLayerType(int, android.graphics.Paint)} will be used the next time\n     * the View is redrawn, but {@link #setLayerPaint(android.graphics.Paint)} must be called to\n     * ensure that the view gets redrawn immediately.\n     *\n     * <p>A layer is associated with an optional {@link android.graphics.Paint}\n     * instance that controls how the layer is composed on screen. The following\n     * properties of the paint are taken into account when composing the layer:</p>\n     * <ul>\n     * <li>{@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li>\n     * <li>{@link android.graphics.Paint#getXfermode() Blending mode}</li>\n     * <li>{@link android.graphics.Paint#getColorFilter() Color filter}</li>\n     * </ul>\n     *\n     * <p>If this view has an alpha value set to < 1.0 by calling {@link #setAlpha(float)}, the\n     * alpha value of the layer's paint is superseded by this view's alpha value.</p>\n     *\n     * @param paint The paint used to compose the layer. This argument is optional\n     *        and can be null. It is ignored when the layer type is\n     *        {@link #LAYER_TYPE_NONE}\n     *\n     * @see #setLayerType(int, android.graphics.Paint)\n     ",
    "links" : [ "android.graphics.Paint#getColorFilter()", "#setAlpha(float)", "#setLayerType(int", "android.graphics.Paint", "android.graphics.Paint#getAlpha()", "android.graphics.Paint#getXfermode()", "#setLayerPaint(android.graphics.Paint)", "#LAYER_TYPE_NONE" ]
  }, {
    "name" : "public int getLayerType()",
    "returnType" : "int",
    "comment" : "\n     * Indicates what type of layer is currently associated with this view. By default\n     * a view does not have a layer, and the layer type is {@link #LAYER_TYPE_NONE}.\n     * Refer to the documentation of {@link #setLayerType(int, android.graphics.Paint)}\n     * for more information on the different types of layers.\n     *\n     * @return {@link #LAYER_TYPE_NONE}, {@link #LAYER_TYPE_SOFTWARE} or\n     *         {@link #LAYER_TYPE_HARDWARE}\n     *\n     * @see #setLayerType(int, android.graphics.Paint)\n     * @see #buildLayer()\n     * @see #LAYER_TYPE_NONE\n     * @see #LAYER_TYPE_SOFTWARE\n     * @see #LAYER_TYPE_HARDWARE\n     ",
    "links" : [ "#setLayerType(int", "#LAYER_TYPE_HARDWARE", "#LAYER_TYPE_SOFTWARE", "#LAYER_TYPE_NONE" ]
  }, {
    "name" : "public void buildLayer()",
    "returnType" : "void",
    "comment" : "\n     * Forces this view's layer to be created and this view to be rendered\n     * into its layer. If this view's layer type is set to {@link #LAYER_TYPE_NONE},\n     * invoking this method will have no effect.\n     *\n     * This method can for instance be used to render a view into its layer before\n     * starting an animation. If this view is complex, rendering into the layer\n     * before starting the animation will avoid skipping frames.\n     *\n     * @throws IllegalStateException If this view is not attached to a window\n     *\n     * @see #setLayerType(int, android.graphics.Paint)\n     ",
    "links" : [ "#LAYER_TYPE_NONE" ]
  }, {
    "name" : "protected void destroyHardwareResources()",
    "returnType" : "void",
    "comment" : "\n     * Destroys all hardware rendering resources. This method is invoked\n     * when the system needs to reclaim resources. Upon execution of this\n     * method, you should free any OpenGL resources created by the view.\n     *\n     * Note: you <strong>must</strong> call\n     * <code>super.destroyHardwareResources()</code> when overriding\n     * this method.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDrawingCacheEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>Enables or disables the drawing cache. When the drawing cache is enabled, the next call\n     * to {@link #getDrawingCache()} or {@link #buildDrawingCache()} will draw the view in a\n     * bitmap. Calling {@link #draw(android.graphics.Canvas)} will not draw from the cache when\n     * the cache is enabled. To benefit from the cache, you must request the drawing cache by\n     * calling {@link #getDrawingCache()} and draw it on screen if the returned bitmap is not\n     * null.</p>\n     *\n     * <p>Enabling the drawing cache is similar to\n     * {@link #setLayerType(int, android.graphics.Paint) setting a layer} when hardware\n     * acceleration is turned off. When hardware acceleration is turned on, enabling the\n     * drawing cache has no effect on rendering because the system uses a different mechanism\n     * for acceleration which ignores the flag. If you want to use a Bitmap for the view, even\n     * when hardware acceleration is enabled, see {@link #setLayerType(int, android.graphics.Paint)}\n     * for information on how to enable software and hardware layers.</p>\n     *\n     * <p>This API can be used to manually generate\n     * a bitmap copy of this view, by setting the flag to <code>true</code> and calling\n     * {@link #getDrawingCache()}.</p>\n     *\n     * @param enabled true to enable the drawing cache, false otherwise\n     *\n     * @see #isDrawingCacheEnabled()\n     * @see #getDrawingCache()\n     * @see #buildDrawingCache()\n     * @see #setLayerType(int, android.graphics.Paint)\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "#getDrawingCache()", "android.view.PixelCopy", "android.graphics.Canvas", "#draw(android.graphics.Canvas)", "#buildDrawingCache()" ]
  }, {
    "name" : "public boolean isDrawingCacheEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the drawing cache is enabled for this view.</p>\n     *\n     * @return true if the drawing cache is enabled\n     *\n     * @see #setDrawingCacheEnabled(boolean)\n     * @see #getDrawingCache()\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public void outputDirtyFlags(String indent, boolean clear, int clearMask)",
    "returnType" : "void",
    "comment" : "\n     * Debugging utility which recursively outputs the dirty state of a view and its\n     * descendants.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchGetDisplayList()",
    "returnType" : "void",
    "comment" : "\n     * This method is used by ViewGroup to cause its children to restore or recreate their\n     * display lists. It is called by getDisplayList() when the parent ViewGroup does not need\n     * to recreate its own display list, which would happen if it went through the normal\n     * draw/dispatchDraw mechanisms.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canHaveDisplayList()",
    "returnType" : "boolean",
    "comment" : "\n     * A view that is not attached or hardware accelerated cannot create a display list.\n     * This method checks these conditions and returns the appropriate result.\n     *\n     * @return true if view has the ability to create a display list, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public RenderNode updateDisplayListIfDirty()",
    "returnType" : "RenderNode",
    "comment" : "\n     * Gets the RenderNode for the view, and updates its DisplayList (if needed and supported)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetDisplayList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getDrawingCache()",
    "returnType" : "Bitmap",
    "comment" : "\n     * <p>Calling this method is equivalent to calling <code>getDrawingCache(false)</code>.</p>\n     *\n     * @return A non-scaled bitmap representing this view or null if cache is disabled.\n     *\n     * @see #getDrawingCache(boolean)\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public Bitmap getDrawingCache(boolean autoScale)",
    "returnType" : "Bitmap",
    "comment" : "\n     * <p>Returns the bitmap in which this view drawing is cached. The returned bitmap\n     * is null when caching is disabled. If caching is enabled and the cache is not ready,\n     * this method will create it. Calling {@link #draw(android.graphics.Canvas)} will not\n     * draw from the cache when the cache is enabled. To benefit from the cache, you must\n     * request the drawing cache by calling this method and draw it on screen if the\n     * returned bitmap is not null.</p>\n     *\n     * <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,\n     * this method will create a bitmap of the same size as this view. Because this bitmap\n     * will be drawn scaled by the parent ViewGroup, the result on screen might show\n     * scaling artifacts. To avoid such artifacts, you should call this method by setting\n     * the auto scaling to true. Doing so, however, will generate a bitmap of a different\n     * size than the view. This implies that your application must be able to handle this\n     * size.</p>\n     *\n     * @param autoScale Indicates whether the generated bitmap should be scaled based on\n     *        the current density of the screen when the application is in compatibility\n     *        mode.\n     *\n     * @return A bitmap representing this view or null if cache is disabled.\n     *\n     * @see #setDrawingCacheEnabled(boolean)\n     * @see #isDrawingCacheEnabled()\n     * @see #buildDrawingCache(boolean)\n     * @see #destroyDrawingCache()\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas", "#draw(android.graphics.Canvas)" ]
  }, {
    "name" : "public void destroyDrawingCache()",
    "returnType" : "void",
    "comment" : "\n     * <p>Frees the resources used by the drawing cache. If you call\n     * {@link #buildDrawingCache()} manually without calling\n     * {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you\n     * should cleanup the cache with this method afterwards.</p>\n     *\n     * @see #setDrawingCacheEnabled(boolean)\n     * @see #buildDrawingCache()\n     * @see #getDrawingCache()\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "#setDrawingCacheEnabled(boolean)", "android.view.PixelCopy", "android.graphics.Canvas", "#buildDrawingCache()" ]
  }, {
    "name" : "public void setDrawingCacheBackgroundColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Setting a solid background color for the drawing cache's bitmaps will improve\n     * performance and memory usage. Note, though that this should only be used if this\n     * view will always be drawn on top of a solid color.\n     *\n     * @param color The background color to use for the drawing cache's bitmap\n     *\n     * @see #setDrawingCacheEnabled(boolean)\n     * @see #buildDrawingCache()\n     * @see #getDrawingCache()\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public int getDrawingCacheBackgroundColor()",
    "returnType" : "int",
    "comment" : "\n     * @see #setDrawingCacheBackgroundColor(int)\n     *\n     * @return The background color to used for the drawing cache's bitmap\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public void buildDrawingCache()",
    "returnType" : "void",
    "comment" : "\n     * <p>Calling this method is equivalent to calling <code>buildDrawingCache(false)</code>.</p>\n     *\n     * @see #buildDrawingCache(boolean)\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "android.view.PixelCopy", "android.graphics.Canvas" ]
  }, {
    "name" : "public void buildDrawingCache(boolean autoScale)",
    "returnType" : "void",
    "comment" : "\n     * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p>\n     *\n     * <p>If you call {@link #buildDrawingCache()} manually without calling\n     * {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you\n     * should cleanup the cache by calling {@link #destroyDrawingCache()} afterwards.</p>\n     *\n     * <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,\n     * this method will create a bitmap of the same size as this view. Because this bitmap\n     * will be drawn scaled by the parent ViewGroup, the result on screen might show\n     * scaling artifacts. To avoid such artifacts, you should call this method by setting\n     * the auto scaling to true. Doing so, however, will generate a bitmap of a different\n     * size than the view. This implies that your application must be able to handle this\n     * size.</p>\n     *\n     * <p>You should avoid calling this method when hardware acceleration is enabled. If\n     * you do not need the drawing cache bitmap, calling this method will increase memory\n     * usage and cause the view to be rendered in software once, thus negatively impacting\n     * performance.</p>\n     *\n     * @see #getDrawingCache()\n     * @see #destroyDrawingCache()\n     *\n     * @deprecated The view drawing cache was largely made obsolete with the introduction of\n     * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n     * layers are largely unnecessary and can easily result in a net loss in performance due to the\n     * cost of creating and updating the layer. In the rare cases where caching layers are useful,\n     * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n     * rendering. For software-rendered snapshots of a small part of the View hierarchy or\n     * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n     * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n     * software-rendered usages are discouraged and have compatibility issues with hardware-only\n     * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n     * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n     * reports or unit testing the {@link PixelCopy} API is recommended.\n     ",
    "links" : [ "#destroyDrawingCache()", "android.graphics.Bitmap.Config#HARDWARE", "#setLayerType(int", "android.graphics.Picture", "#draw(Canvas)", "android.graphics.Bitmap", "#setDrawingCacheEnabled(boolean)", "android.view.PixelCopy", "android.graphics.Canvas", "#buildDrawingCache()" ]
  }, {
    "name" : "private void buildDrawingCacheImpl(boolean autoScale)",
    "returnType" : "void",
    "comment" : "\n     * private, internal implementation of buildDrawingCache, used to enable tracing\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap createSnapshot(ViewDebug.CanvasProvider canvasProvider, boolean skipChildren)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a snapshot of the view into a bitmap.  We should probably make\n     * some form of this public, but should think about the API.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInEditMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this View is currently in edit mode. A View is usually\n     * in edit mode when displayed within a developer tool. For instance, if\n     * this View is being drawn by a visual user interface builder, this method\n     * should return true.\n     *\n     * Subclasses should check the return value of this method to provide\n     * different behaviors if their normal behavior might interfere with the\n     * host environment. For instance: the class spawns a thread in its\n     * constructor, the drawing code relies on device-specific features, etc.\n     *\n     * This method is usually checked in the drawing code of custom widgets.\n     *\n     * @return True if this View is in edit mode, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isPaddingOffsetRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * If the View draws content inside its padding and enables fading edges,\n     * it needs to support padding offsets. Padding offsets are added to the\n     * fading edges to extend the length of the fade so that it covers pixels\n     * drawn inside the padding.\n     *\n     * Subclasses of this class should override this method if they need\n     * to draw content inside the padding.\n     *\n     * @return True if padding offset must be applied, false otherwise.\n     *\n     * @see #getLeftPaddingOffset()\n     * @see #getRightPaddingOffset()\n     * @see #getTopPaddingOffset()\n     * @see #getBottomPaddingOffset()\n     *\n     * @since CURRENT\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getLeftPaddingOffset()",
    "returnType" : "int",
    "comment" : "\n     * Amount by which to extend the left fading region. Called only when\n     * {@link #isPaddingOffsetRequired()} returns true.\n     *\n     * @return The left padding offset in pixels.\n     *\n     * @see #isPaddingOffsetRequired()\n     *\n     * @since CURRENT\n     ",
    "links" : [ "#isPaddingOffsetRequired()" ]
  }, {
    "name" : "protected int getRightPaddingOffset()",
    "returnType" : "int",
    "comment" : "\n     * Amount by which to extend the right fading region. Called only when\n     * {@link #isPaddingOffsetRequired()} returns true.\n     *\n     * @return The right padding offset in pixels.\n     *\n     * @see #isPaddingOffsetRequired()\n     *\n     * @since CURRENT\n     ",
    "links" : [ "#isPaddingOffsetRequired()" ]
  }, {
    "name" : "protected int getTopPaddingOffset()",
    "returnType" : "int",
    "comment" : "\n     * Amount by which to extend the top fading region. Called only when\n     * {@link #isPaddingOffsetRequired()} returns true.\n     *\n     * @return The top padding offset in pixels.\n     *\n     * @see #isPaddingOffsetRequired()\n     *\n     * @since CURRENT\n     ",
    "links" : [ "#isPaddingOffsetRequired()" ]
  }, {
    "name" : "protected int getBottomPaddingOffset()",
    "returnType" : "int",
    "comment" : "\n     * Amount by which to extend the bottom fading region. Called only when\n     * {@link #isPaddingOffsetRequired()} returns true.\n     *\n     * @return The bottom padding offset in pixels.\n     *\n     * @see #isPaddingOffsetRequired()\n     *\n     * @since CURRENT\n     ",
    "links" : [ "#isPaddingOffsetRequired()" ]
  }, {
    "name" : "protected int getFadeTop(boolean offsetRequired)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param offsetRequired\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getFadeHeight(boolean offsetRequired)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param offsetRequired\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareAccelerated()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether this view is attached to a hardware accelerated\n     * window or not.</p>\n     *\n     * <p>Even if this method returns true, it does not mean that every call\n     * to {@link #draw(android.graphics.Canvas)} will be made with an hardware\n     * accelerated {@link android.graphics.Canvas}. For instance, if this view\n     * is drawn onto an offscreen {@link android.graphics.Bitmap} and its\n     * window is hardware accelerated,\n     * {@link android.graphics.Canvas#isHardwareAccelerated()} will likely\n     * return false, and this method will return true.</p>\n     *\n     * @return True if the view is attached to a window and the window is\n     *         hardware accelerated; false in any other case.\n     ",
    "links" : [ "android.graphics.Canvas#isHardwareAccelerated()", "android.graphics.Bitmap", "android.graphics.Canvas", "#draw(android.graphics.Canvas)" ]
  }, {
    "name" : "public void setClipBounds(Rect clipBounds)",
    "returnType" : "void",
    "comment" : "\n     * Sets a rectangular area on this view to which the view will be clipped\n     * when it is drawn. Setting the value to null will remove the clip bounds\n     * and the view will draw normally, using its full bounds.\n     *\n     * @param clipBounds The rectangular area, in the local coordinates of\n     * this view, to which future drawing operations will be clipped.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getClipBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a copy of the current {@link #setClipBounds(Rect) clipBounds}.\n     *\n     * @return A copy of the current clip bounds if clip bounds are set,\n     * otherwise null.\n     ",
    "links" : [ "#setClipBounds(Rect)" ]
  }, {
    "name" : "public boolean getClipBounds(Rect outRect)",
    "returnType" : "boolean",
    "comment" : "\n     * Populates an output rectangle with the clip bounds of the view,\n     * returning {@code true} if successful or {@code false} if the view's\n     * clip bounds are {@code null}.\n     *\n     * @param outRect rectangle in which to place the clip bounds of the view\n     * @return {@code true} if successful or {@code false} if the view's\n     *         clip bounds are {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean applyLegacyAnimation(ViewGroup parent, long drawingTime, Animation a, boolean scalingRequired)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function, called by draw(canvas, parent, drawingTime) to handle the less common\n     * case of an active Animation being run on the view.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDisplayListProperties(RenderNode renderNode)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by getDisplayList() when a display list is recorded for a View.\n     * It pushes any properties to the RenderNode that aren't managed by the RenderNode.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean draw(Canvas canvas, ViewGroup parent, long drawingTime)",
    "returnType" : "boolean",
    "comment" : "\n     * This method is called by ViewGroup.drawChild() to have each child view draw itself.\n     *\n     * This is where the View specializes rendering behavior based on layer type,\n     * and hardware acceleration.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Paint getDebugPaint()",
    "returnType" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int dipsToPixels(int dips)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void debugDrawFocus(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Manually render this view (and all of its children) to the given Canvas.\n     * The view must have already done a full layout before this function is\n     * called.  When implementing a view, implement\n     * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method.\n     * If you do need to override this method, call the superclass version.\n     *\n     * @param canvas The Canvas to which the View is rendered.\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)" ]
  }, {
    "name" : "private void drawBackground(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draws the background onto the specified canvas.\n     *\n     * @param canvas Canvas on which to draw the background\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBackgroundBounds()",
    "returnType" : "void",
    "comment" : "\n     * Sets the correct background bounds and rebuilds the outline, if needed.\n     * <p/>\n     * This is called by LayoutLib.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setBackgroundRenderNodeProperties(RenderNode renderNode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RenderNode getDrawableRenderNode(Drawable drawable, RenderNode renderNode)",
    "returnType" : "RenderNode",
    "comment" : "\n     * Creates a new display list or updates the existing display list for the\n     * specified Drawable.\n     *\n     * @param drawable Drawable for which to create a display list\n     * @param renderNode Existing RenderNode, or {@code null}\n     * @return A valid display list for the specified drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewOverlay getOverlay()",
    "returnType" : "ViewOverlay",
    "comment" : "\n     * Returns the overlay for this view, creating it if it does not yet exist.\n     * Adding drawables to the overlay will cause them to be displayed whenever\n     * the view itself is redrawn. Objects in the overlay should be actively\n     * managed: remove them when they should not be displayed anymore. The\n     * overlay will always have the same size as its host view.\n     *\n     * <p>Note: Overlays do not currently work correctly with {@link\n     * SurfaceView} or {@link TextureView}; contents in overlays for these\n     * types of views may not display correctly.</p>\n     *\n     * @return The ViewOverlay object for this view.\n     * @see ViewOverlay\n     ",
    "links" : [ "android.view.SurfaceView", "android.view.TextureView" ]
  }, {
    "name" : "public int getSolidColor()",
    "returnType" : "int",
    "comment" : "\n     * Override this if your view is known to always be drawn on top of a solid color background,\n     * and needs to draw fading edges. Returning a non-zero color enables the view system to\n     * optimize the drawing of the fading edges. If you do return a non-zero color, the alpha\n     * should be set to 0xFF.\n     *\n     * @see #setVerticalFadingEdgeEnabled(boolean)\n     * @see #setHorizontalFadingEdgeEnabled(boolean)\n     *\n     * @return The known solid color background for this view, or 0 if the color may vary\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String printFlags(int flags)",
    "returnType" : "String",
    "comment" : "\n     * Build a human readable string representation of the specified view flags.\n     *\n     * @param flags the view flags to convert to a string\n     * @return a String representing the supplied flags\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String printPrivateFlags(int privateFlags)",
    "returnType" : "String",
    "comment" : "\n     * Build a human readable string representation of the specified private\n     * view flags.\n     *\n     * @param privateFlags the private view flags to convert to a string\n     * @return a String representing the supplied flags\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLayoutRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether or not this view's layout will be requested during\n     * the next hierarchy layout pass.</p>\n     *\n     * @return true if the layout will be forced during next layout pass\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLayoutModeOptical(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if o is a ViewGroup that is laying out using optical bounds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setOpticalFrame(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void layout(int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasParentWantsFocus()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Called from layout when this view should\n     * assign a size and position to each of its children.\n     *\n     * Derived classes with children should override\n     * this method and call layout on each of\n     * their children.\n     * @param changed This is a new size or position for this view\n     * @param left Left position, relative to parent\n     * @param top Top position, relative to parent\n     * @param right Right position, relative to parent\n     * @param bottom Bottom position, relative to parent\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean setFrame(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Assign a size and position to this view.\n     *\n     * This is called from layout.\n     *\n     * @param left Left position, relative to parent\n     * @param top Top position, relative to parent\n     * @param right Right position, relative to parent\n     * @param bottom Bottom position, relative to parent\n     * @return true if the new size and position are different than the\n     *         previous ones\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setLeftTopRightBottom(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Assign a size and position to this view.\n     *\n     * This method is meant to be used in animations only as it applies this position and size\n     * for the view only temporary and it can be changed back at any time by the layout.\n     *\n     * @param left Left position, relative to parent\n     * @param top Top position, relative to parent\n     * @param right Right position, relative to parent\n     * @param bottom Bottom position, relative to parent\n     *\n     * @see #setLeft(int), #setRight(int), #setTop(int), #setBottom(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sizeChange(int newWidth, int newHeight, int oldWidth, int oldHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "\n     * Finalize inflating a view from XML.  This is called as the last phase\n     * of inflation, after all child views have been added.\n     *\n     * <p>Even if the subclass overrides onFinishInflate, they should always be\n     * sure to call the super method, so that we get called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "\n     * Returns the resources associated with this view.\n     *\n     * @return Resources object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the specified Drawable.\n     *\n     * @param drawable the drawable to invalidate\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "\n     * Schedules an action on a drawable to occur at a specified time.\n     *\n     * @param who the recipient of the action\n     * @param what the action to run on the drawable\n     * @param when the time at which the action must occur. Uses the\n     *        {@link SystemClock#uptimeMillis} timebase.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "\n     * Cancels a scheduled action on a drawable.\n     *\n     * @param who the recipient of the action\n     * @param what the action to cancel\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(Drawable who)",
    "returnType" : "void",
    "comment" : "\n     * Unschedule any events associated with the given Drawable.  This can be\n     * used when selecting a new Drawable into a view, so that the previous\n     * one is completely unscheduled.\n     *\n     * @param who The Drawable to unschedule.\n     *\n     * @see #drawableStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void resolveDrawables()",
    "returnType" : "void",
    "comment" : "\n     * Resolve the Drawables depending on the layout direction. This is implicitly supposing\n     * that the View directionality can and will be resolved before its Drawables.\n     *\n     * Will call {@link View#onResolveDrawables} when resolution is done.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.View#onResolveDrawables" ]
  }, {
    "name" : " boolean areDrawablesResolved()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * Called when layout direction has been resolved.\n     *\n     * The default implementation does nothing.\n     *\n     * @param layoutDirection The resolved layout direction.\n     *\n     * @see #LAYOUT_DIRECTION_LTR\n     * @see #LAYOUT_DIRECTION_RTL\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void resetResolvedDrawables()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void resetResolvedDrawablesInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "\n     * If your view subclass is displaying its own Drawable objects, it should\n     * override this function and return true for any Drawable it is\n     * displaying.  This allows animations for those drawables to be\n     * scheduled.\n     *\n     * <p>Be sure to call through to the super class when overriding this\n     * function.\n     *\n     * @param who The Drawable to verify.  Return true if it is one you are\n     *            displaying, else return the result of calling through to the\n     *            super class.\n     *\n     * @return boolean If true than the Drawable is being displayed in the\n     *         view; else false and it is not allowed to animate.\n     *\n     * @see #unscheduleDrawable(android.graphics.drawable.Drawable)\n     * @see #drawableStateChanged()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "\n     * This function is called whenever the state of the view changes in such\n     * a way that it impacts the state of drawables being shown.\n     * <p>\n     * If the View has a StateListAnimator, it will also be called to run necessary state\n     * change animations.\n     * <p>\n     * Be sure to call through to the superclass when overriding this function.\n     *\n     * @see Drawable#setState(int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * This function is called whenever the view hotspot changes and needs to\n     * be propagated to drawables or child views managed by the view.\n     * <p>\n     * Dispatching to child views is handled by\n     * {@link #dispatchDrawableHotspotChanged(float, float)}.\n     * <p>\n     * Be sure to call through to the superclass when overriding this function.\n     *\n     * @param x hotspot x coordinate\n     * @param y hotspot y coordinate\n     ",
    "links" : [ "#dispatchDrawableHotspotChanged(float" ]
  }, {
    "name" : "public void dispatchDrawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches drawableHotspotChanged to all of this View's children.\n     *\n     * @param x hotspot x coordinate\n     * @param y hotspot y coordinate\n     * @see #drawableHotspotChanged(float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void refreshDrawableState()",
    "returnType" : "void",
    "comment" : "\n     * Call this to force a view to update its drawable state. This will cause\n     * drawableStateChanged to be called on this view. Views that are interested\n     * in the new state should call getDrawableState.\n     *\n     * @see #drawableStateChanged\n     * @see #getDrawableState\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDefaultFocusHighlightDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a default focus highlight if it doesn't exist.\n     * @return a default focus highlight.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setDefaultFocusHighlight(Drawable highlight)",
    "returnType" : "void",
    "comment" : "\n     * Set the current default focus highlight.\n     * @param highlight the highlight drawable, or {@code null} if it's no longer needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultFocusHighlightNeeded(Drawable background, Drawable foreground)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether we need to draw a default focus highlight when this view gets focused,\n     * which requires:\n     * <ul>\n     *     <li>In both background and foreground, {@link android.R.attr#state_focused}\n     *         is not defined.</li>\n     *     <li>This view is not in touch mode.</li>\n     *     <li>This view doesn't opt out for a default focus highlight, via\n     *         {@link #setDefaultFocusHighlightEnabled(boolean)}.</li>\n     *     <li>This view is attached to window.</li>\n     * </ul>\n     * @return {@code true} if a default focus highlight is needed.\n     * @hide\n     ",
    "links" : [ "android.R.attr#state_focused", "#setDefaultFocusHighlightEnabled(boolean)" ]
  }, {
    "name" : "private void switchDefaultFocusHighlight()",
    "returnType" : "void",
    "comment" : "\n     * When this view is focused, switches on/off the default focused highlight.\n     * <p>\n     * This always happens when this view is focused, and only at this moment the default focus\n     * highlight can be visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void drawDefaultFocusHighlight(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draw the default focus highlight onto the canvas if there is one and this view is focused.\n     * @param canvas the canvas where we're drawing the highlight.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int[] getDrawableState()",
    "returnType" : "int[]",
    "comment" : "\n     * Return an array of resource IDs of the drawable states representing the\n     * current state of the view.\n     *\n     * @return The current drawable state\n     *\n     * @see Drawable#setState(int[])\n     * @see #drawableStateChanged()\n     * @see #onCreateDrawableState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int[] onCreateDrawableState(int extraSpace)",
    "returnType" : "int[]",
    "comment" : "\n     * Generate the new {@link android.graphics.drawable.Drawable} state for\n     * this view. This is called by the view\n     * system when the cached Drawable state is determined to be invalid.  To\n     * retrieve the current state, you should use {@link #getDrawableState}.\n     *\n     * @param extraSpace if non-zero, this is the number of extra entries you\n     * would like in the returned array in which you can place your own\n     * states.\n     *\n     * @return Returns an array holding the current {@link Drawable} state of\n     * the view.\n     *\n     * @see #mergeDrawableStates(int[], int[])\n     ",
    "links" : [ "#getDrawableState", "android.graphics.drawable.ColorDrawable", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "protected static int[] mergeDrawableStates(int[] baseState, int[] additionalState)",
    "returnType" : "int[]",
    "comment" : "\n     * Merge your own state values in <var>additionalState</var> into the base\n     * state values <var>baseState</var> that were returned by\n     * {@link #onCreateDrawableState(int)}.\n     *\n     * @param baseState The base state values returned by\n     * {@link #onCreateDrawableState(int)}, which will be modified to also hold your\n     * own additional state values.\n     *\n     * @param additionalState The additional state values you would like\n     * added to <var>baseState</var>; this array is not modified.\n     *\n     * @return As a convenience, the <var>baseState</var> array you originally\n     * passed into the function is returned.\n     *\n     * @see #onCreateDrawableState(int)\n     ",
    "links" : [ "#onCreateDrawableState(int)" ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "\n     * Call {@link Drawable#jumpToCurrentState() Drawable.jumpToCurrentState()}\n     * on all Drawable objects associated with this view.\n     * <p>\n     * Also calls {@link StateListAnimator#jumpToCurrentState()} if there is a StateListAnimator\n     * attached to this view.\n     ",
    "links" : [ "android.animation.StateListAnimator#jumpToCurrentState()", "android.graphics.drawable.ColorDrawable#jumpToCurrentState()" ]
  }, {
    "name" : "public void setBackgroundColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the background color for this view.\n     * @param color the color of the background\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundResource(@DrawableRes int resid)",
    "returnType" : "void",
    "comment" : "\n     * Set the background to a given resource. The resource should refer to\n     * a Drawable object or 0 to remove the background.\n     * @param resid The identifier of the resource.\n     *\n     * @attr ref android.R.styleable#View_background\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackground(Drawable background)",
    "returnType" : "void",
    "comment" : "\n     * Set the background to a given Drawable, or remove the background. If the\n     * background has padding, this View's padding is set to the background's\n     * padding. However, when a background is removed, this View's padding isn't\n     * touched. If setting the padding is desired, please use\n     * {@link #setPadding(int, int, int, int)}.\n     *\n     * @param background The Drawable to use as the background, or null to remove the\n     *        background\n     ",
    "links" : [ "#setPadding(int" ]
  }, {
    "name" : "public void setBackgroundDrawable(Drawable background)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #setBackground(Drawable)} instead\n     ",
    "links" : [ "#setBackground(Drawable)" ]
  }, {
    "name" : "public Drawable getBackground()",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the background drawable\n     *\n     * @return The drawable used as the background for this view, if any.\n     *\n     * @see #setBackground(Drawable)\n     *\n     * @attr ref android.R.styleable#View_background\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the background drawable. Does not modify the current tint\n     * mode, which is {@link BlendMode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setBackground(Drawable)} will automatically\n     * mutate the drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#View_backgroundTint\n     * @see #getBackgroundTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "android.graphics.drawable.ColorDrawable#setTintList(ColorStateList)", "android.graphics.BlendMode#SRC_IN", "#setBackground(Drawable)" ]
  }, {
    "name" : "public ColorStateList getBackgroundTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Return the tint applied to the background drawable, if specified.\n     *\n     * @return the tint applied to the background drawable\n     * @attr ref android.R.styleable#View_backgroundTint\n     * @see #setBackgroundTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setBackgroundTintList(ColorStateList)}} to the background\n     * drawable. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#View_backgroundTintMode\n     * @see #getBackgroundTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setBackgroundTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setBackgroundTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setBackgroundTintList(ColorStateList)}} to the background\n     * drawable. The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#View_backgroundTintMode\n     * @see #getBackgroundTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setBackgroundTintList(ColorStateList)", "android.graphics.BlendMode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getBackgroundTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Return the blending mode used to apply the tint to the background\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the background\n     *         drawable\n     * @attr ref android.R.styleable#View_backgroundTintMode\n     * @see #setBackgroundTintBlendMode(BlendMode)\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getBackgroundTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Return the blending mode used to apply the tint to the background\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the background\n     *         drawable, null if no blend has previously been configured\n     * @attr ref android.R.styleable#View_backgroundTintMode\n     * @see #setBackgroundTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyBackgroundTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getForeground()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the drawable used as the foreground of this View. The\n     * foreground drawable, if non-null, is always drawn on top of the view's content.\n     *\n     * @return a Drawable or null if no foreground was set\n     *\n     * @see #onDrawForeground(Canvas)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForeground(Drawable foreground)",
    "returnType" : "void",
    "comment" : "\n     * Supply a Drawable that is to be rendered on top of all of the content in the view.\n     *\n     * @param foreground the Drawable to be drawn on top of the children\n     *\n     * @attr ref android.R.styleable#View_foreground\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isForegroundInsidePadding()",
    "returnType" : "boolean",
    "comment" : "\n     * Magic bit used to support features of framework-internal window decor implementation details.\n     * This used to live exclusively in FrameLayout.\n     *\n     * @return true if the foreground should draw inside the padding region or false\n     *         if it should draw inset by the view's padding\n     * @hide internal use only; only used by FrameLayout and internal screen layouts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getForegroundGravity()",
    "returnType" : "int",
    "comment" : "\n     * Describes how the foreground is positioned.\n     *\n     * @return foreground gravity.\n     *\n     * @see #setForegroundGravity(int)\n     *\n     * @attr ref android.R.styleable#View_foregroundGravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForegroundGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Describes how the foreground is positioned. Defaults to START and TOP.\n     *\n     * @param gravity see {@link android.view.Gravity}\n     *\n     * @see #getForegroundGravity()\n     *\n     * @attr ref android.R.styleable#View_foregroundGravity\n     ",
    "links" : [ "android.view.Gravity" ]
  }, {
    "name" : "public void setForegroundTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the foreground drawable. Does not modify the current tint\n     * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setForeground(Drawable)} will automatically\n     * mutate the drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#View_foregroundTint\n     * @see #getForegroundTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "android.graphics.drawable.ColorDrawable#setTintList(ColorStateList)", "#setForeground(Drawable)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getForegroundTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Return the tint applied to the foreground drawable, if specified.\n     *\n     * @return the tint applied to the foreground drawable\n     * @attr ref android.R.styleable#View_foregroundTint\n     * @see #setForegroundTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForegroundTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setForegroundTintList(ColorStateList)}} to the background\n     * drawable. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#View_foregroundTintMode\n     * @see #getForegroundTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     *\n     ",
    "links" : [ "#setForegroundTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setForegroundTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setForegroundTintList(ColorStateList)}} to the background\n     * drawable. The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#View_foregroundTintMode\n     * @see #getForegroundTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setForegroundTintList(ColorStateList)", "android.graphics.BlendMode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getForegroundTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Return the blending mode used to apply the tint to the foreground\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the foreground\n     *         drawable\n     * @attr ref android.R.styleable#View_foregroundTintMode\n     * @see #setForegroundTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getForegroundTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Return the blending mode used to apply the tint to the foreground\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the foreground\n     *         drawable\n     * @attr ref android.R.styleable#View_foregroundTintMode\n     * @see #setForegroundTintBlendMode(BlendMode)\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyForegroundTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getAutofilledDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Get the drawable to be overlayed when a view is autofilled\n     *\n     * @return The drawable\n     *\n     * @throws IllegalStateException if the drawable could not be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void drawAutofilledHighlight(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draw {@link View#isAutofilled()} highlight over view if the view is autofilled, unless\n     * {@link #PFLAG4_AUTOFILL_HIDE_HIGHLIGHT} is enabled.\n     *\n     * @param canvas The canvas to draw on\n     ",
    "links" : [ "#PFLAG4_AUTOFILL_HIDE_HIGHLIGHT", "android.view.View#isAutofilled()" ]
  }, {
    "name" : "public void onDrawForeground(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draw any foreground content for this view.\n     *\n     * <p>Foreground content may consist of scroll bars, a {@link #setForeground foreground}\n     * drawable or other view-specific decorations. The foreground is drawn on top of the\n     * primary view content.</p>\n     *\n     * @param canvas canvas to draw into\n     ",
    "links" : [ "#setForeground" ]
  }, {
    "name" : "public void setPadding(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the padding. The view may add on the space required to display\n     * the scrollbars, depending on the style and visibility of the scrollbars.\n     * So the values returned from {@link #getPaddingLeft}, {@link #getPaddingTop},\n     * {@link #getPaddingRight} and {@link #getPaddingBottom} may be different\n     * from the values set in this call.\n     *\n     * @attr ref android.R.styleable#View_padding\n     * @attr ref android.R.styleable#View_paddingBottom\n     * @attr ref android.R.styleable#View_paddingLeft\n     * @attr ref android.R.styleable#View_paddingRight\n     * @attr ref android.R.styleable#View_paddingTop\n     * @param left the left padding in pixels\n     * @param top the top padding in pixels\n     * @param right the right padding in pixels\n     * @param bottom the bottom padding in pixels\n     ",
    "links" : [ "#getPaddingBottom", "#getPaddingTop", "#getPaddingLeft", "#getPaddingRight" ]
  }, {
    "name" : "protected void internalSetPadding(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPaddingRelative(int start, int top, int end, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the relative padding. The view may add on the space required to display\n     * the scrollbars, depending on the style and visibility of the scrollbars.\n     * So the values returned from {@link #getPaddingStart}, {@link #getPaddingTop},\n     * {@link #getPaddingEnd} and {@link #getPaddingBottom} may be different\n     * from the values set in this call.\n     *\n     * @attr ref android.R.styleable#View_padding\n     * @attr ref android.R.styleable#View_paddingBottom\n     * @attr ref android.R.styleable#View_paddingStart\n     * @attr ref android.R.styleable#View_paddingEnd\n     * @attr ref android.R.styleable#View_paddingTop\n     * @param start the start padding in pixels\n     * @param top the top padding in pixels\n     * @param end the end padding in pixels\n     * @param bottom the bottom padding in pixels\n     ",
    "links" : [ "#getPaddingBottom", "#getPaddingTop", "#getPaddingStart", "#getPaddingEnd" ]
  }, {
    "name" : "public int getSourceLayoutResId()",
    "returnType" : "int",
    "comment" : "\n     * A {@link View} can be inflated from an XML layout. For such Views this method returns the\n     * resource ID of the source layout.\n     *\n     * @return The layout resource id if this view was inflated from XML, otherwise\n     * {@link Resources#ID_NULL}.\n     ",
    "links" : [ "android.view.View", "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : "public int getPaddingTop()",
    "returnType" : "int",
    "comment" : "\n     * Returns the top padding of this view.\n     *\n     * @return the top padding in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaddingBottom()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bottom padding of this view. If there are inset and enabled\n     * scrollbars, this value may include the space required to display the\n     * scrollbars as well.\n     *\n     * @return the bottom padding in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaddingLeft()",
    "returnType" : "int",
    "comment" : "\n     * Returns the left padding of this view. If there are inset and enabled\n     * scrollbars, this value may include the space required to display the\n     * scrollbars as well.\n     *\n     * @return the left padding in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaddingStart()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start padding of this view depending on its resolved layout direction.\n     * If there are inset and enabled scrollbars, this value may include the space\n     * required to display the scrollbars as well.\n     *\n     * @return the start padding in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaddingRight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the right padding of this view. If there are inset and enabled\n     * scrollbars, this value may include the space required to display the\n     * scrollbars as well.\n     *\n     * @return the right padding in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaddingEnd()",
    "returnType" : "int",
    "comment" : "\n     * Returns the end padding of this view depending on its resolved layout direction.\n     * If there are inset and enabled scrollbars, this value may include the space\n     * required to display the scrollbars as well.\n     *\n     * @return the end padding in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPaddingRelative()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if the padding has been set through relative values\n     * {@link #setPaddingRelative(int, int, int, int)} or through\n     * @attr ref android.R.styleable#View_paddingStart or\n     * @attr ref android.R.styleable#View_paddingEnd\n     *\n     * @return true if the padding is relative or false if it is not.\n     ",
    "links" : [ "#setPaddingRelative(int" ]
  }, {
    "name" : " Insets computeOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resetPaddingToInitialValues()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOpticalInsets(Insets insets)",
    "returnType" : "void",
    "comment" : "\n     * Set this view's optical insets.\n     *\n     * <p>This method should be treated similarly to setMeasuredDimension and not as a general\n     * property. Views that compute their own optical insets should call it as part of measurement.\n     * This method does not request layout. If you are setting optical insets outside of\n     * measure/layout itself you will want to call requestLayout() yourself.\n     * </p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelected(boolean selected)",
    "returnType" : "void",
    "comment" : "\n     * Changes the selection state of this view. A view can be selected or not.\n     * Note that selection is not the same as focus. Views are typically\n     * selected in the context of an AdapterView like ListView or GridView;\n     * the selected view is the view that is highlighted.\n     *\n     * @param selected true if the view must be selected, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSetSelected(boolean selected)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch setSelected to all of this View's children.\n     *\n     * @see #setSelected(boolean)\n     *\n     * @param selected The new selected state\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSelected()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates the selection state of this view.\n     *\n     * @return true if the view is selected, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActivated(boolean activated)",
    "returnType" : "void",
    "comment" : "\n     * Changes the activated state of this view. A view can be activated or not.\n     * Note that activation is not the same as selection.  Selection is\n     * a transient property, representing the view (hierarchy) the user is\n     * currently interacting with.  Activation is a longer-term state that the\n     * user can move views in and out of.  For example, in a list view with\n     * single or multiple selection enabled, the views in the current selection\n     * set are activated.  (Um, yeah, we are deeply sorry about the terminology\n     * here.)  The activated state is propagated down to children of the view it\n     * is set on.\n     *\n     * @param activated true if the view must be activated, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSetActivated(boolean activated)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch setActivated to all of this View's children.\n     *\n     * @see #setActivated(boolean)\n     *\n     * @param activated The new activated state\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isActivated()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates the activation state of this view.\n     *\n     * @return true if the view is activated, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewTreeObserver getViewTreeObserver()",
    "returnType" : "ViewTreeObserver",
    "comment" : "\n     * Returns the ViewTreeObserver for this view's hierarchy. The view tree\n     * observer can be used to get notifications when global events, like\n     * layout, happen.\n     *\n     * The returned ViewTreeObserver observer is not guaranteed to remain\n     * valid for the lifetime of this View. If the caller of this method keeps\n     * a long-lived reference to ViewTreeObserver, it should always check for\n     * the return value of {@link ViewTreeObserver#isAlive()}.\n     *\n     * @return The ViewTreeObserver for this view's hierarchy.\n     ",
    "links" : [ "android.view.ViewTreeObserver#isAlive()" ]
  }, {
    "name" : "public View getRootView()",
    "returnType" : "View",
    "comment" : "\n     * <p>Finds the topmost view in the current view hierarchy.</p>\n     *\n     * @return the topmost view containing this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean toGlobalMotionEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Transforms a motion event from view-local coordinates to on-screen\n     * coordinates.\n     *\n     * @param ev the view-local motion event\n     * @return false if the transformation could not be applied\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean toLocalMotionEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Transforms a motion event from on-screen coordinates to view-local\n     * coordinates.\n     *\n     * @param ev the on-screen motion event\n     * @return false if the transformation could not be applied\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transformMatrixToGlobal(@NonNull Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the input matrix such that it maps view-local coordinates to\n     * on-screen coordinates.\n     *\n     * @param matrix input matrix to modify\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transformMatrixToLocal(@NonNull Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the input matrix such that it maps on-screen coordinates to\n     * view-local coordinates.\n     *\n     * @param matrix input matrix to modify\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getLocationOnScreen()",
    "returnType" : "int[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getLocationOnScreen(@Size(2) int[] outLocation)",
    "returnType" : "void",
    "comment" : "\n     * <p>Computes the coordinates of this view on the screen. The argument\n     * must be an array of two integers. After the method returns, the array\n     * contains the x and y location in that order.</p>\n     *\n     * @param outLocation an array of two integers in which to hold the coordinates\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getLocationInWindow(@Size(2) int[] outLocation)",
    "returnType" : "void",
    "comment" : "\n     * <p>Computes the coordinates of this view in its window. The argument\n     * must be an array of two integers. After the method returns, the array\n     * contains the x and y location in that order.</p>\n     *\n     * @param outLocation an array of two integers in which to hold the coordinates\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transformFromViewToWindowSpace(@Size(2) int[] inOutLocation)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected T findViewTraversal(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * @param id the id of the view to be found\n     * @return the view of the specified id, null if cannot be found\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected T findViewWithTagTraversal(Object tag)",
    "returnType" : "T",
    "comment" : "\n     * @param tag the tag of the view to be found\n     * @return the view of specified tag, null if cannot be found\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected T findViewByPredicateTraversal(Predicate<View> predicate, View childToSkip)",
    "returnType" : "T",
    "comment" : "\n     * @param predicate The predicate to evaluate.\n     * @param childToSkip If not null, ignores this child during the recursive traversal.\n     * @return The first view that matches the predicate or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T findViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds the first descendant view with the given ID, the view itself if\n     * the ID matches {@link #getId()}, or {@code null} if the ID is invalid\n     * (< 0) or there is no matching view in the hierarchy.\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID if found, or {@code null} otherwise\n     * @see View#requireViewById(int)\n     ",
    "links" : [ "#getId()" ]
  }, {
    "name" : "public final T requireViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds the first descendant view with the given ID, the view itself if the ID matches\n     * {@link #getId()}, or throws an IllegalArgumentException if the ID is invalid or there is no\n     * matching view in the hierarchy.\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID\n     * @see View#findViewById(int)\n     ",
    "links" : [ "#getId()" ]
  }, {
    "name" : "public T findViewByAccessibilityIdTraversal(int accessibilityId)",
    "returnType" : "T",
    "comment" : "\n     * Performs the traversal to find a view by its unique and stable accessibility id.\n     *\n     * <strong>Note:</strong>This method does not stop at the root namespace\n     * boundary since the user can touch the screen at an arbitrary location\n     * potentially crossing the root namespace boundary which will send an\n     * accessibility event to accessibility services and they should be able\n     * to obtain the event source. Also accessibility ids are guaranteed to be\n     * unique in the window.\n     *\n     * @param accessibilityId The accessibility id.\n     * @return The found view.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public T findViewByAutofillIdTraversal(int autofillId)",
    "returnType" : "T",
    "comment" : "\n     * Performs the traversal to find a view by its autofill id.\n     *\n     * <strong>Note:</strong>This method does not stop at the root namespace\n     * boundary.\n     *\n     * @param autofillId The autofill id.\n     * @return The found view.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T findViewWithTag(Object tag)",
    "returnType" : "T",
    "comment" : "\n     * Look for a child view with the given tag.  If this view has the given\n     * tag, return this view.\n     *\n     * @param tag The tag to search for, using \"tag.equals(getTag())\".\n     * @return The View that has the given tag in the hierarchy or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T findViewByPredicate(Predicate<View> predicate)",
    "returnType" : "T",
    "comment" : "\n     * Look for a child view that matches the specified predicate.\n     * If this view matches the predicate, return this view.\n     *\n     * @param predicate The predicate to evaluate.\n     * @return The first view that matches the predicate or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T findViewByPredicateInsideOut(View start, Predicate<View> predicate)",
    "returnType" : "T",
    "comment" : "\n     * Look for a child view that matches the specified predicate,\n     * starting with the specified view and its descendents and then\n     * recusively searching the ancestors and siblings of that view\n     * until this view is reached.\n     *\n     * This method is useful in cases where the predicate does not match\n     * a single unique view (perhaps multiple views use the same id)\n     * and we are trying to find the view that is \"closest\" in scope to the\n     * starting view.\n     *\n     * @param start The view to start from.\n     * @param predicate The predicate to evaluate.\n     * @return The first view that matches the predicate or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setId(@IdRes int id)",
    "returnType" : "void",
    "comment" : "\n     * Sets the identifier for this view. The identifier does not have to be\n     * unique in this view's hierarchy. The identifier should be a positive\n     * number.\n     *\n     * @see #NO_ID\n     * @see #getId()\n     * @see #findViewById(int)\n     *\n     * @param id a number used to identify the view\n     *\n     * @attr ref android.R.styleable#View_id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsRootNamespace(boolean isRoot)",
    "returnType" : "void",
    "comment" : "\n     * {@hide}\n     *\n     * @param isRoot true if the view belongs to the root namespace, false\n     *        otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRootNamespace()",
    "returnType" : "boolean",
    "comment" : "\n     * {@hide}\n     *\n     * @return true if the view belongs to the root namespace, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns this view's identifier.\n     *\n     * @return a positive integer used to identify the view or {@link #NO_ID}\n     *         if the view has no ID\n     *\n     * @see #setId(int)\n     * @see #findViewById(int)\n     * @attr ref android.R.styleable#View_id\n     ",
    "links" : [ "#NO_ID" ]
  }, {
    "name" : "public long getUniqueDrawingId()",
    "returnType" : "long",
    "comment" : "\n     * Get the identifier used for this view by the drawing system.\n     *\n     * @see RenderNode#getUniqueId()\n     * @return A long that uniquely identifies this view's drawing component\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getTag()",
    "returnType" : "Object",
    "comment" : "\n     * Returns this view's tag.\n     *\n     * @return the Object stored in this view as a tag, or {@code null} if not\n     *         set\n     *\n     * @see #setTag(Object)\n     * @see #getTag(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTag(final Object tag)",
    "returnType" : "void",
    "comment" : "\n     * Sets the tag associated with this view. A tag can be used to mark\n     * a view in its hierarchy and does not have to be unique within the\n     * hierarchy. Tags can also be used to store data within a view without\n     * resorting to another data structure.\n     *\n     * @param tag an Object to tag the view with\n     *\n     * @see #getTag()\n     * @see #setTag(int, Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getTag(int key)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the tag associated with this view and the specified key.\n     *\n     * @param key The key identifying the tag\n     *\n     * @return the Object stored in this view as a tag, or {@code null} if not\n     *         set\n     *\n     * @see #setTag(int, Object)\n     * @see #getTag()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTag(int key, final Object tag)",
    "returnType" : "void",
    "comment" : "\n     * Sets a tag associated with this view and a key. A tag can be used\n     * to mark a view in its hierarchy and does not have to be unique within\n     * the hierarchy. Tags can also be used to store data within a view\n     * without resorting to another data structure.\n     *\n     * The specified key should be an id declared in the resources of the\n     * application to ensure it is unique (see the <a\n     * href=\"{@docRoot}guide/topics/resources/more-resources.html#Id\">ID resource type</a>).\n     * Keys identified as belonging to\n     * the Android framework or not associated with any package will cause\n     * an {@link IllegalArgumentException} to be thrown.\n     *\n     * @param key The key identifying the tag\n     * @param tag An Object to tag the view with\n     *\n     * @throws IllegalArgumentException If they specified key is not valid\n     *\n     * @see #setTag(Object)\n     * @see #getTag(int)\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public void setTagInternal(int key, Object tag)",
    "returnType" : "void",
    "comment" : "\n     * Variation of {@link #setTag(int, Object)} that enforces the key to be a\n     * framework id.\n     *\n     * @hide\n     ",
    "links" : [ "#setTag(int" ]
  }, {
    "name" : "private void setKeyedTag(int key, Object tag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void debug()",
    "returnType" : "void",
    "comment" : "\n     * Prints information about this view in the log output, with the tag\n     * {@link #VIEW_LOG_TAG}.\n     *\n     * @hide\n     ",
    "links" : [ "#VIEW_LOG_TAG" ]
  }, {
    "name" : "protected void debug(int depth)",
    "returnType" : "void",
    "comment" : "\n     * Prints information about this view in the log output, with the tag\n     * {@link #VIEW_LOG_TAG}. Each line in the output is preceded with an\n     * indentation defined by the <code>depth</code>.\n     *\n     * @param depth the indentation level\n     *\n     * @hide\n     ",
    "links" : [ "#VIEW_LOG_TAG" ]
  }, {
    "name" : "protected static String debugIndent(int depth)",
    "returnType" : "String",
    "comment" : "\n     * Creates a string of whitespaces used for indentation.\n     *\n     * @param depth the indentation level\n     * @return a String containing (depth * 2 + 3) * 2 white spaces\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return the offset of the widget's text baseline from the widget's top\n     * boundary. If this widget does not support baseline alignment, this\n     * method returns -1. </p>\n     *\n     * @return the offset of the baseline within the widget's bounds or -1\n     *         if baseline alignment is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInLayout()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the view hierarchy is currently undergoing a layout pass. This\n     * information is useful to avoid situations such as calling {@link #requestLayout()} during\n     * a layout pass.\n     *\n     * @return whether the view hierarchy is currently undergoing a layout pass\n     ",
    "links" : [ "#requestLayout()" ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "\n     * Call this when something has changed which has invalidated the\n     * layout of this view. This will schedule a layout pass of the view\n     * tree. This should not be called while the view hierarchy is currently in a layout\n     * pass ({@link #isInLayout()}. If layout is happening, the request may be honored at the\n     * end of the current layout pass (and then layout will run again) or after the current\n     * frame is drawn and the next layout occurs.\n     *\n     * <p>Subclasses which override this method should call the superclass method to\n     * handle possible request-during-layout errors correctly.</p>\n     ",
    "links" : [ "#isInLayout()" ]
  }, {
    "name" : "public void forceLayout()",
    "returnType" : "void",
    "comment" : "\n     * Forces this view to be laid out during the next layout pass.\n     * This method does not call requestLayout() or forceLayout()\n     * on the parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void measure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * This is called to find out how big a view should be. The parent\n     * supplies constraint information in the width and height parameters.\n     * </p>\n     *\n     * <p>\n     * The actual measurement work of a view is performed in\n     * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n     * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n     * </p>\n     *\n     *\n     * @param widthMeasureSpec Horizontal space requirements as imposed by the\n     *        parent\n     * @param heightMeasureSpec Vertical space requirements as imposed by the\n     *        parent\n     *\n     * @see #onMeasure(int, int)\n     ",
    "links" : [ "#onMeasure(int" ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Measure the view and its content to determine the measured width and the\n     * measured height. This method is invoked by {@link #measure(int, int)} and\n     * should be overridden by subclasses to provide accurate and efficient\n     * measurement of their contents.\n     * </p>\n     *\n     * <p>\n     * <strong>CONTRACT:</strong> When overriding this method, you\n     * <em>must</em> call {@link #setMeasuredDimension(int, int)} to store the\n     * measured width and height of this view. Failure to do so will trigger an\n     * <code>IllegalStateException</code>, thrown by\n     * {@link #measure(int, int)}. Calling the superclass'\n     * {@link #onMeasure(int, int)} is a valid use.\n     * </p>\n     *\n     * <p>\n     * The base class implementation of measure defaults to the background size,\n     * unless a larger size is allowed by the MeasureSpec. Subclasses should\n     * override {@link #onMeasure(int, int)} to provide better measurements of\n     * their content.\n     * </p>\n     *\n     * <p>\n     * If this method is overridden, it is the subclass's responsibility to make\n     * sure the measured height and width are at least the view's minimum height\n     * and width ({@link #getSuggestedMinimumHeight()} and\n     * {@link #getSuggestedMinimumWidth()}).\n     * </p>\n     *\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     ",
    "links" : [ "android.view.View.MeasureSpec", "#onMeasure(int", "#setMeasuredDimension(int", "#getSuggestedMinimumHeight()", "#getSuggestedMinimumWidth()", "#measure(int" ]
  }, {
    "name" : "protected final void setMeasuredDimension(int measuredWidth, int measuredHeight)",
    "returnType" : "void",
    "comment" : "\n     * <p>This method must be called by {@link #onMeasure(int, int)} to store the\n     * measured width and measured height. Failing to do so will trigger an\n     * exception at measurement time.</p>\n     *\n     * @param measuredWidth The measured width of this view.  May be a complex\n     * bit mask as defined by {@link #MEASURED_SIZE_MASK} and\n     * {@link #MEASURED_STATE_TOO_SMALL}.\n     * @param measuredHeight The measured height of this view.  May be a complex\n     * bit mask as defined by {@link #MEASURED_SIZE_MASK} and\n     * {@link #MEASURED_STATE_TOO_SMALL}.\n     ",
    "links" : [ "#MEASURED_STATE_TOO_SMALL", "#onMeasure(int", "#MEASURED_SIZE_MASK" ]
  }, {
    "name" : "private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight)",
    "returnType" : "void",
    "comment" : "\n     * Sets the measured dimension without extra processing for things like optical bounds.\n     * Useful for reapplying consistent values that have already been cooked with adjustments\n     * for optical bounds, etc. such as those from the measurement cache.\n     *\n     * @param measuredWidth The measured width of this view.  May be a complex\n     * bit mask as defined by {@link #MEASURED_SIZE_MASK} and\n     * {@link #MEASURED_STATE_TOO_SMALL}.\n     * @param measuredHeight The measured height of this view.  May be a complex\n     * bit mask as defined by {@link #MEASURED_SIZE_MASK} and\n     * {@link #MEASURED_STATE_TOO_SMALL}.\n     ",
    "links" : [ "#MEASURED_STATE_TOO_SMALL", "#MEASURED_SIZE_MASK" ]
  }, {
    "name" : "public static int combineMeasuredStates(int curState, int newState)",
    "returnType" : "int",
    "comment" : "\n     * Merge two states as returned by {@link #getMeasuredState()}.\n     * @param curState The current state as returned from a view or the result\n     * of combining multiple views.\n     * @param newState The new view state to combine.\n     * @return Returns a new integer reflecting the combination of the two\n     * states.\n     ",
    "links" : [ "#getMeasuredState()" ]
  }, {
    "name" : "public static int resolveSize(int size, int measureSpec)",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #resolveSizeAndState(int, int, int)}\n     * returning only the {@link #MEASURED_SIZE_MASK} bits of the result.\n     ",
    "links" : [ "#resolveSizeAndState(int", "#MEASURED_SIZE_MASK" ]
  }, {
    "name" : "public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState)",
    "returnType" : "int",
    "comment" : "\n     * Utility to reconcile a desired size and state, with constraints imposed\n     * by a MeasureSpec. Will take the desired size, unless a different size\n     * is imposed by the constraints. The returned value is a compound integer,\n     * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n     * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the\n     * resulting size is smaller than the size the view wants to be.\n     *\n     * @param size How big the view wants to be.\n     * @param measureSpec Constraints imposed by the parent.\n     * @param childMeasuredState Size information bit mask for the view's\n     *                           children.\n     * @return Size information bit mask as defined by\n     *         {@link #MEASURED_SIZE_MASK} and\n     *         {@link #MEASURED_STATE_TOO_SMALL}.\n     ",
    "links" : [ "#MEASURED_STATE_TOO_SMALL", "#MEASURED_SIZE_MASK" ]
  }, {
    "name" : "public static int getDefaultSize(int size, int measureSpec)",
    "returnType" : "int",
    "comment" : "\n     * Utility to return a default size. Uses the supplied size if the\n     * MeasureSpec imposed no constraints. Will get larger if allowed\n     * by the MeasureSpec.\n     *\n     * @param size Default size for this view\n     * @param measureSpec Constraints imposed by the parent\n     * @return The size this view should be.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getSuggestedMinimumHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the suggested minimum height that the view should use. This\n     * returns the maximum of the view's minimum height\n     * and the background's minimum height\n     * ({@link android.graphics.drawable.Drawable#getMinimumHeight()}).\n     * <p>\n     * When being used in {@link #onMeasure(int, int)}, the caller should still\n     * ensure the returned height is within the requirements of the parent.\n     *\n     * @return The suggested minimum height of the view.\n     ",
    "links" : [ "#onMeasure(int", "android.graphics.drawable.Drawable#getMinimumHeight()" ]
  }, {
    "name" : "protected int getSuggestedMinimumWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the suggested minimum width that the view should use. This\n     * returns the maximum of the view's minimum width\n     * and the background's minimum width\n     *  ({@link android.graphics.drawable.Drawable#getMinimumWidth()}).\n     * <p>\n     * When being used in {@link #onMeasure(int, int)}, the caller should still\n     * ensure the returned width is within the requirements of the parent.\n     *\n     * @return The suggested minimum width of the view.\n     ",
    "links" : [ "#onMeasure(int", "android.graphics.drawable.Drawable#getMinimumWidth()" ]
  }, {
    "name" : "public int getMinimumHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum height of the view.\n     *\n     * @return the minimum height the view will try to be, in pixels\n     *\n     * @see #setMinimumHeight(int)\n     *\n     * @attr ref android.R.styleable#View_minHeight\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinimumHeight(int minHeight)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum height of the view. It is not guaranteed the view will\n     * be able to achieve this minimum height (for example, if its parent layout\n     * constrains it with less available height).\n     *\n     * @param minHeight The minimum height the view will try to be, in pixels\n     *\n     * @see #getMinimumHeight()\n     *\n     * @attr ref android.R.styleable#View_minHeight\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum width of the view.\n     *\n     * @return the minimum width the view will try to be, in pixels\n     *\n     * @see #setMinimumWidth(int)\n     *\n     * @attr ref android.R.styleable#View_minWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinimumWidth(int minWidth)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum width of the view. It is not guaranteed the view will\n     * be able to achieve this minimum width (for example, if its parent layout\n     * constrains it with less available width).\n     *\n     * @param minWidth The minimum width the view will try to be, in pixels\n     *\n     * @see #getMinimumWidth()\n     *\n     * @attr ref android.R.styleable#View_minWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animation getAnimation()",
    "returnType" : "Animation",
    "comment" : "\n     * Get the animation currently associated with this view.\n     *\n     * @return The animation that is currently playing or\n     *         scheduled to play for this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startAnimation(Animation animation)",
    "returnType" : "void",
    "comment" : "\n     * Start the specified animation now.\n     *\n     * @param animation the animation to start now\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearAnimation()",
    "returnType" : "void",
    "comment" : "\n     * Cancels any animations for this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnimation(Animation animation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the next animation to play for this view.\n     * If you want the animation to play immediately, use\n     * {@link #startAnimation(android.view.animation.Animation)} instead.\n     * This method provides allows fine-grained\n     * control over the start time and invalidation, but you\n     * must make sure that 1) the animation has a start time set, and\n     * 2) the view's parent (which controls animations on its children)\n     * will be invalidated when the animation is supposed to\n     * start.\n     *\n     * @param animation The next animation, or null.\n     ",
    "links" : [ "#startAnimation(android.view.animation.Animation)" ]
  }, {
    "name" : "protected void onAnimationStart()",
    "returnType" : "void",
    "comment" : "\n     * Invoked by a parent ViewGroup to notify the start of the animation\n     * currently associated with this view. If you override this method,\n     * always call super.onAnimationStart();\n     *\n     * @see #setAnimation(android.view.animation.Animation)\n     * @see #getAnimation()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAnimationEnd()",
    "returnType" : "void",
    "comment" : "\n     * Invoked by a parent ViewGroup to notify the end of the animation\n     * currently associated with this view. If you override this method,\n     * always call super.onAnimationEnd();\n     *\n     * @see #setAnimation(android.view.animation.Animation)\n     * @see #getAnimation()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onSetAlpha(int alpha)",
    "returnType" : "boolean",
    "comment" : "\n     * Invoked if there is a Transform that involves alpha. Subclass that can\n     * draw themselves with the specified alpha should return true, and then\n     * respect that alpha when their onDraw() is called. If this returns false\n     * then the view may be redirected to draw into an offscreen buffer to\n     * fulfill the request, which will look fine, but may be slower than if the\n     * subclass handles it internally. The default implementation returns false.\n     *\n     * @param alpha The alpha (0..255) to apply to the view's drawing\n     * @return true if the view can draw with the specified alpha.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean gatherTransparentRegion(Region region)",
    "returnType" : "boolean",
    "comment" : "\n     * This is used by the RootView to perform an optimization when\n     * the view hierarchy contains one or several SurfaceView.\n     * SurfaceView is always considered transparent, but its children are not,\n     * therefore all View objects remove themselves from the global transparent\n     * region (passed as a parameter to this function).\n     *\n     * @param region The transparent region for this ViewAncestor (window).\n     *\n     * @return Returns true if the effective visibility of the view at this\n     * point is opaque, regardless of the transparent region; returns false\n     * if it is possible for underlying windows to be seen behind the view.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void playSoundEffect(int soundConstant)",
    "returnType" : "void",
    "comment" : "\n     * Play a sound effect for this view.\n     *\n     * <p>The framework will play sound effects for some built in actions, such as\n     * clicking, but you may wish to play these effects in your widget,\n     * for instance, for internal navigation.\n     *\n     * <p>The sound effect will only be played if sound effects are enabled by the user, and\n     * {@link #isSoundEffectsEnabled()} is true.\n     *\n     * @param soundConstant One of the constants defined in {@link SoundEffectConstants}\n     ",
    "links" : [ "android.view.SoundEffectConstants", "#isSoundEffectsEnabled()" ]
  }, {
    "name" : "public boolean performHapticFeedback(int feedbackConstant)",
    "returnType" : "boolean",
    "comment" : "\n     * BZZZTT!!1!\n     *\n     * <p>Provide haptic feedback to the user for this view.\n     *\n     * <p>The framework will provide haptic feedback for some built in actions,\n     * such as long presses, but you may wish to provide feedback for your\n     * own widget.\n     *\n     * <p>The feedback will only be performed if\n     * {@link #isHapticFeedbackEnabled()} is true.\n     *\n     * @param feedbackConstant One of the constants defined in\n     * {@link HapticFeedbackConstants}\n     ",
    "links" : [ "android.view.HapticFeedbackConstants", "#isHapticFeedbackEnabled()" ]
  }, {
    "name" : "public boolean performHapticFeedback(int feedbackConstant, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * BZZZTT!!1!\n     *\n     * <p>Like {@link #performHapticFeedback(int)}, with additional options.\n     *\n     * @param feedbackConstant One of the constants defined in\n     * {@link HapticFeedbackConstants}\n     * @param flags Additional flags as per {@link HapticFeedbackConstants}.\n     ",
    "links" : [ "android.view.HapticFeedbackConstants", "#performHapticFeedback(int)" ]
  }, {
    "name" : "public void setSystemUiVisibility(int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Request that the visibility of the status bar or other screen/window\n     * decorations be changed.\n     *\n     * <p>This method is used to put the over device UI into temporary modes\n     * where the user's attention is focused more on the application content,\n     * by dimming or hiding surrounding system affordances.  This is typically\n     * used in conjunction with {@link Window#FEATURE_ACTION_BAR_OVERLAY\n     * Window.FEATURE_ACTION_BAR_OVERLAY}, allowing the applications content\n     * to be placed behind the action bar (and with these flags other system\n     * affordances) so that smooth transitions between hiding and showing them\n     * can be done.\n     *\n     * <p>Two representative examples of the use of system UI visibility is\n     * implementing a content browsing application (like a magazine reader)\n     * and a video playing application.\n     *\n     * <p>The first code shows a typical implementation of a View in a content\n     * browsing application.  In this implementation, the application goes\n     * into a content-oriented mode by hiding the status bar and action bar,\n     * and putting the navigation elements into lights out mode.  The user can\n     * then interact with content while in this mode.  Such an application should\n     * provide an easy way for the user to toggle out of the mode (such as to\n     * check information in the status bar or access notifications).  In the\n     * implementation here, this is done simply by tapping on the content.\n     *\n     * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/ContentBrowserActivity.java\n     *      content}\n     *\n     * <p>This second code sample shows a typical implementation of a View\n     * in a video playing application.  In this situation, while the video is\n     * playing the application would like to go into a complete full-screen mode,\n     * to use as much of the display as possible for the video.  When in this state\n     * the user can not interact with the application; the system intercepts\n     * touching on the screen to pop the UI out of full screen mode.  See\n     * {@link #fitSystemWindows(Rect)} for a sample layout that goes with this code.\n     *\n     * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/VideoPlayerActivity.java\n     *      content}\n     *\n     * @param visibility  Bitwise-or of flags {@link #SYSTEM_UI_FLAG_LOW_PROFILE},\n     * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, {@link #SYSTEM_UI_FLAG_FULLSCREEN},\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_STABLE}, {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION},\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}, {@link #SYSTEM_UI_FLAG_IMMERSIVE},\n     * and {@link #SYSTEM_UI_FLAG_IMMERSIVE_STICKY}.\n     *\n     * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n     * instead.\n     ",
    "links" : [ "#SYSTEM_UI_FLAG_IMMERSIVE_STICKY", "android.view.WindowInsetsController", "#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "#SYSTEM_UI_FLAG_LAYOUT_STABLE", "#SYSTEM_UI_FLAG_IMMERSIVE", "#SYSTEM_UI_FLAG_LOW_PROFILE", "#SYSTEM_UI_FLAG_FULLSCREEN", "android.view.Window#FEATURE_ACTION_BAR_OVERLAYWindow.FEATURE_ACTION_BAR_OVERLAY", "#SYSTEM_UI_FLAG_HIDE_NAVIGATION", "#fitSystemWindows(Rect)" ]
  }, {
    "name" : "public int getSystemUiVisibility()",
    "returnType" : "int",
    "comment" : "\n     * Returns the last {@link #setSystemUiVisibility(int)} that this view has requested.\n     * @return  Bitwise-or of flags {@link #SYSTEM_UI_FLAG_LOW_PROFILE},\n     * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, {@link #SYSTEM_UI_FLAG_FULLSCREEN},\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_STABLE}, {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION},\n     * {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}, {@link #SYSTEM_UI_FLAG_IMMERSIVE},\n     * and {@link #SYSTEM_UI_FLAG_IMMERSIVE_STICKY}.\n     *\n     * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n     * instead.\n     ",
    "links" : [ "#SYSTEM_UI_FLAG_IMMERSIVE_STICKY", "android.view.WindowInsetsController", "#setSystemUiVisibility(int)", "#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "#SYSTEM_UI_FLAG_LAYOUT_STABLE", "#SYSTEM_UI_FLAG_IMMERSIVE", "#SYSTEM_UI_FLAG_LOW_PROFILE", "#SYSTEM_UI_FLAG_FULLSCREEN", "#SYSTEM_UI_FLAG_HIDE_NAVIGATION" ]
  }, {
    "name" : "public int getWindowSystemUiVisibility()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current system UI visibility that is currently set for\n     * the entire window.  This is the combination of the\n     * {@link #setSystemUiVisibility(int)} values supplied by all of the\n     * views in the window.\n     *\n     * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n     * instead.\n     ",
    "links" : [ "android.view.WindowInsetsController", "#setSystemUiVisibility(int)" ]
  }, {
    "name" : "public void onWindowSystemUiVisibilityChanged(int visible)",
    "returnType" : "void",
    "comment" : "\n     * Override to find out when the window's requested system UI visibility\n     * has changed, that is the value returned by {@link #getWindowSystemUiVisibility()}.\n     * This is different from the callbacks received through\n     * {@link #setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener)}\n     * in that this is only telling you about the local request of the window,\n     * not the actual values applied by the system.\n     *\n     * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n     * instead.\n     ",
    "links" : [ "android.view.WindowInsetsController", "#setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener)", "#getWindowSystemUiVisibility()" ]
  }, {
    "name" : "public void dispatchWindowSystemUiVisiblityChanged(int visible)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch callbacks to {@link #onWindowSystemUiVisibilityChanged(int)} down\n     * the view hierarchy.\n     *\n     * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n     * instead.\n     ",
    "links" : [ "android.view.WindowInsetsController", "#onWindowSystemUiVisibilityChanged(int)" ]
  }, {
    "name" : "public void setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener l)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to receive callbacks when the visibility of the system bar changes.\n     * @param l  The {@link OnSystemUiVisibilityChangeListener} to receive callbacks.\n     *\n     * @deprecated Use {@link WindowInsets#isVisible(int)} to find out about system bar visibilities\n     * by setting a {@link OnApplyWindowInsetsListener} on this view.\n     ",
    "links" : [ "OnSystemUiVisibilityChangeListener", "OnApplyWindowInsetsListener", "android.view.WindowInsets#isVisible(int)" ]
  }, {
    "name" : "public void dispatchSystemUiVisibilityChanged(int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch callbacks to {@link #setOnSystemUiVisibilityChangeListener} down\n     * the view hierarchy.\n     *\n     * @deprecated Use {@link WindowInsets#isVisible(int)} to find out about system bar visibilities\n     * by setting a {@link OnApplyWindowInsetsListener} on this view.\n     ",
    "links" : [ "OnApplyWindowInsetsListener", "#setOnSystemUiVisibilityChangeListener", "android.view.WindowInsets#isVisible(int)" ]
  }, {
    "name" : " boolean updateLocalSystemUiVisibility(int localValue, int localChanges)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledSystemUiVisibility(int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean startDrag(ClipData data, DragShadowBuilder shadowBuilder, Object myLocalState, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)\n     * startDragAndDrop()} for newer platform versions.\n     ",
    "links" : [ "#startDragAndDrop(ClipData" ]
  }, {
    "name" : "public final boolean startDragAndDrop(ClipData data, DragShadowBuilder shadowBuilder, Object myLocalState, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts a drag and drop operation. When your application calls this method, it passes a\n     * {@link android.view.View.DragShadowBuilder} object to the system. The\n     * system calls this object's {@link DragShadowBuilder#onProvideShadowMetrics(Point, Point)}\n     * to get metrics for the drag shadow, and then calls the object's\n     * {@link DragShadowBuilder#onDrawShadow(Canvas)} to draw the drag shadow itself.\n     * <p>\n     *  Once the system has the drag shadow, it begins the drag and drop operation by sending\n     *  drag events to all the View objects in your application that are currently visible. It does\n     *  this either by calling the View object's drag listener (an implementation of\n     *  {@link android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag()} or by calling the\n     *  View object's {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} method.\n     *  Both are passed a {@link android.view.DragEvent} object that has a\n     *  {@link android.view.DragEvent#getAction()} value of\n     *  {@link android.view.DragEvent#ACTION_DRAG_STARTED}.\n     * </p>\n     * <p>\n     * Your application can invoke {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object,\n     * int) startDragAndDrop()} on any attached View object. The View object does not need to be\n     * the one used in {@link android.view.View.DragShadowBuilder}, nor does it need to be related\n     * to the View the user selected for dragging.\n     * </p>\n     * @param data A {@link android.content.ClipData} object pointing to the data to be\n     * transferred by the drag and drop operation.\n     * @param shadowBuilder A {@link android.view.View.DragShadowBuilder} object for building the\n     * drag shadow.\n     * @param myLocalState An {@link java.lang.Object} containing local data about the drag and\n     * drop operation. When dispatching drag events to views in the same activity this object\n     * will be available through {@link android.view.DragEvent#getLocalState()}. Views in other\n     * activities will not have access to this data ({@link android.view.DragEvent#getLocalState()}\n     * will return null).\n     * <p>\n     * myLocalState is a lightweight mechanism for the sending information from the dragged View\n     * to the target Views. For example, it can contain flags that differentiate between a\n     * a copy operation and a move operation.\n     * </p>\n     * @param flags Flags that control the drag and drop operation. This can be set to 0 for no\n     * flags, or any combination of the following:\n     *     <ul>\n     *         <li>{@link #DRAG_FLAG_GLOBAL}</li>\n     *         <li>{@link #DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION}</li>\n     *         <li>{@link #DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION}</li>\n     *         <li>{@link #DRAG_FLAG_GLOBAL_URI_READ}</li>\n     *         <li>{@link #DRAG_FLAG_GLOBAL_URI_WRITE}</li>\n     *         <li>{@link #DRAG_FLAG_OPAQUE}</li>\n     *     </ul>\n     * @return {@code true} if the method completes successfully, or\n     * {@code false} if it fails anywhere. Returning {@code false} means the system was unable to\n     * do a drag because of another ongoing operation or some other reasons.\n     ",
    "links" : [ "android.view.View.OnDragListener#onDrag(View", "android.view.DragEvent", "#DRAG_FLAG_GLOBAL", "#onProvideShadowMetrics(Point", "android.view.DragEvent#getAction()", "#DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION", "#startDragAndDrop(ClipData", "#DRAG_FLAG_OPAQUE", "#onDrawShadow(Canvas)", "android.content.ClipData", "#DRAG_FLAG_GLOBAL_URI_WRITE", "android.view.DragEvent#ACTION_DRAG_STARTED", "#DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION", "#DRAG_FLAG_GLOBAL_URI_READ", "android.view.View#onDragEvent(DragEvent)", "java.lang.Object", "android.view.View.DragShadowBuilder", "android.view.DragEvent#getLocalState()" ]
  }, {
    "name" : "public final void cancelDragAndDrop()",
    "returnType" : "void",
    "comment" : "\n     * Cancels an ongoing drag and drop operation.\n     * <p>\n     * A {@link android.view.DragEvent} object with\n     * {@link android.view.DragEvent#getAction()} value of\n     * {@link android.view.DragEvent#ACTION_DRAG_ENDED} and\n     * {@link android.view.DragEvent#getResult()} value of {@code false}\n     * will be sent to every\n     * View that received {@link android.view.DragEvent#ACTION_DRAG_STARTED}\n     * even if they are not currently visible.\n     * </p>\n     * <p>\n     * This method can be called on any View in the same window as the View on which\n     * {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object, int) startDragAndDrop}\n     * was called.\n     * </p>\n     ",
    "links" : [ "android.view.DragEvent#getResult()", "android.view.DragEvent", "android.view.DragEvent#ACTION_DRAG_STARTED", "android.view.DragEvent#getAction()", "android.view.DragEvent#ACTION_DRAG_ENDED", "#startDragAndDrop(ClipData" ]
  }, {
    "name" : "public final void updateDragShadow(DragShadowBuilder shadowBuilder)",
    "returnType" : "void",
    "comment" : "\n     * Updates the drag shadow for the ongoing drag and drop operation.\n     *\n     * @param shadowBuilder A {@link android.view.View.DragShadowBuilder} object for building the\n     * new drag shadow.\n     ",
    "links" : [ "android.view.View.DragShadowBuilder" ]
  }, {
    "name" : "public final boolean startMovingTask(float startX, float startY)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts a move from {startX, startY}, the amount of the movement will be the offset\n     * between {startX, startY} and the new cursor positon.\n     * @param startX horizontal coordinate where the move started.\n     * @param startY vertical coordinate where the move started.\n     * @return whether moving was started successfully.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finishMovingTask()",
    "returnType" : "void",
    "comment" : "\n     * Finish a window move task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onDragEvent(DragEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles drag events sent by the system following a call to\n     * {@link android.view.View#startDragAndDrop(ClipData,DragShadowBuilder,Object,int)\n     * startDragAndDrop()}.\n     *<p>\n     * When the system calls this method, it passes a\n     * {@link android.view.DragEvent} object. A call to\n     * {@link android.view.DragEvent#getAction()} returns one of the action type constants defined\n     * in DragEvent. The method uses these to determine what is happening in the drag and drop\n     * operation.\n     * @param event The {@link android.view.DragEvent} sent by the system.\n     * The {@link android.view.DragEvent#getAction()} method returns an action type constant defined\n     * in DragEvent, indicating the type of drag event represented by this object.\n     * @return {@code true} if the method was successful, otherwise {@code false}.\n     * <p>\n     *  The method should return {@code true} in response to an action type of\n     *  {@link android.view.DragEvent#ACTION_DRAG_STARTED} to receive drag events for the current\n     *  operation.\n     * </p>\n     * <p>\n     *  The method should also return {@code true} in response to an action type of\n     *  {@link android.view.DragEvent#ACTION_DROP} if it consumed the drop, or\n     *  {@code false} if it didn't.\n     * </p>\n     * <p>\n     *  For all other events, the return value is ignored.\n     * </p>\n     ",
    "links" : [ "android.view.DragEvent", "android.view.DragEvent#ACTION_DRAG_STARTED", "android.view.DragEvent#getAction()", "android.view.View#startDragAndDrop(ClipData", "android.view.DragEvent#ACTION_DROP" ]
  }, {
    "name" : " boolean dispatchDragEnterExitInPreN(DragEvent event)",
    "returnType" : "boolean",
    "comment" : " Dispatches ACTION_DRAG_ENTERED and ACTION_DRAG_EXITED events for pre-Nougat apps.",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchDragEvent(DragEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Detects if this View is enabled and has a drag event listener.\n     * If both are true, then it calls the drag event listener with the\n     * {@link android.view.DragEvent} it received. If the drag event listener returns\n     * {@code true}, then dispatchDragEvent() returns {@code true}.\n     * <p>\n     * For all other cases, the method calls the\n     * {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} drag event handler\n     * method and returns its result.\n     * </p>\n     * <p>\n     * This ensures that a drag event is always consumed, even if the View does not have a drag\n     * event listener. However, if the View has a listener and the listener returns true, then\n     * onDragEvent() is not called.\n     * </p>\n     ",
    "links" : [ "android.view.DragEvent", "android.view.View#onDragEvent(DragEvent)" ]
  }, {
    "name" : " final boolean callDragEventHandler(DragEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean canAcceptDrag()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCloseSystemDialogs(String reason)",
    "returnType" : "void",
    "comment" : "\n     * This needs to be a better API (NOT ON VIEW) before it is exposed.  If\n     * it is ever exposed at all.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyDrawableToTransparentRegion(Drawable dr, Region region)",
    "returnType" : "void",
    "comment" : "\n     * Given a Drawable whose bounds have been set to draw into this view,\n     * update a Region being computed for\n     * {@link #gatherTransparentRegion(android.graphics.Region)} so\n     * that any non-transparent parts of the Drawable are removed from the\n     * given transparent region.\n     *\n     * @param dr The Drawable whose transparency is to be applied to the region.\n     * @param region A Region holding the current transparency information,\n     * where any parts of the region that are set are considered to be\n     * transparent.  On return, this region will be modified to have the\n     * transparency information reduced by the corresponding parts of the\n     * Drawable that are not transparent.\n     * {@hide}\n     ",
    "links" : [ "#gatherTransparentRegion(android.graphics.Region)" ]
  }, {
    "name" : "private void checkForLongClick(long delay, float x, float y, int classification)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static View inflate(Context context, @LayoutRes int resource, ViewGroup root)",
    "returnType" : "View",
    "comment" : "\n     * Inflate a view from an XML resource.  This convenience method wraps the {@link\n     * LayoutInflater} class, which provides a full range of options for view inflation.\n     *\n     * @param context The Context object for your activity or application.\n     * @param resource The resource ID to inflate\n     * @param root A view group that will be the parent.  Used to properly inflate the\n     * layout_* parameters.\n     * @see LayoutInflater\n     ",
    "links" : [ "android.view.LayoutInflater" ]
  }, {
    "name" : "protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent)",
    "returnType" : "boolean",
    "comment" : "\n     * Scroll the view with standard behavior for scrolling beyond the normal\n     * content boundaries. Views that call this method should override\n     * {@link #onOverScrolled(int, int, boolean, boolean)} to respond to the\n     * results of an over-scroll operation.\n     *\n     * Views can use this method to handle any touch or fling-based scrolling.\n     *\n     * @param deltaX Change in X in pixels\n     * @param deltaY Change in Y in pixels\n     * @param scrollX Current X scroll value in pixels before applying deltaX\n     * @param scrollY Current Y scroll value in pixels before applying deltaY\n     * @param scrollRangeX Maximum content scroll range along the X axis\n     * @param scrollRangeY Maximum content scroll range along the Y axis\n     * @param maxOverScrollX Number of pixels to overscroll by in either direction\n     *          along the X axis.\n     * @param maxOverScrollY Number of pixels to overscroll by in either direction\n     *          along the Y axis.\n     * @param isTouchEvent true if this scroll operation is the result of a touch event.\n     * @return true if scrolling was clamped to an over-scroll boundary along either\n     *          axis, false otherwise.\n     ",
    "links" : [ "#onOverScrolled(int" ]
  }, {
    "name" : "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #overScrollBy(int, int, int, int, int, int, int, int, boolean)} to\n     * respond to the results of an over-scroll operation.\n     *\n     * @param scrollX New X scroll value in pixels\n     * @param scrollY New Y scroll value in pixels\n     * @param clampedX True if scrollX was clamped to an over-scroll boundary\n     * @param clampedY True if scrollY was clamped to an over-scroll boundary\n     ",
    "links" : [ "#overScrollBy(int" ]
  }, {
    "name" : "public int getOverScrollMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the over-scroll mode for this view. The result will be\n     * one of {@link #OVER_SCROLL_ALWAYS}, {@link #OVER_SCROLL_IF_CONTENT_SCROLLS}\n     * (allow over-scrolling only if the view content is larger than the container),\n     * or {@link #OVER_SCROLL_NEVER}.\n     *\n     * @return This view's over-scroll mode.\n     ",
    "links" : [ "#OVER_SCROLL_ALWAYS", "#OVER_SCROLL_IF_CONTENT_SCROLLS", "#OVER_SCROLL_NEVER" ]
  }, {
    "name" : "public void setOverScrollMode(int overScrollMode)",
    "returnType" : "void",
    "comment" : "\n     * Set the over-scroll mode for this view. Valid over-scroll modes are\n     * {@link #OVER_SCROLL_ALWAYS}, {@link #OVER_SCROLL_IF_CONTENT_SCROLLS}\n     * (allow over-scrolling only if the view content is larger than the container),\n     * or {@link #OVER_SCROLL_NEVER}.\n     *\n     * Setting the over-scroll mode of a view will have an effect only if the\n     * view is capable of scrolling.\n     *\n     * @param overScrollMode The new over-scroll mode for this view.\n     ",
    "links" : [ "#OVER_SCROLL_ALWAYS", "#OVER_SCROLL_IF_CONTENT_SCROLLS", "#OVER_SCROLL_NEVER" ]
  }, {
    "name" : "public void setNestedScrollingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable nested scrolling for this view.\n     *\n     * <p>If this property is set to true the view will be permitted to initiate nested\n     * scrolling operations with a compatible parent view in the current hierarchy. If this\n     * view does not implement nested scrolling this will have no effect. Disabling nested scrolling\n     * while a nested scroll is in progress has the effect of {@link #stopNestedScroll() stopping}\n     * the nested scroll.</p>\n     *\n     * @param enabled true to enable nested scrolling, false to disable\n     *\n     * @see #isNestedScrollingEnabled()\n     ",
    "links" : [ "#stopNestedScroll()" ]
  }, {
    "name" : "public boolean isNestedScrollingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if nested scrolling is enabled for this view.\n     *\n     * <p>If nested scrolling is enabled and this View class implementation supports it,\n     * this view will act as a nested scrolling child view when applicable, forwarding data\n     * about the scroll operation in progress to a compatible and cooperating nested scrolling\n     * parent.</p>\n     *\n     * @return true if nested scrolling is enabled\n     *\n     * @see #setNestedScrollingEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startNestedScroll(int axes)",
    "returnType" : "boolean",
    "comment" : "\n     * Begin a nestable scroll operation along the given axes.\n     *\n     * <p>A view starting a nested scroll promises to abide by the following contract:</p>\n     *\n     * <p>The view will call startNestedScroll upon initiating a scroll operation. In the case\n     * of a touch scroll this corresponds to the initial {@link MotionEvent#ACTION_DOWN}.\n     * In the case of touch scrolling the nested scroll will be terminated automatically in\n     * the same manner as {@link ViewParent#requestDisallowInterceptTouchEvent(boolean)}.\n     * In the event of programmatic scrolling the caller must explicitly call\n     * {@link #stopNestedScroll()} to indicate the end of the nested scroll.</p>\n     *\n     * <p>If <code>startNestedScroll</code> returns true, a cooperative parent was found.\n     * If it returns false the caller may ignore the rest of this contract until the next scroll.\n     * Calling startNestedScroll while a nested scroll is already in progress will return true.</p>\n     *\n     * <p>At each incremental step of the scroll the caller should invoke\n     * {@link #dispatchNestedPreScroll(int, int, int[], int[]) dispatchNestedPreScroll}\n     * once it has calculated the requested scrolling delta. If it returns true the nested scrolling\n     * parent at least partially consumed the scroll and the caller should adjust the amount it\n     * scrolls by.</p>\n     *\n     * <p>After applying the remainder of the scroll delta the caller should invoke\n     * {@link #dispatchNestedScroll(int, int, int, int, int[]) dispatchNestedScroll}, passing\n     * both the delta consumed and the delta unconsumed. A nested scrolling parent may treat\n     * these values differently. See {@link ViewParent#onNestedScroll(View, int, int, int, int)}.\n     * </p>\n     *\n     * @param axes Flags consisting of a combination of {@link #SCROLL_AXIS_HORIZONTAL} and/or\n     *             {@link #SCROLL_AXIS_VERTICAL}.\n     * @return true if a cooperative parent was found and nested scrolling has been enabled for\n     *         the current gesture.\n     *\n     * @see #stopNestedScroll()\n     * @see #dispatchNestedPreScroll(int, int, int[], int[])\n     * @see #dispatchNestedScroll(int, int, int, int, int[])\n     ",
    "links" : [ "android.view.ViewParent#onNestedScroll(View", "#SCROLL_AXIS_VERTICAL", "#dispatchNestedScroll(int", "#SCROLL_AXIS_HORIZONTAL", "#dispatchNestedPreScroll(int", "android.view.MotionEvent#ACTION_DOWN", "android.view.ViewParent#requestDisallowInterceptTouchEvent(boolean)", "#stopNestedScroll()" ]
  }, {
    "name" : "public void stopNestedScroll()",
    "returnType" : "void",
    "comment" : "\n     * Stop a nested scroll in progress.\n     *\n     * <p>Calling this method when a nested scroll is not currently in progress is harmless.</p>\n     *\n     * @see #startNestedScroll(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNestedScrollingParent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this view has a nested scrolling parent.\n     *\n     * <p>The presence of a nested scrolling parent indicates that this view has initiated\n     * a nested scroll and it was accepted by an ancestor view further up the view hierarchy.</p>\n     *\n     * @return whether this view has a nested scrolling parent\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable @Size(2) int[] offsetInWindow)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch one step of a nested scroll in progress.\n     *\n     * <p>Implementations of views that support nested scrolling should call this to report\n     * info about a scroll in progress to the current nested scrolling parent. If a nested scroll\n     * is not currently in progress or nested scrolling is not\n     * {@link #isNestedScrollingEnabled() enabled} for this view this method does nothing.</p>\n     *\n     * <p>Compatible View implementations should also call\n     * {@link #dispatchNestedPreScroll(int, int, int[], int[]) dispatchNestedPreScroll} before\n     * consuming a component of the scroll event themselves.</p>\n     *\n     * @param dxConsumed Horizontal distance in pixels consumed by this view during this scroll step\n     * @param dyConsumed Vertical distance in pixels consumed by this view during this scroll step\n     * @param dxUnconsumed Horizontal scroll distance in pixels not consumed by this view\n     * @param dyUnconsumed Horizontal scroll distance in pixels not consumed by this view\n     * @param offsetInWindow Optional. If not null, on return this will contain the offset\n     *                       in local view coordinates of this view from before this operation\n     *                       to after it completes. View implementations may use this to adjust\n     *                       expected input coordinate tracking.\n     * @return true if the event was dispatched, false if it could not be dispatched.\n     * @see #dispatchNestedPreScroll(int, int, int[], int[])\n     ",
    "links" : [ "#isNestedScrollingEnabled()", "#dispatchNestedPreScroll(int" ]
  }, {
    "name" : "public boolean dispatchNestedPreScroll(int dx, int dy, @Nullable @Size(2) int[] consumed, @Nullable @Size(2) int[] offsetInWindow)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch one step of a nested scroll in progress before this view consumes any portion of it.\n     *\n     * <p>Nested pre-scroll events are to nested scroll events what touch intercept is to touch.\n     * <code>dispatchNestedPreScroll</code> offers an opportunity for the parent view in a nested\n     * scrolling operation to consume some or all of the scroll operation before the child view\n     * consumes it.</p>\n     *\n     * @param dx Horizontal scroll distance in pixels\n     * @param dy Vertical scroll distance in pixels\n     * @param consumed Output. If not null, consumed[0] will contain the consumed component of dx\n     *                 and consumed[1] the consumed dy.\n     * @param offsetInWindow Optional. If not null, on return this will contain the offset\n     *                       in local view coordinates of this view from before this operation\n     *                       to after it completes. View implementations may use this to adjust\n     *                       expected input coordinate tracking.\n     * @return true if the parent consumed some or all of the scroll delta\n     * @see #dispatchNestedScroll(int, int, int, int, int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a fling to a nested scrolling parent.\n     *\n     * <p>This method should be used to indicate that a nested scrolling child has detected\n     * suitable conditions for a fling. Generally this means that a touch scroll has ended with a\n     * {@link VelocityTracker velocity} in the direction of scrolling that meets or exceeds\n     * the {@link ViewConfiguration#getScaledMinimumFlingVelocity() minimum fling velocity}\n     * along a scrollable axis.</p>\n     *\n     * <p>If a nested scrolling child view would normally fling but it is at the edge of\n     * its own content, it can use this method to delegate the fling to its nested scrolling\n     * parent instead. The parent may optionally consume the fling or observe a child fling.</p>\n     *\n     * @param velocityX Horizontal fling velocity in pixels per second\n     * @param velocityY Vertical fling velocity in pixels per second\n     * @param consumed true if the child consumed the fling, false otherwise\n     * @return true if the nested scrolling parent consumed or otherwise reacted to the fling\n     ",
    "links" : [ "android.view.ViewConfiguration#getScaledMinimumFlingVelocity()", "android.view.VelocityTracker" ]
  }, {
    "name" : "public boolean dispatchNestedPreFling(float velocityX, float velocityY)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatch a fling to a nested scrolling parent before it is processed by this view.\n     *\n     * <p>Nested pre-fling events are to nested fling events what touch intercept is to touch\n     * and what nested pre-scroll is to nested scroll. <code>dispatchNestedPreFling</code>\n     * offsets an opportunity for the parent view in a nested fling to fully consume the fling\n     * before the child view consumes it. If this method returns <code>true</code>, a nested\n     * parent view consumed the fling and this view should not scroll as a result.</p>\n     *\n     * <p>For a better user experience, only one view in a nested scrolling chain should consume\n     * the fling at a time. If a parent view consumed the fling this method will return false.\n     * Custom view implementations should account for this in two ways:</p>\n     *\n     * <ul>\n     *     <li>If a custom view is paged and needs to settle to a fixed page-point, do not\n     *     call <code>dispatchNestedPreFling</code>; consume the fling and settle to a valid\n     *     position regardless.</li>\n     *     <li>If a nested parent does consume the fling, this view should not scroll at all,\n     *     even to settle back to a valid idle position.</li>\n     * </ul>\n     *\n     * <p>Views should also not offer fling velocities to nested parent views along an axis\n     * where scrolling is not currently supported; a {@link android.widget.ScrollView ScrollView}\n     * should not offer a horizontal fling velocity to its parents since scrolling along that\n     * axis is not permitted and carrying velocity along that motion does not make sense.</p>\n     *\n     * @param velocityX Horizontal fling velocity in pixels per second\n     * @param velocityY Vertical fling velocity in pixels per second\n     * @return true if a nested scrolling parent consumed the fling\n     ",
    "links" : [ "android.widget.ScrollView" ]
  }, {
    "name" : "protected float getVerticalScrollFactor()",
    "returnType" : "float",
    "comment" : "\n     * Gets a scale factor that determines the distance the view should scroll\n     * vertically in response to {@link MotionEvent#ACTION_SCROLL}.\n     * @return The vertical scroll scale factor.\n     * @hide\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_SCROLL" ]
  }, {
    "name" : "protected float getHorizontalScrollFactor()",
    "returnType" : "float",
    "comment" : "\n     * Gets a scale factor that determines the distance the view should scroll\n     * horizontally in response to {@link MotionEvent#ACTION_SCROLL}.\n     * @return The horizontal scroll scale factor.\n     * @hide\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_SCROLL" ]
  }, {
    "name" : "public int getRawTextDirection()",
    "returnType" : "int",
    "comment" : "\n     * Return the value specifying the text direction or policy that was set with\n     * {@link #setTextDirection(int)}.\n     *\n     * @return the defined text direction. It can be one of:\n     *\n     * {@link #TEXT_DIRECTION_INHERIT},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG},\n     * {@link #TEXT_DIRECTION_ANY_RTL},\n     * {@link #TEXT_DIRECTION_LTR},\n     * {@link #TEXT_DIRECTION_RTL},\n     * {@link #TEXT_DIRECTION_LOCALE},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG_LTR},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG_RTL}\n     *\n     * @attr ref android.R.styleable#View_textDirection\n     *\n     * @hide\n     ",
    "links" : [ "#TEXT_DIRECTION_LOCALE", "#TEXT_DIRECTION_FIRST_STRONG", "#TEXT_DIRECTION_INHERIT", "#setTextDirection(int)", "#TEXT_DIRECTION_LTR", "#TEXT_DIRECTION_RTL", "#TEXT_DIRECTION_FIRST_STRONG_LTR", "#TEXT_DIRECTION_FIRST_STRONG_RTL", "#TEXT_DIRECTION_ANY_RTL" ]
  }, {
    "name" : "public void setTextDirection(int textDirection)",
    "returnType" : "void",
    "comment" : "\n     * Set the text direction.\n     *\n     * @param textDirection the direction to set. Should be one of:\n     *\n     * {@link #TEXT_DIRECTION_INHERIT},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG},\n     * {@link #TEXT_DIRECTION_ANY_RTL},\n     * {@link #TEXT_DIRECTION_LTR},\n     * {@link #TEXT_DIRECTION_RTL},\n     * {@link #TEXT_DIRECTION_LOCALE}\n     * {@link #TEXT_DIRECTION_FIRST_STRONG_LTR},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG_RTL},\n     *\n     * Resolution will be done if the value is set to TEXT_DIRECTION_INHERIT. The resolution\n     * proceeds up the parent chain of the view to get the value. If there is no parent, then it will\n     * return the default {@link #TEXT_DIRECTION_FIRST_STRONG}.\n     *\n     * @attr ref android.R.styleable#View_textDirection\n     ",
    "links" : [ "#TEXT_DIRECTION_LOCALE", "#TEXT_DIRECTION_FIRST_STRONG", "#TEXT_DIRECTION_INHERIT", "#TEXT_DIRECTION_LTR", "#TEXT_DIRECTION_RTL", "#TEXT_DIRECTION_FIRST_STRONG_LTR", "#TEXT_DIRECTION_FIRST_STRONG_RTL", "#TEXT_DIRECTION_ANY_RTL" ]
  }, {
    "name" : "public int getTextDirection()",
    "returnType" : "int",
    "comment" : "\n     * Return the resolved text direction.\n     *\n     * @return the resolved text direction. Returns one of:\n     *\n     * {@link #TEXT_DIRECTION_FIRST_STRONG},\n     * {@link #TEXT_DIRECTION_ANY_RTL},\n     * {@link #TEXT_DIRECTION_LTR},\n     * {@link #TEXT_DIRECTION_RTL},\n     * {@link #TEXT_DIRECTION_LOCALE},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG_LTR},\n     * {@link #TEXT_DIRECTION_FIRST_STRONG_RTL}\n     *\n     * @attr ref android.R.styleable#View_textDirection\n     ",
    "links" : [ "#TEXT_DIRECTION_LOCALE", "#TEXT_DIRECTION_FIRST_STRONG", "#TEXT_DIRECTION_LTR", "#TEXT_DIRECTION_RTL", "#TEXT_DIRECTION_FIRST_STRONG_LTR", "#TEXT_DIRECTION_FIRST_STRONG_RTL", "#TEXT_DIRECTION_ANY_RTL" ]
  }, {
    "name" : "public boolean resolveTextDirection()",
    "returnType" : "boolean",
    "comment" : "\n     * Resolve the text direction.\n     *\n     * @return true if resolution has been done, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canResolveTextDirection()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if text direction resolution can be done.\n     *\n     * @return true if text direction resolution can be done otherwise return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetResolvedTextDirection()",
    "returnType" : "void",
    "comment" : "\n     * Reset resolved text direction. Text direction will be resolved during a call to\n     * {@link #onMeasure(int, int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#onMeasure(int" ]
  }, {
    "name" : "public boolean isTextDirectionInherited()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if text direction is inherited.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTextDirectionResolved()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if text direction is resolved.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawTextAlignment()",
    "returnType" : "int",
    "comment" : "\n     * Return the value specifying the text alignment or policy that was set with\n     * {@link #setTextAlignment(int)}.\n     *\n     * @return the defined text alignment. It can be one of:\n     *\n     * {@link #TEXT_ALIGNMENT_INHERIT},\n     * {@link #TEXT_ALIGNMENT_GRAVITY},\n     * {@link #TEXT_ALIGNMENT_CENTER},\n     * {@link #TEXT_ALIGNMENT_TEXT_START},\n     * {@link #TEXT_ALIGNMENT_TEXT_END},\n     * {@link #TEXT_ALIGNMENT_VIEW_START},\n     * {@link #TEXT_ALIGNMENT_VIEW_END}\n     *\n     * @attr ref android.R.styleable#View_textAlignment\n     *\n     * @hide\n     ",
    "links" : [ "#TEXT_ALIGNMENT_TEXT_START", "#TEXT_ALIGNMENT_GRAVITY", "#TEXT_ALIGNMENT_TEXT_END", "#setTextAlignment(int)", "#TEXT_ALIGNMENT_CENTER", "#TEXT_ALIGNMENT_VIEW_END", "#TEXT_ALIGNMENT_VIEW_START", "#TEXT_ALIGNMENT_INHERIT" ]
  }, {
    "name" : "public void setTextAlignment(@TextAlignment int textAlignment)",
    "returnType" : "void",
    "comment" : "\n     * Set the text alignment.\n     *\n     * @param textAlignment The text alignment to set. Should be one of\n     *\n     * {@link #TEXT_ALIGNMENT_INHERIT},\n     * {@link #TEXT_ALIGNMENT_GRAVITY},\n     * {@link #TEXT_ALIGNMENT_CENTER},\n     * {@link #TEXT_ALIGNMENT_TEXT_START},\n     * {@link #TEXT_ALIGNMENT_TEXT_END},\n     * {@link #TEXT_ALIGNMENT_VIEW_START},\n     * {@link #TEXT_ALIGNMENT_VIEW_END}\n     *\n     * Resolution will be done if the value is set to TEXT_ALIGNMENT_INHERIT. The resolution\n     * proceeds up the parent chain of the view to get the value. If there is no parent, then it\n     * will return the default {@link #TEXT_ALIGNMENT_GRAVITY}.\n     *\n     * @attr ref android.R.styleable#View_textAlignment\n     ",
    "links" : [ "#TEXT_ALIGNMENT_TEXT_START", "#TEXT_ALIGNMENT_GRAVITY", "#TEXT_ALIGNMENT_TEXT_END", "#TEXT_ALIGNMENT_CENTER", "#TEXT_ALIGNMENT_VIEW_END", "#TEXT_ALIGNMENT_VIEW_START", "#TEXT_ALIGNMENT_INHERIT" ]
  }, {
    "name" : "public int getTextAlignment()",
    "returnType" : "int",
    "comment" : "\n     * Return the resolved text alignment.\n     *\n     * @return the resolved text alignment. Returns one of:\n     *\n     * {@link #TEXT_ALIGNMENT_GRAVITY},\n     * {@link #TEXT_ALIGNMENT_CENTER},\n     * {@link #TEXT_ALIGNMENT_TEXT_START},\n     * {@link #TEXT_ALIGNMENT_TEXT_END},\n     * {@link #TEXT_ALIGNMENT_VIEW_START},\n     * {@link #TEXT_ALIGNMENT_VIEW_END}\n     *\n     * @attr ref android.R.styleable#View_textAlignment\n     ",
    "links" : [ "#TEXT_ALIGNMENT_TEXT_START", "#TEXT_ALIGNMENT_GRAVITY", "#TEXT_ALIGNMENT_TEXT_END", "#TEXT_ALIGNMENT_CENTER", "#TEXT_ALIGNMENT_VIEW_END", "#TEXT_ALIGNMENT_VIEW_START" ]
  }, {
    "name" : "public boolean resolveTextAlignment()",
    "returnType" : "boolean",
    "comment" : "\n     * Resolve the text alignment.\n     *\n     * @return true if resolution has been done, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canResolveTextAlignment()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if text alignment resolution can be done.\n     *\n     * @return true if text alignment resolution can be done otherwise return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetResolvedTextAlignment()",
    "returnType" : "void",
    "comment" : "\n     * Reset resolved text alignment. Text alignment will be resolved during a call to\n     * {@link #onMeasure(int, int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#onMeasure(int" ]
  }, {
    "name" : "public boolean isTextAlignmentInherited()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if text alignment is inherited.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTextAlignmentResolved()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if text alignment is resolved.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int generateViewId()",
    "returnType" : "int",
    "comment" : "\n     * Generate a value suitable for use in {@link #setId(int)}.\n     * This value will not collide with ID values generated at build time by aapt for R.id.\n     *\n     * @return a generated ID value\n     ",
    "links" : [ "#setId(int)" ]
  }, {
    "name" : "private static boolean isViewIdGenerated(int id)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureTransitioningViews(List<View> transitioningViews)",
    "returnType" : "void",
    "comment" : "\n     * Gets the Views in the hierarchy affected by entering and exiting Activity Scene transitions.\n     * @param transitioningViews This View will be added to transitioningViews if it is VISIBLE and\n     *                           a normal View or a ViewGroup with\n     *                           {@link android.view.ViewGroup#isTransitionGroup()} true.\n     * @hide\n     ",
    "links" : [ "android.view.ViewGroup#isTransitionGroup()" ]
  }, {
    "name" : "public void findNamedViews(Map<String, View> namedElements)",
    "returnType" : "void",
    "comment" : "\n     * Adds all Views that have {@link #getTransitionName()} non-null to namedElements.\n     * @param namedElements Will contain all Views in the hierarchy having a transitionName.\n     * @hide\n     ",
    "links" : [ "#getTransitionName()" ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "\n     * Returns the pointer icon for the motion event, or null if it doesn't specify the icon.\n     * The default implementation does not care the location or event types, but some subclasses\n     * may use it (such as WebViews).\n     * @param event The MotionEvent from a mouse\n     * @param pointerIndex The index of the pointer for which to retrieve the {@link PointerIcon}.\n     *                     This will be between 0 and {@link MotionEvent#getPointerCount()}.\n     * @see PointerIcon\n     ",
    "links" : [ "android.view.PointerIcon", "android.view.MotionEvent#getPointerCount()" ]
  }, {
    "name" : "public void setPointerIcon(PointerIcon pointerIcon)",
    "returnType" : "void",
    "comment" : "\n     * Set the pointer icon for the current view.\n     * Passing {@code null} will restore the pointer icon to its default value.\n     * @param pointerIcon A PointerIcon instance which will be shown when the mouse hovers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon getPointerIcon()",
    "returnType" : "PointerIcon",
    "comment" : "\n     * Gets the pointer icon for the current view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPointerCapture()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks pointer capture status.\n     *\n     * @return true if the view has pointer capture.\n     * @see #requestPointerCapture()\n     * @see #hasPointerCapture()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestPointerCapture()",
    "returnType" : "void",
    "comment" : "\n     * Requests pointer capture mode.\n     * <p>\n     * When the window has pointer capture, the mouse pointer icon will disappear and will not\n     * change its position. Further mouse will be dispatched with the source\n     * {@link InputDevice#SOURCE_MOUSE_RELATIVE}, and relative position changes will be available\n     * through {@link MotionEvent#getX} and {@link MotionEvent#getY}. Non-mouse events\n     * (touchscreens, or stylus) will not be affected.\n     * <p>\n     * If the window already has pointer capture, this call does nothing.\n     * <p>\n     * The capture may be released through {@link #releasePointerCapture()}, or will be lost\n     * automatically when the window loses focus.\n     *\n     * @see #releasePointerCapture()\n     * @see #hasPointerCapture()\n     ",
    "links" : [ "android.view.MotionEvent#getX", "android.view.MotionEvent#getY", "#releasePointerCapture()", "android.view.InputDevice#SOURCE_MOUSE_RELATIVE" ]
  }, {
    "name" : "public void releasePointerCapture()",
    "returnType" : "void",
    "comment" : "\n     * Releases the pointer capture.\n     * <p>\n     * If the window does not have pointer capture, this call will do nothing.\n     * @see #requestPointerCapture()\n     * @see #hasPointerCapture()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPointerCaptureChange(boolean hasCapture)",
    "returnType" : "void",
    "comment" : "\n     * Called when the window has just acquired or lost pointer capture.\n     *\n     * @param hasCapture True if the view now has pointerCapture, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchPointerCaptureChanged(boolean hasCapture)",
    "returnType" : "void",
    "comment" : "\n     * @see #onPointerCaptureChange\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onCapturedPointerEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this method to handle captured pointer events\n     *\n     * @param event The captured pointer event.\n     * @return True if the event was handled, false otherwise.\n     * @see #requestPointerCapture()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCapturedPointerListener(OnCapturedPointerListener l)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to receive callbacks when the pointer capture state of a view changes.\n     * @param l  The {@link OnCapturedPointerListener} to receive callbacks.\n     ",
    "links" : [ "OnCapturedPointerListener" ]
  }, {
    "name" : "private void recordGestureClassification(int classification)",
    "returnType" : "void",
    "comment" : " Records a classification for the current event stream. ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator animate()",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method returns a ViewPropertyAnimator object, which can be used to animate\n     * specific properties on this View.\n     *\n     * @return ViewPropertyAnimator The ViewPropertyAnimator associated with this View.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setTransitionName(String transitionName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name of the View to be used to identify Views in Transitions.\n     * Names should be unique in the View hierarchy.\n     *\n     * @param transitionName The name of the View to uniquely identify it for Transitions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTransitionName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the View to be used to identify Views in Transitions.\n     * Names should be unique in the View hierarchy.\n     *\n     * <p>This returns null if the View has not been given a name.</p>\n     *\n     * @return The name used of the View to be used to identify Views in Transitions or null\n     * if no name has been given.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestKeyboardShortcuts(List<KeyboardShortcutGroup> data, int deviceId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void cancel(@Nullable SendAccessibilityEventThrottle callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove the pending callback for sending a throttled accessibility event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollCaptureHint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current scroll capture hint for this view.\n     *\n     * @return the current scroll capture hint\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollCaptureHint(@ScrollCaptureHint int hint)",
    "returnType" : "void",
    "comment" : "\n     * Sets the scroll capture hint for this View. These flags affect the search for a potential\n     * scroll capture targets.\n     *\n     * @param hint the scrollCaptureHint flags value to set\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollCaptureCallback(@Nullable ScrollCaptureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to receive scroll capture requests. This component is the adapter between\n     * the scroll capture API and application UI code. If no callback is set, the system may provide\n     * an implementation. Any value provided here will take precedence over a system version.\n     * <p>\n     * This view will be ignored when {@link #SCROLL_CAPTURE_HINT_EXCLUDE} is set in its {@link\n     * #setScrollCaptureHint(int) scrollCaptureHint}, regardless whether a callback has been set.\n     * <p>\n     * It is recommended to set the scroll capture hint {@link #SCROLL_CAPTURE_HINT_INCLUDE} when\n     * setting a custom callback to help ensure it is selected as the target.\n     *\n     * @param callback the new callback to assign\n     *\n     * @hide\n     ",
    "links" : [ "#setScrollCaptureHint(int)", "#SCROLL_CAPTURE_HINT_EXCLUDE", "#SCROLL_CAPTURE_HINT_INCLUDE" ]
  }, {
    "name" : "public ScrollCaptureCallback createScrollCaptureCallbackInternal(@NonNull Rect localVisibleRect, @NonNull Point windowOffset)",
    "returnType" : "ScrollCaptureCallback",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchScrollCaptureSearch(@NonNull Rect localVisibleRect, @NonNull Point windowOffset, @NonNull Queue<ScrollCaptureTarget> targets)",
    "returnType" : "void",
    "comment" : "\n     * Called when scroll capture is requested, to search for appropriate content to scroll. If\n     * applicable, this view adds itself to the provided list for consideration, subject to the\n     * flags set by {@link #setScrollCaptureHint}.\n     *\n     * @param localVisibleRect the local visible rect of this view\n     * @param windowOffset     the offset of localVisibleRect within the window\n     * @param targets          a queue which collects potential targets\n     *\n     * @throws IllegalStateException if this view is not attached to a window\n     * @hide\n     ",
    "links" : [ "#setScrollCaptureHint" ]
  }, {
    "name" : "private static void dumpFlags()",
    "returnType" : "void",
    "comment" : "\n     * Dump all private flags in readable format, useful for documentation and\n     * sanity checking.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void dumpFlag(HashMap<String, String> found, String name, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void encode(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " boolean shouldDrawRoundScrollbar()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if this view is rendered on a round wearable device and is the main view\n     * on the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTooltipText(@Nullable CharSequence tooltipText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the tooltip text which will be displayed in a small popup next to the view.\n     * <p>\n     * The tooltip will be displayed:\n     * <ul>\n     * <li>On long click, unless it is handled otherwise (by OnLongClickListener or a context\n     * menu). </li>\n     * <li>On hover, after a brief delay since the pointer has stopped moving </li>\n     * </ul>\n     * <p>\n     * <strong>Note:</strong> Do not override this method, as it will have no\n     * effect on the text displayed in the tooltip.\n     *\n     * @param tooltipText the tooltip text, or null if no tooltip is required\n     * @see #getTooltipText()\n     * @attr ref android.R.styleable#View_tooltipText\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTooltip(@Nullable CharSequence tooltipText)",
    "returnType" : "void",
    "comment" : "\n     * @hide Binary compatibility stub. To be removed when we finalize O APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTooltipText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the view's tooltip text.\n     *\n     * <strong>Note:</strong> Do not override this method, as it will have no\n     * effect on the text displayed in the tooltip. You must call\n     * {@link #setTooltipText(CharSequence)} to modify the tooltip text.\n     *\n     * @return the tooltip text\n     * @see #setTooltipText(CharSequence)\n     * @attr ref android.R.styleable#View_tooltipText\n     ",
    "links" : [ "#setTooltipText(CharSequence)" ]
  }, {
    "name" : "public CharSequence getTooltip()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @hide Binary compatibility stub. To be removed when we finalize O APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean showTooltip(int x, int y, boolean fromLongClick)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hideTooltip()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean showLongClickTooltip(int x, int y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean showHoverTooltip()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean dispatchTooltipHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void handleTooltipKey(KeyEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTooltipUp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getFocusableAttribute(TypedArray attributes)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getTooltipView()",
    "returnType" : "View",
    "comment" : "\n     * @return The content view of the tooltip popup currently being shown, or null if the tooltip\n     * is not showing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDefaultFocusHighlightEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the default focus highlight is enabled, {@code false} otherwies.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " View dispatchUnhandledKeyEvent(KeyEvent evt)",
    "returnType" : "View",
    "comment" : "\n     * Dispatch a previously unhandled {@link KeyEvent} to this view. Unlike normal key dispatch,\n     * this dispatches to ALL child views until it is consumed. The dispatch order is z-order\n     * (visually on-top views first).\n     *\n     * @param evt the previously unhandled {@link KeyEvent}.\n     * @return the {@link View} which consumed the event or {@code null} if not consumed.\n     ",
    "links" : [ "android.view.KeyEvent", "android.view.View" ]
  }, {
    "name" : " boolean onUnhandledKeyEvent(@NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Allows this view to handle {@link KeyEvent}s which weren't handled by normal dispatch. This\n     * occurs after the normal view hierarchy dispatch, but before the window callback. By default,\n     * this will dispatch into all the listeners registered via\n     * {@link #addOnUnhandledKeyEventListener(OnUnhandledKeyEventListener)} in last-in-first-out\n     * order (most recently added will receive events first).\n     *\n     * @param event An unhandled event.\n     * @return {@code true} if the event was handled, {@code false} otherwise.\n     * @see #addOnUnhandledKeyEventListener\n     ",
    "links" : [ "android.view.KeyEvent", "#addOnUnhandledKeyEventListener(OnUnhandledKeyEventListener)" ]
  }, {
    "name" : " boolean hasUnhandledKeyListener()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnUnhandledKeyEventListener(OnUnhandledKeyEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener which will receive unhandled {@link KeyEvent}s. This must be called on the\n     * UI thread.\n     *\n     * @param listener a receiver of unhandled {@link KeyEvent}s.\n     * @see #removeOnUnhandledKeyEventListener\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public void removeOnUnhandledKeyEventListener(OnUnhandledKeyEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener which will receive unhandled {@link KeyEvent}s. This must be called on the\n     * UI thread.\n     *\n     * @param listener a receiver of unhandled {@link KeyEvent}s.\n     * @see #addOnUnhandledKeyEventListener\n     ",
    "links" : [ "android.view.KeyEvent" ]
  } ],
  "variableNames" : [ "DBG", "DEBUG_DRAW", "VIEW_LOG_TAG", "AUTOFILL_LOG_TAG", "CONTENT_CAPTURE_LOG_TAG", "DEBUG_CONTENT_CAPTURE", "sDebugViewAttributes", "sDebugViewAttributesApplicationPackage", "NO_ID", "LAST_APP_AUTOFILL_ID", "AUTOFILL_HIGHLIGHT_ATTR", "sCompatibilityDone", "sUseBrokenMakeMeasureSpec", "sUseZeroUnspecifiedMeasureSpec", "sIgnoreMeasureCache", "sAlwaysRemeasureExactly", "sTextureViewIgnoresDrawableSetters", "sPreserveMarginParamsInLayoutParamConversion", "sCascadedDragDrop", "sHasFocusableExcludeAutoFocusable", "sAutoFocusableOffUIThreadWontNotifyParents", "sThrowOnInvalidFloatProperties", "sAcceptZeroSizeDragShadow", "sBrokenInsetsDispatch", "sBrokenWindowBackground", "sForceLayoutWhenInsetsChanged", "NOT_FOCUSABLE", "FOCUSABLE", "FOCUSABLE_AUTO", "FOCUSABLE_MASK", "FITS_SYSTEM_WINDOWS", "VISIBLE", "INVISIBLE", "GONE", "VISIBILITY_MASK", "VISIBILITY_FLAGS", "AUTOFILL_HINT_EMAIL_ADDRESS", "AUTOFILL_HINT_NAME", "AUTOFILL_HINT_USERNAME", "AUTOFILL_HINT_PASSWORD", "AUTOFILL_HINT_PHONE", "AUTOFILL_HINT_POSTAL_ADDRESS", "AUTOFILL_HINT_POSTAL_CODE", "AUTOFILL_HINT_CREDIT_CARD_NUMBER", "AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE", "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE", "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH", "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR", "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY", "mAutofillHints", "mAutofillId", "AUTOFILL_TYPE_NONE", "AUTOFILL_TYPE_TEXT", "AUTOFILL_TYPE_TOGGLE", "AUTOFILL_TYPE_LIST", "AUTOFILL_TYPE_DATE", "IMPORTANT_FOR_AUTOFILL_AUTO", "IMPORTANT_FOR_AUTOFILL_YES", "IMPORTANT_FOR_AUTOFILL_NO", "IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS", "IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS", "AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS", "IMPORTANT_FOR_CONTENT_CAPTURE_AUTO", "IMPORTANT_FOR_CONTENT_CAPTURE_YES", "IMPORTANT_FOR_CONTENT_CAPTURE_NO", "IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS", "IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS", "SCROLL_CAPTURE_HINT_AUTO", "SCROLL_CAPTURE_HINT_EXCLUDE", "SCROLL_CAPTURE_HINT_INCLUDE", "SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS", "ENABLED", "DISABLED", "ENABLED_MASK", "WILL_NOT_DRAW", "DRAW_MASK", "SCROLLBARS_NONE", "SCROLLBARS_HORIZONTAL", "SCROLLBARS_VERTICAL", "SCROLLBARS_MASK", "FILTER_TOUCHES_WHEN_OBSCURED", "OPTIONAL_FITS_SYSTEM_WINDOWS", "FADING_EDGE_NONE", "FADING_EDGE_HORIZONTAL", "FADING_EDGE_VERTICAL", "FADING_EDGE_MASK", "CLICKABLE", "DRAWING_CACHE_ENABLED", "SAVE_DISABLED", "SAVE_DISABLED_MASK", "WILL_NOT_CACHE_DRAWING", "FOCUSABLE_IN_TOUCH_MODE", "DRAWING_CACHE_QUALITY_LOW", "DRAWING_CACHE_QUALITY_HIGH", "DRAWING_CACHE_QUALITY_AUTO", "DRAWING_CACHE_QUALITY_FLAGS", "DRAWING_CACHE_QUALITY_MASK", "LONG_CLICKABLE", "DUPLICATE_PARENT_STATE", "CONTEXT_CLICKABLE", "SCROLLBARS_INSIDE_OVERLAY", "SCROLLBARS_INSIDE_INSET", "SCROLLBARS_OUTSIDE_OVERLAY", "SCROLLBARS_OUTSIDE_INSET", "SCROLLBARS_INSET_MASK", "SCROLLBARS_OUTSIDE_MASK", "SCROLLBARS_STYLE_MASK", "KEEP_SCREEN_ON", "SOUND_EFFECTS_ENABLED", "HAPTIC_FEEDBACK_ENABLED", "PARENT_SAVE_DISABLED", "PARENT_SAVE_DISABLED_MASK", "sDebugPaint", "TOOLTIP", "FOCUSABLES_ALL", "FOCUSABLES_TOUCH_MODE", "FOCUS_BACKWARD", "FOCUS_FORWARD", "FOCUS_LEFT", "FOCUS_UP", "FOCUS_RIGHT", "FOCUS_DOWN", "MEASURED_SIZE_MASK", "MEASURED_STATE_MASK", "MEASURED_HEIGHT_STATE_SHIFT", "MEASURED_STATE_TOO_SMALL", "EMPTY_STATE_SET", "ENABLED_STATE_SET", "FOCUSED_STATE_SET", "SELECTED_STATE_SET", "PRESSED_STATE_SET", "WINDOW_FOCUSED_STATE_SET", "ENABLED_FOCUSED_STATE_SET", "ENABLED_SELECTED_STATE_SET", "ENABLED_WINDOW_FOCUSED_STATE_SET", "FOCUSED_SELECTED_STATE_SET", "FOCUSED_WINDOW_FOCUSED_STATE_SET", "SELECTED_WINDOW_FOCUSED_STATE_SET", "ENABLED_FOCUSED_SELECTED_STATE_SET", "ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET", "ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET", "FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET", "ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET", "PRESSED_WINDOW_FOCUSED_STATE_SET", "PRESSED_SELECTED_STATE_SET", "PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET", "PRESSED_FOCUSED_STATE_SET", "PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET", "PRESSED_FOCUSED_SELECTED_STATE_SET", "PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET", "PRESSED_ENABLED_STATE_SET", "PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET", "PRESSED_ENABLED_SELECTED_STATE_SET", "PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET", "PRESSED_ENABLED_FOCUSED_STATE_SET", "PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET", "PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET", "PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET", "POPULATING_ACCESSIBILITY_EVENT_TYPES", "DEBUG_CORNERS_COLOR", "DEBUG_CORNERS_SIZE_DIP", "sThreadLocal", "mKeyedTags", "sNextAccessibilityViewId", "mCurrentAnimation", "mMeasuredWidth", "mMeasuredHeight", "mRecreateDisplayList", "mID", "mAutofillViewId", "mAccessibilityViewId", "mAccessibilityCursorPosition", "mTag", "PFLAG_WANTS_FOCUS", "PFLAG_FOCUSED", "PFLAG_SELECTED", "PFLAG_IS_ROOT_NAMESPACE", "PFLAG_HAS_BOUNDS", "PFLAG_DRAWN", "PFLAG_DRAW_ANIMATION", "PFLAG_SKIP_DRAW", "PFLAG_REQUEST_TRANSPARENT_REGIONS", "PFLAG_DRAWABLE_STATE_DIRTY", "PFLAG_MEASURED_DIMENSION_SET", "PFLAG_FORCE_LAYOUT", "PFLAG_LAYOUT_REQUIRED", "PFLAG_PRESSED", "PFLAG_DRAWING_CACHE_VALID", "PFLAG_ANIMATION_STARTED", "PFLAG_SAVE_STATE_CALLED", "PFLAG_ALPHA_SET", "PFLAG_SCROLL_CONTAINER", "PFLAG_SCROLL_CONTAINER_ADDED", "PFLAG_DIRTY", "PFLAG_DIRTY_MASK", "PFLAG_OPAQUE_BACKGROUND", "PFLAG_OPAQUE_SCROLLBARS", "PFLAG_OPAQUE_MASK", "PFLAG_PREPRESSED", "PFLAG_CANCEL_NEXT_UP_EVENT", "PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH", "PFLAG_HOVERED", "PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK", "PFLAG_ACTIVATED", "PFLAG_INVALIDATED", "PFLAG2_DRAG_CAN_ACCEPT", "PFLAG2_DRAG_HOVERED", "LAYOUT_DIRECTION_UNDEFINED", "LAYOUT_DIRECTION_LTR", "LAYOUT_DIRECTION_RTL", "LAYOUT_DIRECTION_INHERIT", "LAYOUT_DIRECTION_LOCALE", "PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT", "PFLAG2_LAYOUT_DIRECTION_MASK", "PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL", "PFLAG2_LAYOUT_DIRECTION_RESOLVED", "PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK", "LAYOUT_DIRECTION_FLAGS", "LAYOUT_DIRECTION_DEFAULT", "LAYOUT_DIRECTION_RESOLVED_DEFAULT", "TEXT_DIRECTION_INHERIT", "TEXT_DIRECTION_FIRST_STRONG", "TEXT_DIRECTION_ANY_RTL", "TEXT_DIRECTION_LTR", "TEXT_DIRECTION_RTL", "TEXT_DIRECTION_LOCALE", "TEXT_DIRECTION_FIRST_STRONG_LTR", "TEXT_DIRECTION_FIRST_STRONG_RTL", "TEXT_DIRECTION_DEFAULT", "TEXT_DIRECTION_RESOLVED_DEFAULT", "PFLAG2_TEXT_DIRECTION_MASK_SHIFT", "PFLAG2_TEXT_DIRECTION_MASK", "PFLAG2_TEXT_DIRECTION_FLAGS", "PFLAG2_TEXT_DIRECTION_RESOLVED", "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT", "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK", "PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT", "TEXT_ALIGNMENT_INHERIT", "TEXT_ALIGNMENT_GRAVITY", "TEXT_ALIGNMENT_TEXT_START", "TEXT_ALIGNMENT_TEXT_END", "TEXT_ALIGNMENT_CENTER", "TEXT_ALIGNMENT_VIEW_START", "TEXT_ALIGNMENT_VIEW_END", "TEXT_ALIGNMENT_DEFAULT", "TEXT_ALIGNMENT_RESOLVED_DEFAULT", "PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT", "PFLAG2_TEXT_ALIGNMENT_MASK", "PFLAG2_TEXT_ALIGNMENT_FLAGS", "PFLAG2_TEXT_ALIGNMENT_RESOLVED", "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT", "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK", "PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT", "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT", "IMPORTANT_FOR_ACCESSIBILITY_AUTO", "IMPORTANT_FOR_ACCESSIBILITY_YES", "IMPORTANT_FOR_ACCESSIBILITY_NO", "IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS", "IMPORTANT_FOR_ACCESSIBILITY_DEFAULT", "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK", "PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT", "ACCESSIBILITY_LIVE_REGION_NONE", "ACCESSIBILITY_LIVE_REGION_POLITE", "ACCESSIBILITY_LIVE_REGION_ASSERTIVE", "ACCESSIBILITY_LIVE_REGION_DEFAULT", "PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK", "PFLAG2_ACCESSIBILITY_FOCUSED", "PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED", "PFLAG2_VIEW_QUICK_REJECTED", "PFLAG2_PADDING_RESOLVED", "PFLAG2_DRAWABLE_RESOLVED", "PFLAG2_HAS_TRANSIENT_STATE", "ALL_RTL_PROPERTIES_RESOLVED", "PFLAG3_VIEW_IS_ANIMATING_TRANSFORM", "PFLAG3_VIEW_IS_ANIMATING_ALPHA", "PFLAG3_IS_LAID_OUT", "PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT", "PFLAG3_CALLED_SUPER", "PFLAG3_APPLYING_INSETS", "PFLAG3_FITTING_SYSTEM_WINDOWS", "PFLAG3_NESTED_SCROLLING_ENABLED", "PFLAG3_SCROLL_INDICATOR_TOP", "PFLAG3_SCROLL_INDICATOR_BOTTOM", "PFLAG3_SCROLL_INDICATOR_LEFT", "PFLAG3_SCROLL_INDICATOR_RIGHT", "PFLAG3_SCROLL_INDICATOR_START", "PFLAG3_SCROLL_INDICATOR_END", "DRAG_MASK", "SCROLL_INDICATORS_NONE", "SCROLL_INDICATORS_PFLAG3_MASK", "SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT", "SCROLL_INDICATOR_TOP", "SCROLL_INDICATOR_BOTTOM", "SCROLL_INDICATOR_LEFT", "SCROLL_INDICATOR_RIGHT", "SCROLL_INDICATOR_START", "SCROLL_INDICATOR_END", "PFLAG3_ASSIST_BLOCKED", "PFLAG3_CLUSTER", "PFLAG3_IS_AUTOFILLED", "PFLAG3_FINGER_DOWN", "PFLAG3_FOCUSED_BY_DEFAULT", "PFLAG3_IMPORTANT_FOR_AUTOFILL_SHIFT", "PFLAG3_IMPORTANT_FOR_AUTOFILL_MASK", "PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE", "PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED", "PFLAG3_TEMPORARY_DETACH", "PFLAG3_NO_REVEAL_ON_FOCUS", "PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT", "PFLAG3_SCREEN_READER_FOCUSABLE", "PFLAG3_AGGREGATED_VISIBLE", "PFLAG3_AUTOFILLID_EXPLICITLY_SET", "PFLAG3_ACCESSIBILITY_HEADING", "PFLAG4_IMPORTANT_FOR_CONTENT_CAPTURE_MASK", "PFLAG4_NOTIFIED_CONTENT_CAPTURE_APPEARED", "PFLAG4_NOTIFIED_CONTENT_CAPTURE_DISAPPEARED", "PFLAG4_CONTENT_CAPTURE_IMPORTANCE_IS_CACHED", "PFLAG4_CONTENT_CAPTURE_IMPORTANCE_CACHED_VALUE", "PFLAG4_CONTENT_CAPTURE_IMPORTANCE_MASK", "PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS", "PFLAG4_AUTOFILL_HIDE_HIGHLIGHT", "PFLAG4_SCROLL_CAPTURE_HINT_SHIFT", "PFLAG4_SCROLL_CAPTURE_HINT_MASK", "VIEW_STRUCTURE_FOR_ASSIST", "VIEW_STRUCTURE_FOR_AUTOFILL", "VIEW_STRUCTURE_FOR_CONTENT_CAPTURE", "OVER_SCROLL_ALWAYS", "OVER_SCROLL_IF_CONTENT_SCROLLS", "OVER_SCROLL_NEVER", "SYSTEM_UI_FLAG_VISIBLE", "SYSTEM_UI_FLAG_LOW_PROFILE", "SYSTEM_UI_FLAG_HIDE_NAVIGATION", "SYSTEM_UI_FLAG_FULLSCREEN", "SYSTEM_UI_FLAG_LAYOUT_STABLE", "SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "SYSTEM_UI_FLAG_IMMERSIVE", "SYSTEM_UI_FLAG_IMMERSIVE_STICKY", "SYSTEM_UI_FLAG_LIGHT_STATUS_BAR", "SYSTEM_UI_RESERVED_LEGACY1", "SYSTEM_UI_RESERVED_LEGACY2", "SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR", "STATUS_BAR_HIDDEN", "STATUS_BAR_VISIBLE", "STATUS_BAR_DISABLE_EXPAND", "STATUS_BAR_DISABLE_NOTIFICATION_ICONS", "STATUS_BAR_DISABLE_NOTIFICATION_ALERTS", "STATUS_BAR_DISABLE_NOTIFICATION_TICKER", "STATUS_BAR_DISABLE_SYSTEM_INFO", "STATUS_BAR_DISABLE_HOME", "STATUS_BAR_DISABLE_BACK", "STATUS_BAR_DISABLE_CLOCK", "STATUS_BAR_DISABLE_RECENT", "STATUS_BAR_DISABLE_SEARCH", "STATUS_BAR_TRANSIENT", "NAVIGATION_BAR_TRANSIENT", "STATUS_BAR_UNHIDE", "NAVIGATION_BAR_UNHIDE", "STATUS_BAR_TRANSLUCENT", "NAVIGATION_BAR_TRANSLUCENT", "NAVIGATION_BAR_TRANSPARENT", "STATUS_BAR_TRANSPARENT", "SYSTEM_UI_TRANSPARENT", "PUBLIC_STATUS_BAR_VISIBILITY_MASK", "SYSTEM_UI_CLEARABLE_FLAGS", "SYSTEM_UI_LAYOUT_FLAGS", "FIND_VIEWS_WITH_TEXT", "FIND_VIEWS_WITH_CONTENT_DESCRIPTION", "FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS", "ACCESSIBILITY_CURSOR_POSITION_UNDEFINED", "SCREEN_STATE_OFF", "SCREEN_STATE_ON", "SCROLL_AXIS_NONE", "SCROLL_AXIS_HORIZONTAL", "SCROLL_AXIS_VERTICAL", "mOverScrollMode", "mParent", "mAttachInfo", "mPrivateFlags", "mPrivateFlags2", "mPrivateFlags3", "mPrivateFlags4", "mSystemUiVisibility", "mTransientStateCount", "mWindowAttachCount", "mLayoutParams", "mViewFlags", "mTransformationInfo", "mClipBounds", "mLastIsOpaque", "mLeft", "mRight", "mTop", "mBottom", "mScrollX", "mScrollY", "mPaddingLeft", "mPaddingRight", "mPaddingTop", "mPaddingBottom", "mLayoutInsets", "mStateDescription", "mContentDescription", "mAccessibilityPaneTitle", "mLabelForId", "mMatchLabelForPredicate", "mAccessibilityTraversalBeforeId", "mAccessibilityTraversalAfterId", "mMatchIdPredicate", "mUserPaddingRight", "mUserPaddingBottom", "mUserPaddingLeft", "mUserPaddingStart", "mUserPaddingEnd", "mUserPaddingLeftInitial", "mUserPaddingRightInitial", "UNDEFINED_PADDING", "mLeftPaddingDefined", "mRightPaddingDefined", "mOldWidthMeasureSpec", "mOldHeightMeasureSpec", "mMeasureCache", "mBackground", "mBackgroundTint", "mForegroundInfo", "mScrollIndicatorDrawable", "mBackgroundRenderNode", "mBackgroundResource", "mBackgroundSizeChanged", "mDefaultFocusHighlight", "mDefaultFocusHighlightCache", "mDefaultFocusHighlightSizeChanged", "sUseDefaultFocusHighlight", "sCanFocusZeroSized", "sAlwaysAssignFocus", "mTransitionName", "mListenerInfo", "mTooltipInfo", "mLongClickX", "mLongClickY", "mContext", "mResources", "mScrollCache", "mDrawableState", "mOutlineProvider", "mStateListAnimator", "mNextFocusLeftId", "mNextFocusRightId", "mNextFocusUpId", "mNextFocusDownId", "mNextFocusForwardId", "mNextClusterForwardId", "mDefaultFocusHighlightEnabled", "mPendingCheckForLongPress", "mPendingCheckForTap", "mPerformClick", "mSendViewScrolledAccessibilityEvent", "mSendStateChangedAccessibilityEvent", "mUnsetPressedState", "mHasPerformedLongPress", "mInContextButtonPress", "mIgnoreNextUpEvent", "mMinHeight", "mMinWidth", "mTouchDelegate", "mHoveringTouchDelegate", "mDrawingCacheBackgroundColor", "mFloatingTreeObserver", "mTouchSlop", "mAmbiguousGestureMultiplier", "mAnimator", "mFrameMetricsObservers", "DRAG_FLAG_GLOBAL", "DRAG_FLAG_GLOBAL_URI_READ", "DRAG_FLAG_GLOBAL_URI_WRITE", "DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION", "DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION", "DRAG_FLAG_OPAQUE", "mVerticalScrollFactor", "mVerticalScrollbarPosition", "SCROLLBAR_POSITION_DEFAULT", "SCROLLBAR_POSITION_LEFT", "SCROLLBAR_POSITION_RIGHT", "LAYER_TYPE_NONE", "LAYER_TYPE_SOFTWARE", "LAYER_TYPE_HARDWARE", "mLayerType", "mLayerPaint", "mCachingFailed", "mDrawingCache", "mUnscaledDrawingCache", "mRenderNode", "mSendingHoverAccessibilityEvents", "mAccessibilityDelegate", "mOverlay", "mNestedScrollingParent", "mInputEventConsistencyVerifier", "sNextGeneratedId", "mTempNestedScrollConsumed", "mGhostView", "mAttributes", "mAttributeMap", "mRunQueue", "mPointerIcon", "mStartActivityRequestWho", "mRoundScrollbarRenderer", "mVisibilityChangeForAutofillHandler", "mContentCaptureSession", "mContentCaptureSessionCached", "mSourceLayoutId", "mAttributeSourceResId", "mAttributeResolutionStacks", "mExplicitStyle", "mUnbufferedInputSource", "PROVIDER_BACKGROUND", "PROVIDER_NONE", "PROVIDER_BOUNDS", "PROVIDER_PADDED_BOUNDS", "ALPHA", "TRANSLATION_X", "TRANSLATION_Y", "TRANSLATION_Z", "X", "Y", "Z", "ROTATION", "ROTATION_X", "ROTATION_Y", "SCALE_X", "SCALE_Y" ],
  "methodNames" : [ "public int[] getAttributeResolutionStack(@AttrRes int attribute)", "public Map<Integer, Integer> getAttributeSourceResourceMap()", "public int getExplicitStyle()", "public final boolean isShowingLayoutBounds()", "public final void setShowingLayoutBounds(boolean debugLayout)", "private static SparseArray<String> getAttributeMap()", "private void retrieveExplicitStyle(@NonNull Resources.Theme theme, @Nullable AttributeSet attrs)", "public final void saveAttributeDataForStyleable(@NonNull Context context, @NonNull int[] styleable, @Nullable AttributeSet attrs, @NonNull TypedArray t, int defStyleAttr, int defStyleRes)", "private void saveAttributeData(@Nullable AttributeSet attrs, @NonNull TypedArray t)", "public String toString()", "protected void initializeFadingEdge(TypedArray a)", "protected void initializeFadingEdgeInternal(TypedArray a)", "public int getVerticalFadingEdgeLength()", "public void setFadingEdgeLength(int length)", "public int getHorizontalFadingEdgeLength()", "public int getVerticalScrollbarWidth()", "protected int getHorizontalScrollbarHeight()", "protected void initializeScrollbars(TypedArray a)", "private void initializeScrollBarDrawable()", "protected void initializeScrollbarsInternal(TypedArray a)", "public void setVerticalScrollbarThumbDrawable(@Nullable Drawable drawable)", "public void setVerticalScrollbarTrackDrawable(@Nullable Drawable drawable)", "public void setHorizontalScrollbarThumbDrawable(@Nullable Drawable drawable)", "public void setHorizontalScrollbarTrackDrawable(@Nullable Drawable drawable)", "public Drawable getVerticalScrollbarThumbDrawable()", "public Drawable getVerticalScrollbarTrackDrawable()", "public Drawable getHorizontalScrollbarThumbDrawable()", "public Drawable getHorizontalScrollbarTrackDrawable()", "private void initializeScrollIndicatorsInternal()", "private void initScrollCache()", "private ScrollabilityCache getScrollCache()", "public void setVerticalScrollbarPosition(int position)", "public int getVerticalScrollbarPosition()", " boolean isOnScrollbar(float x, float y)", " boolean isOnScrollbarThumb(float x, float y)", "private boolean isOnVerticalScrollbarThumb(float x, float y)", "private boolean isOnHorizontalScrollbarThumb(float x, float y)", " boolean isDraggingScrollBar()", "public void setScrollIndicators(@ScrollIndicators int indicators)", "public void setScrollIndicators(@ScrollIndicators int indicators, @ScrollIndicators int mask)", "public int getScrollIndicators()", " ListenerInfo getListenerInfo()", "public void setOnScrollChangeListener(OnScrollChangeListener l)", "public void setOnFocusChangeListener(OnFocusChangeListener l)", "public void addOnLayoutChangeListener(OnLayoutChangeListener listener)", "public void removeOnLayoutChangeListener(OnLayoutChangeListener listener)", "public void addOnAttachStateChangeListener(OnAttachStateChangeListener listener)", "public void removeOnAttachStateChangeListener(OnAttachStateChangeListener listener)", "public OnFocusChangeListener getOnFocusChangeListener()", "public void setOnClickListener(@Nullable OnClickListener l)", "public boolean hasOnClickListeners()", "public void setOnLongClickListener(@Nullable OnLongClickListener l)", "public boolean hasOnLongClickListeners()", "public OnLongClickListener getOnLongClickListener()", "public void setOnContextClickListener(@Nullable OnContextClickListener l)", "public void setOnCreateContextMenuListener(OnCreateContextMenuListener l)", "public void addFrameMetricsListener(Window window, Window.OnFrameMetricsAvailableListener listener, Handler handler)", "public void removeFrameMetricsListener(Window.OnFrameMetricsAvailableListener listener)", "private void registerPendingFrameMetricsObservers()", "private FrameMetricsObserver findFrameMetricsObserver(Window.OnFrameMetricsAvailableListener listener)", "public void setNotifyAutofillManagerOnClick(boolean notify)", "private void notifyAutofillManagerOnClick()", "private boolean performClickInternal()", "public boolean performClick()", "public boolean callOnClick()", "public boolean performLongClick()", "public boolean performLongClick(float x, float y)", "private boolean performLongClickInternal(float x, float y)", "public boolean performContextClick(float x, float y)", "public boolean performContextClick()", "protected boolean performButtonActionOnTouchDown(MotionEvent event)", "public boolean showContextMenu()", "public boolean showContextMenu(float x, float y)", "public ActionMode startActionMode(ActionMode.Callback callback)", "public ActionMode startActionMode(ActionMode.Callback callback, int type)", "public void startActivityForResult(Intent intent, int requestCode)", "public boolean dispatchActivityResult(String who, int requestCode, int resultCode, Intent data)", "public void onActivityResult(int requestCode, int resultCode, Intent data)", "public void setOnKeyListener(OnKeyListener l)", "public void setOnTouchListener(OnTouchListener l)", "public void setOnGenericMotionListener(OnGenericMotionListener l)", "public void setOnHoverListener(OnHoverListener l)", "public void setOnDragListener(OnDragListener l)", " void handleFocusGainInternal(@FocusRealDirection int direction, Rect previouslyFocusedRect)", "public final void setRevealOnFocusHint(boolean revealOnFocus)", "public final boolean getRevealOnFocusHint()", "public void getHotspotBounds(Rect outRect)", "public boolean requestRectangleOnScreen(Rect rectangle)", "public boolean requestRectangleOnScreen(Rect rectangle, boolean immediate)", "public void clearFocus()", " void clearFocusInternal(View focused, boolean propagate, boolean refocus)", " void notifyGlobalFocusCleared(View oldFocus)", " boolean rootViewRequestFocus()", " void unFocus(View focused)", "public boolean hasFocus()", "public boolean hasFocusable()", "public boolean hasExplicitFocusable()", " boolean hasFocusable(boolean allowAutoFocus, boolean dispatchExplicit)", "protected void onFocusChanged(boolean gainFocus, @FocusDirection int direction, @Nullable Rect previouslyFocusedRect)", "private void notifyFocusChangeToImeFocusController(boolean hasFocus)", "public void notifyEnterOrExitForAutoFillIfNeeded(boolean enter)", "public void setAccessibilityPaneTitle(@Nullable CharSequence accessibilityPaneTitle)", "public CharSequence getAccessibilityPaneTitle()", "private boolean isAccessibilityPane()", "public void sendAccessibilityEvent(int eventType)", "public void announceForAccessibility(CharSequence text)", "public void sendAccessibilityEventInternal(int eventType)", "public void sendAccessibilityEventUnchecked(AccessibilityEvent event)", "public void sendAccessibilityEventUncheckedInternal(AccessibilityEvent event)", "private void requestParentSendAccessibilityEvent(AccessibilityEvent event)", "private SendAccessibilityEventThrottle getThrottleForAccessibilityEvent(AccessibilityEvent event)", "private void clearAccessibilityThrottles()", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public void onPopulateAccessibilityEvent(AccessibilityEvent event)", "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public void onInitializeAccessibilityEvent(AccessibilityEvent event)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public AccessibilityNodeInfo createAccessibilityNodeInfo()", "public AccessibilityNodeInfo createAccessibilityNodeInfoInternal()", "public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)", "public void getBoundsOnScreen(Rect outRect)", "public void getBoundsOnScreen(Rect outRect, boolean clipToParent)", "public void mapRectFromViewToScreenCoords(RectF rect, boolean clipToParent)", "public CharSequence getAccessibilityClassName()", "public void onProvideStructure(ViewStructure structure)", "public void onProvideAutofillStructure(ViewStructure structure, @AutofillFlags int flags)", "public void onProvideContentCaptureStructure(@NonNull ViewStructure structure, int flags)", "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)", "public void onProvideVirtualStructure(ViewStructure structure)", "private void onProvideVirtualStructureCompat(ViewStructure structure, boolean forAutofill)", "public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)", "public void autofill(@SuppressWarnings(\"unused\") AutofillValue value)", "public void autofill(@NonNull @SuppressWarnings(\"unused\") SparseArray<AutofillValue> values)", "public final AutofillId getAutofillId()", "public void setAutofillId(@Nullable AutofillId id)", "public int getAutofillType()", "public String[] getAutofillHints()", "public boolean isAutofilled()", "public boolean hideAutofillHighlight()", "public AutofillValue getAutofillValue()", "public int getImportantForAutofill()", "public void setImportantForAutofill(@AutofillImportance int mode)", "public final boolean isImportantForAutofill()", "public int getImportantForContentCapture()", "public void setImportantForContentCapture(@ContentCaptureImportance int mode)", "public final boolean isImportantForContentCapture()", "private boolean calculateIsImportantForContentCapture()", "private void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean appeared)", "private void notifyAppearedOrDisappearedForContentCaptureIfNeededNoTrace(boolean appeared)", "private void setNotifiedContentCaptureAppeared()", "protected boolean getNotifiedContentCaptureAppeared()", "public void setContentCaptureSession(@Nullable ContentCaptureSession contentCaptureSession)", "public final ContentCaptureSession getContentCaptureSession()", "private ContentCaptureSession getAndCacheContentCaptureSession()", "private AutofillManager getAutofillManager()", "private boolean isAutofillable()", "public boolean canNotifyAutofillEnterExitEvent()", "private void populateVirtualStructure(ViewStructure structure, AccessibilityNodeProvider provider, AccessibilityNodeInfo info, boolean forAutofill)", "public void dispatchProvideStructure(ViewStructure structure)", "public void dispatchProvideAutofillStructure(@NonNull ViewStructure structure, @AutofillFlags int flags)", "private void dispatchProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, @AutofillFlags int flags)", "public void dispatchInitialProvideContentCaptureStructure()", " void dispatchProvideContentCaptureStructure()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public void addExtraDataToAccessibilityNodeInfo(@NonNull AccessibilityNodeInfo info, @NonNull String extraDataKey, @Nullable Bundle arguments)", "private void populateAccessibilityNodeInfoDrawingOrderInParent(AccessibilityNodeInfo info)", "private static int numViewsForAccessibility(View view)", "private View findLabelForView(View view, int labeledId)", "public boolean isVisibleToUserForAutofill(int virtualId)", "public boolean isVisibleToUser()", "protected boolean isVisibleToUser(Rect boundInView)", "public AccessibilityDelegate getAccessibilityDelegate()", "public void setAccessibilityDelegate(@Nullable AccessibilityDelegate delegate)", "public AccessibilityNodeProvider getAccessibilityNodeProvider()", "public int getAccessibilityViewId()", "public int getAutofillViewId()", "public int getAccessibilityWindowId()", "public final CharSequence getStateDescription()", "public CharSequence getContentDescription()", "public void setStateDescription(@Nullable CharSequence stateDescription)", "public void setContentDescription(CharSequence contentDescription)", "public void setAccessibilityTraversalBefore(@IdRes int beforeId)", "public int getAccessibilityTraversalBefore()", "public void setAccessibilityTraversalAfter(@IdRes int afterId)", "public int getAccessibilityTraversalAfter()", "public int getLabelFor()", "public void setLabelFor(@IdRes int id)", "protected void onFocusLost()", "private void resetPressedState()", "public boolean isFocused()", "public View findFocus()", "public boolean isScrollContainer()", "public void setScrollContainer(boolean isScrollContainer)", "public int getDrawingCacheQuality()", "public void setDrawingCacheQuality(@DrawingCacheQuality int quality)", "public boolean getKeepScreenOn()", "public void setKeepScreenOn(boolean keepScreenOn)", "public int getNextFocusLeftId()", "public void setNextFocusLeftId(@IdRes int nextFocusLeftId)", "public int getNextFocusRightId()", "public void setNextFocusRightId(@IdRes int nextFocusRightId)", "public int getNextFocusUpId()", "public void setNextFocusUpId(@IdRes int nextFocusUpId)", "public int getNextFocusDownId()", "public void setNextFocusDownId(@IdRes int nextFocusDownId)", "public int getNextFocusForwardId()", "public void setNextFocusForwardId(@IdRes int nextFocusForwardId)", "public int getNextClusterForwardId()", "public void setNextClusterForwardId(@IdRes int nextClusterForwardId)", "public boolean isShown()", "protected boolean fitSystemWindows(Rect insets)", "private boolean fitSystemWindowsInt(Rect insets)", "private void applyInsets(Rect insets)", "public WindowInsets onApplyWindowInsets(WindowInsets insets)", "private WindowInsets onApplyFrameworkOptionalFitSystemWindows(WindowInsets insets)", "public void setOnApplyWindowInsetsListener(OnApplyWindowInsetsListener listener)", "public WindowInsets dispatchApplyWindowInsets(WindowInsets insets)", "public void setWindowInsetsAnimationCallback(@Nullable WindowInsetsAnimation.Callback callback)", "public boolean hasWindowInsetsAnimationCallback()", "public void dispatchWindowInsetsAnimationPrepare(@NonNull WindowInsetsAnimation animation)", "public Bounds dispatchWindowInsetsAnimationStart(@NonNull WindowInsetsAnimation animation, @NonNull Bounds bounds)", "public WindowInsets dispatchWindowInsetsAnimationProgress(@NonNull WindowInsets insets, @NonNull List<WindowInsetsAnimation> runningAnimations)", "public void dispatchWindowInsetsAnimationEnd(@NonNull WindowInsetsAnimation animation)", "public void setSystemGestureExclusionRects(@NonNull List<Rect> rects)", " void postUpdateSystemGestureExclusionRects()", " void updateSystemGestureExclusionRects()", "public List<Rect> getSystemGestureExclusionRects()", "public void getLocationInSurface(@NonNull @Size(2) int[] location)", "public WindowInsets getRootWindowInsets()", "public WindowInsetsController getWindowInsetsController()", "protected boolean computeFitSystemWindows(Rect inoutInsets, Rect outLocalInsets)", "public WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets)", "public void setFitsSystemWindows(boolean fitSystemWindows)", "public boolean getFitsSystemWindows()", "public boolean fitsSystemWindows()", "public void requestFitSystemWindows()", "public void requestApplyInsets()", "public void makeOptionalFitsSystemWindows()", "public void makeFrameworkOptionalFitsSystemWindows()", "public boolean isFrameworkOptionalFitsSystemWindows()", "public int getVisibility()", "public void setVisibility(@Visibility int visibility)", "public boolean isEnabled()", "public void setEnabled(boolean enabled)", "public void setFocusable(boolean focusable)", "public void setFocusable(@Focusable int focusable)", "public void setFocusableInTouchMode(boolean focusableInTouchMode)", "public void setAutofillHints(@Nullable String... autofillHints)", "public void setAutofilled(boolean isAutofilled, boolean hideHighlight)", "public void setSoundEffectsEnabled(boolean soundEffectsEnabled)", "public boolean isSoundEffectsEnabled()", "public void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled)", "public boolean isHapticFeedbackEnabled()", "public int getRawLayoutDirection()", "public void setLayoutDirection(@LayoutDir int layoutDirection)", "public int getLayoutDirection()", "public boolean isLayoutRtl()", "public boolean hasTransientState()", "public void setHasTransientState(boolean hasTransientState)", "public boolean isAttachedToWindow()", "public boolean isLaidOut()", " boolean isLayoutValid()", "public void setWillNotDraw(boolean willNotDraw)", "public boolean willNotDraw()", "public void setWillNotCacheDrawing(boolean willNotCacheDrawing)", "public boolean willNotCacheDrawing()", "public boolean isClickable()", "public void setClickable(boolean clickable)", "public boolean isLongClickable()", "public void setLongClickable(boolean longClickable)", "public boolean isContextClickable()", "public void setContextClickable(boolean contextClickable)", "private void setPressed(boolean pressed, float x, float y)", "public void setPressed(boolean pressed)", "protected void dispatchSetPressed(boolean pressed)", "public boolean isPressed()", "public boolean isAssistBlocked()", "public void setAssistBlocked(boolean enabled)", "public boolean isSaveEnabled()", "public void setSaveEnabled(boolean enabled)", "public boolean getFilterTouchesWhenObscured()", "public void setFilterTouchesWhenObscured(boolean enabled)", "public boolean isSaveFromParentEnabled()", "public void setSaveFromParentEnabled(boolean enabled)", "public final boolean isFocusable()", "public int getFocusable()", "public final boolean isFocusableInTouchMode()", "public boolean isScreenReaderFocusable()", "public void setScreenReaderFocusable(boolean screenReaderFocusable)", "public boolean isAccessibilityHeading()", "public void setAccessibilityHeading(boolean isHeading)", "private void updatePflags3AndNotifyA11yIfChanged(int mask, boolean newValue)", "public View focusSearch(@FocusRealDirection int direction)", "public final boolean isKeyboardNavigationCluster()", " View findKeyboardNavigationCluster()", "public void setKeyboardNavigationCluster(boolean isCluster)", "public final void setFocusedInCluster()", "private void setFocusedInCluster(View cluster)", "private void updateFocusedInCluster(View oldFocus, @FocusDirection int direction)", "public final boolean isFocusedByDefault()", "public void setFocusedByDefault(boolean isFocusedByDefault)", " boolean hasDefaultFocus()", "public View keyboardNavigationClusterSearch(View currentCluster, @FocusDirection int direction)", "public boolean dispatchUnhandledMove(View focused, @FocusRealDirection int direction)", "public void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled)", "public final boolean getDefaultFocusHighlightEnabled()", " View findUserSetNextFocus(View root, @FocusDirection int direction)", " View findUserSetNextKeyboardNavigationCluster(View root, @FocusDirection int direction)", "private View findViewInsideOutShouldExist(View root, int id)", "private View findViewInsideOutShouldExist(View root, View start, int id)", "public ArrayList<View> getFocusables(@FocusDirection int direction)", "public void addFocusables(ArrayList<View> views, @FocusDirection int direction)", "public void addFocusables(ArrayList<View> views, @FocusDirection int direction, @FocusableMode int focusableMode)", "public void addKeyboardNavigationClusters(@NonNull Collection<View> views, int direction)", "public void findViewsWithText(ArrayList<View> outViews, CharSequence searched, @FindViewFlags int flags)", "public ArrayList<View> getTouchables()", "public void addTouchables(ArrayList<View> views)", "public boolean isAccessibilityFocused()", "public boolean requestAccessibilityFocus()", "public void clearAccessibilityFocus()", "private void sendAccessibilityHoverEvent(int eventType)", " void clearAccessibilityFocusNoCallbacks(int action)", "public final boolean requestFocus()", "public boolean restoreFocusInCluster(@FocusRealDirection int direction)", "public boolean restoreFocusNotInCluster()", "public boolean restoreDefaultFocus()", "public final boolean requestFocus(int direction)", "public boolean requestFocus(int direction, Rect previouslyFocusedRect)", "private boolean requestFocusNoSearch(int direction, Rect previouslyFocusedRect)", " void clearParentsWantFocus()", "public final boolean requestFocusFromTouch()", "private boolean hasAncestorThatBlocksDescendantFocus()", "public int getImportantForAccessibility()", "public void setAccessibilityLiveRegion(int mode)", "public int getAccessibilityLiveRegion()", "public void setImportantForAccessibility(int mode)", "private View findAccessibilityFocusHost(boolean searchDescendants)", "public boolean isImportantForAccessibility()", "public ViewParent getParentForAccessibility()", " View getSelfOrParentImportantForA11y()", "public void addChildrenForAccessibility(ArrayList<View> outChildren)", "public boolean includeForAccessibility()", "public boolean isActionableForAccessibility()", "private boolean hasListenersForAccessibility()", "public void notifyViewAccessibilityStateChangedIfNeeded(int changeType)", "public void notifySubtreeAccessibilityStateChangedIfNeeded()", "public void setTransitionVisibility(@Visibility int visibility)", " void resetSubtreeAccessibilityStateChanged()", "public boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments)", "public boolean performAccessibilityAction(int action, Bundle arguments)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)", "private boolean traverseAtGranularity(int granularity, boolean forward, boolean extendSelection)", "public CharSequence getIterableTextForAccessibility()", "public boolean isAccessibilitySelectionExtendable()", "public int getAccessibilitySelectionStart()", "public int getAccessibilitySelectionEnd()", "public void setAccessibilitySelection(int start, int end)", "private void sendViewTextTraversedAtGranularityEvent(int action, int granularity, int fromIndex, int toIndex)", "public TextSegmentIterator getIteratorForGranularity(int granularity)", "public final boolean isTemporarilyDetached()", "public void dispatchStartTemporaryDetach()", "public void onStartTemporaryDetach()", "public void dispatchFinishTemporaryDetach()", "public void onFinishTemporaryDetach()", "public KeyEvent.DispatcherState getKeyDispatcherState()", "public boolean dispatchKeyEventPreIme(KeyEvent event)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean dispatchKeyShortcutEvent(KeyEvent event)", "public boolean dispatchTouchEvent(MotionEvent event)", " boolean isAccessibilityFocusedViewOrHost()", "protected boolean canReceivePointerEvents()", "public boolean onFilterTouchEventForSecurity(MotionEvent event)", "public boolean dispatchTrackballEvent(MotionEvent event)", "public boolean dispatchCapturedPointerEvent(MotionEvent event)", "public boolean dispatchGenericMotionEvent(MotionEvent event)", "private boolean dispatchGenericMotionEventInternal(MotionEvent event)", "protected boolean dispatchHoverEvent(MotionEvent event)", "protected boolean hasHoveredChild()", "protected boolean pointInHoveredChild(MotionEvent event)", "protected boolean dispatchGenericPointerEvent(MotionEvent event)", "protected boolean dispatchGenericFocusedEvent(MotionEvent event)", "public final boolean dispatchPointerEvent(MotionEvent event)", "public void dispatchWindowFocusChanged(boolean hasFocus)", "public void onWindowFocusChanged(boolean hasWindowFocus)", "public boolean hasWindowFocus()", "public boolean hasImeFocus()", "protected void dispatchVisibilityChanged(@NonNull View changedView, @Visibility int visibility)", "protected void onVisibilityChanged(@NonNull View changedView, @Visibility int visibility)", "public void dispatchDisplayHint(@Visibility int hint)", "protected void onDisplayHint(@Visibility int hint)", "public void dispatchWindowVisibilityChanged(@Visibility int visibility)", "protected void onWindowVisibilityChanged(@Visibility int visibility)", " boolean isAggregatedVisible()", " boolean dispatchVisibilityAggregated(boolean isVisible)", "public void onVisibilityAggregated(boolean isVisible)", "public int getWindowVisibility()", "public void getWindowVisibleDisplayFrame(Rect outRect)", "public void getWindowDisplayFrame(Rect outRect)", "public void dispatchConfigurationChanged(Configuration newConfig)", "protected void onConfigurationChanged(Configuration newConfig)", " void dispatchCollectViewAttributes(AttachInfo attachInfo, int visibility)", " void performCollectViewAttributes(AttachInfo attachInfo, int visibility)", " void needGlobalAttributesUpdate(boolean force)", "public boolean isInTouchMode()", "public final Context getContext()", "public boolean onKeyPreIme(int keyCode, KeyEvent event)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyLongPress(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)", "public boolean onKeyShortcut(int keyCode, KeyEvent event)", "public boolean onCheckIsTextEditor()", "public InputConnection onCreateInputConnection(EditorInfo outAttrs)", "public boolean checkInputConnectionProxy(View view)", "public void createContextMenu(ContextMenu menu)", "protected ContextMenuInfo getContextMenuInfo()", "protected void onCreateContextMenu(ContextMenu menu)", "public boolean onTrackballEvent(MotionEvent event)", "public boolean onGenericMotionEvent(MotionEvent event)", "private boolean dispatchTouchExplorationHoverEvent(MotionEvent event)", "public boolean onHoverEvent(MotionEvent event)", "private boolean isHoverable()", "public boolean isHovered()", "public void setHovered(boolean hovered)", "public void onHoverChanged(boolean hovered)", "protected boolean handleScrollBarDragging(MotionEvent event)", "public boolean onTouchEvent(MotionEvent event)", "public boolean isInScrollingContainer()", "private void removeLongPressCallback()", "private boolean hasPendingLongPressCallback()", "private void removePerformClickCallback()", "private void removeUnsetPressCallback()", "private void removeTapCallback()", "public void cancelLongPress()", "public void setTouchDelegate(TouchDelegate delegate)", "public TouchDelegate getTouchDelegate()", "public final void requestUnbufferedDispatch(MotionEvent event)", "public final void requestUnbufferedDispatch(@InputSourceClass int source)", "private boolean hasSize()", "private boolean canTakeFocus()", " void setFlags(int flags, int mask)", "public void bringToFront()", "protected void onScrollChanged(int l, int t, int oldl, int oldt)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "protected void dispatchDraw(Canvas canvas)", "public final ViewParent getParent()", "public void setScrollX(int value)", "public void setScrollY(int value)", "public final int getScrollX()", "public final int getScrollY()", "public final int getWidth()", "public final int getHeight()", "public void getDrawingRect(Rect outRect)", "public final int getMeasuredWidth()", "public final int getMeasuredWidthAndState()", "public final int getMeasuredHeight()", "public final int getMeasuredHeightAndState()", "public final int getMeasuredState()", "public Matrix getMatrix()", "public final boolean hasIdentityMatrix()", " void ensureTransformationInfo()", "public final Matrix getInverseMatrix()", "public float getCameraDistance()", "public void setCameraDistance(float distance)", "public float getRotation()", "public void setRotation(float rotation)", "public float getRotationY()", "public void setRotationY(float rotationY)", "public float getRotationX()", "public void setRotationX(float rotationX)", "public float getScaleX()", "public void setScaleX(float scaleX)", "public float getScaleY()", "public void setScaleY(float scaleY)", "public float getPivotX()", "public void setPivotX(float pivotX)", "public float getPivotY()", "public void setPivotY(float pivotY)", "public boolean isPivotSet()", "public void resetPivot()", "public float getAlpha()", "public void forceHasOverlappingRendering(boolean hasOverlappingRendering)", "public final boolean getHasOverlappingRendering()", "public boolean hasOverlappingRendering()", "public void setAlpha(@FloatRange(from = 0.0, to = 1.0) float alpha)", " boolean setAlphaNoInvalidation(float alpha)", " void setAlphaInternal(float alpha)", "public void setTransitionAlpha(float alpha)", "private float getFinalAlpha()", "public float getTransitionAlpha()", "public void setForceDarkAllowed(boolean allow)", "public boolean isForceDarkAllowed()", "public final int getTop()", "public final void setTop(int top)", "public final int getBottom()", "public boolean isDirty()", "public final void setBottom(int bottom)", "public final int getLeft()", "public final void setLeft(int left)", "public final int getRight()", "public final void setRight(int right)", "private static float sanitizeFloatPropertyValue(float value, String propertyName)", "private static float sanitizeFloatPropertyValue(float value, String propertyName, float min, float max)", "public float getX()", "public void setX(float x)", "public float getY()", "public void setY(float y)", "public float getZ()", "public void setZ(float z)", "public float getElevation()", "public void setElevation(float elevation)", "public float getTranslationX()", "public void setTranslationX(float translationX)", "public float getTranslationY()", "public void setTranslationY(float translationY)", "public float getTranslationZ()", "public void setTranslationZ(float translationZ)", "public void setAnimationMatrix(@Nullable Matrix matrix)", "public Matrix getAnimationMatrix()", "public StateListAnimator getStateListAnimator()", "public void setStateListAnimator(StateListAnimator stateListAnimator)", "public final boolean getClipToOutline()", "public void setClipToOutline(boolean clipToOutline)", "private void setOutlineProviderFromAttribute(int providerInt)", "public void setOutlineProvider(ViewOutlineProvider provider)", "public ViewOutlineProvider getOutlineProvider()", "public void invalidateOutline()", "private void rebuildOutline()", "public boolean hasShadow()", "public void setOutlineSpotShadowColor(@ColorInt int color)", "public int getOutlineSpotShadowColor()", "public void setOutlineAmbientShadowColor(@ColorInt int color)", "public int getOutlineAmbientShadowColor()", "public void setRevealClip(boolean shouldClip, float x, float y, float radius)", "public void getHitRect(Rect outRect)", " final boolean pointInView(float localX, float localY)", "public boolean pointInView(float localX, float localY, float slop)", "public void getFocusedRect(Rect r)", "public boolean getGlobalVisibleRect(Rect r, Point globalOffset)", "public final boolean getGlobalVisibleRect(Rect r)", "public final boolean getLocalVisibleRect(Rect r)", "public void offsetTopAndBottom(int offset)", "public void offsetLeftAndRight(int offset)", "public ViewGroup.LayoutParams getLayoutParams()", "public void setLayoutParams(ViewGroup.LayoutParams params)", "public void resolveLayoutParams()", "public void scrollTo(int x, int y)", "public void scrollBy(int x, int y)", "protected boolean awakenScrollBars()", "private boolean initialAwakenScrollBars()", "protected boolean awakenScrollBars(int startDelay)", "protected boolean awakenScrollBars(int startDelay, boolean invalidate)", "private boolean skipInvalidate()", "public void invalidate(Rect dirty)", "public void invalidate(int l, int t, int r, int b)", "public void invalidate()", "public void invalidate(boolean invalidateCache)", " void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache, boolean fullInvalidate)", "private View getProjectionReceiver()", "private boolean isProjectionReceiver()", " void invalidateViewProperty(boolean invalidateParent, boolean forceRedraw)", "protected void damageInParent()", "protected void invalidateParentCaches()", "protected void invalidateParentIfNeeded()", "protected void invalidateParentIfNeededAndWasQuickRejected()", "public boolean isOpaque()", "protected void computeOpaqueFlags()", "protected boolean hasOpaqueScrollbars()", "public Handler getHandler()", "private HandlerActionQueue getRunQueue()", "public ViewRootImpl getViewRootImpl()", "public ThreadedRenderer getThreadedRenderer()", "public boolean post(Runnable action)", "public boolean postDelayed(Runnable action, long delayMillis)", "public void postOnAnimation(Runnable action)", "public void postOnAnimationDelayed(Runnable action, long delayMillis)", "public boolean removeCallbacks(Runnable action)", "public void postInvalidate()", "public void postInvalidate(int left, int top, int right, int bottom)", "public void postInvalidateDelayed(long delayMilliseconds)", "public void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom)", "public void postInvalidateOnAnimation()", "public void postInvalidateOnAnimation(int left, int top, int right, int bottom)", "private void postSendViewScrolledAccessibilityEventCallback(int dx, int dy)", "public void computeScroll()", "public boolean isHorizontalFadingEdgeEnabled()", "public void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled)", "public boolean isVerticalFadingEdgeEnabled()", "public void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled)", "public int getFadingEdge()", "public int getFadingEdgeLength()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "protected float getLeftFadingEdgeStrength()", "protected float getRightFadingEdgeStrength()", "public boolean isHorizontalScrollBarEnabled()", "public void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled)", "public boolean isVerticalScrollBarEnabled()", "public void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled)", "protected void recomputePadding()", "public void setScrollbarFadingEnabled(boolean fadeScrollbars)", "public boolean isScrollbarFadingEnabled()", "public int getScrollBarDefaultDelayBeforeFade()", "public void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade)", "public int getScrollBarFadeDuration()", "public void setScrollBarFadeDuration(int scrollBarFadeDuration)", "public int getScrollBarSize()", "public void setScrollBarSize(int scrollBarSize)", "public void setScrollBarStyle(@ScrollBarStyle int style)", "public int getScrollBarStyle()", "protected int computeHorizontalScrollRange()", "protected int computeHorizontalScrollOffset()", "protected int computeHorizontalScrollExtent()", "protected int computeVerticalScrollRange()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollExtent()", "public boolean canScrollHorizontally(int direction)", "public boolean canScrollVertically(int direction)", " void getScrollIndicatorBounds(@NonNull Rect out)", "private void onDrawScrollIndicators(Canvas c)", "private void getHorizontalScrollBarBounds(@Nullable Rect drawBounds, @Nullable Rect touchBounds)", "private void getVerticalScrollBarBounds(@Nullable Rect bounds, @Nullable Rect touchBounds)", "private void getRoundVerticalScrollBarBounds(Rect bounds)", "private void getStraightVerticalScrollBarBounds(@Nullable Rect drawBounds, @Nullable Rect touchBounds)", "protected final void onDrawScrollBars(Canvas canvas)", "protected boolean isVerticalScrollBarHidden()", "protected void onDrawHorizontalScrollBar(Canvas canvas, Drawable scrollBar, int l, int t, int r, int b)", "protected void onDrawVerticalScrollBar(Canvas canvas, Drawable scrollBar, int l, int t, int r, int b)", "protected void onDraw(Canvas canvas)", " void assignParent(ViewParent parent)", "protected void onAttachedToWindow()", "public boolean resolveRtlPropertiesIfNeeded()", "public void resetRtlProperties()", " void dispatchScreenStateChanged(int screenState)", "public void onScreenStateChanged(int screenState)", " void dispatchMovedToDisplay(Display display, Configuration config)", "public void onMovedToDisplay(int displayId, Configuration config)", "private boolean hasRtlSupport()", "private boolean isRtlCompatibilityMode()", "private boolean needRtlPropertiesResolution()", "public void onRtlPropertiesChanged(@ResolvedLayoutDir int layoutDirection)", "public boolean resolveLayoutDirection()", "public boolean canResolveLayoutDirection()", "public void resetResolvedLayoutDirection()", "public boolean isLayoutDirectionInherited()", "public boolean isLayoutDirectionResolved()", " boolean isPaddingResolved()", "public void resolvePadding()", "public void resetResolvedPadding()", " void resetResolvedPaddingInternal()", "protected void onDetachedFromWindow()", "protected void onDetachedFromWindowInternal()", "private void cleanupDraw()", " void invalidateInheritedLayoutMode(int layoutModeOfRoot)", "protected int getWindowAttachCount()", "public IBinder getWindowToken()", "public WindowId getWindowId()", "public IBinder getApplicationWindowToken()", "public Display getDisplay()", " IWindowSession getWindowSession()", "protected IWindow getWindow()", " int combineVisibility(int vis1, int vis2)", " void dispatchAttachedToWindow(AttachInfo info, int visibility)", " void dispatchDetachedFromWindow()", "public final void cancelPendingInputEvents()", " void dispatchCancelPendingInputEvents()", "public void onCancelPendingInputEvents()", "public void saveHierarchyState(SparseArray<Parcelable> container)", "protected void dispatchSaveInstanceState(SparseArray<Parcelable> container)", "protected Parcelable onSaveInstanceState()", "public void restoreHierarchyState(SparseArray<Parcelable> container)", "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)", "protected void onRestoreInstanceState(Parcelable state)", "public long getDrawingTime()", "public void setDuplicateParentStateEnabled(boolean enabled)", "public boolean isDuplicateParentStateEnabled()", "public void setLayerType(@LayerType int layerType, @Nullable Paint paint)", "public void setLayerPaint(@Nullable Paint paint)", "public int getLayerType()", "public void buildLayer()", "protected void destroyHardwareResources()", "public void setDrawingCacheEnabled(boolean enabled)", "public boolean isDrawingCacheEnabled()", "public void outputDirtyFlags(String indent, boolean clear, int clearMask)", "protected void dispatchGetDisplayList()", "public boolean canHaveDisplayList()", "public RenderNode updateDisplayListIfDirty()", "private void resetDisplayList()", "public Bitmap getDrawingCache()", "public Bitmap getDrawingCache(boolean autoScale)", "public void destroyDrawingCache()", "public void setDrawingCacheBackgroundColor(@ColorInt int color)", "public int getDrawingCacheBackgroundColor()", "public void buildDrawingCache()", "public void buildDrawingCache(boolean autoScale)", "private void buildDrawingCacheImpl(boolean autoScale)", "public Bitmap createSnapshot(ViewDebug.CanvasProvider canvasProvider, boolean skipChildren)", "public boolean isInEditMode()", "protected boolean isPaddingOffsetRequired()", "protected int getLeftPaddingOffset()", "protected int getRightPaddingOffset()", "protected int getTopPaddingOffset()", "protected int getBottomPaddingOffset()", "protected int getFadeTop(boolean offsetRequired)", "protected int getFadeHeight(boolean offsetRequired)", "public boolean isHardwareAccelerated()", "public void setClipBounds(Rect clipBounds)", "public Rect getClipBounds()", "public boolean getClipBounds(Rect outRect)", "private boolean applyLegacyAnimation(ViewGroup parent, long drawingTime, Animation a, boolean scalingRequired)", " void setDisplayListProperties(RenderNode renderNode)", " boolean draw(Canvas canvas, ViewGroup parent, long drawingTime)", " static Paint getDebugPaint()", " final int dipsToPixels(int dips)", "private final void debugDrawFocus(Canvas canvas)", "public void draw(Canvas canvas)", "private void drawBackground(Canvas canvas)", " void setBackgroundBounds()", "private void setBackgroundRenderNodeProperties(RenderNode renderNode)", "private RenderNode getDrawableRenderNode(Drawable drawable, RenderNode renderNode)", "public ViewOverlay getOverlay()", "public int getSolidColor()", "private static String printFlags(int flags)", "private static String printPrivateFlags(int privateFlags)", "public boolean isLayoutRequested()", "public static boolean isLayoutModeOptical(Object o)", "private boolean setOpticalFrame(int left, int top, int right, int bottom)", "public void layout(int l, int t, int r, int b)", "private boolean hasParentWantsFocus()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "protected boolean setFrame(int left, int top, int right, int bottom)", "public final void setLeftTopRightBottom(int left, int top, int right, int bottom)", "private void sizeChange(int newWidth, int newHeight, int oldWidth, int oldHeight)", "protected void onFinishInflate()", "public Resources getResources()", "public void invalidateDrawable(@NonNull Drawable drawable)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public void unscheduleDrawable(Drawable who)", "protected void resolveDrawables()", " boolean areDrawablesResolved()", "public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection)", "protected void resetResolvedDrawables()", " void resetResolvedDrawablesInternal()", "protected boolean verifyDrawable(@NonNull Drawable who)", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", "public void dispatchDrawableHotspotChanged(float x, float y)", "public void refreshDrawableState()", "private Drawable getDefaultFocusHighlightDrawable()", "private void setDefaultFocusHighlight(Drawable highlight)", "public boolean isDefaultFocusHighlightNeeded(Drawable background, Drawable foreground)", "private void switchDefaultFocusHighlight()", "private void drawDefaultFocusHighlight(Canvas canvas)", "public final int[] getDrawableState()", "protected int[] onCreateDrawableState(int extraSpace)", "protected static int[] mergeDrawableStates(int[] baseState, int[] additionalState)", "public void jumpDrawablesToCurrentState()", "public void setBackgroundColor(@ColorInt int color)", "public void setBackgroundResource(@DrawableRes int resid)", "public void setBackground(Drawable background)", "public void setBackgroundDrawable(Drawable background)", "public Drawable getBackground()", "public void setBackgroundTintList(@Nullable ColorStateList tint)", "public ColorStateList getBackgroundTintList()", "public void setBackgroundTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setBackgroundTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getBackgroundTintMode()", "public BlendMode getBackgroundTintBlendMode()", "private void applyBackgroundTint()", "public Drawable getForeground()", "public void setForeground(Drawable foreground)", "public boolean isForegroundInsidePadding()", "public int getForegroundGravity()", "public void setForegroundGravity(int gravity)", "public void setForegroundTintList(@Nullable ColorStateList tint)", "public ColorStateList getForegroundTintList()", "public void setForegroundTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setForegroundTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getForegroundTintMode()", "public BlendMode getForegroundTintBlendMode()", "private void applyForegroundTint()", "private Drawable getAutofilledDrawable()", "private void drawAutofilledHighlight(@NonNull Canvas canvas)", "public void onDrawForeground(Canvas canvas)", "public void setPadding(int left, int top, int right, int bottom)", "protected void internalSetPadding(int left, int top, int right, int bottom)", "public void setPaddingRelative(int start, int top, int end, int bottom)", "public int getSourceLayoutResId()", "public int getPaddingTop()", "public int getPaddingBottom()", "public int getPaddingLeft()", "public int getPaddingStart()", "public int getPaddingRight()", "public int getPaddingEnd()", "public boolean isPaddingRelative()", " Insets computeOpticalInsets()", "public void resetPaddingToInitialValues()", "public Insets getOpticalInsets()", "public void setOpticalInsets(Insets insets)", "public void setSelected(boolean selected)", "protected void dispatchSetSelected(boolean selected)", "public boolean isSelected()", "public void setActivated(boolean activated)", "protected void dispatchSetActivated(boolean activated)", "public boolean isActivated()", "public ViewTreeObserver getViewTreeObserver()", "public View getRootView()", "public boolean toGlobalMotionEvent(MotionEvent ev)", "public boolean toLocalMotionEvent(MotionEvent ev)", "public void transformMatrixToGlobal(@NonNull Matrix matrix)", "public void transformMatrixToLocal(@NonNull Matrix matrix)", "public int[] getLocationOnScreen()", "public void getLocationOnScreen(@Size(2) int[] outLocation)", "public void getLocationInWindow(@Size(2) int[] outLocation)", "public void transformFromViewToWindowSpace(@Size(2) int[] inOutLocation)", "protected T findViewTraversal(@IdRes int id)", "protected T findViewWithTagTraversal(Object tag)", "protected T findViewByPredicateTraversal(Predicate<View> predicate, View childToSkip)", "public final T findViewById(@IdRes int id)", "public final T requireViewById(@IdRes int id)", "public T findViewByAccessibilityIdTraversal(int accessibilityId)", "public T findViewByAutofillIdTraversal(int autofillId)", "public final T findViewWithTag(Object tag)", "public final T findViewByPredicate(Predicate<View> predicate)", "public final T findViewByPredicateInsideOut(View start, Predicate<View> predicate)", "public void setId(@IdRes int id)", "public void setIsRootNamespace(boolean isRoot)", "public boolean isRootNamespace()", "public int getId()", "public long getUniqueDrawingId()", "public Object getTag()", "public void setTag(final Object tag)", "public Object getTag(int key)", "public void setTag(int key, final Object tag)", "public void setTagInternal(int key, Object tag)", "private void setKeyedTag(int key, Object tag)", "public void debug()", "protected void debug(int depth)", "protected static String debugIndent(int depth)", "public int getBaseline()", "public boolean isInLayout()", "public void requestLayout()", "public void forceLayout()", "public final void measure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected final void setMeasuredDimension(int measuredWidth, int measuredHeight)", "private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight)", "public static int combineMeasuredStates(int curState, int newState)", "public static int resolveSize(int size, int measureSpec)", "public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState)", "public static int getDefaultSize(int size, int measureSpec)", "protected int getSuggestedMinimumHeight()", "protected int getSuggestedMinimumWidth()", "public int getMinimumHeight()", "public void setMinimumHeight(int minHeight)", "public int getMinimumWidth()", "public void setMinimumWidth(int minWidth)", "public Animation getAnimation()", "public void startAnimation(Animation animation)", "public void clearAnimation()", "public void setAnimation(Animation animation)", "protected void onAnimationStart()", "protected void onAnimationEnd()", "protected boolean onSetAlpha(int alpha)", "public boolean gatherTransparentRegion(Region region)", "public void playSoundEffect(int soundConstant)", "public boolean performHapticFeedback(int feedbackConstant)", "public boolean performHapticFeedback(int feedbackConstant, int flags)", "public void setSystemUiVisibility(int visibility)", "public int getSystemUiVisibility()", "public int getWindowSystemUiVisibility()", "public void onWindowSystemUiVisibilityChanged(int visible)", "public void dispatchWindowSystemUiVisiblityChanged(int visible)", "public void setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener l)", "public void dispatchSystemUiVisibilityChanged(int visibility)", " boolean updateLocalSystemUiVisibility(int localValue, int localChanges)", "public void setDisabledSystemUiVisibility(int flags)", "public final boolean startDrag(ClipData data, DragShadowBuilder shadowBuilder, Object myLocalState, int flags)", "public final boolean startDragAndDrop(ClipData data, DragShadowBuilder shadowBuilder, Object myLocalState, int flags)", "public final void cancelDragAndDrop()", "public final void updateDragShadow(DragShadowBuilder shadowBuilder)", "public final boolean startMovingTask(float startX, float startY)", "public void finishMovingTask()", "public boolean onDragEvent(DragEvent event)", " boolean dispatchDragEnterExitInPreN(DragEvent event)", "public boolean dispatchDragEvent(DragEvent event)", " final boolean callDragEventHandler(DragEvent event)", " boolean canAcceptDrag()", "public void onCloseSystemDialogs(String reason)", "public void applyDrawableToTransparentRegion(Drawable dr, Region region)", "private void checkForLongClick(long delay, float x, float y, int classification)", "public static View inflate(Context context, @LayoutRes int resource, ViewGroup root)", "protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent)", "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)", "public int getOverScrollMode()", "public void setOverScrollMode(int overScrollMode)", "public void setNestedScrollingEnabled(boolean enabled)", "public boolean isNestedScrollingEnabled()", "public boolean startNestedScroll(int axes)", "public void stopNestedScroll()", "public boolean hasNestedScrollingParent()", "public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable @Size(2) int[] offsetInWindow)", "public boolean dispatchNestedPreScroll(int dx, int dy, @Nullable @Size(2) int[] consumed, @Nullable @Size(2) int[] offsetInWindow)", "public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed)", "public boolean dispatchNestedPreFling(float velocityX, float velocityY)", "protected float getVerticalScrollFactor()", "protected float getHorizontalScrollFactor()", "public int getRawTextDirection()", "public void setTextDirection(int textDirection)", "public int getTextDirection()", "public boolean resolveTextDirection()", "public boolean canResolveTextDirection()", "public void resetResolvedTextDirection()", "public boolean isTextDirectionInherited()", "public boolean isTextDirectionResolved()", "public int getRawTextAlignment()", "public void setTextAlignment(@TextAlignment int textAlignment)", "public int getTextAlignment()", "public boolean resolveTextAlignment()", "public boolean canResolveTextAlignment()", "public void resetResolvedTextAlignment()", "public boolean isTextAlignmentInherited()", "public boolean isTextAlignmentResolved()", "public static int generateViewId()", "private static boolean isViewIdGenerated(int id)", "public void captureTransitioningViews(List<View> transitioningViews)", "public void findNamedViews(Map<String, View> namedElements)", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)", "public void setPointerIcon(PointerIcon pointerIcon)", "public PointerIcon getPointerIcon()", "public boolean hasPointerCapture()", "public void requestPointerCapture()", "public void releasePointerCapture()", "public void onPointerCaptureChange(boolean hasCapture)", "public void dispatchPointerCaptureChanged(boolean hasCapture)", "public boolean onCapturedPointerEvent(MotionEvent event)", "public void setOnCapturedPointerListener(OnCapturedPointerListener l)", "private void recordGestureClassification(int classification)", "public ViewPropertyAnimator animate()", "public final void setTransitionName(String transitionName)", "public String getTransitionName()", "public void requestKeyboardShortcuts(List<KeyboardShortcutGroup> data, int deviceId)", "private void cancel(@Nullable SendAccessibilityEventThrottle callback)", "public int getScrollCaptureHint()", "public void setScrollCaptureHint(@ScrollCaptureHint int hint)", "public void setScrollCaptureCallback(@Nullable ScrollCaptureCallback callback)", "public ScrollCaptureCallback createScrollCaptureCallbackInternal(@NonNull Rect localVisibleRect, @NonNull Point windowOffset)", "public void dispatchScrollCaptureSearch(@NonNull Rect localVisibleRect, @NonNull Point windowOffset, @NonNull Queue<ScrollCaptureTarget> targets)", "private static void dumpFlags()", "private static void dumpFlag(HashMap<String, String> found, String name, int value)", "public void encode(@NonNull ViewHierarchyEncoder stream)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)", " boolean shouldDrawRoundScrollbar()", "public void setTooltipText(@Nullable CharSequence tooltipText)", "public void setTooltip(@Nullable CharSequence tooltipText)", "public CharSequence getTooltipText()", "public CharSequence getTooltip()", "private boolean showTooltip(int x, int y, boolean fromLongClick)", " void hideTooltip()", "private boolean showLongClickTooltip(int x, int y)", "private boolean showHoverTooltip()", " boolean dispatchTooltipHoverEvent(MotionEvent event)", " void handleTooltipKey(KeyEvent event)", "private void handleTooltipUp()", "private int getFocusableAttribute(TypedArray attributes)", "public View getTooltipView()", "public static boolean isDefaultFocusHighlightEnabled()", " View dispatchUnhandledKeyEvent(KeyEvent evt)", " boolean onUnhandledKeyEvent(@NonNull KeyEvent event)", " boolean hasUnhandledKeyListener()", "public void addOnUnhandledKeyEventListener(OnUnhandledKeyEventListener listener)", "public void removeOnUnhandledKeyEventListener(OnUnhandledKeyEventListener listener)" ]
}