{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/Attributes.java",
  "packageName" : "java.util.jar",
  "className" : "Attributes",
  "comment" : "\n * The Attributes class maps Manifest attribute names to associated string\n * values. Valid attribute names are case-insensitive, are restricted to\n * the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70\n * characters in length. There must be a colon and a SPACE after the name;\n * the combined length will not exceed 72 characters.\n * Attribute values can contain any characters and\n * will be UTF8-encoded when written to the output stream.  See the\n * <a href=\"{@docRoot}/../specs/jar/jar.html\">JAR File Specification</a>\n * for more information about valid attribute names and values.\n *\n * <p>This map and its views have a predictable iteration order, namely the\n * order that keys were inserted into the map, as with {@link LinkedHashMap}.\n *\n * @author  David Connelly\n * @see     Manifest\n * @since   1.2\n ",
  "links" : [ "java.util.LinkedHashMap" ],
  "variables" : [ {
    "name" : "map",
    "type" : "Map<Object, Object>",
    "comment" : "\n     * The attribute name-value mappings.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object get(Object name)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value of the specified attribute name, or null if the\n     * attribute name was not found.\n     *\n     * @param name the attribute name\n     * @return the value of the specified attribute name, or null if\n     *         not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the specified attribute name, specified as\n     * a string, or null if the attribute was not found. The attribute\n     * name is case-insensitive.\n     * <p>\n     * This method is defined as:\n     * <pre>\n     *      return (String)get(new Attributes.Name((String)name));\n     * </pre>\n     *\n     * @param name the attribute name as a string\n     * @return the String value of the specified attribute name, or null if\n     *         not found.\n     * @throws IllegalArgumentException if the attribute name is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(Name name)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the specified Attributes.Name, or null if the\n     * attribute was not found.\n     * <p>\n     * This method is defined as:\n     * <pre>\n     *     return (String)get(name);\n     * </pre>\n     *\n     * @param name the Attributes.Name object\n     * @return the String value of the specified Attribute.Name, or null if\n     *         not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object put(Object name, Object value)",
    "returnType" : "Object",
    "comment" : "\n     * Associates the specified value with the specified attribute name\n     * (key) in this Map. If the Map previously contained a mapping for\n     * the attribute name, the old value is replaced.\n     *\n     * @param name the attribute name\n     * @param value the attribute value\n     * @return the previous value of the attribute, or null if none\n     * @throws    ClassCastException if the name is not a Attributes.Name\n     *            or the value is not a String\n     ",
    "links" : [ ]
  }, {
    "name" : "public String putValue(String name, String value)",
    "returnType" : "String",
    "comment" : "\n     * Associates the specified value with the specified attribute name,\n     * specified as a String. The attributes name is case-insensitive.\n     * If the Map previously contained a mapping for the attribute name,\n     * the old value is replaced.\n     * <p>\n     * This method is defined as:\n     * <pre>\n     *      return (String)put(new Attributes.Name(name), value);\n     * </pre>\n     *\n     * @param name the attribute name as a string\n     * @param value the attribute value\n     * @return the previous value of the attribute, or null if none\n     * @throws    IllegalArgumentException if the attribute name is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object remove(Object name)",
    "returnType" : "Object",
    "comment" : "\n     * Removes the attribute with the specified name (key) from this Map.\n     * Returns the previous attribute value, or null if none.\n     *\n     * @param name attribute name\n     * @return the previous value of the attribute, or null if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsValue(Object value)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this Map maps one or more attribute names (keys)\n     * to the specified value.\n     *\n     * @param value the attribute value\n     * @return true if this Map maps one or more attribute names to\n     *         the specified value\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(Object name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this Map contains the specified attribute name (key).\n     *\n     * @param name the attribute name\n     * @return true if this Map contains the specified attribute name\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putAll(Map<?, ?> attr)",
    "returnType" : "void",
    "comment" : "\n     * Copies all of the attribute name-value mappings from the specified\n     * Attributes to this Map. Duplicate mappings will be replaced.\n     *\n     * @param attr the Attributes to be stored in this map\n     * @throws    ClassCastException if attr is not an Attributes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all attributes from this Map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of attributes in this Map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this Map contains no attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Object> keySet()",
    "returnType" : "Set<Object>",
    "comment" : "\n     * Returns a Set view of the attribute names (keys) contained in this Map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<Object> values()",
    "returnType" : "Collection<Object>",
    "comment" : "\n     * Returns a Collection view of the attribute values contained in this Map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Map.Entry<Object, Object>> entrySet()",
    "returnType" : "Set<Map.Entry<Object, Object>>",
    "comment" : "\n     * Returns a Collection view of the attribute name-value mappings\n     * contained in this Map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object to the underlying\n     * {@linkplain Attributes#map map} for equality.\n     * Returns true if the given object is also a Map\n     * and the two maps represent the same mappings.\n     *\n     * @param o the Object to be compared\n     * @return true if the specified Object is equal to this Map\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this Map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a copy of the Attributes, implemented as follows:\n     * <pre>\n     *     public Object clone() { return new Attributes(this); }\n     * </pre>\n     * Since the attribute names and values are themselves immutable,\n     * the Attributes returned can be safely modified without affecting\n     * the original.\n     ",
    "links" : [ ]
  }, {
    "name" : " void write(DataOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the current attributes to the specified data output stream.\n     * XXX Need to handle UTF8 values and break up lines longer than 72 bytes\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeMain(DataOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the current attributes to the specified data output stream,\n     * make sure to write out the MANIFEST_VERSION or SIGNATURE_VERSION\n     * attributes first.\n     *\n     * XXX Need to handle UTF8 values and break up lines longer than 72 bytes\n     ",
    "links" : [ ]
  }, {
    "name" : " void read(Manifest.FastInputStream is, byte[] lbuf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads attributes from the specified input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : " int read(Manifest.FastInputStream is, byte[] lbuf, String filename, int lineNumber) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object get(Object name)", "public String getValue(String name)", "public String getValue(Name name)", "public Object put(Object name, Object value)", "public String putValue(String name, String value)", "public Object remove(Object name)", "public boolean containsValue(Object value)", "public boolean containsKey(Object name)", "public void putAll(Map<?, ?> attr)", "public void clear()", "public int size()", "public boolean isEmpty()", "public Set<Object> keySet()", "public Collection<Object> values()", "public Set<Map.Entry<Object, Object>> entrySet()", "public boolean equals(Object o)", "public int hashCode()", "public Object clone()", " void write(DataOutputStream out) throws IOException", " void writeMain(DataOutputStream out) throws IOException", " void read(Manifest.FastInputStream is, byte[] lbuf) throws IOException", " int read(Manifest.FastInputStream is, byte[] lbuf, String filename, int lineNumber) throws IOException" ],
  "variableNames" : [ "map" ]
}