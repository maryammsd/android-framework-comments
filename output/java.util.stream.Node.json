{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Node.java",
  "packageName" : "java.util.stream",
  "className" : "Node",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Spliterator<T> spliterator()",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Returns a {@link Spliterator} describing the elements contained in this\n     * {@code Node}.\n     *\n     * @return a {@code Spliterator} describing the elements contained in this\n     *         {@code Node}\n     ",
    "links" : [ "java.util.Spliterator" ]
  }, {
    "name" : " void forEach(Consumer<? super T> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Traverses the elements of this node, and invoke the provided\n     * {@code Consumer} with each element.  Elements are provided in encounter\n     * order if the source for the {@code Node} has a defined encounter order.\n     *\n     * @param consumer a {@code Consumer} that is to be invoked with each\n     *        element in this {@code Node}\n     ",
    "links" : [ ]
  }, {
    "name" : " int getChildCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of child nodes of this node.\n     *\n     * @implSpec The default implementation returns zero.\n     *\n     * @return the number of child nodes\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<T> getChild(int i)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Retrieves the child {@code Node} at a given index.\n     *\n     * @implSpec The default implementation always throws\n     * {@code IndexOutOfBoundsException}.\n     *\n     * @param i the index to the child node\n     * @return the child node\n     * @throws IndexOutOfBoundsException if the index is less than 0 or greater\n     *         than or equal to the number of child nodes\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<T> truncate(long from, long to, IntFunction<T[]> generator)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Return a node describing a subsequence of the elements of this node,\n     * starting at the given inclusive start offset and ending at the given\n     * exclusive end offset.\n     *\n     * @param from The (inclusive) starting offset of elements to include, must\n     *             be in range 0..count().\n     * @param to The (exclusive) end offset of elements to include, must be\n     *           in range 0..count().\n     * @param generator A function to be used to create a new array, if needed,\n     *                  for reference nodes.\n     * @return the truncated node\n     ",
    "links" : [ ]
  }, {
    "name" : " T[] asArray(IntFunction<T[]> generator)",
    "returnType" : "T[]",
    "comment" : "\n     * Provides an array view of the contents of this node.\n     *\n     * <p>Depending on the underlying implementation, this may return a\n     * reference to an internal array rather than a copy.  Since the returned\n     * array may be shared, the returned array should not be modified.  The\n     * {@code generator} function may be consulted to create the array if a new\n     * array needs to be created.\n     *\n     * @param generator a factory function which takes an integer parameter and\n     *        returns a new, empty array of that size and of the appropriate\n     *        array type\n     * @return an array containing the contents of this {@code Node}\n     ",
    "links" : [ ]
  }, {
    "name" : " void copyInto(T[] array, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copies the content of this {@code Node} into an array, starting at a\n     * given offset into the array.  It is the caller's responsibility to ensure\n     * there is sufficient room in the array, otherwise unspecified behaviour\n     * will occur if the array length is less than the number of elements\n     * contained in this node.\n     *\n     * @param array the array into which to copy the contents of this\n     *       {@code Node}\n     * @param offset the starting offset within the array\n     * @throws IndexOutOfBoundsException if copying would cause access of data\n     *         outside array bounds\n     * @throws NullPointerException if {@code array} is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : " StreamShape getShape()",
    "returnType" : "StreamShape",
    "comment" : "\n     * Gets the {@code StreamShape} associated with this {@code Node}.\n     *\n     * @implSpec The default in {@code Node} returns\n     * {@code StreamShape.REFERENCE}\n     *\n     * @return the stream shape associated with this node\n     ",
    "links" : [ ]
  }, {
    "name" : " long count()",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of elements contained in this node.\n     *\n     * @return the number of elements contained in this node\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Spliterator<T> spliterator()", " void forEach(Consumer<? super T> consumer)", " int getChildCount()", " Node<T> getChild(int i)", " Node<T> truncate(long from, long to, IntFunction<T[]> generator)", " T[] asArray(IntFunction<T[]> generator)", " void copyInto(T[] array, int offset)", " StreamShape getShape()", " long count()" ],
  "variableNames" : [ ]
}