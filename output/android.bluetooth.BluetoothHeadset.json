{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothHeadset.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHeadset",
  "comment" : "\n * Public API for controlling the Bluetooth Headset Service. This includes both Bluetooth Headset\n * and Handsfree (v1.5) profiles.\n *\n * <p>BluetoothHeadset is a proxy object for controlling the Bluetooth Headset Service via IPC.\n *\n * <p>Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothHeadset proxy object. Use\n * {@link BluetoothAdapter#closeProfileProxy} to close the service connection.\n *\n * <p>Android only supports one connected Bluetooth Headset at a time. Each method is protected with\n * its appropriate permission.\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy", "android.bluetooth.BluetoothAdapter#closeProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Headset profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_AUDIO_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in the Audio Connection state of the HFP profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_AUDIO_CONNECTED}, {@link #STATE_AUDIO_DISCONNECTED},\n     ",
    "links" : [ "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_AUDIO_CONNECTED", "#EXTRA_PREVIOUS_STATE", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "ACTION_ACTIVE_DEVICE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the selection of a connected device as active.\n     *\n     * <p>This intent will have one extra:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can be null if no device\n     *       is active.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE" ]
  }, {
    "name" : "ACTION_VENDOR_SPECIFIC_HEADSET_EVENT",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast that the headset has posted a vendor-specific event.\n     *\n     * <p>This intent will have 4 extras and 1 category.\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote Bluetooth Device\n     *   <li>{@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD} - The vendor specific command\n     *   <li>{@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE} - The AT command type which can\n     *       be one of {@link #AT_CMD_TYPE_READ}, {@link #AT_CMD_TYPE_TEST}, or {@link\n     *       #AT_CMD_TYPE_SET}, {@link #AT_CMD_TYPE_BASIC},{@link #AT_CMD_TYPE_ACTION}.\n     *   <li>{@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS} - Command arguments.\n     * </ul>\n     *\n     * <p>The category is the Company ID of the vendor defining the vendor-specific command. {@link\n     * BluetoothAssignedNumbers}\n     *\n     * <p>For example, for Plantronics specific events Category will be {@link\n     * #VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY}.55\n     *\n     * <p>For example, an AT+XEVENT=foo,3 will get translated into\n     *\n     * <ul>\n     *   <li>EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD = +XEVENT\n     *   <li>EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE = AT_CMD_TYPE_SET\n     *   <li>EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS = foo, 3\n     * </ul>\n     ",
    "links" : [ "#AT_CMD_TYPE_TEST", "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE", "android.bluetooth.BluetoothAssignedNumbers", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#AT_CMD_TYPE_ACTION", "#AT_CMD_TYPE_READ", "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS", "#VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY", "#AT_CMD_TYPE_BASIC", "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD", "#AT_CMD_TYPE_SET" ]
  }, {
    "name" : "EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD",
    "type" : "String",
    "comment" : "\n     * A String extra field in {@link #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT} intents that contains\n     * the name of the vendor-specific command.\n     ",
    "links" : [ "#ACTION_VENDOR_SPECIFIC_HEADSET_EVENT" ]
  }, {
    "name" : "EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE",
    "type" : "String",
    "comment" : "\n     * An int extra field in {@link #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT} intents that contains the\n     * AT command type of the vendor-specific command.\n     ",
    "links" : [ "#ACTION_VENDOR_SPECIFIC_HEADSET_EVENT" ]
  }, {
    "name" : "AT_CMD_TYPE_READ",
    "type" : "int",
    "comment" : "\n     * AT command type READ used with {@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE} For\n     * example, AT+VGM?. There are no arguments for this command type.\n     ",
    "links" : [ "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE" ]
  }, {
    "name" : "AT_CMD_TYPE_TEST",
    "type" : "int",
    "comment" : "\n     * AT command type TEST used with {@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE} For\n     * example, AT+VGM=?. There are no arguments for this command type.\n     ",
    "links" : [ "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE" ]
  }, {
    "name" : "AT_CMD_TYPE_SET",
    "type" : "int",
    "comment" : "\n     * AT command type SET used with {@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE} For\n     * example, AT+VGM=<args>.\n     ",
    "links" : [ "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE" ]
  }, {
    "name" : "AT_CMD_TYPE_BASIC",
    "type" : "int",
    "comment" : "\n     * AT command type BASIC used with {@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE} For\n     * example, ATD. Single character commands and everything following the character are arguments.\n     ",
    "links" : [ "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE" ]
  }, {
    "name" : "AT_CMD_TYPE_ACTION",
    "type" : "int",
    "comment" : "\n     * AT command type ACTION used with {@link #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE} For\n     * example, AT+CHUP. There are no arguments for action commands.\n     ",
    "links" : [ "#EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE" ]
  }, {
    "name" : "EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS",
    "type" : "String",
    "comment" : "\n     * A Parcelable String array extra field in {@link #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT}\n     * intents that contains the arguments to the vendor-specific command.\n     ",
    "links" : [ "#ACTION_VENDOR_SPECIFIC_HEADSET_EVENT" ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY",
    "type" : "String",
    "comment" : "\n     * The intent category to be used with {@link #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT} for the\n     * companyId\n     ",
    "links" : [ "#ACTION_VENDOR_SPECIFIC_HEADSET_EVENT" ]
  }, {
    "name" : "VENDOR_RESULT_CODE_COMMAND_ANDROID",
    "type" : "String",
    "comment" : " A vendor-specific command for unsolicited result code. ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_XAPL",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_IPHONEACCEV",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_IPHONEACCEV_BATTERY_LEVEL",
    "type" : "int",
    "comment" : "\n     * Battery level indicator associated with {@link #VENDOR_SPECIFIC_HEADSET_EVENT_IPHONEACCEV}\n     *\n     * @hide\n     ",
    "links" : [ "#VENDOR_SPECIFIC_HEADSET_EVENT_IPHONEACCEV" ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT_BATTERY_LEVEL",
    "type" : "String",
    "comment" : "\n     * Battery level indicator associated with {@link #VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT}\n     *\n     * @hide\n     ",
    "links" : [ "#VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT" ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_CGMI",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command that asks for the information about device manufacturer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_CGMM",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command that asks for the information about the model of the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_CGMR",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command that asks for the revision information, for Android we will\n     * return the OS version and build number.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SPECIFIC_HEADSET_EVENT_CGSN",
    "type" : "String",
    "comment" : "\n     * A vendor-specific AT command that asks for the device's serial number.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_AUDIO_DISCONNECTED",
    "type" : "int",
    "comment" : "\n     * Headset state when SCO audio is not connected. This state can be one of {@link #EXTRA_STATE}\n     * or {@link #EXTRA_PREVIOUS_STATE} of {@link #ACTION_AUDIO_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "STATE_AUDIO_CONNECTING",
    "type" : "int",
    "comment" : "\n     * Headset state when SCO audio is connecting. This state can be one of {@link #EXTRA_STATE} or\n     * {@link #EXTRA_PREVIOUS_STATE} of {@link #ACTION_AUDIO_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "STATE_AUDIO_CONNECTED",
    "type" : "int",
    "comment" : "\n     * Headset state when SCO audio is connected. This state can be one of {@link #EXTRA_STATE} or\n     * {@link #EXTRA_PREVIOUS_STATE} of {@link #ACTION_AUDIO_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_HF_INDICATORS_VALUE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the headset's indicator status\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_HF_INDICATORS_IND_ID} - The Assigned number of headset Indicator which is\n     *       supported by the headset ( as indicated by AT+BIND command in the SLC sequence) or\n     *       whose value is changed (indicated by AT+BIEV command)\n     *   <li>{@link #EXTRA_HF_INDICATORS_IND_VALUE} - Updated value of headset indicator.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - Remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_HF_INDICATORS_IND_ID} is defined by Bluetooth SIG and each of the indicators\n     * are given an assigned number. Below shows the assigned number of Indicator added so far -\n     * Enhanced Safety - 1, Valid Values: 0 - Disabled, 1 - Enabled - Battery Level - 2, Valid\n     * Values: 0~100 - Remaining level of Battery\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_HF_INDICATORS_IND_VALUE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#EXTRA_HF_INDICATORS_IND_ID" ]
  }, {
    "name" : "EXTRA_HF_INDICATORS_IND_ID",
    "type" : "String",
    "comment" : "\n     * A int extra field in {@link #ACTION_HF_INDICATORS_VALUE_CHANGED} intents that contains the\n     * assigned number of the headset indicator as defined by Bluetooth SIG that is being sent.\n     * Value range is 0-65535 as defined in HFP 1.7\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_HF_INDICATORS_VALUE_CHANGED" ]
  }, {
    "name" : "EXTRA_HF_INDICATORS_IND_VALUE",
    "type" : "String",
    "comment" : "\n     * A int extra field in {@link #ACTION_HF_INDICATORS_VALUE_CHANGED} intents that contains the\n     * value of the Headset indicator that is being sent.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_HF_INDICATORS_VALUE_CHANGED" ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothHeadset",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service. Other public functions of BluetoothHeadset will\n     * return default error results once close() has been called. Multiple invocations of close()\n     * are ok.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHeadset getService()",
    "returnType" : "IBluetoothHeadset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p>Currently, the system supports only 1 connection to the headset/handsfree profile. The API\n     * will automatically disconnect connected devices before connecting.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is already connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that connection\n     * state intent for the profile will be broadcasted with the state. Users can get the connection\n     * state of the profile from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p>This API will return false in scenarios like the profile on the Bluetooth device is not in\n     * connected state etc. When this API returns, true, it is guaranteed that the connection state\n     * change intent will be broadcasted with the state. Users can get the disconnection state of\n     * the profile from this intent.\n     *\n     * <p>If the disconnection is initiated by a remote device, the state will transition from\n     * {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by\n     * the host (local) device the state will transition from {@link #STATE_CONNECTED} to state\n     * {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link\n     * #STATE_DISCONNECTING} can be used to distinguish between the two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p>The priority can be any of: {@link #PRIORITY_AUTO_CONNECT}, {@link #PRIORITY_OFF}, {@link\n     * #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_AUTO_CONNECT", "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public boolean isNoiseReductionSupported(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the headset supports some form of noise reduction\n     *\n     * @param device Bluetooth device\n     * @return true if echo cancellation and/or noise reduction is supported, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVoiceRecognitionSupported(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the headset supports voice recognition\n     *\n     * @param device Bluetooth device\n     * @return true if voice recognition is supported, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startVoiceRecognition(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Start Bluetooth voice recognition. This methods sends the voice recognition AT command to the\n     * headset and establishes the audio connection.\n     *\n     * <p>Users can listen to {@link #ACTION_AUDIO_STATE_CHANGED}. If this function returns true,\n     * this intent will be broadcasted with {@link #EXTRA_STATE} set to {@link\n     * #STATE_AUDIO_CONNECTING}.\n     *\n     * <p>{@link #EXTRA_STATE} will transition from {@link #STATE_AUDIO_CONNECTING} to {@link\n     * #STATE_AUDIO_CONNECTED} when audio connection is established and to {@link\n     * #STATE_AUDIO_DISCONNECTED} in case of failure to establish the audio connection.\n     *\n     * @param device Bluetooth headset\n     * @return false if there is no headset connected, or the connected headset doesn't support\n     *     voice recognition, or voice recognition is already started, or audio channel is occupied,\n     *     or on error, true otherwise\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_STATE", "#STATE_AUDIO_CONNECTED", "#STATE_AUDIO_CONNECTING", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "public boolean stopVoiceRecognition(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Stop Bluetooth Voice Recognition mode, and shut down the Bluetooth audio path.\n     *\n     * <p>Users can listen to {@link #ACTION_AUDIO_STATE_CHANGED}. If this function returns true,\n     * this intent will be broadcasted with {@link #EXTRA_STATE} set to {@link\n     * #STATE_AUDIO_DISCONNECTED}.\n     *\n     * @param device Bluetooth headset\n     * @return false if there is no headset connected, or voice recognition has not started, or\n     *     voice recognition has ended on this headset, or on error, true otherwise\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_STATE", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "public boolean isAudioConnected(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if Bluetooth SCO audio is connected.\n     *\n     * @param device Bluetooth headset\n     * @return true if SCO is connected, false otherwise or on error\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the current audio state of the Headset.\n     *\n     * @param device is the Bluetooth device for which the audio state is being queried\n     * @return the audio state of the device or an error code\n     * @throws NullPointerException if the device is null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setAudioRouteAllowed(boolean allowed)",
    "returnType" : "int",
    "comment" : "\n     * Sets whether audio routing is allowed. When set to {@code false}, the AG will not route any\n     * audio to the HF unless explicitly told to. This method should be used in cases where the SCO\n     * channel is shared between multiple profiles and must be delegated by a source knowledgeable.\n     *\n     * @param allowed {@code true} if the profile can reroute audio, {@code false} otherwise.\n     * @return {@link BluetoothStatusCodes#SUCCESS} upon successful setting, otherwise an error\n     *     code.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#SUCCESS" ]
  }, {
    "name" : "public int getAudioRouteAllowed()",
    "returnType" : "int",
    "comment" : "\n     * @return {@link BluetoothStatusCodes#ALLOWED} if audio routing is allowed, {@link\n     *     BluetoothStatusCodes#NOT_ALLOWED} if audio routing is not allowed, or an error code if an\n     *     error occurs. see {@link #setAudioRouteAllowed(boolean)}.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#NOT_ALLOWED", "android.bluetooth.BluetoothStatusCodes#ALLOWED", "#setAudioRouteAllowed(boolean)" ]
  }, {
    "name" : "public void setForceScoAudio(boolean forced)",
    "returnType" : "void",
    "comment" : "\n     * Force SCO audio to be opened regardless any other restrictions\n     *\n     * @param forced Whether or not SCO audio connection should be forced: True to force SCO audio\n     *     False to use SCO audio in normal manner\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int connectAudio()",
    "returnType" : "int",
    "comment" : "\n     * Initiates a connection of SCO audio to the current active HFP device. The active HFP device\n     * can be identified with {@link BluetoothAdapter#getActiveDevices(int)}.\n     *\n     * <p>If this function returns {@link BluetoothStatusCodes#SUCCESS}, the intent {@link\n     * #ACTION_AUDIO_STATE_CHANGED} will be broadcasted twice. First with {@link #EXTRA_STATE} set\n     * to {@link #STATE_AUDIO_CONNECTING}. This will be followed by a broadcast with {@link\n     * #EXTRA_STATE} set to either {@link #STATE_AUDIO_CONNECTED} if the audio connection is\n     * established or {@link #STATE_AUDIO_DISCONNECTED} if there was a failure in establishing the\n     * audio connection.\n     *\n     * @return whether the connection was successfully initiated or an error code on failure\n     * @hide\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_STATE", "#STATE_AUDIO_CONNECTED", "#STATE_AUDIO_CONNECTING", "android.bluetooth.BluetoothStatusCodes#SUCCESS", "android.bluetooth.BluetoothAdapter#getActiveDevices(int)", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "public int disconnectAudio()",
    "returnType" : "int",
    "comment" : "\n     * Initiates a disconnection of HFP SCO audio from actively connected devices. It also tears\n     * down voice recognition or virtual voice call, if any exists.\n     *\n     * <p>If this function returns {@link BluetoothStatusCodes#SUCCESS}, the intent {@link\n     * #ACTION_AUDIO_STATE_CHANGED} will be broadcasted with {@link #EXTRA_STATE} set to {@link\n     * #STATE_AUDIO_DISCONNECTED}.\n     *\n     * @return whether the disconnection was initiated successfully or an error code on failure\n     * @hide\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_STATE", "android.bluetooth.BluetoothStatusCodes#SUCCESS", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "public boolean startScoUsingVirtualVoiceCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Initiates a SCO channel connection as a virtual voice call to the current active device\n     * Active handsfree device will be notified of incoming call and connected call.\n     *\n     * <p>Users can listen to {@link #ACTION_AUDIO_STATE_CHANGED}. If this function returns true,\n     * this intent will be broadcasted with {@link #EXTRA_STATE} set to {@link\n     * #STATE_AUDIO_CONNECTING}.\n     *\n     * <p>{@link #EXTRA_STATE} will transition from {@link #STATE_AUDIO_CONNECTING} to {@link\n     * #STATE_AUDIO_CONNECTED} when audio connection is established and to {@link\n     * #STATE_AUDIO_DISCONNECTED} in case of failure to establish the audio connection.\n     *\n     * @return true if successful, false if one of the following case applies - SCO audio is not\n     *     idle (connecting or connected) - virtual call has already started - there is no active\n     *     device - a Telecom managed call is going on - binder is dead or Bluetooth is disabled or\n     *     other error\n     * @hide\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_STATE", "#STATE_AUDIO_CONNECTED", "#STATE_AUDIO_CONNECTING", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "public boolean stopScoUsingVirtualVoiceCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Terminates an ongoing SCO connection and the associated virtual call.\n     *\n     * <p>Users can listen to {@link #ACTION_AUDIO_STATE_CHANGED}. If this function returns true,\n     * this intent will be broadcasted with {@link #EXTRA_STATE} set to {@link\n     * #STATE_AUDIO_DISCONNECTED}.\n     *\n     * @return true if successful, false if one of the following case applies - virtual voice call\n     *     is not started or has ended - binder is dead or Bluetooth is disabled or other error\n     * @hide\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED", "#EXTRA_STATE", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "public void phoneStateChanged(int numActive, int numHeld, int callState, String number, int type, String name)",
    "returnType" : "void",
    "comment" : "\n     * Notify Headset of phone state change. This is a backdoor for phone app to call\n     * BluetoothHeadset since there is currently not a good way to get precise call state change\n     * outside of phone app.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clccResponse(int index, int direction, int status, int mode, boolean mpty, String number, int type)",
    "returnType" : "void",
    "comment" : "\n     * Send Headset of CLCC response\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendVendorSpecificResultCode(BluetoothDevice device, String command, String arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends a vendor-specific unsolicited result code to the headset.\n     *\n     * <p>The actual string to be sent is <code>command + \": \" + arg</code>. For example, if {@code\n     * command} is {@link #VENDOR_RESULT_CODE_COMMAND_ANDROID} and {@code arg} is {@code \"0\"}, the\n     * string <code>\"+ANDROID: 0\"</code> will be sent.\n     *\n     * <p>Currently only {@link #VENDOR_RESULT_CODE_COMMAND_ANDROID} is allowed as {@code command}.\n     *\n     * @param device Bluetooth headset.\n     * @param command A vendor-specific command.\n     * @param arg The argument that will be attached to the command.\n     * @return {@code false} if there is no headset connected, or if the command is not an allowed\n     *     vendor-specific unsolicited result code, or on error. {@code true} otherwise.\n     * @throws IllegalArgumentException if {@code command} is {@code null}.\n     ",
    "links" : [ "#VENDOR_RESULT_CODE_COMMAND_ANDROID" ]
  }, {
    "name" : "public boolean setActiveDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Select a connected device as active.\n     *\n     * <p>The active device selection is per profile. An active device's purpose is\n     * profile-specific. For example, in HFP and HSP profiles, it is the device used for phone call\n     * audio. If a remote device is not connected, it cannot be selected as active.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is not connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that the {@link\n     * #ACTION_ACTIVE_DEVICE_CHANGED} intent will be broadcasted with the active device.\n     *\n     * @param device Remote Bluetooth Device, could be null if phone call audio should not be\n     *     streamed to a headset\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#ACTION_ACTIVE_DEVICE_CHANGED" ]
  }, {
    "name" : "public BluetoothDevice getActiveDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the connected device that is active.\n     *\n     * @return the connected device that is active or null if no device is active.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInbandRingingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if in-band ringing is currently enabled. In-band ringing could be disabled during an\n     * active connection.\n     *\n     * @return true if in-band ringing is enabled, false if in-band ringing is disabled\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isDisabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothHeadset getService()", "public BluetoothAdapter getAdapter()", "protected void finalize() throws Throwable", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public boolean isNoiseReductionSupported(@NonNull BluetoothDevice device)", "public boolean isVoiceRecognitionSupported(@NonNull BluetoothDevice device)", "public boolean startVoiceRecognition(BluetoothDevice device)", "public boolean stopVoiceRecognition(BluetoothDevice device)", "public boolean isAudioConnected(BluetoothDevice device)", "public int getAudioState(@NonNull BluetoothDevice device)", "public int setAudioRouteAllowed(boolean allowed)", "public int getAudioRouteAllowed()", "public void setForceScoAudio(boolean forced)", "public int connectAudio()", "public int disconnectAudio()", "public boolean startScoUsingVirtualVoiceCall()", "public boolean stopScoUsingVirtualVoiceCall()", "public void phoneStateChanged(int numActive, int numHeld, int callState, String number, int type, String name)", "public void clccResponse(int index, int direction, int status, int mode, boolean mpty, String number, int type)", "public boolean sendVendorSpecificResultCode(BluetoothDevice device, String command, String arg)", "public boolean setActiveDevice(@Nullable BluetoothDevice device)", "public BluetoothDevice getActiveDevice()", "public boolean isInbandRingingEnabled()", "private boolean isEnabled()", "private boolean isDisabled()", "private static boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_AUDIO_STATE_CHANGED", "ACTION_ACTIVE_DEVICE_CHANGED", "ACTION_VENDOR_SPECIFIC_HEADSET_EVENT", "EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD", "EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE", "AT_CMD_TYPE_READ", "AT_CMD_TYPE_TEST", "AT_CMD_TYPE_SET", "AT_CMD_TYPE_BASIC", "AT_CMD_TYPE_ACTION", "EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS", "VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY", "VENDOR_RESULT_CODE_COMMAND_ANDROID", "VENDOR_SPECIFIC_HEADSET_EVENT_XAPL", "VENDOR_SPECIFIC_HEADSET_EVENT_IPHONEACCEV", "VENDOR_SPECIFIC_HEADSET_EVENT_IPHONEACCEV_BATTERY_LEVEL", "VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT", "VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT_BATTERY_LEVEL", "VENDOR_SPECIFIC_HEADSET_EVENT_CGMI", "VENDOR_SPECIFIC_HEADSET_EVENT_CGMM", "VENDOR_SPECIFIC_HEADSET_EVENT_CGMR", "VENDOR_SPECIFIC_HEADSET_EVENT_CGSN", "STATE_AUDIO_DISCONNECTED", "STATE_AUDIO_CONNECTING", "STATE_AUDIO_CONNECTED", "ACTION_HF_INDICATORS_VALUE_CHANGED", "EXTRA_HF_INDICATORS_IND_ID", "EXTRA_HF_INDICATORS_IND_VALUE", "mAdapter", "mAttributionSource", "mService" ]
}