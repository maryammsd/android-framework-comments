{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/keystore/KeyStoreCryptoOperationChunkedStreamer.java",
  "packageName" : "android.security.keystore",
  "className" : "KeyStoreCryptoOperationChunkedStreamer",
  "comment" : "\n * Helper for streaming a crypto operation's input and output via {@link KeyStore} service's\n * {@code update} and {@code finish} operations.\n *\n * <p>The helper abstracts away issues that need to be solved in most code that uses KeyStore's\n * update and finish operations. Firstly, KeyStore's update operation can consume only a limited\n * amount of data in one go because the operations are marshalled via Binder. Secondly, the update\n * operation may consume less data than provided, in which case the caller has to buffer the\n * remainder for next time. Thirdly, when the input is smaller than a threshold, skipping update\n * and passing input data directly to final improves performance. This threshold is configurable;\n * using a threshold <= 1 causes the helper act eagerly, which may be required for some types of\n * operations (e.g. ciphers).\n *\n * <p>The helper exposes {@link #update(byte[], int, int) update} and\n * {@link #doFinal(byte[], int, int, byte[], byte[]) doFinal} operations which can be used to\n * conveniently implement various JCA crypto primitives.\n *\n * <p>Bidirectional chunked streaming of data via a KeyStore crypto operation is abstracted away as\n * a {@link Stream} to avoid having this class deal with operation tokens and occasional additional\n * parameters to {@code update} and {@code final} operations.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "DEFAULT_CHUNK_SIZE_MAX",
    "type" : "int",
    "comment" : " Thus, it's safer to use a much smaller upper bound.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CHUNK_SIZE_THRESHOLD",
    "type" : "int",
    "comment" : " Setting this threshold <= 1 will effectivley disable buffering between updates.",
    "links" : [ ]
  }, {
    "name" : "mKeyStoreStream",
    "type" : "Stream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChunkSizeMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChunkSizeThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChunk",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChunkLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConsumedInputSizeBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProducedOutputSizeBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public byte[] update(byte[] input, int inputOffset, int inputLength) throws KeyStoreException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] doFinal(byte[] input, int inputOffset, int inputLength, byte[] signature, byte[] additionalEntropy) throws KeyStoreException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getConsumedInputSizeBytes()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getProducedOutputSizeBytes()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_CHUNK_SIZE_MAX", "DEFAULT_CHUNK_SIZE_THRESHOLD", "mKeyStoreStream", "mChunkSizeMax", "mChunkSizeThreshold", "mChunk", "mChunkLength", "mConsumedInputSizeBytes", "mProducedOutputSizeBytes" ],
  "methodNames" : [ "public byte[] update(byte[] input, int inputOffset, int inputLength) throws KeyStoreException", "public byte[] doFinal(byte[] input, int inputOffset, int inputLength, byte[] signature, byte[] additionalEntropy) throws KeyStoreException", "public long getConsumedInputSizeBytes()", "public long getProducedOutputSizeBytes()" ]
}