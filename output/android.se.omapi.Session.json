{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/se/omapi/Session.java",
  "packageName" : "android.se.omapi",
  "className" : "Session",
  "comment" : "\n * Instances of this class represent a connection session to one of the Secure\n * Elements available on the device. These objects can be used to get a\n * communication channel with an Applet in the Secure Element.\n * This channel can be the basic channel or a logical channel.\n *\n * @see <a href=\"http://simalliance.org\">SIMalliance Open Mobile API  v3.0</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "SEService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReader",
    "type" : "Reader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "ISecureElementSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Reader getReader()",
    "returnType" : "Reader",
    "comment" : "\n     * Get the reader that provides this session.\n     *\n     * @return The Reader object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getATR()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the Answer to Reset of this Secure Element. <br>\n     * The returned byte array can be null if the ATR for this Secure Element is\n     * not available.\n     *\n     * @throws IllegalStateException if there was an error connecting to SE or\n     *                               if the service was not connected.\n     * @return the ATR as a byte array or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection with the Secure Element. This will close any\n     * channels opened by this application with this Secure Element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if this session is closed.\n     *\n     * @return <code>true</code> if the session is closed, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeChannels()",
    "returnType" : "void",
    "comment" : "\n     * Close any channel opened on this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Channel openBasicChannel(@Nullable byte[] aid, @Nullable byte p2) throws IOException",
    "returnType" : "Channel",
    "comment" : "\n     * Get an access to the basic channel, as defined in the ISO/IEC 7816-4 specification (the\n     * one that has number 0). The obtained object is an instance of the Channel class.\n     * If the AID is null, it means no Applet is to be selected on this channel and the default\n     * Applet is used. If the AID is defined then the corresponding Applet is selected.\n     * Once this channel has been opened by a device application, it is considered as \"locked\"\n     * by this device application, and other calls to this method will return null, until the\n     * channel is closed. Some Secure Elements (like the UICC) might always keep the basic channel\n     * locked (i.e. return null to applications), to prevent access to the basic channel, while\n     * some other might return a channel object implementing some kind of filtering on the\n     * commands, restricting the set of accepted command to a smaller set.\n     * It is recommended for the UICC to reject the opening of the basic channel to a specific\n     * applet, by always answering null to such a request.\n     * For other Secure Elements, the recommendation is to accept opening the basic channel\n     * on the default applet until another applet is selected on the basic channel. As there is no\n     * other way than a reset to select again the default applet, the implementation of the\n     * transport API should guarantee that the openBasicChannel(null) command will return\n     * null until a reset occurs.\n     * With previous release (V2.05) it was not possible to set P2 value, this value was always\n     * set to '00'.Except for specific needs it is recommended to keep P2 to '00'. It is\n     * recommended that the device allows all values for P2, however only the following values\n     * are mandatory: '00', '04', '08', '0C'(as defined in [2])\n     * The implementation of the underlying SELECT command within this method shall be\n     * based on ISO 7816-4 with following options:\n     * <ul>\n     * <li>CLA = '00'</li>\n     * <li>INS = 'A4'</li>\n     * <li>P1 = '04' (Select by DF name/application identifier)</li>\n     * </ul>\n     *\n     * The select response data can be retrieved with byte[] getSelectResponse().\n     * The API shall handle received status word as follow. If the status word indicates that the\n     * Secure Element was able to open a channel (e.g. status word '90 00' or status words\n     * referencing a warning in ISO-7816-4: '62 XX' or '63 XX') the API shall keep the\n     * channel opened and the next getSelectResponse() shall return the received status\n     * word.\n     * Other received status codes indicating that the Secure Element was able not to open a\n     * channel shall be considered as an error and the corresponding channel shall not be\n     * opened.\n     * The function without P2 as parameter is provided for backwards compatibility and will\n     * fall back to a select command with P2='00'.\n     *\n     * @param aid the AID of the Applet to be selected on this channel, as a\n     *            byte array, or null if no Applet is to be selected.\n     * @param p2 the P2 parameter of the SELECT APDU executed on this channel.\n     * @throws IOException if there is a communication problem to the reader or\n     *             the Secure Element.\n     * @throws IllegalStateException if the Secure Element session is used after\n     *             being closed.\n     * @throws IllegalArgumentException if the aid's length is not within 5 to\n     *             16 (inclusive).\n     * @throws SecurityException if the calling application cannot be granted\n     *             access to this AID or the default Applet on this\n     *             session.\n     * @throws NoSuchElementException if the AID on the Secure Element is not available or cannot be\n     *             selected.\n     * @throws UnsupportedOperationException if the given P2 parameter is not\n     *             supported by the device\n     * @return an instance of Channel if available or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Channel openBasicChannel(@Nullable byte[] aid) throws IOException",
    "returnType" : "Channel",
    "comment" : "\n     * This method is provided to ease the development of mobile application and for compliancy\n     * with existing applications.\n     * This method is equivalent to openBasicChannel(aid, P2=0x00)\n     *\n     * @param aid the AID of the Applet to be selected on this channel, as a\n     *            byte array, or null if no Applet is to be selected.\n     * @throws IOException if there is a communication problem to the reader or\n     *             the Secure Element.\n     * @throws IllegalStateException if the Secure Element session is used after\n     *             being closed.\n     * @throws IllegalArgumentException if the aid's length is not within 5 to\n     *             16 (inclusive).\n     * @throws SecurityException if the calling application cannot be granted\n     *             access to this AID or the default Applet on this\n     *             session.\n     * @throws NoSuchElementException if the AID on the Secure Element is not available or cannot be\n     *             selected.\n     * @throws UnsupportedOperationException if the given P2 parameter is not\n     *             supported by the device\n     * @return an instance of Channel if available or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Channel openLogicalChannel(@Nullable byte[] aid, @Nullable byte p2) throws IOException",
    "returnType" : "Channel",
    "comment" : "\n     * Open a logical channel with the Secure Element, selecting the Applet represented by\n     * the given AID. If the AID is null, which means no Applet is to be selected on this\n     * channel, the default Applet is used. It's up to the Secure Element to choose which\n     * logical channel will be used.\n     * With previous release (V2.05) it was not possible to set P2 value, this value was always\n     * set to '00'.Except for specific needs it is recommended to keep P2 to '00'. It is\n     * recommended that the device allows all values for P2, however only the following values\n     * are mandatory: '00', '04', '08', '0C'(as defined in [2])\n     * The implementation of the underlying SELECT command within this method shall be\n     * based on ISO 7816-4 with following options:\n     *\n     * <ul>\n     * <li>CLA = '01' to '03', '40 to 4F'</li>\n     * <li>INS = 'A4'</li>\n     * <li>P1 = '04' (Select by DF name/application identifier)</li>\n     * </ul>\n     *\n     * The select response data can be retrieved with byte[] getSelectResponse().\n     * The API shall handle received status word as follow. If the status word indicates that the\n     * Secure Element was able to open a channel (e.g. status word '90 00' or status words\n     * referencing a warning in ISO-7816-4: '62 XX' or '63 XX') the API shall keep the\n     * channel opened and the next getSelectResponse() shall return the received status\n     * word.\n     * Other received status codes indicating that the Secure Element was able not to open a\n     * channel shall be considered as an error and the corresponding channel shall not be\n     * opened.\n     * In case of UICC it is recommended for the API to reject the opening of the logical\n     * channel without a specific AID, by always answering null to such a request.\n     * The function without P2 as parameter is provided for backwards compatibility and will\n     * fall back to a select command with P2=00.\n     *\n     * @param aid the AID of the Applet to be selected on this channel, as a\n     *            byte array.\n     * @param p2 the P2 parameter of the SELECT APDU executed on this channel.\n     * @throws IOException if there is a communication problem to the reader or\n     *             the Secure Element.\n     * @throws IllegalStateException if the Secure Element is used after being\n     *             closed.\n     * @throws IllegalArgumentException if the aid's length is not within 5 to\n     *             16 (inclusive).\n     * @throws SecurityException if the calling application cannot be granted\n     *             access to this AID or the default Applet on this\n     *             session.\n     * @throws NoSuchElementException if the AID on the Secure Element is not\n     *             available or cannot be selected or a logical channel is already\n     *             open to a non-multiselectable Applet.\n     * @throws UnsupportedOperationException if the given P2 parameter is not\n     *             supported by the device.\n     * @return an instance of Channel. Null if the Secure Element is unable to\n     *         provide a new logical channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Channel openLogicalChannel(@Nullable byte[] aid) throws IOException",
    "returnType" : "Channel",
    "comment" : "\n     * This method is provided to ease the development of mobile application and for compliancy\n     * with existing applications.\n     * This method is equivalent to openLogicalChannel(aid, P2=0x00)\n     *\n     * @param aid the AID of the Applet to be selected on this channel, as a\n     *            byte array.\n     * @throws IOException if there is a communication problem to the reader or\n     *             the Secure Element.\n     * @throws IllegalStateException if the Secure Element is used after being\n     *             closed.\n     * @throws IllegalArgumentException if the aid's length is not within 5 to\n     *             16 (inclusive).\n     * @throws SecurityException if the calling application cannot be granted\n     *             access to this AID or the default Applet on this\n     *             session.\n     * @throws NoSuchElementException if the AID on the Secure Element is not\n     *             available or cannot be selected or a logical channel is already\n     *             open to a non-multiselectable Applet.\n     * @throws UnsupportedOperationException if the given P2 parameter is not\n     *             supported by the device.\n     * @return an instance of Channel. Null if the Secure Element is unable to\n     *         provide a new logical channel.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Reader getReader()", "public byte[] getATR()", "public void close()", "public boolean isClosed()", "public void closeChannels()", "public Channel openBasicChannel(@Nullable byte[] aid, @Nullable byte p2) throws IOException", "public Channel openBasicChannel(@Nullable byte[] aid) throws IOException", "public Channel openLogicalChannel(@Nullable byte[] aid, @Nullable byte p2) throws IOException", "public Channel openLogicalChannel(@Nullable byte[] aid) throws IOException" ],
  "variableNames" : [ "mLock", "mService", "mReader", "mSession", "TAG" ]
}