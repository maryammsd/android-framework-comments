{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/ComponentInfo.java",
  "packageName" : "android.content.pm",
  "className" : "ComponentInfo",
  "comment" : "\n * Base class containing information common to all application components\n * ({@link ActivityInfo}, {@link ServiceInfo}).  This class is not intended\n * to be used by itself; it is simply here to share common definitions\n * between all application components.  As such, it does not itself\n * implement Parcelable, but does provide convenience methods to assist\n * in the implementation of Parcelable in subclasses.\n ",
  "variables" : [ {
    "name" : "applicationInfo",
    "type" : "ApplicationInfo",
    "comment" : "\n     * Global information about the application/package this component is a\n     * part of.\n     ",
    "links" : [ ]
  }, {
    "name" : "processName",
    "type" : "String",
    "comment" : "\n     * The name of the process this component should run in.\n     * From the \"android:process\" attribute or, if not set, the same\n     * as <var>applicationInfo.processName</var>.\n     ",
    "links" : [ ]
  }, {
    "name" : "splitName",
    "type" : "String",
    "comment" : "\n     * The name of the split in which this component is declared.\n     * Null if the component was declared in the base APK.\n     ",
    "links" : [ ]
  }, {
    "name" : "descriptionRes",
    "type" : "int",
    "comment" : "\n     * A string resource identifier (in the package's resources) containing\n     * a user-readable description of the component.  From the \"description\"\n     * attribute or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "enabled",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether or not this component may be instantiated.  Note that this value can be\n     * overridden by the one in its parent {@link ApplicationInfo}.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "exported",
    "type" : "boolean",
    "comment" : "\n     * Set to true if this component is available for use by other applications.\n     * Comes from {@link android.R.attr#exported android:exported} of the\n     * &lt;activity&gt;, &lt;receiver&gt;, &lt;service&gt;, or\n     * &lt;provider&gt; tag.\n     ",
    "links" : [ "android.R.attr#exported" ]
  }, {
    "name" : "directBootAware",
    "type" : "boolean",
    "comment" : "\n     * Indicates if this component is aware of direct boot lifecycle, and can be\n     * safely run before the user has entered their credentials (such as a lock\n     * pattern or PIN).\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence loadUnsafeLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this component and its enclosing application are enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getIconResource()",
    "returnType" : "int",
    "comment" : "\n     * Return the icon resource identifier to use for this component.  If\n     * the component defines an icon, that is used; else, the application\n     * icon is used.\n     * \n     * @return The icon associated with this component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getLogoResource()",
    "returnType" : "int",
    "comment" : "\n     * Return the logo resource identifier to use for this component.  If\n     * the component defines a logo, that is used; else, the application\n     * logo is used.\n     *\n     * @return The logo associated with this component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getBannerResource()",
    "returnType" : "int",
    "comment" : "\n     * Return the banner resource identifier to use for this component. If the\n     * component defines a banner, that is used; else, the application banner is\n     * used.\n     *\n     * @return The banner associated with this component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponentName()",
    "returnType" : "ComponentName",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "protected void dumpFront(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dumpBack(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dumpBack(Printer pw, String prefix, int dumpFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadDefaultIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Drawable loadDefaultBanner(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Drawable loadDefaultLogo(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "applicationInfo", "processName", "splitName", "descriptionRes", "enabled", "exported", "directBootAware" ],
  "methodNames" : [ "public CharSequence loadUnsafeLabel(PackageManager pm)", "public boolean isEnabled()", "public final int getIconResource()", "public final int getLogoResource()", "public final int getBannerResource()", "public ComponentName getComponentName()", "protected void dumpFront(Printer pw, String prefix)", "protected void dumpBack(Printer pw, String prefix)", " void dumpBack(Printer pw, String prefix, int dumpFlags)", "public void writeToParcel(Parcel dest, int parcelableFlags)", "public Drawable loadDefaultIcon(PackageManager pm)", "protected Drawable loadDefaultBanner(PackageManager pm)", "protected Drawable loadDefaultLogo(PackageManager pm)", "protected ApplicationInfo getApplicationInfo()" ]
}