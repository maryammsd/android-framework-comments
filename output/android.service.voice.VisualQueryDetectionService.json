{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/VisualQueryDetectionService.java",
  "packageName" : "android.service.voice",
  "className" : "VisualQueryDetectionService",
  "comment" : "\n * Implemented by an application that wants to offer query detection with visual signals.\n *\n * This service leverages visual signals such as camera frames to detect and stream queries from the\n * device microphone to the {@link VoiceInteractionService}, without the support of hotword. The\n * system will bind an application's {@link VoiceInteractionService} first. When\n * {@link VoiceInteractionService#createVisualQueryDetector(PersistableBundle, SharedMemory,\n * Executor, VisualQueryDetector.Callback)} is called, the system will bind the application's\n * {@link VisualQueryDetectionService}. When requested from {@link VoiceInteractionService}, the\n * system calls into the {@link VisualQueryDetectionService#onStartDetection()} to enable\n * detection. This method MUST be implemented to support visual query detection service.\n *\n * Note: Methods in this class may be called concurrently.\n *\n * @hide\n ",
  "links" : [ "android.service.voice.VoiceInteractionService#createVisualQueryDetector(PersistableBundle", "android.service.voice.VoiceInteractionService", "android.service.voice.VisualQueryDetectionService#onStartDetection()", "android.service.voice.VisualQueryDetectionService" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATE_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_VISUAL_QUERY_DETECTION_SERVICE} permission\n     * so that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_VISUAL_QUERY_DETECTION_SERVICE" ]
  }, {
    "name" : "KEY_INITIALIZATION_STATUS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mRemoteCallback",
    "type" : "IDetectorSessionVisualQueryDetectionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureManager",
    "type" : "ContentCaptureManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIRecognitionServiceManager",
    "type" : "IRecognitionServiceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetectorSessionStorageService",
    "type" : "IDetectorSessionStorageService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ISandboxedDetectionService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object getSystemService(@ServiceName @NonNull String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onUpdateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @DurationMillisLong long callbackTimeoutMillis, @Nullable IntConsumer statusCallback)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onUpdateStateInternal(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, IRemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStartDetection()",
    "returnType" : "void",
    "comment" : "\n     * This is called after the service is set up and the client should open the camera and the\n     * microphone to start recognition. When the {@link VoiceInteractionService} requests that this\n     * service {@link HotwordDetector#startRecognition()} start recognition on audio coming directly\n     * from the device microphone.\n     * <p>\n     * Signal senders that return attention and query results are also expected to be called in this\n     * method according to the detection outcomes.\n     * <p>\n     * On successful user attention, developers should call\n     * {@link VisualQueryDetectionService#gainedAttention()} to enable the streaming of the query.\n     * <p>\n     * On user attention is lost, developers should call\n     * {@link VisualQueryDetectionService#lostAttention()} to disable the streaming of the query.\n     * <p>\n     * On query is detected and ready to stream, developers should call\n     * {@link VisualQueryDetectionService#streamQuery(String)} to return detected query to the\n     * {@link VisualQueryDetector}.\n     * <p>\n     * On streamed query should be rejected, clients should call\n     * {@link VisualQueryDetectionService#rejectQuery()} to abandon query streamed to the\n     * {@link VisualQueryDetector}.\n     * <p>\n     * On streamed query is finished, clients should call\n     * {@link VisualQueryDetectionService#finishQuery()} to complete query streamed to\n     * {@link VisualQueryDetector}.\n     * <p>\n     * Before a call for {@link VisualQueryDetectionService#streamQuery(String)} is triggered,\n     * {@link VisualQueryDetectionService#gainedAttention()} MUST be called to enable the streaming\n     * of query. A query streaming is also expected to be finished by calling either\n     * {@link VisualQueryDetectionService#finishQuery()} or\n     * {@link VisualQueryDetectionService#rejectQuery()} before a new query should start streaming.\n     * When the service enters the state where query streaming should be disabled,\n     * {@link VisualQueryDetectionService#lostAttention()} MUST be called to block unnecessary\n     * streaming.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.HotwordDetector#startRecognition()", "android.service.voice.VisualQueryDetectionService#streamQuery(String)", "android.service.voice.VisualQueryDetectionService#rejectQuery()", "android.service.voice.VisualQueryDetectionService#finishQuery()", "android.service.voice.VisualQueryDetectionService#gainedAttention()", "android.service.voice.VisualQueryDetector", "android.service.voice.VisualQueryDetectionService#lostAttention()" ]
  }, {
    "name" : "public void onStopDetection()",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link VoiceInteractionService}\n     * {@link HotwordDetector#stopRecognition()} requests that recognition be stopped.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.HotwordDetector#stopRecognition()" ]
  }, {
    "name" : "public final void gainedAttention()",
    "returnType" : "void",
    "comment" : "\n     * Informs the system that the attention is gained for the interaction intention\n     * {@link VisualQueryAttentionResult#INTERACTION_INTENTION_AUDIO_VISUAL} with\n     * engagement level equals to the maximum value possible so queries can be streamed.\n     *\n     * Usage of this method is not recommended, please use\n     * {@link VisualQueryDetectionService#gainedAttention(VisualQueryAttentionResult)} instead.\n     *\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService#gainedAttention(VisualQueryAttentionResult)", "android.service.voice.VisualQueryAttentionResult#INTERACTION_INTENTION_AUDIO_VISUAL" ]
  }, {
    "name" : "public final void gainedAttention(@NonNull VisualQueryAttentionResult attentionResult)",
    "returnType" : "void",
    "comment" : "\n     * Puts the device into an attention state that will listen to certain interaction intention\n     * based on the {@link VisualQueryAttentionResult} provided.\n     *\n     * Different type and levels of engagement will lead to corresponding UI icons showing. See\n     * {@link VisualQueryAttentionResult#setInteractionIntention(int)} for details.\n     *\n     * Exactly one {@link VisualQueryAttentionResult} can be set at a time with this method at\n     * the moment. Multiple attention results will be supported to set the device into with this\n     * API before {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM} is finalized.\n     *\n     * Latest call will override the {@link VisualQueryAttentionResult} of previous calls. Queries\n     * streamed are independent of the attention interactionIntention.\n     *\n     * @param attentionResult Attention result of type {@link VisualQueryAttentionResult}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.service.voice.VisualQueryAttentionResult", "android.service.voice.VisualQueryAttentionResult#setInteractionIntention(int)" ]
  }, {
    "name" : "public final void lostAttention()",
    "returnType" : "void",
    "comment" : "\n     * Informs the system that all attention has lost to stop streaming.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void lostAttention(@VisualQueryAttentionResult.InteractionIntention int interactionIntention)",
    "returnType" : "void",
    "comment" : "\n     * This will cancel the corresponding attention if the provided interaction intention is the\n     * same as which of the object called with\n     * {@link VisualQueryDetectionService#gainedAttention(VisualQueryAttentionResult)}.\n     *\n     * @param interactionIntention Interaction intention, one of\n     *        {@link VisualQueryAttentionResult#InteractionIntention}.\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService#gainedAttention(VisualQueryAttentionResult)", "android.service.voice.VisualQueryAttentionResult#InteractionIntention" ]
  }, {
    "name" : "public final void streamQuery(@NonNull String partialQuery) throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Informs the {@link VisualQueryDetector} with the text content being captured about the\n     * query from the audio source. {@code partialQuery} is provided to the\n     * {@link VisualQueryDetector}. This method is expected to be only triggered if\n     * {@link VisualQueryDetectionService#gainedAttention()} is called to put the service into the\n     * attention gained state.\n     *\n     * Usage of this method is not recommended, please use\n     * {@link VisualQueryDetectionService#streamQuery(VisualQueryDetectedResult)} instead.\n     *\n     * @param partialQuery Partially detected query in string.\n     * @throws IllegalStateException if method called without attention gained.\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService#gainedAttention()", "android.service.voice.VisualQueryDetector", "android.service.voice.VisualQueryDetectionService#streamQuery(VisualQueryDetectedResult)" ]
  }, {
    "name" : "public final void streamQuery(@NonNull VisualQueryDetectedResult partialResult)",
    "returnType" : "void",
    "comment" : "\n     * Informs the {@link VisualQueryDetector} with the text content being captured about the\n     * query from the audio source. {@code partialResult} is provided to the\n     * {@link VisualQueryDetector}. This method is expected to be only triggered if\n     * {@link VisualQueryDetectionService#gainedAttention()} is called to put the service into\n     * the attention gained state.\n     *\n     * @param partialResult Partially detected result in the format of\n     * {@link VisualQueryDetectedResult}.\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectedResult", "android.service.voice.VisualQueryDetectionService#gainedAttention()", "android.service.voice.VisualQueryDetector" ]
  }, {
    "name" : "public final void rejectQuery() throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Informs the {@link VisualQueryDetector} to abandon the streamed partial query that has\n     * been sent to {@link VisualQueryDetector}.This method is expected to be only triggered if\n     * {@link VisualQueryDetectionService#streamQuery(String)} is called to put the service into\n     * the query streaming state.\n     *\n     * @throws IllegalStateException if method called without query streamed.\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService#streamQuery(String)", "android.service.voice.VisualQueryDetector" ]
  }, {
    "name" : "public final void finishQuery() throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Informs {@link VisualQueryDetector} with the metadata to complete the streamed partial\n     * query that has been sent to {@link VisualQueryDetector}. This method is expected to be\n     * only triggered if {@link VisualQueryDetectionService#streamQuery(String)} is called to put\n     * the service into the query streaming state.\n     *\n     * @throws IllegalStateException if method called without query streamed.\n     ",
    "links" : [ "android.service.voice.VisualQueryDetectionService#streamQuery(String)", "android.service.voice.VisualQueryDetector" ]
  }, {
    "name" : "public FileInputStream openFileInput(@NonNull String filename) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "\n     * Overrides {@link Context#openFileInput} to read files with the given file names under the\n     * internal app storage of the {@link VoiceInteractionService}, i.e., the input file path would\n     * be added with {@link Context#getFilesDir()} as prefix.\n     *\n     * @param filename Relative path of a file under {@link Context#getFilesDir()}.\n     * @throws FileNotFoundException if the file does not exist or cannot be open.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.content.Context#openFileInput", "android.content.Context#getFilesDir()" ]
  } ],
  "methodNames" : [ "public Object getSystemService(@ServiceName @NonNull String name)", "public void onUpdateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @DurationMillisLong long callbackTimeoutMillis, @Nullable IntConsumer statusCallback)", "public IBinder onBind(@NonNull Intent intent)", "private void onUpdateStateInternal(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, IRemoteCallback callback)", "public void onStartDetection()", "public void onStopDetection()", "public final void gainedAttention()", "public final void gainedAttention(@NonNull VisualQueryAttentionResult attentionResult)", "public final void lostAttention()", "public final void lostAttention(@VisualQueryAttentionResult.InteractionIntention int interactionIntention)", "public final void streamQuery(@NonNull String partialQuery) throws IllegalStateException", "public final void streamQuery(@NonNull VisualQueryDetectedResult partialResult)", "public final void rejectQuery() throws IllegalStateException", "public final void finishQuery() throws IllegalStateException", "public FileInputStream openFileInput(@NonNull String filename) throws FileNotFoundException" ],
  "variableNames" : [ "TAG", "UPDATE_TIMEOUT_MILLIS", "SERVICE_INTERFACE", "KEY_INITIALIZATION_STATUS", "mRemoteCallback", "mContentCaptureManager", "mIRecognitionServiceManager", "mDetectorSessionStorageService", "mInterface" ]
}