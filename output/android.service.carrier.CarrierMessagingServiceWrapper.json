{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/carrier/CarrierMessagingServiceWrapper.java",
  "packageName" : "android.service.carrier",
  "className" : "CarrierMessagingServiceWrapper",
  "comment" : "\n * Provides basic structure for platform to connect to the carrier messaging service.\n * <p>\n * <code>\n * CarrierMessagingServiceWrapper carrierMessagingServiceWrapper =\n *     new CarrierMessagingServiceWrapperImpl();\n * if (carrierMessagingServiceWrapper.bindToCarrierMessagingService(context, carrierPackageName)) {\n *   // wait for onServiceReady callback\n * } else {\n *   // Unable to bind: handle error.\n * }\n * </code>\n * <p> Upon completion {@link #disconnect} should be called to unbind the\n * CarrierMessagingService.\n * @hide\n ",
  "links" : [ "#disconnect" ],
  "variables" : [ {
    "name" : "mCarrierMessagingServiceConnection",
    "type" : "CarrierMessagingServiceConnection",
    "comment" : " prior to calling disposeConnection so that mCarrierMessagingServiceConnection is initialized.",
    "links" : [ ]
  }, {
    "name" : "mICarrierMessagingService",
    "type" : "ICarrierMessagingService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnServiceReadyCallback",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceReadyCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean bindToCarrierMessagingService(@NonNull Context context, @NonNull String carrierPackageName, @NonNull @CallbackExecutor Executor executor, @NonNull Runnable onServiceReadyCallback)",
    "returnType" : "boolean",
    "comment" : "\n     * Binds to the carrier messaging service under package {@code carrierPackageName}. This method\n     * should be called exactly once.\n     *\n     * @param context the context\n     * @param carrierPackageName the carrier package name\n     * @param executor the executor to run the callback.\n     * @param onServiceReadyCallback the callback when service becomes ready.\n     * @return true upon successfully binding to a carrier messaging service, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Unbinds the carrier messaging service. This method should be called exactly once.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onServiceReady(ICarrierMessagingService carrierMessagingService)",
    "returnType" : "void",
    "comment" : "\n     * Called when connection with service is established.\n     *\n     * @param carrierMessagingService the carrier messaing service interface\n     ",
    "links" : [ ]
  }, {
    "name" : "public void receiveSms(@NonNull MessagePdu pdu, @NonNull @SmsMessage.Format String format, int destPort, int subId, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request the CarrierMessagingService to process an incoming SMS text or data message.\n     * The service will call callback.onFilterComplete with the filtering result.\n     *\n     * @param pdu the PDUs of the message\n     * @param format the format of the PDUs, typically \"3gpp\" or \"3gpp2\".\n     *               See {@link SmsMessage#FORMAT_3GPP} and {@link SmsMessage#FORMAT_3GPP2} for\n     *               more details.\n     * @param destPort the destination port of a data SMS. It will be -1 for text SMS\n     * @param subId SMS subscription ID of the SIM\n     * @param executor the executor to run the callback.\n     * @param callback the callback to notify upon completion\n     * @hide\n     ",
    "links" : [ "android.telephony.SmsMessage#FORMAT_3GPP2", "android.telephony.SmsMessage#FORMAT_3GPP" ]
  }, {
    "name" : "public void sendTextSms(@NonNull String text, int subId, @NonNull String destAddress, @CarrierMessagingService.SendRequest int sendSmsFlag, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request sending a new text SMS from the device.\n     * The service will call {@link ICarrierMessagingCallback#onSendSmsComplete} with the send\n     * status.\n     *\n     * @param text the text to send\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param sendSmsFlag Flag for sending SMS. Acceptable values are 0 and\n     *        {@link CarrierMessagingService#SEND_FLAG_REQUEST_DELIVERY_STATUS}.\n     * @param executor the executor to run the callback.\n     * @param callback the callback to notify upon completion\n     * @hide\n     ",
    "links" : [ "android.service.carrier.CarrierMessagingService#SEND_FLAG_REQUEST_DELIVERY_STATUS", "#onSendSmsComplete" ]
  }, {
    "name" : "public void sendDataSms(@NonNull byte[] data, int subId, @NonNull String destAddress, int destPort, @CarrierMessagingService.SendRequest int sendSmsFlag, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request sending a new data SMS from the device.\n     * The service will call {@link ICarrierMessagingCallback#onSendSmsComplete} with the send\n     * status.\n     *\n     * @param data the data to send\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param destPort port number of the recipient of the message\n     * @param sendSmsFlag Flag for sending SMS. Acceptable values are 0 and\n     *        {@link CarrierMessagingService#SEND_FLAG_REQUEST_DELIVERY_STATUS}.\n     * @param executor the executor to run the callback.\n     * @param callback the callback to notify upon completion\n     * @hide\n     ",
    "links" : [ "android.service.carrier.CarrierMessagingService#SEND_FLAG_REQUEST_DELIVERY_STATUS", "#onSendSmsComplete" ]
  }, {
    "name" : "public void sendMultipartTextSms(@NonNull List<String> parts, int subId, @NonNull String destAddress, @CarrierMessagingService.SendRequest int sendSmsFlag, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request sending a new multi-part text SMS from the device.\n     * The service will call {@link ICarrierMessagingCallback#onSendMultipartSmsComplete}\n     * with the send status.\n     *\n     * @param parts the parts of the multi-part text SMS to send\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param sendSmsFlag Flag for sending SMS. Acceptable values are 0 and\n     *        {@link CarrierMessagingService#SEND_FLAG_REQUEST_DELIVERY_STATUS}.\n     * @param executor the executor to run the callback.\n     * @param callback the callback to notify upon completion\n     * @hide\n     ",
    "links" : [ "android.service.carrier.CarrierMessagingService#SEND_FLAG_REQUEST_DELIVERY_STATUS", "#onSendMultipartSmsComplete" ]
  }, {
    "name" : "public void sendMms(@NonNull Uri pduUri, int subId, @NonNull Uri location, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request sending a new MMS PDU from the device.\n     * The service will call {@link ICarrierMessagingCallback#onSendMmsComplete} with the send\n     * status.\n     *\n     * @param pduUri the content provider URI of the PDU to send\n     * @param subId SMS subscription ID of the SIM\n     * @param location the optional URI to send this MMS PDU. If this is {code null},\n     *        the PDU should be sent to the default MMSC URL.\n     * @param executor the executor to run the callback.\n     * @param callback the callback to notify upon completion\n     * @hide\n     ",
    "links" : [ "#onSendMmsComplete" ]
  }, {
    "name" : "public void downloadMms(@NonNull Uri pduUri, int subId, @NonNull Uri location, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request downloading a new MMS.\n     * The service will call {@link ICarrierMessagingCallback#onDownloadMmsComplete} with the\n     * download status.\n     *\n     * @param pduUri the content provider URI of the PDU to be downloaded.\n     * @param subId SMS subscription ID of the SIM\n     * @param location the URI of the message to be downloaded.\n     * @param executor the executor to run the callback.\n     * @param callback the callback to notify upon completion\n     * @hide\n     ",
    "links" : [ "#onDownloadMmsComplete" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean bindToCarrierMessagingService(@NonNull Context context, @NonNull String carrierPackageName, @NonNull @CallbackExecutor Executor executor, @NonNull Runnable onServiceReadyCallback)", "public void disconnect()", "private void onServiceReady(ICarrierMessagingService carrierMessagingService)", "public void receiveSms(@NonNull MessagePdu pdu, @NonNull @SmsMessage.Format String format, int destPort, int subId, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)", "public void sendTextSms(@NonNull String text, int subId, @NonNull String destAddress, @CarrierMessagingService.SendRequest int sendSmsFlag, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)", "public void sendDataSms(@NonNull byte[] data, int subId, @NonNull String destAddress, int destPort, @CarrierMessagingService.SendRequest int sendSmsFlag, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)", "public void sendMultipartTextSms(@NonNull List<String> parts, int subId, @NonNull String destAddress, @CarrierMessagingService.SendRequest int sendSmsFlag, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)", "public void sendMms(@NonNull Uri pduUri, int subId, @NonNull Uri location, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)", "public void downloadMms(@NonNull Uri pduUri, int subId, @NonNull Uri location, @NonNull @CallbackExecutor final Executor executor, @NonNull final CarrierMessagingCallback callback)", "public void close()" ],
  "variableNames" : [ "mCarrierMessagingServiceConnection", "mICarrierMessagingService", "mOnServiceReadyCallback", "mServiceReadyCallbackExecutor", "mContext" ]
}