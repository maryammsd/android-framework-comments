{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CanonicalIterator.java",
  "packageName" : "android.icu.text",
  "className" : "CanonicalIterator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "PERMUTE_DEPTH_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROGRESS",
    "type" : "boolean",
    "comment" : " debug progress",
    "links" : [ ]
  }, {
    "name" : "SKIP_ZEROS",
    "type" : "boolean",
    "comment" : "private static Transliterator NAME = PROGRESS ? Transliterator.getInstance(\"name\") : null;",
    "links" : [ ]
  }, {
    "name" : "nfd",
    "type" : "Normalizer2",
    "comment" : " fields",
    "links" : [ ]
  }, {
    "name" : "nfcImpl",
    "type" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "source",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "done",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pieces",
    "type" : "String[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "current",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "buffer",
    "type" : "StringBuilder",
    "comment" : " transient fields",
    "links" : [ ]
  }, {
    "name" : "SET_WITH_NULL_STRING",
    "type" : "Set<String>",
    "comment" : " constant, don't change",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getSource()",
    "returnType" : "String",
    "comment" : "\n     * Gets the NFD form of the current source we are iterating over.\n     * @return gets the source: NOTE: it is the NFD form of the source originally passed in\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the iterator so that one can start again from the beginning.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String next()",
    "returnType" : "String",
    "comment" : "\n     * Get the next canonically equivalent string.\n     * <br><b>Warning: The strings are not guaranteed to be in any particular order.</b>\n     * @return the next string that is canonically equivalent. The value null is returned when\n     * the iteration is done.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSource(String newSource)",
    "returnType" : "void",
    "comment" : "\n     * Set a new source for this iterator. Allows object reuse.\n     * @param newSource the source string to iterate against. This allows the same iterator to be used\n     * while changing the source string, saving object creation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void permute(String source, boolean skipZeros, Set<String> output)",
    "returnType" : "void",
    "comment" : "\n     * Simple implementation of permutation.\n     * <br><b>Warning: The strings are not guaranteed to be in any particular order.</b>\n     * @param source the string to find permutations for\n     * @param skipZeros set to true to skip characters with canonical combining class zero\n     * @param output the set to add the results to\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void permute(String source, boolean skipZeros, Set<String> output, int depth)",
    "returnType" : "void",
    "comment" : "\n     * Simple implementation of permutation.\n     * <br><b>Warning: The strings are not guaranteed to be in any particular order.</b>\n     * @param source the string to find permutations for\n     * @param skipZeros set to true to skip characters with canonical combining class zero\n     * @param output the set to add the results to\n     * @param depth the depth of the recursive call.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private String[] getEquivalents(String segment)",
    "returnType" : "String[]",
    "comment" : " we have a segment, in NFD. Find all the strings that are canonically equivalent to it.",
    "links" : [ ]
  }, {
    "name" : "private Set<String> getEquivalents2(String segment)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Set<String> extract(int comp, String segment, int segmentPos, StringBuffer buf)",
    "returnType" : "Set<String>",
    "comment" : "\n     * See if the decomposition of cp2 is at segment starting at segmentPos\n     * (with canonical rearrangment!)\n     * If so, take the remainder, and return the equivalents\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getSource()", "public void reset()", "public String next()", "public void setSource(String newSource)", "public static void permute(String source, boolean skipZeros, Set<String> output)", "private static void permute(String source, boolean skipZeros, Set<String> output, int depth)", "private String[] getEquivalents(String segment)", "private Set<String> getEquivalents2(String segment)", "private Set<String> extract(int comp, String segment, int segmentPos, StringBuffer buf)" ],
  "variableNames" : [ "PERMUTE_DEPTH_LIMIT", "PROGRESS", "SKIP_ZEROS", "nfd", "nfcImpl", "source", "done", "pieces", "current", "buffer", "SET_WITH_NULL_STRING" ]
}