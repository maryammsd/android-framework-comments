{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/NumberRangeFormatterSettings.java",
  "packageName" : "android.icu.number",
  "className" : "NumberRangeFormatterSettings",
  "comment" : "\n * An abstract base class for specifying settings related to number formatting. This class is implemented by\n * {@link UnlocalizedNumberRangeFormatter} and {@link LocalizedNumberRangeFormatter}. This class is not intended for\n * public subclassing.\n *\n * @author sffc\n * @see NumberRangeFormatter\n ",
  "links" : [ "android.icu.number.UnlocalizedNumberRangeFormatter", "android.icu.number.LocalizedNumberRangeFormatter" ],
  "variables" : [ {
    "name" : "KEY_MACROS",
    "type" : "int",
    "comment" : " not used",
    "links" : [ ]
  }, {
    "name" : "KEY_LOCALE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FORMATTER_1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FORMATTER_2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SAME_FORMATTERS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_COLLAPSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_IDENTITY_FALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "NumberRangeFormatterSettings<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "key",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "resolvedMacros",
    "type" : "RangeMacroProps",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T numberFormatterBoth(UnlocalizedNumberFormatter formatter)",
    "returnType" : "T",
    "comment" : "\n     * Sets the NumberFormatter instance to use for the numbers in the range. The same formatter is applied to both\n     * sides of the range.\n     * <p>\n     * The NumberFormatter instances must not have a locale applied yet; the locale specified on the\n     * NumberRangeFormatter will be used.\n     *\n     * @param formatter\n     *            The formatter to use for both numbers in the range.\n     * @return The fluent chain.\n     * @see NumberFormatter\n     * @see NumberRangeFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public T numberFormatterFirst(UnlocalizedNumberFormatter formatterFirst)",
    "returnType" : "T",
    "comment" : "\n     * Sets the NumberFormatter instance to use for the first number in the range.\n     * <p>\n     * The NumberFormatter instance must not have a locale applied yet; the locale specified on the\n     * NumberRangeFormatter will be used.\n     *\n     * @param formatterFirst\n     *            The formatter to use for the first number in the range.\n     * @return The fluent chain.\n     * @see NumberFormatter\n     * @see NumberRangeFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public T numberFormatterSecond(UnlocalizedNumberFormatter formatterSecond)",
    "returnType" : "T",
    "comment" : "\n     * Sets the NumberFormatter instances to use for the second number in the range.\n     * <p>\n     * The NumberFormatter instance must not have a locale applied yet; the locale specified on the\n     * NumberRangeFormatter will be used.\n     *\n     * @param formatterSecond\n     *            The formatter to use for the second number in the range.\n     * @return The fluent chain.\n     * @see NumberFormatter\n     * @see NumberRangeFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public T collapse(RangeCollapse collapse)",
    "returnType" : "T",
    "comment" : "\n     * Sets the aggressiveness of \"collapsing\" fields across the range separator. Possible values:\n     * <ul>\n     * <li>ALL: \"3-5K miles\"</li>\n     * <li>UNIT: \"3K - 5K miles\"</li>\n     * <li>NONE: \"3K miles - 5K miles\"</li>\n     * <li>AUTO: usually UNIT or NONE, depending on the locale and formatter settings</li>\n     * </ul>\n     * <p>\n     * The default value is AUTO.\n     *\n     * @param collapse\n     *            The collapsing strategy to use for this range.\n     * @return The fluent chain.\n     * @see NumberRangeFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public T identityFallback(RangeIdentityFallback identityFallback)",
    "returnType" : "T",
    "comment" : "\n     * Sets the behavior when the two sides of the range are the same. This could happen if the same two numbers are\n     * passed to the formatRange function, or if different numbers are passed to the function but they become the same\n     * after rounding rules are applied. Possible values:\n     * <ul>\n     * <li>SINGLE_VALUE: \"5 miles\"</li>\n     * <li>APPROXIMATELY_OR_SINGLE_VALUE: \"~5 miles\" or \"5 miles\", depending on whether the number was the same before\n     * rounding was applied</li>\n     * <li>APPROXIMATELY: \"~5 miles\"</li>\n     * <li>RANGE: \"5-5 miles\" (with collapse=UNIT)</li>\n     * </ul>\n     * <p>\n     * The default value is APPROXIMATELY.\n     *\n     * @param identityFallback\n     *            The strategy to use when formatting two numbers that end up being the same.\n     * @return The fluent chain.\n     * @see NumberRangeFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract T create(int key, Object value)",
    "returnType" : "T",
    "comment" : " package-protected ",
    "links" : [ ]
  }, {
    "name" : " RangeMacroProps resolve()",
    "returnType" : "RangeMacroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T numberFormatterBoth(UnlocalizedNumberFormatter formatter)", "public T numberFormatterFirst(UnlocalizedNumberFormatter formatterFirst)", "public T numberFormatterSecond(UnlocalizedNumberFormatter formatterSecond)", "public T collapse(RangeCollapse collapse)", "public T identityFallback(RangeIdentityFallback identityFallback)", " abstract T create(int key, Object value)", " RangeMacroProps resolve()", "public int hashCode()", "public boolean equals(Object other)" ],
  "variableNames" : [ "KEY_MACROS", "KEY_LOCALE", "KEY_FORMATTER_1", "KEY_FORMATTER_2", "KEY_SAME_FORMATTERS", "KEY_COLLAPSE", "KEY_IDENTITY_FALLBACK", "KEY_MAX", "parent", "key", "value", "resolvedMacros" ]
}