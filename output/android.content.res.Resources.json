{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/Resources.java",
  "packageName" : "android.content.res",
  "className" : "Resources",
  "comment" : "\n * Class for accessing an application's resources.  This sits on top of the\n * asset manager of the application (accessible through {@link #getAssets}) and\n * provides a high-level API for getting typed data from the assets.\n *\n * <p>The Android resource system keeps track of all non-code assets associated with an\n * application. You can use this class to access your application's resources. You can generally\n * acquire the {@link android.content.res.Resources} instance associated with your application\n * with {@link android.content.Context#getResources getResources()}.</p>\n *\n * <p>The Android SDK tools compile your application's resources into the application binary\n * at build time.  To use a resource, you must install it correctly in the source tree (inside\n * your project's {@code res/} directory) and build your application.  As part of the build\n * process, the SDK tools generate symbols for each resource, which you can use in your application\n * code to access the resources.</p>\n *\n * <p>Using application resources makes it easy to update various characteristics of your\n * application without modifying code, and&mdash;by providing sets of alternative\n * resources&mdash;enables you to optimize your application for a variety of device configurations\n * (such as for different languages and screen sizes). This is an important aspect of developing\n * Android applications that are compatible on different types of devices.</p>\n *\n * <p>After {@link Build.VERSION_CODES#R}, {@link Resources} must be obtained by\n * {@link android.app.Activity} or {@link android.content.Context} created with\n * {@link android.content.Context#createWindowContext(int, Bundle)}.\n * {@link Application#getResources()} may report wrong values in multi-window or on secondary\n * displays.\n *\n * <p>For more information about using resources, see the documentation about <a\n * href=\"{@docRoot}guide/topics/resources/index.html\">Application Resources</a>.</p>\n ",
  "links" : [ "android.content.Context", "android.app.Application#getResources()", "android.content.Context#getResources", "#getAssets", "Build.VERSION_CODES#R", "android.app.Activity", "android.content.Context#createWindowContext(int", "android.content.res.Resources" ],
  "variables" : [ {
    "name" : "ID_NULL",
    "type" : "int",
    "comment" : "\n     * The {@code null} resource ID. This denotes an invalid resource ID that is returned by the\n     * system when a resource is not found or the value is set to {@code @null} in XML.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRELOAD_RESOURCES",
    "type" : "boolean",
    "comment" : "\n     * Controls whether we should preload resources during zygote init.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSystem",
    "type" : "Resources",
    "comment" : " Used by BridgeResources in layoutlib",
    "links" : [ ]
  }, {
    "name" : "mResourcesImpl",
    "type" : "ResourcesImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypedArrayPool",
    "type" : "SynchronizedPool<TypedArray>",
    "comment" : " Pool of TypedArrays targeted to this Resources object.",
    "links" : [ ]
  }, {
    "name" : "mDrawableInflater",
    "type" : "DrawableInflater",
    "comment" : " Used to inflate drawable objects from XML. ",
    "links" : [ ]
  }, {
    "name" : "mTmpValueLock",
    "type" : "Object",
    "comment" : " Lock object used to protect access to {@link #mTmpValue}. ",
    "links" : [ "#mTmpValue" ]
  }, {
    "name" : "mTmpValue",
    "type" : "TypedValue",
    "comment" : " Single-item pool used to minimize TypedValue allocations. ",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "UpdateCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeRefs",
    "type" : "ArrayList<WeakReference<Theme>>",
    "comment" : "\n     * WeakReferences to Themes that were constructed from this Resources object.\n     * We keep track of these in case our underlying implementation is changed, in which case\n     * the Themes must also get updated ThemeImpls.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_THEME_REFS_FLUSH_SIZE",
    "type" : "int",
    "comment" : "\n     * To avoid leaking WeakReferences to garbage collected Themes on the\n     * mThemeRefs list, we flush the list of stale references any time the\n     * mThemeRefNextFlushSize is reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_THEME_REFS_FLUSH_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeRefsNextFlushSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseApkAssetsSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sResourcesHistory",
    "type" : "Set<Resources>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int selectDefaultTheme(int curTheme, int targetSdkVersion)",
    "returnType" : "int",
    "comment" : "\n     * Returns the most appropriate default theme for the specified target SDK version.\n     * <ul>\n     * <li>Below API 11: Gingerbread\n     * <li>APIs 12 thru 14: Holo\n     * <li>APIs 15 thru 23: Device default dark\n     * <li>APIs 24 and above: Device default light with dark action bar\n     * </ul>\n     *\n     * @param curTheme The current theme, or 0 if not specified.\n     * @param targetSdkVersion The target SDK version.\n     * @return A theme resource identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int selectSystemTheme(int curTheme, int targetSdkVersion, int orig, int holo, int dark, int deviceDefault)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Resources getSystem()",
    "returnType" : "Resources",
    "comment" : "\n     * Return a global shared Resources object that provides access to only\n     * system resources (no application resources), is not configured for the\n     * current screen (can not use dimension units, does not change based on\n     * orientation, etc), and is not affected by Runtime Resource Overlay.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImpl(ResourcesImpl impl)",
    "returnType" : "void",
    "comment" : "\n     * Set the underlying implementation (containing all the resources and caches)\n     * and updates all Theme implementations as well.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallbacks(UpdateCallbacks callbacks)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ResourcesImpl getImpl()",
    "returnType" : "ResourcesImpl",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final DrawableInflater getDrawableInflater()",
    "returnType" : "DrawableInflater",
    "comment" : "\n     * @return the inflater used to create drawable objects\n     * @hide Pending API finalization.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConfigurationBoundResourceCache<Animator> getAnimatorCache()",
    "returnType" : "ConfigurationBoundResourceCache<Animator>",
    "comment" : "\n     * Used by AnimatorInflater.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConfigurationBoundResourceCache<StateListAnimator> getStateListAnimatorCache()",
    "returnType" : "ConfigurationBoundResourceCache<StateListAnimator>",
    "comment" : "\n     * Used by AnimatorInflater.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(@StringRes int id) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the string value associated with a particular resource ID.  The\n     * returned object will be a String if this is a plain string; it will be\n     * some other type of CharSequence if it is styled.\n     * {@more}\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return CharSequence The string data associated with the resource, plus\n     *         possibly styled text information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Typeface getFont(@FontRes int id) throws NotFoundException",
    "returnType" : "Typeface",
    "comment" : "\n     * Return the Typeface value associated with a particular resource ID.\n     * {@more}\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return Typeface The Typeface data associated with the resource.\n     ",
    "links" : [ ]
  }, {
    "name" : " Typeface getFont(@NonNull TypedValue value, @FontRes int id) throws NotFoundException",
    "returnType" : "Typeface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void preloadFonts(@ArrayRes int id)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getQuantityText(@PluralsRes int id, int quantity) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the character sequence necessary for grammatically correct pluralization\n     * of the given resource ID for the given quantity.\n     * Note that the character sequence is selected based solely on grammatical necessity,\n     * and that such rules differ between languages. Do not assume you know which string\n     * will be returned for a given quantity. See\n     * <a href=\"{@docRoot}guide/topics/resources/string-resource.html#Plurals\">String Resources</a>\n     * for more detail.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param quantity The number used to get the correct string for the current language's\n     *           plural rules.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return CharSequence The string data associated with the resource, plus\n     *         possibly styled text information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@StringRes int id) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return the string value associated with a particular resource ID.  It\n     * will be stripped of any styled text information.\n     * {@more}\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return String The string data associated with the resource,\n     *         stripped of styled text information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@StringRes int id, Object... formatArgs) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return the string value associated with a particular resource ID,\n     * substituting the format arguments as defined in {@link java.util.Formatter}\n     * and {@link java.lang.String#format}. It will be stripped of any styled text\n     * information.\n     * {@more}\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *           \n     * @param formatArgs The format arguments that will be used for substitution.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return String The string data associated with the resource,\n     *         stripped of styled text information.\n     ",
    "links" : [ "java.lang.String#format", "java.util.Formatter" ]
  }, {
    "name" : "public String getQuantityString(@PluralsRes int id, int quantity, Object... formatArgs) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Formats the string necessary for grammatically correct pluralization\n     * of the given resource ID for the given quantity, using the given arguments.\n     * Note that the string is selected based solely on grammatical necessity,\n     * and that such rules differ between languages. Do not assume you know which string\n     * will be returned for a given quantity. See\n     * <a href=\"{@docRoot}guide/topics/resources/string-resource.html#Plurals\">String Resources</a>\n     * for more detail.\n     *\n     * <p>Substitution of format arguments works as if using\n     * {@link java.util.Formatter} and {@link java.lang.String#format}.\n     * The resulting string will be stripped of any styled text information.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param quantity The number used to get the correct string for the current language's\n     *           plural rules.\n     * @param formatArgs The format arguments that will be used for substitution.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return String The string data associated with the resource,\n     * stripped of styled text information.\n     ",
    "links" : [ "java.lang.String#format", "java.util.Formatter" ]
  }, {
    "name" : "public String getQuantityString(@PluralsRes int id, int quantity) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Returns the string necessary for grammatically correct pluralization\n     * of the given resource ID for the given quantity.\n     * Note that the string is selected based solely on grammatical necessity,\n     * and that such rules differ between languages. Do not assume you know which string\n     * will be returned for a given quantity. See\n     * <a href=\"{@docRoot}guide/topics/resources/string-resource.html#Plurals\">String Resources</a>\n     * for more detail.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param quantity The number used to get the correct string for the current language's\n     *           plural rules.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return String The string data associated with the resource,\n     * stripped of styled text information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(@StringRes int id, CharSequence def)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the string value associated with a particular resource ID.  The\n     * returned object will be a String if this is a plain string; it will be\n     * some other type of CharSequence if it is styled.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * \n     * @param def The default CharSequence to return.\n     *\n     * @return CharSequence The string data associated with the resource, plus\n     *         possibly styled text information, or def if id is 0 or not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getTextArray(@ArrayRes int id) throws NotFoundException",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Return the styled text array associated with a particular resource ID.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return The styled text array associated with the resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getStringArray(@ArrayRes int id) throws NotFoundException",
    "returnType" : "String[]",
    "comment" : "\n     * Return the string array associated with a particular resource ID.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return The string array associated with the resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getIntArray(@ArrayRes int id) throws NotFoundException",
    "returnType" : "int[]",
    "comment" : "\n     * Return the int array associated with a particular resource ID.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return The int array associated with the resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypedArray obtainTypedArray(@ArrayRes int id) throws NotFoundException",
    "returnType" : "TypedArray",
    "comment" : "\n     * Return an array of heterogeneous values.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return Returns a TypedArray holding an array of the array values.\n     * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}\n     * when done with it.\n     ",
    "links" : [ "android.content.res.TypedArray#recycle()" ]
  }, {
    "name" : "public float getDimension(@DimenRes int id) throws NotFoundException",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a dimensional for a particular resource ID.  Unit \n     * conversions are based on the current {@link DisplayMetrics} associated\n     * with the resources.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * \n     * @return Resource dimension value multiplied by the appropriate metric to convert to pixels.\n     * \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @see #getDimensionPixelOffset\n     * @see #getDimensionPixelSize\n     ",
    "links" : [ "android.util.DisplayMetrics" ]
  }, {
    "name" : "public int getDimensionPixelOffset(@DimenRes int id) throws NotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a dimensional for a particular resource ID for use\n     * as an offset in raw pixels.  This is the same as\n     * {@link #getDimension}, except the returned value is converted to\n     * integer pixels for you.  An offset conversion involves simply\n     * truncating the base value to an integer.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * \n     * @return Resource dimension value multiplied by the appropriate \n     * metric and truncated to integer pixels.\n     * \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @see #getDimension\n     * @see #getDimensionPixelSize\n     ",
    "links" : [ "#getDimension" ]
  }, {
    "name" : "public int getDimensionPixelSize(@DimenRes int id) throws NotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a dimensional for a particular resource ID for use\n     * as a size in raw pixels.  This is the same as\n     * {@link #getDimension}, except the returned value is converted to\n     * integer pixels for use as a size.  A size conversion involves\n     * rounding the base value, and ensuring that a non-zero base value\n     * is at least one pixel in size.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * \n     * @return Resource dimension value multiplied by the appropriate \n     * metric and truncated to integer pixels.\n     *  \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @see #getDimension\n     * @see #getDimensionPixelOffset\n     ",
    "links" : [ "#getDimension" ]
  }, {
    "name" : "public float getFraction(@FractionRes int id, int base, int pbase)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a fractional unit for a particular resource ID.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param base The base value of this fraction.  In other words, a \n     *             standard fraction is multiplied by this value.\n     * @param pbase The parent base value of this fraction.  In other \n     *             words, a parent fraction (nn%p) is multiplied by this\n     *             value.\n     * \n     * @return Attribute fractional value multiplied by the appropriate \n     * base value.\n     *  \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(@DrawableRes int id) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Return a drawable object associated with a particular resource ID.\n     * Various types of objects will be returned depending on the underlying\n     * resource -- for example, a solid color, PNG image, scalable image, etc.\n     * The Drawable API hides these implementation details.\n     *\n     * <p class=\"note\"><strong>Note:</strong> Prior to\n     * {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, this function\n     * would not correctly retrieve the final configuration density when\n     * the resource ID passed here is an alias to another Drawable resource.\n     * This means that if the density configuration of the alias resource\n     * is different than the actual resource, the density of the returned\n     * Drawable would be incorrect, resulting in bad scaling. To work\n     * around this, you can instead manually resolve the aliased reference\n     * by using {@link #getValue(int, TypedValue, boolean)} and passing\n     * {@code true} for {@code resolveRefs}. The resulting\n     * {@link TypedValue#resourceId} value may be passed to this method.</p>\n     *\n     * <p class=\"note\"><strong>Note:</strong> To obtain a themed drawable, use\n     * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}\n     * or {@link #getDrawable(int, Theme)} passing the desired theme.</p>\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @return Drawable An object that can be used to draw this resource.\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist.\n     * @see #getDrawable(int, Theme)\n     * @deprecated Use {@link #getDrawable(int, Theme)} instead.\n     ",
    "links" : [ "android.content.Context#getDrawable(int)", "android.os.Build.VERSION_CODES#JELLY_BEAN", "#getValue(int", "android.util.TypedValue#resourceId", "#getDrawable(int" ]
  }, {
    "name" : "public Drawable getDrawable(@DrawableRes int id, @Nullable Theme theme) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Return a drawable object associated with a particular resource ID and\n     * styled for the specified theme. Various types of objects will be\n     * returned depending on the underlying resource -- for example, a solid\n     * color, PNG image, scalable image, etc.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param theme The theme used to style the drawable attributes, may be {@code null}.\n     * @return Drawable An object that can be used to draw this resource.\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawableForDensity(@DrawableRes int id, int density) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Return a drawable object associated with a particular resource ID for the\n     * given screen density in DPI. This will set the drawable's density to be\n     * the device's density multiplied by the ratio of actual drawable density\n     * to requested density. This allows the drawable to be scaled up to the\n     * correct size if needed. Various types of objects will be returned\n     * depending on the underlying resource -- for example, a solid color, PNG\n     * image, scalable image, etc. The Drawable API hides these implementation\n     * details.\n     *\n     * <p class=\"note\"><strong>Note:</strong> To obtain a themed drawable, use\n     * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}\n     * or {@link #getDrawableForDensity(int, int, Theme)} passing the desired\n     * theme.</p>\n     *\n     * @param id The desired resource identifier, as generated by the aapt tool.\n     *            This integer encodes the package, type, and resource entry.\n     *            The value 0 is an invalid identifier.\n     * @param density the desired screen density indicated by the resource as\n     *            found in {@link DisplayMetrics}. A value of 0 means to use the\n     *            density returned from {@link #getConfiguration()}.\n     *            This is equivalent to calling {@link #getDrawable(int)}.\n     * @return Drawable An object that can be used to draw this resource.\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *             not exist.\n     * @see #getDrawableForDensity(int, int, Theme)\n     * @deprecated Use {@link #getDrawableForDensity(int, int, Theme)} instead.\n     ",
    "links" : [ "#getConfiguration()", "android.content.Context#getDrawable(int)", "#getDrawableForDensity(int", "android.util.DisplayMetrics", "#getDrawable(int)" ]
  }, {
    "name" : "public Drawable getDrawableForDensity(@DrawableRes int id, int density, @Nullable Theme theme)",
    "returnType" : "Drawable",
    "comment" : "\n     * Return a drawable object associated with a particular resource ID for the\n     * given screen density in DPI and styled for the specified theme.\n     *\n     * @param id The desired resource identifier, as generated by the aapt tool.\n     *            This integer encodes the package, type, and resource entry.\n     *            The value 0 is an invalid identifier.\n     * @param density The desired screen density indicated by the resource as\n     *            found in {@link DisplayMetrics}. A value of 0 means to use the\n     *            density returned from {@link #getConfiguration()}.\n     *            This is equivalent to calling {@link #getDrawable(int, Theme)}.\n     * @param theme The theme used to style the drawable attributes, may be {@code null} if the\n     *              drawable cannot be decoded.\n     * @return Drawable An object that can be used to draw this resource.\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *             not exist.\n     ",
    "links" : [ "#getConfiguration()", "android.util.DisplayMetrics", "#getDrawable(int" ]
  }, {
    "name" : " Drawable loadDrawable(@NonNull TypedValue value, int id, int density, @Nullable Theme theme) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Movie getMovie(@RawRes int id) throws NotFoundException",
    "returnType" : "Movie",
    "comment" : "\n     * Return a movie object associated with the particular resource ID.\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @deprecated Prefer {@link android.graphics.drawable.AnimatedImageDrawable}.\n     ",
    "links" : [ "android.graphics.drawable.AnimatedImageDrawable" ]
  }, {
    "name" : "public int getColor(@ColorRes int id) throws NotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Returns a color integer associated with a particular resource ID. If the\n     * resource holds a complex {@link ColorStateList}, then the default color\n     * from the set is returned.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist.\n     *\n     * @return A single color value in the form 0xAARRGGBB.\n     * @deprecated Use {@link #getColor(int, Theme)} instead.\n     ",
    "links" : [ "android.content.res.ColorStateList", "#getColor(int" ]
  }, {
    "name" : "public int getColor(@ColorRes int id, @Nullable Theme theme) throws NotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Returns a themed color integer associated with a particular resource ID.\n     * If the resource holds a complex {@link ColorStateList}, then the default\n     * color from the set is returned.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param theme The theme used to style the color attributes, may be\n     *              {@code null}.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist.\n     *\n     * @return A single color value in the form 0xAARRGGBB.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public ColorStateList getColorStateList(@ColorRes int id) throws NotFoundException",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns a color state list associated with a particular resource ID. The\n     * resource may contain either a single raw color value or a complex\n     * {@link ColorStateList} holding multiple possible colors.\n     *\n     * @param id The desired resource identifier of a {@link ColorStateList},\n     *           as generated by the aapt tool. This integer encodes the\n     *           package, type, and resource entry. The value 0 is an invalid\n     *           identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist.\n     *\n     * @return A ColorStateList object containing either a single solid color\n     *         or multiple colors that can be selected based on a state.\n     * @deprecated Use {@link #getColorStateList(int, Theme)} instead.\n     ",
    "links" : [ "android.content.res.ColorStateList", "#getColorStateList(int" ]
  }, {
    "name" : "public ColorStateList getColorStateList(@ColorRes int id, @Nullable Theme theme) throws NotFoundException",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns a themed color state list associated with a particular resource\n     * ID. The resource may contain either a single raw color value or a\n     * complex {@link ColorStateList} holding multiple possible colors.\n     *\n     * @param id The desired resource identifier of a {@link ColorStateList},\n     *           as generated by the aapt tool. This integer encodes the\n     *           package, type, and resource entry. The value 0 is an invalid\n     *           identifier.\n     * @param theme The theme used to style the color attributes, may be\n     *              {@code null}.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist.\n     *\n     * @return A themed ColorStateList object containing either a single solid\n     *         color or multiple colors that can be selected based on a state.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : " ColorStateList loadColorStateList(@NonNull TypedValue value, int id, @Nullable Theme theme) throws NotFoundException",
    "returnType" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComplexColor loadComplexColor(@NonNull TypedValue value, int id, @Nullable Theme theme)",
    "returnType" : "ComplexColor",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(@BoolRes int id) throws NotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Return a boolean associated with a particular resource ID.  This can be\n     * used with any integral resource value, and will return true if it is\n     * non-zero.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return Returns the boolean value contained in the resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInteger(@IntegerRes int id) throws NotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Return an integer associated with a particular resource ID.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @return Returns the integer value contained in the resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(@DimenRes int id)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a floating-point value for a particular resource ID.\n     *\n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @return Returns the floating-point value contained in the resource.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *         not exist or is not a floating-point value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public XmlResourceParser getLayout(@LayoutRes int id) throws NotFoundException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Return an XmlResourceParser through which you can read a view layout\n     * description for the given resource ID.  This parser has limited\n     * functionality -- in particular, you can't change its input, and only\n     * the high-level events are available.\n     * \n     * <p>This function is really a simple wrapper for calling\n     * {@link #getXml} with a layout resource.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     * @return A new parser object through which you can read\n     *         the XML data.\n     *         \n     * @see #getXml\n     ",
    "links" : [ "#getXml" ]
  }, {
    "name" : "public XmlResourceParser getAnimation(@AnimatorRes @AnimRes int id) throws NotFoundException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Return an XmlResourceParser through which you can read an animation\n     * description for the given resource ID.  This parser has limited\n     * functionality -- in particular, you can't change its input, and only\n     * the high-level events are available.\n     * \n     * <p>This function is really a simple wrapper for calling\n     * {@link #getXml} with an animation resource.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     * @return A new parser object through which you can read\n     *         the XML data.\n     *         \n     * @see #getXml\n     ",
    "links" : [ "#getXml" ]
  }, {
    "name" : "public XmlResourceParser getXml(@XmlRes int id) throws NotFoundException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Return an XmlResourceParser through which you can read a generic XML\n     * resource for the given resource ID.\n     * \n     * <p>The XmlPullParser implementation returned here has some limited\n     * functionality.  In particular, you can't change its input, and only\n     * high-level parsing events are available (since the document was\n     * pre-parsed for you at build time, which involved merging text and\n     * stripping comments).\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     * @return A new parser object through which you can read\n     *         the XML data.\n     *         \n     * @see android.util.AttributeSet\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream openRawResource(@RawRes int id) throws NotFoundException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open a data stream for reading a raw resource.  This can only be used\n     * with resources whose value is the name of an asset files -- that is, it can be\n     * used to open drawable, sound, and raw resources; it will fail on string\n     * and color resources.\n     * \n     * @param id The resource identifier to open, as generated by the aapt tool.\n     * \n     * @return InputStream Access to the resource data.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "private TypedValue obtainTempTypedValue()",
    "returnType" : "TypedValue",
    "comment" : "\n     * Returns a TypedValue suitable for temporary use. The obtained TypedValue\n     * should be released using {@link #releaseTempTypedValue(TypedValue)}.\n     *\n     * @return a typed value suitable for temporary use\n     ",
    "links" : [ "#releaseTempTypedValue(TypedValue)" ]
  }, {
    "name" : "private void releaseTempTypedValue(TypedValue value)",
    "returnType" : "void",
    "comment" : "\n     * Returns a TypedValue to the pool. After calling this method, the\n     * specified TypedValue should no longer be accessed.\n     *\n     * @param value the typed value to return to the pool\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream openRawResource(@RawRes int id, TypedValue value) throws NotFoundException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open a data stream for reading a raw resource.  This can only be used\n     * with resources whose value is the name of an asset file -- that is, it can be\n     * used to open drawable, sound, and raw resources; it will fail on string\n     * and color resources.\n     *\n     * @param id The resource identifier to open, as generated by the aapt tool.\n     * @param value The TypedValue object to hold the resource information.\n     *\n     * @return InputStream Access to the resource data.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openRawResourceFd(@RawRes int id) throws NotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Open a file descriptor for reading a raw resource.  This can only be used\n     * with resources whose value is the name of an asset files -- that is, it can be\n     * used to open drawable, sound, and raw resources; it will fail on string\n     * and color resources.\n     * \n     * <p>This function only works for resources that are stored in the package\n     * as uncompressed data, which typically includes things like mp3 files\n     * and png images.\n     * \n     * @param id The resource identifier to open, as generated by the aapt tool.\n     * \n     * @return AssetFileDescriptor A new file descriptor you can use to read\n     * the resource.  This includes the file descriptor itself, as well as the\n     * offset and length of data where the resource appears in the file.  A\n     * null is returned if the file exists but is compressed.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "public void getValue(@AnyRes int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Return the raw data associated with a particular resource ID.\n     * \n     * @param id The desired resource identifier, as generated by the aapt\n     *           tool. This integer encodes the package, type, and resource\n     *           entry. The value 0 is an invalid identifier.\n     * @param outValue Object in which to place the resource data.\n     * @param resolveRefs If true, a resource that is a reference to another\n     *                    resource will be followed so that you receive the\n     *                    actual final resource data.  If false, the TypedValue\n     *                    will be filled in with the reference itself.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getValueForDensity(@AnyRes int id, int density, TypedValue outValue, boolean resolveRefs) throws NotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Get the raw value associated with a resource with associated density.\n     * \n     * @param id resource identifier\n     * @param density density in DPI\n     * @param resolveRefs If true, a resource that is a reference to another\n     *            resource will be followed so that you receive the actual final\n     *            resource data. If false, the TypedValue will be filled in with\n     *            the reference itself.\n     * @throws NotFoundException Throws NotFoundException if the given ID does\n     *             not exist.\n     * @see #getValue(String, TypedValue, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getValue(String name, TypedValue outValue, boolean resolveRefs) throws NotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Return the raw data associated with a particular resource ID.\n     * See getIdentifier() for information on how names are mapped to resource\n     * IDs, and getString(int) for information on how string resources are\n     * retrieved.\n     * \n     * <p>Note: use of this function is discouraged.  It is much more\n     * efficient to retrieve resources by identifier than by name.\n     * \n     * @param name The name of the desired resource.  This is passed to\n     *             getIdentifier() with a default type of \"string\".\n     * @param outValue Object in which to place the resource data.\n     * @param resolveRefs If true, a resource that is a reference to another\n     *                    resource will be followed so that you receive the\n     *                    actual final resource data.  If false, the TypedValue\n     *                    will be filled in with the reference itself.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAttributeSetSourceResId(@Nullable AttributeSet set)",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource ID of the resource that was used to create this AttributeSet.\n     *\n     * @param set AttributeSet for which we want to find the source.\n     * @return The resource ID for the source that is backing the given AttributeSet or\n     * {@link Resources#ID_NULL} if the AttributeSet is {@code null}.\n     ",
    "links" : [ "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : " static int nextPowerOf2(int number)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanupThemeReferences()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Theme newTheme()",
    "returnType" : "Theme",
    "comment" : "\n     * Generate a new Theme object for this set of Resources.  It initially\n     * starts out empty.\n     *\n     * @return Theme The newly created Theme container.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypedArray obtainAttributes(AttributeSet set, @StyleableRes int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "\n     * Retrieve a set of basic attribute values from an AttributeSet, not\n     * performing styling of them using a theme and/or style resources.\n     *\n     * @param set The current attribute values to retrieve.\n     * @param attrs The specific attributes to be retrieved. These attribute IDs must be sorted in\n     *              ascending order.\n     * @return Returns a TypedArray holding an array of the attribute values.\n     * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}\n     * when done with it.\n     * \n     * @see Theme#obtainStyledAttributes(AttributeSet, int[], int, int)\n     ",
    "links" : [ "android.content.res.TypedArray#recycle()" ]
  }, {
    "name" : "public void updateConfiguration(Configuration config, DisplayMetrics metrics)",
    "returnType" : "void",
    "comment" : "\n     * Store the newly updated configuration.\n     *\n     * @deprecated See {@link android.content.Context#createConfigurationContext(Configuration)}.\n     ",
    "links" : [ "android.content.Context#createConfigurationContext(Configuration)" ]
  }, {
    "name" : "public void updateConfiguration(Configuration config, DisplayMetrics metrics, CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void updateSystemConfiguration(Configuration config, DisplayMetrics metrics, CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "\n     * Update the system resources configuration if they have previously\n     * been initialized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayMetrics getDisplayMetrics()",
    "returnType" : "DisplayMetrics",
    "comment" : "\n     * Returns the current display metrics that are in effect for this resource\n     * object. The returned object should be treated as read-only.\n     *\n     * <p>Note that the reported value may be different than the window this application is\n     * interested in.</p>\n     *\n     * <p>The best practices is to obtain metrics from\n     * {@link WindowManager#getCurrentWindowMetrics()} for window bounds. The value obtained from\n     * this API may be wrong if {@link Context#getResources()} is not from a {@code UiContext}.\n     * For example, use the {@link DisplayMetrics} obtained from {@link Application#getResources()}\n     * to build {@link android.app.Activity} UI elements especially when the\n     * {@link android.app.Activity} is in the multi-window mode or on the secondary {@link Display}.\n     * <p/>\n     *\n     * @return The resource's current display metrics.\n     ",
    "links" : [ "android.content.Context#getResources()", "android.app.Application#getResources()", "android.view.Display", "android.view.WindowManager#getCurrentWindowMetrics()", "android.app.Activity", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public DisplayAdjustments getDisplayAdjustments()",
    "returnType" : "DisplayAdjustments",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOverrideDisplayAdjustments()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the override display adjustments have been set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "\n     * Return the current configuration that is in effect for this resource \n     * object.  The returned object should be treated as read-only.\n     * \n     * @return The resource's current configuration. \n     ",
    "links" : [ ]
  }, {
    "name" : "public Configuration[] getSizeConfigurations()",
    "returnType" : "Configuration[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Configuration[] getSizeAndUiModeConfigurations()",
    "returnType" : "Configuration[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CompatibilityInfo getCompatibilityInfo()",
    "returnType" : "CompatibilityInfo",
    "comment" : "\n     * Return the compatibility mode information for the application.\n     * The returned object should be treated as read-only.\n     * \n     * @return compatibility info.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCompatibilityInfo(CompatibilityInfo ci)",
    "returnType" : "void",
    "comment" : "\n     * This is just for testing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIdentifier(String name, String defType, String defPackage)",
    "returnType" : "int",
    "comment" : "\n     * Return a resource identifier for the given resource name.  A fully\n     * qualified resource name is of the form \"package:type/entry\".  The first\n     * two components (package and type) are optional if defType and\n     * defPackage, respectively, are specified here.\n     * \n     * <p>Note: use of this function is discouraged.  It is much more\n     * efficient to retrieve resources by identifier than by name.\n     * \n     * @param name The name of the desired resource.\n     * @param defType Optional default resource type to find, if \"type/\" is\n     *                not included in the name.  Can be null to require an\n     *                explicit type.\n     * @param defPackage Optional default package to find, if \"package:\" is\n     *                   not included in the name.  Can be null to require an\n     *                   explicit package.\n     * \n     * @return int The associated resource identifier.  Returns 0 if no such\n     *         resource was found.  (0 is not a valid resource ID.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean resourceHasPackage(@AnyRes int resid)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if given resource identifier includes a package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResourceName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return the full name for a given resource identifier.  This name is\n     * a single string of the form \"package:type/entry\".\n     * \n     * @param resid The resource identifier whose name is to be retrieved.\n     * \n     * @return A string holding the name of the resource.\n     * \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     * @see #getResourcePackageName\n     * @see #getResourceTypeName\n     * @see #getResourceEntryName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResourcePackageName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return the package name for a given resource identifier.\n     * \n     * @param resid The resource identifier whose package name is to be\n     * retrieved.\n     * \n     * @return A string holding the package name of the resource.\n     * \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     * @see #getResourceName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResourceTypeName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return the type name for a given resource identifier.\n     * \n     * @param resid The resource identifier whose type name is to be\n     * retrieved.\n     * \n     * @return A string holding the type name of the resource.\n     * \n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     * \n     * @see #getResourceName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResourceEntryName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return the entry name for a given resource identifier.\n     *\n     * @param resid The resource identifier whose entry name is to be\n     * retrieved.\n     *\n     * @return A string holding the entry name of the resource.\n     *\n     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n     *\n     * @see #getResourceName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLastResourceResolution() throws NotFoundException",
    "returnType" : "String",
    "comment" : "\n     * Return formatted log of the last retrieved resource's resolution path.\n     *\n     * @return A string holding a formatted log of the steps taken to resolve the last resource.\n     *\n     * @throws NotFoundException Throws NotFoundException if there hasn't been a resource\n     * resolved yet.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parseBundleExtras(XmlResourceParser parser, Bundle outBundle) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse a series of {@link android.R.styleable#Extra &lt;extra&gt;} tags from\n     * an XML file.  You call this when you are at the parent tag of the\n     * extra tags, and it will return once all of the child tags have been parsed.\n     * This will call {@link #parseBundleExtra} for each extra tag encountered.\n     * \n     * @param parser The parser from which to retrieve the extras.\n     * @param outBundle A Bundle in which to place all parsed extras.\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ "#parseBundleExtra", "android.R.styleable#Extra" ]
  }, {
    "name" : "public void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Parse a name/value pair out of an XML tag holding that data.  The\n     * AttributeSet must be holding the data defined by\n     * {@link android.R.styleable#Extra}.  The following value types are supported:\n     * <ul>\n     * <li> {@link TypedValue#TYPE_STRING}:\n     * {@link Bundle#putCharSequence Bundle.putCharSequence()}\n     * <li> {@link TypedValue#TYPE_INT_BOOLEAN}:\n     * {@link Bundle#putCharSequence Bundle.putBoolean()}\n     * <li> {@link TypedValue#TYPE_FIRST_INT}-{@link TypedValue#TYPE_LAST_INT}:\n     * {@link Bundle#putCharSequence Bundle.putBoolean()}\n     * <li> {@link TypedValue#TYPE_FLOAT}:\n     * {@link Bundle#putCharSequence Bundle.putFloat()}\n     * </ul>\n     * \n     * @param tagName The name of the tag these attributes come from; this is\n     * only used for reporting error messages.\n     * @param attrs The attributes from which to retrieve the name/value pair.\n     * @param outBundle The Bundle in which to place the parsed value.\n     * @throws XmlPullParserException If the attributes are not valid.\n     ",
    "links" : [ "android.util.TypedValue#TYPE_INT_BOOLEAN", "android.util.TypedValue#TYPE_STRING", "android.util.TypedValue#TYPE_FLOAT", "android.util.TypedValue#TYPE_LAST_INT", "android.os.Bundle#putCharSequence", "android.util.TypedValue#TYPE_FIRST_INT", "android.R.styleable#Extra" ]
  }, {
    "name" : "public final AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "\n     * Retrieve underlying AssetManager storage for these resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void flushLayoutCache()",
    "returnType" : "void",
    "comment" : "\n     * Call this to remove all cached loaded layout resources from the\n     * Resources object.  Only intended for use with performance testing\n     * tools.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void startPreloading()",
    "returnType" : "void",
    "comment" : "\n     * Start preloading of resource data using this Resources object.  Only\n     * for use by the zygote process for loading common system resources.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void finishPreloading()",
    "returnType" : "void",
    "comment" : "\n     * Called by zygote when it is done preloading resources, to change back\n     * to normal Resources operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongSparseArray<ConstantState> getPreloadedDrawables()",
    "returnType" : "LongSparseArray<ConstantState>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlResourceParser loadXmlResourceParser(@AnyRes int id, @NonNull String type) throws NotFoundException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Loads an XML parser for the specified file.\n     *\n     * @param id the resource identifier for the file\n     * @param type the type of resource (used for logging)\n     * @return a parser for the specified XML file\n     * @throws NotFoundException if the file could not be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlResourceParser loadXmlResourceParser(String file, int id, int assetCookie, String type) throws NotFoundException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Loads an XML parser for the specified file.\n     *\n     * @param file the path for the XML file to parse\n     * @param id the resource identifier for the file\n     * @param assetCookie the asset cookie for the file\n     * @param type the type of resource (used for logging)\n     * @return a parser for the specified XML file\n     * @throws NotFoundException if the file could not be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "public int calcConfigChanges(Configuration config)",
    "returnType" : "int",
    "comment" : "\n     * Called by ConfigurationBoundResourceCacheTest.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TypedArray obtainAttributes(Resources res, Theme theme, AttributeSet set, int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "\n     * Obtains styled attributes from the theme, if available, or unstyled\n     * resources if the theme is null.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkCallbacksRegistered()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResourcesLoader> getLoaders()",
    "returnType" : "List<ResourcesLoader>",
    "comment" : "\n     * Retrieves the list of loaders.\n     *\n     * <p>Loaders are listed in increasing precedence order. A loader will override the resources\n     * and assets of loaders listed before itself.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLoaders(@NonNull ResourcesLoader... loaders)",
    "returnType" : "void",
    "comment" : "\n     * Adds a loader to the list of loaders. If the loader is already present in the list, the list\n     * will not be modified.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * loader changes.\n     *\n     * @param loaders the loaders to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeLoaders(@NonNull ResourcesLoader... loaders)",
    "returnType" : "void",
    "comment" : "\n     * Removes loaders from the list of loaders. If the loader is not present in the list, the list\n     * will not be modified.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * loader changes.\n     *\n     * @param loaders the loaders to remove\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearLoaders()",
    "returnType" : "void",
    "comment" : "\n     * Removes all {@link ResourcesLoader ResourcesLoader(s)}.\n     *\n     * <p>This should only be called from the UI thread to avoid lock contention when propagating\n     * loader changes.\n     * @hide\n     ",
    "links" : [ "android.content.res.loader.ResourcesLoader" ]
  }, {
    "name" : "public static void preloadResources()",
    "returnType" : "void",
    "comment" : "\n     * Load in commonly used resources, so they can be shared across processes.\n     *\n     * These tend to be a few Kbytes, but are frequently in the 20-40K range, and occasionally even\n     * larger.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int preloadColorStateLists(Resources resources, TypedArray ar)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int preloadDrawables(Resources resources, TypedArray ar)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void resetPreloadDrawableStateCache()",
    "returnType" : "void",
    "comment" : "\n     * Clear the cache when the framework resources packages is changed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpHistory(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void registerResourcePaths(@NonNull String uniqueId, @NonNull ApplicationInfo appInfo)",
    "returnType" : "void",
    "comment" : "\n     * Register the resources paths of a package (e.g. a shared library). This will collect the\n     * package resources' paths from its ApplicationInfo and add them to all existing and future\n     * contexts while the application is running.\n     * A second call with the same uniqueId is a no-op.\n     * The paths are not persisted during application restarts. The application is responsible for\n     * calling the API again if this happens.\n     *\n     * @param uniqueId The unique id for the ApplicationInfo object, to detect and ignore repeated\n     *                 API calls.\n     * @param appInfo The ApplicationInfo that contains resources paths of the package.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int selectDefaultTheme(int curTheme, int targetSdkVersion)", "public static int selectSystemTheme(int curTheme, int targetSdkVersion, int orig, int holo, int dark, int deviceDefault)", "public static Resources getSystem()", "public void setImpl(ResourcesImpl impl)", "public void setCallbacks(UpdateCallbacks callbacks)", "public ResourcesImpl getImpl()", "public ClassLoader getClassLoader()", "public final DrawableInflater getDrawableInflater()", "public ConfigurationBoundResourceCache<Animator> getAnimatorCache()", "public ConfigurationBoundResourceCache<StateListAnimator> getStateListAnimatorCache()", "public CharSequence getText(@StringRes int id) throws NotFoundException", "public Typeface getFont(@FontRes int id) throws NotFoundException", " Typeface getFont(@NonNull TypedValue value, @FontRes int id) throws NotFoundException", "public void preloadFonts(@ArrayRes int id)", "public CharSequence getQuantityText(@PluralsRes int id, int quantity) throws NotFoundException", "public String getString(@StringRes int id) throws NotFoundException", "public String getString(@StringRes int id, Object... formatArgs) throws NotFoundException", "public String getQuantityString(@PluralsRes int id, int quantity, Object... formatArgs) throws NotFoundException", "public String getQuantityString(@PluralsRes int id, int quantity) throws NotFoundException", "public CharSequence getText(@StringRes int id, CharSequence def)", "public CharSequence[] getTextArray(@ArrayRes int id) throws NotFoundException", "public String[] getStringArray(@ArrayRes int id) throws NotFoundException", "public int[] getIntArray(@ArrayRes int id) throws NotFoundException", "public TypedArray obtainTypedArray(@ArrayRes int id) throws NotFoundException", "public float getDimension(@DimenRes int id) throws NotFoundException", "public int getDimensionPixelOffset(@DimenRes int id) throws NotFoundException", "public int getDimensionPixelSize(@DimenRes int id) throws NotFoundException", "public float getFraction(@FractionRes int id, int base, int pbase)", "public Drawable getDrawable(@DrawableRes int id) throws NotFoundException", "public Drawable getDrawable(@DrawableRes int id, @Nullable Theme theme) throws NotFoundException", "public Drawable getDrawableForDensity(@DrawableRes int id, int density) throws NotFoundException", "public Drawable getDrawableForDensity(@DrawableRes int id, int density, @Nullable Theme theme)", " Drawable loadDrawable(@NonNull TypedValue value, int id, int density, @Nullable Theme theme) throws NotFoundException", "public Movie getMovie(@RawRes int id) throws NotFoundException", "public int getColor(@ColorRes int id) throws NotFoundException", "public int getColor(@ColorRes int id, @Nullable Theme theme) throws NotFoundException", "public ColorStateList getColorStateList(@ColorRes int id) throws NotFoundException", "public ColorStateList getColorStateList(@ColorRes int id, @Nullable Theme theme) throws NotFoundException", " ColorStateList loadColorStateList(@NonNull TypedValue value, int id, @Nullable Theme theme) throws NotFoundException", "public ComplexColor loadComplexColor(@NonNull TypedValue value, int id, @Nullable Theme theme)", "public boolean getBoolean(@BoolRes int id) throws NotFoundException", "public int getInteger(@IntegerRes int id) throws NotFoundException", "public float getFloat(@DimenRes int id)", "public XmlResourceParser getLayout(@LayoutRes int id) throws NotFoundException", "public XmlResourceParser getAnimation(@AnimatorRes @AnimRes int id) throws NotFoundException", "public XmlResourceParser getXml(@XmlRes int id) throws NotFoundException", "public InputStream openRawResource(@RawRes int id) throws NotFoundException", "private TypedValue obtainTempTypedValue()", "private void releaseTempTypedValue(TypedValue value)", "public InputStream openRawResource(@RawRes int id, TypedValue value) throws NotFoundException", "public AssetFileDescriptor openRawResourceFd(@RawRes int id) throws NotFoundException", "public void getValue(@AnyRes int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException", "public void getValueForDensity(@AnyRes int id, int density, TypedValue outValue, boolean resolveRefs) throws NotFoundException", "public void getValue(String name, TypedValue outValue, boolean resolveRefs) throws NotFoundException", "public static int getAttributeSetSourceResId(@Nullable AttributeSet set)", " static int nextPowerOf2(int number)", "private void cleanupThemeReferences()", "public final Theme newTheme()", "public TypedArray obtainAttributes(AttributeSet set, @StyleableRes int[] attrs)", "public void updateConfiguration(Configuration config, DisplayMetrics metrics)", "public void updateConfiguration(Configuration config, DisplayMetrics metrics, CompatibilityInfo compat)", "public static void updateSystemConfiguration(Configuration config, DisplayMetrics metrics, CompatibilityInfo compat)", "public DisplayMetrics getDisplayMetrics()", "public DisplayAdjustments getDisplayAdjustments()", "public boolean hasOverrideDisplayAdjustments()", "public Configuration getConfiguration()", "public Configuration[] getSizeConfigurations()", "public Configuration[] getSizeAndUiModeConfigurations()", "public CompatibilityInfo getCompatibilityInfo()", "public void setCompatibilityInfo(CompatibilityInfo ci)", "public int getIdentifier(String name, String defType, String defPackage)", "public static boolean resourceHasPackage(@AnyRes int resid)", "public String getResourceName(@AnyRes int resid) throws NotFoundException", "public String getResourcePackageName(@AnyRes int resid) throws NotFoundException", "public String getResourceTypeName(@AnyRes int resid) throws NotFoundException", "public String getResourceEntryName(@AnyRes int resid) throws NotFoundException", "public String getLastResourceResolution() throws NotFoundException", "public void parseBundleExtras(XmlResourceParser parser, Bundle outBundle) throws XmlPullParserException, IOException", "public void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle) throws XmlPullParserException", "public final AssetManager getAssets()", "public final void flushLayoutCache()", "public final void startPreloading()", "public final void finishPreloading()", "public LongSparseArray<ConstantState> getPreloadedDrawables()", " XmlResourceParser loadXmlResourceParser(@AnyRes int id, @NonNull String type) throws NotFoundException", " XmlResourceParser loadXmlResourceParser(String file, int id, int assetCookie, String type) throws NotFoundException", "public int calcConfigChanges(Configuration config)", "public static TypedArray obtainAttributes(Resources res, Theme theme, AttributeSet set, int[] attrs)", "private void checkCallbacksRegistered()", "public List<ResourcesLoader> getLoaders()", "public void addLoaders(@NonNull ResourcesLoader... loaders)", "public void removeLoaders(@NonNull ResourcesLoader... loaders)", "public void clearLoaders()", "public static void preloadResources()", "private static int preloadColorStateLists(Resources resources, TypedArray ar)", "private static int preloadDrawables(Resources resources, TypedArray ar)", "public static void resetPreloadDrawableStateCache()", "public void dump(PrintWriter pw, String prefix)", "public static void dumpHistory(PrintWriter pw, String prefix)", "public static void registerResourcePaths(@NonNull String uniqueId, @NonNull ApplicationInfo appInfo)" ],
  "variableNames" : [ "ID_NULL", "TAG", "sSync", "mUpdateLock", "PRELOAD_RESOURCES", "mSystem", "mResourcesImpl", "mTypedArrayPool", "mDrawableInflater", "mTmpValueLock", "mTmpValue", "mClassLoader", "mCallbacks", "mThemeRefs", "MIN_THEME_REFS_FLUSH_SIZE", "MAX_THEME_REFS_FLUSH_SIZE", "mThemeRefsNextFlushSize", "mBaseApkAssetsSize", "sResourcesHistory" ]
}