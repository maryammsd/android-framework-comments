{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/ondeviceintelligence/OnDeviceIntelligenceService.java",
  "packageName" : "android.service.ondeviceintelligence",
  "className" : "OnDeviceIntelligenceService",
  "comment" : "\n * Abstract base class for performing setup for on-device inference and providing file access to\n * the isolated counter part {@link OnDeviceSandboxedInferenceService}.\n *\n * <p> A service that provides configuration and model files relevant to performing inference on\n * device. The system's default OnDeviceIntelligenceService implementation is configured in\n * {@code config_defaultOnDeviceIntelligenceService}. If this config has no value, a stub is\n * returned.\n *\n * <p> Similar to {@link OnDeviceIntelligenceManager} class, the contracts in this service are\n * defined to be open-ended in general, to allow interoperability. Therefore, it is recommended\n * that implementations of this system-service expose this API to the clients via a library which\n * has more defined contract.</p>\n * <pre>\n * {@literal\n * <service android:name=\".SampleOnDeviceIntelligenceService\"\n *          android:permission=\"android.permission.BIND_ON_DEVICE_INTELLIGENCE_SERVICE\">\n * </service>}\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.service.ondeviceintelligence.OnDeviceSandboxedInferenceService", "android.app.ondeviceintelligence.OnDeviceIntelligenceManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteProcessingService",
    "type" : "IRemoteProcessingService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service. To be supported, the\n     * service must also require the\n     * {@link android.Manifest.permission#BIND_ON_DEVICE_INTELLIGENCE_SERVICE}\n     * permission so that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_ON_DEVICE_INTELLIGENCE_SERVICE" ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReady()",
    "returnType" : "void",
    "comment" : "\n     * Using this signal to assertively a signal each time service binds successfully, used only in\n     * tests to get a signal that service instance is ready. This is needed because we cannot rely\n     * on {@link #onCreate} or {@link #onBind} to be invoke on each binding.\n     *\n     * @hide\n     ",
    "links" : [ "#onCreate", "#onBind" ]
  }, {
    "name" : "public abstract void onInferenceServiceConnected()",
    "returnType" : "void",
    "comment" : "\n     * Invoked when a new instance of the remote inference service is created.\n     * This method should be used as a signal to perform any initialization operations, for e.g. by\n     * invoking the {@link #updateProcessingState} method to initialize the remote processing\n     * service.\n     ",
    "links" : [ "#updateProcessingState" ]
  }, {
    "name" : "public abstract void onInferenceServiceDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Invoked when an instance of the remote inference service is disconnected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void updateProcessingState(@NonNull @StateParams Bundle processingState, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException> statusReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Invoked by the {@link OnDeviceIntelligenceService} inorder to send updates to the inference\n     * service if there is a state change to be performed. State change could be config updates,\n     * performing initialization or cleanup tasks in the remote inference service.\n     * The Bundle passed in here is expected to be read-only and will be rejected if it has any\n     * writable fields as detailed under {@link StateParams}.\n     *\n     * @param processingState  the updated state to be applied.\n     * @param callbackExecutor executor to the run status callback on.\n     * @param statusReceiver   receiver to get status of the update state operation.\n     ",
    "links" : [ "android.service.ondeviceintelligence.OnDeviceIntelligenceService", "android.app.ondeviceintelligence.OnDeviceIntelligenceManager.StateParams" ]
  }, {
    "name" : "private OutcomeReceiver<Feature, OnDeviceIntelligenceException> wrapFeatureCallback(IFeatureCallback featureCallback)",
    "returnType" : "OutcomeReceiver<Feature, OnDeviceIntelligenceException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException> wrapListFeaturesCallback(IListFeaturesCallback listFeaturesCallback)",
    "returnType" : "OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException> wrapFeatureDetailsCallback(IFeatureDetailsCallback featureStatusCallback)",
    "returnType" : "OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private DownloadCallback wrapDownloadCallback(IDownloadCallback downloadCallback)",
    "returnType" : "DownloadCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onGetReadOnlyFileDescriptor(@NonNull String fileName, @NonNull AndroidFuture<ParcelFileDescriptor> future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGetReadOnlyFeatureFileDescriptorMap(@NonNull Feature feature, @NonNull Consumer<Map<String, ParcelFileDescriptor>> fileDescriptorMapConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Provide implementation for a scenario when caller wants to get all feature related\n     * file-descriptors that might be required for processing a request for the corresponding the\n     * feature.\n     *\n     * @param feature                   the feature for which files need to be opened.\n     * @param fileDescriptorMapConsumer callback to be populated with a map of file-path and\n     *                                  corresponding ParcelDescriptor to be used in a remote\n     *                                  service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onDownloadFeature(int callerUid, @NonNull Feature feature, @Nullable CancellationSignal cancellationSignal, @NonNull DownloadCallback downloadCallback)",
    "returnType" : "void",
    "comment" : "\n     * Request download for feature that is requested and listen to download progress updates. If\n     * the download completes successfully, success callback should be populated.\n     *\n     * @param callerUid          UID of the caller that initiated this call chain.\n     * @param feature            the feature for which files need to be downlaoded.\n     *                           process.\n     * @param cancellationSignal signal to attach a listener to, and receive cancellation signals\n     *                           from thw client.\n     * @param downloadCallback   callback to populate download updates for clients to listen on..\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGetFeatureDetails(int callerUid, @NonNull Feature feature, @NonNull OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException> featureDetailsCallback)",
    "returnType" : "void",
    "comment" : "\n     * Provide feature details for the passed in feature. Usually the client and remote\n     * implementation use the {@link Feature#getFeatureParams()} as a hint to communicate what\n     * details the client is looking for.\n     *\n     * @param callerUid              UID of the caller that initiated this call chain.\n     * @param feature                the feature for which status needs to be known.\n     * @param featureDetailsCallback callback to populate the resulting feature status.\n     ",
    "links" : [ "android.app.ondeviceintelligence.Feature#getFeatureParams()" ]
  }, {
    "name" : "public abstract void onGetFeature(int callerUid, int featureId, @NonNull OutcomeReceiver<Feature, OnDeviceIntelligenceException> featureCallback)",
    "returnType" : "void",
    "comment" : "\n     * Get feature using the provided identifier to the remote implementation.\n     *\n     * @param callerUid       UID of the caller that initiated this call chain.\n     * @param featureCallback callback to populate the features list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onListFeatures(int callerUid, @NonNull OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException> listFeaturesCallback)",
    "returnType" : "void",
    "comment" : "\n     * List all features which are available in the remote implementation. The implementation might\n     * choose to provide only a certain list of features based on the caller.\n     *\n     * @param callerUid            UID of the caller that initiated this call chain.\n     * @param listFeaturesCallback callback to populate the features list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGetVersion(@NonNull LongConsumer versionConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Provides a long value representing the version of the remote implementation processing\n     * requests.\n     *\n     * @param versionConsumer consumer to populate the version.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public void onReady()", "public abstract void onInferenceServiceConnected()", "public abstract void onInferenceServiceDisconnected()", "public final void updateProcessingState(@NonNull @StateParams Bundle processingState, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException> statusReceiver)", "private OutcomeReceiver<Feature, OnDeviceIntelligenceException> wrapFeatureCallback(IFeatureCallback featureCallback)", "private OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException> wrapListFeaturesCallback(IListFeaturesCallback listFeaturesCallback)", "private OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException> wrapFeatureDetailsCallback(IFeatureDetailsCallback featureStatusCallback)", "private DownloadCallback wrapDownloadCallback(IDownloadCallback downloadCallback)", "private void onGetReadOnlyFileDescriptor(@NonNull String fileName, @NonNull AndroidFuture<ParcelFileDescriptor> future)", "public abstract void onGetReadOnlyFeatureFileDescriptorMap(@NonNull Feature feature, @NonNull Consumer<Map<String, ParcelFileDescriptor>> fileDescriptorMapConsumer)", "public abstract void onDownloadFeature(int callerUid, @NonNull Feature feature, @Nullable CancellationSignal cancellationSignal, @NonNull DownloadCallback downloadCallback)", "public abstract void onGetFeatureDetails(int callerUid, @NonNull Feature feature, @NonNull OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException> featureDetailsCallback)", "public abstract void onGetFeature(int callerUid, int featureId, @NonNull OutcomeReceiver<Feature, OnDeviceIntelligenceException> featureCallback)", "public abstract void onListFeatures(int callerUid, @NonNull OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException> listFeaturesCallback)", "public abstract void onGetVersion(@NonNull LongConsumer versionConsumer)" ],
  "variableNames" : [ "TAG", "mRemoteProcessingService", "mHandler", "SERVICE_INTERFACE" ]
}