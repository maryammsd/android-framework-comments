{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/Arg.java",
  "packageName" : "org.apache.xpath",
  "className" : "Arg",
  "comment" : "\n * This class holds an instance of an argument on\n * the stack. The value of the argument can be either an\n * XObject or a String containing an expression.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_qname",
    "type" : "QName",
    "comment" : " Field m_qname: The name of this argument, expressed as a QName\n   * (Qualified Name) object.\n   * @see getQName\n   * @see setQName\n   *  ",
    "links" : [ ]
  }, {
    "name" : "m_val",
    "type" : "XObject",
    "comment" : " Field m_val: Stored XObject value of this argument\n   * @see #getVal()\n   * @see #setVal()\n   ",
    "links" : [ ]
  }, {
    "name" : "m_expression",
    "type" : "String",
    "comment" : " Field m_expression: Stored expression value of this argument.\n   * @see #setExpression\n   * @see #getExpression\n   * ",
    "links" : [ ]
  }, {
    "name" : "m_isFromWithParam",
    "type" : "boolean",
    "comment" : " \n   * True if this variable was added with an xsl:with-param or\n   * is added via setParameter.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isVisible",
    "type" : "boolean",
    "comment" : " \n   * True if this variable is currently visible.  To be visible,\n   * a variable needs to come either from xsl:variable or be \n   * a \"received\" parameter, ie one for which an xsl:param has\n   * been encountered.\n   * Set at the time the object is constructed and updated as needed.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final QName getQName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the qualified name for this argument.\n   *\n   * @return QName object containing the qualified name\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setQName(QName name)",
    "returnType" : "void",
    "comment" : "\n   * Set the qualified name for this argument.\n   *\n   * @param name QName object representing the new Qualified Name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final XObject getVal()",
    "returnType" : "XObject",
    "comment" : "\n   * Get the value for this argument.\n   *\n   * @return the argument's stored XObject value.\n   * @see #setVal(XObject)\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setVal(XObject val)",
    "returnType" : "void",
    "comment" : "\n   * Set the value of this argument.\n   *\n   * @param val an XObject representing the arguments's value.\n   * @see #getVal()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Have the object release it's resources.\n   * Call only when the variable or argument is going out of scope.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getExpression()",
    "returnType" : "String",
    "comment" : "\n   * Get the value expression for this argument.\n   *\n   * @return String containing the expression previously stored into this\n   * argument\n   * @see #setExpression\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExpression(String expr)",
    "returnType" : "void",
    "comment" : "\n   * Set the value expression for this argument.\n   *\n   * @param expr String containing the expression to be stored as this\n   * argument's value.\n   * @see #getExpression\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFromWithParam()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this variable is a parameter passed with a with-param or as \n   * a top-level parameter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this variable is currently visible.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIsVisible(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * Update visibility status of this variable.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n   * Equality function specialized for the variable name.  If the argument \n   * is not a qname, it will deligate to the super class.\n   * \n   * @param   obj   the reference object with which to compare.\n   * @return  <code>true</code> if this object is the same as the obj\n   *          argument; <code>false</code> otherwise.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final QName getQName()", "public final void setQName(QName name)", "public final XObject getVal()", "public final void setVal(XObject val)", "public void detach()", "public String getExpression()", "public void setExpression(String expr)", "public boolean isFromWithParam()", "public boolean isVisible()", "public void setIsVisible(boolean b)", "public boolean equals(Object obj)" ],
  "variableNames" : [ "m_qname", "m_val", "m_expression", "m_isFromWithParam", "m_isVisible" ]
}