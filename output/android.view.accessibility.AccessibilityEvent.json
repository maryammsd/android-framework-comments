{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityEvent.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityEvent",
  "comment" : "\n * <p>\n * This class represents accessibility events that are sent by the system when\n * something notable happens in the user interface. For example, when a\n * {@link android.widget.Button} is clicked, a {@link android.view.View} is focused, etc.\n * </p>\n * <p>\n * An accessibility event is fired by an individual view which populates the event with\n * data for its state and requests from its parent to send the event to interested\n * parties. The parent can optionally modify or even block the event based on its broader\n * understanding of the user interface's context.\n * </p>\n * <p>\n * The main purpose of an accessibility event is to communicate changes in the UI to an\n * {@link android.accessibilityservice.AccessibilityService}. If needed, the service may then\n * inspect the user interface by examining the View hierarchy through the event's\n * {@link #getSource() source}, as represented by a tree of {@link AccessibilityNodeInfo}s (snapshot\n * of a View state) which can be used for exploring the window content. Note that the privilege for\n * accessing an event's source, thus the window content, has to be explicitly requested. For more\n * details refer to {@link android.accessibilityservice.AccessibilityService}. If an\n * accessibility service has not requested to retrieve the window content the event will\n * not contain reference to its source. <strong>Note: </strong> for events of type\n * {@link #TYPE_NOTIFICATION_STATE_CHANGED} the source is never available, and Views that set\n * {@link android.view.View#isAccessibilityDataSensitive()} may not populate all event properties on\n * events sent from higher up in the view hierarchy.\n * </p>\n * <p>\n * This class represents various semantically different accessibility event\n * types. Each event type has an associated set of related properties. In other\n * words, each event type is characterized via a subset of the properties exposed\n * by this class. For each event type there is a corresponding constant defined\n * in this class. Follows a specification of the event types and their associated properties:\n * </p>\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating and processing AccessibilityEvents, read the\n * <a href=\"{@docRoot}guide/topics/ui/accessibility/index.html\">Accessibility</a>\n * developer guide.</p>\n * </div>\n * <p>\n * <b>VIEW TYPES</b></br>\n * </p>\n * <p>\n * <b>View clicked</b> - represents the event of clicking on a {@link android.view.View}\n * like {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.</br>\n * <em>Type:</em>{@link #TYPE_VIEW_CLICKED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View long clicked</b> - represents the event of long clicking on a {@link android.view.View}\n * like {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc </br>\n * <em>Type:</em>{@link #TYPE_VIEW_LONG_CLICKED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View selected</b> - represents the event of selecting an item usually in\n * the context of an {@link android.widget.AdapterView}.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_SELECTED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View focused</b> - represents the event of focusing a\n * {@link android.view.View}.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_FOCUSED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View text changed</b> - represents the event of changing the text of an\n * {@link android.widget.EditText}.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_TEXT_CHANGED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n *   <li>{@link #getText()} - The new text of the source.</li>\n *   <li>{@link #getBeforeText()} - The text of the source before the change.</li>\n *   <li>{@link #getFromIndex()} - The text change start index.</li>\n *   <li>{@link #getAddedCount()} - The number of added characters.</li>\n *   <li>{@link #getRemovedCount()} - The number of removed characters.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View text selection changed</b> - represents the event of changing the text\n * selection of an {@link android.widget.EditText}.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_TEXT_SELECTION_CHANGED} </br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <b>View text traversed at movement granularity</b> - represents the event of traversing the\n * text of a view at a given granularity. For example, moving to the next word.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY} </br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n *   <li>{@link #getMovementGranularity()} - Sets the granularity at which a view's text\n *       was traversed.</li>\n *   <li>{@link #getText()} -  The text of the source's sub-tree.</li>\n *   <li>{@link #getFromIndex()} - The start the text that was skipped over in this movement.\n *       This is the starting point when moving forward through the text, but not when moving\n *       back.</li>\n *   <li>{@link #getToIndex()} - The end of the text that was skipped over in this movement.\n *       This is the ending point when moving forward through the text, but not when moving\n *       back.</li>\n *   <li>{@link #getAction()} - Gets traversal action which specifies the direction.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View scrolled</b> - represents the event of scrolling a view. </br>\n * <em>Type:</em> {@link #TYPE_VIEW_SCROLLED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n *   <li>{@link #getScrollDeltaX()} - The difference in the horizontal position.</li>\n *   <li>{@link #getScrollDeltaY()} - The difference in the vertical position.</li>\n *   <li>{@link #getMaxScrollX()} ()} -  The max scroll offset of the source left edge</li>\n *   <li>{@link #getMaxScrollY()} ()} - The max scroll offset of the source top edge.</li>\n * </ul>\n * </p>\n * <p>\n * <b>TRANSITION TYPES</b></br>\n * </p>\n * <p>\n * <b>Window state changed</b> - represents the event of a change to a section of\n * the user interface that is visually distinct. Should be sent from either the\n * root view of a window or from a view that is marked as a pane\n * {@link android.view.View#setAccessibilityPaneTitle(CharSequence)}. Note that changes\n * to true windows are represented by {@link #TYPE_WINDOWS_CHANGED}.</br>\n * <em>Type:</em> {@link #TYPE_WINDOW_STATE_CHANGED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getContentChangeTypes()} - The type of state changes.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n *   <li>{@link #getText()} - The text of the source's sub-tree, including the pane titles.</li>\n * </ul>\n * </p>\n * <p>\n * <b>Window content changed</b> - represents the event of change in the\n * content of a window. This change can be adding/removing view, changing\n * a view size, etc.</br>\n * </p>\n * <p>\n * <em>Type:</em> {@link #TYPE_WINDOW_CONTENT_CHANGED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getContentChangeTypes()} - The type of content changes.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>Windows changed</b> - represents a change in the windows shown on\n * the screen such as a window appeared, a window disappeared, a window size changed,\n * a window layer changed, etc. These events should only come from the system, which is responsible\n * for managing windows. The list of windows is available from\n * {@link android.accessibilityservice.AccessibilityService#getWindows()}.\n * For regions of the user interface that are presented as windows but are\n * controlled by an app's process, use {@link #TYPE_WINDOW_STATE_CHANGED}.</br>\n * <em>Type:</em> {@link #TYPE_WINDOWS_CHANGED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getEventTime()} - The event time.</li>\n *   <li>{@link #getWindowChanges()}</li> - The specific change to the source window\n * </ul>\n * <em>Note:</em> You can retrieve the {@link AccessibilityWindowInfo} for the window\n * source of the event by looking through the list returned by\n * {@link android.accessibilityservice.AccessibilityService#getWindows()} for the window whose ID\n * matches {@link #getWindowId()}.\n * </p>\n * <p>\n * <b>NOTIFICATION TYPES</b></br>\n * </p>\n * <p>\n * <b>Notification state changed</b> - represents the event showing a transient piece of information\n * to the user. This information may be a {@link android.app.Notification} or\n * {@link android.widget.Toast}.</br>\n * <em>Type:</em> {@link #TYPE_NOTIFICATION_STATE_CHANGED}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n *   <li>{@link #getParcelableData()} - The posted {@link android.app.Notification}, if\n *   applicable.</li>\n *   <li>{@link #getText()} - Displayed text of the {@link android.widget.Toast}, if applicable,\n *   or may contain text from the {@link android.app.Notification}, although\n *   {@link #getParcelableData()} is a richer set of data for {@link android.app.Notification}.</li>\n * </ul>\n * </p>\n * <p>\n * <b>EXPLORATION TYPES</b></br>\n * </p>\n * <p>\n * <b>View hover enter</b> - represents the event of beginning to hover\n * over a {@link android.view.View}. The hover may be generated via\n * exploring the screen by touch or via a pointing device.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_HOVER_ENTER}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <b>View hover exit</b> - represents the event of stopping to hover\n * over a {@link android.view.View}. The hover may be generated via\n * exploring the screen by touch or via a pointing device.</br>\n * <em>Type:</em> {@link #TYPE_VIEW_HOVER_EXIT}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>View scrolled to</b> - represents the event of a target node brought on screen by\n * ACTION_SCROLL_IN_DIRECTION.\n * <em>Type:</em> {@link #TYPE_VIEW_TARGETED_BY_SCROLL}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients). This represents the node\n *   that is brought on screen as a result of the scroll.</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n * <p>\n * <b>Touch interaction start</b> - represents the event of starting a touch\n * interaction, which is the user starts touching the screen.</br>\n * <em>Type:</em> {@link #TYPE_TOUCH_INTERACTION_START}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n * </ul>\n * <em>Note:</em> This event is fired only by the system and is not passed to the\n * view tree to be populated.</br>\n * </p>\n * <p>\n * <b>Touch interaction end</b> - represents the event of ending a touch\n * interaction, which is the user stops touching the screen.</br>\n * <em>Type:</em> {@link #TYPE_TOUCH_INTERACTION_END}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n * </ul>\n * <em>Note:</em> This event is fired only by the system and is not passed to the\n * view tree to be populated.</br>\n * </p>\n * <p>\n * <b>Touch exploration gesture start</b> - represents the event of starting a touch\n * exploring gesture.</br>\n * <em>Type:</em> {@link #TYPE_TOUCH_EXPLORATION_GESTURE_START}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n * </ul>\n * <em>Note:</em> This event is fired only by the system and is not passed to the\n * view tree to be populated.</br>\n * </p>\n * <p>\n * <b>Touch exploration gesture end</b> - represents the event of ending a touch\n * exploring gesture.</br>\n * <em>Type:</em> {@link #TYPE_TOUCH_EXPLORATION_GESTURE_END}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n * </ul>\n * <em>Note:</em> This event is fired only by the system and is not passed to the\n * view tree to be populated.</br>\n * </p>\n * <p>\n * <b>Touch gesture detection start</b> - represents the event of starting a user\n * gesture detection.</br>\n * <em>Type:</em> {@link #TYPE_GESTURE_DETECTION_START}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n * </ul>\n * <em>Note:</em> This event is fired only by the system and is not passed to the\n * view tree to be populated.</br>\n * </p>\n * <p>\n * <b>Touch gesture detection end</b> - represents the event of ending a user\n * gesture detection.</br>\n * <em>Type:</em> {@link #TYPE_GESTURE_DETECTION_END}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n * </ul>\n * <em>Note:</em> This event is fired only by the system and is not passed to the\n * view tree to be populated.</br>\n * </p>\n * <p>\n * <b>MISCELLANEOUS TYPES</b></br>\n * </p>\n * <p>\n * <b>Announcement</b> - represents the event of an application requesting a screen reader to make\n * an announcement. Because the event carries no semantic meaning, this event is appropriate only\n * in exceptional situations where additional screen reader output is needed but other types of\n * accessibility services do not need to be aware of the change.</br>\n * <em>Type:</em> {@link #TYPE_ANNOUNCEMENT}</br>\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getEventType()} - The type of the event.</li>\n *   <li>{@link #getSource()} - The source info (for registered clients).</li>\n *   <li>{@link #getClassName()} - The class name of the source.</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n *   <li>{@link #getText()} - The text of the announcement.</li>\n * </ul>\n * </p>\n  * <p>\n * <b>speechStateChanged</b>\n * <em>Type:</em> {@link #TYPE_SPEECH_STATE_CHANGE}</br>\n * Represents a change in the speech state defined by the\n * bit mask of the speech state change types.\n * A change in the speech state occurs when an application wants to signal that\n * it is either speaking or listening for human speech.\n * This event helps avoid conflicts where two applications want to speak or one listens\n * when another speaks.\n * When sending this event, the sender should ensure that  the accompanying state change types\n * make sense. For example, the sender should not send\n * {@link #SPEECH_STATE_SPEAKING_START} and {@link #SPEECH_STATE_SPEAKING_END} together.\n * <em>Properties:</em></br>\n * <ul>\n *   <li>{@link #getSpeechStateChangeTypes()} - The type of state changes</li>\n *   <li>{@link #getPackageName()} - The package name of the source.</li>\n *   <li>{@link #getEventTime()}  - The event time.</li>\n * </ul>\n * </p>\n *\n * @see android.view.accessibility.AccessibilityManager\n * @see android.accessibilityservice.AccessibilityService\n * @see AccessibilityNodeInfo\n ",
  "links" : [ "#TYPE_VIEW_SELECTED", "#getBeforeText()", "#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY", "#TYPE_SPEECH_STATE_CHANGE", "#getWindowId()", "#getEventType()", "android.accessibilityservice.AccessibilityService#getWindows()", "android.widget.Button", "android.view.View", "#TYPE_VIEW_TARGETED_BY_SCROLL", "#SPEECH_STATE_SPEAKING_END", "android.widget.AdapterView", "#TYPE_WINDOW_CONTENT_CHANGED", "#TYPE_WINDOWS_CHANGED", "#getSpeechStateChangeTypes()", "#getEventTime()", "#TYPE_VIEW_FOCUSED", "android.view.View#setAccessibilityPaneTitle(CharSequence)", "#TYPE_VIEW_LONG_CLICKED", "#getMaxScrollX()", "#TYPE_NOTIFICATION_STATE_CHANGED", "#TYPE_TOUCH_INTERACTION_START", "android.accessibilityservice.AccessibilityService", "#TYPE_VIEW_SCROLLED", "#getFromIndex()", "#TYPE_VIEW_TEXT_CHANGED", "#getScrollDeltaX()", "#TYPE_GESTURE_DETECTION_START", "android.view.View#isAccessibilityDataSensitive()", "android.app.Notification", "#getContentChangeTypes()", "#TYPE_ANNOUNCEMENT", "#getParcelableData()", "#getPackageName()", "android.view.accessibility.AccessibilityNodeInfo", "#getAction()", "#TYPE_VIEW_HOVER_ENTER", "#TYPE_GESTURE_DETECTION_END", "#getToIndex()", "#SPEECH_STATE_SPEAKING_START", "#getMovementGranularity()", "android.widget.Toast", "#TYPE_VIEW_HOVER_EXIT", "#getAddedCount()", "#TYPE_VIEW_TEXT_SELECTION_CHANGED", "#TYPE_WINDOW_STATE_CHANGED", "android.widget.CompoundButton", "#getRemovedCount()", "#getMaxScrollY()", "#getWindowChanges()", "#TYPE_TOUCH_INTERACTION_END", "#getSource()", "#getScrollDeltaY()", "#TYPE_TOUCH_EXPLORATION_GESTURE_START", "#getClassName()", "android.view.accessibility.AccessibilityWindowInfo", "#getText()", "#TYPE_VIEW_CLICKED", "#TYPE_TOUCH_EXPLORATION_GESTURE_END", "android.widget.EditText" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_ORIGIN",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INVALID_POSITION",
    "type" : "int",
    "comment" : "\n     * Invalid selection/focus position.\n     *\n     * @see #getCurrentItemIndex()\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_TEXT_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of the text fields.\n     *\n     * @see #getBeforeText()\n     * @see #getText()\n     * </br>\n     * Note: This constant is no longer needed since there\n     *       is no limit on the length of text that is contained\n     *       in an accessibility event anymore.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_CLICKED",
    "type" : "int",
    "comment" : "\n     * Represents the event of clicking on a {@link android.view.View} like\n     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.\n     * <p>See {@link AccessibilityNodeInfo.AccessibilityAction#ACTION_CLICK} for more\n     * details.\n     ",
    "links" : [ "android.widget.CompoundButton", "android.view.View", "android.widget.Button", "AccessibilityNodeInfo.AccessibilityAction#ACTION_CLICK" ]
  }, {
    "name" : "TYPE_VIEW_LONG_CLICKED",
    "type" : "int",
    "comment" : "\n     * Represents the event of long clicking on a {@link android.view.View} like\n     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.\n     * <p>See {@link AccessibilityNodeInfo.AccessibilityAction#ACTION_LONG_CLICK} for more\n     * details.\n     ",
    "links" : [ "android.widget.CompoundButton", "AccessibilityNodeInfo.AccessibilityAction#ACTION_LONG_CLICK", "android.view.View", "android.widget.Button" ]
  }, {
    "name" : "TYPE_VIEW_SELECTED",
    "type" : "int",
    "comment" : "\n     * Represents the event of selecting an item usually in the context of an\n     * {@link android.widget.AdapterView}.\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_SELECT\n     ",
    "links" : [ "android.widget.AdapterView" ]
  }, {
    "name" : "TYPE_VIEW_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Represents the event of setting input focus of a {@link android.view.View}.\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_ACCESSIBILITY_FOCUS for the difference\n     * between input and accessibility focus.\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "TYPE_VIEW_TEXT_CHANGED",
    "type" : "int",
    "comment" : "\n     * Represents the event of changing the text of an {@link android.widget.EditText}.\n     * @see AccessibilityNodeInfo#setText(CharSequence)\n     ",
    "links" : [ "android.widget.EditText" ]
  }, {
    "name" : "TYPE_WINDOW_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Represents the event of a change to a visually distinct section of the user interface.\n     * <p>\n     * These events should only be dispatched from {@link android.view.View}s that have\n     * accessibility pane titles, and replaces {@link #TYPE_WINDOW_CONTENT_CHANGED} for those\n     * sources. Details about the change are available from {@link #getContentChangeTypes()}.\n     * <p>\n     * Do not use this to get an accessibility service to make non-pane announcements. Instead,\n     * follow the practices described in {@link View#announceForAccessibility(CharSequence)}.\n     * <b>Note:</b> this does not suggest calling announceForAccessibility(), but using the\n     * suggestions listed in its documentation.\n     ",
    "links" : [ "android.view.View", "android.view.View#announceForAccessibility(CharSequence)", "#getContentChangeTypes()", "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "TYPE_NOTIFICATION_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Represents the event showing a {@link android.app.Notification}.\n     ",
    "links" : [ "android.app.Notification" ]
  }, {
    "name" : "TYPE_VIEW_HOVER_ENTER",
    "type" : "int",
    "comment" : "\n     * Represents the event of a hover enter over a {@link android.view.View}.\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "TYPE_VIEW_HOVER_EXIT",
    "type" : "int",
    "comment" : "\n     * Represents the event of a hover exit over a {@link android.view.View}.\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "TYPE_TOUCH_EXPLORATION_GESTURE_START",
    "type" : "int",
    "comment" : "\n     * Represents the event of starting a touch exploration gesture.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TOUCH_EXPLORATION_GESTURE_END",
    "type" : "int",
    "comment" : "\n     * Represents the event of ending a touch exploration gesture.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WINDOW_CONTENT_CHANGED",
    "type" : "int",
    "comment" : "\n     * Represents the event of changing the content of a window and more\n     * specifically the sub-tree rooted at the event's source.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_SCROLLED",
    "type" : "int",
    "comment" : "\n     * Represents the event of scrolling a view. This event type is generally not sent directly. In\n     * the View system, this is sent in\n     * {@link android.view.View#onScrollChanged(int, int, int, int)}\n     * <p>In addition to the source and package name, the event should populate scroll-specific\n     * properties like {@link #setScrollDeltaX(int)}, {@link #setScrollDeltaY(int)},\n     * {@link #setMaxScrollX(int)}, and {@link #setMaxScrollY(int)}.\n     * <p>Services are encouraged to rely on the source to query UI state over AccessibilityEvents\n     * properties. For example, to check after a scroll if the bottom of the scrolling UI element\n     * has been reached, check if the source node is scrollable and has the\n     * {@link AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_BACKWARD} action but not the\n     * {@link AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_FORWARD} action.\n     * For scrolling to a target, use {@link #TYPE_VIEW_TARGETED_BY_SCROLL}.\n     ",
    "links" : [ "#setScrollDeltaY(int)", "#setMaxScrollX(int)", "android.view.View#onScrollChanged(int", "AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_FORWARD", "#setScrollDeltaX(int)", "#setMaxScrollY(int)", "#TYPE_VIEW_TARGETED_BY_SCROLL", "AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_BACKWARD" ]
  }, {
    "name" : "TYPE_VIEW_TEXT_SELECTION_CHANGED",
    "type" : "int",
    "comment" : "\n     * Represents the event of changing the selection in an {@link android.widget.EditText}.\n     ",
    "links" : [ "android.widget.EditText" ]
  }, {
    "name" : "TYPE_ANNOUNCEMENT",
    "type" : "int",
    "comment" : "\n     * Represents the event of an application making an announcement.\n     * <p>\n     * In general, follow the practices described in\n     * {@link View#announceForAccessibility(CharSequence)}.\n     ",
    "links" : [ "android.view.View#announceForAccessibility(CharSequence)" ]
  }, {
    "name" : "TYPE_VIEW_ACCESSIBILITY_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Represents the event of gaining accessibility focus.\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_ACCESSIBILITY_FOCUS for the difference\n     * between input and accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED",
    "type" : "int",
    "comment" : "\n     * Represents the event of clearing accessibility focus.\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_ACCESSIBILITY_FOCUS for the difference\n     * between input and accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY",
    "type" : "int",
    "comment" : "\n     * Represents the event of traversing the text of a view at a given movement granularity.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GESTURE_DETECTION_START",
    "type" : "int",
    "comment" : "\n     * Represents the event of beginning gesture detection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GESTURE_DETECTION_END",
    "type" : "int",
    "comment" : "\n     * Represents the event of ending gesture detection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TOUCH_INTERACTION_START",
    "type" : "int",
    "comment" : "\n     * Represents the event of the user starting to touch the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TOUCH_INTERACTION_END",
    "type" : "int",
    "comment" : "\n     * Represents the event of the user ending to touch the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WINDOWS_CHANGED",
    "type" : "int",
    "comment" : "\n     * Represents the event change in the system windows shown on the screen. This event type should\n     * only be dispatched by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_CONTEXT_CLICKED",
    "type" : "int",
    "comment" : "\n     * Represents the event of a context click on a {@link android.view.View}.\n     * <p>See {@link AccessibilityNodeInfo.AccessibilityAction#ACTION_CONTEXT_CLICK} for more\n     * details.\n     ",
    "links" : [ "AccessibilityNodeInfo.AccessibilityAction#ACTION_CONTEXT_CLICK", "android.view.View" ]
  }, {
    "name" : "TYPE_ASSIST_READING_CONTEXT",
    "type" : "int",
    "comment" : "\n     * Represents the event of the assistant currently reading the users screen context.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SPEECH_STATE_CHANGE",
    "type" : "int",
    "comment" : "\n     * Represents a change in the speech state defined by the speech state change types.\n     * A change in the speech state occurs when an application wants to signal that it is either\n     * speaking or listening for human speech.\n     * This event helps avoid conflicts where two applications want to speak or one listens\n     * when another speaks.\n     * When sending this event, the sender should ensure that  the accompanying state change types\n     * make sense. For example, the sender should not send\n     * {@link #SPEECH_STATE_SPEAKING_START} and {@link #SPEECH_STATE_SPEAKING_END} together.\n     * @see #SPEECH_STATE_SPEAKING_START\n     * @see #SPEECH_STATE_SPEAKING_END\n     * @see #SPEECH_STATE_LISTENING_START\n     * @see #SPEECH_STATE_LISTENING_END\n     * @see #getSpeechStateChangeTypes\n     * @see #setSpeechStateChangeTypes\n     ",
    "links" : [ "#SPEECH_STATE_SPEAKING_END", "#SPEECH_STATE_SPEAKING_START" ]
  }, {
    "name" : "TYPE_VIEW_TARGETED_BY_SCROLL",
    "type" : "int",
    "comment" : "\n     * Represents the event of a scroll having completed and brought the target node on screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event: The type of change is not\n     * defined.\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_SUBTREE",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * One or more content changes occurred in the the subtree rooted at the source node,\n     * or the subtree's structure changed when a node was added or removed.\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_TEXT",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * The node's text changed.\n     * @see AccessibilityNodeInfo#setText(CharSequence)\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * The node's content description changed.\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_PANE_TITLE",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_STATE_CHANGED} event:\n     * The node's pane title changed.\n     * <p>\n     * If this makes the pane appear, {@link #CONTENT_CHANGE_TYPE_PANE_APPEARED} is sent\n     * instead. If this makes the pane disappear, {@link #CONTENT_CHANGE_TYPE_PANE_DISAPPEARED}\n     * is sent.\n     * @see View#setAccessibilityPaneTitle(CharSequence)\n     ",
    "links" : [ "#CONTENT_CHANGE_TYPE_PANE_APPEARED", "#TYPE_WINDOW_STATE_CHANGED", "#CONTENT_CHANGE_TYPE_PANE_DISAPPEARED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_PANE_APPEARED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_STATE_CHANGED} event:\n     * The node has a pane title, and either just appeared or just was assigned a title when it\n     * had none before.\n     * @see View#setAccessibilityPaneTitle(CharSequence)\n     ",
    "links" : [ "#TYPE_WINDOW_STATE_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_PANE_DISAPPEARED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_STATE_CHANGED} event:\n     * Can mean one of two slightly different things. The primary meaning is that the node has\n     * a pane title, and was removed from the node hierarchy. It will also be sent if the pane\n     * title is set to {@code null} after it contained a title.\n     * No source will be returned if the node is no longer on the screen. To make the change more\n     * clear for the user, the first entry in {@link #getText()} will return the value that would\n     * have been returned by {@code getSource().getPaneTitle()}.\n     * @see View#setAccessibilityPaneTitle(CharSequence)\n     ",
    "links" : [ "#TYPE_WINDOW_STATE_CHANGED", "#getText()" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_STATE_DESCRIPTION",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * state description of the node as returned by\n     * {@link AccessibilityNodeInfo#getStateDescription} changed. If part of the state description\n     * changes, the changed part can be put into event text. For example, if state description\n     * changed from \"on, wifi signal full\" to \"on, wifi three bars\", \"wifi three bars\" can be put\n     * into the event text.\n     * @see View#setStateDescription(CharSequence)\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#getStateDescription", "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_DRAG_STARTED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * A drag has started while accessibility is enabled. This is either via an\n     * AccessibilityAction, or via touch events. This is sent from the source that initiated the\n     * drag.\n     *\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_DRAG_START\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_DRAG_DROPPED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * A drag in with accessibility enabled has ended. This means the content has been\n     * successfully dropped. This is sent from the target that accepted the dragged content.\n     *\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_DRAG_DROP\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_DRAG_CANCELLED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * A drag in with accessibility enabled has ended. This means the content has been\n     * unsuccessfully dropped, the user has canceled the action via an AccessibilityAction, or\n     * no drop has been detected within a timeout and the drag was automatically cancelled. This is\n     * sent from the source that initiated the drag.\n     *\n     * @see AccessibilityNodeInfo.AccessibilityAction#ACTION_DRAG_CANCEL\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_CONTENT_INVALID",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * The source node changed its content validity returned by\n     * {@link AccessibilityNodeInfo#isContentInvalid}.\n     * The view changing content validity should call\n     * {@link AccessibilityNodeInfo#setContentInvalid} and then send this event.\n     *\n     * @see AccessibilityNodeInfo#isContentInvalid\n     * @see AccessibilityNodeInfo#setContentInvalid\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#setContentInvalid", "android.view.accessibility.AccessibilityNodeInfo#isContentInvalid", "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_ERROR",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * The source node changed its erroneous content's error message returned by\n     * {@link AccessibilityNodeInfo#getError}.\n     * The view changing erroneous content's error message should call\n     * {@link AccessibilityNodeInfo#setError} and then send this event.\n     *\n     * @see AccessibilityNodeInfo#getError\n     * @see AccessibilityNodeInfo#setError\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#setError", "android.view.accessibility.AccessibilityNodeInfo#getError", "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "CONTENT_CHANGE_TYPE_ENABLED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOW_CONTENT_CHANGED} event:\n     * The source node changed its ability to interact returned by\n     * {@link AccessibilityNodeInfo#isEnabled}.\n     * The view changing content's ability to interact should call\n     * {@link AccessibilityNodeInfo#setEnabled} and then send this event.\n     *\n     * @see AccessibilityNodeInfo#isEnabled\n     * @see AccessibilityNodeInfo#setEnabled\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#setEnabled", "#TYPE_WINDOW_CONTENT_CHANGED", "android.view.accessibility.AccessibilityNodeInfo#isEnabled" ]
  }, {
    "name" : "SPEECH_STATE_SPEAKING_START",
    "type" : "int",
    "comment" : " Change type for {@link #TYPE_SPEECH_STATE_CHANGE} event: another service is speaking. ",
    "links" : [ "#TYPE_SPEECH_STATE_CHANGE" ]
  }, {
    "name" : "SPEECH_STATE_SPEAKING_END",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_SPEECH_STATE_CHANGE} event: another service is no longer\n     * speaking.\n     ",
    "links" : [ "#TYPE_SPEECH_STATE_CHANGE" ]
  }, {
    "name" : "SPEECH_STATE_LISTENING_START",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_SPEECH_STATE_CHANGE} event: another service is listening to the\n     * microphone.\n     ",
    "links" : [ "#TYPE_SPEECH_STATE_CHANGE" ]
  }, {
    "name" : "SPEECH_STATE_LISTENING_END",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_SPEECH_STATE_CHANGE} event: another service is no longer\n     * listening to the microphone.\n     ",
    "links" : [ "#TYPE_SPEECH_STATE_CHANGE" ]
  }, {
    "name" : "WINDOWS_CHANGE_ADDED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window was added.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_REMOVED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * A window was removed.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_TITLE",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's title changed.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_BOUNDS",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's bounds changed.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#R R}, this event implies the window's\n     * region changed. It's also possible that region changed but bounds doesn't.\n     * </p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_LAYER",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's layer changed.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's {@link AccessibilityWindowInfo#isActive()} changed.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED", "android.view.accessibility.AccessibilityWindowInfo#isActive()" ]
  }, {
    "name" : "WINDOWS_CHANGE_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's {@link AccessibilityWindowInfo#isFocused()} changed.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowInfo#isFocused()", "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's {@link AccessibilityWindowInfo#isAccessibilityFocused()} changed.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowInfo#isAccessibilityFocused()", "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_PARENT",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's parent changed.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_CHILDREN",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window's children changed.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "WINDOWS_CHANGE_PIP",
    "type" : "int",
    "comment" : "\n     * Change type for {@link #TYPE_WINDOWS_CHANGED} event:\n     * The window either entered or exited picture-in-picture mode.\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "TYPES_ALL_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for {@link AccessibilityEvent} all types.\n     *\n     * @see #TYPE_VIEW_CLICKED\n     * @see #TYPE_VIEW_LONG_CLICKED\n     * @see #TYPE_VIEW_SELECTED\n     * @see #TYPE_VIEW_FOCUSED\n     * @see #TYPE_VIEW_TEXT_CHANGED\n     * @see #TYPE_WINDOW_STATE_CHANGED\n     * @see #TYPE_NOTIFICATION_STATE_CHANGED\n     * @see #TYPE_VIEW_HOVER_ENTER\n     * @see #TYPE_VIEW_HOVER_EXIT\n     * @see #TYPE_TOUCH_EXPLORATION_GESTURE_START\n     * @see #TYPE_TOUCH_EXPLORATION_GESTURE_END\n     * @see #TYPE_WINDOW_CONTENT_CHANGED\n     * @see #TYPE_VIEW_SCROLLED\n     * @see #TYPE_VIEW_TEXT_SELECTION_CHANGED\n     * @see #TYPE_ANNOUNCEMENT\n     * @see #TYPE_VIEW_ACCESSIBILITY_FOCUSED\n     * @see #TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED\n     * @see #TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY\n     * @see #TYPE_GESTURE_DETECTION_START\n     * @see #TYPE_GESTURE_DETECTION_END\n     * @see #TYPE_TOUCH_INTERACTION_START\n     * @see #TYPE_TOUCH_INTERACTION_END\n     * @see #TYPE_WINDOWS_CHANGED\n     * @see #TYPE_VIEW_CONTEXT_CLICKED\n     * @see #TYPE_ASSIST_READING_CONTEXT\n     * @see #TYPE_SPEECH_STATE_CHANGE\n     * @see #TYPE_VIEW_TARGETED_BY_SCROLL\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "mEventType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMovementGranularity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentChangeTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowChangeTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpeechStateChangeTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "originStackTrace",
    "type" : "StackTraceElement[]",
    "comment" : "\n     * The stack trace describing where this event originated from on the app side.\n     * Only populated if {@link #DEBUG_ORIGIN} is enabled\n     * Can be inspected(e.g. printed) from an\n     * {@link android.accessibilityservice.AccessibilityService} to trace where particular events\n     * are being dispatched from.\n     *\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#DEBUG_ORIGIN" ]
  }, {
    "name" : "mRecords",
    "type" : "ArrayList<AccessibilityRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AccessibilityEvent>",
    "comment" : "\n     * @see Parcelable.Creator\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void init(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Initialize an event from another one.\n     *\n     * @param event The event to initialize from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSealed(boolean sealed)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this instance is sealed.\n     *\n     * @param sealed Whether is sealed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRecordCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of records contained in the event.\n     *\n     * @return The number of records.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void appendRecord(AccessibilityRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Appends an {@link AccessibilityRecord} to the end of event records.\n     *\n     * @param record The record to append.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityRecord" ]
  }, {
    "name" : "public AccessibilityRecord getRecord(int index)",
    "returnType" : "AccessibilityRecord",
    "comment" : "\n     * Gets the record at a given index.\n     *\n     * @param index The index.\n     * @return The record at the specified index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEventType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the event type.\n     *\n     * @return The event type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentChangeTypes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the bit mask of change types signaled by a\n     * {@link #TYPE_WINDOW_CONTENT_CHANGED} event or {@link #TYPE_WINDOW_STATE_CHANGED}. A single\n     * event may represent multiple change types.\n     *\n     * @return The bit mask of change types. One or more of:\n     *         <ul>\n     *         <li>{@link #CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_STATE_DESCRIPTION}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_SUBTREE}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_TEXT}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_PANE_TITLE}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_UNDEFINED}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_PANE_APPEARED}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_PANE_DISAPPEARED}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_DRAG_STARTED}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_DRAG_DROPPED}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_DRAG_CANCELLED}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_CONTENT_INVALID}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_ERROR}\n     *         <li>{@link #CONTENT_CHANGE_TYPE_ENABLED}\n     *         </ul>\n     ",
    "links" : [ "#CONTENT_CHANGE_TYPE_ENABLED", "#CONTENT_CHANGE_TYPE_CONTENT_INVALID", "#TYPE_WINDOW_STATE_CHANGED", "#CONTENT_CHANGE_TYPE_TEXT", "#CONTENT_CHANGE_TYPE_PANE_DISAPPEARED", "#CONTENT_CHANGE_TYPE_ERROR", "#CONTENT_CHANGE_TYPE_UNDEFINED", "#CONTENT_CHANGE_TYPE_PANE_APPEARED", "#CONTENT_CHANGE_TYPE_STATE_DESCRIPTION", "#CONTENT_CHANGE_TYPE_PANE_TITLE", "#CONTENT_CHANGE_TYPE_DRAG_STARTED", "#CONTENT_CHANGE_TYPE_DRAG_CANCELLED", "#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION", "#TYPE_WINDOW_CONTENT_CHANGED", "#CONTENT_CHANGE_TYPE_SUBTREE", "#CONTENT_CHANGE_TYPE_DRAG_DROPPED" ]
  }, {
    "name" : "private static String contentChangeTypesToString(int types)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String singleContentChangeTypeToString(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContentChangeTypes(@ContentChangeTypes int changeTypes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bit mask of node tree changes signaled by an\n     * {@link #TYPE_WINDOW_CONTENT_CHANGED} event.\n     *\n     * @param changeTypes The bit mask of change types.\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @see #getContentChangeTypes()\n     ",
    "links" : [ "#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "public boolean isAccessibilityDataSensitive()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the event should only be delivered to an\n     * {@link android.accessibilityservice.AccessibilityService} with the\n     * {@link android.accessibilityservice.AccessibilityServiceInfo#isAccessibilityTool} property\n     * set to true.\n     *\n     * <p>\n     * Initial value matches the {@link android.view.View#isAccessibilityDataSensitive} property\n     * from the event's source node, if present, or false by default.\n     * </p>\n     *\n     * @return True if the event should be delivered only to isAccessibilityTool services, false\n     * otherwise.\n     * @see #setAccessibilityDataSensitive\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.accessibilityservice.AccessibilityServiceInfo#isAccessibilityTool", "android.view.View#isAccessibilityDataSensitive" ]
  }, {
    "name" : "public void setAccessibilityDataSensitive(boolean accessibilityDataSensitive)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the event should only be delivered to an\n     * {@link android.accessibilityservice.AccessibilityService} with the\n     * {@link android.accessibilityservice.AccessibilityServiceInfo#isAccessibilityTool} property\n     * set to true.\n     *\n     * <p>\n     * This will be set automatically based on the event's source (if present). If creating and\n     * sending an event directly through {@link AccessibilityManager} (where an event may have\n     * no source) then this method must be called explicitly if you want non-default behavior.\n     * </p>\n     *\n     * @param accessibilityDataSensitive True if the event should be delivered only to\n     *                                 isAccessibilityTool services, false otherwise.\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.accessibilityservice.AccessibilityServiceInfo#isAccessibilityTool", "android.view.accessibility.AccessibilityManager" ]
  }, {
    "name" : "public int getSpeechStateChangeTypes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the bit mask of the speech state signaled by a {@link #TYPE_SPEECH_STATE_CHANGE} event.\n     *\n     * @return The bit mask of speech change types.\n     *\n     * @see #SPEECH_STATE_SPEAKING_START\n     * @see #SPEECH_STATE_SPEAKING_END\n     * @see #SPEECH_STATE_LISTENING_START\n     * @see #SPEECH_STATE_LISTENING_END\n     ",
    "links" : [ "#TYPE_SPEECH_STATE_CHANGE" ]
  }, {
    "name" : "private static String speechStateChangeTypesToString(int types)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String singleSpeechStateChangeTypeToString(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSpeechStateChangeTypes(@SpeechStateChangeTypes int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bit mask of the speech state change types\n     * signaled by a {@link #TYPE_SPEECH_STATE_CHANGE} event.\n     * The sender is responsible for ensuring that  the state change types  make sense. For example,\n     * the sender should not send\n     * {@link #SPEECH_STATE_SPEAKING_START} and {@link #SPEECH_STATE_SPEAKING_END} together.\n     *\n     * @see #SPEECH_STATE_SPEAKING_START\n     * @see #SPEECH_STATE_SPEAKING_END\n     * @see #SPEECH_STATE_LISTENING_START\n     * @see #SPEECH_STATE_LISTENING_END\n     ",
    "links" : [ "#SPEECH_STATE_SPEAKING_END", "#TYPE_SPEECH_STATE_CHANGE", "#SPEECH_STATE_SPEAKING_START" ]
  }, {
    "name" : "public int getWindowChanges()",
    "returnType" : "int",
    "comment" : "\n     * Get the bit mask of change types signaled by a {@link #TYPE_WINDOWS_CHANGED} event. A\n     * single event may represent multiple change types.\n     *\n     * @return The bit mask of change types.\n     *\n     * @see #WINDOWS_CHANGE_ADDED\n     * @see #WINDOWS_CHANGE_REMOVED\n     * @see #WINDOWS_CHANGE_TITLE\n     * @see #WINDOWS_CHANGE_BOUNDS\n     * @see #WINDOWS_CHANGE_LAYER\n     * @see #WINDOWS_CHANGE_ACTIVE\n     * @see #WINDOWS_CHANGE_FOCUSED\n     * @see #WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED\n     * @see #WINDOWS_CHANGE_PARENT\n     * @see #WINDOWS_CHANGE_CHILDREN\n     * @see #WINDOWS_CHANGE_PIP\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "public void setWindowChanges(@WindowsChangeTypes int changes)",
    "returnType" : "void",
    "comment" : " @hide  ",
    "links" : [ ]
  }, {
    "name" : "private static String windowChangeTypesToString(@WindowsChangeTypes int types)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String singleWindowChangeTypeToString(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEventType(@EventType int eventType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the event type.\n     *\n     * <b>Note: An event must represent a single event type.</b>\n     * @param eventType The event type.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getEventTime()",
    "returnType" : "long",
    "comment" : "\n     * Gets the time in which this event was sent.\n     *\n     * @return The event time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEventTime(long eventTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time in which this event was sent.\n     *\n     * @param eventTime The event time.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getPackageName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the package name of the source.\n     *\n     * @return The package name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPackageName(CharSequence packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the package name of the source.\n     *\n     * @param packageName The package name.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMovementGranularity(int granularity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the movement granularity that was traversed.\n     *\n     * @param granularity The granularity.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMovementGranularity()",
    "returnType" : "int",
    "comment" : "\n     * Gets the movement granularity that was traversed.\n     *\n     * @return The granularity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAction(int action)",
    "returnType" : "void",
    "comment" : "\n     * Sets the performed action that triggered this event.\n     * <p>\n     * Valid actions are defined in {@link AccessibilityNodeInfo}:\n     * <ul>\n     * <li>{@link AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS}\n     * <li>{@link AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS}\n     * <li>{@link AccessibilityNodeInfo#ACTION_CLEAR_FOCUS}\n     * <li>{@link AccessibilityNodeInfo#ACTION_CLEAR_SELECTION}\n     * <li>{@link AccessibilityNodeInfo#ACTION_CLICK}\n     * <li>{@link AccessibilityNodeInfo#ACTION_LONG_CLICK}\n     * <li>{@link AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY}\n     * <li>{@link AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY}\n     * <li>{@link AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT}\n     * <li>{@link AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT}\n     * <li>{@link AccessibilityNodeInfo#ACTION_SCROLL_FORWARD}\n     * <li>{@link AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD}\n     * <li>{@link AccessibilityNodeInfo#ACTION_COPY}\n     * <li>{@link AccessibilityNodeInfo#ACTION_PASTE}\n     * <li>{@link AccessibilityNodeInfo#ACTION_CUT}\n     * <li>{@link AccessibilityNodeInfo#ACTION_SET_SELECTION}\n     * <li>{@link AccessibilityNodeInfo#ACTION_EXPAND}\n     * <li>{@link AccessibilityNodeInfo#ACTION_COLLAPSE}\n     * <li>{@link AccessibilityNodeInfo#ACTION_DISMISS}\n     * <li>{@link AccessibilityNodeInfo#ACTION_SET_TEXT}\n     * <li>etc.\n     * </ul>\n     *\n     * @param action The action.\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @see AccessibilityNodeInfo#performAction(int)\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY", "android.view.accessibility.AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT", "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS", "android.view.accessibility.AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS", "android.view.accessibility.AccessibilityNodeInfo#ACTION_CLEAR_FOCUS", "android.view.accessibility.AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY", "android.view.accessibility.AccessibilityNodeInfo#ACTION_DISMISS", "android.view.accessibility.AccessibilityNodeInfo#ACTION_CUT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_SET_TEXT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_LONG_CLICK", "android.view.accessibility.AccessibilityNodeInfo#ACTION_PASTE", "android.view.accessibility.AccessibilityNodeInfo#ACTION_CLICK", "android.view.accessibility.AccessibilityNodeInfo#ACTION_SCROLL_FORWARD", "android.view.accessibility.AccessibilityNodeInfo#ACTION_CLEAR_SELECTION", "android.view.accessibility.AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD", "android.view.accessibility.AccessibilityNodeInfo#ACTION_COPY", "android.view.accessibility.AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_COLLAPSE", "android.view.accessibility.AccessibilityNodeInfo#ACTION_SET_SELECTION", "android.view.accessibility.AccessibilityNodeInfo#ACTION_EXPAND" ]
  }, {
    "name" : "public int getAction()",
    "returnType" : "int",
    "comment" : "\n     * Gets the performed action that triggered this event.\n     *\n     * @return The action.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AccessibilityEvent obtainWindowsChangedEvent(int displayId, int windowId, int windowChangeTypes)",
    "returnType" : "AccessibilityEvent",
    "comment" : "\n     * Convenience method to obtain a {@link #TYPE_WINDOWS_CHANGED} event for a specific window and\n     * change set.\n     *\n     * @param displayId The ID of the display from which the event comes from\n     * @param windowId The ID of the window that changed\n     * @param windowChangeTypes The changes to populate\n     * @return An instance of a TYPE_WINDOWS_CHANGED, populated with the requested fields and with\n     *         importantForAccessibility set to {@code true}.\n     *\n     * @hide\n     ",
    "links" : [ "#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "public static AccessibilityEvent obtain(int eventType)",
    "returnType" : "AccessibilityEvent",
    "comment" : "\n     * Instantiates a new AccessibilityEvent instance with its type property set.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityEvent()} instead.\n     * @param eventType The event type.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityEvent()" ]
  }, {
    "name" : "public static AccessibilityEvent obtain(AccessibilityEvent event)",
    "returnType" : "AccessibilityEvent",
    "comment" : "\n     * Instantiates a new AccessibilityEvent instance.\n     * The returned instance is initialized from the given\n     * <code>event</code>.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityEvent()} instead.\n     * @param event The other event.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityEvent()" ]
  }, {
    "name" : "public static AccessibilityEvent obtain()",
    "returnType" : "AccessibilityEvent",
    "comment" : "\n     * Instantiates a new AccessibilityEvent instance.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityEvent()} instead.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityEvent()" ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Previously would recycle an instance back to be reused.\n     *\n     * @deprecated Object pooling has been discontinued. Calling this function now will have\n     * no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the state of this instance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initFromParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new instance from a {@link Parcel}.\n     *\n     * @param parcel A parcel containing the state of a {@link AccessibilityEvent}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent", "android.os.Parcel" ]
  }, {
    "name" : "private void readAccessibilityRecordFromParcel(AccessibilityRecord record, Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Reads an {@link AccessibilityRecord} from a parcel.\n     *\n     * @param record The record to initialize.\n     * @param parcel The parcel to read from.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityRecord" ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeAccessibilityRecordToParcel(AccessibilityRecord record, Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes an {@link AccessibilityRecord} to a parcel.\n     *\n     * @param record The record to write.\n     * @param parcel The parcel to which to write.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityRecord" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String eventTypeToString(int eventType)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of an event type. For example,\n     * {@link #TYPE_VIEW_CLICKED} is represented by the string TYPE_VIEW_CLICKED.\n     *\n     * @param eventType The event type\n     * @return The string representation.\n     ",
    "links" : [ "#TYPE_VIEW_CLICKED" ]
  }, {
    "name" : "private static String singleEventTypeToString(int eventType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void init(AccessibilityEvent event)", "public void setSealed(boolean sealed)", "public int getRecordCount()", "public void appendRecord(AccessibilityRecord record)", "public AccessibilityRecord getRecord(int index)", "public int getEventType()", "public int getContentChangeTypes()", "private static String contentChangeTypesToString(int types)", "private static String singleContentChangeTypeToString(int type)", "public void setContentChangeTypes(@ContentChangeTypes int changeTypes)", "public boolean isAccessibilityDataSensitive()", "public void setAccessibilityDataSensitive(boolean accessibilityDataSensitive)", "public int getSpeechStateChangeTypes()", "private static String speechStateChangeTypesToString(int types)", "private static String singleSpeechStateChangeTypeToString(int type)", "public void setSpeechStateChangeTypes(@SpeechStateChangeTypes int state)", "public int getWindowChanges()", "public void setWindowChanges(@WindowsChangeTypes int changes)", "private static String windowChangeTypesToString(@WindowsChangeTypes int types)", "private static String singleWindowChangeTypeToString(int type)", "public void setEventType(@EventType int eventType)", "public long getEventTime()", "public void setEventTime(long eventTime)", "public CharSequence getPackageName()", "public void setPackageName(CharSequence packageName)", "public void setMovementGranularity(int granularity)", "public int getMovementGranularity()", "public void setAction(int action)", "public int getAction()", "public static AccessibilityEvent obtainWindowsChangedEvent(int displayId, int windowId, int windowChangeTypes)", "public static AccessibilityEvent obtain(int eventType)", "public static AccessibilityEvent obtain(AccessibilityEvent event)", "public static AccessibilityEvent obtain()", "public void recycle()", "protected void clear()", "public void initFromParcel(Parcel parcel)", "private void readAccessibilityRecordFromParcel(AccessibilityRecord record, Parcel parcel)", "public void writeToParcel(Parcel parcel, int flags)", "private void writeAccessibilityRecordToParcel(AccessibilityRecord record, Parcel parcel, int flags)", "public int describeContents()", "public String toString()", "public static String eventTypeToString(int eventType)", "private static String singleEventTypeToString(int eventType)" ],
  "variableNames" : [ "LOG_TAG", "DEBUG", "DEBUG_ORIGIN", "INVALID_POSITION", "MAX_TEXT_LENGTH", "TYPE_VIEW_CLICKED", "TYPE_VIEW_LONG_CLICKED", "TYPE_VIEW_SELECTED", "TYPE_VIEW_FOCUSED", "TYPE_VIEW_TEXT_CHANGED", "TYPE_WINDOW_STATE_CHANGED", "TYPE_NOTIFICATION_STATE_CHANGED", "TYPE_VIEW_HOVER_ENTER", "TYPE_VIEW_HOVER_EXIT", "TYPE_TOUCH_EXPLORATION_GESTURE_START", "TYPE_TOUCH_EXPLORATION_GESTURE_END", "TYPE_WINDOW_CONTENT_CHANGED", "TYPE_VIEW_SCROLLED", "TYPE_VIEW_TEXT_SELECTION_CHANGED", "TYPE_ANNOUNCEMENT", "TYPE_VIEW_ACCESSIBILITY_FOCUSED", "TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED", "TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY", "TYPE_GESTURE_DETECTION_START", "TYPE_GESTURE_DETECTION_END", "TYPE_TOUCH_INTERACTION_START", "TYPE_TOUCH_INTERACTION_END", "TYPE_WINDOWS_CHANGED", "TYPE_VIEW_CONTEXT_CLICKED", "TYPE_ASSIST_READING_CONTEXT", "TYPE_SPEECH_STATE_CHANGE", "TYPE_VIEW_TARGETED_BY_SCROLL", "CONTENT_CHANGE_TYPE_UNDEFINED", "CONTENT_CHANGE_TYPE_SUBTREE", "CONTENT_CHANGE_TYPE_TEXT", "CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION", "CONTENT_CHANGE_TYPE_PANE_TITLE", "CONTENT_CHANGE_TYPE_PANE_APPEARED", "CONTENT_CHANGE_TYPE_PANE_DISAPPEARED", "CONTENT_CHANGE_TYPE_STATE_DESCRIPTION", "CONTENT_CHANGE_TYPE_DRAG_STARTED", "CONTENT_CHANGE_TYPE_DRAG_DROPPED", "CONTENT_CHANGE_TYPE_DRAG_CANCELLED", "CONTENT_CHANGE_TYPE_CONTENT_INVALID", "CONTENT_CHANGE_TYPE_ERROR", "CONTENT_CHANGE_TYPE_ENABLED", "SPEECH_STATE_SPEAKING_START", "SPEECH_STATE_SPEAKING_END", "SPEECH_STATE_LISTENING_START", "SPEECH_STATE_LISTENING_END", "WINDOWS_CHANGE_ADDED", "WINDOWS_CHANGE_REMOVED", "WINDOWS_CHANGE_TITLE", "WINDOWS_CHANGE_BOUNDS", "WINDOWS_CHANGE_LAYER", "WINDOWS_CHANGE_ACTIVE", "WINDOWS_CHANGE_FOCUSED", "WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED", "WINDOWS_CHANGE_PARENT", "WINDOWS_CHANGE_CHILDREN", "WINDOWS_CHANGE_PIP", "TYPES_ALL_MASK", "mEventType", "mPackageName", "mEventTime", "mMovementGranularity", "mAction", "mContentChangeTypes", "mWindowChangeTypes", "mSpeechStateChangeTypes", "originStackTrace", "mRecords", "CREATOR" ]
}