{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/compiler/Compiler.java",
  "packageName" : "org.apache.xpath.compiler",
  "className" : "Compiler",
  "comment" : "\n * An instance of this class compiles an XPath string expression into \n * a Expression object.  This class compiles the string into a sequence \n * of operation codes (op map) and then builds from that into an Expression \n * tree.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "locPathDepth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "s_nextMethodId",
    "type" : "long",
    "comment" : " The current id for extension functions.",
    "links" : [ ]
  }, {
    "name" : "m_currentPrefixResolver",
    "type" : "PrefixResolver",
    "comment" : "\n   * The current prefixResolver for the execution context.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_errorHandler",
    "type" : "ErrorListener",
    "comment" : " The error listener where errors will be sent.  If this is null, errors \n   *  and warnings will be sent to System.err.  May be null.    ",
    "links" : [ ]
  }, {
    "name" : "m_locator",
    "type" : "SourceLocator",
    "comment" : " The source locator for the expression being compiled.  May be null. ",
    "links" : [ ]
  }, {
    "name" : "m_functionTable",
    "type" : "FunctionTable",
    "comment" : "\n   * The FunctionTable for all xpath build-in functions\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Expression compile(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Execute the XPath object from a given opcode position.\n   * @param opPos The current position in the xpath.m_opMap array.\n   * @return The result of the XPath.\n   *\n   * @throws TransformerException if there is a syntax or other error.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "private Expression compileOperation(Operation operation, int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Bottle-neck compilation of an operation with left and right operands.\n   *\n   * @param operation non-null reference to parent operation.\n   * @param opPos The op map position of the parent operation.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Operation} instance.\n   *\n   * @throws TransformerException if there is a syntax or other error.\n   ",
    "links" : [ "org.apache.xpath.operations.Operation" ]
  }, {
    "name" : "private Expression compileUnary(UnaryOperation unary, int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Bottle-neck compilation of a unary operation.\n   *\n   * @param unary The parent unary operation.\n   * @param opPos The position in the op map of the parent operation.\n   *\n   * @return The unary argument.\n   *\n   * @throws TransformerException if syntax or other error occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected Expression or(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile an 'or' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Or} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Or" ]
  }, {
    "name" : "protected Expression and(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile an 'and' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.And} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.And" ]
  }, {
    "name" : "protected Expression notequals(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '!=' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.NotEquals} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.NotEquals" ]
  }, {
    "name" : "protected Expression equals(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '=' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Equals} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Equals" ]
  }, {
    "name" : "protected Expression lte(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '<=' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Lte} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Lte" ]
  }, {
    "name" : "protected Expression lt(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '<' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Lt} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Lt" ]
  }, {
    "name" : "protected Expression gte(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '>=' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Gte} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Gte" ]
  }, {
    "name" : "protected Expression gt(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '>' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Gt} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Gt" ]
  }, {
    "name" : "protected Expression plus(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '+' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Plus} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Plus" ]
  }, {
    "name" : "protected Expression minus(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '-' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Minus} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Minus" ]
  }, {
    "name" : "protected Expression mult(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a '*' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Mult} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Mult" ]
  }, {
    "name" : "protected Expression div(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a 'div' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Div} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Div" ]
  }, {
    "name" : "protected Expression mod(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a 'mod' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Mod} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Mod" ]
  }, {
    "name" : "protected Expression neg(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a unary '-' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Neg} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Neg" ]
  }, {
    "name" : "protected Expression string(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a 'string(...)' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.String} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.String" ]
  }, {
    "name" : "protected Expression bool(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a 'boolean(...)' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Bool} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Bool" ]
  }, {
    "name" : "protected Expression number(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a 'number(...)' operation.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Number} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Number" ]
  }, {
    "name" : "protected Expression literal(int opPos)",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a literal string value.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.objects.XString} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.objects.XString" ]
  }, {
    "name" : "protected Expression numberlit(int opPos)",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a literal number value.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.objects.XNumber} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.objects.XNumber" ]
  }, {
    "name" : "protected Expression variable(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a variable reference.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.operations.Variable} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.operations.Variable" ]
  }, {
    "name" : "protected Expression group(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile an expression group.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to the contained expression.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected Expression arg(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a function argument.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to the argument expression.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected Expression union(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a location path union. The UnionPathIterator itself may create\n   * {@link org.apache.xpath.axes.LocPathIterator} children.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.axes.LocPathIterator} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.axes.LocPathIterator" ]
  }, {
    "name" : "public int getLocationPathDepth()",
    "returnType" : "int",
    "comment" : "\n   * Get the level of the location path or union being constructed.  \n   * @return 0 if it is a top-level path.\n   ",
    "links" : [ ]
  }, {
    "name" : " FunctionTable getFunctionTable()",
    "returnType" : "FunctionTable",
    "comment" : "\n   * Get the function table  \n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression locationPath(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a location path.  The LocPathIterator itself may create\n   * {@link org.apache.xpath.axes.AxesWalker} children.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.axes.LocPathIterator} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.axes.AxesWalker", "org.apache.xpath.axes.LocPathIterator" ]
  }, {
    "name" : "public Expression predicate(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a location step predicate expression.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return the contained predicate expression.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected Expression matchPattern(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile an entire match pattern expression.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.patterns.UnionPattern} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.patterns.UnionPattern" ]
  }, {
    "name" : "public Expression locationPathPattern(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a location match pattern unit expression.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.patterns.StepPattern} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.patterns.StepPattern" ]
  }, {
    "name" : "public int getWhatToShow(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Get a {@link org.w3c.dom.traversal.NodeFilter} bit set that tells what \n   * to show for a given node test.\n   *\n   * @param opPos the op map position for the location step.\n   *\n   * @return {@link org.w3c.dom.traversal.NodeFilter} bit set that tells what \n   *         to show for a given node test.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "protected StepPattern stepPattern(int opPos, int stepCount, StepPattern ancestorPattern) throws TransformerException",
    "returnType" : "StepPattern",
    "comment" : "\n   * Compile a step pattern unit expression, used for both location paths \n   * and match patterns.\n   * \n   * @param opPos The current position in the m_opMap array.\n   * @param stepCount The number of steps to expect.\n   * @param ancestorPattern The owning StepPattern, which may be null.\n   *\n   * @return reference to {@link org.apache.xpath.patterns.StepPattern} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.patterns.StepPattern" ]
  }, {
    "name" : "public Expression[] getCompiledPredicates(int opPos) throws TransformerException",
    "returnType" : "Expression[]",
    "comment" : "\n   * Compile a zero or more predicates for a given match pattern.\n   * \n   * @param opPos The position of the first predicate the m_opMap array.\n   *\n   * @return reference to array of {@link org.apache.xpath.Expression} instances.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.Expression" ]
  }, {
    "name" : "public int countPredicates(int opPos) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Count the number of predicates in the step.\n   *\n   * @param opPos The position of the first predicate the m_opMap array.\n   *\n   * @return The number of predicates for this step.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void compilePredicates(int opPos, Expression[] predicates) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Compiles predicates in the step.\n   *\n   * @param opPos The position of the first predicate the m_opMap array.\n   * @param predicates An empty pre-determined array of \n   *            {@link org.apache.xpath.Expression}s, that will be filled in.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ "org.apache.xpath.Expression" ]
  }, {
    "name" : " Expression compileFunction(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile a built-in XPath function.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.functions.Function} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.functions.Function" ]
  }, {
    "name" : "private synchronized long getNextMethodId()",
    "returnType" : "long",
    "comment" : "\n   * Get the next available method id\n   ",
    "links" : [ ]
  }, {
    "name" : "private Expression compileExtension(int opPos) throws TransformerException",
    "returnType" : "Expression",
    "comment" : "\n   * Compile an extension function.\n   * \n   * @param opPos The current position in the m_opMap array.\n   *\n   * @return reference to {@link org.apache.xpath.functions.FuncExtFunction} instance.\n   *\n   * @throws TransformerException if a error occurs creating the Expression.\n   ",
    "links" : [ "org.apache.xpath.functions.FuncExtFunction" ]
  }, {
    "name" : "public void warn(String msg, Object[] args) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Warn the user of an problem.\n   *\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public void assertion(boolean b, java.lang.String msg)",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an assertion error, and probably throw an\n   * exception.\n   *\n   * @param b  If false, a runtime exception will be thrown.\n   * @param msg The assertion message, which should be informative.\n   * \n   * @throws RuntimeException if the b argument is false.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(String msg, Object[] args) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public PrefixResolver getNamespaceContext()",
    "returnType" : "PrefixResolver",
    "comment" : "\n   * Get the current namespace context for the xpath.\n   *\n   * @return The current prefix resolver, *may* be null, though hopefully not.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceContext(PrefixResolver pr)",
    "returnType" : "void",
    "comment" : "\n   * Set the current namespace context for the xpath.\n   *\n   * @param pr The resolver for prefixes in the XPath expression.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Expression compile(int opPos) throws TransformerException", "private Expression compileOperation(Operation operation, int opPos) throws TransformerException", "private Expression compileUnary(UnaryOperation unary, int opPos) throws TransformerException", "protected Expression or(int opPos) throws TransformerException", "protected Expression and(int opPos) throws TransformerException", "protected Expression notequals(int opPos) throws TransformerException", "protected Expression equals(int opPos) throws TransformerException", "protected Expression lte(int opPos) throws TransformerException", "protected Expression lt(int opPos) throws TransformerException", "protected Expression gte(int opPos) throws TransformerException", "protected Expression gt(int opPos) throws TransformerException", "protected Expression plus(int opPos) throws TransformerException", "protected Expression minus(int opPos) throws TransformerException", "protected Expression mult(int opPos) throws TransformerException", "protected Expression div(int opPos) throws TransformerException", "protected Expression mod(int opPos) throws TransformerException", "protected Expression neg(int opPos) throws TransformerException", "protected Expression string(int opPos) throws TransformerException", "protected Expression bool(int opPos) throws TransformerException", "protected Expression number(int opPos) throws TransformerException", "protected Expression literal(int opPos)", "protected Expression numberlit(int opPos)", "protected Expression variable(int opPos) throws TransformerException", "protected Expression group(int opPos) throws TransformerException", "protected Expression arg(int opPos) throws TransformerException", "protected Expression union(int opPos) throws TransformerException", "public int getLocationPathDepth()", " FunctionTable getFunctionTable()", "public Expression locationPath(int opPos) throws TransformerException", "public Expression predicate(int opPos) throws TransformerException", "protected Expression matchPattern(int opPos) throws TransformerException", "public Expression locationPathPattern(int opPos) throws TransformerException", "public int getWhatToShow(int opPos)", "protected StepPattern stepPattern(int opPos, int stepCount, StepPattern ancestorPattern) throws TransformerException", "public Expression[] getCompiledPredicates(int opPos) throws TransformerException", "public int countPredicates(int opPos) throws TransformerException", "private void compilePredicates(int opPos, Expression[] predicates) throws TransformerException", " Expression compileFunction(int opPos) throws TransformerException", "private synchronized long getNextMethodId()", "private Expression compileExtension(int opPos) throws TransformerException", "public void warn(String msg, Object[] args) throws TransformerException", "public void assertion(boolean b, java.lang.String msg)", "public void error(String msg, Object[] args) throws TransformerException", "public PrefixResolver getNamespaceContext()", "public void setNamespaceContext(PrefixResolver pr)" ],
  "variableNames" : [ "locPathDepth", "DEBUG", "s_nextMethodId", "m_currentPrefixResolver", "m_errorHandler", "m_locator", "m_functionTable" ]
}