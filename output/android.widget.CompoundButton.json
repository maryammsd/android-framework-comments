{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/CompoundButton.java",
  "packageName" : "android.widget",
  "className" : "CompoundButton",
  "comment" : "\n * <p>\n * A button with two states, checked and unchecked. When the button is pressed\n * or clicked, the state changes automatically.\n * </p>\n *\n * <p><strong>XML attributes</strong></p>\n * <p>\n * See {@link android.R.styleable#CompoundButton\n * CompoundButton Attributes}, {@link android.R.styleable#Button Button\n * Attributes}, {@link android.R.styleable#TextView TextView Attributes}, {@link\n * android.R.styleable#View View Attributes}\n * </p>\n ",
  "links" : [ "android.R.styleable#CompoundButtonCompoundButton", "android.R.styleable#TextView", "android.R.styleable#Button", "android.R.styleable#View" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChecked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcasting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mButtonDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mButtonTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mButtonBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasButtonTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasButtonBlendMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCheckedChangeListener",
    "type" : "OnCheckedChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCheckedChangeWidgetListener",
    "type" : "OnCheckedChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckedFromResource",
    "type" : "boolean",
    "comment" : " to sanitize autofill requests.",
    "links" : [ ]
  }, {
    "name" : "mCustomStateDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECKED_STATE_SET",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void toggle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performClick()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected CharSequence getButtonStateDescription()",
    "returnType" : "CharSequence",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setStateDescription(@Nullable CharSequence stateDescription)",
    "returnType" : "void",
    "comment" : "\n     * This function is called when an instance or subclass sets the state description. Once this\n     * is called and the argument is not null, the app developer will be responsible for updating\n     * state description when checked state changes and we will not set state description\n     * in {@link #setChecked}. App developers can restore the default behavior by setting the\n     * argument to null. If {@link #setChecked} is called first and then setStateDescription is\n     * called, two state change events will be merged by event throttling and we can still get\n     * the correct state description.\n     *\n     * @param stateDescription The state description.\n     ",
    "links" : [ "#setChecked" ]
  }, {
    "name" : "protected void setDefaultStateDescription()",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setChecked(boolean checked)",
    "returnType" : "void",
    "comment" : "\n     * <p>Changes the checked state of this button.</p>\n     *\n     * @param checked true to check the button, false to uncheck it\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCheckedChangeListener(@Nullable OnCheckedChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the checked state of this button\n     * changes.\n     *\n     * @param listener the callback to call on checked state change\n     ",
    "links" : [ ]
  }, {
    "name" : " void setOnCheckedChangeWidgetListener(OnCheckedChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the checked state of this button\n     * changes. This callback is used for internal purpose only.\n     *\n     * @param listener the callback to call on checked state change\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setButtonDrawable(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a drawable as the compound button image given its resource\n     * identifier.\n     *\n     * @param resId the resource identifier of the drawable\n     * @attr ref android.R.styleable#CompoundButton_button\n     ",
    "links" : [ ]
  }, {
    "name" : "public Runnable setButtonDrawableAsync(@DrawableRes int resId)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setButtonDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets a drawable as the compound button image.\n     *\n     * @param drawable the drawable to set\n     * @attr ref android.R.styleable#CompoundButton_button\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getButtonDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return the drawable used as the compound button image\n     * @see #setButtonDrawable(Drawable)\n     * @see #setButtonDrawable(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setButtonIcon(@Nullable Icon icon)",
    "returnType" : "void",
    "comment" : "\n     * Sets the button of this CompoundButton to the specified Icon.\n     *\n     * @param icon an Icon holding the desired button, or {@code null} to clear\n     *             the button\n     ",
    "links" : [ ]
  }, {
    "name" : "public Runnable setButtonIconAsync(@Nullable Icon icon)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setButtonTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the button drawable. Does not modify the current tint\n     * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setButtonDrawable(Drawable)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#CompoundButton_buttonTint\n     * @see #setButtonTintList(ColorStateList)\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setButtonDrawable(Drawable)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getButtonTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the button drawable\n     * @attr ref android.R.styleable#CompoundButton_buttonTint\n     * @see #setButtonTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setButtonTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setButtonTintList(ColorStateList)}} to the button drawable. The\n     * default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#CompoundButton_buttonTintMode\n     * @see #getButtonTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setButtonTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setButtonTintBlendMode(@Nullable BlendMode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setButtonTintList(ColorStateList)}} to the button drawable. The\n     * default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#CompoundButton_buttonTintMode\n     * @see #getButtonTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setButtonTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getButtonTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the button drawable\n     * @attr ref android.R.styleable#CompoundButton_buttonTintMode\n     * @see #setButtonTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getButtonTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the button drawable\n     * @attr ref android.R.styleable#CompoundButton_buttonTintMode\n     * @see #setButtonTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyButtonTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCompoundPaddingLeft()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCompoundPaddingRight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHorizontalOffsetForDrawables()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int[] onCreateDrawableState(int extraSpace)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void autofill(AutofillValue value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAutofillType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AutofillValue getAutofillValue()",
    "returnType" : "AutofillValue",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void toggle()", "public boolean performClick()", "public boolean isChecked()", "protected CharSequence getButtonStateDescription()", "public void setStateDescription(@Nullable CharSequence stateDescription)", "protected void setDefaultStateDescription()", "public void setChecked(boolean checked)", "public void setOnCheckedChangeListener(@Nullable OnCheckedChangeListener listener)", " void setOnCheckedChangeWidgetListener(OnCheckedChangeListener listener)", "public void setButtonDrawable(@DrawableRes int resId)", "public Runnable setButtonDrawableAsync(@DrawableRes int resId)", "public void setButtonDrawable(@Nullable Drawable drawable)", "public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection)", "public Drawable getButtonDrawable()", "public void setButtonIcon(@Nullable Icon icon)", "public Runnable setButtonIconAsync(@Nullable Icon icon)", "public void setButtonTintList(@Nullable ColorStateList tint)", "public ColorStateList getButtonTintList()", "public void setButtonTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setButtonTintBlendMode(@Nullable BlendMode tintMode)", "public PorterDuff.Mode getButtonTintMode()", "public BlendMode getButtonTintBlendMode()", "private void applyButtonTint()", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public int getCompoundPaddingLeft()", "public int getCompoundPaddingRight()", "public int getHorizontalOffsetForDrawables()", "protected void onDraw(Canvas canvas)", "protected int[] onCreateDrawableState(int extraSpace)", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", "protected boolean verifyDrawable(@NonNull Drawable who)", "public void jumpDrawablesToCurrentState()", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)", "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)", "public void autofill(AutofillValue value)", "public int getAutofillType()", "public AutofillValue getAutofillValue()" ],
  "variableNames" : [ "LOG_TAG", "mChecked", "mBroadcasting", "mButtonDrawable", "mButtonTintList", "mButtonBlendMode", "mHasButtonTint", "mHasButtonBlendMode", "mOnCheckedChangeListener", "mOnCheckedChangeWidgetListener", "mCheckedFromResource", "mCustomStateDescription", "CHECKED_STATE_SET" ]
}