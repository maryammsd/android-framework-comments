{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/PlayerBase.java",
  "packageName" : "android.media",
  "className" : "PlayerBase",
  "comment" : "\n * Class to encapsulate a number of common player operations:\n *   - AppOps for OP_PLAY_AUDIO\n *   - more to come (routing, transport control)\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_APP_OPS",
    "type" : "boolean",
    "comment" : " Debug app ops ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IAudioService",
    "comment" : "lazy initialization, use getService()",
    "links" : [ ]
  }, {
    "name" : "mAttributes",
    "type" : "AudioAttributes",
    "comment" : " parameters of the player that affect AppOps",
    "links" : [ ]
  }, {
    "name" : "mLeftVolume",
    "type" : "float",
    "comment" : "   the combination of the player volume, and the PlayerBase pan and volume multipliers",
    "links" : [ ]
  }, {
    "name" : "mRightVolume",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuxEffectSendLevel",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " causing deadlocks between the two",
    "links" : [ ]
  }, {
    "name" : "mAppOps",
    "type" : "IAppOpsService",
    "comment" : " for AppOps",
    "links" : [ ]
  }, {
    "name" : "mAppOpsCallback",
    "type" : "IAppOpsCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAppOpsPlayAudio",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImplType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayerIId",
    "type" : "int",
    "comment" : " uniquely identifies the Player Interface throughout the system (P I Id)",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartDelayMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPanMultiplierL",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPanMultiplierR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolMultiplier",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPlayerIId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void baseRegisterPlayer(int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Call from derived class when instantiation / initialization is successful\n     ",
    "links" : [ ]
  }, {
    "name" : " void baseUpdateAudioAttributes(@NonNull AudioAttributes attr)",
    "returnType" : "void",
    "comment" : "\n     * To be called whenever the audio attributes of the player change\n     * @param attr non-null audio attributes\n     ",
    "links" : [ ]
  }, {
    "name" : " void baseUpdateSessionId(int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * To be called whenever the session ID of the player changes\n     * @param sessionId, the new session Id\n     ",
    "links" : [ ]
  }, {
    "name" : " void baseUpdateDeviceId(@Nullable AudioDeviceInfo deviceInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateState(int state, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void baseStart(int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void baseSetStartDelayMs(int delayMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getStartDelayMs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void basePause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void baseStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void baseSetPan(float pan)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePlayerVolume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setVolumeMultiplier(float vol)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void baseSetVolume(float leftVolume, float rightVolume)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int baseSetAuxEffectSendLevel(float level)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void baseRelease()",
    "returnType" : "void",
    "comment" : "\n     * To be called from a subclass release or finalize method.\n     * Releases AppOps related resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IAudioService getService()",
    "returnType" : "IAudioService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStartDelayMs(int delayMs)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @param delayMs\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void playerSetVolume(boolean muting, float leftVolume, float rightVolume)",
    "returnType" : "void",
    "comment" : "\n     * Abstract method for the subclass behavior's for volume and muting commands\n     * @param muting if true, the player is to be muted, and the volume values can be ignored\n     * @param leftVolume the left volume to use if muting is false\n     * @param rightVolume the right volume to use if muting is false\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract int playerApplyVolumeShaper(@NonNull VolumeShaper.Configuration configuration, @NonNull VolumeShaper.Operation operation)",
    "returnType" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " abstract VolumeShaper.State playerGetVolumeShaperState(int id)",
    "returnType" : "VolumeShaper.State",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " abstract int playerSetAuxEffectSendLevel(boolean muting, float level)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void playerStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void playerPause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void playerStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void deprecateStreamTypeForPlayback(int streamType, @NonNull String className, @NonNull String opName) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Use to generate warning or exception in legacy code paths that allowed passing stream types\n     * to qualify audio playback.\n     * @param streamType the stream type to check\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String getCurrentOpPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int resolvePlaybackSessionId(@Nullable Context context, int requestedSessionId)",
    "returnType" : "int",
    "comment" : "\n     * Helper method to resolve which session id should be used for player initialization.\n     *\n     * This method will assign session id in following way:\n     * 1. Explicitly requested session id has the highest priority, if there is one,\n     *    it will be used.\n     * 2. If there's device-specific session id associated with the provided context,\n     *    it will be used.\n     * 3. Otherwise {@link AUDIO_SESSION_ID_GENERATE} is returned.\n     *\n     * @param context {@link Context} to use for extraction of device specific session id.\n     * @param requestedSessionId explicitly requested session id or AUDIO_SESSION_ID_GENERATE.\n     * @return session id to be passed to AudioService for the player initialization given\n     *   provided {@link Context} instance and explicitly requested session id.\n     ",
    "links" : [ "android.content.Context", "android.media.AudioManager.AUDIO_SESSION_ID_GENERATE" ]
  } ],
  "methodNames" : [ "public int getPlayerIId()", "protected void baseRegisterPlayer(int sessionId)", " void baseUpdateAudioAttributes(@NonNull AudioAttributes attr)", " void baseUpdateSessionId(int sessionId)", " void baseUpdateDeviceId(@Nullable AudioDeviceInfo deviceInfo)", "private void updateState(int state, int deviceId)", " void baseStart(int deviceId)", " void baseSetStartDelayMs(int delayMs)", "protected int getStartDelayMs()", " void basePause()", " void baseStop()", " void baseSetPan(float pan)", "private void updatePlayerVolume()", " void setVolumeMultiplier(float vol)", " void baseSetVolume(float leftVolume, float rightVolume)", " int baseSetAuxEffectSendLevel(float level)", " void baseRelease()", "private static IAudioService getService()", "public void setStartDelayMs(int delayMs)", " abstract void playerSetVolume(boolean muting, float leftVolume, float rightVolume)", " abstract int playerApplyVolumeShaper(@NonNull VolumeShaper.Configuration configuration, @NonNull VolumeShaper.Operation operation)", " abstract VolumeShaper.State playerGetVolumeShaperState(int id)", " abstract int playerSetAuxEffectSendLevel(boolean muting, float level)", " abstract void playerStart()", " abstract void playerPause()", " abstract void playerStop()", "public static void deprecateStreamTypeForPlayback(int streamType, @NonNull String className, @NonNull String opName) throws IllegalArgumentException", "protected String getCurrentOpPackageName()", "protected static int resolvePlaybackSessionId(@Nullable Context context, int requestedSessionId)" ],
  "variableNames" : [ "TAG", "DEBUG_APP_OPS", "DEBUG", "sService", "mAttributes", "mLeftVolume", "mRightVolume", "mAuxEffectSendLevel", "mLock", "mAppOps", "mAppOpsCallback", "mHasAppOpsPlayAudio", "mImplType", "mPlayerIId", "mState", "mStartDelayMs", "mPanMultiplierL", "mPanMultiplierR", "mVolMultiplier", "mDeviceId" ]
}