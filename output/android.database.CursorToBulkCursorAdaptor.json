{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/CursorToBulkCursorAdaptor.java",
  "packageName" : "android.database",
  "className" : "CursorToBulkCursorAdaptor",
  "comment" : "\n * Wraps a BulkCursor around an existing Cursor making it remotable.\n * <p>\n * If the wrapped cursor returns non-null from {@link CrossProcessCursor#getWindow}\n * then it is assumed to own the window.  Otherwise, the adaptor provides a\n * window to be filled and ensures it gets closed as needed during deactivation\n * and requeries.\n * </p>\n *\n * {@hide}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObserver",
    "type" : "ContentObserverProxy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursor",
    "type" : "CrossProcessCursor",
    "comment" : "\n     * The cursor that is being adapted.\n     * This field is set to null when the cursor is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFilledWindow",
    "type" : "CursorWindow",
    "comment" : "\n     * The cursor window that was filled by the cross process cursor in the\n     * case where the cursor does not support getWindow.\n     * This field is only ever non-null when the window has actually be filled.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void closeFilledWindowLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void disposeLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfCursorIsClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BulkCursorDescriptor getBulkCursorDescriptor()",
    "returnType" : "BulkCursorDescriptor",
    "comment" : "\n     * Returns an object that contains sufficient metadata to reconstruct\n     * the cursor remotely.  May throw if an error occurs when executing the query\n     * and obtaining the row count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CursorWindow getWindow(int position)",
    "returnType" : "CursorWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onMove(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deactivate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int requery(IContentObserver observer)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createAndRegisterObserverProxyLocked(IContentObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Create a ContentObserver from the observer and register it as an observer on the\n     * underlying cursor.\n     * @param observer the IContentObserver that wants to monitor the cursor\n     * @throws IllegalStateException if an observer is already registered\n     ",
    "links" : [ ]
  }, {
    "name" : "private void unregisterObserverProxyLocked()",
    "returnType" : "void",
    "comment" : " Unregister the observer if it is already registered. ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle respond(Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mLock", "mProviderName", "mObserver", "mCursor", "mFilledWindow" ],
  "methodNames" : [ "private void closeFilledWindowLocked()", "private void disposeLocked()", "private void throwIfCursorIsClosed()", "public void binderDied()", "public BulkCursorDescriptor getBulkCursorDescriptor()", "public CursorWindow getWindow(int position)", "public void onMove(int position)", "public void deactivate()", "public void close()", "public int requery(IContentObserver observer)", "private void createAndRegisterObserverProxyLocked(IContentObserver observer)", "private void unregisterObserverProxyLocked()", "public Bundle getExtras()", "public Bundle respond(Bundle extras)" ]
}