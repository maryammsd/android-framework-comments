{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/appprediction/AppPredictionService.java",
  "packageName" : "android.service.appprediction",
  "className" : "AppPredictionService",
  "comment" : "\n * A service used to predict app and shortcut usage.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>The service must also require the {@link android.permission#MANAGE_APP_PREDICTIONS}\n     * permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.permission#MANAGE_APP_PREDICTIONS", "android.content.Intent" ]
  }, {
    "name" : "mSessionCallbacks",
    "type" : "ArrayMap<AppPredictionSessionId, ArrayList<CallbackWrapper>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IPredictionService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onAppTargetEvent(@NonNull AppPredictionSessionId sessionId, @NonNull AppTargetEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Called by a client app to indicate a target launch\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onLaunchLocationShown(@NonNull AppPredictionSessionId sessionId, @NonNull String launchLocation, @NonNull List<AppTargetId> targetIds)",
    "returnType" : "void",
    "comment" : "\n     * Called by a client app to indication a particular location has been shown to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doCreatePredictionSession(@NonNull AppPredictionContext context, @NonNull AppPredictionSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreatePredictionSession(@NonNull AppPredictionContext context, @NonNull AppPredictionSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new interaction session.\n     *\n     * @param context interaction context\n     * @param sessionId the session's Id\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSortAppTargets(@NonNull AppPredictionSessionId sessionId, @NonNull List<AppTarget> targets, @NonNull CancellationSignal cancellationSignal, @NonNull Consumer<List<AppTarget>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by the client app to request sorting of targets based on prediction rank.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doRegisterPredictionUpdates(@NonNull AppPredictionSessionId sessionId, @NonNull IPredictionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStartPredictionUpdates()",
    "returnType" : "void",
    "comment" : "\n     * Called when any continuous prediction callback is registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doUnregisterPredictionUpdates(@NonNull AppPredictionSessionId sessionId, @NonNull IPredictionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeCallbackWrapper(@Nullable ArrayList<CallbackWrapper> callbacks, @Nullable CallbackWrapper wrapper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStopPredictionUpdates()",
    "returnType" : "void",
    "comment" : "\n     * Called when there are no longer any continuous prediction callbacks registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doRequestPredictionUpdate(@NonNull AppPredictionSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRequestPredictionUpdate(@NonNull AppPredictionSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Called by the client app to request target predictions. This method is only called if there\n     * are one or more prediction callbacks registered.\n     *\n     * @see #updatePredictions(AppPredictionSessionId, List)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doDestroyPredictionSession(@NonNull AppPredictionSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroyPredictionSession(@NonNull AppPredictionSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Destroys the interaction session.\n     *\n     * @param sessionId the id of the session to destroy\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRequestServiceFeatures(@NonNull AppPredictionSessionId sessionId, @NonNull Consumer<Bundle> callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by the client app to request {@link AppPredictionService} features info.\n     *\n     * @param sessionId the session's Id. It is @NonNull.\n     * @param callback the callback to return the Bundle which includes service features info. It\n     *                is @NonNull.\n     ",
    "links" : [ "android.service.appprediction.AppPredictionService" ]
  }, {
    "name" : "public final void updatePredictions(@NonNull AppPredictionSessionId sessionId, @NonNull List<AppTarget> targets)",
    "returnType" : "void",
    "comment" : "\n     * Used by the prediction factory to send back results the client app. The can be called\n     * in response to {@link #onRequestPredictionUpdate(AppPredictionSessionId)} or proactively as\n     * a result of changes in predictions.\n     ",
    "links" : [ "#onRequestPredictionUpdate(AppPredictionSessionId)" ]
  }, {
    "name" : "private CallbackWrapper findCallbackWrapper(ArrayList<CallbackWrapper> callbacks, IPredictionCallback callback)",
    "returnType" : "CallbackWrapper",
    "comment" : "\n     * Finds the callback wrapper for the given callback.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public abstract void onAppTargetEvent(@NonNull AppPredictionSessionId sessionId, @NonNull AppTargetEvent event)", "public abstract void onLaunchLocationShown(@NonNull AppPredictionSessionId sessionId, @NonNull String launchLocation, @NonNull List<AppTargetId> targetIds)", "private void doCreatePredictionSession(@NonNull AppPredictionContext context, @NonNull AppPredictionSessionId sessionId)", "public void onCreatePredictionSession(@NonNull AppPredictionContext context, @NonNull AppPredictionSessionId sessionId)", "public abstract void onSortAppTargets(@NonNull AppPredictionSessionId sessionId, @NonNull List<AppTarget> targets, @NonNull CancellationSignal cancellationSignal, @NonNull Consumer<List<AppTarget>> callback)", "private void doRegisterPredictionUpdates(@NonNull AppPredictionSessionId sessionId, @NonNull IPredictionCallback callback)", "public void onStartPredictionUpdates()", "private void doUnregisterPredictionUpdates(@NonNull AppPredictionSessionId sessionId, @NonNull IPredictionCallback callback)", "private void removeCallbackWrapper(@Nullable ArrayList<CallbackWrapper> callbacks, @Nullable CallbackWrapper wrapper)", "public void onStopPredictionUpdates()", "private void doRequestPredictionUpdate(@NonNull AppPredictionSessionId sessionId)", "public abstract void onRequestPredictionUpdate(@NonNull AppPredictionSessionId sessionId)", "private void doDestroyPredictionSession(@NonNull AppPredictionSessionId sessionId)", "public void onDestroyPredictionSession(@NonNull AppPredictionSessionId sessionId)", "public void onRequestServiceFeatures(@NonNull AppPredictionSessionId sessionId, @NonNull Consumer<Bundle> callback)", "public final void updatePredictions(@NonNull AppPredictionSessionId sessionId, @NonNull List<AppTarget> targets)", "private CallbackWrapper findCallbackWrapper(ArrayList<CallbackWrapper> callbacks, IPredictionCallback callback)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "mSessionCallbacks", "mHandler", "mInterface" ]
}