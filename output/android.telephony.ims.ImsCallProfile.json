{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/ImsCallProfile.java",
  "packageName" : "android.telephony.ims",
  "className" : "ImsCallProfile",
  "comment" : "\n * A Parcelable object to handle the IMS call profile, which provides the service, call type, and\n * additional information related to the call.\n * <p>\n * See the following specifications for more information about this class: GSMA IR.92/IR.94,\n * 3GPP TS 24.229/TS 26.114/TS26.111.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * It is for a special case. It helps that the application can make a call\n     * without IMS connection (not registered).\n     * In the moment of the call initiation, the device try to connect to the IMS network\n     * and initiates the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_NORMAL",
    "type" : "int",
    "comment" : "\n     * It is a default type and can be selected when the device is connected to the IMS network.\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * It is for an emergency call.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * This value is returned if there is no valid IMS call type defined for the call. For example,\n     * if an ongoing call is circuit-switched and {@link CallState#getImsCallType()} is called, this\n     * value will be returned.\n     ",
    "links" : [ "android.telephony.CallState#getImsCallType()" ]
  }, {
    "name" : "CALL_TYPE_VOICE_N_VIDEO",
    "type" : "int",
    "comment" : "\n     * IMSPhone to support IR.92 & IR.94 (voice + video upgrade/downgrade)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VOICE",
    "type" : "int",
    "comment" : "\n     * IR.92 (Voice only)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VIDEO_N_VOICE",
    "type" : "int",
    "comment" : "\n     * VT to support IR.92 & IR.94 (voice + video upgrade/downgrade)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VT",
    "type" : "int",
    "comment" : "\n     * Video Telephony (audio / video two way)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VT_TX",
    "type" : "int",
    "comment" : "\n     * Video Telephony (audio two way / video TX one way)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VT_RX",
    "type" : "int",
    "comment" : "\n     * Video Telephony (audio two way / video RX one way)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VT_NODIR",
    "type" : "int",
    "comment" : "\n     * Video Telephony (audio two way / video inactive)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VS",
    "type" : "int",
    "comment" : "\n     * VideoShare (video two way)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VS_TX",
    "type" : "int",
    "comment" : "\n     * VideoShare (video TX one way)\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_VS_RX",
    "type" : "int",
    "comment" : "\n     * VideoShare (video RX one way)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONFERENCE",
    "type" : "String",
    "comment" : "\n     * Indicates if the session is for a conference call or not. If not defined, should be\n     * considered {@code false}.\n     * Boolean extra properties - {@code true} / {@code false}.\n     *\n     * This extra is set on an instance of {@link ImsCallProfile} via {@link #setCallExtraBoolean}.\n     * @hide\n     ",
    "links" : [ "#setCallExtraBoolean", "android.telephony.ims.ImsCallProfile" ]
  }, {
    "name" : "EXTRA_CONFERENCE_DEPRECATED",
    "type" : "String",
    "comment" : "\n     * The previous string of EXTRA_CONFERENCE. Use EXTRA_CONFERENCE whenever possible.\n     * For external app or vendor code backward compatibility, we should always set value for both\n     * EXTRA_CONFERENCE_DEPRECATED and EXTRA_CONFERENCE.\n     *\n     * @deprecated Remove when not needed anymore.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_EMERGENCY_CALL",
    "type" : "String",
    "comment" : "\n     * Boolean extra property set on an {@link ImsCallProfile} to indicate that this call is an\n     * emergency call.  The {@link ImsService} sets this on a call to indicate that the network has\n     * identified the call as an emergency call.\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "EXTRA_VMS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALL_MODE_CHANGEABLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_EXTENDING_TO_CONFERENCE_SUPPORTED",
    "type" : "String",
    "comment" : "\n     * Indicates if the session can be extended to a conference call. If not defined, should be\n     * considered {@code false}.\n     * Boolean extra properties - {@code true} / {@code false}.\n     *\n     * This extra is set on an instance of {@link ImsCallProfile} via {@link #setCallExtraBoolean}.\n     * @hide\n     ",
    "links" : [ "#setCallExtraBoolean", "android.telephony.ims.ImsCallProfile" ]
  }, {
    "name" : "EXTRA_CONFERENCE_AVAIL",
    "type" : "String",
    "comment" : "\n     * The previous string of EXTRA_EXTENDING_TO_CONFERENCE_SUPPORTED.\n     * Use EXTRA_EXTENDING_TO_CONFERENCE_SUPPORTED whenever possible.\n     * For backward compatibility, we should always set value for both\n     * EXTRA_EXTENDING_TO_CONFERENCE_SUPPORTED and EXTRA_CONFERENCE_AVAIL.\n     *\n     * @deprecated Remove when not needed anymore.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_OEM_EXTRAS",
    "type" : "String",
    "comment" : "\n     * Extra key used to store a Bundle containing proprietary extras to send to the ImsService.\n     * Use {@link #getProprietaryCallExtras()} instead.\n     * @hide\n     ",
    "links" : [ "#getProprietaryCallExtras()" ]
  }, {
    "name" : "EXTRA_OIR",
    "type" : "String",
    "comment" : "\n     * Rule for originating identity (number) presentation, MO/MT.\n     *      {@link ImsCallProfile#OIR_DEFAULT}\n     *      {@link ImsCallProfile#OIR_PRESENTATION_RESTRICTED}\n     *      {@link ImsCallProfile#OIR_PRESENTATION_NOT_RESTRICTED}\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile#OIR_DEFAULT", "android.telephony.ims.ImsCallProfile#OIR_PRESENTATION_NOT_RESTRICTED", "android.telephony.ims.ImsCallProfile#OIR_PRESENTATION_RESTRICTED" ]
  }, {
    "name" : "EXTRA_CNAP",
    "type" : "String",
    "comment" : "\n     * Rule for calling name presentation\n     *      {@link ImsCallProfile#OIR_DEFAULT}\n     *      {@link ImsCallProfile#OIR_PRESENTATION_RESTRICTED}\n     *      {@link ImsCallProfile#OIR_PRESENTATION_NOT_RESTRICTED}\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile#OIR_DEFAULT", "android.telephony.ims.ImsCallProfile#OIR_PRESENTATION_NOT_RESTRICTED", "android.telephony.ims.ImsCallProfile#OIR_PRESENTATION_RESTRICTED" ]
  }, {
    "name" : "EXTRA_DIALSTRING",
    "type" : "String",
    "comment" : "\n     * To identify the Ims call type, MO\n     *      {@link ImsCallProfile#DIALSTRING_NORMAL}\n     *      {@link ImsCallProfile#DIALSTRING_SS_CONF}\n     *      {@link ImsCallProfile#DIALSTRING_USSD}\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile#DIALSTRING_SS_CONF", "android.telephony.ims.ImsCallProfile#DIALSTRING_USSD", "android.telephony.ims.ImsCallProfile#DIALSTRING_NORMAL" ]
  }, {
    "name" : "EXTRA_RETRY_CALL_FAIL_REASON",
    "type" : "String",
    "comment" : "\n     * This extra holds call fail cause because of which redial is attempted.\n     * see {@link android.telephony.ims.ImsReasonInfo} {@code CODE_*}\n     * for possible values this extra can hold.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsReasonInfo" ]
  }, {
    "name" : "EXTRA_RETRY_CALL_FAIL_NETWORKTYPE",
    "type" : "String",
    "comment" : "\n     * This extra holds call network type on which lower layers\n     * may try attempting redial.\n     * See {@link TelephonyManager} {@code NETWORK_TYPE_*}\n     * for possible values this extra can hold.\n     *\n     * @hide\n     ",
    "links" : [ "TelephonyManager" ]
  }, {
    "name" : "EXTRA_PRIORITY",
    "type" : "String",
    "comment" : "\n     * Extra for the call composer call priority, either {@link ImsCallProfile#PRIORITY_NORMAL} or\n     * {@link ImsCallProfile#PRIORITY_URGENT}. It can be set via\n     * {@link #setCallExtraInt(String, int)}.\n     *\n     * Reference: RCC.20 Section 2.4.4.2\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile#PRIORITY_NORMAL", "#setCallExtraInt(String", "android.telephony.ims.ImsCallProfile#PRIORITY_URGENT" ]
  }, {
    "name" : "EXTRA_CALL_SUBJECT",
    "type" : "String",
    "comment" : "\n     * Extra for the call composer call subject, a string of maximum length 60 characters.\n     * It can be set via {@link #setCallExtra(String, String)}.\n     *\n     * Reference: RCC.20 Section 2.4.3.2\n     ",
    "links" : [ "#setCallExtra(String" ]
  }, {
    "name" : "EXTRA_LOCATION",
    "type" : "String",
    "comment" : "\n     * Extra for the call composer call location, an {@Link android.location.Location} parcelable\n     * class to represent the geolocation as a latitude and longitude pair. It can be set via\n     * {@link #setCallExtraParcelable(String, Parcelable)}.\n     *\n     * Reference: RCC.20 Section 2.4.3.2\n     ",
    "links" : [ "#setCallExtraParcelable(String" ]
  }, {
    "name" : "EXTRA_PICTURE_URL",
    "type" : "String",
    "comment" : "\n     * Extra for the call composer picture URL, a String that indicates the URL on the carrierâ€™s\n     * server infrastructure to get the picture. It can be set via\n     * {@link #setCallExtra(String, String)}.\n     *\n     * Note that this URL is not intended to be parsed by the IMS stack -- it should be sent\n     * directly to the network for consumption by the called party or forwarded directly from the\n     * network to the platform for caching and download.\n     *\n     * Reference: RCC.20 Section 2.4.3.2\n     ",
    "links" : [ "#setCallExtra(String" ]
  }, {
    "name" : "EXTRA_IS_BUSINESS_CALL",
    "type" : "String",
    "comment" : "\n     * Boolean extra indicating whether the call is a business call.\n     *\n     * This extra will be set to {@code true} if and only if the SIP INVITE headers contain the\n     * \"Organization\" header.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ASSERTED_DISPLAY_NAME",
    "type" : "String",
    "comment" : "\n     * The vendor IMS stack populates this {@code string} extra; it is used to hold the display name\n     * passed via the P-Asserted-Identity SIP headerâ€™s display-name field\n     *\n     * Reference: RFC3325\n     ",
    "links" : [ ]
  }, {
    "name" : "OIR_DEFAULT",
    "type" : "int",
    "comment" : " \"user subscription default value\"",
    "links" : [ ]
  }, {
    "name" : "OIR_PRESENTATION_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Restricted presentation for Originating Identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "OIR_PRESENTATION_NOT_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Not restricted presentation for Originating Identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "OIR_PRESENTATION_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Presentation unknown for Originating Identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "OIR_PRESENTATION_PAYPHONE",
    "type" : "int",
    "comment" : "\n     * Payphone presentation for Originating Identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "OIR_PRESENTATION_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Unavailable presentation for Originating Identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIALSTRING_NORMAL",
    "type" : "int",
    "comment" : "\n     * A default or normal normal call.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIALSTRING_SS_CONF",
    "type" : "int",
    "comment" : "\n     * Call for SIP-based user configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "DIALSTRING_USSD",
    "type" : "int",
    "comment" : "\n     * Call for USSD message\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_NORMAL",
    "type" : "int",
    "comment" : "\n     * Indicates the call composer call priority is normal.\n     *\n     * Reference: RCC.20 Section 2.4.4.2\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_URGENT",
    "type" : "int",
    "comment" : "\n     * Indicates the call composer call priority is urgent.\n     *\n     * Reference: RCC.20 Section 2.4.4.2\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_RESTRICT_CAUSE_NONE",
    "type" : "int",
    "comment" : "\n     * Call is not restricted on peer side and High Definition media is supported\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_RESTRICT_CAUSE_RAT",
    "type" : "int",
    "comment" : "\n     * High Definition media is not supported on the peer side due to the Radio Access Technology\n     * (RAT) it is are connected to.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_RESTRICT_CAUSE_DISABLED",
    "type" : "int",
    "comment" : "\n     * The service has been disabled on the peer side.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_RESTRICT_CAUSE_HD",
    "type" : "int",
    "comment" : "\n     * High definition media is not currently supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_OI",
    "type" : "String",
    "comment" : "\n     * String extra properties\n     *  oi : Originating identity (number), MT only\n     *  cna : Calling name\n     *  ussd : For network-initiated USSD, MT only\n     *  remote_uri : Connected user identity (it can be used for the conference)\n     *  ChildNum: Child number info.\n     *  Codec: Codec info.\n     *  DisplayText: Display text for the call.\n     *  AdditionalCallInfo: Additional call info.\n     *  CallPull: Boolean value specifying if the call is a pulled call.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CNA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_USSD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REMOTE_URI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CHILD_NUMBER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CODEC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DISPLAY_TEXT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ADDITIONAL_CALL_INFO",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IS_CALL_PULL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ADDITIONAL_SIP_INVITE_FIELDS",
    "type" : "String",
    "comment" : "\n     * String extra property\n     *  Containing fields from the SIP INVITE message for an IMS call\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALL_DISCONNECT_CAUSE",
    "type" : "String",
    "comment" : "\n     * CallDisconnectCause: Specify call disconnect cause. This extra should be a code\n     * corresponding to ImsReasonInfo and should only be populated in the case that the\n     * call has already been missed\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALL_RAT_TYPE",
    "type" : "String",
    "comment" : "\n     * Extra key which the RIL can use to indicate the radio technology used for a call.\n     * Valid values are:\n     * {@link android.telephony.ServiceState#RIL_RADIO_TECHNOLOGY_LTE},\n     * {@link android.telephony.ServiceState#RIL_RADIO_TECHNOLOGY_IWLAN}, and the other defined\n     * {@code RIL_RADIO_TECHNOLOGY_*} constants.\n     * Note: Despite the fact the {@link android.telephony.ServiceState} values are integer\n     * constants, the values passed for the {@link #EXTRA_CALL_RAT_TYPE} should be strings (e.g.\n     * \"14\" vs (int) 14).\n     * Note: This is used by {@link com.android.internal.telephony.imsphone.ImsPhoneConnection#\n     *      updateImsCallRatFromExtras(Bundle)} to determine whether to set the\n     * {@link android.telecom.TelecomManager#EXTRA_CALL_NETWORK_TYPE} extra value and\n     * {@link android.telecom.Connection#PROPERTY_WIFI} property on a connection.\n     * @deprecated the constants associated with this extra are hidden, instead use\n     * {@link #EXTRA_CALL_NETWORK_TYPE}.\n     ",
    "links" : [ "android.telephony.ServiceState#RIL_RADIO_TECHNOLOGY_IWLAN", "android.telecom.TelecomManager#EXTRA_CALL_NETWORK_TYPE", "android.telephony.ServiceState", "#EXTRA_CALL_NETWORK_TYPE", "com.android.internal.telephony.imsphone.ImsPhoneConnection#updateImsCallRatFromExtras(Bundle)", "android.telephony.ServiceState#RIL_RADIO_TECHNOLOGY_LTE", "android.telecom.Connection#PROPERTY_WIFI", "#EXTRA_CALL_RAT_TYPE" ]
  }, {
    "name" : "EXTRA_CALL_NETWORK_TYPE",
    "type" : "String",
    "comment" : "\n     * Extra key with an {@code int} value which can be set in {@link #setCallExtraInt(String, int)}\n     * to indicate the network type used for a call.\n     * <p>\n     * Valid values are defined by {@code TelephonyManager.NETWORK_TYPE_*} constants. An example may\n     * be {@link android.telephony.TelephonyManager#NETWORK_TYPE_LTE}.\n     ",
    "links" : [ "android.telephony.TelephonyManager#NETWORK_TYPE_LTE", "#setCallExtraInt(String" ]
  }, {
    "name" : "EXTRA_CALL_RAT_TYPE_ALT",
    "type" : "String",
    "comment" : "\n     * Similar to {@link #EXTRA_CALL_RAT_TYPE}, except with a lowercase 'c'.  Used to ensure\n     * compatibility with modems that are non-compliant with the {@link #EXTRA_CALL_RAT_TYPE}\n     * extra key.  Should be removed when the non-compliant modems are fixed.\n     * @hide\n     * @deprecated Use {@link #EXTRA_CALL_NETWORK_TYPE} instead.\n     ",
    "links" : [ "#EXTRA_CALL_NETWORK_TYPE", "#EXTRA_CALL_RAT_TYPE" ]
  }, {
    "name" : "EXTRA_FORWARDED_NUMBER",
    "type" : "String",
    "comment" : "\n     * String extra property containing forwarded numbers associated with the current connection\n     * for an IMS call. The value is string array, and it can include multiple numbers, and\n     * the array values are expected E164 (e.g. +1 (650) 253-0000) format.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IS_CROSS_SIM_CALL",
    "type" : "String",
    "comment" : "\n     * Extra key with an {@code boolean} value which can be set in\n     * {@link #setCallExtraBoolean(String, boolean)} to indicate whether call is a cross sim call.\n     * <p>\n     * Valid values are true if call is cross sim call else false.\n     ",
    "links" : [ "#setCallExtraBoolean(String" ]
  }, {
    "name" : "mServiceType",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mCallType",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mRestrictCause",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mCallerNumberVerificationStatus",
    "type" : "int",
    "comment" : "\n     * The VERSTAT for an incoming call's phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERIFICATION_STATUS_NOT_VERIFIED",
    "type" : "int",
    "comment" : "\n     * Indicates that the network could not perform verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERIFICATION_STATUS_PASSED",
    "type" : "int",
    "comment" : "\n     * Indicates that verification by the network passed.  This indicates there is a high likelihood\n     * that the call originated from a valid source.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERIFICATION_STATUS_FAILED",
    "type" : "int",
    "comment" : "\n     * Indicates that verification by the network failed.  This indicates there is a high likelihood\n     * that the call did not originate from a valid source.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEmergencyServiceCategories",
    "type" : "int",
    "comment" : "\n     * The emergency service categories, only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * If valid, the value is the bitwise-OR combination of the following constants:\n     * <ol>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC} </li>\n     * </ol>\n     *\n     * Reference: 3gpp 23.167, Section 6 - Functional description;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     ",
    "links" : [ "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC", "#SERVICE_TYPE_EMERGENCY", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD", "#getServiceType", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE" ]
  }, {
    "name" : "mEmergencyUrns",
    "type" : "List<String>",
    "comment" : "\n     * The emergency Uniform Resource Names (URN), only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}.\n     *\n     * Reference: 3gpp 24.503, Section 5.1.6.8.1 - General;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType" ]
  }, {
    "name" : "mEmergencyCallRouting",
    "type" : "int",
    "comment" : "\n     * The emergency call routing, only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * If valid, the value is any of the following constants:\n     * <ol>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_UNKNOWN} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_NORMAL} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_EMERGENCY} </li>\n     * </ol>\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_NORMAL", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_UNKNOWN", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_EMERGENCY" ]
  }, {
    "name" : "mEmergencyCallTesting",
    "type" : "boolean",
    "comment" : " Indicates if the call is for testing purpose ",
    "links" : [ ]
  }, {
    "name" : "mHasKnownUserIntentEmergency",
    "type" : "boolean",
    "comment" : " Indicates if we have known the intent of the user for the call is emergency ",
    "links" : [ ]
  }, {
    "name" : "mAcceptedRtpHeaderExtensionTypes",
    "type" : "Set<RtpHeaderExtensionType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallExtras",
    "type" : "Bundle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mMediaProfile",
    "type" : "ImsStreamMediaProfile",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ImsCallProfile>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getCallExtra(String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getCallExtra(String name, String defaultValue)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getCallExtraBoolean(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getCallExtraBoolean(String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCallExtraInt(String name)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCallExtraInt(String name, int defaultValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T getCallExtraParcelable(@Nullable String name)",
    "returnType" : "T",
    "comment" : "\n     * Get the call extras (Parcelable), given the extra name.\n     * @param name call extra name\n     * @return the corresponding call extra Parcelable or null if not applicable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallExtra(String name, String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCallExtraBoolean(String name, boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCallExtraInt(String name, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCallExtraParcelable(@NonNull String name, @NonNull Parcelable parcelable)",
    "returnType" : "void",
    "comment" : "\n     * Set the call extra value (Parcelable), given the call extra name.\n     *\n     * Note that the {@link Parcelable} provided must be a class defined in the Android API surface,\n     * as opposed to a class defined by your app.\n     *\n     * @param name call extra name\n     * @param parcelable call extra value\n     ",
    "links" : [ "android.os.Parcelable" ]
  }, {
    "name" : "public void setCallRestrictCause(@CallRestrictCause int cause)",
    "returnType" : "void",
    "comment" : "\n     * Set the call restrict cause, which provides the reason why a call has been restricted from\n     * using High Definition media.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateCallType(ImsCallProfile profile)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateCallExtras(ImsCallProfile profile)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateMediaProfile(ImsCallProfile profile)",
    "returnType" : "void",
    "comment" : "\n     * Updates the media profile for the call.\n     *\n     * @param profile Call profile with new media profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallerNumberVerificationStatus(@VerificationStatus int callerNumberVerificationStatus)",
    "returnType" : "void",
    "comment" : "\n     * Sets the verification status for the phone number of an incoming call as identified in\n     * ATIS-1000082.\n     * <p>\n     * The ImsService should parse the verstat information from the SIP INVITE headers for the call\n     * to determine this information.  It is typically found in the P-Asserted-Identity OR From\n     * header fields.\n     * @param callerNumberVerificationStatus the new verification status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCallerNumberVerificationStatus()",
    "returnType" : "int",
    "comment" : "\n     * Gets the verification status for the phone number of an incoming call as identified in\n     * ATIS-1000082.\n     * @return the verification status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getServiceType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCallType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRestrictCause()",
    "returnType" : "int",
    "comment" : "\n     * @return The call restrict cause, which provides the reason why a call has been restricted\n     * from using High Definition media.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getCallExtras()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getProprietaryCallExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Get the proprietary extras set for this ImsCallProfile.\n     * @return A {@link Bundle} containing proprietary call extras that were not set by the\n     * platform.\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "public ImsStreamMediaProfile getMediaProfile()",
    "returnType" : "ImsStreamMediaProfile",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getVideoStateFromImsCallProfile(ImsCallProfile callProfile)",
    "returnType" : "int",
    "comment" : "\n     * Converts from the call types defined in {@link ImsCallProfile} to the\n     * video state values defined in {@link VideoProfile}.\n     *\n     * @param callProfile The call profile.\n     * @return The video state.\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile", "android.telecom.VideoProfile" ]
  }, {
    "name" : "public static int getVideoStateFromCallType(int callType)",
    "returnType" : "int",
    "comment" : "\n     * Translates a {@link ImsCallProfile} {@code CALL_TYPE_*} constant into a video state.\n     * @param callType The call type.\n     * @return The video state.\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile" ]
  }, {
    "name" : "public static int getCallTypeFromVideoState(int videoState)",
    "returnType" : "int",
    "comment" : "\n     * Converts from the video state values defined in {@link VideoProfile}\n     * to the call types defined in {@link ImsCallProfile}.\n     *\n     * @param videoState The video state.\n     * @return The call type.\n     ",
    "links" : [ "android.telecom.VideoProfile", "android.telephony.ims.ImsCallProfile" ]
  }, {
    "name" : "public static int presentationToOIR(int presentation)",
    "returnType" : "int",
    "comment" : "\n     * Badly named old method, kept for compatibility.\n     * See {@link #presentationToOir(int)}.\n     * @hide\n     ",
    "links" : [ "#presentationToOir(int)" ]
  }, {
    "name" : "public static int presentationToOir(int presentation)",
    "returnType" : "int",
    "comment" : "\n     * Translate presentation value to OIR value\n     * @param presentation\n     * @return OIR values\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int OIRToPresentation(int oir)",
    "returnType" : "int",
    "comment" : "\n     * Translate OIR value to presentation value\n     * @param oir value\n     * @return presentation value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVideoPaused()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if video call is paused\n     * @return true if call is video paused\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVideoCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the {@link ImsCallProfile} represents a video call.\n     *\n     * @return {@code true} if the profile is for a video call, {@code false} otherwise.\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile" ]
  }, {
    "name" : "private Bundle maybeCleanseExtras(Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "\n     * Cleanses a {@link Bundle} to ensure that it contains only data of type:\n     * 1. Primitive data types (e.g. int, bool, and other values determined by\n     * {@link android.os.PersistableBundle#isValidType(Object)}).\n     * 2. Other Bundles.\n     * 3. {@link Parcelable} objects in the {@code android.*} namespace.\n     * @param extras the source {@link Bundle}\n     * @return where all elements are valid types the source {@link Bundle} is returned unmodified,\n     *      otherwise a copy of the {@link Bundle} with the invalid elements is returned.\n     ",
    "links" : [ "android.os.Bundle", "android.os.Parcelable", "android.os.PersistableBundle#isValidType(Object)" ]
  }, {
    "name" : "private static boolean isVideoStateSet(int videoState, int videoStateToCheck)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if a video state is set in a video state bit-mask.\n     *\n     * @param videoState The video state bit mask.\n     * @param videoStateToCheck The particular video state to check.\n     * @return True if the video state is set in the bit-mask.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEmergencyCallInfo(EmergencyNumber num, boolean hasKnownUserIntentEmergency)",
    "returnType" : "void",
    "comment" : "\n     * Set the emergency number information. The set value is valid\n     * only if {@link #getServiceType} returns {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * Reference: 3gpp 23.167, Section 6 - Functional description;\n     *            3gpp 24.503, Section 5.1.6.8.1 - General;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     *\n     * @hide\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType" ]
  }, {
    "name" : "public void setEmergencyServiceCategories(@EmergencyServiceCategories int emergencyServiceCategories)",
    "returnType" : "void",
    "comment" : "\n     * Set the emergency service categories. The set value is valid only if\n     * {@link #getServiceType} returns {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * If valid, the value is the bitwise-OR combination of the following constants:\n     * <ol>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC} </li>\n     * </ol>\n     *\n     * Reference: 3gpp 23.167, Section 6 - Functional description;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     ",
    "links" : [ "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC", "#SERVICE_TYPE_EMERGENCY", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD", "#getServiceType", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE" ]
  }, {
    "name" : "public void setEmergencyUrns(@NonNull List<String> emergencyUrns)",
    "returnType" : "void",
    "comment" : "\n     * Set the emergency Uniform Resource Names (URN), only valid if {@link #getServiceType}\n     * returns {@link #SERVICE_TYPE_EMERGENCY}.\n     *\n     * Reference: 3gpp 24.503, Section 5.1.6.8.1 - General;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType" ]
  }, {
    "name" : "public void setEmergencyCallRouting(@EmergencyCallRouting int emergencyCallRouting)",
    "returnType" : "void",
    "comment" : "\n     * Set the emergency call routing, only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * If valid, the value is any of the following constants:\n     * <ol>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_UNKNOWN} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_NORMAL} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_EMERGENCY} </li>\n     * </ol>\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_NORMAL", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_UNKNOWN", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_EMERGENCY" ]
  }, {
    "name" : "public void setEmergencyCallTesting(boolean isTesting)",
    "returnType" : "void",
    "comment" : "\n     * Set if this is for testing emergency call, only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}.\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType" ]
  }, {
    "name" : "public void setHasKnownUserIntentEmergency(boolean hasKnownUserIntentEmergency)",
    "returnType" : "void",
    "comment" : "\n     * Set if we have known the user intent of the call is emergency.\n     *\n     * This is only used to specify when the dialed number is ambiguous when it can be identified\n     * as both emergency number and any other non-emergency number; e.g. in some situation, 611\n     * could be both an emergency number in a country and a non-emergency number of a carrier's\n     * customer service hotline.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEmergencyServiceCategories()",
    "returnType" : "int",
    "comment" : "\n     * Get the emergency service categories, only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * @return the emergency service categories,\n     *\n     * If valid, the value is the bitwise-OR combination of the following constants:\n     * <ol>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC} </li>\n     * </ol>\n     *\n     * Reference: 3gpp 23.167, Section 6 - Functional description;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     ",
    "links" : [ "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC", "#SERVICE_TYPE_EMERGENCY", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD", "#getServiceType", "android.telephony.emergency.EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE" ]
  }, {
    "name" : "public List<String> getEmergencyUrns()",
    "returnType" : "List<String>",
    "comment" : "\n     * Get the emergency Uniform Resource Names (URN), only valid if {@link #getServiceType}\n     * returns {@link #SERVICE_TYPE_EMERGENCY}.\n     *\n     * Reference: 3gpp 24.503, Section 5.1.6.8.1 - General;\n     *            3gpp 22.101, Section 10 - Emergency Calls.\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType" ]
  }, {
    "name" : "public int getEmergencyCallRouting()",
    "returnType" : "int",
    "comment" : "\n     * Get the emergency call routing, only valid if {@link #getServiceType} returns\n     * {@link #SERVICE_TYPE_EMERGENCY}\n     *\n     * If valid, the value is any of the following constants:\n     * <ol>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_UNKNOWN} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_NORMAL} </li>\n     * <li>{@link EmergencyNumber#EMERGENCY_CALL_ROUTING_EMERGENCY} </li>\n     * </ol>\n     ",
    "links" : [ "#SERVICE_TYPE_EMERGENCY", "#getServiceType", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_NORMAL", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_UNKNOWN", "android.telephony.emergency.EmergencyNumber#EMERGENCY_CALL_ROUTING_EMERGENCY" ]
  }, {
    "name" : "public boolean isEmergencyCallTesting()",
    "returnType" : "boolean",
    "comment" : "\n     * Get if the emergency call is for testing purpose.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasKnownUserIntentEmergency()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if we have known the user intent of the call is emergency.\n     *\n     * This is only used to specify when the dialed number is ambiguous when it can be identified\n     * as both emergency number and any other non-emergency number; e.g. in some situation, 611\n     * could be both an emergency number in a country and a non-emergency number of a carrier's\n     * customer service hotline.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<RtpHeaderExtensionType> getAcceptedRtpHeaderExtensionTypes()",
    "returnType" : "Set<RtpHeaderExtensionType>",
    "comment" : "\n     * Gets the {@link RtpHeaderExtensionType}s which have been accepted by both ends of the call.\n     * <p>\n     * According to RFC8285, RTP header extensions available to a call are determined using the\n     * offer/accept phase of the SDP protocol (see RFC4566).\n     * <p>\n     * The offered header extension types supported by the framework and exposed to the\n     * {@link ImsService} via {@link MmTelFeature#changeOfferedRtpHeaderExtensionTypes(Set)}.\n     *\n     * @return the {@link RtpHeaderExtensionType}s which were accepted by the other end of the call.\n     ",
    "links" : [ "android.telephony.ims.feature.MmTelFeature#changeOfferedRtpHeaderExtensionTypes(Set)", "android.telephony.ims.RtpHeaderExtensionType", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public void setAcceptedRtpHeaderExtensionTypes(@NonNull Set<RtpHeaderExtensionType> rtpHeaderExtensions)",
    "returnType" : "void",
    "comment" : "\n     * Sets the accepted {@link RtpHeaderExtensionType}s for this call.\n     * <p>\n     * According to RFC8285, RTP header extensions available to a call are determined using the\n     * offer/accept phase of the SDP protocol (see RFC4566).\n     *\n     * @param rtpHeaderExtensions\n     ",
    "links" : [ "android.telephony.ims.RtpHeaderExtensionType" ]
  } ],
  "methodNames" : [ "public String getCallExtra(String name)", "public String getCallExtra(String name, String defaultValue)", "public boolean getCallExtraBoolean(String name)", "public boolean getCallExtraBoolean(String name, boolean defaultValue)", "public int getCallExtraInt(String name)", "public int getCallExtraInt(String name, int defaultValue)", "public T getCallExtraParcelable(@Nullable String name)", "public void setCallExtra(String name, String value)", "public void setCallExtraBoolean(String name, boolean value)", "public void setCallExtraInt(String name, int value)", "public void setCallExtraParcelable(@NonNull String name, @NonNull Parcelable parcelable)", "public void setCallRestrictCause(@CallRestrictCause int cause)", "public void updateCallType(ImsCallProfile profile)", "public void updateCallExtras(ImsCallProfile profile)", "public void updateMediaProfile(ImsCallProfile profile)", "public void setCallerNumberVerificationStatus(@VerificationStatus int callerNumberVerificationStatus)", "public int getCallerNumberVerificationStatus()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "private void readFromParcel(Parcel in)", "public int getServiceType()", "public int getCallType()", "public int getRestrictCause()", "public Bundle getCallExtras()", "public Bundle getProprietaryCallExtras()", "public ImsStreamMediaProfile getMediaProfile()", "public static int getVideoStateFromImsCallProfile(ImsCallProfile callProfile)", "public static int getVideoStateFromCallType(int callType)", "public static int getCallTypeFromVideoState(int videoState)", "public static int presentationToOIR(int presentation)", "public static int presentationToOir(int presentation)", "public static int OIRToPresentation(int oir)", "public boolean isVideoPaused()", "public boolean isVideoCall()", "private Bundle maybeCleanseExtras(Bundle extras)", "private static boolean isVideoStateSet(int videoState, int videoStateToCheck)", "public void setEmergencyCallInfo(EmergencyNumber num, boolean hasKnownUserIntentEmergency)", "public void setEmergencyServiceCategories(@EmergencyServiceCategories int emergencyServiceCategories)", "public void setEmergencyUrns(@NonNull List<String> emergencyUrns)", "public void setEmergencyCallRouting(@EmergencyCallRouting int emergencyCallRouting)", "public void setEmergencyCallTesting(boolean isTesting)", "public void setHasKnownUserIntentEmergency(boolean hasKnownUserIntentEmergency)", "public int getEmergencyServiceCategories()", "public List<String> getEmergencyUrns()", "public int getEmergencyCallRouting()", "public boolean isEmergencyCallTesting()", "public boolean hasKnownUserIntentEmergency()", "public Set<RtpHeaderExtensionType> getAcceptedRtpHeaderExtensionTypes()", "public void setAcceptedRtpHeaderExtensionTypes(@NonNull Set<RtpHeaderExtensionType> rtpHeaderExtensions)" ],
  "variableNames" : [ "TAG", "SERVICE_TYPE_NONE", "SERVICE_TYPE_NORMAL", "SERVICE_TYPE_EMERGENCY", "CALL_TYPE_NONE", "CALL_TYPE_VOICE_N_VIDEO", "CALL_TYPE_VOICE", "CALL_TYPE_VIDEO_N_VOICE", "CALL_TYPE_VT", "CALL_TYPE_VT_TX", "CALL_TYPE_VT_RX", "CALL_TYPE_VT_NODIR", "CALL_TYPE_VS", "CALL_TYPE_VS_TX", "CALL_TYPE_VS_RX", "EXTRA_CONFERENCE", "EXTRA_CONFERENCE_DEPRECATED", "EXTRA_EMERGENCY_CALL", "EXTRA_VMS", "EXTRA_CALL_MODE_CHANGEABLE", "EXTRA_EXTENDING_TO_CONFERENCE_SUPPORTED", "EXTRA_CONFERENCE_AVAIL", "EXTRA_OEM_EXTRAS", "EXTRA_OIR", "EXTRA_CNAP", "EXTRA_DIALSTRING", "EXTRA_RETRY_CALL_FAIL_REASON", "EXTRA_RETRY_CALL_FAIL_NETWORKTYPE", "EXTRA_PRIORITY", "EXTRA_CALL_SUBJECT", "EXTRA_LOCATION", "EXTRA_PICTURE_URL", "EXTRA_IS_BUSINESS_CALL", "EXTRA_ASSERTED_DISPLAY_NAME", "OIR_DEFAULT", "OIR_PRESENTATION_RESTRICTED", "OIR_PRESENTATION_NOT_RESTRICTED", "OIR_PRESENTATION_UNKNOWN", "OIR_PRESENTATION_PAYPHONE", "OIR_PRESENTATION_UNAVAILABLE", "DIALSTRING_NORMAL", "DIALSTRING_SS_CONF", "DIALSTRING_USSD", "PRIORITY_NORMAL", "PRIORITY_URGENT", "CALL_RESTRICT_CAUSE_NONE", "CALL_RESTRICT_CAUSE_RAT", "CALL_RESTRICT_CAUSE_DISABLED", "CALL_RESTRICT_CAUSE_HD", "EXTRA_OI", "EXTRA_CNA", "EXTRA_USSD", "EXTRA_REMOTE_URI", "EXTRA_CHILD_NUMBER", "EXTRA_CODEC", "EXTRA_DISPLAY_TEXT", "EXTRA_ADDITIONAL_CALL_INFO", "EXTRA_IS_CALL_PULL", "EXTRA_ADDITIONAL_SIP_INVITE_FIELDS", "EXTRA_CALL_DISCONNECT_CAUSE", "EXTRA_CALL_RAT_TYPE", "EXTRA_CALL_NETWORK_TYPE", "EXTRA_CALL_RAT_TYPE_ALT", "EXTRA_FORWARDED_NUMBER", "EXTRA_IS_CROSS_SIM_CALL", "mServiceType", "mCallType", "mRestrictCause", "mCallerNumberVerificationStatus", "VERIFICATION_STATUS_NOT_VERIFIED", "VERIFICATION_STATUS_PASSED", "VERIFICATION_STATUS_FAILED", "mEmergencyServiceCategories", "mEmergencyUrns", "mEmergencyCallRouting", "mEmergencyCallTesting", "mHasKnownUserIntentEmergency", "mAcceptedRtpHeaderExtensionTypes", "mCallExtras", "mMediaProfile", "CREATOR" ]
}