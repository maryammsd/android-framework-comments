{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/BOCSU.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "BOCSU",
  "comment" : "\n * <p>Binary Ordered Compression Scheme for Unicode</p>\n * \n * <p>Users are strongly encouraged to read the ICU paper on \n * <a href=\"http://www.icu-project.org/docs/papers/binary_ordered_compression_for_unicode.html\">\n * BOCU</a> before attempting to use this class.</p>\n * \n * <p>BOCU is used to compress unicode text into a stream of unsigned\n * bytes.  For many kinds of text the compression compares favorably\n * to UTF-8, and for some kinds of text (such as CJK) it does better.\n * The resulting bytes will compare in the same order as the original\n * code points.  The byte stream does not contain the values 0, 1, or\n * 2.</p>\n * \n * <p>One example of a use of BOCU is in \n * android.icu.text.Collator#getCollationKey(String) for a RuleBasedCollator object with \n * collation strength IDENTICAL. The result CollationKey will consist of the \n * collation order of the source string followed by the BOCU result of the \n * source string. \n * </p>\n *\n * <p>Unlike a UTF encoding, BOCU-compressed text is not suitable for\n * random access.</p>\n * \n * <p>Method: Slope Detection<br> Remember the previous code point\n * (initial 0).  For each code point in the string, encode the\n * difference with the previous one.  Similar to a UTF, the length of\n * the byte sequence is encoded in the lead bytes.  Unlike a UTF, the\n * trail byte values may overlap with lead/single byte values.  The\n * signedness of the difference must be encoded as the most\n * significant part.</p>\n *\n * <p>We encode differences with few bytes if their absolute values\n * are small.  For correct ordering, we must treat the entire value\n * range -10ffff..+10ffff in ascending order, which forbids encoding\n * the sign and the absolute value separately. Instead, we split the\n * lead byte range in the middle and encode non-negative values going\n * up and negative values going down.</p>\n *\n * <p>For very small absolute values, the difference is added to a\n * middle byte value for single-byte encoded differences.  For\n * somewhat larger absolute values, the difference is divided by the\n * number of byte values available, the modulo is used for one trail\n * byte, and the remainder is added to a lead byte avoiding the\n * single-byte range.  For large absolute values, the difference is\n * similarly encoded in three bytes. (Syn Wee, I need examples\n * here.)</p>\n *\n * <p>BOCU does not use byte values 0, 1, or 2, but uses all other\n * byte values for lead and single bytes, so that the middle range of\n * single bytes is as large as possible.</p>\n *\n * <p>Note that the lead byte ranges overlap some, but that the\n * sequences as a whole are well ordered. I.e., even if the lead byte\n * is the same for sequences of different lengths, the trail bytes\n * establish correct order.  It would be possible to encode slightly\n * larger ranges for each length (>1) by subtracting the lower bound\n * of the range. However, that would also slow down the calculation.\n * (Syn Wee, need an example).</p>\n *\n * <p>For the actual string encoding, an optimization moves the\n * previous code point value to the middle of its Unicode script block\n * to minimize the differences in same-script text runs.  (Syn Wee,\n * need an example.)</p>\n *\n * @author Syn Wee Quek\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SLOPE_MIN_",
    "type" : "int",
    "comment" : " \n     * Do not use byte values 0, 1, 2 because they are separators in sort keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "SLOPE_MAX_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_MIDDLE_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_TAIL_COUNT_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_MAX_BYTES_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_SINGLE_",
    "type" : "int",
    "comment" : "\n     * Number of lead bytes:\n     * 1        middle byte for 0\n     * 2*80=160 single bytes for !=0\n     * 2*42=84  for double-byte values\n     * 2*3=6    for 3-byte values\n     * 2*1=2    for 4-byte values\n     *\n     * The sum must be <=SLOPE_TAIL_COUNT.\n     *\n     * Why these numbers?\n     * - There should be >=128 single-byte values to cover 128-blocks\n     *   with small scripts.\n     * - There should be >=20902 single/double-byte values to cover Unihan.\n     * - It helps CJK Extension B some if there are 3-byte values that cover\n     *   the distance between them and Unihan.\n     *   This also helps to jump among distant places in the BMP.\n     * - Four-byte values are necessary to cover the rest of Unicode.\n     *\n     * Symmetrical lead byte counts are for convenience.\n     * With an equal distribution of even and odd differences there is also\n     * no advantage to asymmetrical lead byte counts.\n     ",
    "links" : [ ]
  }, {
    "name" : "SLOPE_LEAD_2_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_LEAD_3_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_REACH_POS_1_",
    "type" : "int",
    "comment" : " \n     * The difference value range for single-byters.\n     ",
    "links" : [ ]
  }, {
    "name" : "SLOPE_REACH_NEG_1_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_REACH_POS_2_",
    "type" : "int",
    "comment" : " \n     * The difference value range for double-byters.\n     ",
    "links" : [ ]
  }, {
    "name" : "SLOPE_REACH_NEG_2_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_REACH_POS_3_",
    "type" : "int",
    "comment" : " \n     * The difference value range for 3-byters.\n     ",
    "links" : [ ]
  }, {
    "name" : "SLOPE_REACH_NEG_3_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_START_POS_2_",
    "type" : "int",
    "comment" : " \n     * The lead byte start values.\n     ",
    "links" : [ ]
  }, {
    "name" : "SLOPE_START_POS_3_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_START_NEG_2_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOPE_START_NEG_3_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int writeIdenticalLevelRun(int prev, CharSequence s, int i, int length, ByteArrayWrapper sink)",
    "returnType" : "int",
    "comment" : "\n     * Encode the code points of a string as\n     * a sequence of byte-encoded differences (slope detection),\n     * preserving lexical order.\n     *\n     * <p>Optimize the difference-taking for runs of Unicode text within\n     * small scripts:\n     *\n     * <p>Most small scripts are allocated within aligned 128-blocks of Unicode\n     * code points. Lexical order is preserved if \"prev\" is always moved\n     * into the middle of such a block.\n     *\n     * <p>Additionally, \"prev\" is moved from anywhere in the Unihan\n     * area into the middle of that area.\n     * Note that the identical-level run in a sort key is generated from\n     * NFD text - there are never Hangul characters included.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void ensureAppendCapacity(ByteArrayWrapper sink, int minCapacity, int desiredCapacity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final long getNegDivMod(int number, int factor)",
    "returnType" : "long",
    "comment" : "\n     * Integer division and modulo with negative numerators\n     * yields negative modulo results and quotients that are one more than\n     * what we need here.\n     * @param number which operations are to be performed on\n     * @param factor the factor to use for division\n     * @return (result of division) << 32 | modulo \n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int writeDiff(int diff, byte[] buffer, int offset)",
    "returnType" : "int",
    "comment" : "\n     * Encode one difference value -0x10ffff..+0x10ffff in 1..4 bytes,\n     * preserving lexical order\n     * @param diff\n     * @param buffer byte buffer to append to\n     * @param offset to the byte buffer to start appending\n     * @return end offset where the appending stops\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int writeIdenticalLevelRun(int prev, CharSequence s, int i, int length, ByteArrayWrapper sink)", "private static void ensureAppendCapacity(ByteArrayWrapper sink, int minCapacity, int desiredCapacity)", "private static final long getNegDivMod(int number, int factor)", "private static final int writeDiff(int diff, byte[] buffer, int offset)" ],
  "variableNames" : [ "SLOPE_MIN_", "SLOPE_MAX_", "SLOPE_MIDDLE_", "SLOPE_TAIL_COUNT_", "SLOPE_MAX_BYTES_", "SLOPE_SINGLE_", "SLOPE_LEAD_2_", "SLOPE_LEAD_3_", "SLOPE_REACH_POS_1_", "SLOPE_REACH_NEG_1_", "SLOPE_REACH_POS_2_", "SLOPE_REACH_NEG_2_", "SLOPE_REACH_POS_3_", "SLOPE_REACH_NEG_3_", "SLOPE_START_POS_2_", "SLOPE_START_POS_3_", "SLOPE_START_NEG_2_", "SLOPE_START_NEG_3_" ]
}