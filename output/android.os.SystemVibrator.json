{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/SystemVibrator.java",
  "packageName" : "android.os",
  "className" : "SystemVibrator",
  "comment" : "\n * Vibrator implementation that controls the main system vibrator.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVibratorManager",
    "type" : "VibratorManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBrokenListeners",
    "type" : "ArrayList<MultiVibratorStateListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegisteredListeners",
    "type" : "ArrayMap<OnVibratorStateChangedListener, MultiVibratorStateListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVibratorInfo",
    "type" : "VibratorInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VibratorInfo getInfo()",
    "returnType" : "VibratorInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasVibrator()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVibrating()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAmplitudeControl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, VibrationEffect effect, VibrationAttributes attrs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void vibrate(int uid, String opPkg, @NonNull VibrationEffect effect, String reason, @NonNull VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performHapticFeedback(int constant, boolean always, String reason, boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel(int usageFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void tryUnregisterBrokenListeners()",
    "returnType" : "void",
    "comment" : "\n     * Tries to unregister individual {@link android.os.Vibrator.OnVibratorStateChangedListener}\n     * that were left registered to vibrators after failures to register them to all vibrators.\n     *\n     * <p>This might happen if {@link MultiVibratorStateListener} fails to register to any vibrator\n     * and also fails to unregister any previously registered single listeners to other vibrators.\n     *\n     * <p>This method never throws {@link RuntimeException} if it fails to unregister again, it will\n     * fail silently and attempt to unregister the same broken listener later.\n     ",
    "links" : [ "RuntimeException", "android.os.Vibrator.OnVibratorStateChangedListener", "MultiVibratorStateListener" ]
  } ],
  "methodNames" : [ "public VibratorInfo getInfo()", "public boolean hasVibrator()", "public boolean isVibrating()", "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)", "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public boolean hasAmplitudeControl()", "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, VibrationEffect effect, VibrationAttributes attrs)", "public void vibrate(int uid, String opPkg, @NonNull VibrationEffect effect, String reason, @NonNull VibrationAttributes attributes)", "public void performHapticFeedback(int constant, boolean always, String reason, boolean fromIme)", "public void cancel()", "public void cancel(int usageFilter)", "private void tryUnregisterBrokenListeners()" ],
  "variableNames" : [ "TAG", "mVibratorManager", "mContext", "mBrokenListeners", "mRegisteredListeners", "mLock", "mVibratorInfo" ]
}