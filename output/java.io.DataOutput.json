{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/DataOutput.java",
  "packageName" : "java.io",
  "className" : "DataOutput",
  "comment" : "\n * The <code>DataOutput</code> interface provides\n * for converting data from any of the Java\n * primitive types to a series of bytes and\n * writing these bytes to a binary stream.\n * There is  also a facility for converting\n * a <code>String</code> into\n * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n * format and writing the resulting series\n * of bytes.\n * <p>\n * For all the methods in this interface that\n * write bytes, it is generally true that if\n * a byte cannot be written for any reason,\n * an <code>IOException</code> is thrown.\n *\n * @author  Frank Yellin\n * @see     java.io.DataInput\n * @see     java.io.DataOutputStream\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes to the output stream the eight\n     * low-order bits of the argument <code>b</code>.\n     * The 24 high-order  bits of <code>b</code>\n     * are ignored.\n     *\n     * @param      b   the byte to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes to the output stream all the bytes in array <code>b</code>.\n     * If <code>b</code> is <code>null</code>,\n     * a <code>NullPointerException</code> is thrown.\n     * If <code>b.length</code> is zero, then\n     * no bytes are written. Otherwise, the byte\n     * <code>b[0]</code> is written first, then\n     * <code>b[1]</code>, and so on; the last byte\n     * written is <code>b[b.length-1]</code>.\n     *\n     * @param      b   the data.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>len</code> bytes from array\n     * <code>b</code>, in order,  to\n     * the output stream.  If <code>b</code>\n     * is <code>null</code>, a <code>NullPointerException</code>\n     * is thrown.  If <code>off</code> is negative,\n     * or <code>len</code> is negative, or <code>off+len</code>\n     * is greater than the length of the array\n     * <code>b</code>, then an <code>IndexOutOfBoundsException</code>\n     * is thrown.  If <code>len</code> is zero,\n     * then no bytes are written. Otherwise, the\n     * byte <code>b[off]</code> is written first,\n     * then <code>b[off+1]</code>, and so on; the\n     * last byte written is <code>b[off+len-1]</code>.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeBoolean(boolean v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>boolean</code> value to this output stream.\n     * If the argument <code>v</code>\n     * is <code>true</code>, the value <code>(byte)1</code>\n     * is written; if <code>v</code> is <code>false</code>,\n     * the  value <code>(byte)0</code> is written.\n     * The byte written by this method may\n     * be read by the <code>readBoolean</code>\n     * method of interface <code>DataInput</code>,\n     * which will then return a <code>boolean</code>\n     * equal to <code>v</code>.\n     *\n     * @param      v   the boolean to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeByte(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes to the output stream the eight low-\n     * order bits of the argument <code>v</code>.\n     * The 24 high-order bits of <code>v</code>\n     * are ignored. (This means  that <code>writeByte</code>\n     * does exactly the same thing as <code>write</code>\n     * for an integer argument.) The byte written\n     * by this method may be read by the <code>readByte</code>\n     * method of interface <code>DataInput</code>,\n     * which will then return a <code>byte</code>\n     * equal to <code>(byte)v</code>.\n     *\n     * @param      v   the byte value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeShort(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes two bytes to the output\n     * stream to represent the value of the argument.\n     * The byte values to be written, in the  order\n     * shown, are:\n     * <pre>{@code\n     * (byte)(0xff & (v >> 8))\n     * (byte)(0xff & v)\n     * }</pre> <p>\n     * The bytes written by this method may be\n     * read by the <code>readShort</code> method\n     * of interface <code>DataInput</code> , which\n     * will then return a <code>short</code> equal\n     * to <code>(short)v</code>.\n     *\n     * @param      v   the <code>short</code> value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeChar(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>char</code> value, which\n     * is comprised of two bytes, to the\n     * output stream.\n     * The byte values to be written, in the  order\n     * shown, are:\n     * <pre>{@code\n     * (byte)(0xff & (v >> 8))\n     * (byte)(0xff & v)\n     * }</pre><p>\n     * The bytes written by this method may be\n     * read by the <code>readChar</code> method\n     * of interface <code>DataInput</code> , which\n     * will then return a <code>char</code> equal\n     * to <code>(char)v</code>.\n     *\n     * @param      v   the <code>char</code> value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeInt(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes an <code>int</code> value, which is\n     * comprised of four bytes, to the output stream.\n     * The byte values to be written, in the  order\n     * shown, are:\n     * <pre>{@code\n     * (byte)(0xff & (v >> 24))\n     * (byte)(0xff & (v >> 16))\n     * (byte)(0xff & (v >>  8))\n     * (byte)(0xff & v)\n     * }</pre><p>\n     * The bytes written by this method may be read\n     * by the <code>readInt</code> method of interface\n     * <code>DataInput</code> , which will then\n     * return an <code>int</code> equal to <code>v</code>.\n     *\n     * @param      v   the <code>int</code> value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeLong(long v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>long</code> value, which is\n     * comprised of eight bytes, to the output stream.\n     * The byte values to be written, in the  order\n     * shown, are:\n     * <pre>{@code\n     * (byte)(0xff & (v >> 56))\n     * (byte)(0xff & (v >> 48))\n     * (byte)(0xff & (v >> 40))\n     * (byte)(0xff & (v >> 32))\n     * (byte)(0xff & (v >> 24))\n     * (byte)(0xff & (v >> 16))\n     * (byte)(0xff & (v >>  8))\n     * (byte)(0xff & v)\n     * }</pre><p>\n     * The bytes written by this method may be\n     * read by the <code>readLong</code> method\n     * of interface <code>DataInput</code> , which\n     * will then return a <code>long</code> equal\n     * to <code>v</code>.\n     *\n     * @param      v   the <code>long</code> value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeFloat(float v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>float</code> value,\n     * which is comprised of four bytes, to the output stream.\n     * It does this as if it first converts this\n     * <code>float</code> value to an <code>int</code>\n     * in exactly the manner of the <code>Float.floatToIntBits</code>\n     * method  and then writes the <code>int</code>\n     * value in exactly the manner of the  <code>writeInt</code>\n     * method.  The bytes written by this method\n     * may be read by the <code>readFloat</code>\n     * method of interface <code>DataInput</code>,\n     * which will then return a <code>float</code>\n     * equal to <code>v</code>.\n     *\n     * @param      v   the <code>float</code> value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeDouble(double v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>double</code> value,\n     * which is comprised of eight bytes, to the output stream.\n     * It does this as if it first converts this\n     * <code>double</code> value to a <code>long</code>\n     * in exactly the manner of the <code>Double.doubleToLongBits</code>\n     * method  and then writes the <code>long</code>\n     * value in exactly the manner of the  <code>writeLong</code>\n     * method. The bytes written by this method\n     * may be read by the <code>readDouble</code>\n     * method of interface <code>DataInput</code>,\n     * which will then return a <code>double</code>\n     * equal to <code>v</code>.\n     *\n     * @param      v   the <code>double</code> value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeBytes(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a string to the output stream.\n     * For every character in the string\n     * <code>s</code>,  taken in order, one byte\n     * is written to the output stream.  If\n     * <code>s</code> is <code>null</code>, a <code>NullPointerException</code>\n     * is thrown.<p>  If <code>s.length</code>\n     * is zero, then no bytes are written. Otherwise,\n     * the character <code>s[0]</code> is written\n     * first, then <code>s[1]</code>, and so on;\n     * the last character written is <code>s[s.length-1]</code>.\n     * For each character, one byte is written,\n     * the low-order byte, in exactly the manner\n     * of the <code>writeByte</code> method . The\n     * high-order eight bits of each character\n     * in the string are ignored.\n     *\n     * @param      s   the string of bytes to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeChars(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes every character in the string <code>s</code>,\n     * to the output stream, in order,\n     * two bytes per character. If <code>s</code>\n     * is <code>null</code>, a <code>NullPointerException</code>\n     * is thrown.  If <code>s.length</code>\n     * is zero, then no characters are written.\n     * Otherwise, the character <code>s[0]</code>\n     * is written first, then <code>s[1]</code>,\n     * and so on; the last character written is\n     * <code>s[s.length-1]</code>. For each character,\n     * two bytes are actually written, high-order\n     * byte first, in exactly the manner of the\n     * <code>writeChar</code> method.\n     *\n     * @param      s   the string value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeUTF(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes two bytes of length information\n     * to the output stream, followed\n     * by the\n     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n     * representation\n     * of  every character in the string <code>s</code>.\n     * If <code>s</code> is <code>null</code>,\n     * a <code>NullPointerException</code> is thrown.\n     * Each character in the string <code>s</code>\n     * is converted to a group of one, two, or\n     * three bytes, depending on the value of the\n     * character.<p>\n     * If a character <code>c</code>\n     * is in the range <code>&#92;u0001</code> through\n     * <code>&#92;u007f</code>, it is represented\n     * by one byte:\n     * <pre>(byte)c </pre>  <p>\n     * If a character <code>c</code> is <code>&#92;u0000</code>\n     * or is in the range <code>&#92;u0080</code>\n     * through <code>&#92;u07ff</code>, then it is\n     * represented by two bytes, to be written\n     * in the order shown: <pre>{@code\n     * (byte)(0xc0 | (0x1f & (c >> 6)))\n     * (byte)(0x80 | (0x3f & c))\n     * }</pre> <p> If a character\n     * <code>c</code> is in the range <code>&#92;u0800</code>\n     * through <code>uffff</code>, then it is\n     * represented by three bytes, to be written\n     * in the order shown: <pre>{@code\n     * (byte)(0xe0 | (0x0f & (c >> 12)))\n     * (byte)(0x80 | (0x3f & (c >>  6)))\n     * (byte)(0x80 | (0x3f & c))\n     * }</pre>  <p> First,\n     * the total number of bytes needed to represent\n     * all the characters of <code>s</code> is\n     * calculated. If this number is larger than\n     * <code>65535</code>, then a <code>UTFDataFormatException</code>\n     * is thrown. Otherwise, this length is written\n     * to the output stream in exactly the manner\n     * of the <code>writeShort</code> method;\n     * after this, the one-, two-, or three-byte\n     * representation of each character in the\n     * string <code>s</code> is written.<p>  The\n     * bytes written by this method may be read\n     * by the <code>readUTF</code> method of interface\n     * <code>DataInput</code> , which will then\n     * return a <code>String</code> equal to <code>s</code>.\n     *\n     * @param      s   the string value to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void write(int b) throws IOException", " void write(byte[] b) throws IOException", " void write(byte[] b, int off, int len) throws IOException", " void writeBoolean(boolean v) throws IOException", " void writeByte(int v) throws IOException", " void writeShort(int v) throws IOException", " void writeChar(int v) throws IOException", " void writeInt(int v) throws IOException", " void writeLong(long v) throws IOException", " void writeFloat(float v) throws IOException", " void writeDouble(double v) throws IOException", " void writeBytes(String s) throws IOException", " void writeChars(String s) throws IOException", " void writeUTF(String s) throws IOException" ],
  "variableNames" : [ ]
}