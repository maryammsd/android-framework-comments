{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keymaster/KeymasterArguments.java",
  "packageName" : "android.security.keymaster",
  "className" : "KeymasterArguments",
  "comment" : "\n * Utility class for the java side of user specified Keymaster arguments.\n * <p>\n * Serialization code for this and subclasses must be kept in sync with system/security/keystore\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "UINT32_RANGE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT32_MAX_VALUE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT64_RANGE",
    "type" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT64_MAX_VALUE",
    "type" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArguments",
    "type" : "List<KeymasterArgument>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<KeymasterArguments>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addEnum(int tag, int value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an enum tag with the provided value.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not an enum tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addEnums(int tag, int... values)",
    "returnType" : "void",
    "comment" : "\n     * Adds a repeated enum tag with the provided values.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a repeating enum tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEnum(int tag, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the specified enum tag or {@code defaultValue} if the tag is not\n     * present.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not an enum tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getEnums(int tag)",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Returns all values of the specified repeating enum tag.\n     *\n     * throws IllegalArgumentException if {@code tag} is not a repeating enum tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addEnumTag(int tag, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getEnumTagValue(KeymasterArgument arg)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addUnsignedInt(int tag, long value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an unsigned 32-bit int tag with the provided value.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not an unsigned 32-bit int tag or if\n     *         {@code value} is outside of the permitted range [0; 2^32).\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUnsignedInt(int tag, long defaultValue)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the specified unsigned 32-bit int tag or {@code defaultValue} if the tag\n     * is not present.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not an unsigned 32-bit int tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUnsignedLong(int tag, BigInteger value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an unsigned 64-bit long tag with the provided value.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not an unsigned 64-bit long tag or if\n     *         {@code value} is outside of the permitted range [0; 2^64).\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BigInteger> getUnsignedLongs(int tag)",
    "returnType" : "List<BigInteger>",
    "comment" : "\n     * Returns all values of the specified repeating unsigned 64-bit long tag.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a repeating unsigned 64-bit long tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addLongTag(int tag, BigInteger value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private BigInteger getLongTagValue(KeymasterArgument arg)",
    "returnType" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addBoolean(int tag)",
    "returnType" : "void",
    "comment" : "\n     * Adds the provided boolean tag. Boolean tags are considered to be set to {@code true} if\n     * present and {@code false} if absent.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a boolean tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(int tag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the provided boolean tag is present, {@code false} if absent.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a boolean tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addBytes(int tag, byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a bytes tag with the provided value.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a bytes tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytes(int tag, byte[] defaultValue)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the value of the specified bytes tag or {@code defaultValue} if the tag is not\n     * present.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a bytes tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addDate(int tag, Date value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a date tag with the provided value.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a date tag or if {@code value} is\n     *         before the start of Unix epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addDateIfNotNull(int tag, Date value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a date tag with the provided value, if the value is not {@code null}. Does nothing if\n     * the {@code value} is null.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a date tag or if {@code value} is\n     *         before the start of Unix epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getDate(int tag, Date defaultValue)",
    "returnType" : "Date",
    "comment" : "\n     * Returns the value of the specified date tag or {@code defaultValue} if the tag is not\n     * present.\n     *\n     * @throws IllegalArgumentException if {@code tag} is not a date tag or if the tag's value\n     *         represents a time instant which is after {@code 2^63 - 1} milliseconds since Unix\n     *         epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "private KeymasterArgument getArgumentByTag(int tag)",
    "returnType" : "KeymasterArgument",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsTag(int tag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static BigInteger toUint64(long value)",
    "returnType" : "BigInteger",
    "comment" : "\n     * Converts the provided value to non-negative {@link BigInteger}, treating the sign bit of the\n     * provided value as the most significant bit of the result.\n     ",
    "links" : [ "java.math.BigInteger" ]
  } ],
  "methodNames" : [ "public void addEnum(int tag, int value)", "public void addEnums(int tag, int... values)", "public int getEnum(int tag, int defaultValue)", "public List<Integer> getEnums(int tag)", "private void addEnumTag(int tag, int value)", "private int getEnumTagValue(KeymasterArgument arg)", "public void addUnsignedInt(int tag, long value)", "public long getUnsignedInt(int tag, long defaultValue)", "public void addUnsignedLong(int tag, BigInteger value)", "public List<BigInteger> getUnsignedLongs(int tag)", "private void addLongTag(int tag, BigInteger value)", "private BigInteger getLongTagValue(KeymasterArgument arg)", "public void addBoolean(int tag)", "public boolean getBoolean(int tag)", "public void addBytes(int tag, byte[] value)", "public byte[] getBytes(int tag, byte[] defaultValue)", "public void addDate(int tag, Date value)", "public void addDateIfNotNull(int tag, Date value)", "public Date getDate(int tag, Date defaultValue)", "private KeymasterArgument getArgumentByTag(int tag)", "public boolean containsTag(int tag)", "public int size()", "public void writeToParcel(Parcel out, int flags)", "public void readFromParcel(Parcel in)", "public int describeContents()", "public static BigInteger toUint64(long value)" ],
  "variableNames" : [ "UINT32_RANGE", "UINT32_MAX_VALUE", "UINT64_RANGE", "UINT64_MAX_VALUE", "mArguments", "CREATOR" ]
}