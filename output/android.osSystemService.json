{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/SystemService.java",
  "packageName" : "android.os",
  "className" : "SystemService",
  "comment" : "\n * Controls and utilities for low-level {@code init} services.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "sStates",
    "type" : "HashMap<String, State>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPropertyLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void start(String name)",
    "returnType" : "void",
    "comment" : " Request that the init daemon start a named service. ",
    "links" : [ ]
  }, {
    "name" : "public static void stop(String name)",
    "returnType" : "void",
    "comment" : " Request that the init daemon stop a named service. ",
    "links" : [ ]
  }, {
    "name" : "public static void restart(String name)",
    "returnType" : "void",
    "comment" : " Request that the init daemon restart a named service. ",
    "links" : [ ]
  }, {
    "name" : "public static State getState(String service)",
    "returnType" : "State",
    "comment" : "\n     * Return current state of given service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStopped(String service)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given service is {@link State#STOPPED}.\n     ",
    "links" : [ "State#STOPPED" ]
  }, {
    "name" : "public static boolean isRunning(String service)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given service is {@link State#RUNNING}.\n     ",
    "links" : [ "State#RUNNING" ]
  }, {
    "name" : "public static void waitForState(String service, State state, long timeoutMillis) throws TimeoutException",
    "returnType" : "void",
    "comment" : "\n     * Wait until given service has entered specific state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void waitForAnyStopped(String... services)",
    "returnType" : "void",
    "comment" : "\n     * Wait until any of given services enters {@link State#STOPPED}.\n     ",
    "links" : [ "State#STOPPED" ]
  } ],
  "variableNames" : [ "sStates", "sPropertyLock" ],
  "methodNames" : [ "public static void start(String name)", "public static void stop(String name)", "public static void restart(String name)", "public static State getState(String service)", "public static boolean isStopped(String service)", "public static boolean isRunning(String service)", "public static void waitForState(String service, State state, long timeoutMillis) throws TimeoutException", "public static void waitForAnyStopped(String... services)" ]
}