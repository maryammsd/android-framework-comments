{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiScanner.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiScanner",
  "comment" : "\n * This class provides a way to scan the Wifi universe around the device\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "WIFI_BAND_INDEX_24_GHZ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_INDEX_5_GHZ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_INDEX_5_GHZ_DFS_ONLY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_INDEX_6_GHZ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_INDEX_60_GHZ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_COUNT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_INDEX_5_GHZ_LOW",
    "type" : "int",
    "comment" : "\n     * Reserved bit for Multi-internet connection only, not for scanning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_INDEX_5_GHZ_HIGH",
    "type" : "int",
    "comment" : "\n     * Reserved bit for Multi-internet connection only, not for scanning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_UNSPECIFIED",
    "type" : "int",
    "comment" : " no band specified; use channel list instead ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_GHZ",
    "type" : "int",
    "comment" : " 2.4 GHz band ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ",
    "type" : "int",
    "comment" : " 5 GHz band excluding DFS channels ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ_DFS_ONLY",
    "type" : "int",
    "comment" : " DFS channels from 5 GHz band only ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_6_GHZ",
    "type" : "int",
    "comment" : " 6 GHz band ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_60_GHZ",
    "type" : "int",
    "comment" : " 60 GHz band ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ_LOW",
    "type" : "int",
    "comment" : "\n     * Reserved for Multi-internet connection only, not for scanning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ_HIGH",
    "type" : "int",
    "comment" : "\n     * Reserved for Multi-internet connection only, not for scanning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_BOTH",
    "type" : "int",
    "comment" : " Both 2.4 GHz band and 5 GHz band; no DFS channels ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_GHZ_WITH_5GHZ_DFS",
    "type" : "int",
    "comment" : "\n     * 2.4Ghz band + DFS channels from 5 GHz band only\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ_WITH_DFS",
    "type" : "int",
    "comment" : " 5 GHz band including DFS channels ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_BOTH_WITH_DFS",
    "type" : "int",
    "comment" : " Both 2.4 GHz band and 5 GHz band; with DFS channels ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_5_6_GHZ",
    "type" : "int",
    "comment" : " 2.4 GHz band and 5 GHz band (no DFS channels) and 6 GHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_5_WITH_DFS_6_GHZ",
    "type" : "int",
    "comment" : " 2.4 GHz band and 5 GHz band; with DFS channels and 6 GHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_5_6_60_GHZ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_5_WITH_DFS_6_60_GHZ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_ALL",
    "type" : "int",
    "comment" : "\n     * All bands\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_SCAN_PERIOD_MS",
    "type" : "int",
    "comment" : " Minimum supported scanning period ",
    "links" : [ ]
  }, {
    "name" : "MAX_SCAN_PERIOD_MS",
    "type" : "int",
    "comment" : " Maximum supported scanning period ",
    "links" : [ ]
  }, {
    "name" : "REASON_SUCCEEDED",
    "type" : "int",
    "comment" : " No Error ",
    "links" : [ ]
  }, {
    "name" : "REASON_UNSPECIFIED",
    "type" : "int",
    "comment" : " Unknown error ",
    "links" : [ ]
  }, {
    "name" : "REASON_INVALID_LISTENER",
    "type" : "int",
    "comment" : " Invalid listener ",
    "links" : [ ]
  }, {
    "name" : "REASON_INVALID_REQUEST",
    "type" : "int",
    "comment" : " Invalid request ",
    "links" : [ ]
  }, {
    "name" : "REASON_NOT_AUTHORIZED",
    "type" : "int",
    "comment" : " Invalid request ",
    "links" : [ ]
  }, {
    "name" : "REASON_DUPLICATE_REQEUST",
    "type" : "int",
    "comment" : " An outstanding request with the same listener hasn't finished yet. ",
    "links" : [ ]
  }, {
    "name" : "REASON_BUSY",
    "type" : "int",
    "comment" : " Busy - Due to Connection in progress, processing another scan request etc. ",
    "links" : [ ]
  }, {
    "name" : "REASON_ABORT",
    "type" : "int",
    "comment" : " Abort - Due to another high priority operation like roaming, offload scan etc. ",
    "links" : [ ]
  }, {
    "name" : "REASON_NO_DEVICE",
    "type" : "int",
    "comment" : " No such device - Wrong interface or interface doesn't exist. ",
    "links" : [ ]
  }, {
    "name" : "REASON_INVALID_ARGS",
    "type" : "int",
    "comment" : " Invalid argument - Wrong/unsupported argument passed in scan params. ",
    "links" : [ ]
  }, {
    "name" : "REASON_TIMEOUT",
    "type" : "int",
    "comment" : " Timeout - Device didn't respond back with scan results ",
    "links" : [ ]
  }, {
    "name" : "GET_AVAILABLE_CHANNELS_EXTRA",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_RNR_ENABLED_IF_WIFI_BAND_6_GHZ_SCANNED",
    "type" : "int",
    "comment" : "\n     * This constant is used for {@link ScanSettings#setRnrSetting(int)}.\n     * <p>\n     * Scan 6Ghz APs co-located with 2.4/5Ghz APs using Reduced Neighbor Report (RNR) if the 6Ghz\n     * band is explicitly requested to be scanned and the current country code supports scanning\n     * of at least one 6Ghz channel. The 6Ghz band is explicitly requested if the\n     * ScanSetting.band parameter is set to one of:\n     * <li> {@link #WIFI_BAND_6_GHZ} </li>\n     * <li> {@link #WIFI_BAND_24_5_6_GHZ} </li>\n     * <li> {@link #WIFI_BAND_24_5_WITH_DFS_6_GHZ} </li>\n     * <li> {@link #WIFI_BAND_24_5_6_60_GHZ} </li>\n     * <li> {@link #WIFI_BAND_24_5_WITH_DFS_6_60_GHZ} </li>\n     * <li> {@link #WIFI_BAND_ALL} </li>\n     *",
    "links" : [ "#WIFI_BAND_24_5_WITH_DFS_6_GHZ", "#WIFI_BAND_24_5_WITH_DFS_6_60_GHZ", "#WIFI_BAND_6_GHZ", "#setRnrSetting(int)", "#WIFI_BAND_24_5_6_GHZ", "#WIFI_BAND_24_5_6_60_GHZ", "#WIFI_BAND_ALL" ]
  }, {
    "name" : "WIFI_RNR_ENABLED",
    "type" : "int",
    "comment" : "\n     * This constant is used for {@link ScanSettings#setRnrSetting(int)}.\n     * <p>\n     * Request to scan 6Ghz APs co-located with 2.4/5Ghz APs using Reduced Neighbor Report (RNR)\n     * when the current country code supports scanning of at least one 6Ghz channel.\n     *",
    "links" : [ "#setRnrSetting(int)" ]
  }, {
    "name" : "WIFI_RNR_NOT_NEEDED",
    "type" : "int",
    "comment" : "\n     * This constant is used for {@link ScanSettings#setRnrSetting(int)}.\n     * <p>\n     * Do not request to scan 6Ghz APs co-located with 2.4/5Ghz APs using\n     * Reduced Neighbor Report (RNR)\n     *",
    "links" : [ "#setRnrSetting(int)" ]
  }, {
    "name" : "WIFI_SCANNER_SETTINGS_VENDOR_ELEMENTS_MAX_LEN",
    "type" : "int",
    "comment" : "\n     * Maximum length in bytes of all vendor specific information elements (IEs) allowed to set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_IE_HEAD_LEN",
    "type" : "int",
    "comment" : "\n     * Information Element head: id (1 byte) + length (1 byte)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_EVENT_AFTER_BUFFER_FULL",
    "type" : "int",
    "comment" : "\n     * reports {@link ScanListener#onResults} when underlying buffers are full\n     * this is simply the lack of the {@link #REPORT_EVENT_AFTER_EACH_SCAN} flag\n     * @deprecated It is not supported anymore.\n     ",
    "links" : [ "#REPORT_EVENT_AFTER_EACH_SCAN", "#onResults" ]
  }, {
    "name" : "REPORT_EVENT_AFTER_EACH_SCAN",
    "type" : "int",
    "comment" : "\n     * reports {@link ScanListener#onResults} after each scan\n     ",
    "links" : [ "#onResults" ]
  }, {
    "name" : "REPORT_EVENT_FULL_SCAN_RESULT",
    "type" : "int",
    "comment" : "\n     * reports {@link ScanListener#onFullResult} whenever each beacon is discovered\n     ",
    "links" : [ "#onFullResult" ]
  }, {
    "name" : "REPORT_EVENT_NO_BATCH",
    "type" : "int",
    "comment" : "\n     * Do not place scans in the chip's scan history buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_LOW_LATENCY",
    "type" : "int",
    "comment" : "\n     * Optimize the scan for lower latency.\n     * @see ScanSettings#type\n     ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_LOW_POWER",
    "type" : "int",
    "comment" : "\n     * Optimize the scan for lower power usage.\n     * @see ScanSettings#type\n     ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_HIGH_ACCURACY",
    "type" : "int",
    "comment" : "\n     * Optimize the scan for higher accuracy.\n     * @see ScanSettings#type\n     ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_MAX",
    "type" : "int",
    "comment" : "\n     * Max valid value of SCAN_TYPE_\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCAN_PARAMS_SCAN_SETTINGS_KEY",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "SCAN_PARAMS_WORK_SOURCE_KEY",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_PACKAGE_NAME_KEY",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_FEATURE_ID_KEY",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PNO_PARAMS_PNO_SETTINGS_KEY",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PNO_PARAMS_SCAN_SETTINGS_KEY",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BASE",
    "type" : "int",
    "comment" : " commands for Wifi Service ",
    "links" : [ ]
  }, {
    "name" : "CMD_START_BACKGROUND_SCAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_STOP_BACKGROUND_SCAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_GET_SCAN_RESULTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_SCAN_RESULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_CACHED_SCAN_DATA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_OP_SUCCEEDED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_OP_FAILED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_FULL_SCAN_RESULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_START_SINGLE_SCAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_STOP_SINGLE_SCAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_SINGLE_SCAN_COMPLETED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_START_PNO_SCAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_STOP_PNO_SCAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_PNO_NETWORK_FOUND",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_REGISTER_SCAN_LISTENER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_DEREGISTER_SCAN_LISTENER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_GET_SINGLE_SCAN_RESULTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_ENABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CMD_DISABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IWifiScanner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerMapLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerMap",
    "type" : "Map<ActionListener, ServiceListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isFullBandScan(@WifiBand int bandsScanned, boolean excludeDfs)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if scan is a full scan. i.e. scanning all available bands.\n     * For backward compatibility, since some apps don't include 6GHz or 60Ghz in their requests\n     * yet, lacking 6GHz or 60Ghz band does not cause the result to be false.\n     *\n     * @param bandsScanned bands that are fully scanned\n     * @param excludeDfs when true, DFS band is excluded from the check\n     * @return true if all bands are scanned, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getAvailableChannels(int band)",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Returns a list of all the possible channels for the given band(s).\n     *\n     * @param band one of the WifiScanner#WIFI_BAND_* constants, e.g. {@link #WIFI_BAND_24_GHZ}\n     * @return a list of all the frequencies, in MHz, for the given band(s) e.g. channel 1 is\n     * 2412, or null if an error occurred.\n     ",
    "links" : [ "#WIFI_BAND_24_GHZ" ]
  }, {
    "name" : "public void setScanningEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enable/Disable wifi scanning.\n     *\n     * @param enable set to true to enable scanning, set to false to disable all types of scanning.\n     *\n     * @see WifiManager#ACTION_WIFI_SCAN_AVAILABILITY_CHANGED\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerScanListener(@NonNull @CallbackExecutor Executor executor, @NonNull ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener that will receive results from all single scans.\n     * Either the {@link ScanListener#onSuccess()} or  {@link ScanListener#onFailure(int, String)}\n     * method will be called once when the listener is registered.\n     * Afterwards (assuming onSuccess was called), all subsequent single scan results will be\n     * delivered to the listener. It is possible that onFullResult will not be called for all\n     * results of the first scan if the listener was registered during the scan.\n     * <p>\n     * On {@link android.os.Build.VERSION_CODES#TIRAMISU} or above this API can be called by\n     * an app with either {@link android.Manifest.permission#LOCATION_HARDWARE} or\n     * {@link android.Manifest.permission#NETWORK_STACK}. On platform versions prior to\n     * {@link android.os.Build.VERSION_CODES#TIRAMISU}, the caller must have\n     * {@link android.Manifest.permission#NETWORK_STACK}.\n     *\n     * @param executor the Executor on which to run the callback.\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this request, and must also be specified to cancel the request.\n     *                 Multiple requests should also not share this object.\n     * @throws SecurityException if the caller does not have permission.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "#onFailure(int", "android.Manifest.permission#NETWORK_STACK", "#onSuccess()", "android.Manifest.permission#LOCATION_HARDWARE" ]
  }, {
    "name" : "public void registerScanListener(@NonNull ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Overload of {@link #registerScanListener(Executor, ScanListener)} that executes the callback\n     * synchronously.\n     * @hide\n     ",
    "links" : [ "#registerScanListener(Executor" ]
  }, {
    "name" : "public void unregisterScanListener(@NonNull ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Deregister a listener for ongoing single scans\n     * @param listener specifies which scan to cancel; must be same object as passed in {@link\n     *  #registerScanListener}\n     ",
    "links" : [ "#registerScanListener" ]
  }, {
    "name" : "public boolean isScanning()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the Wi-Fi subsystem has started a scan and is waiting for scan results.\n     * @return true if a scan initiated via\n     *         {@link WifiScanner#startScan(ScanSettings, ScanListener)} or\n     *         {@link WifiManager#startScan()} is in progress.\n     *         false if there is currently no scanning initiated by {@link WifiScanner} or\n     *         {@link WifiManager}, but it's still possible the wifi radio is scanning for\n     *         another reason.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#startScan()", "android.net.wifi.WifiManager", "android.net.wifi.WifiScanner#startScan(ScanSettings", "android.net.wifi.WifiScanner" ]
  }, {
    "name" : "public void startBackgroundScan(ScanSettings settings, ScanListener listener)",
    "returnType" : "void",
    "comment" : " start wifi scan in background\n     * @param settings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     ",
    "links" : [ "ScanSettings" ]
  }, {
    "name" : "public void startBackgroundScan(ScanSettings settings, ScanListener listener, WorkSource workSource)",
    "returnType" : "void",
    "comment" : " start wifi scan in background\n     * @param settings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param workSource WorkSource to blame for power usage\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     * @deprecated Background scan support has always been hardware vendor dependent. This support\n     * may not be present on newer devices. Use {@link #startScan(ScanSettings, ScanListener)}\n     * instead for single scans.\n     ",
    "links" : [ "#startScan(ScanSettings", "ScanSettings" ]
  }, {
    "name" : "public void stopBackgroundScan(ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * stop an ongoing wifi scan\n     * @param listener specifies which scan to cancel; must be same object as passed in {@link\n     *  #startBackgroundScan}\n     * @deprecated Background scan support has always been hardware vendor dependent. This support\n     * may not be present on newer devices. Use {@link #startScan(ScanSettings, ScanListener)}\n     * instead for single scans.\n     ",
    "links" : [ "#startScan(ScanSettings", "#startBackgroundScan" ]
  }, {
    "name" : "public boolean getScanResults()",
    "returnType" : "boolean",
    "comment" : "\n     * reports currently available scan results on appropriate listeners\n     * @return true if all scan results were reported correctly\n     * @deprecated Background scan support has always been hardware vendor dependent. This support\n     * may not be present on newer devices. Use {@link #startScan(ScanSettings, ScanListener)}\n     * instead for single scans.\n     ",
    "links" : [ "#startScan(ScanSettings" ]
  }, {
    "name" : "public void startScan(ScanSettings settings, ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * starts a single scan and reports results asynchronously\n     * @param settings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     ",
    "links" : [ "ScanSettings" ]
  }, {
    "name" : "public void startScan(ScanSettings settings, ScanListener listener, WorkSource workSource)",
    "returnType" : "void",
    "comment" : "\n     * starts a single scan and reports results asynchronously\n     * @param settings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     * @param workSource WorkSource to blame for power usage\n     ",
    "links" : [ "ScanSettings" ]
  }, {
    "name" : "public void startScan(ScanSettings settings, @Nullable @CallbackExecutor Executor executor, ScanListener listener, WorkSource workSource)",
    "returnType" : "void",
    "comment" : "\n     * starts a single scan and reports results asynchronously\n     * @param settings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param executor the Executor on which to run the callback.\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     * @param workSource WorkSource to blame for power usage\n     * @hide\n     ",
    "links" : [ "ScanSettings" ]
  }, {
    "name" : "public void stopScan(ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * stops an ongoing single shot scan; only useful after {@link #startScan} if onResults()\n     * hasn't been called on the listener, ignored otherwise\n     * @param listener\n     ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "public List<ScanResult> getSingleScanResults()",
    "returnType" : "List<ScanResult>",
    "comment" : "\n     * Retrieve the most recent scan results from a single scan request.\n     *\n     * <p>\n     * When an Access Point’s beacon or probe response includes a Multi-BSSID Element, the\n     * returned scan results should include separate scan result for each BSSID within the\n     * Multi-BSSID Information Element. This includes both transmitted and non-transmitted BSSIDs.\n     * Original Multi-BSSID Element will be included in the Information Elements attached to\n     * each of the scan results.\n     * Note: This is the expected behavior for devices supporting 11ax (WiFi-6) and above, and an\n     * optional requirement for devices running with older WiFi generations.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getCachedScanData(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<ScanData> resultsCallback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the scan data cached by the hardware.\n     *\n     * <p>\n     * When an Access Point’s beacon or probe response includes a Multi-BSSID Element, the\n     * returned scan results should include separate scan result for each BSSID within the\n     * Multi-BSSID Information Element. This includes both transmitted and non-transmitted BSSIDs.\n     * Original Multi-BSSID Element will be included in the Information Elements attached to\n     * each of the scan results.\n     * Note: This is the expected behavior for devices supporting 11ax (WiFi-6) and above, and an\n     * optional requirement for devices running with older WiFi generations.\n     * </p>\n     *\n     * @param executor The executor on which callback will be invoked.\n     * @param resultsCallback An asynchronous callback that will return the cached scan data.\n     *\n     * @throws UnsupportedOperationException if the API is not supported on this SDK version.\n     * @throws SecurityException if the caller does not have permission.\n     * @throws NullPointerException if the caller provided invalid inputs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void startPnoScan(PnoScanListener listener, Executor executor, ScanSettings scanSettings, PnoSettings pnoSettings)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startConnectedPnoScan(ScanSettings scanSettings, PnoSettings pnoSettings, @NonNull @CallbackExecutor Executor executor, PnoScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Start wifi connected PNO scan\n     * @param scanSettings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param pnoSettings specifies various parameters for PNO; for more information look at\n     * {@link PnoSettings}\n     * @param executor the Executor on which to run the callback.\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     * {@hide}\n     ",
    "links" : [ "ScanSettings", "android.net.wifi.PnoSettings" ]
  }, {
    "name" : "public void startDisconnectedPnoScan(ScanSettings scanSettings, PnoSettings pnoSettings, @NonNull @CallbackExecutor Executor executor, PnoScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Start wifi disconnected PNO scan\n     * @param scanSettings specifies various parameters for the scan; for more information look at\n     * {@link ScanSettings}\n     * @param pnoSettings specifies various parameters for PNO; for more information look at\n     * {@link PnoSettings}\n     * @param listener specifies the object to report events to. This object is also treated as a\n     *                 key for this scan, and must also be specified to cancel the scan. Multiple\n     *                 scans should also not share this object.\n     * {@hide}\n     ",
    "links" : [ "ScanSettings", "android.net.wifi.PnoSettings" ]
  }, {
    "name" : "public void stopPnoScan(ScanListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Stop an ongoing wifi PNO scan\n     * @param listener specifies which scan to cancel; must be same object as passed in {@link\n     *  #startPnoScan}\n     * {@hide}\n     ",
    "links" : [ "#startPnoScan" ]
  }, {
    "name" : "public void enableVerboseLogging(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable verbose logging. For internal use by wifi framework only.\n     * @param enabled whether verbose logging is enabled\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void configureWifiChange(int rssiSampleSize, int lostApSampleSize, int unchangedSampleSize, int minApsBreachingThreshold, int periodInMs, BssidInfo[] bssidInfos)",
    "returnType" : "void",
    "comment" : " configure WifiChange detection\n     * @param rssiSampleSize number of samples used for RSSI averaging\n     * @param lostApSampleSize number of samples to confirm an access point's loss\n     * @param unchangedSampleSize number of samples to confirm there are no changes\n     * @param minApsBreachingThreshold minimum number of access points that need to be\n     *                                 out of range to detect WifiChange\n     * @param periodInMs indicates period of scan to find changes\n     * @param bssidInfos access points to watch\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startTrackingWifiChange(WifiChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * track changes in wifi environment\n     * @param listener object to report events on; this object must be unique and must also be\n     *                 provided on {@link #stopTrackingWifiChange}\n     ",
    "links" : [ "#stopTrackingWifiChange" ]
  }, {
    "name" : "public void stopTrackingWifiChange(WifiChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * stop tracking changes in wifi environment\n     * @param listener object that was provided to report events on {@link\n     * #stopTrackingWifiChange}\n     ",
    "links" : [ "#stopTrackingWifiChange" ]
  }, {
    "name" : "public void configureWifiChange(WifiChangeSettings settings)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startTrackingBssids(BssidInfo[] bssidInfos, int apLostThreshold, BssidListener listener)",
    "returnType" : "void",
    "comment" : "\n     * set interesting access points to find\n     * @param bssidInfos access points of interest\n     * @param apLostThreshold number of scans needed to indicate that AP is lost\n     * @param listener object provided to report events on; this object must be unique and must\n     *                 also be provided on {@link #stopTrackingBssids}\n     ",
    "links" : [ "#stopTrackingBssids" ]
  }, {
    "name" : "public void stopTrackingBssids(BssidListener listener)",
    "returnType" : "void",
    "comment" : "\n     * remove tracking of interesting access points\n     * @param listener same object provided in {@link #startTrackingBssids}\n     ",
    "links" : [ "#startTrackingBssids" ]
  }, {
    "name" : "private boolean addListener(ActionListener listener, ServiceListener serviceListener)",
    "returnType" : "boolean",
    "comment" : " return the key of the listener.",
    "links" : [ ]
  }, {
    "name" : "private ServiceListener getServiceListener(ActionListener listener)",
    "returnType" : "ServiceListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeListener(ActionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isFullBandScan(@WifiBand int bandsScanned, boolean excludeDfs)", "public List<Integer> getAvailableChannels(int band)", "public void setScanningEnabled(boolean enable)", "public void registerScanListener(@NonNull @CallbackExecutor Executor executor, @NonNull ScanListener listener)", "public void registerScanListener(@NonNull ScanListener listener)", "public void unregisterScanListener(@NonNull ScanListener listener)", "public boolean isScanning()", "public void startBackgroundScan(ScanSettings settings, ScanListener listener)", "public void startBackgroundScan(ScanSettings settings, ScanListener listener, WorkSource workSource)", "public void stopBackgroundScan(ScanListener listener)", "public boolean getScanResults()", "public void startScan(ScanSettings settings, ScanListener listener)", "public void startScan(ScanSettings settings, ScanListener listener, WorkSource workSource)", "public void startScan(ScanSettings settings, @Nullable @CallbackExecutor Executor executor, ScanListener listener, WorkSource workSource)", "public void stopScan(ScanListener listener)", "public List<ScanResult> getSingleScanResults()", "public void getCachedScanData(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<ScanData> resultsCallback)", "private void startPnoScan(PnoScanListener listener, Executor executor, ScanSettings scanSettings, PnoSettings pnoSettings)", "public void startConnectedPnoScan(ScanSettings scanSettings, PnoSettings pnoSettings, @NonNull @CallbackExecutor Executor executor, PnoScanListener listener)", "public void startDisconnectedPnoScan(ScanSettings scanSettings, PnoSettings pnoSettings, @NonNull @CallbackExecutor Executor executor, PnoScanListener listener)", "public void stopPnoScan(ScanListener listener)", "public void enableVerboseLogging(boolean enabled)", "public void configureWifiChange(int rssiSampleSize, int lostApSampleSize, int unchangedSampleSize, int minApsBreachingThreshold, int periodInMs, BssidInfo[] bssidInfos)", "public void startTrackingWifiChange(WifiChangeListener listener)", "public void stopTrackingWifiChange(WifiChangeListener listener)", "public void configureWifiChange(WifiChangeSettings settings)", "public void startTrackingBssids(BssidInfo[] bssidInfos, int apLostThreshold, BssidListener listener)", "public void stopTrackingBssids(BssidListener listener)", "private boolean addListener(ActionListener listener, ServiceListener serviceListener)", "private ServiceListener getServiceListener(ActionListener listener)", "private void removeListener(ActionListener listener)" ],
  "variableNames" : [ "WIFI_BAND_INDEX_24_GHZ", "WIFI_BAND_INDEX_5_GHZ", "WIFI_BAND_INDEX_5_GHZ_DFS_ONLY", "WIFI_BAND_INDEX_6_GHZ", "WIFI_BAND_INDEX_60_GHZ", "WIFI_BAND_COUNT", "WIFI_BAND_INDEX_5_GHZ_LOW", "WIFI_BAND_INDEX_5_GHZ_HIGH", "WIFI_BAND_UNSPECIFIED", "WIFI_BAND_24_GHZ", "WIFI_BAND_5_GHZ", "WIFI_BAND_5_GHZ_DFS_ONLY", "WIFI_BAND_6_GHZ", "WIFI_BAND_60_GHZ", "WIFI_BAND_5_GHZ_LOW", "WIFI_BAND_5_GHZ_HIGH", "WIFI_BAND_BOTH", "WIFI_BAND_24_GHZ_WITH_5GHZ_DFS", "WIFI_BAND_5_GHZ_WITH_DFS", "WIFI_BAND_BOTH_WITH_DFS", "WIFI_BAND_24_5_6_GHZ", "WIFI_BAND_24_5_WITH_DFS_6_GHZ", "WIFI_BAND_24_5_6_60_GHZ", "WIFI_BAND_24_5_WITH_DFS_6_60_GHZ", "WIFI_BAND_ALL", "MIN_SCAN_PERIOD_MS", "MAX_SCAN_PERIOD_MS", "REASON_SUCCEEDED", "REASON_UNSPECIFIED", "REASON_INVALID_LISTENER", "REASON_INVALID_REQUEST", "REASON_NOT_AUTHORIZED", "REASON_DUPLICATE_REQEUST", "REASON_BUSY", "REASON_ABORT", "REASON_NO_DEVICE", "REASON_INVALID_ARGS", "REASON_TIMEOUT", "GET_AVAILABLE_CHANNELS_EXTRA", "WIFI_RNR_ENABLED_IF_WIFI_BAND_6_GHZ_SCANNED", "WIFI_RNR_ENABLED", "WIFI_RNR_NOT_NEEDED", "WIFI_SCANNER_SETTINGS_VENDOR_ELEMENTS_MAX_LEN", "WIFI_IE_HEAD_LEN", "REPORT_EVENT_AFTER_BUFFER_FULL", "REPORT_EVENT_AFTER_EACH_SCAN", "REPORT_EVENT_FULL_SCAN_RESULT", "REPORT_EVENT_NO_BATCH", "SCAN_TYPE_LOW_LATENCY", "SCAN_TYPE_LOW_POWER", "SCAN_TYPE_HIGH_ACCURACY", "SCAN_TYPE_MAX", "SCAN_PARAMS_SCAN_SETTINGS_KEY", "SCAN_PARAMS_WORK_SOURCE_KEY", "REQUEST_PACKAGE_NAME_KEY", "REQUEST_FEATURE_ID_KEY", "PNO_PARAMS_PNO_SETTINGS_KEY", "PNO_PARAMS_SCAN_SETTINGS_KEY", "TAG", "DBG", "BASE", "CMD_START_BACKGROUND_SCAN", "CMD_STOP_BACKGROUND_SCAN", "CMD_GET_SCAN_RESULTS", "CMD_SCAN_RESULT", "CMD_CACHED_SCAN_DATA", "CMD_OP_SUCCEEDED", "CMD_OP_FAILED", "CMD_FULL_SCAN_RESULT", "CMD_START_SINGLE_SCAN", "CMD_STOP_SINGLE_SCAN", "CMD_SINGLE_SCAN_COMPLETED", "CMD_START_PNO_SCAN", "CMD_STOP_PNO_SCAN", "CMD_PNO_NETWORK_FOUND", "CMD_REGISTER_SCAN_LISTENER", "CMD_DEREGISTER_SCAN_LISTENER", "CMD_GET_SINGLE_SCAN_RESULTS", "CMD_ENABLE", "CMD_DISABLE", "mContext", "mService", "mListenerMapLock", "mListenerMap" ]
}