{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/AnimationHandler.java",
  "packageName" : "android.animation",
  "className" : "AnimationHandler",
  "comment" : "\n * This custom, static handler handles the timing pulse that is shared by all active\n * ValueAnimators. This approach ensures that the setting of animation values will happen on the\n * same thread that animations start on, and that all animations will share the same times for\n * calculating their values, which makes synchronizing animations possible.\n *\n * The handler uses the Choreographer by default for doing periodic callbacks. A custom\n * AnimationFrameCallbackProvider can be set on the handler to provide timing pulse that\n * may be independent of UI frame update. This could be useful in testing.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mDelayedCallbackStartTime",
    "type" : "ArrayMap<AnimationFrameCallback, Long>",
    "comment" : "\n     * Internal per-thread collections used to avoid set collisions as animations start and end\n     * while being processed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimationCallbacks",
    "type" : "ArrayList<AnimationFrameCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommitCallbacks",
    "type" : "ArrayList<AnimationFrameCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "AnimationFrameCallbackProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameCallback",
    "type" : "Choreographer.FrameCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAnimatorHandler",
    "type" : "ThreadLocal<AnimationHandler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListDirty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AnimationHandler getInstance()",
    "returnType" : "AnimationHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProvider(AnimationFrameCallbackProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * By default, the Choreographer is used to provide timing for frame callbacks. A custom\n     * provider can be used here to provide different timing pulse.\n     ",
    "links" : [ ]
  }, {
    "name" : "private AnimationFrameCallbackProvider getProvider()",
    "returnType" : "AnimationFrameCallbackProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addAnimationFrameCallback(final AnimationFrameCallback callback, long delay)",
    "returnType" : "void",
    "comment" : "\n     * Register to get a callback on the next frame after the delay.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOneShotCommitCallback(final AnimationFrameCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register to get a one shot callback for frame commit timing. Frame commit timing is the\n     * time *after* traversals are done, as opposed to the animation frame timing, which is\n     * before any traversals. This timing can be used to adjust the start time of an animation\n     * when expensive traversals create big delta between the animation frame timing and the time\n     * that animation is first shown on screen.\n     *\n     * Note this should only be called when the animation has already registered to receive\n     * animation frame callbacks. This callback will be guaranteed to happen *after* the next\n     * animation frame callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeCallback(AnimationFrameCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes the given callback from the list, so it will no longer be called for frame related\n     * timing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doAnimationFrame(long frameTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void commitAnimationFrame(AnimationFrameCallback callback, long frameTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCallbackDue(AnimationFrameCallback callback, long currentTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove the callbacks from mDelayedCallbackStartTime once they have passed the initial delay\n     * so that they can start getting frame callbacks.\n     *\n     * @return true if they have passed the initial delay or have no delay, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAnimationCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of callbacks that have registered for frame callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setFrameDelay(long delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long getFrameDelay()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void autoCancelBasedOn(ObjectAnimator objectAnimator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanUpList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getCallbackSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDelayedCallbackStartTime", "mAnimationCallbacks", "mCommitCallbacks", "mProvider", "mFrameCallback", "sAnimatorHandler", "mListDirty" ],
  "methodNames" : [ "public static AnimationHandler getInstance()", "public void setProvider(AnimationFrameCallbackProvider provider)", "private AnimationFrameCallbackProvider getProvider()", "public void addAnimationFrameCallback(final AnimationFrameCallback callback, long delay)", "public void addOneShotCommitCallback(final AnimationFrameCallback callback)", "public void removeCallback(AnimationFrameCallback callback)", "private void doAnimationFrame(long frameTime)", "private void commitAnimationFrame(AnimationFrameCallback callback, long frameTime)", "private boolean isCallbackDue(AnimationFrameCallback callback, long currentTime)", "public static int getAnimationCount()", "public static void setFrameDelay(long delay)", "public static long getFrameDelay()", " void autoCancelBasedOn(ObjectAnimator objectAnimator)", "private void cleanUpList()", "private int getCallbackSize()" ]
}