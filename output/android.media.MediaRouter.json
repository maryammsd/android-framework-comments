{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaRouter.java",
  "packageName" : "android.media",
  "className" : "MediaRouter",
  "comment" : "\n * This API is not recommended for new applications. Use the\n * <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n * <a href=\"{@docRoot}reference/androidx/mediarouter/media/package-summary.html\">Media Router\n * Library</a> for consistent behavior across all devices.\n *\n * <p>MediaRouter allows applications to control the routing of media channels\n * and streams from the current device to external speakers and destination devices.\n *\n * <p>A MediaRouter is retrieved through {@link Context#getSystemService(String)\n * Context.getSystemService()} of a {@link Context#MEDIA_ROUTER_SERVICE\n * Context.MEDIA_ROUTER_SERVICE}.\n *\n * <p>This API is not thread-safe; all interactions with it must be done from the main thread of the\n * process.\n ",
  "links" : [ "android.content.Context#getSystemService(String)", "android.content.Context#MEDIA_ROUTER_SERVICEContext.MEDIA_ROUTER_SERVICE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_RESTORE_ROUTE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStatic",
    "type" : "Static",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROUTE_TYPE_LIVE_AUDIO",
    "type" : "int",
    "comment" : "\n     * Route type flag for live audio.\n     *\n     * <p>A device that supports live audio routing will allow the media audio stream\n     * to be routed to supported destinations. This can include internal speakers or\n     * audio jacks on the device itself, A2DP devices, and more.</p>\n     *\n     * <p>Once initiated this routing is transparent to the application. All audio\n     * played on the media stream will be routed to the selected destination.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_TYPE_LIVE_VIDEO",
    "type" : "int",
    "comment" : "\n     * Route type flag for live video.\n     *\n     * <p>A device that supports live video routing will allow a mirrored version\n     * of the device's primary display or a customized\n     * {@link android.app.Presentation Presentation} to be routed to supported destinations.</p>\n     *\n     * <p>Once initiated, display mirroring is transparent to the application.\n     * While remote routing is active the application may use a\n     * {@link android.app.Presentation Presentation} to replace the mirrored view\n     * on the external display with different content.</p>\n     *\n     * @see RouteInfo#getPresentationDisplay()\n     * @see android.app.Presentation\n     ",
    "links" : [ "android.app.Presentation" ]
  }, {
    "name" : "ROUTE_TYPE_REMOTE_DISPLAY",
    "type" : "int",
    "comment" : "\n     * Temporary interop constant to identify remote displays.\n     * @hide To be removed when media router API is updated.\n     ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_TYPE_USER",
    "type" : "int",
    "comment" : "\n     * Route type flag for application-specific usage.\n     *\n     * <p>Unlike other media route types, user routes are managed by the application.\n     * The MediaRouter will manage and dispatch events for user routes, but the application\n     * is expected to interpret the meaning of these events and perform the requested\n     * routing tasks.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_TYPE_ANY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_FLAG_PERFORM_ACTIVE_SCAN",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #addCallback}: Actively scan for routes while this callback\n     * is registered.\n     * <p>\n     * When this flag is specified, the media router will actively scan for new\n     * routes.  Certain routes, such as wifi display routes, may not be discoverable\n     * except when actively scanning.  This flag is typically used when the route picker\n     * dialog has been opened by the user to ensure that the route information is\n     * up to date.\n     * </p><p>\n     * Active scanning may consume a significant amount of power and may have intrusive\n     * effects on wireless connectivity.  Therefore it is important that active scanning\n     * only be requested when it is actually needed to satisfy a user request to\n     * discover and select a new route.\n     * </p>\n     ",
    "links" : [ "#addCallback" ]
  }, {
    "name" : "CALLBACK_FLAG_UNFILTERED_EVENTS",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #addCallback}: Do not filter route events.\n     * <p>\n     * When this flag is specified, the callback will be invoked for event that affect any\n     * route even if they do not match the callback's filter.\n     * </p>\n     ",
    "links" : [ "#addCallback" ]
  }, {
    "name" : "CALLBACK_FLAG_REQUEST_DISCOVERY",
    "type" : "int",
    "comment" : "\n     * Explicitly requests discovery.\n     *\n     * @hide Future API ported from support library.  Revisit this later.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_FLAG_PASSIVE_DISCOVERY",
    "type" : "int",
    "comment" : "\n     * Requests that discovery be performed but only if there is some other active\n     * callback already registered.\n     *\n     * @hide Compatibility workaround for the fact that applications do not currently\n     * request discovery explicitly (except when using the support library API).\n     ",
    "links" : [ ]
  }, {
    "name" : "AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #isRouteAvailable}: Ignore the default route.\n     * <p>\n     * This flag is used to determine whether a matching non-default route is available.\n     * This constraint may be used to decide whether to offer the route chooser dialog\n     * to the user.  There is no point offering the chooser if there are no\n     * non-default choices.\n     * </p>\n     *\n     * @hide Future API ported from support library.  Revisit this later.\n     ",
    "links" : [ "#isRouteAvailable" ]
  }, {
    "name" : "MIRRORING_GROUP_ID",
    "type" : "String",
    "comment" : "\n     * The route group id used for sharing the selected mirroring device.\n     * System UI and Settings use this to synchronize their mirroring status.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sRouters",
    "type" : "HashMap<Context, MediaRouter>",
    "comment" : " Maps application contexts",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static String typesToString(int types)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RouteInfo getDefaultRoute()",
    "returnType" : "RouteInfo",
    "comment" : "\n     * Gets the default route for playing media content on the system.\n     * <p>\n     * The system always provides a default route.\n     * </p>\n     *\n     * @return The default route, which is guaranteed to never be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RouteInfo getFallbackRoute()",
    "returnType" : "RouteInfo",
    "comment" : "\n     * Returns a Bluetooth route if available, otherwise the default route.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public RouteCategory getSystemCategory()",
    "returnType" : "RouteCategory",
    "comment" : "\n     * @hide for use by framework routing UI\n     ",
    "links" : [ ]
  }, {
    "name" : "public RouteInfo getSelectedRoute()",
    "returnType" : "RouteInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public RouteInfo getSelectedRoute(int type)",
    "returnType" : "RouteInfo",
    "comment" : "\n     * Return the currently selected route for any of the given types\n     *\n     * @param type route types\n     * @return the selected route\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRouteAvailable(int types, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is a route that matches the specified types.\n     * <p>\n     * This method returns true if there are any available routes that match the types\n     * regardless of whether they are enabled or disabled.  If the\n     * {@link #AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE} flag is specified, then\n     * the method will only consider non-default routes.\n     * </p>\n     *\n     * @param types The types to match.\n     * @param flags Flags to control the determination of whether a route may be available.\n     * May be zero or {@link #AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE}.\n     * @return True if a matching route may be available.\n     *\n     * @hide Future API ported from support library.  Revisit this later.\n     ",
    "links" : [ "#AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE" ]
  }, {
    "name" : "public void setRouterGroupId(@Nullable String groupId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the group ID of the router.\n     * Media routers with the same ID acts as if they were a single media router.\n     * For example, if a media router selects a route, the selected route of routers\n     * with the same group ID will be changed automatically.\n     *\n     * Two routers in a group are supposed to use the same route types.\n     *\n     * System UI and Settings use this to synchronize their mirroring status.\n     * Do not set the router group id unless it's necessary.\n     *\n     * {@link android.Manifest.permission#CONFIGURE_WIFI_DISPLAY} permission is required to\n     * call this method.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#CONFIGURE_WIFI_DISPLAY" ]
  }, {
    "name" : "public void addCallback(int types, Callback cb)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback to listen to events about specific kinds of media routes.\n     * If the specified callback is already registered, its registration will be updated for any\n     * additional route types specified.\n     * <p>\n     * This is a convenience method that has the same effect as calling\n     * {@link #addCallback(int, Callback, int)} without flags.\n     * </p>\n     *\n     * @param types Types of routes this callback is interested in\n     * @param cb Callback to add\n     ",
    "links" : [ "#addCallback(int" ]
  }, {
    "name" : "public void addCallback(int types, Callback cb, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback to listen to events about specific kinds of media routes.\n     * If the specified callback is already registered, its registration will be updated for any\n     * additional route types specified.\n     * <p>\n     * By default, the callback will only be invoked for events that affect routes\n     * that match the specified selector.  The filtering may be disabled by specifying\n     * the {@link #CALLBACK_FLAG_UNFILTERED_EVENTS} flag.\n     * </p>\n     *\n     * @param types Types of routes this callback is interested in\n     * @param cb Callback to add\n     * @param flags Flags to control the behavior of the callback.\n     * May be zero or a combination of {@link #CALLBACK_FLAG_PERFORM_ACTIVE_SCAN} and\n     * {@link #CALLBACK_FLAG_UNFILTERED_EVENTS}.\n     ",
    "links" : [ "#CALLBACK_FLAG_UNFILTERED_EVENTS", "#CALLBACK_FLAG_PERFORM_ACTIVE_SCAN" ]
  }, {
    "name" : "public void removeCallback(Callback cb)",
    "returnType" : "void",
    "comment" : "\n     * Remove the specified callback. It will no longer receive events about media routing.\n     *\n     * @param cb Callback to remove\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findCallbackInfo(Callback cb)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void selectRoute(int types, @NonNull RouteInfo route)",
    "returnType" : "void",
    "comment" : "\n     * Select the specified route to use for output of the given media types.\n     * <p class=\"note\">\n     * As API version 18, this function may be used to select any route.\n     * In prior versions, this function could only be used to select user\n     * routes and would ignore any attempt to select a system route.\n     * </p>\n     *\n     * @param types type flags indicating which types this route should be used for.\n     *              The route must support at least a subset.\n     * @param route Route to select\n     * @throws IllegalArgumentException if the given route is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void selectRouteInt(int types, RouteInfo route, boolean explicit)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use\n     ",
    "links" : [ ]
  }, {
    "name" : " static void selectRouteStatic(int types, @NonNull RouteInfo route, boolean explicit)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void selectDefaultRouteStatic()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean matchesDeviceAddress(WifiDisplay display, RouteInfo info)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare the device address of a display and a route.\n     * Nulls/no device address will match another null/no address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUserRoute(UserRouteInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Add an app-specified route for media to the MediaRouter.\n     * App-specified route definitions are created using {@link #createUserRoute(RouteCategory)}\n     *\n     * @param info Definition of the route to add\n     * @see #createUserRoute(RouteCategory)\n     * @see #removeUserRoute(UserRouteInfo)\n     ",
    "links" : [ "#createUserRoute(RouteCategory)" ]
  }, {
    "name" : "public void addRouteInt(RouteInfo info)",
    "returnType" : "void",
    "comment" : "\n     * @hide Framework use only\n     ",
    "links" : [ ]
  }, {
    "name" : " static void addRouteStatic(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeUserRoute(UserRouteInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Remove an app-specified route for media from the MediaRouter.\n     *\n     * @param info Definition of the route to remove\n     * @see #addUserRoute(UserRouteInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearUserRoutes()",
    "returnType" : "void",
    "comment" : "\n     * Remove all app-specified routes from the MediaRouter.\n     *\n     * @see #removeUserRoute(UserRouteInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeRouteInt(RouteInfo info)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : " static void removeRouteStatic(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCategoryCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of {@link MediaRouter.RouteCategory categories} currently\n     * represented by routes known to this MediaRouter.\n     *\n     * @return the number of unique categories represented by this MediaRouter's known routes\n     ",
    "links" : [ "MediaRouter.RouteCategory" ]
  }, {
    "name" : "public RouteCategory getCategoryAt(int index)",
    "returnType" : "RouteCategory",
    "comment" : "\n     * Return the {@link MediaRouter.RouteCategory category} at the given index.\n     * Valid indices are in the range [0-getCategoryCount).\n     *\n     * @param index which category to return\n     * @return the category at index\n     ",
    "links" : [ "MediaRouter.RouteCategory" ]
  }, {
    "name" : "public int getRouteCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of {@link MediaRouter.RouteInfo routes} currently known\n     * to this MediaRouter.\n     *\n     * @return the number of routes tracked by this router\n     ",
    "links" : [ "MediaRouter.RouteInfo" ]
  }, {
    "name" : "public RouteInfo getRouteAt(int index)",
    "returnType" : "RouteInfo",
    "comment" : "\n     * Return the route at the specified index.\n     *\n     * @param index index of the route to return\n     * @return the route at index\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getRouteCountStatic()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static RouteInfo getRouteAtStatic(int index)",
    "returnType" : "RouteInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UserRouteInfo createUserRoute(RouteCategory category)",
    "returnType" : "UserRouteInfo",
    "comment" : "\n     * Create a new user route that may be modified and registered for use by the application.\n     *\n     * @param category The category the new route will belong to\n     * @return A new UserRouteInfo for use by the application\n     *\n     * @see #addUserRoute(UserRouteInfo)\n     * @see #removeUserRoute(UserRouteInfo)\n     * @see #createRouteCategory(CharSequence, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public RouteCategory createRouteCategory(CharSequence name, boolean isGroupable)",
    "returnType" : "RouteCategory",
    "comment" : "\n     * Create a new route category. Each route must belong to a category.\n     *\n     * @param name Name of the new category\n     * @param isGroupable true if routes in this category may be grouped with one another\n     * @return the new RouteCategory\n     ",
    "links" : [ ]
  }, {
    "name" : "public RouteCategory createRouteCategory(int nameResId, boolean isGroupable)",
    "returnType" : "RouteCategory",
    "comment" : "\n     * Create a new route category. Each route must belong to a category.\n     *\n     * @param nameResId Resource ID of the name of the new category\n     * @param isGroupable true if routes in this category may be grouped with one another\n     * @return the new RouteCategory\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rebindAsUser(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Rebinds the media router to handle routes that belong to the specified user.\n     * Requires the interact across users permission to access the routes of another user.\n     * <p>\n     * This method is a complete hack to work around the singleton nature of the\n     * media router when running inside of singleton processes like QuickSettings.\n     * This mechanism should be burned to the ground when MediaRouter is redesigned.\n     * Ideally the current user would be pulled from the Context but we need to break\n     * down MediaRouter.Static before we can get there.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static void updateRoute(final RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteSelected(int type, RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteUnselected(int type, RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteChanged(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteChanged(RouteInfo info, int oldSupportedTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteAdded(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteRemoved(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteGrouped(RouteInfo info, RouteGroup group, int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteUngrouped(RouteInfo info, RouteGroup group)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRouteVolumeChanged(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void dispatchRoutePresentationDisplayChanged(RouteInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void systemVolumeChanged(int newValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void updateWifiDisplayStatus(WifiDisplayStatus status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean shouldShowWifiDisplay(WifiDisplay d, WifiDisplay activeDisplay)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getWifiDisplayStatusCode(WifiDisplay d, WifiDisplayStatus wfdStatus)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isWifiDisplayEnabled(WifiDisplay d, WifiDisplayStatus wfdStatus)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static RouteInfo makeWifiDisplayRoute(WifiDisplay display, WifiDisplayStatus wfdStatus)",
    "returnType" : "RouteInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void updateWifiDisplayRoute(RouteInfo route, WifiDisplay display, WifiDisplayStatus wfdStatus, boolean disconnected)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static WifiDisplay findWifiDisplay(WifiDisplay[] displays, String deviceAddress)",
    "returnType" : "WifiDisplay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static RouteInfo findWifiDisplayRoute(WifiDisplay d)",
    "returnType" : "RouteInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static String typesToString(int types)", "public RouteInfo getDefaultRoute()", "public RouteInfo getFallbackRoute()", "public RouteCategory getSystemCategory()", "public RouteInfo getSelectedRoute()", "public RouteInfo getSelectedRoute(int type)", "public boolean isRouteAvailable(int types, int flags)", "public void setRouterGroupId(@Nullable String groupId)", "public void addCallback(int types, Callback cb)", "public void addCallback(int types, Callback cb, int flags)", "public void removeCallback(Callback cb)", "private int findCallbackInfo(Callback cb)", "public void selectRoute(int types, @NonNull RouteInfo route)", "public void selectRouteInt(int types, RouteInfo route, boolean explicit)", " static void selectRouteStatic(int types, @NonNull RouteInfo route, boolean explicit)", " static void selectDefaultRouteStatic()", " static boolean matchesDeviceAddress(WifiDisplay display, RouteInfo info)", "public void addUserRoute(UserRouteInfo info)", "public void addRouteInt(RouteInfo info)", " static void addRouteStatic(RouteInfo info)", "public void removeUserRoute(UserRouteInfo info)", "public void clearUserRoutes()", "public void removeRouteInt(RouteInfo info)", " static void removeRouteStatic(RouteInfo info)", "public int getCategoryCount()", "public RouteCategory getCategoryAt(int index)", "public int getRouteCount()", "public RouteInfo getRouteAt(int index)", " static int getRouteCountStatic()", " static RouteInfo getRouteAtStatic(int index)", "public UserRouteInfo createUserRoute(RouteCategory category)", "public RouteCategory createRouteCategory(CharSequence name, boolean isGroupable)", "public RouteCategory createRouteCategory(int nameResId, boolean isGroupable)", "public void rebindAsUser(int userId)", " static void updateRoute(final RouteInfo info)", " static void dispatchRouteSelected(int type, RouteInfo info)", " static void dispatchRouteUnselected(int type, RouteInfo info)", " static void dispatchRouteChanged(RouteInfo info)", " static void dispatchRouteChanged(RouteInfo info, int oldSupportedTypes)", " static void dispatchRouteAdded(RouteInfo info)", " static void dispatchRouteRemoved(RouteInfo info)", " static void dispatchRouteGrouped(RouteInfo info, RouteGroup group, int index)", " static void dispatchRouteUngrouped(RouteInfo info, RouteGroup group)", " static void dispatchRouteVolumeChanged(RouteInfo info)", " static void dispatchRoutePresentationDisplayChanged(RouteInfo info)", " static void systemVolumeChanged(int newValue)", " static void updateWifiDisplayStatus(WifiDisplayStatus status)", "private static boolean shouldShowWifiDisplay(WifiDisplay d, WifiDisplay activeDisplay)", " static int getWifiDisplayStatusCode(WifiDisplay d, WifiDisplayStatus wfdStatus)", " static boolean isWifiDisplayEnabled(WifiDisplay d, WifiDisplayStatus wfdStatus)", " static RouteInfo makeWifiDisplayRoute(WifiDisplay display, WifiDisplayStatus wfdStatus)", "private static void updateWifiDisplayRoute(RouteInfo route, WifiDisplay display, WifiDisplayStatus wfdStatus, boolean disconnected)", "private static WifiDisplay findWifiDisplay(WifiDisplay[] displays, String deviceAddress)", "private static RouteInfo findWifiDisplayRoute(WifiDisplay d)" ],
  "variableNames" : [ "TAG", "DEBUG", "DEBUG_RESTORE_ROUTE", "sStatic", "ROUTE_TYPE_LIVE_AUDIO", "ROUTE_TYPE_LIVE_VIDEO", "ROUTE_TYPE_REMOTE_DISPLAY", "ROUTE_TYPE_USER", "ROUTE_TYPE_ANY", "CALLBACK_FLAG_PERFORM_ACTIVE_SCAN", "CALLBACK_FLAG_UNFILTERED_EVENTS", "CALLBACK_FLAG_REQUEST_DISCOVERY", "CALLBACK_FLAG_PASSIVE_DISCOVERY", "AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE", "MIRRORING_GROUP_ID", "sRouters" ]
}