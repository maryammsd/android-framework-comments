{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/HotwordAudioStream.java",
  "packageName" : "android.service.voice",
  "className" : "HotwordAudioStream",
  "comment" : "\n * Represents an audio stream supporting the hotword detection.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES",
    "type" : "String",
    "comment" : "\n     * Key for int value to be read from {@link #getMetadata()}. The value is read by the system and\n     * is the length (in bytes) of the byte buffers created to copy bytes in the\n     * {@link #getAudioStreamParcelFileDescriptor()} written by the {@link HotwordDetectionService}.\n     * The buffer length should be chosen such that no additional latency is introduced. Typically,\n     * this should be <em>at least</em> the size of byte chunks written by the\n     * {@link HotwordDetectionService}.\n     *\n     * <p>If no value specified in the metadata for the buffer length, or if the value is less than\n     * 1, or if it is greater than 65,536, or if it is not an int, the default value of 2,560 will\n     * be used.</p>\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#getMetadata()", "#getAudioStreamParcelFileDescriptor()" ]
  }, {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "\n     * The {@link AudioFormat} of the audio stream.\n     ",
    "links" : [ "android.media.AudioFormat" ]
  }, {
    "name" : "mAudioStreamParcelFileDescriptor",
    "type" : "ParcelFileDescriptor",
    "comment" : "\n     * This stream typically starts with the audio bytes used for hotword detection, but continues\n     * streaming the audio (e.g., with the query) until the stream is shutdown by the\n     * {@link HotwordDetectionService}. The data format is expected to match\n     * {@link #getAudioFormat()}.\n     *\n     * <p>\n     * Alternatively, the {@link HotwordDetectionService} may use {@link #getInitialAudio()}\n     * to pass the start of the audio instead of streaming it here. This may prevent added latency\n     * caused by the streaming buffer (see {@link #KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES}) not\n     * being large enough to handle this initial chunk of audio.\n     * </p>\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#getInitialAudio()", "#KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES", "#getAudioFormat()" ]
  }, {
    "name" : "mTimestamp",
    "type" : "AudioTimestamp",
    "comment" : "\n     * The timestamp when the audio stream was captured by the Audio platform.\n     *\n     * <p>\n     * The {@link HotwordDetectionService} egressing the audio is the owner of the underlying\n     * AudioRecord. The {@link HotwordDetectionService} is expected to optionally populate this\n     * field by {@link AudioRecord#getTimestamp}.\n     * </p>\n     *\n     * <p>\n     * This timestamp can be used in conjunction with the\n     * {@link HotwordDetectedResult#getHotwordOffsetMillis()} and\n     * {@link HotwordDetectedResult#getHotwordDurationMillis()} to translate these durations to\n     * timestamps.\n     * </p>\n     *\n     * @see #getAudioStreamParcelFileDescriptor()\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetectedResult#getHotwordDurationMillis()", "android.service.voice.HotwordDetectedResult#getHotwordOffsetMillis()", "android.media.AudioRecord#getTimestamp" ]
  }, {
    "name" : "mMetadata",
    "type" : "PersistableBundle",
    "comment" : "\n     * The metadata associated with the audio stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInitialAudio",
    "type" : "byte[]",
    "comment" : "\n     * The start of the audio used for hotword detection. The data format is expected to match\n     * {@link #getAudioFormat()}.\n     *\n     * <p>\n     * The {@link HotwordDetectionService} may use this instead of using\n     * {@link #getAudioStreamParcelFileDescriptor()} to stream these initial bytes of audio. This\n     * may prevent added latency caused by the streaming buffer (see\n     * {@link #KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES}) not being large enough to handle this\n     * initial chunk of audio.\n     * </p>\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES", "#getAudioFormat()", "#getAudioStreamParcelFileDescriptor()" ]
  }, {
    "name" : "DEFAULT_INITIAL_EMPTY_AUDIO",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<HotwordAudioStream>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static AudioTimestamp defaultTimestamp()",
    "returnType" : "AudioTimestamp",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PersistableBundle defaultMetadata()",
    "returnType" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] defaultInitialAudio()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String initialAudioToString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder buildUpon()",
    "returnType" : "Builder",
    "comment" : "\n     * Provides an instance of {@link Builder} with state corresponding to this instance.\n     * @hide\n     ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public AudioFormat getAudioFormat()",
    "returnType" : "AudioFormat",
    "comment" : "\n     * The {@link AudioFormat} of the audio stream.\n     ",
    "links" : [ "android.media.AudioFormat" ]
  }, {
    "name" : "public ParcelFileDescriptor getAudioStreamParcelFileDescriptor()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * This stream typically starts with the audio bytes used for hotword detection, but continues\n     * streaming the audio (e.g., with the query) until the stream is shutdown by the\n     * {@link HotwordDetectionService}. The data format is expected to match\n     * {@link #getAudioFormat()}.\n     *\n     * <p>\n     * Alternatively, the {@link HotwordDetectionService} may use {@link #getInitialAudio()}\n     * to pass the start of the audio instead of streaming it here. This may prevent added latency\n     * caused by the streaming buffer (see {@link #KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES}) not\n     * being large enough to handle this initial chunk of audio.\n     * </p>\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#getInitialAudio()", "#KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES", "#getAudioFormat()" ]
  }, {
    "name" : "public AudioTimestamp getTimestamp()",
    "returnType" : "AudioTimestamp",
    "comment" : "\n     * The timestamp when the audio stream was captured by the Audio platform.\n     *\n     * <p>\n     * The {@link HotwordDetectionService} egressing the audio is the owner of the underlying\n     * AudioRecord. The {@link HotwordDetectionService} is expected to optionally populate this\n     * field by {@link AudioRecord#getTimestamp}.\n     * </p>\n     *\n     * <p>\n     * This timestamp can be used in conjunction with the\n     * {@link HotwordDetectedResult#getHotwordOffsetMillis()} and\n     * {@link HotwordDetectedResult#getHotwordDurationMillis()} to translate these durations to\n     * timestamps.\n     * </p>\n     *\n     * @see #getAudioStreamParcelFileDescriptor()\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetectedResult#getHotwordDurationMillis()", "android.service.voice.HotwordDetectedResult#getHotwordOffsetMillis()", "android.media.AudioRecord#getTimestamp" ]
  }, {
    "name" : "public PersistableBundle getMetadata()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * The metadata associated with the audio stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getInitialAudio()",
    "returnType" : "byte[]",
    "comment" : "\n     * The start of the audio used for hotword detection. The data format is expected to match\n     * {@link #getAudioFormat()}.\n     *\n     * <p>\n     * The {@link HotwordDetectionService} may use this instead of using\n     * {@link #getAudioStreamParcelFileDescriptor()} to stream these initial bytes of audio. This\n     * may prevent added latency caused by the streaming buffer (see\n     * {@link #KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES}) not being large enough to handle this\n     * initial chunk of audio.\n     * </p>\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES", "#getAudioFormat()", "#getAudioStreamParcelFileDescriptor()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static AudioTimestamp defaultTimestamp()", "private static PersistableBundle defaultMetadata()", "private static byte[] defaultInitialAudio()", "private String initialAudioToString()", "public Builder buildUpon()", "public AudioFormat getAudioFormat()", "public ParcelFileDescriptor getAudioStreamParcelFileDescriptor()", "public AudioTimestamp getTimestamp()", "public PersistableBundle getMetadata()", "public byte[] getInitialAudio()", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES", "mAudioFormat", "mAudioStreamParcelFileDescriptor", "mTimestamp", "mMetadata", "mInitialAudio", "DEFAULT_INITIAL_EMPTY_AUDIO", "CREATOR" ]
}