{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/ListIterator.java",
  "packageName" : "java.util",
  "className" : "ListIterator",
  "comment" : "\n * An iterator for lists that allows the programmer\n * to traverse the list in either direction, modify\n * the list during iteration, and obtain the iterator's\n * current position in the list. A {@code ListIterator}\n * has no current element; its <I>cursor position</I> always\n * lies between the element that would be returned by a call\n * to {@code previous()} and the element that would be\n * returned by a call to {@code next()}.\n * An iterator for a list of length {@code n} has {@code n+1} possible\n * cursor positions, as illustrated by the carets ({@code ^}) below:\n * <PRE>\n *                      Element(0)   Element(1)   Element(2)   ... Element(n-1)\n * cursor positions:  ^            ^            ^            ^                  ^\n * </PRE>\n * Note that the {@link #remove} and {@link #set(Object)} methods are\n * <i>not</i> defined in terms of the cursor position;  they are defined to\n * operate on the last element returned by a call to {@link #next} or\n * {@link #previous()}.\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @author  Josh Bloch\n * @see Collection\n * @see List\n * @see Iterator\n * @see Enumeration\n * @see List#listIterator()\n * @since   1.2\n ",
  "links" : [ "#remove", "#next", "#set(Object)", "#previous()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list iterator has more elements when\n     * traversing the list in the forward direction. (In other words,\n     * returns {@code true} if {@link #next} would return an element rather\n     * than throwing an exception.)\n     *\n     * @return {@code true} if the list iterator has more elements when\n     *         traversing the list in the forward direction\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : " E next()",
    "returnType" : "E",
    "comment" : "\n     * Returns the next element in the list and advances the cursor position.\n     * This method may be called repeatedly to iterate through the list,\n     * or intermixed with calls to {@link #previous} to go back and forth.\n     * (Note that alternating calls to {@code next} and {@code previous}\n     * will return the same element repeatedly.)\n     *\n     * @return the next element in the list\n     * @throws NoSuchElementException if the iteration has no next element\n     ",
    "links" : [ "#previous" ]
  }, {
    "name" : " boolean hasPrevious()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list iterator has more elements when\n     * traversing the list in the reverse direction.  (In other words,\n     * returns {@code true} if {@link #previous} would return an element\n     * rather than throwing an exception.)\n     *\n     * @return {@code true} if the list iterator has more elements when\n     *         traversing the list in the reverse direction\n     ",
    "links" : [ "#previous" ]
  }, {
    "name" : " E previous()",
    "returnType" : "E",
    "comment" : "\n     * Returns the previous element in the list and moves the cursor\n     * position backwards.  This method may be called repeatedly to\n     * iterate through the list backwards, or intermixed with calls to\n     * {@link #next} to go back and forth.  (Note that alternating calls\n     * to {@code next} and {@code previous} will return the same\n     * element repeatedly.)\n     *\n     * @return the previous element in the list\n     * @throws NoSuchElementException if the iteration has no previous\n     *         element\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : " int nextIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the element that would be returned by a\n     * subsequent call to {@link #next}. (Returns list size if the list\n     * iterator is at the end of the list.)\n     *\n     * @return the index of the element that would be returned by a\n     *         subsequent call to {@code next}, or list size if the list\n     *         iterator is at the end of the list\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : " int previousIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the element that would be returned by a\n     * subsequent call to {@link #previous}. (Returns -1 if the list\n     * iterator is at the beginning of the list.)\n     *\n     * @return the index of the element that would be returned by a\n     *         subsequent call to {@code previous}, or -1 if the list\n     *         iterator is at the beginning of the list\n     ",
    "links" : [ "#previous" ]
  }, {
    "name" : " void remove()",
    "returnType" : "void",
    "comment" : "\n     * Removes from the list the last element that was returned by {@link\n     * #next} or {@link #previous} (optional operation).  This call can\n     * only be made once per call to {@code next} or {@code previous}.\n     * It can be made only if {@link #add} has not been\n     * called after the last call to {@code next} or {@code previous}.\n     *\n     * @throws UnsupportedOperationException if the {@code remove}\n     *         operation is not supported by this list iterator\n     * @throws IllegalStateException if neither {@code next} nor\n     *         {@code previous} have been called, or {@code remove} or\n     *         {@code add} have been called after the last call to\n     *         {@code next} or {@code previous}\n     ",
    "links" : [ "#previous", "#next", "#add" ]
  }, {
    "name" : " void set(E e)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the last element returned by {@link #next} or\n     * {@link #previous} with the specified element (optional operation).\n     * This call can be made only if neither {@link #remove} nor {@link\n     * #add} have been called after the last call to {@code next} or\n     * {@code previous}.\n     *\n     * @param e the element with which to replace the last element returned by\n     *          {@code next} or {@code previous}\n     * @throws UnsupportedOperationException if the {@code set} operation\n     *         is not supported by this list iterator\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws IllegalArgumentException if some aspect of the specified\n     *         element prevents it from being added to this list\n     * @throws IllegalStateException if neither {@code next} nor\n     *         {@code previous} have been called, or {@code remove} or\n     *         {@code add} have been called after the last call to\n     *         {@code next} or {@code previous}\n     ",
    "links" : [ "#remove", "#previous", "#next", "#add" ]
  }, {
    "name" : " void add(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element into the list (optional operation).\n     * The element is inserted immediately before the element that\n     * would be returned by {@link #next}, if any, and after the element\n     * that would be returned by {@link #previous}, if any.  (If the\n     * list contains no elements, the new element becomes the sole element\n     * on the list.)  The new element is inserted before the implicit\n     * cursor: a subsequent call to {@code next} would be unaffected, and a\n     * subsequent call to {@code previous} would return the new element.\n     * (This call increases by one the value that would be returned by a\n     * call to {@code nextIndex} or {@code previousIndex}.)\n     *\n     * @param e the element to insert\n     * @throws UnsupportedOperationException if the {@code add} method is\n     *         not supported by this list iterator\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws IllegalArgumentException if some aspect of this element\n     *         prevents it from being added to this list\n     ",
    "links" : [ "#previous", "#next" ]
  } ],
  "methodNames" : [ " boolean hasNext()", " E next()", " boolean hasPrevious()", " E previous()", " int nextIndex()", " int previousIndex()", " void remove()", " void set(E e)", " void add(E e)" ],
  "variableNames" : [ ]
}