{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/inputmethodservice/ExtractEditText.java",
  "packageName" : "android.inputmethodservice",
  "className" : "ExtractEditText",
  "comment" : "*\n * Specialization of {@link EditText} for showing and interacting with the\n * extracted text in a full-screen input method.\n ",
  "variables" : [ {
    "name" : "mIME",
    "type" : "InputMethodService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSettingExtractedText",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setIME(InputMethodService ime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startInternalChanges()",
    "returnType" : "void",
    "comment" : "\n     * Start making changes that will not be reported to the client.  That\n     * is, {@link #onSelectionChanged(int, int)} will not result in sending\n     * the new selection to the client\n     ",
    "links" : [ "#onSelectionChanged(int" ]
  }, {
    "name" : "public void finishInternalChanges()",
    "returnType" : "void",
    "comment" : "\n     * Finish making changes that will not be reported to the client.  That\n     * is, {@link #onSelectionChanged(int, int)} will not result in sending\n     * the new selection to the client\n     ",
    "links" : [ "#onSelectionChanged(int" ]
  }, {
    "name" : "public void setExtractedText(ExtractedText text)",
    "returnType" : "void",
    "comment" : "\n     * Implement just to keep track of when we are setting text from the\n     * client (vs. seeing changes in ourself from the user).\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onSelectionChanged(int selStart, int selEnd)",
    "returnType" : "void",
    "comment" : "\n     * Report to the underlying text editor about selection changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performClick()",
    "returnType" : "boolean",
    "comment" : "\n     * Redirect clicks to the IME for handling there.  First allows any\n     * on click handler to run, though.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTextContextMenuItem(int id)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInputMethodTarget()",
    "returnType" : "boolean",
    "comment" : "\n     * We are always considered to be an input method target.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasVerticalScrollBar()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the edit text is currently showing a scroll bar.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasWindowFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Pretend like the window this view is in always has focus, so its\n     * highlight and cursor will be displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Pretend like this view always has focus, so its\n     * highlight and cursor will be displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Pretend like this view always has focus, so its\n     * highlight and cursor will be displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void viewClicked(InputMethodManager imm)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInExtractedMode()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void deleteText_internal(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void replaceText_internal(int start, int end, CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setSpan_internal(Object span, int start, int end, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setCursorPosition_internal(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mIME", "mSettingExtractedText" ],
  "methodNames" : [ " void setIME(InputMethodService ime)", "public void startInternalChanges()", "public void finishInternalChanges()", "public void setExtractedText(ExtractedText text)", "protected void onSelectionChanged(int selStart, int selEnd)", "public boolean performClick()", "public boolean onTextContextMenuItem(int id)", "public boolean isInputMethodTarget()", "public boolean hasVerticalScrollBar()", "public boolean hasWindowFocus()", "public boolean isFocused()", "public boolean hasFocus()", "protected void viewClicked(InputMethodManager imm)", "public boolean isInExtractedMode()", "protected void deleteText_internal(int start, int end)", "protected void replaceText_internal(int start, int end, CharSequence text)", "protected void setSpan_internal(Object span, int start, int end, int flags)", "protected void setCursorPosition_internal(int start, int end)" ]
}