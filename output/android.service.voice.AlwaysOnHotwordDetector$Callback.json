{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/AlwaysOnHotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "Callback",
  "comment" : "\n     * Callbacks for always-on hotword detection.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onAvailabilityChanged(int status)",
    "returnType" : "void",
    "comment" : "\n         * Updates the availability state of the active keyphrase and locale on every keyphrase\n         * sound model change.\n         *\n         * <p>This API is called whenever there's a possibility that the keyphrase associated\n         * with this detector has been updated. It is not guaranteed that there is in fact any\n         * change, as it may be called for other reasons.</p>\n         *\n         * <p>This API is also guaranteed to be called right after an AlwaysOnHotwordDetector\n         * instance is created to updated the current availability state.</p>\n         *\n         * <p>Availability implies the current enrollment state of the given keyphrase. If the\n         * hardware on this system is not capable of listening for the given keyphrase,\n         * {@link AlwaysOnHotwordDetector#STATE_HARDWARE_UNAVAILABLE} will be returned.\n         *\n         * @see AlwaysOnHotwordDetector#STATE_HARDWARE_UNAVAILABLE\n         * @see AlwaysOnHotwordDetector#STATE_KEYPHRASE_UNENROLLED\n         * @see AlwaysOnHotwordDetector#STATE_KEYPHRASE_ENROLLED\n         * @see AlwaysOnHotwordDetector#STATE_ERROR\n         ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector#STATE_HARDWARE_UNAVAILABLE" ]
  }, {
    "name" : "public abstract void onDetected(@NonNull EventPayload eventPayload)",
    "returnType" : "void",
    "comment" : "\n         * Called when the keyphrase is spoken.\n         *\n         * <p>If {@code eventPayload.isRecognitionStopped()} returns true, this implicitly stops\n         * listening for the keyphrase once it's detected. Clients should start a recognition again\n         * once they are done handling this detection.\n         *\n         * @param eventPayload Payload data for the detection event. This may contain the trigger\n         *     audio, if requested when calling {@link\n         *     AlwaysOnHotwordDetector#startRecognition(int)} or if the audio comes from the {@link\n         *     android.service.wearable.WearableSensingService}.\n         ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector#startRecognition(int)", "android.service.wearable.WearableSensingService" ]
  }, {
    "name" : "public abstract void onError()",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @deprecated On {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and above,\n         * implement {@link HotwordDetector.Callback#onFailure(HotwordDetectionServiceFailure)},\n         * {@link AlwaysOnHotwordDetector.Callback#onFailure(SoundTriggerFailure)},\n         * {@link HotwordDetector.Callback#onUnknownFailure(String)} instead.\n         ",
    "links" : [ "HotwordDetector.Callback#onFailure(HotwordDetectionServiceFailure)", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "HotwordDetector.Callback#onUnknownFailure(String)", "AlwaysOnHotwordDetector.Callback#onFailure(SoundTriggerFailure)" ]
  }, {
    "name" : "public void onFailure(@NonNull SoundTriggerFailure soundTriggerFailure)",
    "returnType" : "void",
    "comment" : "\n         * Called when the detection fails due to an error occurs in the\n         * {@link com.android.server.soundtrigger.SoundTriggerService} and\n         * {@link com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService},\n         * {@link SoundTriggerFailure} will be reported to the detector.\n         *\n         * @param soundTriggerFailure It provides the error code, error message and suggested\n         *                            action.\n         ",
    "links" : [ "android.service.voice.SoundTriggerFailure", "com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService", "com.android.server.soundtrigger.SoundTriggerService" ]
  }, {
    "name" : "public abstract void onRecognitionPaused()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRecognitionResumed()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onRejected(@NonNull HotwordRejectedResult result)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onHotwordDetectionServiceInitialized(int status)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onHotwordDetectionServiceRestarted()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onAvailabilityChanged(int status)", "public abstract void onDetected(@NonNull EventPayload eventPayload)", "public abstract void onError()", "public void onFailure(@NonNull SoundTriggerFailure soundTriggerFailure)", "public abstract void onRecognitionPaused()", "public abstract void onRecognitionResumed()", "public void onRejected(@NonNull HotwordRejectedResult result)", "public void onHotwordDetectionServiceInitialized(int status)", "public void onHotwordDetectionServiceRestarted()" ],
  "variableNames" : [ ]
}