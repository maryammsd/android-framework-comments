{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/RadialTimePickerView.java",
  "packageName" : "android.widget",
  "className" : "RadialTimePickerView",
  "comment" : "\n * View to show a clock circle picker (with one or two picking circles)\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS_INNER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_CIRCLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_DOT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_LINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS_IN_CIRCLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTES_IN_CIRCLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEGREES_FOR_ONE_HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEGREES_FOR_ONE_MINUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS_NUMBERS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS_NUMBERS_24",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTES_NUMBERS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIM_DURATION_NORMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIM_DURATION_TOUCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SNAP_PREFER_30S_MAP",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_POSITIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COS_30",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIN_30",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MISSING_COLOR",
    "type" : "int",
    "comment" : " \"Something is wrong\" color used when a color attribute is missing. ",
    "links" : [ ]
  }, {
    "name" : "HOURS_TO_MINUTES",
    "type" : "FloatProperty<RadialTimePickerView>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHours12Texts",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuterHours24Texts",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInnerHours24Texts",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinutesTexts",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaintCenter",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaintSelector",
    "type" : "Paint[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaintBackground",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeface",
    "type" : "Typeface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextColor",
    "type" : "ColorStateList[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSize",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextInset",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuterTextX",
    "type" : "float[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuterTextY",
    "type" : "float[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInnerTextX",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInnerTextY",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionDegrees",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchHelper",
    "type" : "RadialPickerTouchHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectorPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIs24HourMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowHours",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHoursToMinutesAnimator",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHoursToMinutes",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsOnInnerCircle",
    "type" : "boolean",
    "comment" : "\n     * When in 24-hour mode, indicates that the current hour is between\n     * 1 and 12 (inclusive).\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectorRadius",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectorStroke",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectorDotRadius",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCenterDotRadius",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectorColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectorDotColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mXCenter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYCenter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCircleRadius",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinDistForInnerNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxDistForOuterNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHalfwayDist",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuterTextHours",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInnerTextHours",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinutesText",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmOrPm",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnValueSelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangedDuringTouch",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void preparePrefer30sMap()",
    "returnType" : "void",
    "comment" : "\n     * Split up the 360 degrees of the circle among the 60 selectable values. Assigns a larger\n     * selectable area to each of the 12 visible values, such that the ratio of space apportioned\n     * to a visible value : space apportioned to a non-visible value will be 14 : 4.\n     * E.g. the output of 30 degrees should have a higher range of input associated with it than\n     * the output of 24 degrees, because 30 degrees corresponds to a visible number on the clock\n     * circle (5 on the minutes, 1 or 13 on the hours).\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int snapPrefer30s(int degrees)",
    "returnType" : "int",
    "comment" : "\n     * Returns mapping of any input degrees (0 to 360) to one of 60 selectable output degrees,\n     * where the degrees corresponding to visible numbers (i.e. those divisible by 30) will be\n     * weighted heavier than the degrees corresponding to non-visible numbers.\n     * See {@link #preparePrefer30sMap()} documentation for the rationale and generation of the\n     * mapping.\n     ",
    "links" : [ "#preparePrefer30sMap" ]
  }, {
    "name" : "private static int snapOnly30s(int degrees, int forceHigherOrLower)",
    "returnType" : "int",
    "comment" : "\n     * Returns mapping of any input degrees (0 to 360) to one of 12 visible output degrees (all\n     * multiples of 30), where the input will be \"snapped\" to the closest visible degrees.\n     * @param degrees The input degrees\n     * @param forceHigherOrLower The output may be forced to either the higher or lower step, or may\n     * be allowed to snap to whichever is closer. Use 1 to force strictly higher, -1 to force\n     * strictly lower, and 0 to snap to the closer one.\n     * @return output degrees, will be a multiple of 30\n     ",
    "links" : [ ]
  }, {
    "name" : " void applyAttributes(AttributeSet attrs, int defStyleAttr, int defStyleRes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initialize(int hour, int minute, boolean is24HourMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentItemShowing(int item, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentItemShowing()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnValueSelectedListener(OnValueSelectedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentHour(int hour)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current hour in 24-hour time.\n     *\n     * @param hour the current hour between 0 and 23 (inclusive)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentHourInternal(int hour, boolean callback, boolean autoAdvance)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current hour.\n     *\n     * @param hour The current hour\n     * @param callback Whether the value listener should be invoked\n     * @param autoAdvance Whether the listener should auto-advance to the next\n     *                    selection mode, e.g. hour to minutes\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentHour()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current hour in 24-hour time.\n     *\n     * @return the current hour between 0 and 23 (inclusive)\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getHourForDegrees(int degrees, boolean innerCircle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDegreesForHour(int hour)",
    "returnType" : "int",
    "comment" : "\n     * @param hour the hour in 24-hour time or 12-hour time\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean getInnerCircleForHour(int hour)",
    "returnType" : "boolean",
    "comment" : "\n     * @param hour the hour in 24-hour time or 12-hour time\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentMinute(int minute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentMinuteInternal(int minute, boolean callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentMinute()",
    "returnType" : "int",
    "comment" : " Returns minutes in 0-59 range",
    "links" : [ ]
  }, {
    "name" : "private int getMinuteForDegrees(int degrees)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDegreesForMinute(int minute)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setAmOrPm(int amOrPm)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets whether the picker is showing AM or PM hours. Has no effect when\n     * in 24-hour mode.\n     *\n     * @param amOrPm {@link #AM} or {@link #PM}\n     * @return {@code true} if the value changed from what was previously set,\n     *         or {@code false} otherwise\n     ",
    "links" : [ "#AM", "#PM" ]
  }, {
    "name" : "public int getAmOrPm()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void showHours(boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void showMinutes(boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initHoursAndMinutesText()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initData()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showPicker(boolean hours, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void animatePicker(boolean hoursToMinutes, long duration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawCircleBackground(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawHours(Canvas canvas, Path selectorPath, float alphaMod)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawHoursClipped(Canvas canvas, int hoursAlpha, boolean showActivated)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawMinutes(Canvas canvas, Path selectorPath, float alphaMod)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawMinutesClipped(Canvas canvas, int minutesAlpha, boolean showActivated)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawCenter(Canvas canvas, float alphaMod)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMultipliedAlpha(int argb, int alpha)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawSelector(Canvas canvas, Path selectorPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void calculatePositionsHours()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void calculatePositionsMinutes()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void calculatePositions(Paint paint, float radius, float xCenter, float yCenter, float textSize, float[] x, float[] y)",
    "returnType" : "void",
    "comment" : "\n     * Using the trigonometric Unit Circle, calculate the positions that the text will need to be\n     * drawn at based on the specified circle radius. Place the values in the textGridHeights and\n     * textGridWidths parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void drawTextElements(Canvas canvas, float textSize, Typeface typeface, ColorStateList textColor, String[] texts, float[] textX, float[] textY, Paint paint, int alpha, boolean showActivated, int activatedDegrees, boolean activatedOnly)",
    "returnType" : "void",
    "comment" : "\n     * Draw the 12 text values at the positions specified by the textGrid parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getDegreesFromXY(float x, float y, boolean constrainOutside)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getInnerCircleFromXY(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleTouchInput(float x, float y, boolean forceSelection, boolean autoAdvance)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputEnabled(boolean inputEnabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "HOURS", "MINUTES", "HOURS_INNER", "SELECTOR_CIRCLE", "SELECTOR_DOT", "SELECTOR_LINE", "AM", "PM", "HOURS_IN_CIRCLE", "MINUTES_IN_CIRCLE", "DEGREES_FOR_ONE_HOUR", "DEGREES_FOR_ONE_MINUTE", "HOURS_NUMBERS", "HOURS_NUMBERS_24", "MINUTES_NUMBERS", "ANIM_DURATION_NORMAL", "ANIM_DURATION_TOUCH", "SNAP_PREFER_30S_MAP", "NUM_POSITIONS", "COS_30", "SIN_30", "MISSING_COLOR", "HOURS_TO_MINUTES", "mHours12Texts", "mOuterHours24Texts", "mInnerHours24Texts", "mMinutesTexts", "mPaint", "mPaintCenter", "mPaintSelector", "mPaintBackground", "mTypeface", "mTextColor", "mTextSize", "mTextInset", "mOuterTextX", "mOuterTextY", "mInnerTextX", "mInnerTextY", "mSelectionDegrees", "mTouchHelper", "mSelectorPath", "mIs24HourMode", "mShowHours", "mHoursToMinutesAnimator", "mHoursToMinutes", "mIsOnInnerCircle", "mSelectorRadius", "mSelectorStroke", "mSelectorDotRadius", "mCenterDotRadius", "mSelectorColor", "mSelectorDotColor", "mXCenter", "mYCenter", "mCircleRadius", "mMinDistForInnerNumber", "mMaxDistForOuterNumber", "mHalfwayDist", "mOuterTextHours", "mInnerTextHours", "mMinutesText", "mAmOrPm", "mDisabledAlpha", "mListener", "mInputEnabled", "mChangedDuringTouch" ],
  "methodNames" : [ "private static void preparePrefer30sMap()", "private static int snapPrefer30s(int degrees)", "private static int snapOnly30s(int degrees, int forceHigherOrLower)", " void applyAttributes(AttributeSet attrs, int defStyleAttr, int defStyleRes)", "public void initialize(int hour, int minute, boolean is24HourMode)", "public void setCurrentItemShowing(int item, boolean animate)", "public int getCurrentItemShowing()", "public void setOnValueSelectedListener(OnValueSelectedListener listener)", "public void setCurrentHour(int hour)", "private void setCurrentHourInternal(int hour, boolean callback, boolean autoAdvance)", "public int getCurrentHour()", "private int getHourForDegrees(int degrees, boolean innerCircle)", "private int getDegreesForHour(int hour)", "private boolean getInnerCircleForHour(int hour)", "public void setCurrentMinute(int minute)", "private void setCurrentMinuteInternal(int minute, boolean callback)", "public int getCurrentMinute()", "private int getMinuteForDegrees(int degrees)", "private int getDegreesForMinute(int minute)", "public boolean setAmOrPm(int amOrPm)", "public int getAmOrPm()", "public void showHours(boolean animate)", "public void showMinutes(boolean animate)", "private void initHoursAndMinutesText()", "private void initData()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void onDraw(Canvas canvas)", "private void showPicker(boolean hours, boolean animate)", "private void animatePicker(boolean hoursToMinutes, long duration)", "private void drawCircleBackground(Canvas canvas)", "private void drawHours(Canvas canvas, Path selectorPath, float alphaMod)", "private void drawHoursClipped(Canvas canvas, int hoursAlpha, boolean showActivated)", "private void drawMinutes(Canvas canvas, Path selectorPath, float alphaMod)", "private void drawMinutesClipped(Canvas canvas, int minutesAlpha, boolean showActivated)", "private void drawCenter(Canvas canvas, float alphaMod)", "private int getMultipliedAlpha(int argb, int alpha)", "private void drawSelector(Canvas canvas, Path selectorPath)", "private void calculatePositionsHours()", "private void calculatePositionsMinutes()", "private static void calculatePositions(Paint paint, float radius, float xCenter, float yCenter, float textSize, float[] x, float[] y)", "private void drawTextElements(Canvas canvas, float textSize, Typeface typeface, ColorStateList textColor, String[] texts, float[] textX, float[] textY, Paint paint, int alpha, boolean showActivated, int activatedDegrees, boolean activatedOnly)", "private int getDegreesFromXY(float x, float y, boolean constrainOutside)", "private boolean getInnerCircleFromXY(float x, float y)", "public boolean onTouchEvent(MotionEvent event)", "private boolean handleTouchInput(float x, float y, boolean forceSelection, boolean autoAdvance)", "public boolean dispatchHoverEvent(MotionEvent event)", "public void setInputEnabled(boolean inputEnabled)", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)" ]
}