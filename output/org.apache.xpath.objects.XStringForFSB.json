{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/objects/XStringForFSB.java",
  "packageName" : "org.apache.xpath.objects",
  "className" : "XStringForFSB",
  "comment" : "\n * This class will wrap a FastStringBuffer and allow for\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_start",
    "type" : "int",
    "comment" : " The start position in the fsb. ",
    "links" : [ ]
  }, {
    "name" : "m_length",
    "type" : "int",
    "comment" : " The length of the string. ",
    "links" : [ ]
  }, {
    "name" : "m_strCache",
    "type" : "String",
    "comment" : " If the str() function is called, the string will be cached here. ",
    "links" : [ ]
  }, {
    "name" : "m_hash",
    "type" : "int",
    "comment" : " cached hash code ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public FastStringBuffer fsb()",
    "returnType" : "FastStringBuffer",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)",
    "returnType" : "void",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasString()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this object contains a java String object.\n   *\n   * @return true if this XMLString can return a string without creating one.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object object()",
    "returnType" : "Object",
    "comment" : "\n   * Since this object is incomplete without the length and the offset, we \n   * have to convert to a string when this function is called.\n   *\n   * @return The java String representation of this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String str()",
    "returnType" : "String",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * characters method on the passed ContentHandler for the\n   * string-value. Multiple calls to the\n   * ContentHandler's characters methods may well occur for a single call to\n   * this method.\n   *\n   * @param ch A non-null reference to a ContentHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * comment method on the passed LexicalHandler for the\n   * string-value.\n   *\n   * @param lh A non-null reference to a LexicalHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n   * Returns the length of this string.\n   *\n   * @return  the length of the sequence of characters represented by this\n   *          object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int index)",
    "returnType" : "char",
    "comment" : "\n   * Returns the character at the specified index. An index ranges\n   * from <code>0</code> to <code>length() - 1</code>. The first character\n   * of the sequence is at index <code>0</code>, the next at index\n   * <code>1</code>, and so on, as for array indexing.\n   *\n   * @param      index   the index of the character.\n   * @return     the character at the specified index of this string.\n   *             The first character is at index <code>0</code>.\n   * @exception  IndexOutOfBoundsException  if the <code>index</code>\n   *             argument is negative or not less than the length of this\n   *             string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",
    "returnType" : "void",
    "comment" : "\n   * Copies characters from this string into the destination character\n   * array.\n   *\n   * @param      srcBegin   index of the first character in the string\n   *                        to copy.\n   * @param      srcEnd     index after the last character in the string\n   *                        to copy.\n   * @param      dst        the destination array.\n   * @param      dstBegin   the start offset in the destination array.\n   * @exception IndexOutOfBoundsException If any of the following\n   *            is true:\n   *            <ul><li><code>srcBegin</code> is negative.\n   *            <li><code>srcBegin</code> is greater than <code>srcEnd</code>\n   *            <li><code>srcEnd</code> is greater than the length of this\n   *                string\n   *            <li><code>dstBegin</code> is negative\n   *            <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than\n   *                <code>dst.length</code></ul>\n   * @exception NullPointerException if <code>dst</code> is <code>null</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(XMLString obj2)",
    "returnType" : "boolean",
    "comment" : "\n   * Compares this string to the specified object.\n   * The result is <code>true</code> if and only if the argument is not\n   * <code>null</code> and is a <code>String</code> object that represents\n   * the same sequence of characters as this object.\n   *\n   * @param   obj2       the object to compare this <code>String</code>\n   *                     against.\n   *\n   * @return  <code>true</code> if the <code>String </code>are equal;\n   *          <code>false</code> otherwise.\n   * @see     java.lang.String#compareTo(java.lang.String)\n   * @see     java.lang.String#equalsIgnoreCase(java.lang.String)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(XObject obj2)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are functionally equal.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return true if the two objects are equal\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(String anotherString)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are functionally equal.\n   *\n   * @param anotherString Object to compare this to\n   *\n   * @return true if the two objects are equal\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj2)",
    "returnType" : "boolean",
    "comment" : "\n   * Compares this string to the specified object.\n   * The result is <code>true</code> if and only if the argument is not\n   * <code>null</code> and is a <code>String</code> object that represents\n   * the same sequence of characters as this object.\n   *\n   * @param   obj2       the object to compare this <code>String</code>\n   *                     against.\n   *\n   * @return  <code>true</code> if the <code>String </code>are equal;\n   *          <code>false</code> otherwise.\n   * @see     java.lang.String#compareTo(java.lang.String)\n   * @see     java.lang.String#equalsIgnoreCase(java.lang.String)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsIgnoreCase(String anotherString)",
    "returnType" : "boolean",
    "comment" : "\n   * Compares this <code>String</code> to another <code>String</code>,\n   * ignoring case considerations.  Two strings are considered equal\n   * ignoring case if they are of the same length, and corresponding\n   * characters in the two strings are equal ignoring case.\n   *\n   * @param   anotherString   the <code>String</code> to compare this\n   *                          <code>String</code> against.\n   * @return  <code>true</code> if the argument is not <code>null</code>\n   *          and the <code>String</code>s are equal,\n   *          ignoring case; <code>false</code> otherwise.\n   * @see     #equals(Object)\n   * @see     java.lang.Character#toLowerCase(char)\n   * @see java.lang.Character#toUpperCase(char)\n   ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(XMLString xstr)",
    "returnType" : "int",
    "comment" : "\n   * Compares two strings lexicographically.\n   *\n   * @param   xstr   the <code>String</code> to be compared.\n   *\n   * @return  the value <code>0</code> if the argument string is equal to\n   *          this string; a value less than <code>0</code> if this string\n   *          is lexicographically less than the string argument; and a\n   *          value greater than <code>0</code> if this string is\n   *          lexicographically greater than the string argument.\n   * @exception java.lang.NullPointerException if <code>anotherString</code>\n   *          is <code>null</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int compareToIgnoreCase(XMLString xstr)",
    "returnType" : "int",
    "comment" : "\n   * Compares two strings lexicographically, ignoring case considerations.\n   * This method returns an integer whose sign is that of\n   * <code>this.toUpperCase().toLowerCase().compareTo(\n   * str.toUpperCase().toLowerCase())</code>.\n   * <p>\n   * Note that this method does <em>not</em> take locale into account,\n   * and will result in an unsatisfactory ordering for certain locales.\n   * The java.text package provides <em>collators</em> to allow\n   * locale-sensitive ordering.\n   *\n   * @param   xstr   the <code>String</code> to be compared.\n   *\n   * @return  a negative integer, zero, or a positive integer as the\n   *          the specified String is greater than, equal to, or less\n   *          than this String, ignoring case considerations.\n   * @see     java.text.Collator#compare(String, String)\n   * @since   1.2\n   ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n   * Returns a hashcode for this string. The hashcode for a\n   * <code>String</code> object is computed as\n   * <blockquote><pre>\n   * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n   * </pre></blockquote>\n   * using <code>int</code> arithmetic, where <code>s[i]</code> is the\n   * <i>i</i>th character of the string, <code>n</code> is the length of\n   * the string, and <code>^</code> indicates exponentiation.\n   * (The hash value of the empty string is zero.)\n   *\n   * @return  a hash code value for this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean startsWith(XMLString prefix, int toffset)",
    "returnType" : "boolean",
    "comment" : "\n   * Tests if this string starts with the specified prefix beginning\n   * a specified index.\n   *\n   * @param   prefix    the prefix.\n   * @param   toffset   where to begin looking in the string.\n   * @return  <code>true</code> if the character sequence represented by the\n   *          argument is a prefix of the substring of this object starting\n   *          at index <code>toffset</code>; <code>false</code> otherwise.\n   *          The result is <code>false</code> if <code>toffset</code> is\n   *          negative or greater than the length of this\n   *          <code>String</code> object; otherwise the result is the same\n   *          as the result of the expression\n   *          <pre>\n   *          this.subString(toffset).startsWith(prefix)\n   *          </pre>\n   * @exception java.lang.NullPointerException if <code>prefix</code> is\n   *          <code>null</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean startsWith(XMLString prefix)",
    "returnType" : "boolean",
    "comment" : "\n   * Tests if this string starts with the specified prefix.\n   *\n   * @param   prefix   the prefix.\n   * @return  <code>true</code> if the character sequence represented by the\n   *          argument is a prefix of the character sequence represented by\n   *          this string; <code>false</code> otherwise.\n   *          Note also that <code>true</code> will be returned if the\n   *          argument is an empty string or is equal to this\n   *          <code>String</code> object as determined by the\n   *          {@link #equals(Object)} method.\n   * @exception java.lang.NullPointerException if <code>prefix</code> is\n   *          <code>null</code>.\n   * @since   JDK1. 0\n   ",
    "links" : [ "#equals(Object)" ]
  }, {
    "name" : "public int indexOf(int ch)",
    "returnType" : "int",
    "comment" : "\n   * Returns the index within this string of the first occurrence of the\n   * specified character. If a character with value <code>ch</code> occurs\n   * in the character sequence represented by this <code>String</code>\n   * object, then the index of the first such occurrence is returned --\n   * that is, the smallest value <i>k</i> such that:\n   * <blockquote><pre>\n   * this.charAt(<i>k</i>) == ch\n   * </pre></blockquote>\n   * is <code>true</code>. If no such character occurs in this string,\n   * then <code>-1</code> is returned.\n   *\n   * @param   ch   a character.\n   * @return  the index of the first occurrence of the character in the\n   *          character sequence represented by this object, or\n   *          <code>-1</code> if the character does not occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int ch, int fromIndex)",
    "returnType" : "int",
    "comment" : "\n   * Returns the index within this string of the first occurrence of the\n   * specified character, starting the search at the specified index.\n   * <p>\n   * If a character with value <code>ch</code> occurs in the character\n   * sequence represented by this <code>String</code> object at an index\n   * no smaller than <code>fromIndex</code>, then the index of the first\n   * such occurrence is returned--that is, the smallest value <i>k</i>\n   * such that:\n   * <blockquote><pre>\n   * (this.charAt(<i>k</i>) == ch) && (<i>k</i> >= fromIndex)\n   * </pre></blockquote>\n   * is true. If no such character occurs in this string at or after\n   * position <code>fromIndex</code>, then <code>-1</code> is returned.\n   * <p>\n   * There is no restriction on the value of <code>fromIndex</code>. If it\n   * is negative, it has the same effect as if it were zero: this entire\n   * string may be searched. If it is greater than the length of this\n   * string, it has the same effect as if it were equal to the length of\n   * this string: <code>-1</code> is returned.\n   *\n   * @param   ch          a character.\n   * @param   fromIndex   the index to start the search from.\n   * @return  the index of the first occurrence of the character in the\n   *          character sequence represented by this object that is greater\n   *          than or equal to <code>fromIndex</code>, or <code>-1</code>\n   *          if the character does not occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString substring(int beginIndex)",
    "returnType" : "XMLString",
    "comment" : "\n   * Returns a new string that is a substring of this string. The\n   * substring begins with the character at the specified index and\n   * extends to the end of this string. <p>\n   * Examples:\n   * <blockquote><pre>\n   * \"unhappy\".substring(2) returns \"happy\"\n   * \"Harbison\".substring(3) returns \"bison\"\n   * \"emptiness\".substring(9) returns \"\" (an empty string)\n   * </pre></blockquote>\n   *\n   * @param      beginIndex   the beginning index, inclusive.\n   * @return     the specified substring.\n   * @exception  IndexOutOfBoundsException  if\n   *             <code>beginIndex</code> is negative or larger than the\n   *             length of this <code>String</code> object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString substring(int beginIndex, int endIndex)",
    "returnType" : "XMLString",
    "comment" : "\n   * Returns a new string that is a substring of this string. The\n   * substring begins at the specified <code>beginIndex</code> and\n   * extends to the character at index <code>endIndex - 1</code>.\n   * Thus the length of the substring is <code>endIndex-beginIndex</code>.\n   *\n   * @param      beginIndex   the beginning index, inclusive.\n   * @param      endIndex     the ending index, exclusive.\n   * @return     the specified substring.\n   * @exception  IndexOutOfBoundsException  if the\n   *             <code>beginIndex</code> is negative, or\n   *             <code>endIndex</code> is larger than the length of\n   *             this <code>String</code> object, or\n   *             <code>beginIndex</code> is larger than\n   *             <code>endIndex</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString concat(String str)",
    "returnType" : "XMLString",
    "comment" : "\n   * Concatenates the specified string to the end of this string.\n   *\n   * @param   str   the <code>String</code> that is concatenated to the end\n   *                of this <code>String</code>.\n   * @return  a string that represents the concatenation of this object's\n   *          characters followed by the string argument's characters.\n   * @exception java.lang.NullPointerException if <code>str</code> is\n   *          <code>null</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString trim()",
    "returnType" : "XMLString",
    "comment" : "\n   * Removes white space from both ends of this string.\n   *\n   * @return  this string, with white space removed from the front and end.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSpace(char ch)",
    "returnType" : "boolean",
    "comment" : "\n   * Returns whether the specified <var>ch</var> conforms to the XML 1.0 definition\n   * of whitespace.  Refer to <A href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-S\">\n   * the definition of <CODE>S</CODE></A> for details.\n   * @param   ch      Character to check as XML whitespace.\n   * @return          =true if <var>ch</var> is XML whitespace; otherwise =false.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString fixWhiteSpace(boolean trimHead, boolean trimTail, boolean doublePunctuationSpaces)",
    "returnType" : "XMLString",
    "comment" : "\n   * Conditionally trim all leading and trailing whitespace in the specified String.\n   * All strings of white space are\n   * replaced by a single space character (#x20), except spaces after punctuation which\n   * receive double spaces if doublePunctuationSpaces is true.\n   * This function may be useful to a formatter, but to get first class\n   * results, the formatter should probably do it's own white space handling\n   * based on the semantics of the formatting object.\n   *\n   * @param   trimHead    Trim leading whitespace?\n   * @param   trimTail    Trim trailing whitespace?\n   * @param   doublePunctuationSpaces    Use double spaces for punctuation?\n   * @return              The trimmed string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public double toDouble()",
    "returnType" : "double",
    "comment" : "\n   * Convert a string to a double -- Allowed input is in fixed\n   * notation ddd.fff.\n   *\n   * %OPT% CHECK PERFORMANCE against generating a Java String and\n   * converting it to double. The advantage of running in native\n   * machine code -- perhaps even microcode, on some systems -- may\n   * more than make up for the cost of allocating and discarding the\n   * additional object. We need to benchmark this. \n   *\n   * %OPT% More importantly, we need to decide whether we _care_ about\n   * the performance of this operation. Does XString.toDouble constitute\n   * any measurable percentage of our typical runtime? I suspect not!\n   *\n   * @return A double value representation of the string, or return Double.NaN \n   * if the string can not be converted.  ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public FastStringBuffer fsb()", "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)", "public boolean hasString()", "public Object object()", "public String str()", "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException", "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException", "public int length()", "public char charAt(int index)", "public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)", "public boolean equals(XMLString obj2)", "public boolean equals(XObject obj2)", "public boolean equals(String anotherString)", "public boolean equals(Object obj2)", "public boolean equalsIgnoreCase(String anotherString)", "public int compareTo(XMLString xstr)", "public int compareToIgnoreCase(XMLString xstr)", "public int hashCode()", "public boolean startsWith(XMLString prefix, int toffset)", "public boolean startsWith(XMLString prefix)", "public int indexOf(int ch)", "public int indexOf(int ch, int fromIndex)", "public XMLString substring(int beginIndex)", "public XMLString substring(int beginIndex, int endIndex)", "public XMLString concat(String str)", "public XMLString trim()", "private static boolean isSpace(char ch)", "public XMLString fixWhiteSpace(boolean trimHead, boolean trimTail, boolean doublePunctuationSpaces)", "public double toDouble()" ],
  "variableNames" : [ "serialVersionUID", "m_start", "m_length", "m_strCache", "m_hash" ]
}