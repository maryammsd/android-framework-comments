{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/patterns/NodeTest.java",
  "packageName" : "org.apache.xpath.patterns",
  "className" : "NodeTest",
  "comment" : "\n * This is the basic node test class for both match patterns and location path\n * steps.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WILD",
    "type" : "String",
    "comment" : "\n   * The namespace or local name for node tests with a wildcard.\n   *  @see <a href=\"http://www.w3.org/TR/xpath#NT-NameTest\">the XPath NameTest production.</a> \n   ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTS_PRE_STRIPPING",
    "type" : "String",
    "comment" : "\n   * The URL to pass to the Node#supports method, to see if the\n   * DOM has already been stripped of whitespace nodes. \n   ",
    "links" : [ ]
  }, {
    "name" : "m_whatToShow",
    "type" : "int",
    "comment" : "\n   * This attribute determines which node types are accepted.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_BYFUNCTION",
    "type" : "int",
    "comment" : "\n   * Special bitmap for match patterns starting with a function.\n   * Make sure this does not conflict with {@link org.w3c.dom.traversal.NodeFilter}.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "m_namespace",
    "type" : "String",
    "comment" : "\n   * The namespace to be tested for, which may be null.\n   *  @serial \n   ",
    "links" : [ ]
  }, {
    "name" : "m_name",
    "type" : "String",
    "comment" : "\n   * The local name to be tested for.\n   *  @serial \n   ",
    "links" : [ ]
  }, {
    "name" : "m_score",
    "type" : "XNumber",
    "comment" : "\n   * Statically calculated score for this test.  One of\n   *  {@link #SCORE_NODETEST},\n   *  {@link #SCORE_NONE},\n   *  {@link #SCORE_NSWILD},\n   *  {@link #SCORE_QNAME}, or\n   *  {@link #SCORE_OTHER}.\n   *  @serial\n   ",
    "links" : [ "#SCORE_OTHER", "#SCORE_NSWILD", "#SCORE_QNAME", "#SCORE_NONE", "#SCORE_NODETEST" ]
  }, {
    "name" : "SCORE_NODETEST",
    "type" : "XNumber",
    "comment" : "\n   * The match score if the pattern consists of just a NodeTest.\n   *  @see <a href=\"http://www.w3.org/TR/xslt#conflict\">XSLT Specification - 5.5 Conflict Resolution for Template Rules</a> \n   ",
    "links" : [ ]
  }, {
    "name" : "SCORE_NSWILD",
    "type" : "XNumber",
    "comment" : "\n   * The match score if the pattern pattern has the form NCName:*.\n   *  @see <a href=\"http://www.w3.org/TR/xslt#conflict\">XSLT Specification - 5.5 Conflict Resolution for Template Rules</a> \n   ",
    "links" : [ ]
  }, {
    "name" : "SCORE_QNAME",
    "type" : "XNumber",
    "comment" : "\n   * The match score if the pattern has the form\n   * of a QName optionally preceded by an @ character.\n   *  @see <a href=\"http://www.w3.org/TR/xslt#conflict\">XSLT Specification - 5.5 Conflict Resolution for Template Rules</a> \n   ",
    "links" : [ ]
  }, {
    "name" : "SCORE_OTHER",
    "type" : "XNumber",
    "comment" : "\n   * The match score if the pattern consists of something\n   * other than just a NodeTest or just a qname.\n   *  @see <a href=\"http://www.w3.org/TR/xslt#conflict\">XSLT Specification - 5.5 Conflict Resolution for Template Rules</a> \n   ",
    "links" : [ ]
  }, {
    "name" : "SCORE_NONE",
    "type" : "XNumber",
    "comment" : "\n   * The match score if no match is made.\n   *  @see <a href=\"http://www.w3.org/TR/xslt#conflict\">XSLT Specification - 5.5 Conflict Resolution for Template Rules</a> \n   ",
    "links" : [ ]
  }, {
    "name" : "m_isTotallyWild",
    "type" : "boolean",
    "comment" : "\n   * True if this test has a null namespace and a local name of {@link #WILD}.\n   *  @serial \n   ",
    "links" : [ "#WILD" ]
  } ],
  "methods" : [ {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n   * This attribute determines which node types are accepted.\n   * These constants are defined in the {@link org.w3c.dom.traversal.NodeFilter}\n   * interface.\n   *\n   * @return bitset mainly defined in {@link org.w3c.dom.traversal.NodeFilter}.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "public void setWhatToShow(int what)",
    "returnType" : "void",
    "comment" : "\n   * This attribute determines which node types are accepted.\n   * These constants are defined in the {@link org.w3c.dom.traversal.NodeFilter}\n   * interface.\n   *\n   * @param what bitset mainly defined in {@link org.w3c.dom.traversal.NodeFilter}.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "public String getNamespace()",
    "returnType" : "String",
    "comment" : "\n   * Return the namespace to be tested.\n   *\n   * @return The namespace to be tested for, or {@link #WILD}, or null.\n   ",
    "links" : [ "#WILD" ]
  }, {
    "name" : "public void setNamespace(String ns)",
    "returnType" : "void",
    "comment" : "\n   * Set the namespace to be tested.\n   *\n   * @param ns The namespace to be tested for, or {@link #WILD}, or null.\n   ",
    "links" : [ "#WILD" ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n   * Return the local name to be tested.\n   *\n   * @return the local name to be tested, or {@link #WILD}, or an empty string.\n   ",
    "links" : [ "#WILD" ]
  }, {
    "name" : "public void setLocalName(String name)",
    "returnType" : "void",
    "comment" : "\n   * Set the local name to be tested.\n   *\n   * @param name the local name to be tested, or {@link #WILD}, or an empty string.\n   ",
    "links" : [ "#WILD" ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "public void initNodeTest(int whatToShow)",
    "returnType" : "void",
    "comment" : "\n   * Initialize this node test by setting the whatToShow property, and\n   * calculating the score that this test will return if a test succeeds.\n   *\n   *\n   * @param whatToShow Bit set defined mainly by {@link org.w3c.dom.traversal.NodeFilter}.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "public void initNodeTest(int whatToShow, String namespace, String name)",
    "returnType" : "void",
    "comment" : "\n   * Initialize this node test by setting the whatToShow property and the\n   * namespace and local name, and\n   * calculating the score that this test will return if a test succeeds.\n   *\n   *\n   * @param whatToShow Bit set defined mainly by {@link org.w3c.dom.traversal.NodeFilter}.\n   * @param namespace The namespace to be tested.\n   * @param name The local name to be tested.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "public XNumber getStaticScore()",
    "returnType" : "XNumber",
    "comment" : "\n   * Get the static score for this node test.\n   * @return Should be one of the SCORE_XXX constants.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStaticScore(XNumber score)",
    "returnType" : "void",
    "comment" : "\n   * Set the static score for this node test.\n   * @param score Should be one of the SCORE_XXX constants.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void calcScore()",
    "returnType" : "void",
    "comment" : "\n   * Static calc of match score.\n   ",
    "links" : [ ]
  }, {
    "name" : "public double getDefaultScore()",
    "returnType" : "double",
    "comment" : "\n   * Get the score that this test will return if a test succeeds.\n   *\n   *\n   * @return the score that this test will return if a test succeeds.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static int getNodeTypeTest(int whatToShow)",
    "returnType" : "int",
    "comment" : "\n   * Tell what node type to test, if not DTMFilter.SHOW_ALL.\n   *\n   * @param whatToShow Bit set defined mainly by \n   *        {@link org.apache.xml.dtm.DTMFilter}.\n   * @return the node type for the whatToShow.  Since whatToShow can specify \n   *         multiple types, it will return the first bit tested that is on, \n   *         so the caller of this function should take care that this is \n   *         the function they really want to call.  If none of the known bits\n   *         are set, this function will return zero.\n   ",
    "links" : [ "org.apache.xml.dtm.DTMFilter" ]
  }, {
    "name" : "public static void debugWhatToShow(int whatToShow)",
    "returnType" : "void",
    "comment" : "\n   * Do a diagnostics dump of a whatToShow bit set.\n   *\n   *\n   * @param whatToShow Bit set defined mainly by \n   *        {@link org.apache.xml.dtm.DTMFilter}.\n   ",
    "links" : [ "org.apache.xml.dtm.DTMFilter" ]
  }, {
    "name" : "private static final boolean subPartMatch(String p, String t)",
    "returnType" : "boolean",
    "comment" : "\n   * Two names are equal if they and either both are null or\n   * the name t is wild and the name p is non-null, or the two\n   * strings are equal.\n   *\n   * @param p part string from the node.\n   * @param t target string, which may be {@link #WILD}.\n   *\n   * @return true if the strings match according to the rules of this method.\n   ",
    "links" : [ "#WILD" ]
  }, {
    "name" : "private static final boolean subPartMatchNS(String p, String t)",
    "returnType" : "boolean",
    "comment" : "\n   * This is temporary to patch over Xerces issue with representing DOM\n   * namespaces as \"\".\n   *\n   * @param p part string from the node, which may represent the null namespace\n   *        as null or as \"\".\n   * @param t target string, which may be {@link #WILD}.\n   *\n   * @return true if the strings match according to the rules of this method.\n   ",
    "links" : [ "#WILD" ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int context) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Tell what the test score is for the given node.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   * @param context The node being tested.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int context, DTM dtm, int expType) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Tell what the test score is for the given node.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   * @param context The node being tested.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Test the current node to see if it matches the given node test.\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * Node tests by themselves do not need to fix up variables.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getWhatToShow()", "public void setWhatToShow(int what)", "public String getNamespace()", "public void setNamespace(String ns)", "public String getLocalName()", "public void setLocalName(String name)", "public boolean deepEquals(Expression expr)", "public void initNodeTest(int whatToShow)", "public void initNodeTest(int whatToShow, String namespace, String name)", "public XNumber getStaticScore()", "public void setStaticScore(XNumber score)", "protected void calcScore()", "public double getDefaultScore()", "public static int getNodeTypeTest(int whatToShow)", "public static void debugWhatToShow(int whatToShow)", "private static final boolean subPartMatch(String p, String t)", "private static final boolean subPartMatchNS(String p, String t)", "public XObject execute(XPathContext xctxt, int context) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt, int context, DTM dtm, int expType) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)" ],
  "variableNames" : [ "serialVersionUID", "WILD", "SUPPORTS_PRE_STRIPPING", "m_whatToShow", "SHOW_BYFUNCTION", "m_namespace", "m_name", "m_score", "SCORE_NODETEST", "SCORE_NSWILD", "SCORE_QNAME", "SCORE_OTHER", "SCORE_NONE", "m_isTotallyWild" ]
}