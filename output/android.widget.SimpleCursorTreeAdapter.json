{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SimpleCursorTreeAdapter.java",
  "packageName" : "android.widget",
  "className" : "SimpleCursorTreeAdapter",
  "comment" : "\n * An easy adapter to map columns from a cursor to TextViews or ImageViews\n * defined in an XML file. You can specify which columns you want, which views\n * you want to display the columns, and the XML file that defines the appearance\n * of these views. Separate XML files for child and groups are possible.\n *\n * Binding occurs in two phases. First, if a\n * {@link android.widget.SimpleCursorTreeAdapter.ViewBinder} is available,\n * {@link ViewBinder#setViewValue(android.view.View, android.database.Cursor, int)}\n * is invoked. If the returned value is true, binding has occurred. If the\n * returned value is false and the view to bind is a TextView,\n * {@link #setViewText(TextView, String)} is invoked. If the returned value\n * is false and the view to bind is an ImageView,\n * {@link #setViewImage(ImageView, String)} is invoked. If no appropriate\n * binding can be found, an {@link IllegalStateException} is thrown.\n ",
  "links" : [ "#setViewValue(android.view.View", "IllegalStateException", "#setViewImage(ImageView", "android.widget.SimpleCursorTreeAdapter.ViewBinder", "#setViewText(TextView" ],
  "variables" : [ {
    "name" : "mGroupFromNames",
    "type" : "String[]",
    "comment" : " The name of the columns that contain the data to display for a group. ",
    "links" : [ ]
  }, {
    "name" : "mGroupFrom",
    "type" : "int[]",
    "comment" : " The indices of columns that contain data to display for a group. ",
    "links" : [ ]
  }, {
    "name" : "mGroupTo",
    "type" : "int[]",
    "comment" : "\n     * The View IDs that will display a group's data fetched from the\n     * corresponding column.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChildFromNames",
    "type" : "String[]",
    "comment" : " The name of the columns that contain the data to display for a child. ",
    "links" : [ ]
  }, {
    "name" : "mChildFrom",
    "type" : "int[]",
    "comment" : " The indices of columns that contain data to display for a child. ",
    "links" : [ ]
  }, {
    "name" : "mChildTo",
    "type" : "int[]",
    "comment" : "\n     * The View IDs that will display a child's data fetched from the\n     * corresponding column.\n     ",
    "links" : [ ]
  }, {
    "name" : "mViewBinder",
    "type" : "ViewBinder",
    "comment" : "\n     * View binder, if supplied\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(String[] groupFromNames, int[] groupTo, String[] childFromNames, int[] childTo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ViewBinder getViewBinder()",
    "returnType" : "ViewBinder",
    "comment" : "\n     * Returns the {@link ViewBinder} used to bind data to views.\n     *\n     * @return a ViewBinder or null if the binder does not exist\n     *\n     * @see #setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder)\n     ",
    "links" : [ "ViewBinder" ]
  }, {
    "name" : "public void setViewBinder(ViewBinder viewBinder)",
    "returnType" : "void",
    "comment" : "\n     * Sets the binder used to bind data to views.\n     *\n     * @param viewBinder the binder used to bind data to views, can be null to\n     *        remove the existing binder\n     *\n     * @see #getViewBinder()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void bindView(View view, Context context, Cursor cursor, int[] from, int[] to)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initFromColumns(Cursor cursor, String[] fromColumnNames, int[] fromColumns)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void bindChildView(View view, Context context, Cursor cursor, boolean isLastChild)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void bindGroupView(View view, Context context, Cursor cursor, boolean isExpanded)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setViewImage(ImageView v, String value)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the image for an ImageView. By default, the\n     * value will be treated as a Uri. Intended to be overridden by Adapters\n     * that need to filter strings retrieved from the database.\n     * \n     * @param v ImageView to receive an image\n     * @param value the value retrieved from the cursor\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setViewText(TextView v, String text)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the text for a TextView but only if\n     * there is no existing ViewBinder or if the existing ViewBinder cannot\n     * handle binding to a TextView.\n     *\n     * Intended to be overridden by Adapters that need to filter strings\n     * retrieved from the database.\n     * \n     * @param v TextView to receive text\n     * @param text the text to be set for the TextView\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(String[] groupFromNames, int[] groupTo, String[] childFromNames, int[] childTo)", "public ViewBinder getViewBinder()", "public void setViewBinder(ViewBinder viewBinder)", "private void bindView(View view, Context context, Cursor cursor, int[] from, int[] to)", "private void initFromColumns(Cursor cursor, String[] fromColumnNames, int[] fromColumns)", "protected void bindChildView(View view, Context context, Cursor cursor, boolean isLastChild)", "protected void bindGroupView(View view, Context context, Cursor cursor, boolean isExpanded)", "protected void setViewImage(ImageView v, String value)", "public void setViewText(TextView v, String text)" ],
  "variableNames" : [ "mGroupFromNames", "mGroupFrom", "mGroupTo", "mChildFromNames", "mChildFrom", "mChildTo", "mViewBinder" ]
}