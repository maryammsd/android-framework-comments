{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/netstats/NetworkStatsDataMigrationUtils.java",
  "packageName" : "android.net.netstats",
  "className" : "NetworkStatsDataMigrationUtils",
  "comment" : "\n * Helper class to read old version of persistent network statistics.\n *\n * The implementation is intended to be modified by OEM partners to\n * accommodate their custom changes.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PREFIX_XT",
    "type" : "String",
    "comment" : "\n     * Prefix of the files which are used to store per network interface statistics.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFIX_UID",
    "type" : "String",
    "comment" : "\n     * Prefix of the files which are used to store per uid statistics.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFIX_UID_TAG",
    "type" : "String",
    "comment" : "\n     * Prefix of the files which are used to store per uid tagged traffic statistics.\n     ",
    "links" : [ ]
  }, {
    "name" : "sPrefixLegacyFileNameMap",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILE_MAGIC",
    "type" : "int",
    "comment" : "\n     * File header magic number: \"ANET\". The definition is copied from NetworkStatsCollection,\n     * but it is fine for OEM to re-define to their own value to adapt the legacy file reading\n     * logic.\n     ",
    "links" : [ ]
  }, {
    "name" : "BUFFER_SIZE",
    "type" : "int",
    "comment" : " Default buffer size from BufferedInputStream ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static File getPlatformSystemDir()",
    "returnType" : "File",
    "comment" : " Used to read files at /data/system/netstats_*.bin.",
    "links" : [ ]
  }, {
    "name" : "private static File getPlatformBaseDir()",
    "returnType" : "File",
    "comment" : " Used to read files at /data/system/netstats/<tag>.<start>-<end>.",
    "links" : [ ]
  }, {
    "name" : "private static File getLegacyBinFileForPrefix(@NonNull @Prefix String prefix)",
    "returnType" : "File",
    "comment" : " Get /data/system/netstats_*.bin legacy files. Does not check for existence.",
    "links" : [ ]
  }, {
    "name" : "private static ArrayList<File> getPlatformFileListForPrefix(@NonNull @Prefix String prefix)",
    "returnType" : "ArrayList<File>",
    "comment" : " List /data/system/netstats/[xt|uid|uid_tag].<start>-<end> legacy files.",
    "links" : [ ]
  }, {
    "name" : "public static NetworkStatsCollection readPlatformCollection(@NonNull @Prefix String prefix, long bucketDuration) throws IOException",
    "returnType" : "NetworkStatsCollection",
    "comment" : "\n     * Read legacy persisted network stats from disk.\n     *\n     * This function provides the implementation to read legacy network stats\n     * from disk. It is used for migration of legacy network stats into the\n     * stats provided by the Connectivity module.\n     * This function needs to know about the previous format(s) of the network\n     * stats data that might be stored on this device so it can be read and\n     * conserved upon upgrade to Android 13 or above.\n     *\n     * This function will be called multiple times sequentially, all on the\n     * same thread, and will not be called multiple times concurrently. This\n     * function is expected to do a substantial amount of disk access, and\n     * doesn't need to return particularly fast, but the first boot after\n     * an upgrade to Android 13+ will be held until migration is done. As\n     * migration is only necessary once, after the first boot following the\n     * upgrade, this delay is not incurred.\n     *\n     * If this function fails in any way, it should throw an exception. If this\n     * happens, the system can't know about the data that was stored in the\n     * legacy files, but it will still count data usage happening on this\n     * session. On the next boot, the system will try migration again, and\n     * merge the returned data with the data used with the previous session.\n     * The system will only try the migration up to three (3) times. The remaining\n     * count is stored in the netstats_import_legacy_file_needed device config. The\n     * legacy data is never deleted by the mainline module to avoid any possible\n     * data loss.\n     *\n     * It is possible to set the netstats_import_legacy_file_needed device config\n     * to any positive integer to force the module to perform the migration. This\n     * can be achieved by calling the following command before rebooting :\n     *     adb shell device_config put connectivity netstats_import_legacy_file_needed 1\n     *\n     * The AOSP implementation provides code to read persisted network stats as\n     * they were written by AOSP prior to Android 13.\n     * OEMs who have used the AOSP implementation of persisting network stats\n     * to disk don't need to change anything.\n     * OEM that had modifications to this format should modify this function\n     * to read from their custom file format or locations if necessary.\n     *\n     * @param prefix         Type of data which is being read by the service.\n     * @param bucketDuration Duration of the buckets of the object, in milliseconds.\n     * @return {@link NetworkStatsCollection} instance.\n     ",
    "links" : [ "android.net.NetworkStatsCollection" ]
  }, {
    "name" : "private static void readPlatformCollection(@NonNull NetworkStatsCollection.Builder builder, @NonNull File file) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void readPlatformCollection(@NonNull NetworkStatsCollection.Builder builder, @NonNull DataInput in) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Helper function to read old version of NetworkStatsCollections that resided in the platform.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] readFullLongArray(DataInput in) throws IOException",
    "returnType" : "long[]",
    "comment" : " Copied from NetworkStatsHistory#DataStreamUtils.",
    "links" : [ ]
  }, {
    "name" : "private static long[] readVarLongArray(@NonNull DataInput in) throws IOException",
    "returnType" : "long[]",
    "comment" : " Copied from NetworkStatsHistory#DataStreamUtils.",
    "links" : [ ]
  }, {
    "name" : "private static long readVarLong(DataInput in) throws IOException",
    "returnType" : "long",
    "comment" : " Copied from NetworkStatsHistory#DataStreamUtils.",
    "links" : [ ]
  }, {
    "name" : "private static String readOptionalString(DataInput in) throws IOException",
    "returnType" : "String",
    "comment" : " Copied from NetworkIdentitySet.",
    "links" : [ ]
  }, {
    "name" : "private static NetworkStatsHistory readPlatformHistory(@NonNull DataInput in) throws IOException",
    "returnType" : "NetworkStatsHistory",
    "comment" : "\n     * This is copied from NetworkStatsHistory#NetworkStatsHistory(DataInput in). But it is fine\n     * for OEM to re-write the logic to adapt the legacy file reading.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Set<NetworkIdentity> readPlatformNetworkIdentitySet(@NonNull DataInput in) throws IOException",
    "returnType" : "Set<NetworkIdentity>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getCollapsedLegacyType(int networkType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void readLegacyUid(@NonNull NetworkStatsCollection.Builder builder, @NonNull File uidFile, boolean onlyTaggedData) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void readLegacyUid(@NonNull NetworkStatsCollection.Builder builder, @NonNull DataInput in, boolean taggedData) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Read legacy Uid statistics file format into the collection.\n     *\n     * This is copied from {@code NetworkStatsCollection#readLegacyUid}.\n     * See {@code NetworkStatsService#maybeUpgradeLegacyStatsLocked}.\n     *\n     * @param taggedData whether to read only tagged data (true) or only non-tagged data\n     *                   (false). For legacy uid files, the tagged data was stored in\n     *                   the same binary file with non-tagged data. But in later releases,\n     *                   these data should be kept in different recorders.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static File getPlatformSystemDir()", "private static File getPlatformBaseDir()", "private static File getLegacyBinFileForPrefix(@NonNull @Prefix String prefix)", "private static ArrayList<File> getPlatformFileListForPrefix(@NonNull @Prefix String prefix)", "public static NetworkStatsCollection readPlatformCollection(@NonNull @Prefix String prefix, long bucketDuration) throws IOException", "private static void readPlatformCollection(@NonNull NetworkStatsCollection.Builder builder, @NonNull File file) throws IOException", "public static void readPlatformCollection(@NonNull NetworkStatsCollection.Builder builder, @NonNull DataInput in) throws IOException", "private static long[] readFullLongArray(DataInput in) throws IOException", "private static long[] readVarLongArray(@NonNull DataInput in) throws IOException", "private static long readVarLong(DataInput in) throws IOException", "private static String readOptionalString(DataInput in) throws IOException", "private static NetworkStatsHistory readPlatformHistory(@NonNull DataInput in) throws IOException", "private static Set<NetworkIdentity> readPlatformNetworkIdentitySet(@NonNull DataInput in) throws IOException", "private static int getCollapsedLegacyType(int networkType)", "private static void readLegacyUid(@NonNull NetworkStatsCollection.Builder builder, @NonNull File uidFile, boolean onlyTaggedData) throws IOException", "public static void readLegacyUid(@NonNull NetworkStatsCollection.Builder builder, @NonNull DataInput in, boolean taggedData) throws IOException" ],
  "variableNames" : [ "PREFIX_XT", "PREFIX_UID", "PREFIX_UID_TAG", "sPrefixLegacyFileNameMap", "FILE_MAGIC", "BUFFER_SIZE" ]
}