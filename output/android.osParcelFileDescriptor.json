{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/ParcelFileDescriptor.java",
  "packageName" : "android.os",
  "className" : "ParcelFileDescriptor",
  "comment" : "\n * The FileDescriptor returned by {@link Parcel#readFileDescriptor}, allowing\n * you to close it when done with it.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFd",
    "type" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommFd",
    "type" : "FileDescriptor",
    "comment" : "\n     * Optional socket used to communicate close events, status at close, and\n     * detect remote process crashes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrapped",
    "type" : "ParcelFileDescriptor",
    "comment" : "\n     * Wrapped {@link ParcelFileDescriptor}, if any. Used to avoid\n     * double-closing {@link #mFd}.\n     * mClosed is always true if mWrapped is non-null.\n     ",
    "links" : [ "ParcelFileDescriptor", "#mFd" ]
  }, {
    "name" : "MAX_STATUS",
    "type" : "int",
    "comment" : "\n     * Maximum {@link #mStatusBuf} size; longer status messages will be\n     * truncated.\n     ",
    "links" : [ "#mStatusBuf" ]
  }, {
    "name" : "mStatusBuf",
    "type" : "byte[]",
    "comment" : "\n     * Temporary buffer used by {@link #readCommStatus(FileDescriptor, byte[])},\n     * allocated on-demand.\n     ",
    "links" : [ "#readCommStatus" ]
  }, {
    "name" : "mStatus",
    "type" : "Status",
    "comment" : "\n     * Status read by {@link #checkError()}, or null if not read yet.\n     ",
    "links" : [ "#checkError" ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_WORLD_READABLE",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: if {@link #MODE_CREATE} has been supplied and\n     * this file doesn't already exist, then create the file with permissions\n     * such that any application can read it.\n     *\n     * @deprecated Creating world-readable files is very dangerous, and likely\n     *             to cause security holes in applications. It is strongly\n     *             discouraged; instead, applications should use more formal\n     *             mechanism for interactions such as {@link ContentProvider},\n     *             {@link BroadcastReceiver}, and {@link android.app.Service}.\n     *             There are no guarantees that this access mode will remain on\n     *             a file, such as when it goes through a backup and restore.\n     ",
    "links" : [ "#open", "#MODE_CREATE", "ContentProvider", "BroadcastReceiver", "android.app.Service" ]
  }, {
    "name" : "MODE_WORLD_WRITEABLE",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: if {@link #MODE_CREATE} has been supplied and\n     * this file doesn't already exist, then create the file with permissions\n     * such that any application can write it.\n     *\n     * @deprecated Creating world-writable files is very dangerous, and likely\n     *             to cause security holes in applications. It is strongly\n     *             discouraged; instead, applications should use more formal\n     *             mechanism for interactions such as {@link ContentProvider},\n     *             {@link BroadcastReceiver}, and {@link android.app.Service}.\n     *             There are no guarantees that this access mode will remain on\n     *             a file, such as when it goes through a backup and restore.\n     ",
    "links" : [ "#open", "#MODE_CREATE", "ContentProvider", "BroadcastReceiver", "android.app.Service" ]
  }, {
    "name" : "MODE_READ_ONLY",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: open the file with read-only access.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "MODE_WRITE_ONLY",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: open the file with write-only access.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "MODE_READ_WRITE",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: open the file with read and write access.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "MODE_CREATE",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: create the file if it doesn't already exist.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "MODE_TRUNCATE",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: erase contents of file when opening.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "MODE_APPEND",
    "type" : "int",
    "comment" : "\n     * For use with {@link #open}: append to end of file while writing.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ParcelFileDescriptor>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParcelFileDescriptor open(File file, int mode) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Create a new ParcelFileDescriptor accessing a given file.\n     * <p>\n     * This method should only be used for files that you have direct access to;\n     * if you'd like to work with files hosted outside your app, use an API like\n     * {@link ContentResolver#openFile(Uri, String, CancellationSignal)}.\n     *\n     * @param file The file to be opened.\n     * @param mode The desired access mode, must be one of\n     *            {@link #MODE_READ_ONLY}, {@link #MODE_WRITE_ONLY}, or\n     *            {@link #MODE_READ_WRITE}; may also be any combination of\n     *            {@link #MODE_CREATE}, {@link #MODE_TRUNCATE},\n     *            {@link #MODE_WORLD_READABLE}, and\n     *            {@link #MODE_WORLD_WRITEABLE}.\n     * @return a new ParcelFileDescriptor pointing to the given file.\n     * @throws FileNotFoundException if the given file does not exist or can not\n     *             be opened with the requested mode.\n     * @see #parseMode(String)\n     ",
    "links" : [ "ContentResolver#openFile", "#MODE_READ_ONLY", "#MODE_WRITE_ONLY", "#MODE_READ_WRITE", "#MODE_CREATE", "#MODE_TRUNCATE", "#MODE_WORLD_READABLE", "#MODE_WORLD_WRITEABLE" ]
  }, {
    "name" : "public static ParcelFileDescriptor open(File file, int mode, Handler handler, final OnCloseListener listener) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : " MessageQueue.addOnFileDescriptorEventListener()",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor wrap(@NonNull ParcelFileDescriptor pfd, @NonNull Handler handler, @NonNull OnCloseListener listener) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : " MessageQueue.addOnFileDescriptorEventListener()",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor fromFd(FileDescriptor fd, Handler handler, final OnCloseListener listener) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static FileDescriptor openInternal(File file, int mode) throws FileNotFoundException",
    "returnType" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor dup(FileDescriptor orig) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Create a new ParcelFileDescriptor that is a dup of an existing\n     * FileDescriptor.  This obeys standard POSIX semantics, where the\n     * new file descriptor shared state such as file position with the\n     * original file descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor dup() throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Create a new ParcelFileDescriptor that is a dup of the existing\n     * FileDescriptor.  This obeys standard POSIX semantics, where the\n     * new file descriptor shared state such as file position with the\n     * original file descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor fromFd(int fd) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Create a new ParcelFileDescriptor from a raw native fd.  The new\n     * ParcelFileDescriptor holds a dup of the original fd passed in here,\n     * so you must still close that fd as well as the new ParcelFileDescriptor.\n     *\n     * @param fd The native fd that the ParcelFileDescriptor should dup.\n     *\n     * @return Returns a new ParcelFileDescriptor holding a FileDescriptor\n     * for a dup of the given fd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor adoptFd(int fd)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Take ownership of a raw native fd in to a new ParcelFileDescriptor.\n     * The returned ParcelFileDescriptor now owns the given fd, and will be\n     * responsible for closing it.\n     * <p>\n     * <strong>WARNING:</strong> You must not close the fd yourself after\n     * this call, and ownership of the file descriptor must have been\n     * released prior to the call to this function.\n     *\n     * @param fd The native fd that the ParcelFileDescriptor should adopt.\n     *\n     * @return Returns a new ParcelFileDescriptor holding a FileDescriptor\n     * for the given fd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor fromSocket(Socket socket)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Create a new ParcelFileDescriptor from the specified Socket.  The new\n     * ParcelFileDescriptor holds a dup of the original FileDescriptor in\n     * the Socket, so you must still close the Socket as well as the new\n     * ParcelFileDescriptor.\n     * <p>\n     * <strong>WARNING:</strong> Prior to API level 29, this function would not\n     * actually dup the Socket's FileDescriptor, and would take a\n     * reference to the its internal FileDescriptor instead. If the Socket\n     * gets garbage collected before the ParcelFileDescriptor, this may\n     * lead to the ParcelFileDescriptor being unexpectedly closed. To avoid\n     * this, the following pattern can be used:\n     * <pre>{@code\n     *    ParcelFileDescriptor pfd = ParcelFileDescriptor.fromSocket(socket).dup();\n     * }</pre>\n     *\n     * @param socket The Socket whose FileDescriptor is used to create\n     *               a new ParcelFileDescriptor.\n     *\n     * @return A new ParcelFileDescriptor with a duped copy of the\n     * FileDescriptor of the specified Socket.\n     *\n     * @throws UncheckedIOException if {@link #dup(FileDescriptor)} throws IOException.\n     ",
    "links" : [ "#dup" ]
  }, {
    "name" : "public static ParcelFileDescriptor fromDatagramSocket(DatagramSocket datagramSocket)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Create a new ParcelFileDescriptor from the specified DatagramSocket. The\n     * new ParcelFileDescriptor holds a dup of the original FileDescriptor in\n     * the DatagramSocket, so you must still close the DatagramSocket as well\n     * as the new ParcelFileDescriptor.\n     * <p>\n     * <strong>WARNING:</strong> Prior to API level 29, this function would not\n     * actually dup the DatagramSocket's FileDescriptor, and would take a\n     * reference to the its internal FileDescriptor instead. If the DatagramSocket\n     * gets garbage collected before the ParcelFileDescriptor, this may\n     * lead to the ParcelFileDescriptor being unexpectedly closed. To avoid\n     * this, the following pattern can be used:\n     * <pre>{@code\n     *    ParcelFileDescriptor pfd = ParcelFileDescriptor.fromDatagramSocket(socket).dup();\n     * }</pre>\n     *\n     * @param datagramSocket The DatagramSocket whose FileDescriptor is used\n     *               to create a new ParcelFileDescriptor.\n     *\n     * @return A new ParcelFileDescriptor with a duped copy of the\n     * FileDescriptor of the specified Socket.\n     *\n     * @throws UncheckedIOException if {@link #dup(FileDescriptor)} throws IOException.\n     ",
    "links" : [ "#dup" ]
  }, {
    "name" : "public static ParcelFileDescriptor[] createPipe() throws IOException",
    "returnType" : "ParcelFileDescriptor[]",
    "comment" : "\n     * Create two ParcelFileDescriptors structured as a data pipe.  The first\n     * ParcelFileDescriptor in the returned array is the read side; the second\n     * is the write side.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor[] createReliablePipe() throws IOException",
    "returnType" : "ParcelFileDescriptor[]",
    "comment" : "\n     * Create two ParcelFileDescriptors structured as a data pipe. The first\n     * ParcelFileDescriptor in the returned array is the read side; the second\n     * is the write side.\n     * <p>\n     * The write end has the ability to deliver an error message through\n     * {@link #closeWithError(String)} which can be handled by the read end\n     * calling {@link #checkError()}, usually after detecting an EOF.\n     * This can also be used to detect remote crashes.\n     ",
    "links" : [ "#closeWithError", "#checkError" ]
  }, {
    "name" : "public static ParcelFileDescriptor[] createSocketPair() throws IOException",
    "returnType" : "ParcelFileDescriptor[]",
    "comment" : "\n     * Create two ParcelFileDescriptors structured as a pair of sockets\n     * connected to each other. The two sockets are indistinguishable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor[] createSocketPair(int type) throws IOException",
    "returnType" : "ParcelFileDescriptor[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor[] createReliableSocketPair() throws IOException",
    "returnType" : "ParcelFileDescriptor[]",
    "comment" : "\n     * Create two ParcelFileDescriptors structured as a pair of sockets\n     * connected to each other. The two sockets are indistinguishable.\n     * <p>\n     * Both ends have the ability to deliver an error message through\n     * {@link #closeWithError(String)} which can be detected by the other end\n     * calling {@link #checkError()}, usually after detecting an EOF.\n     * This can also be used to detect remote crashes.\n     ",
    "links" : [ "#closeWithError", "#checkError" ]
  }, {
    "name" : "public static ParcelFileDescriptor[] createReliableSocketPair(int type) throws IOException",
    "returnType" : "ParcelFileDescriptor[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static FileDescriptor[] createCommSocketPair() throws IOException",
    "returnType" : "FileDescriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor fromData(byte[] data, String name) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * @hide Please use createPipe() or ContentProvider.openPipeHelper().\n     * Gets a file descriptor for a read-only copy of the given data.\n     *\n     * @param data Data to copy.\n     * @param name Name for the shared memory area that may back the file descriptor.\n     *        This is purely informative and may be {@code null}.\n     * @return A ParcelFileDescriptor.\n     * @throws IOException if there is an error while creating the shared memory area.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parseMode(String mode)",
    "returnType" : "int",
    "comment" : "\n     * Converts a string representing a file mode, such as \"rw\", into a bitmask suitable for use\n     * with {@link #open}.\n     * <p>\n     * @param mode The string representation of the file mode. Can be \"r\", \"w\", \"wt\", \"wa\", \"rw\"\n     *             or \"rwt\".\n     * @return A bitmask representing the given file mode.\n     * @throws IllegalArgumentException if the given string does not match a known file mode.\n     ",
    "links" : [ "#open" ]
  }, {
    "name" : "public static File getFile(FileDescriptor fd) throws IOException",
    "returnType" : "File",
    "comment" : "\n     * Return the filesystem path of the real file on disk that is represented\n     * by the given {@link FileDescriptor}.\n     *\n     * @hide\n     ",
    "links" : [ "FileDescriptor" ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Retrieve the actual FileDescriptor associated with this object.\n     *\n     * @return Returns the FileDescriptor associated with this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getStatSize()",
    "returnType" : "long",
    "comment" : "\n     * Return the total size of the file representing this fd, as determined by\n     * {@code stat()}. Returns -1 if the fd is not a file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long seekTo(long pos) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * This is needed for implementing AssetFileDescriptor.AutoCloseOutputStream,\n     * and I really don't think we want it to be public.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFd()",
    "returnType" : "int",
    "comment" : "\n     * Return the native fd int for this ParcelFileDescriptor.  The\n     * ParcelFileDescriptor still owns the fd, and it still must be closed\n     * through this API.\n     * <p>\n     * <strong>WARNING:</strong> Do not call close on the return value of this\n     * function or pass it to a function that assumes ownership of the fd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int detachFd()",
    "returnType" : "int",
    "comment" : "\n     * Return the native fd int for this ParcelFileDescriptor and detach it from\n     * the object here. You are now responsible for closing the fd in native\n     * code.\n     * <p>\n     * You should not detach when the original creator of the descriptor is\n     * expecting a reliable signal through {@link #close()} or\n     * {@link #closeWithError(String)}.\n     *\n     * @see #canDetectErrors()\n     ",
    "links" : [ "#close", "#closeWithError" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Close the ParcelFileDescriptor. This implementation closes the underlying\n     * OS resources allocated to represent this stream.\n     *\n     * @throws IOException\n     *             If an error occurs attempting to close this ParcelFileDescriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeWithError(String msg) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Close the ParcelFileDescriptor, informing any peer that an error occurred\n     * while processing. If the creator of this descriptor is not observing\n     * errors, it will close normally.\n     *\n     * @param msg describing the error; must not be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void closeWithStatus(int status, String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseResources()",
    "returnType" : "void",
    "comment" : "\n     * Called when the fd is being closed, for subclasses to release any other resources\n     * associated with it, such as acquired providers.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte[] getOrCreateStatusBuffer()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeCommStatusAndClose(int status, String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Status readCommStatus(FileDescriptor comm, byte[] buf)",
    "returnType" : "Status",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canDetectErrors()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this ParcelFileDescriptor can communicate and detect remote\n     * errors/crashes.\n     *\n     * @see #checkError()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void checkError() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Detect and throw if the other end of a pipe or socket pair encountered an\n     * error or crashed. This allows a reader to distinguish between a valid EOF\n     * and an error/crash.\n     * <p>\n     * If this ParcelFileDescriptor is unable to detect remote errors, it will\n     * return silently.\n     *\n     * @throws IOException for normal errors.\n     * @throws FileDescriptorDetachedException\n     *            if the remote side called {@link #detachFd()}. Once detached, the remote\n     *            side is unable to communicate any errors through\n     *            {@link #closeWithError(String)}.\n     * @see #canDetectErrors()\n     ",
    "links" : [ "#detachFd", "#closeWithError" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * If {@link Parcelable#PARCELABLE_WRITE_RETURN_VALUE} is set in flags,\n     * the file descriptor will be closed after a copy is written to the Parcel.\n     ",
    "links" : [ "Parcelable#PARCELABLE_WRITE_RETURN_VALUE" ]
  }, {
    "name" : "private static boolean isAtLeastQ()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int ifAtLeastQ(int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mFd", "mCommFd", "mWrapped", "MAX_STATUS", "mStatusBuf", "mStatus", "mClosed", "mGuard", "MODE_WORLD_READABLE", "MODE_WORLD_WRITEABLE", "MODE_READ_ONLY", "MODE_WRITE_ONLY", "MODE_READ_WRITE", "MODE_CREATE", "MODE_TRUNCATE", "MODE_APPEND", "CREATOR" ],
  "methodNames" : [ "public static ParcelFileDescriptor open(File file, int mode) throws FileNotFoundException", "public static ParcelFileDescriptor open(File file, int mode, Handler handler, final OnCloseListener listener) throws IOException", "public static ParcelFileDescriptor wrap(@NonNull ParcelFileDescriptor pfd, @NonNull Handler handler, @NonNull OnCloseListener listener) throws IOException", "public static ParcelFileDescriptor fromFd(FileDescriptor fd, Handler handler, final OnCloseListener listener) throws IOException", "private static FileDescriptor openInternal(File file, int mode) throws FileNotFoundException", "public static ParcelFileDescriptor dup(FileDescriptor orig) throws IOException", "public ParcelFileDescriptor dup() throws IOException", "public static ParcelFileDescriptor fromFd(int fd) throws IOException", "public static ParcelFileDescriptor adoptFd(int fd)", "public static ParcelFileDescriptor fromSocket(Socket socket)", "public static ParcelFileDescriptor fromDatagramSocket(DatagramSocket datagramSocket)", "public static ParcelFileDescriptor[] createPipe() throws IOException", "public static ParcelFileDescriptor[] createReliablePipe() throws IOException", "public static ParcelFileDescriptor[] createSocketPair() throws IOException", "public static ParcelFileDescriptor[] createSocketPair(int type) throws IOException", "public static ParcelFileDescriptor[] createReliableSocketPair() throws IOException", "public static ParcelFileDescriptor[] createReliableSocketPair(int type) throws IOException", "private static FileDescriptor[] createCommSocketPair() throws IOException", "public static ParcelFileDescriptor fromData(byte[] data, String name) throws IOException", "public static int parseMode(String mode)", "public static File getFile(FileDescriptor fd) throws IOException", "public FileDescriptor getFileDescriptor()", "public long getStatSize()", "public long seekTo(long pos) throws IOException", "public int getFd()", "public int detachFd()", "public void close() throws IOException", "public void closeWithError(String msg) throws IOException", "private void closeWithStatus(int status, String msg)", "public void releaseResources()", "private byte[] getOrCreateStatusBuffer()", "private void writeCommStatusAndClose(int status, String msg)", "private static Status readCommStatus(FileDescriptor comm, byte[] buf)", "public boolean canDetectErrors()", "public void checkError() throws IOException", "public String toString()", "protected void finalize() throws Throwable", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "private static boolean isAtLeastQ()", "private static int ifAtLeastQ(int value)" ]
}