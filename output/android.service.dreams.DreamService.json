{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/dreams/DreamService.java",
  "packageName" : "android.service.dreams",
  "className" : "DreamService",
  "comment" : "\n * Extend this class to implement a custom dream (available to the user as a \"Daydream\").\n *\n * <p>Dreams are interactive screensavers launched when a charging device is idle, or docked in a\n * desk dock. Dreams provide another modality for apps to express themselves, tailored for\n * an exhibition/lean-back experience.</p>\n *\n * <p>The {@code DreamService} lifecycle is as follows:</p>\n * <ol>\n *   <li>{@link #onAttachedToWindow}\n *     <p>Use this for initial setup, such as calling {@link #setContentView setContentView()}.</li>\n *   <li>{@link #onDreamingStarted}\n *     <p>Your dream has started, so you should begin animations or other behaviors here.</li>\n *   <li>{@link #onDreamingStopped}\n *     <p>Use this to stop the things you started in {@link #onDreamingStarted}.</li>\n *   <li>{@link #onDetachedFromWindow}\n *     <p>Use this to dismantle resources (for example, detach from handlers\n *        and listeners).</li>\n * </ol>\n *\n * <p>In addition, onCreate and onDestroy (from the Service interface) will also be called, but\n * initialization and teardown should be done by overriding the hooks above.</p>\n *\n * <p>To be available to the system, your {@code DreamService} should be declared in the\n * manifest as follows:</p>\n * <pre>\n * &lt;service\n *     android:name=\".MyDream\"\n *     android:exported=\"true\"\n *     android:icon=\"@drawable/my_icon\"\n *     android:label=\"@string/my_dream_label\" >\n *\n *     &lt;intent-filter>\n *         &lt;action android:name=\"android.service.dreams.DreamService\" />\n *         &lt;category android:name=\"android.intent.category.DEFAULT\" />\n *     &lt;/intent-filter>\n *\n *     &lt;!-- Point to additional information for this dream (optional) -->\n *     &lt;meta-data\n *         android:name=\"android.service.dream\"\n *         android:resource=\"@xml/my_dream\" />\n * &lt;/service>\n * </pre>\n *\n * <p>If specified with the {@code <meta-data>} element,\n * additional information for the dream is defined using the\n * {@link android.R.styleable#Dream &lt;dream&gt;} element in a separate XML file.\n * Currently, the only addtional\n * information you can provide is for a settings activity that allows the user to configure\n * the dream behavior. For example:</p>\n * <p class=\"code-caption\">res/xml/my_dream.xml</p>\n * <pre>\n * &lt;dream xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *     android:settingsActivity=\"com.example.app/.MyDreamSettingsActivity\" />\n * </pre>\n * <p>This makes a Settings button available alongside your dream's listing in the\n * system settings, which when pressed opens the specified activity.</p>\n *\n *\n * <p>To specify your dream layout, call {@link #setContentView}, typically during the\n * {@link #onAttachedToWindow} callback. For example:</p>\n * <pre>\n * public class MyDream extends DreamService {\n *\n *     &#64;Override\n *     public void onAttachedToWindow() {\n *         super.onAttachedToWindow();\n *\n *         // Exit dream upon user touch\n *         setInteractive(false);\n *         // Hide system UI\n *         setFullscreen(true);\n *         // Set the dream layout\n *         setContentView(R.layout.dream);\n *     }\n * }\n * </pre>\n *\n * <p>When targeting api level 21 and above, you must declare the service in your manifest file\n * with the {@link android.Manifest.permission#BIND_DREAM_SERVICE} permission. For example:</p>\n * <pre>\n * &lt;service\n *     android:name=\".MyDream\"\n *     android:exported=\"true\"\n *     android:icon=\"@drawable/my_icon\"\n *     android:label=\"@string/my_dream_label\"\n *     android:permission=\"android.permission.BIND_DREAM_SERVICE\">\n *   &lt;intent-filter>\n *     &lt;action android:name=”android.service.dreams.DreamService” />\n *     &lt;category android:name=”android.intent.category.DEFAULT” />\n *   &lt;/intent-filter>\n * &lt;/service>\n * </pre>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DREAM_SERVICE",
    "type" : "String",
    "comment" : "\n     * The name of the dream manager service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "DREAM_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a Dream publishes information about itself.\n     * This meta-data must reference an XML resource containing\n     * a <code>&lt;{@link android.R.styleable#Dream dream}&gt;</code>\n     * tag.\n     ",
    "links" : [ "android.R.styleable#Dream" ]
  }, {
    "name" : "mDreamManager",
    "type" : "IDreamManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDreamToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivity",
    "type" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInteractive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullscreen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScreenBright",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaking",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanDoze",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDozing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowless",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDozeScreenState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDozeScreenBrightness",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebug",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDreamServiceWrapper",
    "type" : "DreamServiceWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchAfterOnAttachedToWindow",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDebug(boolean dbg)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyShortcutEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public View onCreatePanelView(int featureId)",
    "returnType" : "View",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean onCreatePanelMenu(int featureId, Menu menu)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean onPreparePanel(int featureId, View view, Menu menu)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean onMenuOpened(int featureId, Menu menu)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean onMenuItemSelected(int featureId, MenuItem item)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowAttributesChanged(LayoutParams attrs)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onContentChanged()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onPanelClosed(int featureId, Menu menu)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSearchRequested(SearchEvent event)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSearchRequested()",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback)",
    "returnType" : "ActionMode",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type)",
    "returnType" : "ActionMode",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onActionModeStarted(ActionMode mode)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void onActionModeFinished(ActionMode mode)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public WindowManager getWindowManager()",
    "returnType" : "WindowManager",
    "comment" : "\n     * Retrieves the current {@link android.view.WindowManager} for the dream.\n     * Behaves similarly to {@link android.app.Activity#getWindowManager()}.\n     *\n     * @return The current window manager, or null if the dream is not started.\n     ",
    "links" : [ "android.view.WindowManager", "android.app.Activity#getWindowManager()" ]
  }, {
    "name" : "public Window getWindow()",
    "returnType" : "Window",
    "comment" : "\n     * Retrieves the current {@link android.view.Window} for the dream.\n     * Behaves similarly to {@link android.app.Activity#getWindow()}.\n     *\n     * @return The current window, or null if the dream is not started.\n     ",
    "links" : [ "android.app.Activity#getWindow()", "android.view.Window" ]
  }, {
    "name" : "public void setContentView(@LayoutRes int layoutResID)",
    "returnType" : "void",
    "comment" : "\n     * Inflates a layout resource and set it to be the content view for this Dream.\n     * Behaves similarly to {@link android.app.Activity#setContentView(int)}.\n     *\n     * <p>Note: Requires a window, do not call before {@link #onAttachedToWindow()}</p>\n     *\n     * @param layoutResID Resource ID to be inflated.\n     *\n     * @see #setContentView(android.view.View)\n     * @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)\n     ",
    "links" : [ "#onAttachedToWindow()", "android.app.Activity#setContentView(int)" ]
  }, {
    "name" : "public void setContentView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Sets a view to be the content view for this Dream.\n     * Behaves similarly to {@link android.app.Activity#setContentView(android.view.View)} in an activity,\n     * including using {@link ViewGroup.LayoutParams#MATCH_PARENT} as the layout height and width of the view.\n     *\n     * <p>Note: This requires a window, so you should usually call it during\n     * {@link #onAttachedToWindow()} and never earlier (you <strong>cannot</strong> call it\n     * during {@link #onCreate}).</p>\n     *\n     * @see #setContentView(int)\n     * @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)\n     ",
    "links" : [ "android.app.Activity#setContentView(android.view.View)", "ViewGroup.LayoutParams#MATCH_PARENT", "#onAttachedToWindow()", "#onCreate" ]
  }, {
    "name" : "public void setContentView(View view, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Sets a view to be the content view for this Dream.\n     * Behaves similarly to\n     * {@link android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)}\n     * in an activity.\n     *\n     * <p>Note: This requires a window, so you should usually call it during\n     * {@link #onAttachedToWindow()} and never earlier (you <strong>cannot</strong> call it\n     * during {@link #onCreate}).</p>\n     *\n     * @param view The desired content to display.\n     * @param params Layout parameters for the view.\n     *\n     * @see #setContentView(android.view.View)\n     * @see #setContentView(int)\n     ",
    "links" : [ "android.app.Activity#setContentView(android.view.View", "#onAttachedToWindow()", "#onCreate" ]
  }, {
    "name" : "public void addContentView(View view, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Adds a view to the Dream's window, leaving other content views in place.\n     *\n     * <p>Note: Requires a window, do not call before {@link #onAttachedToWindow()}</p>\n     *\n     * @param view The desired content to display.\n     * @param params Layout parameters for the view.\n     ",
    "links" : [ "#onAttachedToWindow()" ]
  }, {
    "name" : "public T findViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds a view that was identified by the id attribute from the XML that\n     * was processed in {@link #onCreate}.\n     *\n     * <p>Note: Requires a window, do not call before {@link #onAttachedToWindow()}</p>\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return The view if found or null otherwise.\n     * @see View#findViewById(int)\n     * @see DreamService#requireViewById(int)\n     ",
    "links" : [ "#onAttachedToWindow()", "#onCreate" ]
  }, {
    "name" : "public final T requireViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds a view that was identified by the id attribute from the XML that was processed in\n     * {@link #onCreate}, or throws an IllegalArgumentException if the ID is invalid or there is no\n     * matching view in the hierarchy.\n     *\n     * <p>Note: Requires a window, do not call before {@link #onAttachedToWindow()}</p>\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID\n     * @see View#requireViewById(int)\n     * @see DreamService#findViewById(int)\n     ",
    "links" : [ "#onAttachedToWindow()", "#onCreate" ]
  }, {
    "name" : "public void setInteractive(boolean interactive)",
    "returnType" : "void",
    "comment" : "\n     * Marks this dream as interactive to receive input events.\n     *\n     * <p>Non-interactive dreams (default) will dismiss on the first input event.</p>\n     *\n     * <p>Interactive dreams should call {@link #finish()} to dismiss themselves.</p>\n     *\n     * @param interactive True if this dream will handle input events.\n     ",
    "links" : [ "#finish()" ]
  }, {
    "name" : "public boolean isInteractive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this dream is interactive.  Defaults to false.\n     *\n     * @see #setInteractive(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFullscreen(boolean fullscreen)",
    "returnType" : "void",
    "comment" : "\n     * Controls {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}\n     * on the dream's window.\n     *\n     * @param fullscreen If true, the fullscreen flag will be set; else it\n     * will be cleared.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN" ]
  }, {
    "name" : "public boolean isFullscreen()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this dream is in fullscreen mode. Defaults to false.\n     *\n     * @see #setFullscreen(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScreenBright(boolean screenBright)",
    "returnType" : "void",
    "comment" : "\n     * Marks this dream as keeping the screen bright while dreaming.\n     *\n     * @param screenBright True to keep the screen bright while dreaming.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenBright()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this dream keeps the screen bright while dreaming.\n     * Defaults to false, allowing the screen to dim if necessary.\n     *\n     * @see #setScreenBright(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowless(boolean windowless)",
    "returnType" : "void",
    "comment" : "\n     * Marks this dream as windowless.  Only available to doze dreams.\n     *\n     * @hide\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWindowless()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this dream is windowless.  Only available to doze dreams.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canDoze()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this dream is allowed to doze.\n     * <p>\n     * The value returned by this method is only meaningful when the dream has started.\n     * </p>\n     *\n     * @return True if this dream can doze.\n     * @see #startDozing\n     * @hide For use by system UI components only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDozing()",
    "returnType" : "void",
    "comment" : "\n     * Starts dozing, entering a deep dreamy sleep.\n     * <p>\n     * Dozing enables the system to conserve power while the user is not actively interacting\n     * with the device.  While dozing, the display will remain on in a low-power state\n     * and will continue to show its previous contents but the application processor and\n     * other system components will be allowed to suspend when possible.\n     * </p><p>\n     * While the application processor is suspended, the dream may stop executing code\n     * for long periods of time.  Prior to being suspended, the dream may schedule periodic\n     * wake-ups to render new content by scheduling an alarm with the {@link AlarmManager}.\n     * The dream may also keep the CPU awake by acquiring a\n     * {@link android.os.PowerManager#PARTIAL_WAKE_LOCK partial wake lock} when necessary.\n     * Note that since the purpose of doze mode is to conserve power (especially when\n     * running on battery), the dream should not wake the CPU very often or keep it\n     * awake for very long.\n     * </p><p>\n     * It is a good idea to call this method some time after the dream's entry animation\n     * has completed and the dream is ready to doze.  It is important to completely\n     * finish all of the work needed before dozing since the application processor may\n     * be suspended at any moment once this method is called unless other wake locks\n     * are being held.\n     * </p><p>\n     * Call {@link #stopDozing} or {@link #finish} to stop dozing.\n     * </p>\n     *\n     * @see #stopDozing\n     * @hide For use by system UI components only.\n     ",
    "links" : [ "android.app.AlarmManager", "#finish", "#stopDozing", "android.os.PowerManager#PARTIAL_WAKE_LOCK" ]
  }, {
    "name" : "private void updateDoze()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopDozing()",
    "returnType" : "void",
    "comment" : "\n     * Stops dozing, returns to active dreaming.\n     * <p>\n     * This method reverses the effect of {@link #startDozing}.  From this moment onward,\n     * the application processor will be kept awake as long as the dream is running\n     * or until the dream starts dozing again.\n     * </p>\n     *\n     * @see #startDozing\n     * @hide For use by system UI components only.\n     ",
    "links" : [ "#startDozing" ]
  }, {
    "name" : "public boolean isDozing()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the dream will allow the system to enter a low-power state while\n     * it is running without actually turning off the screen.  Defaults to false,\n     * keeping the application processor awake while the dream is running.\n     *\n     * @return True if the dream is dozing.\n     *\n     * @see #setDozing(boolean)\n     * @hide For use by system UI components only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDozeScreenState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the screen state to use while dozing.\n     *\n     * @return The screen state to use while dozing, such as {@link Display#STATE_ON},\n     * {@link Display#STATE_DOZE}, {@link Display#STATE_DOZE_SUSPEND},\n     * {@link Display#STATE_ON_SUSPEND}, {@link Display#STATE_OFF}, or {@link Display#STATE_UNKNOWN}\n     * for the default behavior.\n     *\n     * @see #setDozeScreenState\n     * @hide For use by system UI components only.\n     ",
    "links" : [ "android.view.Display#STATE_DOZE", "android.view.Display#STATE_UNKNOWN", "android.view.Display#STATE_ON", "android.view.Display#STATE_OFF", "android.view.Display#STATE_ON_SUSPEND", "android.view.Display#STATE_DOZE_SUSPEND" ]
  }, {
    "name" : "public void setDozeScreenState(int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the screen state to use while dozing.\n     * <p>\n     * The value of this property determines the power state of the primary display\n     * once {@link #startDozing} has been called.  The default value is\n     * {@link Display#STATE_UNKNOWN} which lets the system decide.\n     * The dream may set a different state before starting to doze and may\n     * perform transitions between states while dozing to conserve power and\n     * achieve various effects.\n     * </p><p>\n     * Some devices will have dedicated hardware (\"Sidekick\") to animate\n     * the display content while the CPU sleeps. If the dream and the hardware support\n     * this, {@link Display#STATE_ON_SUSPEND} or {@link Display#STATE_DOZE_SUSPEND}\n     * will switch control to the Sidekick.\n     * </p><p>\n     * If not using Sidekick, it is recommended that the state be set to\n     * {@link Display#STATE_DOZE_SUSPEND} once the dream has completely\n     * finished drawing and before it releases its wakelock\n     * to allow the display hardware to be fully suspended.  While suspended,\n     * the display will preserve its on-screen contents.\n     * </p><p>\n     * If the doze suspend state is used, the dream must make sure to set the mode back\n     * to {@link Display#STATE_DOZE} or {@link Display#STATE_ON} before drawing again\n     * since the display updates may be ignored and not seen by the user otherwise.\n     * </p><p>\n     * The set of available display power states and their behavior while dozing is\n     * hardware dependent and may vary across devices.  The dream may therefore\n     * need to be modified or configured to correctly support the hardware.\n     * </p>\n     *\n     * @param state The screen state to use while dozing, such as {@link Display#STATE_ON},\n     * {@link Display#STATE_DOZE}, {@link Display#STATE_DOZE_SUSPEND},\n     * {@link Display#STATE_ON_SUSPEND}, {@link Display#STATE_OFF}, or {@link Display#STATE_UNKNOWN}\n     * for the default behavior.\n     *\n     * @hide For use by system UI components only.\n     ",
    "links" : [ "#startDozing", "android.view.Display#STATE_DOZE", "android.view.Display#STATE_UNKNOWN", "android.view.Display#STATE_ON", "android.view.Display#STATE_OFF", "android.view.Display#STATE_ON_SUSPEND", "android.view.Display#STATE_DOZE_SUSPEND" ]
  }, {
    "name" : "public int getDozeScreenBrightness()",
    "returnType" : "int",
    "comment" : "\n     * Gets the screen brightness to use while dozing.\n     *\n     * @return The screen brightness while dozing as a value between\n     * {@link PowerManager#BRIGHTNESS_OFF} (0) and {@link PowerManager#BRIGHTNESS_ON} (255),\n     * or {@link PowerManager#BRIGHTNESS_DEFAULT} (-1) to ask the system to apply\n     * its default policy based on the screen state.\n     *\n     * @see #setDozeScreenBrightness\n     * @hide For use by system UI components only.\n     ",
    "links" : [ "android.os.PowerManager#BRIGHTNESS_ON", "android.os.PowerManager#BRIGHTNESS_DEFAULT", "android.os.PowerManager#BRIGHTNESS_OFF" ]
  }, {
    "name" : "public void setDozeScreenBrightness(int brightness)",
    "returnType" : "void",
    "comment" : "\n     * Sets the screen brightness to use while dozing.\n     * <p>\n     * The value of this property determines the power state of the primary display\n     * once {@link #startDozing} has been called.  The default value is\n     * {@link PowerManager#BRIGHTNESS_DEFAULT} which lets the system decide.\n     * The dream may set a different brightness before starting to doze and may adjust\n     * the brightness while dozing to conserve power and achieve various effects.\n     * </p><p>\n     * Note that dream may specify any brightness in the full 0-255 range, including\n     * values that are less than the minimum value for manual screen brightness\n     * adjustments by the user.  In particular, the value may be set to 0 which may\n     * turn off the backlight entirely while still leaving the screen on although\n     * this behavior is device dependent and not guaranteed.\n     * </p><p>\n     * The available range of display brightness values and their behavior while dozing is\n     * hardware dependent and may vary across devices.  The dream may therefore\n     * need to be modified or configured to correctly support the hardware.\n     * </p>\n     *\n     * @param brightness The screen brightness while dozing as a value between\n     * {@link PowerManager#BRIGHTNESS_OFF} (0) and {@link PowerManager#BRIGHTNESS_ON} (255),\n     * or {@link PowerManager#BRIGHTNESS_DEFAULT} (-1) to ask the system to apply\n     * its default policy based on the screen state.\n     *\n     * @hide For use by system UI components only.\n     ",
    "links" : [ "#startDozing", "android.os.PowerManager#BRIGHTNESS_DEFAULT", "android.os.PowerManager#BRIGHTNESS_ON", "android.os.PowerManager#BRIGHTNESS_OFF" ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "\n     * Called when this Dream is constructed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDreamingStarted()",
    "returnType" : "void",
    "comment" : "\n     * Called when the dream's window has been created and is visible and animation may now begin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDreamingStopped()",
    "returnType" : "void",
    "comment" : "\n     * Called when this Dream is stopped, either by external request or by calling finish(),\n     * before the window has been removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWakeUp()",
    "returnType" : "void",
    "comment" : "\n     * Called when the dream is being asked to stop itself and wake.\n     * <p>\n     * The default implementation simply calls {@link #finish} which ends the dream\n     * immediately.  Subclasses may override this function to perform a smooth exit\n     * transition then call {@link #finish} afterwards.\n     * </p><p>\n     * Note that the dream will only be given a short period of time (currently about\n     * five seconds) to wake up.  If the dream does not finish itself in a timely manner\n     * then the system will forcibly finish it once the time allowance is up.\n     * </p>\n     ",
    "links" : [ "#finish" ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public final void finish()",
    "returnType" : "void",
    "comment" : "\n     * Stops the dream and detaches from the window.\n     * <p>\n     * When the dream ends, the system will be allowed to go to sleep fully unless there\n     * is a reason for it to be awake such as recent user activity or wake locks being held.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void wakeUp()",
    "returnType" : "void",
    "comment" : "\n     * Wakes the dream up gently.\n     * <p>\n     * Calls {@link #onWakeUp} to give the dream a chance to perform an exit transition.\n     * When the transition is over, the dream should call {@link #finish}.\n     * </p>\n     ",
    "links" : [ "#finish", "#onWakeUp" ]
  }, {
    "name" : "private void wakeUp(boolean fromSystem)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "private final void detach()",
    "returnType" : "void",
    "comment" : "\n     * Called by DreamController.stopDream() when the Dream is about to be unbound and destroyed.\n     *\n     * Must run on mHandler.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void attach(IBinder dreamToken, boolean canDoze, IRemoteCallback started)",
    "returnType" : "void",
    "comment" : "\n     * Called when the Dream is ready to be shown.\n     *\n     * Must run on mHandler.\n     *\n     * @param dreamToken Token for this dream service.\n     * @param started A callback that will be invoked once onDreamingStarted has completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onWindowCreated(Window w)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getWindowFlagValue(int flag, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyWindowFlags(int flags, int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int applyFlags(int oldFlags, int flags, int mask)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dump(final FileDescriptor fd, PrintWriter pw, final String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dumpOnHandler(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static int clampAbsoluteBrightness(int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DREAM_SERVICE", "SERVICE_INTERFACE", "DREAM_META_DATA", "mDreamManager", "mHandler", "mDreamToken", "mWindow", "mActivity", "mInteractive", "mFullscreen", "mScreenBright", "mStarted", "mWaking", "mFinished", "mCanDoze", "mDozing", "mWindowless", "mDozeScreenState", "mDozeScreenBrightness", "mDebug", "mDreamServiceWrapper", "mDispatchAfterOnAttachedToWindow" ],
  "methodNames" : [ "public void setDebug(boolean dbg)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean dispatchKeyShortcutEvent(KeyEvent event)", "public boolean dispatchTouchEvent(MotionEvent event)", "public boolean dispatchTrackballEvent(MotionEvent event)", "public boolean dispatchGenericMotionEvent(MotionEvent event)", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "public View onCreatePanelView(int featureId)", "public boolean onCreatePanelMenu(int featureId, Menu menu)", "public boolean onPreparePanel(int featureId, View view, Menu menu)", "public boolean onMenuOpened(int featureId, Menu menu)", "public boolean onMenuItemSelected(int featureId, MenuItem item)", "public void onWindowAttributesChanged(LayoutParams attrs)", "public void onContentChanged()", "public void onWindowFocusChanged(boolean hasFocus)", "public void onAttachedToWindow()", "public void onDetachedFromWindow()", "public void onPanelClosed(int featureId, Menu menu)", "public boolean onSearchRequested(SearchEvent event)", "public boolean onSearchRequested()", "public ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback)", "public ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type)", "public void onActionModeStarted(ActionMode mode)", "public void onActionModeFinished(ActionMode mode)", "public WindowManager getWindowManager()", "public Window getWindow()", "public void setContentView(@LayoutRes int layoutResID)", "public void setContentView(View view)", "public void setContentView(View view, ViewGroup.LayoutParams params)", "public void addContentView(View view, ViewGroup.LayoutParams params)", "public T findViewById(@IdRes int id)", "public final T requireViewById(@IdRes int id)", "public void setInteractive(boolean interactive)", "public boolean isInteractive()", "public void setFullscreen(boolean fullscreen)", "public boolean isFullscreen()", "public void setScreenBright(boolean screenBright)", "public boolean isScreenBright()", "public void setWindowless(boolean windowless)", "public boolean isWindowless()", "public boolean canDoze()", "public void startDozing()", "private void updateDoze()", "public void stopDozing()", "public boolean isDozing()", "public int getDozeScreenState()", "public void setDozeScreenState(int state)", "public int getDozeScreenBrightness()", "public void setDozeScreenBrightness(int brightness)", "public void onCreate()", "public void onDreamingStarted()", "public void onDreamingStopped()", "public void onWakeUp()", "public final IBinder onBind(Intent intent)", "public final void finish()", "public final void wakeUp()", "private void wakeUp(boolean fromSystem)", "public void onDestroy()", "private final void detach()", "private void attach(IBinder dreamToken, boolean canDoze, IRemoteCallback started)", "private void onWindowCreated(Window w)", "private boolean getWindowFlagValue(int flag, boolean defaultValue)", "private void applyWindowFlags(int flags, int mask)", "private int applyFlags(int oldFlags, int flags, int mask)", "protected void dump(final FileDescriptor fd, PrintWriter pw, final String[] args)", "protected void dumpOnHandler(FileDescriptor fd, PrintWriter pw, String[] args)", "private static int clampAbsoluteBrightness(int value)" ]
}