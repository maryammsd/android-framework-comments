{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/CursorAdapter.java",
  "packageName" : "android.widget",
  "className" : "CursorAdapter",
  "comment" : "\n * Adapter that exposes data from a {@link android.database.Cursor Cursor} to a\n * {@link android.widget.ListView ListView} widget.\n * <p>\n * The Cursor must include a column named \"_id\" or this class will not work.\n * Additionally, using {@link android.database.MergeCursor} with this class will\n * not work if the merged Cursors have overlapping values in their \"_id\"\n * columns.\n ",
  "links" : [ "android.database.MergeCursor", "android.widget.ListView", "android.database.Cursor" ],
  "variables" : [ {
    "name" : "mDataValid",
    "type" : "boolean",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutoRequery",
    "type" : "boolean",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mCursor",
    "type" : "Cursor",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mDropDownContext",
    "type" : "Context",
    "comment" : "\n     * Context used for {@link #getDropDownView(int, View, ViewGroup)}.\n     * {@hide}\n     ",
    "links" : [ "#getDropDownView(int" ]
  }, {
    "name" : "mRowIDColumn",
    "type" : "int",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mChangeObserver",
    "type" : "ChangeObserver",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mDataSetObserver",
    "type" : "DataSetObserver",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mCursorFilter",
    "type" : "CursorFilter",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mFilterQueryProvider",
    "type" : "FilterQueryProvider",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_AUTO_REQUERY",
    "type" : "int",
    "comment" : "\n     * If set the adapter will call requery() on the cursor whenever a content change\n     * notification is delivered. Implies {@link #FLAG_REGISTER_CONTENT_OBSERVER}.\n     *\n     * @deprecated This option is discouraged, as it results in Cursor queries\n     * being performed on the application's UI thread and thus can cause poor\n     * responsiveness or even Application Not Responding errors.  As an alternative,\n     * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.\n     ",
    "links" : [ "#FLAG_REGISTER_CONTENT_OBSERVER", "android.app.LoaderManager", "android.content.CursorLoader" ]
  }, {
    "name" : "FLAG_REGISTER_CONTENT_OBSERVER",
    "type" : "int",
    "comment" : "\n     * If set the adapter will register a content observer on the cursor and will call\n     * {@link #onContentChanged()} when a notification comes in.  Be careful when\n     * using this flag: you will need to unset the current Cursor from the adapter\n     * to avoid leaks due to its registered observers.  This flag is not needed\n     * when using a CursorAdapter with a\n     * {@link android.content.CursorLoader}.\n     ",
    "links" : [ "#onContentChanged()", "android.content.CursorLoader" ]
  } ],
  "methods" : [ {
    "name" : "protected void init(Context context, Cursor c, boolean autoRequery)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Don't use this, use the normal constructor.  This will\n     * be removed in the future.\n     ",
    "links" : [ ]
  }, {
    "name" : " void init(Context context, Cursor c, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownViewTheme(Resources.Theme theme)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link Resources.Theme} against which drop-down views are\n     * inflated.\n     * <p>\n     * By default, drop-down views are inflated against the theme of the\n     * {@link Context} passed to the adapter's constructor.\n     *\n     * @param theme the theme against which to inflate drop-down views or\n     *              {@code null} to use the theme from the adapter's context\n     * @see #newDropDownView(Context, Cursor, ViewGroup)\n     ",
    "links" : [ "android.content.Context", "Resources.Theme" ]
  }, {
    "name" : "public Resources.Theme getDropDownViewTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor getCursor()",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns the cursor.\n     * @return the cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "\n     * @see android.widget.ListAdapter#getCount()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getItem(int position)",
    "returnType" : "Object",
    "comment" : "\n     * @see android.widget.ListAdapter#getItem(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getItemId(int position)",
    "returnType" : "long",
    "comment" : "\n     * @see android.widget.ListAdapter#getItemId(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasStableIds()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * @see android.widget.ListAdapter#getView(int, View, ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getDropDownView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract View newView(Context context, Cursor cursor, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Makes a new view to hold the data pointed to by cursor.\n     * @param context Interface to application's global information\n     * @param cursor The cursor from which to get the data. The cursor is already\n     * moved to the correct position.\n     * @param parent The parent to which the new view is attached to\n     * @return the newly created view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View newDropDownView(Context context, Cursor cursor, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Makes a new drop down view to hold the data pointed to by cursor.\n     * @param context Interface to application's global information\n     * @param cursor The cursor from which to get the data. The cursor is already\n     * moved to the correct position.\n     * @param parent The parent to which the new view is attached to\n     * @return the newly created view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void bindView(View view, Context context, Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Bind an existing view to the data pointed to by cursor\n     * @param view Existing view, returned earlier by newView\n     * @param context Interface to application's global information\n     * @param cursor The cursor from which to get the data. The cursor is already\n     * moved to the correct position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void changeCursor(Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Change the underlying cursor to a new cursor. If there is an existing cursor it will be\n     * closed.\n     * \n     * @param cursor The new cursor to be used\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor swapCursor(Cursor newCursor)",
    "returnType" : "Cursor",
    "comment" : "\n     * Swap in a new Cursor, returning the old Cursor.  Unlike\n     * {@link #changeCursor(Cursor)}, the returned old Cursor is <em>not</em>\n     * closed.\n     *\n     * @param newCursor The new cursor to be used.\n     * @return Returns the previously set Cursor, or null if there was not one.\n     * If the given new Cursor is the same instance is the previously set\n     * Cursor, null is also returned.\n     ",
    "links" : [ "#changeCursor(Cursor)" ]
  }, {
    "name" : "public CharSequence convertToString(Cursor cursor)",
    "returnType" : "CharSequence",
    "comment" : "\n     * <p>Converts the cursor into a CharSequence. Subclasses should override this\n     * method to convert their results. The default implementation returns an\n     * empty String for null values or the default String representation of\n     * the value.</p>\n     *\n     * @param cursor the cursor to convert to a CharSequence\n     * @return a CharSequence representing the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor runQueryOnBackgroundThread(CharSequence constraint)",
    "returnType" : "Cursor",
    "comment" : "\n     * Runs a query with the specified constraint. This query is requested\n     * by the filter attached to this adapter.\n     *\n     * The query is provided by a\n     * {@link android.widget.FilterQueryProvider}.\n     * If no provider is specified, the current cursor is not filtered and returned.\n     *\n     * After this method returns the resulting cursor is passed to {@link #changeCursor(Cursor)}\n     * and the previous cursor is closed.\n     *\n     * This method is always executed on a background thread, not on the\n     * application's main thread (or UI thread.)\n     * \n     * Contract: when constraint is null or empty, the original results,\n     * prior to any filtering, must be returned.\n     *\n     * @param constraint the constraint with which the query must be filtered\n     *\n     * @return a Cursor representing the results of the new query\n     *\n     * @see #getFilter()\n     * @see #getFilterQueryProvider()\n     * @see #setFilterQueryProvider(android.widget.FilterQueryProvider)\n     ",
    "links" : [ "android.widget.FilterQueryProvider", "#changeCursor(Cursor)" ]
  }, {
    "name" : "public Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FilterQueryProvider getFilterQueryProvider()",
    "returnType" : "FilterQueryProvider",
    "comment" : "\n     * Returns the query filter provider used for filtering. When the\n     * provider is null, no filtering occurs.\n     *\n     * @return the current filter query provider or null if it does not exist\n     *\n     * @see #setFilterQueryProvider(android.widget.FilterQueryProvider)\n     * @see #runQueryOnBackgroundThread(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilterQueryProvider(FilterQueryProvider filterQueryProvider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the query filter provider used to filter the current Cursor.\n     * The provider's\n     * {@link android.widget.FilterQueryProvider#runQuery(CharSequence)}\n     * method is invoked when filtering is requested by a client of\n     * this adapter.\n     *\n     * @param filterQueryProvider the filter query provider or null to remove it\n     *\n     * @see #getFilterQueryProvider()\n     * @see #runQueryOnBackgroundThread(CharSequence)\n     ",
    "links" : [ "android.widget.FilterQueryProvider#runQuery(CharSequence)" ]
  }, {
    "name" : "protected void onContentChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link ContentObserver} on the cursor receives a change notification.\n     * The default implementation provides the auto-requery logic, but may be overridden by\n     * sub classes.\n     * \n     * @see ContentObserver#onChange(boolean)\n     ",
    "links" : [ "android.database.ContentObserver" ]
  } ],
  "methodNames" : [ "protected void init(Context context, Cursor c, boolean autoRequery)", " void init(Context context, Cursor c, int flags)", "public void setDropDownViewTheme(Resources.Theme theme)", "public Resources.Theme getDropDownViewTheme()", "public Cursor getCursor()", "public int getCount()", "public Object getItem(int position)", "public long getItemId(int position)", "public boolean hasStableIds()", "public View getView(int position, View convertView, ViewGroup parent)", "public View getDropDownView(int position, View convertView, ViewGroup parent)", "public abstract View newView(Context context, Cursor cursor, ViewGroup parent)", "public View newDropDownView(Context context, Cursor cursor, ViewGroup parent)", "public abstract void bindView(View view, Context context, Cursor cursor)", "public void changeCursor(Cursor cursor)", "public Cursor swapCursor(Cursor newCursor)", "public CharSequence convertToString(Cursor cursor)", "public Cursor runQueryOnBackgroundThread(CharSequence constraint)", "public Filter getFilter()", "public FilterQueryProvider getFilterQueryProvider()", "public void setFilterQueryProvider(FilterQueryProvider filterQueryProvider)", "protected void onContentChanged()" ],
  "variableNames" : [ "mDataValid", "mAutoRequery", "mCursor", "mContext", "mDropDownContext", "mRowIDColumn", "mChangeObserver", "mDataSetObserver", "mCursorFilter", "mFilterQueryProvider", "FLAG_AUTO_REQUERY", "FLAG_REGISTER_CONTENT_OBSERVER" ]
}