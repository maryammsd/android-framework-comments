{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/StateListDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "StateListDrawable",
  "comment" : "\n * Lets you assign a number of graphic images to a single Drawable and swap out the visible item by a string\n * ID value.\n * <p/>\n * <p>It can be defined in an XML file with the <code>&lt;selector></code> element.\n * Each state Drawable is defined in a nested <code>&lt;item></code> element. For more\n * information, see the guide to <a\n * href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.</p>\n *\n * @attr ref android.R.styleable#StateListDrawable_visible\n * @attr ref android.R.styleable#StateListDrawable_variablePadding\n * @attr ref android.R.styleable#StateListDrawable_constantSize\n * @attr ref android.R.styleable#DrawableStates_state_focused\n * @attr ref android.R.styleable#DrawableStates_state_window_focused\n * @attr ref android.R.styleable#DrawableStates_state_enabled\n * @attr ref android.R.styleable#DrawableStates_state_checkable\n * @attr ref android.R.styleable#DrawableStates_state_checked\n * @attr ref android.R.styleable#DrawableStates_state_selected\n * @attr ref android.R.styleable#DrawableStates_state_activated\n * @attr ref android.R.styleable#DrawableStates_state_active\n * @attr ref android.R.styleable#DrawableStates_state_single\n * @attr ref android.R.styleable#DrawableStates_state_first\n * @attr ref android.R.styleable#DrawableStates_state_middle\n * @attr ref android.R.styleable#DrawableStates_state_last\n * @attr ref android.R.styleable#DrawableStates_state_pressed\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateListState",
    "type" : "StateListState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addState(int[] stateSet, Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Add a new image/string ID to the set of images.\n     *\n     * @param stateSet An array of resource Ids to associate with the image.\n     *                 Switch to this image by calling setState().\n     * @param drawable The image to show. Note this must be a unique Drawable that is not shared\n     *                 between any other View or Drawable otherwise the results are\n     *                 undefined and can lead to unexpected rendering behavior\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * Updates the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflates child elements from XML.\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] extractStateSet(AttributeSet attrs)",
    "returnType" : "int[]",
    "comment" : "\n     * Extracts state_ attributes from an attribute set.\n     *\n     * @param attrs The attribute set.\n     * @return An array of state_ attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : " StateListState getStateListState()",
    "returnType" : "StateListState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStateCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of states contained in this drawable.\n     *\n     * @return The number of states contained in this drawable.\n     * @see #getStateSet(int)\n     * @see #getStateDrawable(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getStateSet(int index)",
    "returnType" : "int[]",
    "comment" : "\n     * Gets the state set at an index.\n     *\n     * @param index The index of the state set.\n     * @return The state set at the index.\n     * @see #getStateCount()\n     * @see #getStateDrawable(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getStateDrawable(int index)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the drawable at an index.\n     *\n     * @param index The index of the drawable.\n     * @return The drawable at the index.\n     * @see #getStateCount()\n     * @see #getStateSet(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int findStateDrawableIndex(@NonNull int[] stateSet)",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of the drawable with the provided state set.\n     *\n     * @param stateSet the state set to look up\n     * @return the index of the provided state set, or -1 if not found\n     * @see #getStateDrawable(int)\n     * @see #getStateSet(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StateListState cloneConstantState()",
    "returnType" : "StateListState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(Theme theme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setConstantState(@NonNull DrawableContainerState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addState(int[] stateSet, Drawable drawable)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "protected boolean onStateChange(int[] stateSet)", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void updateStateFromTypedArray(TypedArray a)", "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", " int[] extractStateSet(AttributeSet attrs)", " StateListState getStateListState()", "public int getStateCount()", "public int[] getStateSet(int index)", "public Drawable getStateDrawable(int index)", "public int findStateDrawableIndex(@NonNull int[] stateSet)", "public Drawable mutate()", " StateListState cloneConstantState()", "public void clearMutated()", "public void applyTheme(Theme theme)", "protected void setConstantState(@NonNull DrawableContainerState state)" ],
  "variableNames" : [ "TAG", "DEBUG", "mStateListState", "mMutated" ]
}