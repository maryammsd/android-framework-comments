{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/IkeSession.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "IkeSession",
  "comment" : "\n * This class represents an IKE Session management object that allows for keying and management of\n * {@link android.net.IpSecTransform}s.\n *\n * <p>An IKE/Child Session represents an IKE/Child SA as well as its rekeyed successors. A Child\n * Session is bounded by the lifecycle of the IKE Session under which it is set up. Closing an IKE\n * Session implicitly closes any remaining Child Sessions under it.\n *\n * <p>An IKE procedure is one or multiple IKE message exchanges that are used to create, delete or\n * rekey an IKE Session or Child Session.\n *\n * <p>This class provides methods for initiating IKE procedures, such as the Creation and Deletion\n * of a Child Session, or the Deletion of the IKE session. All procedures (except for IKE deletion)\n * will be initiated sequentially after IKE Session is set up.\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc7296\">RFC 7296, Internet Key Exchange Protocol\n *     Version 2 (IKEv2)</a>\n ",
  "links" : [ "android.net.IpSecTransform" ],
  "variables" : [ {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_ATTRIBUTION_TAG_IWLAN",
    "type" : "String",
    "comment" : "\n     * Attribution tag for IWLAN callers\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_ATTRIBUTION_TAG_VCN",
    "type" : "String",
    "comment" : "\n     * Attribution tag for VCN callers\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_ATTRIBUTION_TAG_VPN",
    "type" : "String",
    "comment" : "\n     * Attribution tag for VPN callers\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mIkeSessionStateMachine",
    "type" : "IkeSessionStateMachine",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void checkTunnelFeatureOrThrow(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void openChildSession(@NonNull ChildSessionParams childSessionParams, @NonNull ChildSessionCallback childSessionCallback)",
    "returnType" : "void",
    "comment" : " for security reasons.",
    "links" : [ ]
  }, {
    "name" : "public void closeChildSession(@NonNull ChildSessionCallback childSessionCallback)",
    "returnType" : "void",
    "comment" : " for security reasons.",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the IKE session gracefully.\n     *\n     * <p>Implements {@link AutoCloseable#close()}\n     *\n     * <p>Upon closure, {@link IkeSessionCallback#onClosed()} or {@link\n     * IkeSessionCallback#onClosedWithException(IkeException)} will be fired.\n     *\n     * <p>Closing an IKE Session implicitly closes any remaining Child Sessions negotiated under it.\n     * Users SHOULD stop all outbound traffic that uses these Child Sessions ({@link\n     * android.net.IpSecTransform} pairs) before calling this method. Otherwise IPsec packets will\n     * be dropped due to the lack of a valid {@link android.net.IpSecTransform}.\n     *\n     * <p>Closure of an IKE session will take priority over, and cancel other procedures waiting in\n     * the queue (but will wait for ongoing locally initiated procedures to complete). After sending\n     * the Delete request, the IKE library will wait until a Delete response is received or\n     * retransmission timeout occurs.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSessionCallback#onClosed()", "android.net.ipsec.ike.IkeSessionCallback#onClosedWithException(IkeException)", "#close()", "android.net.IpSecTransform" ]
  }, {
    "name" : "public void kill()",
    "returnType" : "void",
    "comment" : "\n     * Terminate (forcibly close) the IKE session.\n     *\n     * <p>Upon closing, {@link IkeSessionCallback#onClosed()} will be fired.\n     *\n     * <p>Closing an IKE Session implicitly closes any remaining Child Sessions negotiated under it.\n     * Users SHOULD stop all outbound traffic that uses these Child Sessions ({@link\n     * android.net.IpSecTransform} pairs) before calling this method. Otherwise IPsec packets will\n     * be dropped due to the lack of a valid {@link android.net.IpSecTransform}.\n     *\n     * <p>Forcible closure of an IKE session will take priority over, and cancel other procedures\n     * waiting in the queue. It will also interrupt any ongoing locally initiated procedure.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSessionCallback#onClosed()", "android.net.IpSecTransform" ]
  }, {
    "name" : "public void setNetwork(@NonNull Network network)",
    "returnType" : "void",
    "comment" : "\n     * Update the IkeSession's underlying Network to use the specified Network.\n     *\n     * @see #setNetwork(Network, int, int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNetwork(@NonNull Network network, @IkeSessionParams.EspIpVersion int ipVersion, @IkeSessionParams.EspEncapType int encapType, @IntRange(from = IKE_NATT_KEEPALIVE_DELAY_SEC_MIN, to = IKE_NATT_KEEPALIVE_DELAY_SEC_MAX) int keepaliveDelaySeconds)",
    "returnType" : "void",
    "comment" : "\n     * Update the IkeSession's underlying Network, protocol preference and keepalive delay.\n     *\n     * <p>Updating the IkeSession's Network also updates the Network for any Child Sessions created\n     * with this IkeSession. To perform the update, callers must implement:\n     *\n     * <ul>\n     *   <li>{@link IkeSessionCallback#onIkeSessionConnectionInfoChanged(IkeSessionConnectionInfo)}:\n     *       This call will be triggered once the IKE Session has been updated. The implementation\n     *       MUST migrate all IpSecTunnelInterface instances associated with this IkeSession via\n     *       {@link android.net.IpSecManager.IpSecTunnelInterface#setUnderlyingNetwork(Network)}\n     *   <li>{@link ChildSessionCallback#onIpSecTransformsMigrated(android.net.IpSecTransform,\n     *       android.net.IpSecTransform)}: This call will be triggered once a Child Session has been\n     *       updated. The implementation MUST re-apply the migrated transforms to the {@link\n     *       android.net.IpSecManager.IpSecTunnelInterface} associated with this\n     *       ChildSessionCallback, via {@link android.net.IpSecManager#applyTunnelModeTransform(\n     *       android.net.IpSecManager.IpSecTunnelInterface, int, android.net.IpSecTransform)}.\n     * </ul>\n     *\n     * <p>In order for Network migration to be possible, the following must be true:\n     *\n     * <ul>\n     *   <li>the {@link IkeSessionParams} for this IkeSession must be configured with {@link\n     *       IkeSessionParams#IKE_OPTION_MOBIKE} (set via {@link\n     *       IkeSessionParams.Builder#addIkeOption(int)}), and\n     *   <li>the IkeSession must have been started with the Network specified via {@link\n     *       IkeSessionParams.Builder#setNetwork(Network)}.\n     * </ul>\n     *\n     * <p>As MOBIKE support is negotiated, callers are advised to check for MOBIKE support in {@link\n     * IkeSessionConfiguration} before calling this method to update the network. Failure to do so\n     * may cause this call to be ignored.\n     *\n     * @see <a href=\"https://tools.ietf.org/html/rfc4555\">RFC 4555, IKEv2 Mobility and Multihoming\n     *     Protocol (MOBIKE)</a>\n     * @param network the Network to use for this IkeSession\n     * @param ipVersion the IP version to use for ESP packets\n     * @param encapType the encapsulation type to use for ESP packets\n     * @param keepaliveDelaySeconds the keepalive delay in seconds, or NATT_KEEPALIVE_INTERVAL_AUTO\n     *                              to choose the value automatically based on the network.\n     * @throws IllegalStateException if {@link IkeSessionParams#IKE_OPTION_MOBIKE} is not configured\n     *     in IkeSessionParams, or if the Network was not specified in IkeSessionParams.\n     * @throws UnsupportedOperationException if the provided option is not supported.\n     * @see IkeSessionParams#getNattKeepAliveDelaySeconds()\n     * @hide\n     ",
    "links" : [ "android.net.IpSecManager.IpSecTunnelInterface", "android.net.IpSecManager.IpSecTunnelInterface#setUnderlyingNetwork(Network)", "android.net.ipsec.ike.IkeSessionCallback#onIkeSessionConnectionInfoChanged(IkeSessionConnectionInfo)", "android.net.IpSecManager#applyTunnelModeTransform(", "android.net.ipsec.ike.ChildSessionCallback#onIpSecTransformsMigrated(android.net.IpSecTransform", "IkeSessionParams.Builder#addIkeOption(int)", "IkeSessionParams.Builder#setNetwork(Network)", "android.net.ipsec.ike.IkeSessionParams#IKE_OPTION_MOBIKE", "android.net.ipsec.ike.IkeSessionParams", "android.net.ipsec.ike.IkeSessionConfiguration" ]
  }, {
    "name" : "public void setUnderpinnedNetwork(@NonNull Network underpinnedNetwork)",
    "returnType" : "void",
    "comment" : "\n     * Inform the session that it is used to supply the passed network.\n     *\n     * This will be used by the session when it needs to perform actions that depend on what\n     * network this session is underpinning. In particular, this can be used to turn off\n     * keepalives when there are no connections open on the underpinned network, if the\n     * {@link IkeSessionParams#IKE_OPTION_AUTOMATIC_KEEPALIVE_ON_OFF} option is turned on.\n     *\n     * @param underpinnedNetwork the network underpinned by this session.\n     * @hide\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams#IKE_OPTION_AUTOMATIC_KEEPALIVE_ON_OFF" ]
  }, {
    "name" : "public void requestLivenessCheck()",
    "returnType" : "void",
    "comment" : "\n     * Request to check liveness of peer.\n     *\n     * <p>This method returns immediately and asynchronously,\n     *\n     * <p>The liveness check determines whether a peer is alive by executing a new on-demand DPD\n     * task or joining an existing running task depending on the situation.\n     *\n     * <ul>\n     *   <li>If there is no running task when a liveness check request is called, a new on-demand\n     *       DPD task is started. The on-demand DPD (Dead Peer Detection) is used for checking\n     *       liveness of peer in this case. This method adds an on-demand DPD request to the work\n     *       queue to check that the peer is alive. The on-demand DPD uses retransmit timeouts from\n     *       {@link IkeSessionParams#getLivenessRetransmissionTimeoutsMillis}.\n     *   <li>If any IKE message is already in progress when a client requests a liveness check, the\n     *       liveness check request is joined to an existing running task. And then the liveness\n     *       check runs in the background. When a running task receives a valid IKE message packet\n     *       from a peer, it can verify that the peer is alive in the background without triggering\n     *       an on-demand DPD task. A running task uses retransmit timeouts from {@link\n     *       IkeSessionParams#getRetransmissionTimeoutsMillis}.\n     * </ul>\n     *\n     * <p>The client is notified of the progress or result statuses of the liveness check via {@link\n     * IkeSessionCallback#onLivenessStatusChanged}. These statuses are notified after a liveness\n     * check request is started. By notifying {@link\n     * IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_SUCCESS} or {@link\n     * IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_FAILURE}, the liveness check request is\n     * done and no further status notification is made until the next {@link\n     * IkeSession#requestLivenessCheck}. The status notifications to the client are as follows.\n     *\n     * <ul>\n     *   <li>{@link IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_ON_DEMAND_STARTED}: This\n     *       status is called when liveness checking is started with a new on-demand DPD task.\n     *   <li>{@link IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_ON_DEMAND_ONGOING}: This\n     *       status is called when liveness checking is already running in an on-demand DPD task.\n     *   <li>{@link IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_BACKGROUND_STARTED}: This\n     *       status is called when liveness checking is started in the background and has joined an\n     *       existing running task.\n     *   <li>{@link IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_BACKGROUND_ONGOING}: This\n     *       status is called when liveness checking is already running in the background by joining\n     *       an existing running task.\n     *   <li>{@link IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_SUCCESS}: This status is\n     *       called when the peer's liveness is proven. Once this status is notified, the liveness\n     *       check request is done and no further status notification is made until the next {@link\n     *       IkeSession#requestLivenessCheck}.\n     *   <li>{@link IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_FAILURE}: This state is called\n     *       when the peer is determined as dead for a liveness check request. After this status is\n     *       notified, the IkeSession will be closed immediately by calling {@link\n     *       IkeSessionCallback#onClosedWithException} with {@link\n     *       android.net.ipsec.ike.exceptions.IkeTimeoutException} in the {@link\n     *       IkeException#getCause()}.\n     * </ul>\n     *\n     * <p>If a valid IKE message response is received from the peer, the IkeSession remains as\n     * connected and periodic DPD reschedules by {@link IkeSessionParams#getDpdDelaySeconds}\n     *\n     * <p>If the liveness check request couldn't get any a peer's valid response in retransmission\n     * timeout, The IkeSession will be closed. Session closing is also notified to {@link\n     * IkeSessionCallback#onClosedWithException} with {@link\n     * android.net.ipsec.ike.exceptions.IkeTimeoutException} cause.\n     *\n     * @hide\n     ",
    "links" : [ "IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_ON_DEMAND_ONGOING", "IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_BACKGROUND_STARTED", "android.net.ipsec.ike.IkeSessionCallback#onClosedWithException", "android.net.ipsec.ike.IkeSessionCallback#onLivenessStatusChanged", "IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_ON_DEMAND_STARTED", "IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_BACKGROUND_ONGOING", "android.net.ipsec.ike.IkeSessionParams#getRetransmissionTimeoutsMillis", "android.net.ipsec.ike.IkeSession#requestLivenessCheck", "IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_SUCCESS", "IkeSessionCallback.LivenessStatus#LIVENESS_STATUS_FAILURE", "android.net.ipsec.ike.IkeSessionParams#getLivenessRetransmissionTimeoutsMillis", "android.net.ipsec.ike.IkeSessionParams#getDpdDelaySeconds", "android.net.ipsec.ike.exceptions.IkeTimeoutException", "android.net.ipsec.ike.exceptions.IkeException#getCause()" ]
  }, {
    "name" : "public void dump(@NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the state of {@link IkeSession} information for the clients\n     *\n     * @param pw Print writer\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSession" ]
  } ],
  "methodNames" : [ "public void finalize()", "private void checkTunnelFeatureOrThrow(Context context)", "public void openChildSession(@NonNull ChildSessionParams childSessionParams, @NonNull ChildSessionCallback childSessionCallback)", "public void closeChildSession(@NonNull ChildSessionCallback childSessionCallback)", "public void close()", "public void kill()", "public void setNetwork(@NonNull Network network)", "public void setNetwork(@NonNull Network network, @IkeSessionParams.EspIpVersion int ipVersion, @IkeSessionParams.EspEncapType int encapType, @IntRange(from = IKE_NATT_KEEPALIVE_DELAY_SEC_MIN, to = IKE_NATT_KEEPALIVE_DELAY_SEC_MAX) int keepaliveDelaySeconds)", "public void setUnderpinnedNetwork(@NonNull Network underpinnedNetwork)", "public void requestLivenessCheck()", "public void dump(@NonNull PrintWriter pw)" ],
  "variableNames" : [ "mCloseGuard", "mContext", "CONTEXT_ATTRIBUTION_TAG_IWLAN", "CONTEXT_ATTRIBUTION_TAG_VCN", "CONTEXT_ATTRIBUTION_TAG_VPN", "mIkeSessionStateMachine" ]
}