{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/ls/LSSerializerFilter.java",
  "packageName" : "org.w3c.dom.ls",
  "className" : "LSSerializerFilter",
  "comment" : "\n *  <code>LSSerializerFilter</code>s provide applications the ability to\n * examine nodes as they are being serialized and decide what nodes should\n * be serialized or not. The <code>LSSerializerFilter</code> interface is\n * based on the <code>NodeFilter</code> interface defined in [<a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>DOM Level 2 Traversal and      Range</a>]\n * .\n * <p> <code>Document</code>, <code>DocumentType</code>,\n * <code>DocumentFragment</code>, <code>Notation</code>, <code>Entity</code>\n * , and children of <code>Attr</code> nodes are not passed to the filter.\n * The child nodes of an <code>EntityReference</code> node are only passed\n * to the filter if the <code>EntityReference</code> node is skipped by the\n * method <code>LSParserFilter.acceptNode()</code>.\n * <p> When serializing an <code>Element</code>, the element is passed to the\n * filter before any of its attributes are passed to the filter. Namespace\n * declaration attributes, and default attributes (except in the case when \"\n * discard-default-content\" is set to <code>false</code>), are never passed\n * to the filter.\n * <p> The result of any attempt to modify a node passed to a\n * <code>LSSerializerFilter</code> is implementation dependent.\n * <p> DOM applications must not raise exceptions in a filter. The effect of\n * throwing exceptions from a filter is DOM implementation dependent.\n * <p> For efficiency, a node passed to the filter may not be the same as the\n * one that is actually in the tree. And the actual node (node object\n * identity) may be reused during the process of filtering and serializing a\n * document.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load\nand Save Specification</a>.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n     *  Tells the <code>LSSerializer</code> what types of nodes to show to the\n     * filter. If a node is not shown to the filter using this attribute, it\n     * is automatically serialized. See <code>NodeFilter</code> for\n     * definition of the constants. The constants <code>SHOW_DOCUMENT</code>\n     * , <code>SHOW_DOCUMENT_TYPE</code>, <code>SHOW_DOCUMENT_FRAGMENT</code>\n     * , <code>SHOW_NOTATION</code>, and <code>SHOW_ENTITY</code> are\n     * meaningless here, such nodes will never be passed to a\n     * <code>LSSerializerFilter</code>.\n     * <br> Unlike [<a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>DOM Level 2 Traversal and      Range</a>]\n     * , the <code>SHOW_ATTRIBUTE</code> constant indicates that the\n     * <code>Attr</code> nodes are shown and passed to the filter.\n     * <br> The constants used here are defined in [<a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>DOM Level 2 Traversal and      Range</a>]\n     * .\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getWhatToShow()" ],
  "variableNames" : [ ]
}