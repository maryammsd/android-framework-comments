{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/XMLReaderFactory.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "XMLReaderFactory",
  "comment" : "\n * Factory for creating an XML reader.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class contains static methods for creating an XML reader\n * from an explicit class name, or based on runtime defaults:</p>\n *\n * <pre>\n * try {\n *   XMLReader myReader = XMLReaderFactory.createXMLReader();\n * } catch (SAXException e) {\n *   System.err.println(e.getMessage());\n * }\n * </pre>\n *\n * <p><strong>Note to Distributions bundled with parsers:</strong>\n * You should modify the implementation of the no-arguments\n * <em>createXMLReader</em> to handle cases where the external\n * configuration mechanisms aren't set up.  That method should do its\n * best to return a parser when one is in the class path, even when\n * nothing bound its class name to <code>org.xml.sax.driver</code> so\n * those configuration mechanisms would see it.</p>\n *\n * @since SAX 2.0\n * @author David Megginson, David Brownell\n * @version 2.0.1 (sax2r2)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "property",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static XMLReader createXMLReader() throws SAXException",
    "returnType" : "XMLReader",
    "comment" : "\n     * Attempt to create an XMLReader from system defaults.\n     * In environments which can support it, the name of the XMLReader\n     * class is determined by trying each these options in order, and\n     * using the first one which succeeds:</p> <ul>\n     *\n     * <li>If the system property <code>org.xml.sax.driver</code>\n     * has a value, that is used as an XMLReader class name. </li>\n     *\n     * <li>The JAR \"Services API\" is used to look for a class name\n     * in the <em>META-INF/services/org.xml.sax.driver</em> file in\n     * jarfiles available to the runtime.</li>\n     *\n     * <li> SAX parser distributions are strongly encouraged to provide\n     * a default XMLReader class name that will take effect only when\n     * previous options (on this list) are not successful.</li>\n     *\n     * <li>Finally, if {@link ParserFactory#makeParser()} can\n     * return a system default SAX1 parser, that parser is wrapped in\n     * a {@link ParserAdapter}.  (This is a migration aid for SAX1\n     * environments, where the <code>org.xml.sax.parser</code> system\n     * property will often be usable.) </li>\n     *\n     * </ul>\n     *\n     * <p> In environments such as small embedded systems, which can not\n     * support that flexibility, other mechanisms to determine the default\n     * may be used. </p>\n     *\n     * <p>Note that many Java environments allow system properties to be\n     * initialized on a command line.  This means that <em>in most cases</em>\n     * setting a good value for that property ensures that calls to this\n     * method will succeed, except when security policies intervene.\n     * This will also maximize application portability to older SAX\n     * environments, with less robust implementations of this method.\n     * </p>\n     *\n     * @return A new XMLReader.\n     * @exception org.xml.sax.SAXException If no default XMLReader class\n     *            can be identified and instantiated.\n     * @see #createXMLReader(java.lang.String)\n     ",
    "links" : [ "org.xml.sax.helpers.ParserAdapter", "org.xml.sax.helpers.ParserFactory#makeParser()" ]
  }, {
    "name" : "public static XMLReader createXMLReader(String className) throws SAXException",
    "returnType" : "XMLReader",
    "comment" : "\n     * Attempt to create an XML reader from a class name.\n     *\n     * <p>Given a class name, this method attempts to load\n     * and instantiate the class as an XML reader.</p>\n     *\n     * @param className the name of the class that should be instantiated.\n     *\n     * <p>Note that this method will not be usable in environments where\n     * the caller (perhaps an applet) is not permitted to load classes\n     * dynamically.</p>\n     *\n     * @return A new XML reader.\n     * @exception org.xml.sax.SAXException If the class cannot be\n     *            loaded, instantiated, and cast to XMLReader.\n     * @see #createXMLReader()\n     ",
    "links" : [ ]
  }, {
    "name" : "private static XMLReader loadClass(ClassLoader loader, String className) throws SAXException",
    "returnType" : "XMLReader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static XMLReader createXMLReader() throws SAXException", "public static XMLReader createXMLReader(String className) throws SAXException", "private static XMLReader loadClass(ClassLoader loader, String className) throws SAXException" ],
  "variableNames" : [ "property" ]
}