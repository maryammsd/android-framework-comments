{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/RemoteControlClient.java",
  "packageName" : "android.media",
  "className" : "MetadataEditor",
  "comment" : "\n     * Class used to modify metadata in a {@link RemoteControlClient} object.\n     * Use {@link RemoteControlClient#editMetadata(boolean)} to create an instance of an editor,\n     * on which you set the metadata for the RemoteControlClient instance. Once all the information\n     * has been set, use {@link #apply()} to make it the new metadata that should be displayed\n     * for the associated client. Once the metadata has been \"applied\", you cannot reuse this\n     * instance of the MetadataEditor.\n     *\n     * @deprecated Use {@link MediaMetadata} and {@link MediaSession} instead.\n     ",
  "links" : [ "android.media.session.MediaSession", "android.media.RemoteControlClient", "android.media.MediaMetadata", "#apply()", "android.media.RemoteControlClient#editMetadata(boolean)" ],
  "variables" : [ {
    "name" : "BITMAP_KEY_ARTWORK",
    "type" : "int",
    "comment" : "\n         * The metadata key for the content artwork / album art.\n         ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ARTWORK",
    "type" : "int",
    "comment" : "\n         * @hide\n         * TODO(jmtrivi) have lockscreen move to the new key name and remove\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public synchronized MetadataEditor putString(int key, String value) throws IllegalArgumentException",
    "returnType" : "MetadataEditor",
    "comment" : "\n         * Adds textual information to be displayed.\n         * Note that none of the information added after {@link #apply()} has been called,\n         * will be displayed.\n         * @param key The identifier of a the metadata field to set. Valid values are\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DATE},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_GENRE},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_WRITER}.\n         * @param value The text for the given key, or {@code null} to signify there is no valid\n         *      information for the field.\n         * @return Returns a reference to the same MetadataEditor object, so you can chain put\n         *      calls together.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST", "android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION", "android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR", "android.media.MediaMetadataRetriever#METADATA_KEY_TITLE", "android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM", "android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER", "android.media.MediaMetadataRetriever#METADATA_KEY_DATE", "android.media.MediaMetadataRetriever#METADATA_KEY_GENRE", "android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST", "#apply()", "android.media.MediaMetadataRetriever#METADATA_KEY_WRITER" ]
  }, {
    "name" : "public synchronized MetadataEditor putLong(int key, long value) throws IllegalArgumentException",
    "returnType" : "MetadataEditor",
    "comment" : "\n         * Adds numerical information to be displayed.\n         * Note that none of the information added after {@link #apply()} has been called,\n         * will be displayed.\n         * @param key the identifier of a the metadata field to set. Valid values are\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER},\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} (with a value\n         *      expressed in milliseconds),\n         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_YEAR}.\n         * @param value The long value for the given key\n         * @return Returns a reference to the same MetadataEditor object, so you can chain put\n         *      calls together.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER", "android.media.MediaMetadataRetriever#METADATA_KEY_DURATION", "android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER", "#apply()", "android.media.MediaMetadataRetriever#METADATA_KEY_YEAR" ]
  }, {
    "name" : "public synchronized MetadataEditor putBitmap(int key, Bitmap bitmap) throws IllegalArgumentException",
    "returnType" : "MetadataEditor",
    "comment" : "\n         * Sets the album / artwork picture to be displayed on the remote control.\n         * @param key the identifier of the bitmap to set. The only valid value is\n         *      {@link #BITMAP_KEY_ARTWORK}\n         * @param bitmap The bitmap for the artwork, or null if there isn't any.\n         * @return Returns a reference to the same MetadataEditor object, so you can chain put\n         *      calls together.\n         * @throws IllegalArgumentException\n         * @see android.graphics.Bitmap\n         ",
    "links" : [ "#BITMAP_KEY_ARTWORK" ]
  }, {
    "name" : "public synchronized MetadataEditor putObject(int key, Object object) throws IllegalArgumentException",
    "returnType" : "MetadataEditor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void clear()",
    "returnType" : "void",
    "comment" : "\n         * Clears all the metadata that has been set since the MetadataEditor instance was created\n         * (with {@link RemoteControlClient#editMetadata(boolean)}).\n         * Note that clearing the metadata doesn't reset the editable keys\n         * (use {@link MediaMetadataEditor#removeEditableKeys()} instead).\n         ",
    "links" : [ "android.media.MediaMetadataEditor#removeEditableKeys()", "android.media.RemoteControlClient#editMetadata(boolean)" ]
  }, {
    "name" : "public synchronized void apply()",
    "returnType" : "void",
    "comment" : "\n         * Associates all the metadata that has been set since the MetadataEditor instance was\n         *     created with {@link RemoteControlClient#editMetadata(boolean)}, or since\n         *     {@link #clear()} was called, with the RemoteControlClient. Once \"applied\",\n         *     this MetadataEditor cannot be reused to edit the RemoteControlClient's metadata.\n         ",
    "links" : [ "#clear()", "android.media.RemoteControlClient#editMetadata(boolean)" ]
  } ],
  "methodNames" : [ "public Object clone() throws CloneNotSupportedException", "public synchronized MetadataEditor putString(int key, String value) throws IllegalArgumentException", "public synchronized MetadataEditor putLong(int key, long value) throws IllegalArgumentException", "public synchronized MetadataEditor putBitmap(int key, Bitmap bitmap) throws IllegalArgumentException", "public synchronized MetadataEditor putObject(int key, Object object) throws IllegalArgumentException", "public synchronized void clear()", "public synchronized void apply()" ],
  "variableNames" : [ "BITMAP_KEY_ARTWORK", "METADATA_KEY_ARTWORK" ]
}