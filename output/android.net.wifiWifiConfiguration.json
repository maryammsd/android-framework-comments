{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiConfiguration.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiConfiguration",
  "comment" : "\n * A class representing a configured Wi-Fi network, including the\n * security configuration.\n *\n * @deprecated Use {@link WifiNetworkSpecifier.Builder} to create {@link NetworkSpecifier} and\n * {@link WifiNetworkSuggestion.Builder} to create {@link WifiNetworkSuggestion}. This will become a\n * system use only object in the future.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACKUP_VERSION",
    "type" : "int",
    "comment" : "\n     * Current Version of the Backup Serializer.\n    ",
    "links" : [ ]
  }, {
    "name" : "ssidVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "bssidVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "pskVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "wepKeyVarNames",
    "type" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "wepTxKeyIdxVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "priorityVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "hiddenSSIDVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "pmfVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "updateIdentiferVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INVALID_NETWORK_ID",
    "type" : "int",
    "comment" : "\n     * The network ID for an invalid network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCAL_ONLY_NETWORK_ID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mPasspointManagementObjectTree",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_RANDOM_MAC_GENERATION_RETRY",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OPEN",
    "type" : "int",
    "comment" : " Security type for an open network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WEP",
    "type" : "int",
    "comment" : " Security type for a WEP network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PSK",
    "type" : "int",
    "comment" : " Security type for a PSK network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP",
    "type" : "int",
    "comment" : " Security type for an EAP network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_SAE",
    "type" : "int",
    "comment" : " Security type for an SAE network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP_SUITE_B",
    "type" : "int",
    "comment" : " Security type for an EAP Suite B network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OWE",
    "type" : "int",
    "comment" : " Security type for an OWE network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WAPI_PSK",
    "type" : "int",
    "comment" : " Security type for a WAPI PSK network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WAPI_CERT",
    "type" : "int",
    "comment" : " Security type for a WAPI Certificate network. ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_UID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "networkId",
    "type" : "int",
    "comment" : "\n     * The ID number that the supplicant uses to identify this\n     * network configuration entry. This must be passed as an argument\n     * to most calls into the supplicant.\n     ",
    "links" : [ ]
  }, {
    "name" : "status",
    "type" : "int",
    "comment" : "\n     * The current status of this network configuration entry.\n     * @see Status\n     ",
    "links" : [ ]
  }, {
    "name" : "SSID",
    "type" : "String",
    "comment" : "\n     * The network's SSID. Can either be a UTF-8 string,\n     * which must be enclosed in double quotation marks\n     * (e.g., {@code \"MyNetwork\"}), or a string of\n     * hex digits, which are not enclosed in quotes\n     * (e.g., {@code 01a243f405}).\n     ",
    "links" : [ ]
  }, {
    "name" : "BSSID",
    "type" : "String",
    "comment" : "\n     * When set, this network configuration entry should only be used when\n     * associating with the AP having the specified BSSID. The value is\n     * a string in the format of an Ethernet MAC address, e.g.,\n     * <code>XX:XX:XX:XX:XX:XX</code> where each <code>X</code> is a hex digit.\n     ",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_2GHZ",
    "type" : "int",
    "comment" : "\n     * 2GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_5GHZ",
    "type" : "int",
    "comment" : "\n     * 5GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_ANY",
    "type" : "int",
    "comment" : "\n     * Device is allowed to choose the optimal band (2Ghz or 5Ghz) based on device capability,\n     * operating country code and current radio conditions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "apBand",
    "type" : "int",
    "comment" : "\n     * The band which the AP resides on.\n     * One of {@link #AP_BAND_2GHZ}, {@link #AP_BAND_5GHZ}, or {@link #AP_BAND_ANY}.\n     * By default, {@link #AP_BAND_2GHZ} is chosen.\n     *\n     * @hide\n     ",
    "links" : [ "#AP_BAND_2GHZ", "#AP_BAND_5GHZ", "#AP_BAND_ANY", "#AP_BAND_2GHZ" ]
  }, {
    "name" : "apChannel",
    "type" : "int",
    "comment" : "\n     * The channel which AP resides on,currently, US only\n     * 2G  1-11\n     * 5G  36,40,44,48,149,153,157,161,165\n     * 0 - find a random available channel according to the apBand\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "preSharedKey",
    "type" : "String",
    "comment" : "\n     * Pre-shared key for use with WPA-PSK. Either an ASCII string enclosed in\n     * double quotation marks (e.g., {@code \"abcdefghij\"} for PSK passphrase or\n     * a string of 64 hex digits for raw PSK.\n     * <p/>\n     * When the value of this key is read, the actual key is\n     * not returned, just a \"*\" if the key has a value, or the null\n     * string otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "wepKeys",
    "type" : "String[]",
    "comment" : "\n     * Four WEP keys. For each of the four values, provide either an ASCII\n     * string enclosed in double quotation marks (e.g., {@code \"abcdef\"}),\n     * a string of hex digits (e.g., {@code 0102030405}), or an empty string\n     * (e.g., {@code \"\"}).\n     * <p/>\n     * When the value of one of these keys is read, the actual key is\n     * not returned, just a \"*\" if the key has a value, or the null\n     * string otherwise.\n     * @deprecated Due to security and performance limitations, use of WEP networks\n     * is discouraged.\n     ",
    "links" : [ ]
  }, {
    "name" : "wepTxKeyIndex",
    "type" : "int",
    "comment" : " Default WEP key index, ranging from 0 to 3.\n     * @deprecated Due to security and performance limitations, use of WEP networks\n     * is discouraged. ",
    "links" : [ ]
  }, {
    "name" : "priority",
    "type" : "int",
    "comment" : "\n     * Priority determines the preference given to a network by {@code wpa_supplicant}\n     * when choosing an access point with which to associate.\n     * @deprecated This field does not exist anymore.\n     ",
    "links" : [ ]
  }, {
    "name" : "hiddenSSID",
    "type" : "boolean",
    "comment" : "\n     * This is a network that does not broadcast its SSID, so an\n     * SSID-specific probe request must be used for scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "requirePmf",
    "type" : "boolean",
    "comment" : "\n     * True if the network requires Protected Management Frames (PMF), false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "updateIdentifier",
    "type" : "String",
    "comment" : "\n     * Update identifier, for Passpoint network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "allowedKeyManagement",
    "type" : "BitSet",
    "comment" : "\n     * The set of key management protocols supported by this configuration.\n     * See {@link KeyMgmt} for descriptions of the values.\n     * Defaults to WPA-PSK WPA-EAP.\n     ",
    "links" : [ "KeyMgmt" ]
  }, {
    "name" : "allowedProtocols",
    "type" : "BitSet",
    "comment" : "\n     * The set of security protocols supported by this configuration.\n     * See {@link Protocol} for descriptions of the values.\n     * Defaults to WPA RSN.\n     ",
    "links" : [ "Protocol" ]
  }, {
    "name" : "allowedAuthAlgorithms",
    "type" : "BitSet",
    "comment" : "\n     * The set of authentication protocols supported by this configuration.\n     * See {@link AuthAlgorithm} for descriptions of the values.\n     * Defaults to automatic selection.\n     ",
    "links" : [ "AuthAlgorithm" ]
  }, {
    "name" : "allowedPairwiseCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of pairwise ciphers for WPA supported by this configuration.\n     * See {@link PairwiseCipher} for descriptions of the values.\n     * Defaults to CCMP TKIP.\n     ",
    "links" : [ "PairwiseCipher" ]
  }, {
    "name" : "allowedGroupCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of group ciphers supported by this configuration.\n     * See {@link GroupCipher} for descriptions of the values.\n     * Defaults to CCMP TKIP WEP104 WEP40.\n     ",
    "links" : [ "GroupCipher" ]
  }, {
    "name" : "allowedGroupManagementCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of group management ciphers supported by this configuration.\n     * See {@link GroupMgmtCipher} for descriptions of the values.\n     ",
    "links" : [ "GroupMgmtCipher" ]
  }, {
    "name" : "allowedSuiteBCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of SuiteB ciphers supported by this configuration.\n     * To be used for WPA3-Enterprise mode. Set automatically by the framework based on the\n     * certificate type that is used in this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "enterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n     * The enterprise configuration details specifying the EAP method,\n     * certificates and other settings associated with the EAP.\n     ",
    "links" : [ ]
  }, {
    "name" : "FQDN",
    "type" : "String",
    "comment" : "\n     * Fully qualified domain name of a Passpoint configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "providerFriendlyName",
    "type" : "String",
    "comment" : "\n     * Name of Passpoint credential provider\n     ",
    "links" : [ ]
  }, {
    "name" : "isHomeProviderNetwork",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if this network is provided by a home Passpoint provider or a roaming\n     * Passpoint provider.  This flag will be {@code true} if this network is provided by\n     * a home Passpoint provider and {@code false} if is provided by a roaming Passpoint provider\n     * or is a non-Passpoint network.\n     ",
    "links" : [ ]
  }, {
    "name" : "roamingConsortiumIds",
    "type" : "long[]",
    "comment" : "\n     * Roaming Consortium Id list for Passpoint credential; identifies a set of networks where\n     * Passpoint credential will be considered valid\n     ",
    "links" : [ ]
  }, {
    "name" : "shared",
    "type" : "boolean",
    "comment" : "\n     * True if this network configuration is visible to and usable by other users on the\n     * same device, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mIpConfiguration",
    "type" : "IpConfiguration",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "dhcpServer",
    "type" : "String",
    "comment" : "\n     * @hide\n     * dhcp server MAC address if known\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultGwMacAddress",
    "type" : "String",
    "comment" : "\n     * @hide\n     * default Gateway MAC address if known\n     ",
    "links" : [ ]
  }, {
    "name" : "validatedInternetAccess",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     * last time we connected, this configuration had validated internet access\n     ",
    "links" : [ ]
  }, {
    "name" : "dtimInterval",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The number of beacon intervals between Delivery Traffic Indication Maps (DTIM)\n     * This value is populated from scan results that contain Beacon Frames, which are infrequent.\n     * The value is not guaranteed to be set or current (Although it SHOULDNT change once set)\n     * Valid values are from 1 - 255. Initialized here as 0, use this to check if set.\n     ",
    "links" : [ ]
  }, {
    "name" : "isLegacyPasspointConfig",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if this configuration represents a legacy Passpoint configuration\n     * (Release N or older).  This is used for migrating Passpoint configuration from N to O.\n     * This will no longer be needed after O.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "creatorUid",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Uid of app creating the configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "lastConnectUid",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Uid of last app issuing a connection related command\n     ",
    "links" : [ ]
  }, {
    "name" : "lastUpdateUid",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Uid of last app modifying the configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "creatorName",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Universal name for app creating the configuration\n     *    see {@link PackageManager#getNameForUid(int)}\n     ",
    "links" : [ "PackageManager#getNameForUid" ]
  }, {
    "name" : "lastUpdateName",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Universal name for app updating the configuration\n     *    see {@link PackageManager#getNameForUid(int)}\n     ",
    "links" : [ "PackageManager#getNameForUid" ]
  }, {
    "name" : "carrierId",
    "type" : "int",
    "comment" : "\n     * The carrier ID identifies the operator who provides this network configuration.\n     *    see {@link TelephonyManager#getSimCarrierId()}\n     * @hide\n     ",
    "links" : [ "TelephonyManager#getSimCarrierId" ]
  }, {
    "name" : "allowAutojoin",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     * Auto-join is allowed by user for this network.\n     * Default true.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_RSSI",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "numNoInternetAccessReports",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Number of reports indicating no Internet Access\n     ",
    "links" : [ ]
  }, {
    "name" : "noInternetAccessExpected",
    "type" : "boolean",
    "comment" : "\n     * The WiFi configuration is expected not to have Internet access (e.g., a wireless printer, a\n     * Chromecast hotspot, etc.). This will be set if the user explicitly confirms a connection to\n     * this configuration and selects \"don't ask again\".\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "osu",
    "type" : "boolean",
    "comment" : "\n     * This Wifi configuration is expected for OSU(Online Sign Up) of Passpoint Release 2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastConnected",
    "type" : "long",
    "comment" : "\n     * @hide\n     * Last time the system was connected to this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "lastDisconnected",
    "type" : "long",
    "comment" : "\n     * @hide\n     * Last time the system was disconnected to this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "selfAdded",
    "type" : "boolean",
    "comment" : "\n     * Set if the configuration was self added by the framework\n     * This boolean is cleared if we get a connect/save/ update or\n     * any wifiManager command that indicate the user interacted with the configuration\n     * since we will now consider that the configuration belong to him.\n     * @deprecated only kept for @UnsupportedAppUsage\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "peerWifiConfiguration",
    "type" : "String",
    "comment" : "\n     * Peer WifiConfiguration this WifiConfiguration was added for\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ephemeral",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     * Indicate that a WifiConfiguration is temporary and should not be saved\n     * nor considered by AutoJoin.\n     ",
    "links" : [ ]
  }, {
    "name" : "trusted",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether the network is trusted or not. Networks are considered trusted\n     * if the user explicitly allowed this network connection.\n     * This bit can be used by suggestion network, see\n     * {@link WifiNetworkSuggestion.Builder#setUntrusted(boolean)}\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion.Builder#setUntrusted" ]
  }, {
    "name" : "fromWifiNetworkSuggestion",
    "type" : "boolean",
    "comment" : "\n     * True if this Wifi configuration is created from a {@link WifiNetworkSuggestion},\n     * false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion" ]
  }, {
    "name" : "fromWifiNetworkSpecifier",
    "type" : "boolean",
    "comment" : "\n     * True if this Wifi configuration is created from a {@link WifiNetworkSpecifier},\n     * false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "WifiNetworkSpecifier" ]
  }, {
    "name" : "meteredHint",
    "type" : "boolean",
    "comment" : "\n     * True if the creator of this configuration has expressed that it\n     * should be considered metered, false otherwise.\n     *\n     * @see #isMetered(WifiConfiguration, WifiInfo)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METERED_OVERRIDE_NONE",
    "type" : "int",
    "comment" : "\n     * No metered override.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METERED_OVERRIDE_METERED",
    "type" : "int",
    "comment" : "\n     * Override network to be metered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METERED_OVERRIDE_NOT_METERED",
    "type" : "int",
    "comment" : "\n     * Override network to be unmetered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "meteredOverride",
    "type" : "int",
    "comment" : "\n     * Indicates if the end user has expressed an explicit opinion about the\n     * meteredness of this network, such as through the Settings app.\n     * This value is one of {@link #METERED_OVERRIDE_NONE}, {@link #METERED_OVERRIDE_METERED},\n     * or {@link #METERED_OVERRIDE_NOT_METERED}.\n     * <p>\n     * This should always override any values from {@link #meteredHint} or\n     * {@link WifiInfo#getMeteredHint()}.\n     *\n     * By default this field is set to {@link #METERED_OVERRIDE_NONE}.\n     *\n     * @see #isMetered(WifiConfiguration, WifiInfo)\n     * @hide\n     ",
    "links" : [ "#METERED_OVERRIDE_NONE", "#METERED_OVERRIDE_METERED", "#METERED_OVERRIDE_NOT_METERED", "#meteredHint", "WifiInfo#getMeteredHint", "#METERED_OVERRIDE_NONE" ]
  }, {
    "name" : "useExternalScores",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     * Setting this value will force scan results associated with this configuration to\n     * be included in the bucket of networks that are externally scored.\n     * If not set, associated scan results will be treated as legacy saved networks and\n     * will take precedence over networks in the scored category.\n     ",
    "links" : [ ]
  }, {
    "name" : "numScorerOverride",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Number of time the scorer overrode a the priority based choice, when comparing two\n     * WifiConfigurations, note that since comparing WifiConfiguration happens very often\n     * potentially at every scan, this number might become very large, even on an idle\n     * system.\n     ",
    "links" : [ ]
  }, {
    "name" : "numScorerOverrideAndSwitchedNetwork",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Number of time the scorer overrode a the priority based choice, and the comparison\n     * triggered a network switch\n     ",
    "links" : [ ]
  }, {
    "name" : "numAssociation",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Number of time we associated to this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_NONE",
    "type" : "int",
    "comment" : "\n     * Use factory MAC when connecting to this network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Generate a randomized MAC once and reuse it for all connections to this network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "macRandomizationSetting",
    "type" : "int",
    "comment" : "\n     * Level of MAC randomization for this network.\n     * One of {@link #RANDOMIZATION_NONE} or {@link #RANDOMIZATION_PERSISTENT}.\n     * By default this field is set to {@link #RANDOMIZATION_PERSISTENT}.\n     * @hide\n     ",
    "links" : [ "#RANDOMIZATION_NONE", "#RANDOMIZATION_PERSISTENT", "#RANDOMIZATION_PERSISTENT" ]
  }, {
    "name" : "mRandomizedMacAddress",
    "type" : "MacAddress",
    "comment" : "\n     * @hide\n     * Randomized MAC address to use with this particular network\n     ",
    "links" : [ ]
  }, {
    "name" : "randomizedMacExpirationTimeMs",
    "type" : "long",
    "comment" : "\n     * @hide\n     * The wall clock time of when |mRandomizedMacAddress| should be re-randomized in aggressive\n     * randomization mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "HOME_NETWORK_RSSI_BOOST",
    "type" : "int",
    "comment" : " @hide\n     * Boost given to RSSI on a home network for the purpose of calculating the score\n     * This adds stickiness to home networks, as defined by:\n     * - less than 4 known BSSIDs\n     * - PSK only\n     * - TODO: add a test to verify that all BSSIDs are behind same gateway\n     **",
    "links" : [ ]
  }, {
    "name" : "mNetworkSelectionStatus",
    "type" : "NetworkSelectionStatus",
    "comment" : "\n     * @hide\n     * network selection related member\n     ",
    "links" : [ ]
  }, {
    "name" : "recentFailure",
    "type" : "RecentFailure",
    "comment" : "  rename to mRecentFailure",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_NONE",
    "type" : "int",
    "comment" : "\n     * No recent failure, or no specific reason given for the recent connection failure\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA",
    "type" : "int",
    "comment" : "\n     * Connection to this network recently failed due to Association Rejection Status 17\n     * (AP is full)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "linkedConfigurations",
    "type" : "HashMap<String, Integer>",
    "comment" : "\n     * @hide\n     * Linked Configurations: represent the set of Wificonfigurations that are equivalent\n     * regarding roaming and auto-joining.\n     * The linked configuration may or may not have same SSID, and may or may not have same\n     * credentials.\n     * For instance, linked configurations will have same defaultGwMacAddress or same dhcp server.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiConfiguration>",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mPasspointUniqueId",
    "type" : "String",
    "comment" : "\n     * Passpoint Unique identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isMostRecentlyConnected",
    "type" : "boolean",
    "comment" : "\n     * If network is one of the most recently connected.\n     * For framework internal use only. Do not parcel.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSecurityParams(@SecurityType int securityType)",
    "returnType" : "void",
    "comment" : "\n     * Set the various security params to correspond to the provided security type.\n     * This is accomplished by setting the various BitSets exposed in WifiConfiguration.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_EAP_SUITE_B},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK}, or\n     * {@link #SECURITY_TYPE_WAPI_CERT}\n     ",
    "links" : [ "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_EAP_SUITE_B", "#SECURITY_TYPE_OWE", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_WAPI_CERT" ]
  }, {
    "name" : "public boolean hasNoInternetAccess()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * The WiFi configuration is considered to have no internet access for purpose of autojoining\n     * if there has been a report of it having no internet access, and, it never have had\n     * internet access in the past.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNoInternetAccessExpected()",
    "returnType" : "boolean",
    "comment" : "\n     * The WiFi configuration is expected not to have Internet access (e.g., a wireless printer, a\n     * Chromecast hotspot, etc.). This will be set if the user explicitly confirms a connection to\n     * this configuration and selects \"don't ask again\".\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEphemeral()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Indicate that a WifiConfiguration is temporary and should not be saved\n     * nor considered by AutoJoin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMetered(@Nullable WifiConfiguration config, @Nullable WifiInfo info)",
    "returnType" : "boolean",
    "comment" : "\n     * Blend together all the various opinions to decide if the given network\n     * should be considered metered or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpenNetwork()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Returns true if this WiFi config is for an open network.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidMacAddressForRandomization(MacAddress mac)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks if the given MAC address can be used for Connected Mac Randomization\n     * by verifying that it is non-null, unicast, locally assigned, and not default mac.\n     * @param mac MacAddress to check\n     * @return true if mac is good to use\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getRandomizedMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns MAC address set to be the local randomized MAC address.\n     * Depending on user preference, the device may or may not use the returned MAC address for\n     * connections to this network.\n     * <p>\n     * Information is restricted to Device Owner, Profile Owner, and Carrier apps\n     * (which will only obtain addresses for configurations which they create). Other callers\n     * will receive a default \"02:00:00:00:00:00\" MAC address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRandomizedMacAddress(@NonNull MacAddress mac)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @param mac MacAddress to change into\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRecentFailureReason()",
    "returnType" : "int",
    "comment" : "\n     * Get the failure reason for the most recent connection attempt, or\n     * {@link #RECENT_FAILURE_NONE} if there was no failure.\n     *\n     * Failure reasons include:\n     * {@link #RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA}\n     *\n     * @hide\n     ",
    "links" : [ "#RECENT_FAILURE_NONE", "#RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA" ]
  }, {
    "name" : "public NetworkSelectionStatus getNetworkSelectionStatus()",
    "returnType" : "NetworkSelectionStatus",
    "comment" : "\n     * Get the network selection status.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkSelectionStatus(@NonNull NetworkSelectionStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Set the network selection status.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPasspoint()",
    "returnType" : "boolean",
    "comment" : "\n     * Identify if this configuration represents a Passpoint network\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLinked(WifiConfiguration config)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper function, identify if a configuration is linked\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnterprise()",
    "returnType" : "boolean",
    "comment" : "\n     * Helper function, idenfity if a configuration should be treated as an enterprise network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String logTimeOfDay(long millis)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPrintableSsid()",
    "returnType" : "String",
    "comment" : "\n     * Get the SSID in a human-readable format, with all additional formatting removed\n     * e.g. quotation marks around the SSID, \"P\" prefix\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKeyIdForCredentials(WifiConfiguration current)",
    "returnType" : "String",
    "comment" : "\n     * Get an identifier for associating credentials with this config\n     * @param current configuration contains values for additional fields\n     *                that are not part of this configuration. Used\n     *                when a config with some fields is passed by an application.\n     * @throws IllegalStateException if config is invalid for key id generation\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String trimStringForKeyId(String string)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static BitSet readBitSet(Parcel src)",
    "returnType" : "BitSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeBitSet(Parcel dest, BitSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAuthType()",
    "returnType" : "int",
    "comment" : "\n     * Get the authentication type of the network.\n     * @return One of the {@link KeyMgmt} constants. e.g. {@link KeyMgmt#WPA2_PSK}.\n     * @hide\n     ",
    "links" : [ "KeyMgmt", "KeyMgmt#WPA2_PSK" ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * Return a String that can be used to uniquely identify this WifiConfiguration.\n     * <br />\n     * Note: Do not persist this value! This value is not guaranteed to remain backwards compatible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSsidAndSecurityTypeString()",
    "returnType" : "String",
    "comment" : " @hide\n     *  return the SSID + security type in String format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IpConfiguration getIpConfiguration()",
    "returnType" : "IpConfiguration",
    "comment" : "\n     * Get the IpConfiguration object associated with this WifiConfiguration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIpConfiguration(@Nullable IpConfiguration ipConfiguration)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link IpConfiguration} for this network.\n     * @param ipConfiguration the {@link IpConfiguration} to set, or null to use the default\n     *                        constructor {@link IpConfiguration#IpConfiguration()}.\n     * @hide\n     ",
    "links" : [ "IpConfiguration", "IpConfiguration", "IpConfiguration#IpConfiguration" ]
  }, {
    "name" : "public StaticIpConfiguration getStaticIpConfiguration()",
    "returnType" : "StaticIpConfiguration",
    "comment" : "\n     * Get the {@link StaticIpConfiguration} for this network.\n     * @return the {@link StaticIpConfiguration}, or null if unset.\n     * @hide\n     ",
    "links" : [ "StaticIpConfiguration", "StaticIpConfiguration" ]
  }, {
    "name" : "public void setStaticIpConfiguration(StaticIpConfiguration staticIpConfiguration)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IpConfiguration.IpAssignment getIpAssignment()",
    "returnType" : "IpConfiguration.IpAssignment",
    "comment" : "\n     * Get the {@link IpConfiguration.IpAssignment} for this network.\n     * @hide\n     ",
    "links" : [ "IpConfiguration.IpAssignment" ]
  }, {
    "name" : "public void setIpAssignment(IpConfiguration.IpAssignment ipAssignment)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IpConfiguration.ProxySettings getProxySettings()",
    "returnType" : "IpConfiguration.ProxySettings",
    "comment" : "\n     * Get the {@link IpConfiguration.ProxySettings} for this network.\n     * @hide\n     ",
    "links" : [ "IpConfiguration.ProxySettings" ]
  }, {
    "name" : "public void setProxySettings(IpConfiguration.ProxySettings proxySettings)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ProxyInfo getHttpProxy()",
    "returnType" : "ProxyInfo",
    "comment" : "\n     * Returns the HTTP proxy used by this object.\n     * @return a {@link ProxyInfo httpProxy} representing the proxy specified by this\n     *                  WifiConfiguration, or {@code null} if no proxy is specified.\n     ",
    "links" : [ "ProxyInfo" ]
  }, {
    "name" : "public void setHttpProxy(ProxyInfo httpProxy)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link ProxyInfo} for this WifiConfiguration. This method should only be used by a\n     * device owner or profile owner. When other apps attempt to save a {@link WifiConfiguration}\n     * with modified proxy settings, the methods {@link WifiManager#addNetwork} and\n     * {@link WifiManager#updateNetwork} fail and return {@code -1}.\n     *\n     * @param httpProxy {@link ProxyInfo} representing the httpProxy to be used by this\n     *                  WifiConfiguration. Setting this to {@code null} will explicitly set no\n     *                  proxy, removing any proxy that was previously set.\n     * @exception IllegalArgumentException for invalid httpProxy\n     ",
    "links" : [ "ProxyInfo", "WifiConfiguration", "WifiManager#addNetwork", "WifiManager#updateNetwork", "ProxyInfo" ]
  }, {
    "name" : "public void setProxy(@NonNull ProxySettings settings, @NonNull ProxyInfo proxy)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link ProxySettings} and {@link ProxyInfo} for this network.\n     * @hide\n     ",
    "links" : [ "ProxySettings", "ProxyInfo" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointManagementObjectTree(String passpointManagementObjectTree)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getMoTree()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointUniqueId(String uniqueId)",
    "returnType" : "void",
    "comment" : "\n     * Set the Passpoint unique identifier\n     * @param uniqueId Passpoint unique identifier to be set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointUniqueId()",
    "returnType" : "String",
    "comment" : "\n     * Set the Passpoint unique identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsPreSharedKey()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the key mgmt indicates if the WifiConfiguration needs a preSharedKey or not.\n     * @return true if preSharedKey is needed, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "BACKUP_VERSION", "ssidVarName", "bssidVarName", "pskVarName", "wepKeyVarNames", "wepTxKeyIdxVarName", "priorityVarName", "hiddenSSIDVarName", "pmfVarName", "updateIdentiferVarName", "INVALID_NETWORK_ID", "LOCAL_ONLY_NETWORK_ID", "mPasspointManagementObjectTree", "MAXIMUM_RANDOM_MAC_GENERATION_RETRY", "SECURITY_TYPE_OPEN", "SECURITY_TYPE_WEP", "SECURITY_TYPE_PSK", "SECURITY_TYPE_EAP", "SECURITY_TYPE_SAE", "SECURITY_TYPE_EAP_SUITE_B", "SECURITY_TYPE_OWE", "SECURITY_TYPE_WAPI_PSK", "SECURITY_TYPE_WAPI_CERT", "UNKNOWN_UID", "networkId", "status", "SSID", "BSSID", "AP_BAND_2GHZ", "AP_BAND_5GHZ", "AP_BAND_ANY", "apBand", "apChannel", "preSharedKey", "wepKeys", "wepTxKeyIndex", "priority", "hiddenSSID", "requirePmf", "updateIdentifier", "allowedKeyManagement", "allowedProtocols", "allowedAuthAlgorithms", "allowedPairwiseCiphers", "allowedGroupCiphers", "allowedGroupManagementCiphers", "allowedSuiteBCiphers", "enterpriseConfig", "FQDN", "providerFriendlyName", "isHomeProviderNetwork", "roamingConsortiumIds", "shared", "mIpConfiguration", "dhcpServer", "defaultGwMacAddress", "validatedInternetAccess", "dtimInterval", "isLegacyPasspointConfig", "creatorUid", "lastConnectUid", "lastUpdateUid", "creatorName", "lastUpdateName", "carrierId", "allowAutojoin", "INVALID_RSSI", "numNoInternetAccessReports", "noInternetAccessExpected", "osu", "lastConnected", "lastDisconnected", "selfAdded", "peerWifiConfiguration", "ephemeral", "trusted", "fromWifiNetworkSuggestion", "fromWifiNetworkSpecifier", "meteredHint", "METERED_OVERRIDE_NONE", "METERED_OVERRIDE_METERED", "METERED_OVERRIDE_NOT_METERED", "meteredOverride", "useExternalScores", "numScorerOverride", "numScorerOverrideAndSwitchedNetwork", "numAssociation", "RANDOMIZATION_NONE", "RANDOMIZATION_PERSISTENT", "macRandomizationSetting", "mRandomizedMacAddress", "randomizedMacExpirationTimeMs", "HOME_NETWORK_RSSI_BOOST", "mNetworkSelectionStatus", "recentFailure", "RECENT_FAILURE_NONE", "RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA", "linkedConfigurations", "CREATOR", "mPasspointUniqueId", "isMostRecentlyConnected" ],
  "methodNames" : [ "public void setSecurityParams(@SecurityType int securityType)", "public boolean hasNoInternetAccess()", "public boolean isNoInternetAccessExpected()", "public boolean isEphemeral()", "public static boolean isMetered(@Nullable WifiConfiguration config, @Nullable WifiInfo info)", "public boolean isOpenNetwork()", "public static boolean isValidMacAddressForRandomization(MacAddress mac)", "public MacAddress getRandomizedMacAddress()", "public void setRandomizedMacAddress(@NonNull MacAddress mac)", "public int getRecentFailureReason()", "public NetworkSelectionStatus getNetworkSelectionStatus()", "public void setNetworkSelectionStatus(@NonNull NetworkSelectionStatus status)", "public boolean isPasspoint()", "public boolean isLinked(WifiConfiguration config)", "public boolean isEnterprise()", "private static String logTimeOfDay(long millis)", "public String toString()", "public String getPrintableSsid()", "public String getKeyIdForCredentials(WifiConfiguration current)", "private String trimStringForKeyId(String string)", "private static BitSet readBitSet(Parcel src)", "private static void writeBitSet(Parcel dest, BitSet set)", "public int getAuthType()", "public String getKey()", "public String getSsidAndSecurityTypeString()", "public IpConfiguration getIpConfiguration()", "public void setIpConfiguration(@Nullable IpConfiguration ipConfiguration)", "public StaticIpConfiguration getStaticIpConfiguration()", "public void setStaticIpConfiguration(StaticIpConfiguration staticIpConfiguration)", "public IpConfiguration.IpAssignment getIpAssignment()", "public void setIpAssignment(IpConfiguration.IpAssignment ipAssignment)", "public IpConfiguration.ProxySettings getProxySettings()", "public void setProxySettings(IpConfiguration.ProxySettings proxySettings)", "public ProxyInfo getHttpProxy()", "public void setHttpProxy(ProxyInfo httpProxy)", "public void setProxy(@NonNull ProxySettings settings, @NonNull ProxyInfo proxy)", "public int describeContents()", "public void setPasspointManagementObjectTree(String passpointManagementObjectTree)", "public String getMoTree()", "public void writeToParcel(Parcel dest, int flags)", "public void setPasspointUniqueId(String uniqueId)", "public String getPasspointUniqueId()", "public boolean needsPreSharedKey()" ]
}