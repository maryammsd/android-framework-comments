{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioSystem.java",
  "packageName" : "android.media",
  "className" : "AudioSystem",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG_VOLUME",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_DEFAULT",
    "type" : "int",
    "comment" : " @hide Used to identify the default audio stream volume ",
    "links" : [ ]
  }, {
    "name" : "STREAM_VOICE_CALL",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for phone calls ",
    "links" : [ ]
  }, {
    "name" : "STREAM_SYSTEM",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for system sounds ",
    "links" : [ ]
  }, {
    "name" : "STREAM_RING",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for the phone ring and message alerts ",
    "links" : [ ]
  }, {
    "name" : "STREAM_MUSIC",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for music playback ",
    "links" : [ ]
  }, {
    "name" : "STREAM_ALARM",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for alarms ",
    "links" : [ ]
  }, {
    "name" : "STREAM_NOTIFICATION",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for notifications ",
    "links" : [ ]
  }, {
    "name" : "STREAM_BLUETOOTH_SCO",
    "type" : "int",
    "comment" : " @hide\n     *  Used to identify the volume of audio streams for phone calls when connected on bluetooth ",
    "links" : [ ]
  }, {
    "name" : "STREAM_SYSTEM_ENFORCED",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for enforced system sounds in certain\n     * countries (e.g camera in Japan) ",
    "links" : [ ]
  }, {
    "name" : "STREAM_DTMF",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for DTMF tones ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TTS",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams exclusively transmitted through the\n     *  speaker (TTS) of the device ",
    "links" : [ ]
  }, {
    "name" : "STREAM_ACCESSIBILITY",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for accessibility prompts ",
    "links" : [ ]
  }, {
    "name" : "STREAM_ASSISTANT",
    "type" : "int",
    "comment" : " @hide Used to identify the volume of audio streams for virtual assistant ",
    "links" : [ ]
  }, {
    "name" : "NUM_STREAMS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #numStreamTypes() instead}\n     ",
    "links" : [ "#numStreamTypes()" ]
  }, {
    "name" : "OUT_CHANNEL_COUNT_MAX",
    "type" : "int",
    "comment" : " Maximum value for AudioTrack channel count\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_HZ_MAX",
    "type" : "int",
    "comment" : " Maximum value for sample rate, used by AudioFormat.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_HZ_MIN",
    "type" : "int",
    "comment" : " Minimum value for sample rate, used by AudioFormat.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FCC_24",
    "type" : "int",
    "comment" : " fixed channel count 24; do not change.",
    "links" : [ ]
  }, {
    "name" : "NUM_STREAM_TYPES",
    "type" : "int",
    "comment" : " Expose only the getter method publicly so we can change it in the future",
    "links" : [ ]
  }, {
    "name" : "STREAM_NAMES",
    "type" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_CURRENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_NORMAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_RINGTONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_IN_CALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_IN_COMMUNICATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_CALL_SCREENING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_CALL_REDIRECT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_COMMUNICATION_REDIRECT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_MODES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_AAC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_SBC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_APTX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_APTX_HD",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_LDAC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_LC3",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FORMAT_OPUS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_EARPIECE",
    "type" : "int",
    "comment" : " @hide @deprecated ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_SPEAKER",
    "type" : "int",
    "comment" : " @hide @deprecated ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_BLUETOOTH",
    "type" : "int",
    "comment" : " @hide @deprecated use {@link #ROUTE_BLUETOOTH_SCO} ",
    "links" : [ "#ROUTE_BLUETOOTH_SCO" ]
  }, {
    "name" : "ROUTE_BLUETOOTH_SCO",
    "type" : "int",
    "comment" : " @hide @deprecated ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_HEADSET",
    "type" : "int",
    "comment" : " @hide @deprecated ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_BLUETOOTH_A2DP",
    "type" : "int",
    "comment" : " @hide @deprecated ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_ALL",
    "type" : "int",
    "comment" : " @hide @deprecated ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_SESSION_ALLOCATE",
    "type" : "int",
    "comment" : "  @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_STATUS_OK",
    "type" : "int",
    "comment" : " @hide Command successful or Media server restarted. see ErrorCallback ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_STATUS_ERROR",
    "type" : "int",
    "comment" : " @hide Command failed or unspecified audio error.  see ErrorCallback ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_STATUS_SERVER_DIED",
    "type" : "int",
    "comment" : " @hide Media server died. see ErrorCallback ",
    "links" : [ ]
  }, {
    "name" : "sErrorCallback",
    "type" : "ErrorCallback",
    "comment" : " all accesses must be synchronized (AudioSystem.class)",
    "links" : [ ]
  }, {
    "name" : "DYNAMIC_POLICY_EVENT_MIX_STATE_UPDATE",
    "type" : "int",
    "comment" : "keep in sync with include/media/AudioPolicy.h",
    "links" : [ ]
  }, {
    "name" : "sDynPolicyCallback",
    "type" : "DynamicPolicyCallback",
    "comment" : " all accesses must be synchronized (AudioSystem.class)",
    "links" : [ ]
  }, {
    "name" : "sRecordingCallback",
    "type" : "AudioRecordingCallback",
    "comment" : " all accesses must be synchronized (AudioSystem.class)",
    "links" : [ ]
  }, {
    "name" : "sRoutingUpdateCallback",
    "type" : "RoutingUpdateCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sVolRangeInitReqCallback",
    "type" : "VolumeRangeInitRequestCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BAD_VALUE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INVALID_OPERATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_DENIED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NO_INIT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEAD_OBJECT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WOULD_BLOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_BIT_IN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_BIT_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_EARPIECE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_SPEAKER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_WIRED_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_WIRED_HEADPHONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_SCO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_SCO_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_SCO_CARKIT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_A2DP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_AUX_DIGITAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HDMI",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ANLG_DOCK_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_DGTL_DOCK_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_USB_ACCESSORY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_USB_DEVICE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_REMOTE_SUBMIX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_TELEPHONY_TX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_LINE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HDMI_ARC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HDMI_EARC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_SPDIF",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_FM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_AUX_LINE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_SPEAKER_SAFE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_IP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BUS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_PROXY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_USB_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HEARING_AID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ECHO_CANCELLER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLE_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLE_SPEAKER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLE_BROADCAST",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_USB",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_A2DP_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_SCO_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_USB_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_HDMI_SYSTEM_AUDIO_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ALL_HDMI_SYSTEM_AUDIO_AND_SPEAKER_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ALL_BLE_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_COMMUNICATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_AMBIENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BUILTIN_MIC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLUETOOTH_SCO_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_WIRED_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_AUX_DIGITAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_HDMI",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_VOICE_CALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_TELEPHONY_RX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BACK_MIC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_REMOTE_SUBMIX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ANLG_DOCK_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_DGTL_DOCK_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_USB_ACCESSORY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_USB_DEVICE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_FM_TUNER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_TV_TUNER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_LINE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_SPDIF",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLUETOOTH_A2DP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_LOOPBACK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_IP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BUS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_PROXY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_USB_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLUETOOTH_BLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_HDMI_ARC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_HDMI_EARC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ECHO_REFERENCE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLE_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ALL_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ALL_SCO_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ALL_USB_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ALL_BLE_SET",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LEGACY_REMOTE_SUBMIX_ADDRESS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_STATE_UNAVAILABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_STATE_AVAILABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_DEVICE_STATES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_EARPIECE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_SPEAKER_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_WIRED_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_WIRED_HEADPHONE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_SCO_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_SCO_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_SCO_CARKIT_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_A2DP_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_AUX_DIGITAL_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HDMI_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ANLG_DOCK_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_DGTL_DOCK_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_USB_ACCESSORY_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_USB_DEVICE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_REMOTE_SUBMIX_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_TELEPHONY_TX_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_LINE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HDMI_ARC_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HDMI_EARC_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_SPDIF_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_FM_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_AUX_LINE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_SPEAKER_SAFE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_IP_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BUS_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_PROXY_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_USB_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_HEARING_AID_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_ECHO_CANCELLER_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLE_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLE_SPEAKER_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_OUT_BLE_BROADCAST_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_COMMUNICATION_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_AMBIENT_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BUILTIN_MIC_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLUETOOTH_SCO_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_WIRED_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_AUX_DIGITAL_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_TELEPHONY_RX_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BACK_MIC_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_REMOTE_SUBMIX_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ANLG_DOCK_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_DGTL_DOCK_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_USB_ACCESSORY_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_USB_DEVICE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_FM_TUNER_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_TV_TUNER_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_LINE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_SPDIF_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLUETOOTH_A2DP_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_LOOPBACK_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_IP_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BUS_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_PROXY_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_USB_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLUETOOTH_BLE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_ECHO_REFERENCE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_HDMI_ARC_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_HDMI_EARC_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IN_BLE_HEADSET_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PHONE_STATE_OFFCALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PHONE_STATE_RINGING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PHONE_STATE_INCALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_SPEAKER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_HEADPHONES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_BT_SCO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_BT_A2DP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_WIRED_ACCESSORY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_BT_CAR_DOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_BT_DESK_DOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_ANALOG_DOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_DIGITAL_DOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_NO_BT_A2DP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_SYSTEM_ENFORCED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_HDMI_SYSTEM_AUDIO_ENFORCED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_ENCODED_SURROUND_NEVER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_ENCODED_SURROUND_ALWAYS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_ENCODED_SURROUND_MANUAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_FORCE_CONFIG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FORCE_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_COMMUNICATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_MEDIA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_RECORD",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_DOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_SYSTEM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_HDMI_SYSTEM_AUDIO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_ENCODED_SURROUND",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FOR_VIBRATE_RINGING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_FORCE_USE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_NONE",
    "type" : "int",
    "comment" : " Device role in audio policy",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_PREFERRED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_DISABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNC_EVENT_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SYNC_EVENT_PRESENTATION_COMPLETE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SYNC_EVENT_SHARE_AUDIO_HISTORY",
    "type" : "int",
    "comment" : " @hide\n     *  Not used by native implementation.\n     *  See {@link AudioRecord.Builder#setSharedAudioEvent(MediaSyncEvent) ",
    "links" : [ "AudioRecord.Builder#setSharedAudioEvent(MediaSyncEvent)" ]
  }, {
    "name" : "MAX_DEVICE_ROUTING",
    "type" : "int",
    "comment" : "\n     * Maximum number of audio devices a track is ever routed to, determines the size of the\n     * array passed to {@link #getDevicesForAttributes(AudioAttributes, AudioDeviceAttributes[])}\n     ",
    "links" : [ "#getDevicesForAttributes(AudioAttributes" ]
  }, {
    "name" : "AUDIO_HW_SYNC_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DIRECT_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Direct playback modes supported by audio HAL implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECT_OFFLOAD_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIRECT_OFFLOAD_GAPLESS_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIRECT_BITSTREAM_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFFLOAD_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Compressed audio offload decoding modes supported by audio HAL implementation.\n     * Keep in sync with system/media/include/media/audio.h.\n     ",
    "links" : [ ]
  }, {
    "name" : "OFFLOAD_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFFLOAD_GAPLESS_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLAY_SOUND_DELAY",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The delay before playing a sound. This small period exists so the user\n     * can press another key (non-volume keys, too) to have it NOT be audible.\n     * <p>\n     * PhoneWindow will implement this part.\n     ",
    "links" : [ ]
  }, {
    "name" : "IN_VOICE_COMM_FOCUS_ID",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Constant to identify a focus stack entry that is used to hold the focus while the phone\n     * is ringing or during a call. Used by com.android.internal.telephony.CallManager when\n     * entering and exiting calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_STREAM_VOLUME",
    "type" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PLATFORM_DEFAULT",
    "type" : "int",
    "comment" : " @hide The platform has no specific capabilities ",
    "links" : [ ]
  }, {
    "name" : "PLATFORM_VOICE",
    "type" : "int",
    "comment" : " @hide The platform is voice call capable (a phone) ",
    "links" : [ ]
  }, {
    "name" : "PLATFORM_TELEVISION",
    "type" : "int",
    "comment" : " @hide The platform is a television or a set-top box ",
    "links" : [ ]
  }, {
    "name" : "PLATFORM_AUTOMOTIVE",
    "type" : "int",
    "comment" : " @hide The platform is automotive ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MUTE_STREAMS_AFFECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_EVENT_ROUTING_CHANGE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Event posted by AudioTrack and AudioRecord JNI (JNIDeviceCallback) when routing changes.\n     * Keep in sync with core/jni/android_media_DeviceCallback.h.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native int native_getMaxChannelCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_getMaxSampleRate()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_getMinSampleRate()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final int getNumStreamTypes()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @return total number of stream types\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int muteMicrophone(boolean on)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Sets the microphone mute on or off.\n     *\n     * @param on set <var>true</var> to mute the microphone;\n     *           <var>false</var> to turn mute off\n     * @return command completion status see AUDIO_STATUS_OK, see AUDIO_STATUS_ERROR\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isMicrophoneMuted()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks whether the microphone mute is on or off.\n     *\n     * @return true if microphone is muted, false if it's not\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String modeToString(int mode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int audioFormatToBluetoothSourceCodec(@AudioFormatNativeEnumForBtCodec int audioFormat)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Convert audio format enum values to Bluetooth codec values\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int audioFormatToBluetoothLeAudioSourceCodec(@AudioFormatNativeEnumForBtLeAudioCodec int audioFormat)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Convert audio format enum values to Bluetooth LE audio codec values\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int bluetoothA2dpCodecToAudioFormat(int btCodec)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Convert an A2DP Bluetooth codec to an audio format enum\n     * @param btCodec the codec to convert.\n     * @return the audio format, or {@link #AUDIO_FORMAT_DEFAULT} if unknown\n     ",
    "links" : [ "#AUDIO_FORMAT_DEFAULT" ]
  }, {
    "name" : "public static int bluetoothLeCodecToAudioFormat(int btCodec)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Convert a LE Audio Bluetooth codec to an audio format enum\n     * @param btCodec the codec to convert.\n     * @return the audio format, or {@link #AUDIO_FORMAT_DEFAULT} if unknown\n     ",
    "links" : [ "#AUDIO_FORMAT_DEFAULT" ]
  }, {
    "name" : "public static String audioFormatToString(int audioFormat)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * Convert a native audio format integer constant to a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isStreamActive(int stream, int inPastMs)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks whether the specified stream type is active.\n     *\n     * return true if any track playing on this stream is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isStreamActiveRemotely(int stream, int inPastMs)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks whether the specified stream type is active on a remotely connected device. The notion\n     * of what constitutes a remote device is enforced by the audio policy manager of the platform.\n     *\n     * return true if any track playing on this stream is active on a remote device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isSourceActive(int source)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks whether the specified audio source is active.\n     *\n     * return true if any recorder using this source is currently recording\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int newAudioSessionId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns a new unused audio session ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int newAudioPlayerId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns a new unused audio player ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int newAudioRecorderId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns a new unused audio recorder ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setParameters(String keyValuePairs)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Sets a group generic audio configuration parameters. The use of these parameters\n     * are platform dependent, see libaudio\n     *\n     * param keyValuePairs  list of parameters key value pairs in the form:\n     *    key1=value1;key2=value2;...\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native String getParameters(String keys)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * Gets a group generic audio configuration parameters. The use of these parameters\n     * are platform dependent, see libaudio\n     *\n     * param keys  list of parameters\n     * return value: list of parameters key value pairs in the form:\n     *    key1=value1;key2=value2;...\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setErrorCallback(ErrorCallback cb)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Registers a callback to be invoked when an error occurs.\n     * @param cb the callback to run\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void errorCallbackFromNative(int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setDynamicPolicyCallback(DynamicPolicyCallback cb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void dynamicPolicyCallbackFromNative(int event, String regId, int val)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setRecordingCallback(AudioRecordingCallback cb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void recordingCallbackFromNative(int event, int riid, int uid, int session, int source, int portId, boolean silenced, int[] recordingFormat, AudioEffect.Descriptor[] clientEffects, AudioEffect.Descriptor[] effects, int activeSource)",
    "returnType" : "void",
    "comment" : "\n     * Callback from native for recording configuration updates.\n     * @param event\n     * @param riid\n     * @param uid\n     * @param session\n     * @param source\n     * @param portId\n     * @param silenced\n     * @param recordingFormat see\n     *     {@link AudioRecordingCallback#onRecordingConfigurationChanged(int, int, int, int, int, \\\n     int, boolean, int[], AudioEffect.Descriptor[], AudioEffect.Descriptor[], int, String)}\n     *     for the description of the record format.\n     * @param cleintEffects\n     * @param effects\n     * @param activeSource\n     ",
    "links" : [ "#onRecordingConfigurationChanged(int" ]
  }, {
    "name" : "public static void setRoutingCallback(RoutingUpdateCallback cb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void routingCallbackFromNative()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setVolumeRangeInitRequestCallback(VolumeRangeInitRequestCallback cb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void volRangeInitReqCallbackFromNative()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String audioSystemErrorToString(@AudioSystemError int error)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * Convert an int error value to its String value for readability.\n     * Accepted error values are the java AudioSystem errors, matching android_media_AudioErrors.h,\n     * which map onto the native status_t type.\n     * @param error one of the java AudioSystem errors\n     * @return a human-readable string\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInputDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothOutDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothInDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothA2dpOutDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothScoOutDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothScoInDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothScoDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothLeOutDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothLeInDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBluetoothLeDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isRemoteSubmixDevice(int deviceType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String deviceStateToString(int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getOutputDeviceName(int device)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getInputDeviceName(int device)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getDeviceName(int device)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * Returns a human readable name for a given device type\n     * @param device a native device type, NOT an AudioDeviceInfo type\n     * @return a string describing the device type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String forceUseConfigToString(int config)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String forceUseUsageToString(int usage)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int setStreamVolumeIndexAS(int stream, int index, int device)",
    "returnType" : "int",
    "comment" : " @hide Wrapper for native methods called from AudioService ",
    "links" : [ ]
  }, {
    "name" : "public static int setDeviceConnectionState(AudioDeviceAttributes attributes, int state, int codecFormat)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @return command completion status, one of {@link #AUDIO_STATUS_OK},\n     *     {@link #AUDIO_STATUS_ERROR} or {@link #AUDIO_STATUS_SERVER_DIED}\n     ",
    "links" : [ "#AUDIO_STATUS_OK", "#AUDIO_STATUS_ERROR", "#AUDIO_STATUS_SERVER_DIED" ]
  }, {
    "name" : "public static native int setDeviceConnectionState(int state, Parcel parcel, int codecFormat)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getDeviceConnectionState(int device, String device_address)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int handleDeviceConfigChange(int device, String device_address, String device_name, int codecFormat)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int setPhoneState(int state)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setPhoneState(int state, int uid)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Send the current audio mode to audio policy manager and audio HAL.\n     * @param state the audio mode\n     * @param uid the UID of the app owning the audio mode\n     * @return command completion status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setForceUse(int usage, int config)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getForceUse(int usage)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int initStreamVolume(int stream, int indexMin, int indexMax)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native int setStreamVolumeIndex(int stream, int index, int device)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native int getStreamVolumeIndex(int stream, int device)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setVolumeIndexForAttributes(@NonNull AudioAttributes attributes, int index, int device)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * set a volume for the given {@link AudioAttributes} and for all other stream that belong to\n     * the same volume group.\n     * @param attributes the {@link AudioAttributes} to be considered\n     * @param index to be applied\n     * @param device the volume device to be considered\n     * @return command completion status.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public static native int getVolumeIndexForAttributes(@NonNull AudioAttributes attributes, int device)",
    "returnType" : "int",
    "comment" : "\n    * @hide\n    * get the volume index for the given {@link AudioAttributes}.\n    * @param attributes the {@link AudioAttributes} to be considered\n    * @param device the volume device to be considered\n    * @return volume index for the given {@link AudioAttributes} and volume device.\n    ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public static native int getMinVolumeIndexForAttributes(@NonNull AudioAttributes attributes)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * get the minimum volume index for the given {@link AudioAttributes}.\n     * @param attributes the {@link AudioAttributes} to be considered\n     * @return minimum volume index for the given {@link AudioAttributes}.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public static native int getMaxVolumeIndexForAttributes(@NonNull AudioAttributes attributes)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * get the maximum volume index for the given {@link AudioAttributes}.\n     * @param attributes the {@link AudioAttributes} to be considered\n     * @return maximum volume index for the given {@link AudioAttributes}.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public static native int setMasterVolume(float value)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native float getMasterVolume()",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setMasterMute(boolean mute)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean getMasterMute()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getDevicesForStream(int stream)",
    "returnType" : "int",
    "comment" : " @hide\n     * Only used (unsupported) for legacy apps.\n     * @deprecated on {@link android.os.Build.VERSION_CODES#T} as new devices\n     *             will have multi-bit device types.\n     *             Use {@link AudioManager#getDevicesForAttributes(AudioAttributes)} instead.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#T", "android.media.AudioManager#getDevicesForAttributes(AudioAttributes)" ]
  }, {
    "name" : "public static int getDeviceMaskFromSet(@NonNull Set<Integer> deviceSet)",
    "returnType" : "int",
    "comment" : " @hide\n     * Conversion from a device set to a bit mask.\n     *\n     * Legacy compatibility method (use a device list instead of a bit mask).\n     * Conversion to bit mask skips multi-bit (S and later) internal device types\n     * (e.g. AudioSystem.DEVICE_OUT* or AudioManager.DEVICE_OUT*) for legacy\n     * compatibility reasons.  Legacy apps will not understand these new device types\n     * and it will raise false matches with old device types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String deviceSetToString(@NonNull Set<Integer> devices)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static ArrayList<AudioDeviceAttributes> getDevicesForAttributes(@NonNull AudioAttributes attributes, boolean forVolume)",
    "returnType" : "ArrayList<AudioDeviceAttributes>",
    "comment" : "\n     * @hide\n     * Do not use directly, see {@link AudioManager#getDevicesForAttributes(AudioAttributes)}\n     * Get the audio devices that would be used for the routing of the given audio attributes.\n     * @param attributes the {@link AudioAttributes} for which the routing is being queried\n     * @return an empty list if there was an issue with the request, a list of audio devices\n     *   otherwise (typically one device, except for duplicated paths).\n     ",
    "links" : [ "android.media.AudioAttributes", "android.media.AudioManager#getDevicesForAttributes(AudioAttributes)" ]
  }, {
    "name" : "private static native int getDevicesForAttributes(@NonNull AudioAttributes aa, @NonNull AudioDeviceAttributes[] devices, boolean forVolume)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native boolean getMasterMono()",
    "returnType" : "boolean",
    "comment" : " @hide returns true if master mono is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public static native int setMasterMono(boolean mono)",
    "returnType" : "int",
    "comment" : " @hide enables or disables the master mono mode. ",
    "links" : [ ]
  }, {
    "name" : "public static native int setRttEnabled(boolean enabled)",
    "returnType" : "int",
    "comment" : " @hide enables or disables the RTT mode. ",
    "links" : [ ]
  }, {
    "name" : "public static native float getMasterBalance()",
    "returnType" : "float",
    "comment" : " @hide returns master balance value in range -1.f -> 1.f, where 0.f is dead center. ",
    "links" : [ ]
  }, {
    "name" : "public static native int setMasterBalance(float balance)",
    "returnType" : "int",
    "comment" : " @hide Changes the audio balance of the device. ",
    "links" : [ ]
  }, {
    "name" : "public static native int getPrimaryOutputSamplingRate()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getPrimaryOutputFrameCount()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getOutputLatency(int stream)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setLowRamDevice(boolean isLowRamDevice, long totalMemory)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int checkAudioFlinger()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native void setAudioFlingerBinder(IBinder audioFlinger)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int listAudioPorts(ArrayList<AudioPort> ports, int[] generation)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getSupportedDeviceTypes(int flags, IntArray internalDeviceTypes)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int createAudioPatch(AudioPatch[] patch, AudioPortConfig[] sources, AudioPortConfig[] sinks)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int releaseAudioPatch(AudioPatch patch)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int listAudioPatches(ArrayList<AudioPatch> patches, int[] generation)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setAudioPortConfig(AudioPortConfig config)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int startAudioSource(AudioPortConfig config, AudioAttributes audioAttributes)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int stopAudioSource(int handle)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_register_dynamic_policy_callback()",
    "returnType" : "void",
    "comment" : " declare this instance as having a dynamic policy callback handler",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_register_recording_callback()",
    "returnType" : "void",
    "comment" : " declare this instance as having a recording configuration update callback handler",
    "links" : [ ]
  }, {
    "name" : "private static native void native_register_routing_callback()",
    "returnType" : "void",
    "comment" : " declare this instance as having a routing update callback handler",
    "links" : [ ]
  }, {
    "name" : "private static native void native_register_vol_range_init_req_callback()",
    "returnType" : "void",
    "comment" : " declare this instance as having a volume range init request handler",
    "links" : [ ]
  }, {
    "name" : "public static native int getAudioHwSyncForSession(int sessionId)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int registerPolicyMixes(ArrayList<AudioMix> mixes, boolean register)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getRegisteredPolicyMixes(@NonNull List<AudioMix> devices)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int updatePolicyMixes(AudioMix[] mixes, AudioMixingRule[] updatedMixingRules)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setUidDeviceAffinities(int uid, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : " @hide see AudioPolicy.setUidDeviceAffinities() ",
    "links" : [ ]
  }, {
    "name" : "public static native int removeUidDeviceAffinities(int uid)",
    "returnType" : "int",
    "comment" : " @hide see AudioPolicy.removeUidDeviceAffinities() ",
    "links" : [ ]
  }, {
    "name" : "public static native int setUserIdDeviceAffinities(int userId, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : " @hide see AudioPolicy.setUserIdDeviceAffinities() ",
    "links" : [ ]
  }, {
    "name" : "public static native int removeUserIdDeviceAffinities(int userId)",
    "returnType" : "int",
    "comment" : " @hide see AudioPolicy.removeUserIdDeviceAffinities() ",
    "links" : [ ]
  }, {
    "name" : "public static native int systemReady()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native float getStreamVolumeDB(int stream, int index, int device)",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setSupportedSystemUsages(int[] systemUsages)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Communicate supported system usages to audio policy service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setAllowedCapturePolicy(int uid, int flags)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @see AudioManager#setAllowedCapturePolicy()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getDirectPlaybackSupport(@NonNull AudioFormat format, @NonNull AudioAttributes attributes)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns how direct playback of an audio format is currently available on the device.\n     * @param format the audio format (codec, sample rate, channels) being checked.\n     * @param attributes the {@link AudioAttributes} to be used for playback\n     * @return the direct playback mode available with given format and attributes. Any combination\n     *         of {@link #DIRECT_NOT_SUPPORTED}, {@link #DIRECT_OFFLOAD_SUPPORTED},\n     *         {@link #DIRECT_OFFLOAD_GAPLESS_SUPPORTED} and {@link #DIRECT_BITSTREAM_SUPPORTED}.\n     ",
    "links" : [ "#DIRECT_NOT_SUPPORTED", "#DIRECT_BITSTREAM_SUPPORTED", "android.media.AudioAttributes", "#DIRECT_OFFLOAD_SUPPORTED", "#DIRECT_OFFLOAD_GAPLESS_SUPPORTED" ]
  }, {
    "name" : " static int getOffloadSupport(@NonNull AudioFormat format, @NonNull AudioAttributes attr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_get_offload_support(int encoding, int sampleRate, int channelMask, int channelIndexMask, int streamType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native int getMicrophones(ArrayList<MicrophoneInfo> microphonesInfo)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getSurroundFormats(Map<Integer, Boolean> surroundFormats)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getReportedSurroundFormats(ArrayList<Integer> surroundFormats)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int getHwOffloadFormatsSupportedForBluetoothMedia(@BtOffloadDeviceType int deviceType, ArrayList<Integer> formatList)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns a list of audio formats (codec) supported on the A2DP and LE audio offload path.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setSurroundFormatEnabled(int audioFormat, boolean enabled)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static native int setActiveAssistantServicesUids(int[] uids)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Communicate UIDs of the active assistant to audio policy service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setAssistantServicesUids(int[] uids)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Communicate UIDs of assistant to audio policy service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setA11yServicesUids(int[] uids)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Communicate UIDs of active accessibility services to audio policy service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setCurrentImeUid(int uid)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Communicate UID of current InputMethodService to audio policy service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isHapticPlaybackSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @see AudioManager#isHapticPlaybackSupported()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isUltrasoundSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @see AudioManager#isUltrasoundSupported()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setAudioHalPids(int[] pids)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Send audio HAL server process pids to native audioserver process for use\n     * when generating audio HAL servers tombstones\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isCallScreeningModeSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @see AudioManager#isCallScreeningModeSupported()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int setDevicesRoleForStrategy(int strategy, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Set device as role for product strategy.\n     * @param strategy the id of the strategy to configure\n     * @param role the role of the devices\n     * @param devices the list of devices to be set as role for the given strategy\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "private static native int setDevicesRoleForStrategy(int strategy, int role, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Set device as role for product strategy.\n     * @param strategy the id of the strategy to configure\n     * @param role the role of the devices\n     * @param types all device types\n     * @param addresses all device addresses\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static int removeDevicesRoleForStrategy(int strategy, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Remove device as role for product strategy.\n     * @param strategy the id of the strategy to configure\n     * @param role the role of the devices\n     * @param devices the list of devices to be removed as role for the given strategy\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static native int removeDevicesRoleForStrategy(int strategy, int role, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Remove devices as role for the strategy\n     * @param strategy the id of the strategy to configure\n     * @param role the role of the devices\n     * @param types all device types\n     * @param addresses all device addresses\n     * @return {@link #SUCCESS} if successfully removed\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static native int clearDevicesRoleForStrategy(int strategy, int role)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Remove all devices as role for the strategy\n     * @param strategy the id of the strategy to configure\n     * @param role the role of the devices\n     * @return {@link #SUCCESS} if successfully removed\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static native int getDevicesForRoleAndStrategy(int strategy, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Query previously set devices as role for a strategy\n     * @param strategy the id of the strategy to query for\n     * @param role the role of the devices\n     * @param devices a list that will contain the devices of role\n     * @return {@link #SUCCESS} if there is a preferred device and it was successfully retrieved\n     *     and written to the array\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "private static Pair<int[], String[]> populateInputDevicesTypeAndAddress(@NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "Pair<int[], String[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int setDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Set devices as role for capture preset.\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @param devices the list of devices to be set as role for the given capture preset\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "private static native int setDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Set devices as role for capture preset.\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @param types all device types\n     * @param addresses all device addresses\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static int addDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Add devices as role for capture preset.\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @param devices the list of devices to be added as role for the given capture preset\n     * @return {@link #SUCCESS} if successfully add\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "private static native int addDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Add devices as role for capture preset.\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @param types all device types\n     * @param addresses all device addresses\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static int removeDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Remove devices as role for the capture preset\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @param devices the devices to be removed\n     * @return {@link #SUCCESS} if successfully removed\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "private static native int removeDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull int[] types, @NonNull String[] addresses)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Remove devices as role for capture preset.\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @param types all device types\n     * @param addresses all device addresses\n     * @return {@link #SUCCESS} if successfully set\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static native int clearDevicesRoleForCapturePreset(int capturePreset, int role)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Remove all devices as role for the capture preset\n     * @param capturePreset the capture preset to configure\n     * @param role the role of the devices\n     * @return {@link #SUCCESS} if successfully removed\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static native int getDevicesForRoleAndCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Query previously set devices as role for a capture preset\n     * @param capturePreset the capture preset to query for\n     * @param role the role of the devices\n     * @param devices a list that will contain the devices of role\n     * @return {@link #SUCCESS} if there is a preferred device and it was successfully retrieved\n     *     and written to the array\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static native int setVibratorInfos(@NonNull List<Vibrator> vibrators)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Set the vibrators' information. The value will be used to initialize HapticGenerator.\n     * @param vibrators a list of all available vibrators\n     * @return command completion status\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ISpatializer getSpatializer(INativeSpatializerCallback callback)",
    "returnType" : "ISpatializer",
    "comment" : "\n     * @hide\n     * If a spatializer effect is present on the platform, this will return an\n     * ISpatializer interface to control this feature.\n     * If no spatializer is present, a null interface is returned.\n     * The INativeSpatializerCallback passed must not be null.\n     * Only one ISpatializer interface can exist at a given time. The native audio policy\n     * service will reject the request if an interface was already acquired and previous owner\n     * did not die or call ISpatializer.release().\n     * @param callback the callback to receive state updates if the ISpatializer\n     *        interface is acquired.\n     * @return the ISpatializer interface made available to control the\n     *        platform spatializer\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native IBinder nativeGetSpatializer(INativeSpatializerCallback callback)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native boolean canBeSpatialized(AudioAttributes attributes, AudioFormat format, AudioDeviceAttributes[] devices)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Queries if some kind of spatialization will be performed if the audio playback context\n     * described by the provided arguments is present.\n     * The context is made of:\n     * - The audio attributes describing the playback use case.\n     * - The audio configuration describing the audio format, channels, sampling rate ...\n     * - The devices describing the sink audio device selected for playback.\n     * All arguments are optional and only the specified arguments are used to match against\n     * supported criteria. For instance, supplying no argument will tell if spatialization is\n     * supported or not in general.\n     * @param attributes audio attributes describing the playback use case\n     * @param format audio configuration describing the audio format, channels, sampling rate...\n     * @param devices the sink audio device selected for playback\n     * @return true if spatialization is enabled for this context, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ISoundDose getSoundDoseInterface(ISoundDoseCallback callback)",
    "returnType" : "ISoundDose",
    "comment" : "\n     * @hide\n     * Register the sound dose callback with the audio server and returns the binder to the\n     * ISoundDose interface.\n     *\n     * @return ISoundDose interface with registered callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native IBinder nativeGetSoundDose(ISoundDoseCallback callback)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native int getDirectProfilesForAttributes(@NonNull AudioAttributes attributes, @NonNull ArrayList<AudioProfile> audioProfilesList)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param attributes audio attributes describing the playback use case\n     * @param audioProfilesList the list of AudioProfiles that can be played as direct output\n     * @return {@link #SUCCESS} if the list of AudioProfiles was successfully created (can be empty)\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "public static int getValueForVibrateSetting(int existingValue, int vibrateType, int vibrateSetting)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @see AudioManager#setVibrateSetting(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultStreamVolume(int streamType)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String streamToString(int stream)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getPlatformType(Context context)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the platform type that this is running on. One of:\n     * <ul>\n     * <li>{@link #PLATFORM_VOICE}</li>\n     * <li>{@link #PLATFORM_TELEVISION}</li>\n     * <li>{@link #PLATFORM_DEFAULT}</li>\n     * </ul>\n     ",
    "links" : [ "#PLATFORM_VOICE", "#PLATFORM_DEFAULT", "#PLATFORM_TELEVISION" ]
  }, {
    "name" : "public static boolean isSingleVolume(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return whether the system uses a single volume stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<Integer> generateAudioDeviceTypesSet(@NonNull List<AudioDeviceAttributes> deviceList)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * @hide\n     * Return a set of audio device types from a list of audio device attributes, which may\n     * represent multiple audio device types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<Integer> intersectionAudioDeviceTypes(@NonNull Set<Integer> a, @NonNull Set<Integer> b)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * @hide\n     * Return the intersection of two audio device types collections.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSingleAudioDeviceType(@NonNull Set<Integer> types, int type)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Return true if the audio device types collection only contains the given device type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLeAudioDeviceType(int type)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Return true if the audio device type is a Bluetooth LE Audio device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getSupportedMixerAttributes(int deviceId, @NonNull List<AudioMixerAttributes> mixerAttrs)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Query the mixer attributes that can be set as preferred mixer attributes for the given\n     * device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setPreferredMixerAttributes(@NonNull AudioAttributes attributes, int portId, int uid, @NonNull AudioMixerAttributes mixerAttributes)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Set preferred mixer attributes for a given device when playing particular\n     * audio attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getPreferredMixerAttributes(@NonNull AudioAttributes attributes, int portId, List<AudioMixerAttributes> mixerAttributesList)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Get preferred mixer attributes that is previously set via\n     * {link #setPreferredMixerAttributes}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int clearPreferredMixerAttributes(@NonNull AudioAttributes attributes, int portId, int uid)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Clear preferred mixer attributes that is previously set via\n     * {@link #setPreferredMixerAttributes}\n     ",
    "links" : [ "#setPreferredMixerAttributes" ]
  }, {
    "name" : "public static native boolean supportsBluetoothVariableLatency()",
    "returnType" : "boolean",
    "comment" : "\n     * Requests if the implementation supports controlling the latency modes\n     * over the Bluetooth A2DP or LE Audio links.\n     *\n     * @return true if supported, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int setBluetoothVariableLatencyEnabled(boolean enabled)",
    "returnType" : "int",
    "comment" : "\n     * Enables or disables the variable Bluetooth latency control mechanism in the\n     * audio framework and the audio HAL. This does not apply to the latency mode control\n     * on the spatializer output as this is a built-in feature.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isBluetoothVariableLatencyEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the variable Bluetooth latency control mechanism is enabled or disabled.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native int native_getMaxChannelCount()", "private static native int native_getMaxSampleRate()", "private static native int native_getMinSampleRate()", "public static final int getNumStreamTypes()", "public static native int muteMicrophone(boolean on)", "public static native boolean isMicrophoneMuted()", "public static String modeToString(int mode)", "public static int audioFormatToBluetoothSourceCodec(@AudioFormatNativeEnumForBtCodec int audioFormat)", "public static int audioFormatToBluetoothLeAudioSourceCodec(@AudioFormatNativeEnumForBtLeAudioCodec int audioFormat)", "public static int bluetoothA2dpCodecToAudioFormat(int btCodec)", "public static int bluetoothLeCodecToAudioFormat(int btCodec)", "public static String audioFormatToString(int audioFormat)", "public static native boolean isStreamActive(int stream, int inPastMs)", "public static native boolean isStreamActiveRemotely(int stream, int inPastMs)", "public static native boolean isSourceActive(int source)", "public static native int newAudioSessionId()", "public static native int newAudioPlayerId()", "public static native int newAudioRecorderId()", "public static native int setParameters(String keyValuePairs)", "public static native String getParameters(String keys)", "public static void setErrorCallback(ErrorCallback cb)", "private static void errorCallbackFromNative(int error)", "public static void setDynamicPolicyCallback(DynamicPolicyCallback cb)", "private static void dynamicPolicyCallbackFromNative(int event, String regId, int val)", "public static void setRecordingCallback(AudioRecordingCallback cb)", "private static void recordingCallbackFromNative(int event, int riid, int uid, int session, int source, int portId, boolean silenced, int[] recordingFormat, AudioEffect.Descriptor[] clientEffects, AudioEffect.Descriptor[] effects, int activeSource)", "public static void setRoutingCallback(RoutingUpdateCallback cb)", "private static void routingCallbackFromNative()", "public static void setVolumeRangeInitRequestCallback(VolumeRangeInitRequestCallback cb)", "private static void volRangeInitReqCallbackFromNative()", "public static String audioSystemErrorToString(@AudioSystemError int error)", "public static boolean isInputDevice(int deviceType)", "public static boolean isBluetoothDevice(int deviceType)", "public static boolean isBluetoothOutDevice(int deviceType)", "public static boolean isBluetoothInDevice(int deviceType)", "public static boolean isBluetoothA2dpOutDevice(int deviceType)", "public static boolean isBluetoothScoOutDevice(int deviceType)", "public static boolean isBluetoothScoInDevice(int deviceType)", "public static boolean isBluetoothScoDevice(int deviceType)", "public static boolean isBluetoothLeOutDevice(int deviceType)", "public static boolean isBluetoothLeInDevice(int deviceType)", "public static boolean isBluetoothLeDevice(int deviceType)", "public static boolean isRemoteSubmixDevice(int deviceType)", "public static String deviceStateToString(int state)", "public static String getOutputDeviceName(int device)", "public static String getInputDeviceName(int device)", "public static String getDeviceName(int device)", "public static String forceUseConfigToString(int config)", "public static String forceUseUsageToString(int usage)", "public static int setStreamVolumeIndexAS(int stream, int index, int device)", "public static int setDeviceConnectionState(AudioDeviceAttributes attributes, int state, int codecFormat)", "public static native int setDeviceConnectionState(int state, Parcel parcel, int codecFormat)", "public static native int getDeviceConnectionState(int device, String device_address)", "public static native int handleDeviceConfigChange(int device, String device_address, String device_name, int codecFormat)", "public static int setPhoneState(int state)", "public static native int setPhoneState(int state, int uid)", "public static native int setForceUse(int usage, int config)", "public static native int getForceUse(int usage)", "public static native int initStreamVolume(int stream, int indexMin, int indexMax)", "private static native int setStreamVolumeIndex(int stream, int index, int device)", "public static native int getStreamVolumeIndex(int stream, int device)", "public static native int setVolumeIndexForAttributes(@NonNull AudioAttributes attributes, int index, int device)", "public static native int getVolumeIndexForAttributes(@NonNull AudioAttributes attributes, int device)", "public static native int getMinVolumeIndexForAttributes(@NonNull AudioAttributes attributes)", "public static native int getMaxVolumeIndexForAttributes(@NonNull AudioAttributes attributes)", "public static native int setMasterVolume(float value)", "public static native float getMasterVolume()", "public static native int setMasterMute(boolean mute)", "public static native boolean getMasterMute()", "public static int getDevicesForStream(int stream)", "public static int getDeviceMaskFromSet(@NonNull Set<Integer> deviceSet)", "public static String deviceSetToString(@NonNull Set<Integer> devices)", "public static ArrayList<AudioDeviceAttributes> getDevicesForAttributes(@NonNull AudioAttributes attributes, boolean forVolume)", "private static native int getDevicesForAttributes(@NonNull AudioAttributes aa, @NonNull AudioDeviceAttributes[] devices, boolean forVolume)", "public static native boolean getMasterMono()", "public static native int setMasterMono(boolean mono)", "public static native int setRttEnabled(boolean enabled)", "public static native float getMasterBalance()", "public static native int setMasterBalance(float balance)", "public static native int getPrimaryOutputSamplingRate()", "public static native int getPrimaryOutputFrameCount()", "public static native int getOutputLatency(int stream)", "public static native int setLowRamDevice(boolean isLowRamDevice, long totalMemory)", "public static native int checkAudioFlinger()", "public static native void setAudioFlingerBinder(IBinder audioFlinger)", "public static native int listAudioPorts(ArrayList<AudioPort> ports, int[] generation)", "public static native int getSupportedDeviceTypes(int flags, IntArray internalDeviceTypes)", "public static native int createAudioPatch(AudioPatch[] patch, AudioPortConfig[] sources, AudioPortConfig[] sinks)", "public static native int releaseAudioPatch(AudioPatch patch)", "public static native int listAudioPatches(ArrayList<AudioPatch> patches, int[] generation)", "public static native int setAudioPortConfig(AudioPortConfig config)", "public static native int startAudioSource(AudioPortConfig config, AudioAttributes audioAttributes)", "public static native int stopAudioSource(int handle)", "private static final native void native_register_dynamic_policy_callback()", "private static final native void native_register_recording_callback()", "private static native void native_register_routing_callback()", "private static native void native_register_vol_range_init_req_callback()", "public static native int getAudioHwSyncForSession(int sessionId)", "public static native int registerPolicyMixes(ArrayList<AudioMix> mixes, boolean register)", "public static native int getRegisteredPolicyMixes(@NonNull List<AudioMix> devices)", "public static native int updatePolicyMixes(AudioMix[] mixes, AudioMixingRule[] updatedMixingRules)", "public static native int setUidDeviceAffinities(int uid, @NonNull int[] types, @NonNull String[] addresses)", "public static native int removeUidDeviceAffinities(int uid)", "public static native int setUserIdDeviceAffinities(int userId, @NonNull int[] types, @NonNull String[] addresses)", "public static native int removeUserIdDeviceAffinities(int userId)", "public static native int systemReady()", "public static native float getStreamVolumeDB(int stream, int index, int device)", "public static native int setSupportedSystemUsages(int[] systemUsages)", "public static native int setAllowedCapturePolicy(int uid, int flags)", "public static native int getDirectPlaybackSupport(@NonNull AudioFormat format, @NonNull AudioAttributes attributes)", " static int getOffloadSupport(@NonNull AudioFormat format, @NonNull AudioAttributes attr)", "private static native int native_get_offload_support(int encoding, int sampleRate, int channelMask, int channelIndexMask, int streamType)", "public static native int getMicrophones(ArrayList<MicrophoneInfo> microphonesInfo)", "public static native int getSurroundFormats(Map<Integer, Boolean> surroundFormats)", "public static native int getReportedSurroundFormats(ArrayList<Integer> surroundFormats)", "public static native int getHwOffloadFormatsSupportedForBluetoothMedia(@BtOffloadDeviceType int deviceType, ArrayList<Integer> formatList)", "public static native int setSurroundFormatEnabled(int audioFormat, boolean enabled)", "public static native int setActiveAssistantServicesUids(int[] uids)", "public static native int setAssistantServicesUids(int[] uids)", "public static native int setA11yServicesUids(int[] uids)", "public static native int setCurrentImeUid(int uid)", "public static native boolean isHapticPlaybackSupported()", "public static native boolean isUltrasoundSupported()", "public static native int setAudioHalPids(int[] pids)", "public static native boolean isCallScreeningModeSupported()", "public static int setDevicesRoleForStrategy(int strategy, int role, @NonNull List<AudioDeviceAttributes> devices)", "private static native int setDevicesRoleForStrategy(int strategy, int role, @NonNull int[] types, @NonNull String[] addresses)", "public static int removeDevicesRoleForStrategy(int strategy, int role, @NonNull List<AudioDeviceAttributes> devices)", "public static native int removeDevicesRoleForStrategy(int strategy, int role, @NonNull int[] types, @NonNull String[] addresses)", "public static native int clearDevicesRoleForStrategy(int strategy, int role)", "public static native int getDevicesForRoleAndStrategy(int strategy, int role, @NonNull List<AudioDeviceAttributes> devices)", "private static Pair<int[], String[]> populateInputDevicesTypeAndAddress(@NonNull List<AudioDeviceAttributes> devices)", "public static int setDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)", "private static native int setDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull int[] types, @NonNull String[] addresses)", "public static int addDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)", "private static native int addDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull int[] types, @NonNull String[] addresses)", "public static int removeDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)", "private static native int removeDevicesRoleForCapturePreset(int capturePreset, int role, @NonNull int[] types, @NonNull String[] addresses)", "public static native int clearDevicesRoleForCapturePreset(int capturePreset, int role)", "public static native int getDevicesForRoleAndCapturePreset(int capturePreset, int role, @NonNull List<AudioDeviceAttributes> devices)", "public static native int setVibratorInfos(@NonNull List<Vibrator> vibrators)", "public static ISpatializer getSpatializer(INativeSpatializerCallback callback)", "private static native IBinder nativeGetSpatializer(INativeSpatializerCallback callback)", "public static native boolean canBeSpatialized(AudioAttributes attributes, AudioFormat format, AudioDeviceAttributes[] devices)", "public static ISoundDose getSoundDoseInterface(ISoundDoseCallback callback)", "private static native IBinder nativeGetSoundDose(ISoundDoseCallback callback)", "public static native int getDirectProfilesForAttributes(@NonNull AudioAttributes attributes, @NonNull ArrayList<AudioProfile> audioProfilesList)", "public static int getValueForVibrateSetting(int existingValue, int vibrateType, int vibrateSetting)", "public static int getDefaultStreamVolume(int streamType)", "public static String streamToString(int stream)", "public static int getPlatformType(Context context)", "public static boolean isSingleVolume(Context context)", "public static Set<Integer> generateAudioDeviceTypesSet(@NonNull List<AudioDeviceAttributes> deviceList)", "public static Set<Integer> intersectionAudioDeviceTypes(@NonNull Set<Integer> a, @NonNull Set<Integer> b)", "public static boolean isSingleAudioDeviceType(@NonNull Set<Integer> types, int type)", "public static boolean isLeAudioDeviceType(int type)", "public static native int getSupportedMixerAttributes(int deviceId, @NonNull List<AudioMixerAttributes> mixerAttrs)", "public static native int setPreferredMixerAttributes(@NonNull AudioAttributes attributes, int portId, int uid, @NonNull AudioMixerAttributes mixerAttributes)", "public static native int getPreferredMixerAttributes(@NonNull AudioAttributes attributes, int portId, List<AudioMixerAttributes> mixerAttributesList)", "public static native int clearPreferredMixerAttributes(@NonNull AudioAttributes attributes, int portId, int uid)", "public static native boolean supportsBluetoothVariableLatency()", "public static native int setBluetoothVariableLatencyEnabled(boolean enabled)", "public static native boolean isBluetoothVariableLatencyEnabled()" ],
  "variableNames" : [ "DEBUG_VOLUME", "TAG", "STREAM_DEFAULT", "STREAM_VOICE_CALL", "STREAM_SYSTEM", "STREAM_RING", "STREAM_MUSIC", "STREAM_ALARM", "STREAM_NOTIFICATION", "STREAM_BLUETOOTH_SCO", "STREAM_SYSTEM_ENFORCED", "STREAM_DTMF", "STREAM_TTS", "STREAM_ACCESSIBILITY", "STREAM_ASSISTANT", "NUM_STREAMS", "OUT_CHANNEL_COUNT_MAX", "SAMPLE_RATE_HZ_MAX", "SAMPLE_RATE_HZ_MIN", "FCC_24", "NUM_STREAM_TYPES", "STREAM_NAMES", "MODE_INVALID", "MODE_CURRENT", "MODE_NORMAL", "MODE_RINGTONE", "MODE_IN_CALL", "MODE_IN_COMMUNICATION", "MODE_CALL_SCREENING", "MODE_CALL_REDIRECT", "MODE_COMMUNICATION_REDIRECT", "NUM_MODES", "AUDIO_FORMAT_INVALID", "AUDIO_FORMAT_DEFAULT", "AUDIO_FORMAT_AAC", "AUDIO_FORMAT_SBC", "AUDIO_FORMAT_APTX", "AUDIO_FORMAT_APTX_HD", "AUDIO_FORMAT_LDAC", "AUDIO_FORMAT_LC3", "AUDIO_FORMAT_OPUS", "ROUTE_EARPIECE", "ROUTE_SPEAKER", "ROUTE_BLUETOOTH", "ROUTE_BLUETOOTH_SCO", "ROUTE_HEADSET", "ROUTE_BLUETOOTH_A2DP", "ROUTE_ALL", "AUDIO_SESSION_ALLOCATE", "AUDIO_STATUS_OK", "AUDIO_STATUS_ERROR", "AUDIO_STATUS_SERVER_DIED", "sErrorCallback", "DYNAMIC_POLICY_EVENT_MIX_STATE_UPDATE", "sDynPolicyCallback", "sRecordingCallback", "sRoutingUpdateCallback", "sVolRangeInitReqCallback", "SUCCESS", "ERROR", "BAD_VALUE", "INVALID_OPERATION", "PERMISSION_DENIED", "NO_INIT", "DEAD_OBJECT", "WOULD_BLOCK", "DEVICE_NONE", "DEVICE_BIT_IN", "DEVICE_BIT_DEFAULT", "DEVICE_OUT_EARPIECE", "DEVICE_OUT_SPEAKER", "DEVICE_OUT_WIRED_HEADSET", "DEVICE_OUT_WIRED_HEADPHONE", "DEVICE_OUT_BLUETOOTH_SCO", "DEVICE_OUT_BLUETOOTH_SCO_HEADSET", "DEVICE_OUT_BLUETOOTH_SCO_CARKIT", "DEVICE_OUT_BLUETOOTH_A2DP", "DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES", "DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER", "DEVICE_OUT_AUX_DIGITAL", "DEVICE_OUT_HDMI", "DEVICE_OUT_ANLG_DOCK_HEADSET", "DEVICE_OUT_DGTL_DOCK_HEADSET", "DEVICE_OUT_USB_ACCESSORY", "DEVICE_OUT_USB_DEVICE", "DEVICE_OUT_REMOTE_SUBMIX", "DEVICE_OUT_TELEPHONY_TX", "DEVICE_OUT_LINE", "DEVICE_OUT_HDMI_ARC", "DEVICE_OUT_HDMI_EARC", "DEVICE_OUT_SPDIF", "DEVICE_OUT_FM", "DEVICE_OUT_AUX_LINE", "DEVICE_OUT_SPEAKER_SAFE", "DEVICE_OUT_IP", "DEVICE_OUT_BUS", "DEVICE_OUT_PROXY", "DEVICE_OUT_USB_HEADSET", "DEVICE_OUT_HEARING_AID", "DEVICE_OUT_ECHO_CANCELLER", "DEVICE_OUT_BLE_HEADSET", "DEVICE_OUT_BLE_SPEAKER", "DEVICE_OUT_BLE_BROADCAST", "DEVICE_OUT_DEFAULT", "DEVICE_OUT_ALL_USB", "DEVICE_OUT_ALL_SET", "DEVICE_OUT_ALL_A2DP_SET", "DEVICE_OUT_ALL_SCO_SET", "DEVICE_OUT_ALL_USB_SET", "DEVICE_OUT_ALL_HDMI_SYSTEM_AUDIO_SET", "DEVICE_ALL_HDMI_SYSTEM_AUDIO_AND_SPEAKER_SET", "DEVICE_OUT_ALL_BLE_SET", "DEVICE_IN_COMMUNICATION", "DEVICE_IN_AMBIENT", "DEVICE_IN_BUILTIN_MIC", "DEVICE_IN_BLUETOOTH_SCO_HEADSET", "DEVICE_IN_WIRED_HEADSET", "DEVICE_IN_AUX_DIGITAL", "DEVICE_IN_HDMI", "DEVICE_IN_VOICE_CALL", "DEVICE_IN_TELEPHONY_RX", "DEVICE_IN_BACK_MIC", "DEVICE_IN_REMOTE_SUBMIX", "DEVICE_IN_ANLG_DOCK_HEADSET", "DEVICE_IN_DGTL_DOCK_HEADSET", "DEVICE_IN_USB_ACCESSORY", "DEVICE_IN_USB_DEVICE", "DEVICE_IN_FM_TUNER", "DEVICE_IN_TV_TUNER", "DEVICE_IN_LINE", "DEVICE_IN_SPDIF", "DEVICE_IN_BLUETOOTH_A2DP", "DEVICE_IN_LOOPBACK", "DEVICE_IN_IP", "DEVICE_IN_BUS", "DEVICE_IN_PROXY", "DEVICE_IN_USB_HEADSET", "DEVICE_IN_BLUETOOTH_BLE", "DEVICE_IN_HDMI_ARC", "DEVICE_IN_HDMI_EARC", "DEVICE_IN_ECHO_REFERENCE", "DEVICE_IN_BLE_HEADSET", "DEVICE_IN_DEFAULT", "DEVICE_IN_ALL_SET", "DEVICE_IN_ALL_SCO_SET", "DEVICE_IN_ALL_USB_SET", "DEVICE_IN_ALL_BLE_SET", "LEGACY_REMOTE_SUBMIX_ADDRESS", "DEVICE_STATE_UNAVAILABLE", "DEVICE_STATE_AVAILABLE", "NUM_DEVICE_STATES", "DEVICE_OUT_EARPIECE_NAME", "DEVICE_OUT_SPEAKER_NAME", "DEVICE_OUT_WIRED_HEADSET_NAME", "DEVICE_OUT_WIRED_HEADPHONE_NAME", "DEVICE_OUT_BLUETOOTH_SCO_NAME", "DEVICE_OUT_BLUETOOTH_SCO_HEADSET_NAME", "DEVICE_OUT_BLUETOOTH_SCO_CARKIT_NAME", "DEVICE_OUT_BLUETOOTH_A2DP_NAME", "DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES_NAME", "DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER_NAME", "DEVICE_OUT_AUX_DIGITAL_NAME", "DEVICE_OUT_HDMI_NAME", "DEVICE_OUT_ANLG_DOCK_HEADSET_NAME", "DEVICE_OUT_DGTL_DOCK_HEADSET_NAME", "DEVICE_OUT_USB_ACCESSORY_NAME", "DEVICE_OUT_USB_DEVICE_NAME", "DEVICE_OUT_REMOTE_SUBMIX_NAME", "DEVICE_OUT_TELEPHONY_TX_NAME", "DEVICE_OUT_LINE_NAME", "DEVICE_OUT_HDMI_ARC_NAME", "DEVICE_OUT_HDMI_EARC_NAME", "DEVICE_OUT_SPDIF_NAME", "DEVICE_OUT_FM_NAME", "DEVICE_OUT_AUX_LINE_NAME", "DEVICE_OUT_SPEAKER_SAFE_NAME", "DEVICE_OUT_IP_NAME", "DEVICE_OUT_BUS_NAME", "DEVICE_OUT_PROXY_NAME", "DEVICE_OUT_USB_HEADSET_NAME", "DEVICE_OUT_HEARING_AID_NAME", "DEVICE_OUT_ECHO_CANCELLER_NAME", "DEVICE_OUT_BLE_HEADSET_NAME", "DEVICE_OUT_BLE_SPEAKER_NAME", "DEVICE_OUT_BLE_BROADCAST_NAME", "DEVICE_IN_COMMUNICATION_NAME", "DEVICE_IN_AMBIENT_NAME", "DEVICE_IN_BUILTIN_MIC_NAME", "DEVICE_IN_BLUETOOTH_SCO_HEADSET_NAME", "DEVICE_IN_WIRED_HEADSET_NAME", "DEVICE_IN_AUX_DIGITAL_NAME", "DEVICE_IN_TELEPHONY_RX_NAME", "DEVICE_IN_BACK_MIC_NAME", "DEVICE_IN_REMOTE_SUBMIX_NAME", "DEVICE_IN_ANLG_DOCK_HEADSET_NAME", "DEVICE_IN_DGTL_DOCK_HEADSET_NAME", "DEVICE_IN_USB_ACCESSORY_NAME", "DEVICE_IN_USB_DEVICE_NAME", "DEVICE_IN_FM_TUNER_NAME", "DEVICE_IN_TV_TUNER_NAME", "DEVICE_IN_LINE_NAME", "DEVICE_IN_SPDIF_NAME", "DEVICE_IN_BLUETOOTH_A2DP_NAME", "DEVICE_IN_LOOPBACK_NAME", "DEVICE_IN_IP_NAME", "DEVICE_IN_BUS_NAME", "DEVICE_IN_PROXY_NAME", "DEVICE_IN_USB_HEADSET_NAME", "DEVICE_IN_BLUETOOTH_BLE_NAME", "DEVICE_IN_ECHO_REFERENCE_NAME", "DEVICE_IN_HDMI_ARC_NAME", "DEVICE_IN_HDMI_EARC_NAME", "DEVICE_IN_BLE_HEADSET_NAME", "PHONE_STATE_OFFCALL", "PHONE_STATE_RINGING", "PHONE_STATE_INCALL", "FORCE_NONE", "FORCE_SPEAKER", "FORCE_HEADPHONES", "FORCE_BT_SCO", "FORCE_BT_A2DP", "FORCE_WIRED_ACCESSORY", "FORCE_BT_CAR_DOCK", "FORCE_BT_DESK_DOCK", "FORCE_ANALOG_DOCK", "FORCE_DIGITAL_DOCK", "FORCE_NO_BT_A2DP", "FORCE_SYSTEM_ENFORCED", "FORCE_HDMI_SYSTEM_AUDIO_ENFORCED", "FORCE_ENCODED_SURROUND_NEVER", "FORCE_ENCODED_SURROUND_ALWAYS", "FORCE_ENCODED_SURROUND_MANUAL", "NUM_FORCE_CONFIG", "FORCE_DEFAULT", "FOR_COMMUNICATION", "FOR_MEDIA", "FOR_RECORD", "FOR_DOCK", "FOR_SYSTEM", "FOR_HDMI_SYSTEM_AUDIO", "FOR_ENCODED_SURROUND", "FOR_VIBRATE_RINGING", "NUM_FORCE_USE", "DEVICE_ROLE_NONE", "DEVICE_ROLE_PREFERRED", "DEVICE_ROLE_DISABLED", "SYNC_EVENT_NONE", "SYNC_EVENT_PRESENTATION_COMPLETE", "SYNC_EVENT_SHARE_AUDIO_HISTORY", "MAX_DEVICE_ROUTING", "AUDIO_HW_SYNC_INVALID", "DIRECT_NOT_SUPPORTED", "DIRECT_OFFLOAD_SUPPORTED", "DIRECT_OFFLOAD_GAPLESS_SUPPORTED", "DIRECT_BITSTREAM_SUPPORTED", "OFFLOAD_NOT_SUPPORTED", "OFFLOAD_SUPPORTED", "OFFLOAD_GAPLESS_SUPPORTED", "PLAY_SOUND_DELAY", "IN_VOICE_COMM_FOCUS_ID", "DEFAULT_STREAM_VOLUME", "PLATFORM_DEFAULT", "PLATFORM_VOICE", "PLATFORM_TELEVISION", "PLATFORM_AUTOMOTIVE", "DEFAULT_MUTE_STREAMS_AFFECTED", "NATIVE_EVENT_ROUTING_CHANGE" ]
}