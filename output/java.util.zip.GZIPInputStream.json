{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/GZIPInputStream.java",
  "packageName" : "java.util.zip",
  "className" : "GZIPInputStream",
  "comment" : "\n * This class implements a stream filter for reading compressed data in\n * the GZIP file format.\n *\n * @see         InflaterInputStream\n * @author      David Connelly\n * @since 1.1\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "crc",
    "type" : "CRC32",
    "comment" : "\n     * CRC-32 for uncompressed data.\n     ",
    "links" : [ ]
  }, {
    "name" : "eos",
    "type" : "boolean",
    "comment" : "\n     * Indicates end of input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GZIP_MAGIC",
    "type" : "int",
    "comment" : "\n     * GZIP header magic number.\n     ",
    "links" : [ ]
  }, {
    "name" : "FTEXT",
    "type" : "int",
    "comment" : " Extra text",
    "links" : [ ]
  }, {
    "name" : "FHCRC",
    "type" : "int",
    "comment" : " Header CRC",
    "links" : [ ]
  }, {
    "name" : "FEXTRA",
    "type" : "int",
    "comment" : " Extra field",
    "links" : [ ]
  }, {
    "name" : "FNAME",
    "type" : "int",
    "comment" : " File name",
    "links" : [ ]
  }, {
    "name" : "FCOMMENT",
    "type" : "int",
    "comment" : " File comment",
    "links" : [ ]
  }, {
    "name" : "tmpbuf",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check to make sure that this stream has not been closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] buf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads uncompressed data into an array of bytes. If {@code len} is not\n     * zero, the method will block until some input can be decompressed; otherwise,\n     * no bytes are read and {@code 0} is returned.\n     * @param buf the buffer into which the data is read\n     * @param off the start offset in the destination array {@code b}\n     * @param len the maximum number of bytes read\n     * @return  the actual number of bytes read, or -1 if the end of the\n     *          compressed input stream is reached\n     *\n     * @throws     NullPointerException If {@code buf} is {@code null}.\n     * @throws     IndexOutOfBoundsException If {@code off} is negative,\n     * {@code len} is negative, or {@code len} is greater than\n     * {@code buf.length - off}\n     * @throws    ZipException if the compressed input data is corrupt.\n     * @throws    IOException if an I/O error has occurred.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources associated\n     * with the stream.\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "private int readHeader(InputStream this_in) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads GZIP member header and returns the total byte number\n     * of this member header.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean readTrailer() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Reads GZIP member trailer and returns true if the eos\n     * reached, false if there are more (concatenated gzip\n     * data set)\n     ",
    "links" : [ ]
  }, {
    "name" : "private long readUInt(InputStream in) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads unsigned integer in Intel byte order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int readUShort(InputStream in) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads unsigned short in Intel byte order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int readUByte(InputStream in) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads unsigned byte.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void skipBytes(InputStream in, int n) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Skips bytes of input data blocking until all bytes are skipped.\n     * Does not assume that the input stream is capable of seeking.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public int read(byte[] buf, int off, int len) throws IOException", "public void close() throws IOException", "private int readHeader(InputStream this_in) throws IOException", "private boolean readTrailer() throws IOException", "private long readUInt(InputStream in) throws IOException", "private int readUShort(InputStream in) throws IOException", "private int readUByte(InputStream in) throws IOException", "private void skipBytes(InputStream in, int n) throws IOException" ],
  "variableNames" : [ "crc", "eos", "closed", "GZIP_MAGIC", "FTEXT", "FHCRC", "FEXTRA", "FNAME", "FCOMMENT", "tmpbuf" ]
}