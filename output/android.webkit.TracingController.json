{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/TracingController.java",
  "packageName" : "android.webkit",
  "className" : "TracingController",
  "comment" : "\n * Manages tracing of WebViews. In particular provides functionality for the app\n * to enable/disable tracing of parts of code and to collect tracing data.\n * This is useful for profiling performance issues, debugging and memory usage\n * analysis in production and real life scenarios.\n * <p>\n * The resulting trace data is sent back as a byte sequence in json format. This\n * file can be loaded in \"chrome://tracing\" for further analysis.\n * <p>\n * Example usage:\n * <pre class=\"prettyprint\">\n * TracingController tracingController = TracingController.getInstance();\n * tracingController.start(new TracingConfig.Builder()\n *                  .addCategories(TracingConfig.CATEGORIES_WEB_DEVELOPER).build());\n * ...\n * tracingController.stop(new FileOutputStream(\"trace.json\"),\n *                        Executors.newSingleThreadExecutor());\n * </pre></p>\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static TracingController getInstance()",
    "returnType" : "TracingController",
    "comment" : "\n     * Returns the default TracingController instance. At present there is\n     * only one TracingController instance for all WebView instances,\n     * however this restriction may be relaxed in a future Android release.\n     *\n     * @return The default TracingController instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void start(@NonNull TracingConfig tracingConfig)",
    "returnType" : "void",
    "comment" : "\n     * Starts tracing all webviews. Depending on the trace mode in traceConfig\n     * specifies how the trace events are recorded.\n     *\n     * For tracing modes {@link TracingConfig#RECORD_UNTIL_FULL} and\n     * {@link TracingConfig#RECORD_CONTINUOUSLY} the events are recorded\n     * using an internal buffer and flushed to the outputStream when\n     * {@link #stop(OutputStream, Executor)} is called.\n     *\n     * @param tracingConfig Configuration options to use for tracing.\n     * @throws IllegalStateException If the system is already tracing.\n     * @throws IllegalArgumentException If the configuration is invalid (e.g.\n     *         invalid category pattern or invalid tracing mode).\n     ",
    "links" : [ "android.webkit.TracingConfig#RECORD_UNTIL_FULL", "android.webkit.TracingConfig#RECORD_CONTINUOUSLY", "#stop(OutputStream" ]
  }, {
    "name" : "public abstract boolean stop(@Nullable OutputStream outputStream, @NonNull @CallbackExecutor Executor executor)",
    "returnType" : "boolean",
    "comment" : "\n     * Stops tracing and flushes tracing data to the specified outputStream.\n     *\n     * The data is sent to the specified output stream in json format typically\n     * in chunks by invoking {@link java.io.OutputStream#write(byte[])}. On completion\n     * the {@link java.io.OutputStream#close()} method is called.\n     *\n     * @param outputStream The output stream the tracing data will be sent to. If null\n     *                     the tracing data will be discarded.\n     * @param executor The {@link java.util.concurrent.Executor} on which the\n     *        outputStream {@link java.io.OutputStream#write(byte[])} and\n     *        {@link java.io.OutputStream#close()} methods will be invoked.\n     * @return False if the WebView framework was not tracing at the time of the call,\n     *         true otherwise.\n     ",
    "links" : [ "java.util.concurrent.Executor", "java.io.OutputStream#close()", "java.io.OutputStream#write(byte" ]
  }, {
    "name" : "public abstract boolean isTracing()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the WebView framework is tracing.\n     *\n     * @return True if tracing is enabled.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TracingController getInstance()", "public abstract void start(@NonNull TracingConfig tracingConfig)", "public abstract boolean stop(@Nullable OutputStream outputStream, @NonNull @CallbackExecutor Executor executor)", "public abstract boolean isTracing()" ],
  "variableNames" : [ ]
}