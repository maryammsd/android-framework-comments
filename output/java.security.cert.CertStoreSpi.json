{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertStoreSpi.java",
  "packageName" : "java.security.cert",
  "className" : "CertStoreSpi",
  "comment" : "\n * The <i>Service Provider Interface</i> (<b>SPI</b>)\n * for the {@link CertStore CertStore} class. All {@code CertStore}\n * implementations must include a class (the SPI class) that extends\n * this class ({@code CertStoreSpi}), provides a constructor with\n * a single argument of type {@code CertStoreParameters}, and implements\n * all of its methods. In general, instances of this class should only be\n * accessed through the {@code CertStore} class.\n * For details, see the Java Cryptography Architecture.\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * The public methods of all {@code CertStoreSpi} objects must be\n * thread-safe. That is, multiple threads may concurrently invoke these\n * methods on a single {@code CertStoreSpi} object (or more than one)\n * with no ill effects. This allows a {@code CertPathBuilder} to search\n * for a CRL while simultaneously searching for further certificates, for\n * instance.\n * <p>\n * Simple {@code CertStoreSpi} implementations will probably ensure\n * thread safety by adding a {@code synchronized} keyword to their\n * {@code engineGetCertificates} and {@code engineGetCRLs} methods.\n * More sophisticated ones may allow truly concurrent access.\n *\n * @since       1.4\n * @author      Steve Hanna\n ",
  "links" : [ "java.security.cert.CertStore" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Collection<? extends Certificate> engineGetCertificates(CertSelector selector) throws CertStoreException",
    "returnType" : "Collection<? extends Certificate>",
    "comment" : "\n     * Returns a {@code Collection} of {@code Certificate}s that\n     * match the specified selector. If no {@code Certificate}s\n     * match the selector, an empty {@code Collection} will be returned.\n     * <p>\n     * For some {@code CertStore} types, the resulting\n     * {@code Collection} may not contain <b>all</b> of the\n     * {@code Certificate}s that match the selector. For instance,\n     * an LDAP {@code CertStore} may not search all entries in the\n     * directory. Instead, it may just search entries that are likely to\n     * contain the {@code Certificate}s it is looking for.\n     * <p>\n     * Some {@code CertStore} implementations (especially LDAP\n     * {@code CertStore}s) may throw a {@code CertStoreException}\n     * unless a non-null {@code CertSelector} is provided that includes\n     * specific criteria that can be used to find the certificates. Issuer\n     * and/or subject names are especially useful criteria.\n     *\n     * @param selector A {@code CertSelector} used to select which\n     *  {@code Certificate}s should be returned. Specify {@code null}\n     *  to return all {@code Certificate}s (if supported).\n     * @return A {@code Collection} of {@code Certificate}s that\n     *         match the specified selector (never {@code null})\n     * @throws CertStoreException if an exception occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Collection<? extends CRL> engineGetCRLs(CRLSelector selector) throws CertStoreException",
    "returnType" : "Collection<? extends CRL>",
    "comment" : "\n     * Returns a {@code Collection} of {@code CRL}s that\n     * match the specified selector. If no {@code CRL}s\n     * match the selector, an empty {@code Collection} will be returned.\n     * <p>\n     * For some {@code CertStore} types, the resulting\n     * {@code Collection} may not contain <b>all</b> of the\n     * {@code CRL}s that match the selector. For instance,\n     * an LDAP {@code CertStore} may not search all entries in the\n     * directory. Instead, it may just search entries that are likely to\n     * contain the {@code CRL}s it is looking for.\n     * <p>\n     * Some {@code CertStore} implementations (especially LDAP\n     * {@code CertStore}s) may throw a {@code CertStoreException}\n     * unless a non-null {@code CRLSelector} is provided that includes\n     * specific criteria that can be used to find the CRLs. Issuer names\n     * and/or the certificate to be checked are especially useful.\n     *\n     * @param selector A {@code CRLSelector} used to select which\n     *  {@code CRL}s should be returned. Specify {@code null}\n     *  to return all {@code CRL}s (if supported).\n     * @return A {@code Collection} of {@code CRL}s that\n     *         match the specified selector (never {@code null})\n     * @throws CertStoreException if an exception occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Collection<? extends Certificate> engineGetCertificates(CertSelector selector) throws CertStoreException", "public abstract Collection<? extends CRL> engineGetCRLs(CRLSelector selector) throws CertStoreException" ],
  "variableNames" : [ ]
}