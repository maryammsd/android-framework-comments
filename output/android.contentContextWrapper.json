{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ContextWrapper.java",
  "packageName" : "android.content",
  "className" : "ContextWrapper",
  "comment" : "\n * Proxying implementation of Context that simply delegates all of its calls to\n * another Context.  Can be subclassed to modify behavior without changing\n * the original Context.\n ",
  "variables" : [ {
    "name" : "mBase",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void attachBaseContext(Context base)",
    "returnType" : "void",
    "comment" : "\n     * Set the base context for this ContextWrapper.  All calls will then be\n     * delegated to the base context.  Throws\n     * IllegalStateException if a base context has already been set.\n     *\n     * @param base The new base context for this wrapper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Context getBaseContext()",
    "returnType" : "Context",
    "comment" : "\n     * @return the base context as set by the constructor or setBaseContext\n     ",
    "links" : [ ]
  }, {
    "name" : "public AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageManager getPackageManager()",
    "returnType" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentResolver getContentResolver()",
    "returnType" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getMainLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Executor getMainExecutor()",
    "returnType" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context getApplicationContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTheme(int resid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getThemeResId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Resources.Theme getTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBasePackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getOpPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributionTag()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageResourcePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageCodePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences(String name, int mode)",
    "returnType" : "SharedPreferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences(File file, int mode)",
    "returnType" : "SharedPreferences",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public void reloadSharedPreferences()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean moveSharedPreferencesFrom(Context sourceContext, String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSharedPreferences(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileInputStream openFileInput(String name) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException",
    "returnType" : "FileOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteFile(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getFileStreamPath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getSharedPreferencesPath(String name)",
    "returnType" : "File",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public String[] fileList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDataDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getFilesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCrateDir(@NonNull String cratedId)",
    "returnType" : "File",
    "comment" : "\n     * {@inheritDoc Context#getCrateDir()}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public File getNoBackupFilesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getExternalFilesDir(String type)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalFilesDirs(String type)",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getObbDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getObbDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCodeCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getExternalCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalCacheDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalMediaDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDir(String name, int mode)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getPreloadsFileCache()",
    "returnType" : "File",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveDatabaseFrom(Context sourceContext, String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteDatabase(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDatabasePath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] databaseList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getWallpaper()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekWallpaper()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaper(Bitmap bitmap) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaper(InputStream data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaper() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivity(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivityAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivityForResult(String who, Intent intent, int requestCode, Bundle options)",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public boolean canStartActivityForResult()",
    "returnType" : "boolean",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void startActivity(Intent intent, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivityAsUser(Intent intent, Bundle options, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Intent[] intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Intent[] intents, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int startActivitiesAsUser(Intent[] intents, Bundle options, UserHandle userHandle)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user, String[] receiverPermissions)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, String receiverPermission, Bundle options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, String receiverPermission, int appOp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, Bundle options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, int initialCode, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, @Nullable String initialData, @Nullable Bundle initialExtras, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStickyBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user, Bundle options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStickyBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverForAllUsers(@Nullable BroadcastReceiver receiver, @NonNull IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user, IntentFilter filter, String broadcastPermission, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterReceiver(BroadcastReceiver receiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startService(Intent service)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startForegroundService(Intent service)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean stopService(Intent name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean stopServiceAsUser(Intent name, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, ServiceConnection conn, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateServiceGroup(ServiceConnection conn, int group, int importance)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unbindService(ServiceConnection conn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getSystemService(String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSystemServiceName(Class<?> serviceClass)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permission, int pid, int uid, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingOrSelfPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkSelfPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermission(String permission, int pid, int uid, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingPermission(String permission, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingOrSelfPermission(String permission, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantUriPermission(String toPackage, Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeUriPermission(Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingUriPermission(Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingUriPermission(Uri uri, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createPackageContextAsUser(String packageName, int flags, UserHandle user) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createContextAsUser(UserHandle user, @CreatePackageOptions int flags)",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createApplicationContext(ApplicationInfo application, int flags) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createContextForSplit(String splitName) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUser()",
    "returnType" : "UserHandle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createConfigurationContext(Configuration overrideConfiguration)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDisplayContext(Display display)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createWindowContext(@WindowType int type, @Nullable Bundle options)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createAttributionContext(@Nullable String attributionTag)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestricted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DisplayAdjustments getDisplayAdjustments(int displayId)",
    "returnType" : "DisplayAdjustments",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplay()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplayNoVerify()",
    "returnType" : "Display",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateDisplay(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Context createDeviceProtectedStorageContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createCredentialProtectedStorageContext()",
    "returnType" : "Context",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceProtectedStorage()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCredentialProtectedStorage()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean canLoadUnsafeResources()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getActivityToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IServiceConnection getServiceDispatcher(ServiceConnection conn, Handler handler, int flags)",
    "returnType" : "IServiceConnection",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IApplicationThread getIApplicationThread()",
    "returnType" : "IApplicationThread",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getMainThreadHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextAutofillId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AutofillClient getAutofillClient()",
    "returnType" : "AutofillClient",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillClient(AutofillClient client)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AutofillOptions getAutofillOptions()",
    "returnType" : "AutofillOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillOptions(AutofillOptions options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureOptions getContentCaptureOptions()",
    "returnType" : "ContentCaptureOptions",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentCaptureOptions(ContentCaptureOptions options)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUiContext()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mBase" ],
  "methodNames" : [ "protected void attachBaseContext(Context base)", "public Context getBaseContext()", "public AssetManager getAssets()", "public Resources getResources()", "public PackageManager getPackageManager()", "public ContentResolver getContentResolver()", "public Looper getMainLooper()", "public Executor getMainExecutor()", "public Context getApplicationContext()", "public void setTheme(int resid)", "public int getThemeResId()", "public Resources.Theme getTheme()", "public ClassLoader getClassLoader()", "public String getPackageName()", "public String getBasePackageName()", "public String getOpPackageName()", "public String getAttributionTag()", "public ApplicationInfo getApplicationInfo()", "public String getPackageResourcePath()", "public String getPackageCodePath()", "public SharedPreferences getSharedPreferences(String name, int mode)", "public SharedPreferences getSharedPreferences(File file, int mode)", "public void reloadSharedPreferences()", "public boolean moveSharedPreferencesFrom(Context sourceContext, String name)", "public boolean deleteSharedPreferences(String name)", "public FileInputStream openFileInput(String name) throws FileNotFoundException", "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException", "public boolean deleteFile(String name)", "public File getFileStreamPath(String name)", "public File getSharedPreferencesPath(String name)", "public String[] fileList()", "public File getDataDir()", "public File getFilesDir()", "public File getCrateDir(@NonNull String cratedId)", "public File getNoBackupFilesDir()", "public File getExternalFilesDir(String type)", "public File[] getExternalFilesDirs(String type)", "public File getObbDir()", "public File[] getObbDirs()", "public File getCacheDir()", "public File getCodeCacheDir()", "public File getExternalCacheDir()", "public File[] getExternalCacheDirs()", "public File[] getExternalMediaDirs()", "public File getDir(String name, int mode)", "public File getPreloadsFileCache()", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler)", "public boolean moveDatabaseFrom(Context sourceContext, String name)", "public boolean deleteDatabase(String name)", "public File getDatabasePath(String name)", "public String[] databaseList()", "public Drawable getWallpaper()", "public Drawable peekWallpaper()", "public int getWallpaperDesiredMinimumWidth()", "public int getWallpaperDesiredMinimumHeight()", "public void setWallpaper(Bitmap bitmap) throws IOException", "public void setWallpaper(InputStream data) throws IOException", "public void clearWallpaper() throws IOException", "public void startActivity(Intent intent)", "public void startActivityAsUser(Intent intent, UserHandle user)", "public void startActivityForResult(String who, Intent intent, int requestCode, Bundle options)", "public boolean canStartActivityForResult()", "public void startActivity(Intent intent, Bundle options)", "public void startActivityAsUser(Intent intent, Bundle options, UserHandle user)", "public void startActivities(Intent[] intents)", "public void startActivities(Intent[] intents, Bundle options)", "public int startActivitiesAsUser(Intent[] intents, Bundle options, UserHandle userHandle)", "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException", "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException", "public void sendBroadcast(Intent intent)", "public void sendBroadcast(Intent intent, String receiverPermission)", "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions)", "public void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user, String[] receiverPermissions)", "public void sendBroadcast(Intent intent, String receiverPermission, Bundle options)", "public void sendBroadcast(Intent intent, String receiverPermission, int appOp)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendBroadcastAsUser(Intent intent, UserHandle user)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, Bundle options)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, int initialCode, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, @Nullable String initialData, @Nullable Bundle initialExtras, @Nullable Bundle options)", "public void sendStickyBroadcast(Intent intent)", "public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void removeStickyBroadcast(Intent intent)", "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user)", "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user, Bundle options)", "public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void removeStickyBroadcastAsUser(Intent intent, UserHandle user)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)", "public Intent registerReceiverForAllUsers(@Nullable BroadcastReceiver receiver, @NonNull IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)", "public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user, IntentFilter filter, String broadcastPermission, Handler scheduler)", "public void unregisterReceiver(BroadcastReceiver receiver)", "public ComponentName startService(Intent service)", "public ComponentName startForegroundService(Intent service)", "public boolean stopService(Intent name)", "public ComponentName startServiceAsUser(Intent service, UserHandle user)", "public ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)", "public boolean stopServiceAsUser(Intent name, UserHandle user)", "public boolean bindService(Intent service, ServiceConnection conn, int flags)", "public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn)", "public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user)", "public void updateServiceGroup(ServiceConnection conn, int group, int importance)", "public void unbindService(ServiceConnection conn)", "public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments)", "public Object getSystemService(String name)", "public String getSystemServiceName(Class<?> serviceClass)", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermission(String permission, int pid, int uid, IBinder callerToken)", "public int checkCallingPermission(String permission)", "public int checkCallingOrSelfPermission(String permission)", "public int checkSelfPermission(String permission)", "public void enforcePermission(String permission, int pid, int uid, String message)", "public void enforceCallingPermission(String permission, String message)", "public void enforceCallingOrSelfPermission(String permission, String message)", "public void grantUriPermission(String toPackage, Uri uri, int modeFlags)", "public void revokeUriPermission(Uri uri, int modeFlags)", "public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags)", "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags)", "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, IBinder callerToken)", "public int checkCallingUriPermission(Uri uri, int modeFlags)", "public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags)", "public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)", "public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)", "public void enforceCallingUriPermission(Uri uri, int modeFlags, String message)", "public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)", "public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)", "public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException", "public Context createPackageContextAsUser(String packageName, int flags, UserHandle user) throws PackageManager.NameNotFoundException", "public Context createContextAsUser(UserHandle user, @CreatePackageOptions int flags)", "public Context createApplicationContext(ApplicationInfo application, int flags) throws PackageManager.NameNotFoundException", "public Context createContextForSplit(String splitName) throws PackageManager.NameNotFoundException", "public int getUserId()", "public UserHandle getUser()", "public Context createConfigurationContext(Configuration overrideConfiguration)", "public Context createDisplayContext(Display display)", "public Context createWindowContext(@WindowType int type, @Nullable Bundle options)", "public Context createAttributionContext(@Nullable String attributionTag)", "public boolean isRestricted()", "public DisplayAdjustments getDisplayAdjustments(int displayId)", "public Display getDisplay()", "public Display getDisplayNoVerify()", "public int getDisplayId()", "public void updateDisplay(int displayId)", "public Context createDeviceProtectedStorageContext()", "public Context createCredentialProtectedStorageContext()", "public boolean isDeviceProtectedStorage()", "public boolean isCredentialProtectedStorage()", "public boolean canLoadUnsafeResources()", "public IBinder getActivityToken()", "public IServiceConnection getServiceDispatcher(ServiceConnection conn, Handler handler, int flags)", "public IApplicationThread getIApplicationThread()", "public Handler getMainThreadHandler()", "public int getNextAutofillId()", "public AutofillClient getAutofillClient()", "public void setAutofillClient(AutofillClient client)", "public AutofillOptions getAutofillOptions()", "public void setAutofillOptions(AutofillOptions options)", "public ContentCaptureOptions getContentCaptureOptions()", "public void setContentCaptureOptions(ContentCaptureOptions options)", "public boolean isUiContext()" ]
}