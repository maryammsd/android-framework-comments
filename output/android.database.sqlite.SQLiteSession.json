{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/sqlite/SQLiteSession.java",
  "packageName" : "android.database.sqlite",
  "className" : "SQLiteSession",
  "comment" : "\n * Provides a single client the ability to use a database.\n *\n * <h2>About database sessions</h2>\n * <p>\n * Database access is always performed using a session.  The session\n * manages the lifecycle of transactions and database connections.\n * </p><p>\n * Sessions can be used to perform both read-only and read-write operations.\n * There is some advantage to knowing when a session is being used for\n * read-only purposes because the connection pool can optimize the use\n * of the available connections to permit multiple read-only operations\n * to execute in parallel whereas read-write operations may need to be serialized.\n * </p><p>\n * When <em>Write Ahead Logging (WAL)</em> is enabled, the database can\n * execute simultaneous read-only and read-write transactions, provided that\n * at most one read-write transaction is performed at a time.  When WAL is not\n * enabled, read-only transactions can execute in parallel but read-write\n * transactions are mutually exclusive.\n * </p>\n *\n * <h2>Ownership and concurrency guarantees</h2>\n * <p>\n * Session objects are not thread-safe.  In fact, session objects are thread-bound.\n * The {@link SQLiteDatabase} uses a thread-local variable to associate a session\n * with each thread for the use of that thread alone.  Consequently, each thread\n * has its own session object and therefore its own transaction state independent\n * of other threads.\n * </p><p>\n * A thread has at most one session per database.  This constraint ensures that\n * a thread can never use more than one database connection at a time for a\n * given database.  As the number of available database connections is limited,\n * if a single thread tried to acquire multiple connections for the same database\n * at the same time, it might deadlock.  Therefore we allow there to be only\n * one session (so, at most one connection) per thread per database.\n * </p>\n *\n * <h2>Transactions</h2>\n * <p>\n * There are two kinds of transaction: implicit transactions and explicit\n * transactions.\n * </p><p>\n * An implicit transaction is created whenever a database operation is requested\n * and there is no explicit transaction currently in progress.  An implicit transaction\n * only lasts for the duration of the database operation in question and then it\n * is ended.  If the database operation was successful, then its changes are committed.\n * </p><p>\n * An explicit transaction is started by calling {@link #beginTransaction} and\n * specifying the desired transaction mode.  Once an explicit transaction has begun,\n * all subsequent database operations will be performed as part of that transaction.\n * To end an explicit transaction, first call {@link #setTransactionSuccessful} if the\n * transaction was successful, then call {@link #end}.  If the transaction was\n * marked successful, its changes will be committed, otherwise they will be rolled back.\n * </p><p>\n * Explicit transactions can also be nested.  A nested explicit transaction is\n * started with {@link #beginTransaction}, marked successful with\n * {@link #setTransactionSuccessful}and ended with {@link #endTransaction}.\n * If any nested transaction is not marked successful, then the entire transaction\n * including all of its nested transactions will be rolled back\n * when the outermost transaction is ended.\n * </p><p>\n * To improve concurrency, an explicit transaction can be yielded by calling\n * {@link #yieldTransaction}.  If there is contention for use of the database,\n * then yielding ends the current transaction, commits its changes, releases the\n * database connection for use by another session for a little while, and starts a\n * new transaction with the same properties as the original one.\n * Changes committed by {@link #yieldTransaction} cannot be rolled back.\n * </p><p>\n * When a transaction is started, the client can provide a {@link SQLiteTransactionListener}\n * to listen for notifications of transaction-related events.\n * </p><p>\n * Recommended usage:\n * <code><pre>\n * // First, begin the transaction.\n * session.beginTransaction(SQLiteSession.TRANSACTION_MODE_DEFERRED, 0);\n * try {\n *     // Then do stuff...\n *     session.execute(\"INSERT INTO ...\", null, 0);\n *\n *     // As the very last step before ending the transaction, mark it successful.\n *     session.setTransactionSuccessful();\n * } finally {\n *     // Finally, end the transaction.\n *     // This statement will commit the transaction if it was marked successful or\n *     // roll it back otherwise.\n *     session.endTransaction();\n * }\n * </pre></code>\n * </p>\n *\n * <h2>Database connections</h2>\n * <p>\n * A {@link SQLiteDatabase} can have multiple active sessions at the same\n * time.  Each session acquires and releases connections to the database\n * as needed to perform each requested database transaction.  If all connections\n * are in use, then database transactions on some sessions will block until a\n * connection becomes available.\n * </p><p>\n * The session acquires a single database connection only for the duration\n * of a single (implicit or explicit) database transaction, then releases it.\n * This characteristic allows a small pool of database connections to be shared\n * efficiently by multiple sessions as long as they are not all trying to perform\n * database transactions at the same time.\n * </p>\n *\n * <h2>Responsiveness</h2>\n * <p>\n * Because there are a limited number of database connections and the session holds\n * a database connection for the entire duration of a database transaction,\n * it is important to keep transactions short.  This is especially important\n * for read-write transactions since they may block other transactions\n * from executing.  Consider calling {@link #yieldTransaction} periodically\n * during long-running transactions.\n * </p><p>\n * Another important consideration is that transactions that take too long to\n * run may cause the application UI to become unresponsive.  Even if the transaction\n * is executed in a background thread, the user will get bored and\n * frustrated if the application shows no data for several seconds while\n * a transaction runs.\n * </p><p>\n * Guidelines:\n * <ul>\n * <li>Do not perform database transactions on the UI thread.</li>\n * <li>Keep database transactions as short as possible.</li>\n * <li>Simple queries often run faster than complex queries.</li>\n * <li>Measure the performance of your database transactions.</li>\n * <li>Consider what will happen when the size of the data set grows.\n * A query that works well on 100 rows may struggle with 10,000.</li>\n * </ul>\n *\n * <h2>Reentrance</h2>\n * <p>\n * This class must tolerate reentrant execution of SQLite operations because\n * triggers may call custom SQLite functions that perform additional queries.\n * </p>\n *\n * @hide\n ",
  "links" : [ "android.database.sqlite.SQLiteDatabase", "#beginTransaction", "#yieldTransaction", "#end", "#setTransactionSuccessful", "#endTransaction", "android.database.sqlite.SQLiteTransactionListener" ],
  "variables" : [ {
    "name" : "mConnectionPool",
    "type" : "SQLiteConnectionPool",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "SQLiteConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionUseCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionPool",
    "type" : "Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionStack",
    "type" : "Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpenDependents",
    "type" : "ArrayDeque<Closeable>",
    "comment" : "\n     * A list of dependents that should be closed when the transaction completes.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_MODE_DEFERRED",
    "type" : "int",
    "comment" : "\n     * Transaction mode: Deferred.\n     * <p>\n     * In a deferred transaction, no locks are acquired on the database\n     * until the first operation is performed.  If the first operation is\n     * read-only, then a <code>SHARED</code> lock is acquired, otherwise\n     * a <code>RESERVED</code> lock is acquired.\n     * </p><p>\n     * While holding a <code>SHARED</code> lock, this session is only allowed to\n     * read but other sessions are allowed to read or write.\n     * While holding a <code>RESERVED</code> lock, this session is allowed to read\n     * or write but other sessions are only allowed to read.\n     * </p><p>\n     * Because the lock is only acquired when needed in a deferred transaction,\n     * it is possible for another session to write to the database first before\n     * this session has a chance to do anything.\n     * </p><p>\n     * Corresponds to the SQLite <code>BEGIN DEFERRED</code> transaction mode.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_MODE_IMMEDIATE",
    "type" : "int",
    "comment" : "\n     * Transaction mode: Immediate.\n     * <p>\n     * When an immediate transaction begins, the session acquires a\n     * <code>RESERVED</code> lock.\n     * </p><p>\n     * While holding a <code>RESERVED</code> lock, this session is allowed to read\n     * or write but other sessions are only allowed to read.\n     * </p><p>\n     * Corresponds to the SQLite <code>BEGIN IMMEDIATE</code> transaction mode.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_MODE_EXCLUSIVE",
    "type" : "int",
    "comment" : "\n     * Transaction mode: Exclusive.\n     * <p>\n     * When an exclusive transaction begins, the session acquires an\n     * <code>EXCLUSIVE</code> lock.\n     * </p><p>\n     * While holding an <code>EXCLUSIVE</code> lock, this session is allowed to read\n     * or write but no other sessions are allowed to access the database.\n     * </p><p>\n     * Corresponds to the SQLite <code>BEGIN EXCLUSIVE</code> transaction mode.\n     * </p>\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasTransaction()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the session has a transaction in progress.\n     *\n     * @return True if the session has a transaction in progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNestedTransaction()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the session has a nested transaction in progress.\n     *\n     * @return True if the session has a nested transaction in progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasConnection()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the session has an active database connection.\n     *\n     * @return True if the session has an active database connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void beginTransaction(int transactionMode, SQLiteTransactionListener transactionListener, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "void",
    "comment" : "\n     * Begins a transaction.\n     * <p>\n     * Transactions may nest.  If the transaction is not in progress,\n     * then a database connection is obtained and a new transaction is started.\n     * Otherwise, a nested transaction is started.\n     * </p><p>\n     * Each call to {@link #beginTransaction} must be matched exactly by a call\n     * to {@link #endTransaction}.  To mark a transaction as successful,\n     * call {@link #setTransactionSuccessful} before calling {@link #endTransaction}.\n     * If the transaction is not successful, or if any of its nested\n     * transactions were not successful, then the entire transaction will\n     * be rolled back when the outermost transaction is ended.\n     * </p>\n     *\n     * @param transactionMode The transaction mode.  One of: {@link #TRANSACTION_MODE_DEFERRED},\n     * {@link #TRANSACTION_MODE_IMMEDIATE}, or {@link #TRANSACTION_MODE_EXCLUSIVE}.\n     * Ignored when creating a nested transaction.\n     * @param transactionListener The transaction listener, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     *\n     * @throws IllegalStateException if {@link #setTransactionSuccessful} has already been\n     * called for the current transaction.\n     * @throws SQLiteException if an error occurs.\n     * @throws OperationCanceledException if the operation was canceled.\n     *\n     * @see #setTransactionSuccessful\n     * @see #yieldTransaction\n     * @see #endTransaction\n     ",
    "links" : [ "#TRANSACTION_MODE_DEFERRED", "#beginTransaction", "#TRANSACTION_MODE_IMMEDIATE", "#TRANSACTION_MODE_EXCLUSIVE", "#setTransactionSuccessful", "android.database.sqlite.SQLiteConnectionPool", "#endTransaction" ]
  }, {
    "name" : "private void beginTransactionUnchecked(int transactionMode, SQLiteTransactionListener transactionListener, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTransactionSuccessful()",
    "returnType" : "void",
    "comment" : "\n     * Marks the current transaction as having completed successfully.\n     * <p>\n     * This method can be called at most once between {@link #beginTransaction} and\n     * {@link #endTransaction} to indicate that the changes made by the transaction should be\n     * committed.  If this method is not called, the changes will be rolled back\n     * when the transaction is ended.\n     * </p>\n     *\n     * @throws IllegalStateException if there is no current transaction, or if\n     * {@link #setTransactionSuccessful} has already been called for the current transaction.\n     *\n     * @see #beginTransaction\n     * @see #endTransaction\n     ",
    "links" : [ "#beginTransaction", "#setTransactionSuccessful", "#endTransaction" ]
  }, {
    "name" : "public void endTransaction(CancellationSignal cancellationSignal)",
    "returnType" : "void",
    "comment" : "\n     * Ends the current transaction and commits or rolls back changes.\n     * <p>\n     * If this is the outermost transaction (not nested within any other\n     * transaction), then the changes are committed if {@link #setTransactionSuccessful}\n     * was called or rolled back otherwise.\n     * </p><p>\n     * This method must be called exactly once for each call to {@link #beginTransaction}.\n     * </p>\n     *\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     *\n     * @throws IllegalStateException if there is no current transaction.\n     * @throws SQLiteException if an error occurs.\n     * @throws OperationCanceledException if the operation was canceled.\n     *\n     * @see #beginTransaction\n     * @see #setTransactionSuccessful\n     * @see #yieldTransaction\n     ",
    "links" : [ "#beginTransaction", "#setTransactionSuccessful" ]
  }, {
    "name" : "private void endTransactionUnchecked(CancellationSignal cancellationSignal, boolean yielding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean yieldTransaction(long sleepAfterYieldDelayMillis, boolean throwIfUnsafe, CancellationSignal cancellationSignal)",
    "returnType" : "boolean",
    "comment" : "\n     * Temporarily ends a transaction to let other threads have use of\n     * the database.  Begins a new transaction after a specified delay.\n     * <p>\n     * If there are other threads waiting to acquire connections,\n     * then the current transaction is committed and the database\n     * connection is released.  After a short delay, a new transaction\n     * is started.\n     * </p><p>\n     * The transaction is assumed to be successful so far.  Do not call\n     * {@link #setTransactionSuccessful()} before calling this method.\n     * This method will fail if the transaction has already been marked\n     * successful.\n     * </p><p>\n     * The changes that were committed by a yield cannot be rolled back later.\n     * </p><p>\n     * Before this method was called, there must already have been\n     * a transaction in progress.  When this method returns, there will\n     * still be a transaction in progress, either the same one as before\n     * or a new one if the transaction was actually yielded.\n     * </p><p>\n     * This method should not be called when there is a nested transaction\n     * in progress because it is not possible to yield a nested transaction.\n     * If <code>throwIfNested</code> is true, then attempting to yield\n     * a nested transaction will throw {@link IllegalStateException}, otherwise\n     * the method will return <code>false</code> in that case.\n     * </p><p>\n     * If there is no nested transaction in progress but a previous nested\n     * transaction failed, then the transaction is not yielded (because it\n     * must be rolled back) and this method returns <code>false</code>.\n     * </p>\n     *\n     * @param sleepAfterYieldDelayMillis A delay time to wait after yielding\n     * the database connection to allow other threads some time to run.\n     * If the value is less than or equal to zero, there will be no additional\n     * delay beyond the time it will take to begin a new transaction.\n     * @param throwIfUnsafe If true, then instead of returning false when no\n     * transaction is in progress, a nested transaction is in progress, or when\n     * the transaction has already been marked successful, throws {@link IllegalStateException}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return True if the transaction was actually yielded.\n     *\n     * @throws IllegalStateException if <code>throwIfNested</code> is true and\n     * there is no current transaction, there is a nested transaction in progress or\n     * if {@link #setTransactionSuccessful} has already been called for the current transaction.\n     * @throws SQLiteException if an error occurs.\n     * @throws OperationCanceledException if the operation was canceled.\n     *\n     * @see #beginTransaction\n     * @see #endTransaction\n     ",
    "links" : [ "#setTransactionSuccessful()", "IllegalStateException", "#setTransactionSuccessful" ]
  }, {
    "name" : "private boolean yieldTransactionUnchecked(long sleepAfterYieldDelayMillis, CancellationSignal cancellationSignal)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(String sql, int connectionFlags, CancellationSignal cancellationSignal, SQLiteStatementInfo outStatementInfo)",
    "returnType" : "void",
    "comment" : "\n     * Prepares a statement for execution but does not bind its parameters or execute it.\n     * <p>\n     * This method can be used to check for syntax errors during compilation\n     * prior to execution of the statement.  If the {@code outStatementInfo} argument\n     * is not null, the provided {@link SQLiteStatementInfo} object is populated\n     * with information about the statement.\n     * </p><p>\n     * A prepared statement makes no reference to the arguments that may eventually\n     * be bound to it, consequently it it possible to cache certain prepared statements\n     * such as SELECT or INSERT/UPDATE statements.  If the statement is cacheable,\n     * then it will be stored in the cache for later and reused if possible.\n     * </p>\n     *\n     * @param sql The SQL statement to prepare.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @param outStatementInfo The {@link SQLiteStatementInfo} object to populate\n     * with information about the statement, or null if none.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.sqlite.SQLiteStatementInfo", "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public void execute(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "void",
    "comment" : "\n     * Executes a statement that does not return a result.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public long executeForLong(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "long",
    "comment" : "\n     * Executes a statement that returns a single <code>long</code> result.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return The value of the first column in the first row of the result set\n     * as a <code>long</code>, or zero if none.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public String executeForString(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "String",
    "comment" : "\n     * Executes a statement that returns a single {@link String} result.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return The value of the first column in the first row of the result set\n     * as a <code>String</code>, or null if none.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "String", "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public ParcelFileDescriptor executeForBlobFileDescriptor(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Executes a statement that returns a single BLOB result as a\n     * file descriptor to a shared memory region.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return The file descriptor for a shared memory region that contains\n     * the value of the first column in the first row of the result set as a BLOB,\n     * or null if none.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public int executeForChangedRowCount(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "int",
    "comment" : "\n     * Executes a statement that returns a count of the number of rows\n     * that were changed.  Use for UPDATE or DELETE SQL statements.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return The number of rows that were changed.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public long executeForLastInsertedRowId(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "long",
    "comment" : "\n     * Executes a statement that returns the row id of the last row inserted\n     * by the statement.  Use for INSERT SQL statements.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return The row id of the last row that was inserted, or 0 if none.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "public int executeForCursorWindow(String sql, Object[] bindArgs, CursorWindow window, int startPos, int requiredPos, boolean countAllRows, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "int",
    "comment" : "\n     * Executes a statement and populates the specified {@link CursorWindow}\n     * with a range of results.  Returns the number of rows that were counted\n     * during query execution.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param window The cursor window to clear and fill.\n     * @param startPos The start position for filling the window.\n     * @param requiredPos The position of a row that MUST be in the window.\n     * If it won't fit, then the query should discard part of what it filled\n     * so that it does.  Must be greater than or equal to <code>startPos</code>.\n     * @param countAllRows True to count all rows that the query would return\n     * regagless of whether they fit in the window.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return The number of rows that were counted during query execution.  Might\n     * not be all rows in the result set unless <code>countAllRows</code> is true.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "android.database.CursorWindow", "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "private boolean executeSpecial(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs special reinterpretation of certain SQL statements such as \"BEGIN\",\n     * \"COMMIT\" and \"ROLLBACK\" to ensure that transaction state invariants are\n     * maintained.\n     *\n     * This function is mainly used to support legacy apps that perform their\n     * own transactions by executing raw SQL rather than calling {@link #beginTransaction}\n     * and the like.\n     *\n     * @param sql The SQL statement to execute.\n     * @param bindArgs The arguments to bind, or null if none.\n     * @param connectionFlags The connection flags to use if a connection must be\n     * acquired by this operation.  Refer to {@link SQLiteConnectionPool}.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * @return True if the statement was of a special form that was handled here,\n     * false otherwise.\n     *\n     * @throws SQLiteException if an error occurs, such as a syntax error\n     * or invalid number of bind arguments.\n     * @throws OperationCanceledException if the operation was canceled.\n     ",
    "links" : [ "#beginTransaction", "android.database.sqlite.SQLiteConnectionPool" ]
  }, {
    "name" : "private void acquireConnection(String sql, int connectionFlags, CancellationSignal cancellationSignal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseConnection()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SQLiteConnection.PreparedStatement acquirePersistentStatement(@NonNull String query, @NonNull Closeable dependent)",
    "returnType" : "SQLiteConnection.PreparedStatement",
    "comment" : "\n     * Acquire a prepared statement for external use. A current transaction is required and that\n     * transaction may not have been marked successful. The dependent is registered its close()\n     * method is called when the transaction is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void releasePersistentStatement(@NonNull SQLiteConnection.PreparedStatement statement, @NonNull Closeable dependent)",
    "returnType" : "void",
    "comment" : "\n     * Release a prepared statement.  The dependent should be in list of open dependents.\n     ",
    "links" : [ ]
  }, {
    "name" : " void closeOpenDependents()",
    "returnType" : "void",
    "comment" : "\n     * Close any open dependents.  This may be called multiple times without harm.  It never\n     * throws.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLastInsertRowId()",
    "returnType" : "long",
    "comment" : "\n     * Return the row ID of the last row to be inserted on this connection.  Note that the last row\n     * might not have been inserted on this particular statement, but the return value is the last\n     * row inserted on the same connection as that used by this statement.  The function checks that\n     * it is currently in a transaction before executing.  Because of this check, it is not\n     * necessary to acquire and release the connection: the connection has already been acquired.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLastChangedRowCount()",
    "returnType" : "long",
    "comment" : "\n     * Return the number of database rows that were changed by the most recent SQL statement on\n     * this connection.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " long getTotalChangedRowCount()",
    "returnType" : "long",
    "comment" : "\n     * Return the total number of database rows that were changed on the current connection, since\n     * it was created.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void throwIfNoTransaction()",
    "returnType" : "void",
    "comment" : "\n     * Throw {@link IllegalStateException} if there is no current transaction.\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "private void throwIfTransactionMarkedSuccessful()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfNestedTransaction()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Transaction obtainTransaction(int mode, SQLiteTransactionListener listener)",
    "returnType" : "Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recycleTransaction(Transaction transaction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean hasTransaction()", "public boolean hasNestedTransaction()", "public boolean hasConnection()", "public void beginTransaction(int transactionMode, SQLiteTransactionListener transactionListener, int connectionFlags, CancellationSignal cancellationSignal)", "private void beginTransactionUnchecked(int transactionMode, SQLiteTransactionListener transactionListener, int connectionFlags, CancellationSignal cancellationSignal)", "public void setTransactionSuccessful()", "public void endTransaction(CancellationSignal cancellationSignal)", "private void endTransactionUnchecked(CancellationSignal cancellationSignal, boolean yielding)", "public boolean yieldTransaction(long sleepAfterYieldDelayMillis, boolean throwIfUnsafe, CancellationSignal cancellationSignal)", "private boolean yieldTransactionUnchecked(long sleepAfterYieldDelayMillis, CancellationSignal cancellationSignal)", "public void prepare(String sql, int connectionFlags, CancellationSignal cancellationSignal, SQLiteStatementInfo outStatementInfo)", "public void execute(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "public long executeForLong(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "public String executeForString(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "public ParcelFileDescriptor executeForBlobFileDescriptor(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "public int executeForChangedRowCount(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "public long executeForLastInsertedRowId(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "public int executeForCursorWindow(String sql, Object[] bindArgs, CursorWindow window, int startPos, int requiredPos, boolean countAllRows, int connectionFlags, CancellationSignal cancellationSignal)", "private boolean executeSpecial(String sql, Object[] bindArgs, int connectionFlags, CancellationSignal cancellationSignal)", "private void acquireConnection(String sql, int connectionFlags, CancellationSignal cancellationSignal)", "private void releaseConnection()", " SQLiteConnection.PreparedStatement acquirePersistentStatement(@NonNull String query, @NonNull Closeable dependent)", " void releasePersistentStatement(@NonNull SQLiteConnection.PreparedStatement statement, @NonNull Closeable dependent)", " void closeOpenDependents()", " long getLastInsertRowId()", " long getLastChangedRowCount()", " long getTotalChangedRowCount()", " void throwIfNoTransaction()", "private void throwIfTransactionMarkedSuccessful()", "private void throwIfNestedTransaction()", "private Transaction obtainTransaction(int mode, SQLiteTransactionListener listener)", "private void recycleTransaction(Transaction transaction)" ],
  "variableNames" : [ "mConnectionPool", "mConnection", "mConnectionFlags", "mConnectionUseCount", "mTransactionPool", "mTransactionStack", "mOpenDependents", "TRANSACTION_MODE_DEFERRED", "TRANSACTION_MODE_IMMEDIATE", "TRANSACTION_MODE_EXCLUSIVE" ]
}