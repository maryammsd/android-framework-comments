{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/dom/DocumentImpl.java",
  "packageName" : "org.apache.harmony.xml.dom",
  "className" : "DocumentImpl",
  "comment" : "\n * Provides a straightforward implementation of the corresponding W3C DOM\n * interface. The class is used internally only, thus only notable members that\n * are not in the original interface are documented (the W3C docs are quite\n * extensive). Hope that's ok.\n * <p>\n * Some of the fields may have package visibility, so other classes belonging to\n * the DOM implementation can easily access them while maintaining the DOM tree\n * structure.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "domImplementation",
    "type" : "DOMImplementation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "domConfiguration",
    "type" : "DOMConfigurationImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "documentUri",
    "type" : "String",
    "comment" : "\n     * The default values of these fields are specified by the Document\n     * interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "inputEncoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlStandalone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "strictErrorChecking",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nodeToUserData",
    "type" : "WeakHashMap<NodeImpl, Map<String, UserData>>",
    "comment" : "\n     * A lazily initialized map of user data values for this document's own\n     * nodes. The map is weak because the document may live longer than its\n     * nodes.\n     *\n     * <p>Attaching user data directly to the corresponding node would cost a\n     * field per node. Under the assumption that user data is rarely needed, we\n     * attach user data to the document to save those fields. Xerces also takes\n     * this approach.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isXMLIdentifierStart(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isXMLIdentifierPart(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isXMLIdentifier(String s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private NodeImpl shallowCopy(short operation, Node node)",
    "returnType" : "NodeImpl",
    "comment" : "\n     * Returns a shallow copy of the given node. If the node is an element node,\n     * its attributes are always copied.\n     *\n     * @param node a node belonging to any document or DOM implementation.\n     * @param operation the operation type to use when notifying user data\n     *     handlers of copied element attributes. It is the caller's\n     *     responsibility to notify user data handlers of the returned node.\n     * @return a new node whose document is this document and whose DOM\n     *     implementation is this DOM implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : " Node cloneOrImportNode(short operation, Node node, boolean deep)",
    "returnType" : "Node",
    "comment" : "\n     * Returns a copy of the given node or subtree with this document as its\n     * owner.\n     *\n     * @param operation either {@link UserDataHandler#NODE_CLONED} or\n     *      {@link UserDataHandler#NODE_IMPORTED}.\n     * @param node a node belonging to any document or DOM implementation.\n     * @param deep true to recursively copy any child nodes; false to do no such\n     *      copying and return a node with no children.\n     ",
    "links" : [ "org.w3c.dom.UserDataHandler#NODE_CLONED", "org.w3c.dom.UserDataHandler#NODE_IMPORTED" ]
  }, {
    "name" : "public Node importNode(Node importedNode, boolean deep)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node adoptNode(Node node)",
    "returnType" : "Node",
    "comment" : "\n     * Detaches the node from its parent (if any) and changes its document to\n     * this document. The node's subtree and attributes will remain attached,\n     * but their document will be changed to this document.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void changeDocumentToThis(NodeImpl node)",
    "returnType" : "void",
    "comment" : "\n     * Recursively change the document of {@code node} without also changing its\n     * parent node. Only adoptNode() should invoke this method, otherwise nodes\n     * will be left in an inconsistent state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node renameNode(Node node, String namespaceURI, String qualifiedName)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AttrImpl createAttribute(String name)",
    "returnType" : "AttrImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AttrImpl createAttributeNS(String namespaceURI, String qualifiedName)",
    "returnType" : "AttrImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CDATASectionImpl createCDATASection(String data)",
    "returnType" : "CDATASectionImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CommentImpl createComment(String data)",
    "returnType" : "CommentImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DocumentFragmentImpl createDocumentFragment()",
    "returnType" : "DocumentFragmentImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ElementImpl createElement(String tagName)",
    "returnType" : "ElementImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ElementImpl createElementNS(String namespaceURI, String qualifiedName)",
    "returnType" : "ElementImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public EntityReferenceImpl createEntityReference(String name)",
    "returnType" : "EntityReferenceImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProcessingInstructionImpl createProcessingInstruction(String target, String data)",
    "returnType" : "ProcessingInstructionImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TextImpl createTextNode(String data)",
    "returnType" : "TextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DocumentType getDoctype()",
    "returnType" : "DocumentType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Element getDocumentElement()",
    "returnType" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Element getElementById(String elementId)",
    "returnType" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagName(String name)",
    "returnType" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagNameNS(String namespaceURI, String localName)",
    "returnType" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DOMImplementation getImplementation()",
    "returnType" : "DOMImplementation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node insertChildAt(Node toInsert, int index)",
    "returnType" : "Node",
    "comment" : "\n     * Document elements may have at most one root element and at most one DTD\n     * element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInputEncoding()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getXmlEncoding()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getXmlStandalone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlStandalone(boolean xmlStandalone)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getXmlVersion()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlVersion(String xmlVersion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getStrictErrorChecking()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStrictErrorChecking(boolean strictErrorChecking)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDocumentURI()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentURI(String documentUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DOMConfiguration getDomConfig()",
    "returnType" : "DOMConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void normalizeDocument()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Map<String, UserData> getUserDataMap(NodeImpl node)",
    "returnType" : "Map<String, UserData>",
    "comment" : "\n     * Returns a map with the user data objects attached to the specified node.\n     * This map is readable and writable.\n     ",
    "links" : [ ]
  }, {
    "name" : " Map<String, UserData> getUserDataMapForRead(NodeImpl node)",
    "returnType" : "Map<String, UserData>",
    "comment" : "\n     * Returns a map with the user data objects attached to the specified node.\n     * The returned map may be read-only.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void notifyUserDataHandlers(short operation, Node source, NodeImpl destination)",
    "returnType" : "void",
    "comment" : "\n     * Calls {@link UserDataHandler#handle} on each of the source node's\n     * value/handler pairs.\n     *\n     * <p>If the source node comes from another DOM implementation, user data\n     * handlers will <strong>not</strong> be notified. The DOM API provides no\n     * mechanism to inspect a foreign node's user data.\n     ",
    "links" : [ "org.w3c.dom.UserDataHandler#handle" ]
  } ],
  "methodNames" : [ "private static boolean isXMLIdentifierStart(char c)", "private static boolean isXMLIdentifierPart(char c)", " static boolean isXMLIdentifier(String s)", "private NodeImpl shallowCopy(short operation, Node node)", " Node cloneOrImportNode(short operation, Node node, boolean deep)", "public Node importNode(Node importedNode, boolean deep)", "public Node adoptNode(Node node)", "private void changeDocumentToThis(NodeImpl node)", "public Node renameNode(Node node, String namespaceURI, String qualifiedName)", "public AttrImpl createAttribute(String name)", "public AttrImpl createAttributeNS(String namespaceURI, String qualifiedName)", "public CDATASectionImpl createCDATASection(String data)", "public CommentImpl createComment(String data)", "public DocumentFragmentImpl createDocumentFragment()", "public ElementImpl createElement(String tagName)", "public ElementImpl createElementNS(String namespaceURI, String qualifiedName)", "public EntityReferenceImpl createEntityReference(String name)", "public ProcessingInstructionImpl createProcessingInstruction(String target, String data)", "public TextImpl createTextNode(String data)", "public DocumentType getDoctype()", "public Element getDocumentElement()", "public Element getElementById(String elementId)", "public NodeList getElementsByTagName(String name)", "public NodeList getElementsByTagNameNS(String namespaceURI, String localName)", "public DOMImplementation getImplementation()", "public String getNodeName()", "public short getNodeType()", "public Node insertChildAt(Node toInsert, int index)", "public String getTextContent()", "public String getInputEncoding()", "public String getXmlEncoding()", "public boolean getXmlStandalone()", "public void setXmlStandalone(boolean xmlStandalone)", "public String getXmlVersion()", "public void setXmlVersion(String xmlVersion)", "public boolean getStrictErrorChecking()", "public void setStrictErrorChecking(boolean strictErrorChecking)", "public String getDocumentURI()", "public void setDocumentURI(String documentUri)", "public DOMConfiguration getDomConfig()", "public void normalizeDocument()", " Map<String, UserData> getUserDataMap(NodeImpl node)", " Map<String, UserData> getUserDataMapForRead(NodeImpl node)", "private static void notifyUserDataHandlers(short operation, Node source, NodeImpl destination)" ],
  "variableNames" : [ "domImplementation", "domConfiguration", "documentUri", "inputEncoding", "xmlVersion", "xmlStandalone", "strictErrorChecking", "nodeToUserData" ]
}