{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/IdentityScope.java",
  "packageName" : "java.security",
  "className" : "IdentityScope",
  "comment" : "\n * <p>This class represents a scope for identities. It is an Identity\n * itself, and therefore has a name and can have a scope. It can also\n * optionally have a public key and associated certificates.\n *\n * <p>An IdentityScope can contain Identity objects of all kinds, including\n * Signers. All types of Identity objects can be retrieved, added, and\n * removed using the same methods. Note that it is possible, and in fact\n * expected, that different types of identity scopes will\n * apply different policies for their various operations on the\n * various types of Identities.\n *\n * <p>There is a one-to-one mapping between keys and identities, and\n * there can only be one copy of one key per scope. For example, suppose\n * <b>Acme Software, Inc</b> is a software publisher known to a user.\n * Suppose it is an Identity, that is, it has a public key, and a set of\n * associated certificates. It is named in the scope using the name\n * \"Acme Software\". No other named Identity in the scope has the same\n * public  key. Of course, none has the same name as well.\n *\n * @see Identity\n * @see Signer\n * @see Principal\n * @see Key\n *\n * @author Benjamin Renaud\n * @since 1.1\n *\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by\n *     {@code java.security.KeyStore}, the {@code java.security.cert} package,\n *     and {@code java.security.Principal}.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "scope",
    "type" : "IdentityScope",
    "comment" : " The system's scope ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void initializeSystemScope()",
    "returnType" : "void",
    "comment" : " initialize the system scope",
    "links" : [ ]
  }, {
    "name" : "public static IdentityScope getSystemScope()",
    "returnType" : "IdentityScope",
    "comment" : "\n     * Returns the system's identity scope.\n     *\n     * @return the system's identity scope, or {@code null} if none has been\n     *         set.\n     *\n     * @see #setSystemScope\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static void setSystemScope(IdentityScope scope)",
    "returnType" : "void",
    "comment" : "\n     * Sets the system's identity scope.\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkSecurityAccess}\n     * method is called with {@code \"setSystemScope\"}\n     * as its argument to see if it's ok to set the identity scope.\n     *\n     * @param scope the scope to set.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * setting the identity scope.\n     *\n     * @see #getSystemScope\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of identities within this identity scope.\n     *\n     * @return the number of identities within this identity scope.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Identity getIdentity(String name)",
    "returnType" : "Identity",
    "comment" : "\n     * Returns the identity in this scope with the specified name (if any).\n     *\n     * @param name the name of the identity to be retrieved.\n     *\n     * @return the identity named {@code name}, or null if there are\n     * no identities named {@code name} in this scope.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Identity getIdentity(Principal principal)",
    "returnType" : "Identity",
    "comment" : "\n     * Retrieves the identity whose name is the same as that of the\n     * specified principal. (Note: Identity implements Principal.)\n     *\n     * @param principal the principal corresponding to the identity\n     * to be retrieved.\n     *\n     * @return the identity whose name is the same as that of the\n     * principal, or null if there are no identities of the same name\n     * in this scope.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Identity getIdentity(PublicKey key)",
    "returnType" : "Identity",
    "comment" : "\n     * Retrieves the identity with the specified public key.\n     *\n     * @param key the public key for the identity to be returned.\n     *\n     * @return the identity with the given key, or null if there are\n     * no identities in this scope with that key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addIdentity(Identity identity) throws KeyManagementException",
    "returnType" : "void",
    "comment" : "\n     * Adds an identity to this identity scope.\n     *\n     * @param identity the identity to be added.\n     *\n     * @exception KeyManagementException if the identity is not\n     * valid, a name conflict occurs, another identity has the same\n     * public key as the identity being added, or another exception\n     * occurs. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeIdentity(Identity identity) throws KeyManagementException",
    "returnType" : "void",
    "comment" : "\n     * Removes an identity from this identity scope.\n     *\n     * @param identity the identity to be removed.\n     *\n     * @exception KeyManagementException if the identity is missing,\n     * or another exception occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Enumeration<Identity> identities()",
    "returnType" : "Enumeration<Identity>",
    "comment" : "\n     * Returns an enumeration of all identities in this identity scope.\n     *\n     * @return an enumeration of all identities in this identity scope.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this identity scope, including\n     * its name, its scope name, and the number of identities in this\n     * identity scope.\n     *\n     * @return a string representation of this identity scope.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void check(String directive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void initializeSystemScope()", "public static IdentityScope getSystemScope()", "protected static void setSystemScope(IdentityScope scope)", "public abstract int size()", "public abstract Identity getIdentity(String name)", "public Identity getIdentity(Principal principal)", "public abstract Identity getIdentity(PublicKey key)", "public abstract void addIdentity(Identity identity) throws KeyManagementException", "public abstract void removeIdentity(Identity identity) throws KeyManagementException", "public abstract Enumeration<Identity> identities()", "public String toString()", "private static void check(String directive)" ],
  "variableNames" : [ "serialVersionUID", "scope" ]
}