{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/RequestQueue.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "RequestQueue",
  "comment" : "\n * A queue of bursts of requests.\n *\n * <p>This queue maintains the count of frames that have been produced, and is thread safe.</p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_FRAME",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRepeatingRequest",
    "type" : "BurstHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestQueue",
    "type" : "ArrayDeque<BurstHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentFrameNumber",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentRepeatingFrameNumber",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentRequestId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJpegSurfaceIds",
    "type" : "List<Long>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized RequestQueueEntry getNext()",
    "returnType" : "RequestQueueEntry",
    "comment" : "\n     * Return and remove the next burst on the queue.\n     *\n     * <p>If a repeating burst is returned, it will not be removed.</p>\n     *\n     * @return an entry containing the next burst, the current frame number, and flag about whether\n     * request queue becomes empty. Null if no burst exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized long stopRepeating(int requestId)",
    "returnType" : "long",
    "comment" : "\n     * Cancel a repeating request.\n     *\n     * @param requestId the id of the repeating request to cancel.\n     * @return the last frame to be returned from the HAL for the given repeating request, or\n     *          {@code INVALID_FRAME} if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized long stopRepeating()",
    "returnType" : "long",
    "comment" : "\n     * Cancel a repeating request.\n     *\n     * @return the last frame to be returned from the HAL for the given repeating request, or\n     *          {@code INVALID_FRAME} if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized SubmitInfo submit(CaptureRequest[] requests, boolean repeating)",
    "returnType" : "SubmitInfo",
    "comment" : "\n     * Add a the given burst to the queue.\n     *\n     * <p>If the burst is repeating, replace the current repeating burst.</p>\n     *\n     * @param requests the burst of requests to add to the queue.\n     * @param repeating true if the burst is repeating.\n     * @return the submission info, including the new request id, and the last frame number, which\n     *   contains either the frame number of the last frame that will be returned for this request,\n     *   or the frame number of the last frame that will be returned for the current repeating\n     *   request if this burst is set to be repeating.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long calculateLastFrame(int requestId)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "INVALID_FRAME", "mRepeatingRequest", "mRequestQueue", "mCurrentFrameNumber", "mCurrentRepeatingFrameNumber", "mCurrentRequestId", "mJpegSurfaceIds" ],
  "methodNames" : [ "public synchronized RequestQueueEntry getNext()", "public synchronized long stopRepeating(int requestId)", "public synchronized long stopRepeating()", "public synchronized SubmitInfo submit(CaptureRequest[] requests, boolean repeating)", "private long calculateLastFrame(int requestId)" ]
}