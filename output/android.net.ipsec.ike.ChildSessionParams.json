{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/ChildSessionParams.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "ChildSessionParams",
  "comment" : "\n * ChildSessionParams is an abstract class that represents proposed configurations for negotiating a\n * Child Session.\n *\n * <p>Note that references to negotiated configurations will be held, and the same parameters will\n * be reused during rekey. This includes SA Proposals, lifetimes and traffic selectors.\n *\n * <p>IKE library will send out KE payload only if user has configured one or more DH groups. The KE\n * payload in a request will use the first DH group from the first user provided SA proposal (or the\n * peer selected SA proposal if it's a rekey request). The KE payload in a response will depend on\n * the SA proposal negotiation result.\n *\n * <p>When requesting the first Child Session in IKE AUTH, IKE library will not propose any DH group\n * even if user has configured it, as per RFC 7296. When rekeying this child session, IKE library\n * will accept DH groups that are configured in its ChildSessionParams. If after rekeying user needs\n * to have the same DH group as that of the IKE Session, then they need to explicitly set the same\n * DH Group in ChildSessionParams.\n *\n * <p>@see {@link TunnelModeChildSessionParams} and {@link TransportModeChildSessionParams}\n ",
  "links" : [ "android.net.ipsec.ike.TransportModeChildSessionParams", "android.net.ipsec.ike.TunnelModeChildSessionParams" ],
  "variables" : [ {
    "name" : "CHILD_HARD_LIFETIME_SEC_MINIMUM",
    "type" : "int",
    "comment" : " 5 minutes",
    "links" : [ ]
  }, {
    "name" : "CHILD_HARD_LIFETIME_SEC_MAXIMUM",
    "type" : "int",
    "comment" : " 4 hours",
    "links" : [ ]
  }, {
    "name" : "CHILD_HARD_LIFETIME_SEC_DEFAULT",
    "type" : "int",
    "comment" : " 2 hours",
    "links" : [ ]
  }, {
    "name" : "CHILD_SOFT_LIFETIME_SEC_MINIMUM",
    "type" : "int",
    "comment" : " 2 minutes",
    "links" : [ ]
  }, {
    "name" : "CHILD_SOFT_LIFETIME_SEC_DEFAULT",
    "type" : "int",
    "comment" : " 1 hour",
    "links" : [ ]
  }, {
    "name" : "CHILD_LIFETIME_MARGIN_SEC_MINIMUM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TRAFFIC_SELECTOR_IPV4",
    "type" : "IkeTrafficSelector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TRAFFIC_SELECTOR_IPV6",
    "type" : "IkeTrafficSelector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_TRANPORT_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INBOUND_TS_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OUTBOUND_TS_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SA_PROPOSALS_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HARD_LIFETIME_SEC_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SOFT_LIFETIME_SEC_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mInboundTrafficSelectors",
    "type" : "IkeTrafficSelector[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutboundTrafficSelectors",
    "type" : "IkeTrafficSelector[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSaProposals",
    "type" : "ChildSaProposal[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardLifetimeSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoftLifetimeSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsTransport",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ChildSessionParams fromPersistableBundle(@NonNull PersistableBundle in)",
    "returnType" : "ChildSessionParams",
    "comment" : "\n     * Constructs this object by deserializing a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle toPersistableBundle()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Serializes this object to a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static List<ChildSaProposal> getProposalsFromPersistableBundle(PersistableBundle in)",
    "returnType" : "List<ChildSaProposal>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected static List<IkeTrafficSelector> getTsFromPersistableBundle(PersistableBundle in, String key)",
    "returnType" : "List<IkeTrafficSelector>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<IkeTrafficSelector> getInboundTrafficSelectors()",
    "returnType" : "List<IkeTrafficSelector>",
    "comment" : "\n     * Retrieves configured inbound traffic selectors\n     *\n     * <p>@see {@link\n     * TunnelModeChildSessionParams.Builder#addInboundTrafficSelectors(IkeTrafficSelector)} or\n     * {@link\n     * TransportModeChildSessionParams.Builder#addInboundTrafficSelectors(IkeTrafficSelector)}\n     ",
    "links" : [ "TransportModeChildSessionParams.Builder#addInboundTrafficSelectors(IkeTrafficSelector)", "TunnelModeChildSessionParams.Builder#addInboundTrafficSelectors(IkeTrafficSelector)" ]
  }, {
    "name" : "public List<IkeTrafficSelector> getOutboundTrafficSelectors()",
    "returnType" : "List<IkeTrafficSelector>",
    "comment" : "\n     * Retrieves configured outbound traffic selectors\n     *\n     * <p>@see {@link\n     * TunnelModeChildSessionParams.Builder#addOutboundTrafficSelectors(IkeTrafficSelector)} or\n     * {@link\n     * TransportModeChildSessionParams.Builder#addOutboundTrafficSelectors(IkeTrafficSelector)}\n     ",
    "links" : [ "TunnelModeChildSessionParams.Builder#addOutboundTrafficSelectors(IkeTrafficSelector)", "TransportModeChildSessionParams.Builder#addOutboundTrafficSelectors(IkeTrafficSelector)" ]
  }, {
    "name" : "public List<ChildSaProposal> getSaProposals()",
    "returnType" : "List<ChildSaProposal>",
    "comment" : "\n     * Retrieves all ChildSaProposals configured\n     *\n     * @deprecated Callers should use {@link #getChildSaProposals()}. This method is deprecated\n     *     because its name does not match the return type,\n     * @hide\n     ",
    "links" : [ "#getChildSaProposals()" ]
  }, {
    "name" : "public List<ChildSaProposal> getChildSaProposals()",
    "returnType" : "List<ChildSaProposal>",
    "comment" : " Retrieves all ChildSaProposals configured ",
    "links" : [ ]
  }, {
    "name" : "public int getHardLifetimeSeconds()",
    "returnType" : "int",
    "comment" : " Use \"second\" because smaller unit won't make sense to describe a rekey interval.",
    "links" : [ ]
  }, {
    "name" : "public int getSoftLifetimeSeconds()",
    "returnType" : "int",
    "comment" : " Use \"second\" because smaller unit won't make sense to describe a rekey interval.",
    "links" : [ ]
  }, {
    "name" : "public IkeTrafficSelector[] getInboundTrafficSelectorsInternal()",
    "returnType" : "IkeTrafficSelector[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IkeTrafficSelector[] getOutboundTrafficSelectorsInternal()",
    "returnType" : "IkeTrafficSelector[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ChildSaProposal[] getSaProposalsInternal()",
    "returnType" : "ChildSaProposal[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getHardLifetimeMsInternal()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getSoftLifetimeMsInternal()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTransportMode()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IkeTrafficSelector buildDefaultTrafficSelector(@IkeTrafficSelector.TrafficSelectorType int tsType)",
    "returnType" : "IkeTrafficSelector",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ChildSessionParams fromPersistableBundle(@NonNull PersistableBundle in)", "public PersistableBundle toPersistableBundle()", "protected static List<ChildSaProposal> getProposalsFromPersistableBundle(PersistableBundle in)", "protected static List<IkeTrafficSelector> getTsFromPersistableBundle(PersistableBundle in, String key)", "public List<IkeTrafficSelector> getInboundTrafficSelectors()", "public List<IkeTrafficSelector> getOutboundTrafficSelectors()", "public List<ChildSaProposal> getSaProposals()", "public List<ChildSaProposal> getChildSaProposals()", "public int getHardLifetimeSeconds()", "public int getSoftLifetimeSeconds()", "public IkeTrafficSelector[] getInboundTrafficSelectorsInternal()", "public IkeTrafficSelector[] getOutboundTrafficSelectorsInternal()", "public ChildSaProposal[] getSaProposalsInternal()", "public long getHardLifetimeMsInternal()", "public long getSoftLifetimeMsInternal()", "public boolean isTransportMode()", "public int hashCode()", "public boolean equals(Object o)", "private static IkeTrafficSelector buildDefaultTrafficSelector(@IkeTrafficSelector.TrafficSelectorType int tsType)" ],
  "variableNames" : [ "CHILD_HARD_LIFETIME_SEC_MINIMUM", "CHILD_HARD_LIFETIME_SEC_MAXIMUM", "CHILD_HARD_LIFETIME_SEC_DEFAULT", "CHILD_SOFT_LIFETIME_SEC_MINIMUM", "CHILD_SOFT_LIFETIME_SEC_DEFAULT", "CHILD_LIFETIME_MARGIN_SEC_MINIMUM", "DEFAULT_TRAFFIC_SELECTOR_IPV4", "DEFAULT_TRAFFIC_SELECTOR_IPV6", "IS_TRANPORT_KEY", "INBOUND_TS_KEY", "OUTBOUND_TS_KEY", "SA_PROPOSALS_KEY", "HARD_LIFETIME_SEC_KEY", "SOFT_LIFETIME_SEC_KEY", "mInboundTrafficSelectors", "mOutboundTrafficSelectors", "mSaProposals", "mHardLifetimeSec", "mSoftLifetimeSec", "mIsTransport" ]
}