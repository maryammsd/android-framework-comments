{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMDefaultBaseTraversers.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DescendantTraverser",
  "comment" : "\n   * Implements traversal of the Ancestor access, in reverse document order.\n   ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected int getFirstPotential(int identity)",
    "returnType" : "int",
    "comment" : "\n     * Get the first potential identity that can be returned.  This should \n     * be overridded by classes that need to return the self node.\n     *\n     * @param identity The node identity of the root context of the traversal.\n     *\n     * @return The first potential node that can be in the traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean axisHasBeenProcessed(int axisRoot)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if the axis has been fully processed to tell if a the wait for \n     * an arriving node should terminate.\n     *\n     * @param axisRoot The root identity of the axis.\n     *\n     * @return true if the axis has been fully processed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getSubtreeRoot(int handle)",
    "returnType" : "int",
    "comment" : "\n     * Get the subtree root identity from the handle that was passed in by \n     * the caller.  Derived classes may override this to change the root \n     * context of the traversal.\n     * \n     * @param handle handle to the root context.\n     * @return identity of the root of the subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isDescendant(int subtreeRootIdentity, int identity)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if this node identity is a descendant.  Assumes that\n     * the node info for the element has already been obtained.\n     *\n     * %REVIEW% This is really parentFollowsRootInDocumentOrder ...\n     * which fails if the parent starts after the root ends.\n     * May be sufficient for this class's logic, but misleadingly named!\n     *\n     * @param subtreeRootIdentity The root context of the subtree in question.\n     * @param identity The index number of the node in question.\n     * @return true if the index is a descendant of _startNode.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isAfterAxis(int axisRoot, int identity)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if a node is outside the axis being traversed.  This method must be \n     * implemented by derived classes, and must be robust enough to handle any \n     * node that occurs after the axis root.\n     *\n     * @param axisRoot The root identity of the axis.\n     * @param identity The node in question.\n     *\n     * @return true if the given node falls outside the axis being traversed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int first(int context, int expandedTypeID)",
    "returnType" : "int",
    "comment" : "\n     * By the nature of the stateless traversal, the context node can not be\n     * returned or the iteration will go into an infinate loop.  So to traverse\n     * an axis, the first function must be used to get the first node.\n     *\n     * <p>This method needs to be overloaded only by those axis that process\n     * the self node. <\\p>\n     *\n     * @param context The context node of this traversal. This is the point\n     * of origin for the traversal -- its \"root node\" or starting point.\n     * @param expandedTypeID The expanded type ID that must match.\n     *\n     * @return the first node in the traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next(int context, int current)",
    "returnType" : "int",
    "comment" : "\n     * Traverse to the next node after the current node.\n     *\n     * @param context The context node of this iteration.\n     * @param current The current node of the iteration.\n     *\n     * @return the next node in the iteration, or DTM.NULL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next(int context, int current, int expandedTypeID)",
    "returnType" : "int",
    "comment" : "\n     * Traverse to the next node after the current node that is matched\n     * by the expanded type ID.\n     *\n     * @param context The context node of this iteration.\n     * @param current The current node of the iteration.\n     * @param expandedTypeID The expanded type ID that must match.\n     *\n     * @return the next node in the iteration, or DTM.NULL.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int getFirstPotential(int identity)", "protected boolean axisHasBeenProcessed(int axisRoot)", "protected int getSubtreeRoot(int handle)", "protected boolean isDescendant(int subtreeRootIdentity, int identity)", "protected boolean isAfterAxis(int axisRoot, int identity)", "public int first(int context, int expandedTypeID)", "public int next(int context, int current)", "public int next(int context, int current, int expandedTypeID)" ],
  "variableNames" : [ ]
}