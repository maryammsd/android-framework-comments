{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUBinary.java",
  "packageName" : "android.icu.impl",
  "className" : "ICUBinary",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "icuDataFiles",
    "type" : "List<DataFile>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAGIC1",
    "type" : "byte",
    "comment" : "\n    * Magic numbers to authenticate the data file\n    ",
    "links" : [ ]
  }, {
    "name" : "MAGIC2",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_SET_",
    "type" : "byte",
    "comment" : "\n    * File format authentication values\n    ",
    "links" : [ ]
  }, {
    "name" : "CHAR_SIZE_",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAGIC_NUMBER_AUTHENTICATION_FAILED_",
    "type" : "String",
    "comment" : "\n    * Error messages\n    ",
    "links" : [ ]
  }, {
    "name" : "HEADER_AUTHENTICATION_FAILED_",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void addDataFilesFromPath(String dataPath, List<DataFile> files)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addDataFilesFromFolder(File folder, StringBuilder itemPath, List<DataFile> dataFiles)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int compareKeys(CharSequence key, ByteBuffer bytes, int offset)",
    "returnType" : "int",
    "comment" : "\n     * Compares the length-specified input key with the\n     * NUL-terminated table key. (ASCII)\n     ",
    "links" : [ ]
  }, {
    "name" : " static int compareKeys(CharSequence key, byte[] bytes, int offset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ByteBuffer getData(String itemPath)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Loads an ICU binary data file and returns it as a ByteBuffer.\n     * The buffer contents is normally read-only, but its position etc. can be modified.\n     *\n     * @param itemPath Relative ICU data item path, for example \"root.res\" or \"coll/ucadata.icu\".\n     * @return The data as a read-only ByteBuffer,\n     *         or null if the resource could not be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ByteBuffer getData(ClassLoader loader, String resourceName, String itemPath)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Loads an ICU binary data file and returns it as a ByteBuffer.\n     * The buffer contents is normally read-only, but its position etc. can be modified.\n     *\n     * @param loader Used for loader.getResourceAsStream() unless the data is found elsewhere.\n     * @param resourceName Resource name for use with the loader.\n     * @param itemPath Relative ICU data item path, for example \"root.res\" or \"coll/ucadata.icu\".\n     * @return The data as a read-only ByteBuffer,\n     *         or null if the resource could not be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ByteBuffer getRequiredData(String itemPath)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Loads an ICU binary data file and returns it as a ByteBuffer.\n     * The buffer contents is normally read-only, but its position etc. can be modified.\n     *\n     * @param itemPath Relative ICU data item path, for example \"root.res\" or \"coll/ucadata.icu\".\n     * @return The data as a read-only ByteBuffer.\n     * @throws MissingResourceException if required==true and the resource could not be found\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ByteBuffer getData(ClassLoader loader, String resourceName, String itemPath, boolean required)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Loads an ICU binary data file and returns it as a ByteBuffer.\n     * The buffer contents is normally read-only, but its position etc. can be modified.\n     *\n     * @param loader Used for loader.getResourceAsStream() unless the data is found elsewhere.\n     * @param resourceName Resource name for use with the loader.\n     * @param itemPath Relative ICU data item path, for example \"root.res\" or \"coll/ucadata.icu\".\n     * @param required If the resource cannot be found,\n     *        this method returns null (!required) or throws an exception (required).\n     * @return The data as a read-only ByteBuffer,\n     *         or null if required==false and the resource could not be found.\n     * @throws MissingResourceException if required==true and the resource could not be found\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ByteBuffer getDataFromFile(String itemPath)",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ByteBuffer mapFile(File path)",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addBaseNamesInFileFolder(String folder, String suffix, Set<String> names)",
    "returnType" : "void",
    "comment" : "\n     * @param folder The relative ICU data folder, like \"\" or \"coll\".\n     * @param suffix Usually \".res\".\n     * @param names File base names relative to the folder are added without the suffix,\n     *        for example \"de_CH\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VersionInfo readHeaderAndDataVersion(ByteBuffer bytes, int dataFormat, Authenticate authenticate) throws IOException",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Same as readHeader(), but returns a VersionInfo rather than a compact int.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int readHeader(ByteBuffer bytes, int dataFormat, Authenticate authenticate) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads an ICU data header, checks the data format, and returns the data version.\n     *\n     * <p>Assumes that the ByteBuffer position is 0 on input.\n     * The buffer byte order is set according to the data.\n     * The buffer position is advanced past the header (including UDataInfo and comment).\n     *\n     * <p>See C++ ucmndata.h and unicode/udata.h.\n     *\n     * @return dataVersion\n     * @throws IOException if this is not a valid ICU data item of the expected dataFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int writeHeader(int dataFormat, int formatVersion, int dataVersion, DataOutputStream dos) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes an ICU data header.\n     * Does not write a copyright string.\n     *\n     * @return The length of the header (number of bytes written).\n     * @throws IOException from the DataOutputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void skipBytes(ByteBuffer bytes, int skipLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getBytes(ByteBuffer bytes, int length, int additionalSkipLength)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getString(ByteBuffer bytes, int length, int additionalSkipLength)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static char[] getChars(ByteBuffer bytes, int length, int additionalSkipLength)",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static short[] getShorts(ByteBuffer bytes, int length, int additionalSkipLength)",
    "returnType" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int[] getInts(ByteBuffer bytes, int length, int additionalSkipLength)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long[] getLongs(ByteBuffer bytes, int length, int additionalSkipLength)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ByteBuffer sliceWithOrder(ByteBuffer bytes)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Same as ByteBuffer.slice() plus preserving the byte order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ByteBuffer getByteBufferFromInputStreamAndCloseStream(InputStream is) throws IOException",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Reads the entire contents from the stream into a byte array\n     * and wraps it into a ByteBuffer. Closes the InputStream at the end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VersionInfo getVersionInfoFromCompactInt(int version)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Returns a VersionInfo for the bytes in the compact version integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getVersionByteArrayFromCompactInt(int version)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns an array of the bytes in the compact version integer.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void addDataFilesFromPath(String dataPath, List<DataFile> files)", "private static void addDataFilesFromFolder(File folder, StringBuilder itemPath, List<DataFile> dataFiles)", " static int compareKeys(CharSequence key, ByteBuffer bytes, int offset)", " static int compareKeys(CharSequence key, byte[] bytes, int offset)", "public static ByteBuffer getData(String itemPath)", "public static ByteBuffer getData(ClassLoader loader, String resourceName, String itemPath)", "public static ByteBuffer getRequiredData(String itemPath)", "private static ByteBuffer getData(ClassLoader loader, String resourceName, String itemPath, boolean required)", "private static ByteBuffer getDataFromFile(String itemPath)", "private static ByteBuffer mapFile(File path)", "public static void addBaseNamesInFileFolder(String folder, String suffix, Set<String> names)", "public static VersionInfo readHeaderAndDataVersion(ByteBuffer bytes, int dataFormat, Authenticate authenticate) throws IOException", "public static int readHeader(ByteBuffer bytes, int dataFormat, Authenticate authenticate) throws IOException", "public static int writeHeader(int dataFormat, int formatVersion, int dataVersion, DataOutputStream dos) throws IOException", "public static void skipBytes(ByteBuffer bytes, int skipLength)", "public static byte[] getBytes(ByteBuffer bytes, int length, int additionalSkipLength)", "public static String getString(ByteBuffer bytes, int length, int additionalSkipLength)", "public static char[] getChars(ByteBuffer bytes, int length, int additionalSkipLength)", "public static short[] getShorts(ByteBuffer bytes, int length, int additionalSkipLength)", "public static int[] getInts(ByteBuffer bytes, int length, int additionalSkipLength)", "public static long[] getLongs(ByteBuffer bytes, int length, int additionalSkipLength)", "public static ByteBuffer sliceWithOrder(ByteBuffer bytes)", "public static ByteBuffer getByteBufferFromInputStreamAndCloseStream(InputStream is) throws IOException", "public static VersionInfo getVersionInfoFromCompactInt(int version)", "public static byte[] getVersionByteArrayFromCompactInt(int version)" ],
  "variableNames" : [ "icuDataFiles", "MAGIC1", "MAGIC2", "CHAR_SET_", "CHAR_SIZE_", "MAGIC_NUMBER_AUTHENTICATION_FAILED_", "HEADER_AUTHENTICATION_FAILED_" ]
}