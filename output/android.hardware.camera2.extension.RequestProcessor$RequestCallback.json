{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/extension/RequestProcessor.java",
  "packageName" : "android.hardware.camera2.extension",
  "className" : "RequestCallback",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onCaptureStarted(@NonNull Request request, long frameNumber, long timestamp)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the camera device has started\n         * capturing the output image for the request, at the beginning of\n         * image exposure, or when the camera device has started\n         * processing an input image for a reprocess request.\n         *\n         * @param request The request that was given to the\n         *                RequestProcessor\n         * @param timestamp the timestamp at start of capture for a\n         *                  regular request, or the timestamp at the input\n         *                  image's start of capture for a\n         *                  reprocess request, in nanoseconds.\n         *                  The timestamp matches with and uses the same\n         *                  time base as {@link CaptureResult#SENSOR_TIMESTAMP}.\n         * @param frameNumber the frame number for this capture\n         *\n         ",
    "links" : [ "android.hardware.camera2.CaptureResult#SENSOR_TIMESTAMP" ]
  }, {
    "name" : " void onCaptureProgressed(@NonNull Request request, @NonNull CaptureResult partialResult)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when an image capture makes partial forward\n         * progress; some (but not all) results from an image capture are\n         * available.\n         *\n         * <p>The result provided here will contain some subset of the fields\n         * of  a full result. Multiple {@link #onCaptureProgressed} calls may\n         * happen per capture; a given result field will only be present in\n         * one partial capture at most. The final {@link #onCaptureCompleted}\n         * call will always contain all the fields (in particular, the union\n         * of all the fields of all the partial results composing the total\n         * result).</p>\n         *\n         * <p>For each request, some result data might be available earlier\n         * than others. The typical delay between each partial result (per\n         * request) is a single frame interval.\n         * For performance-oriented use-cases, applications should query the\n         * metadata they need to make forward progress from the partial\n         * results and avoid waiting for the completed result.</p>\n         *\n         * <p>For a particular request, {@link #onCaptureProgressed} may happen\n         * before or after {@link #onCaptureStarted}.</p>\n         *\n         * <p>Each request will generate at least {@code 1} partial results,\n         * and at most {@link\n         * CameraCharacteristics#REQUEST_PARTIAL_RESULT_COUNT} partial\n         * results.</p>\n         *\n         * <p>Depending on the request settings, the number of partial\n         * results per request  will vary, although typically the partial\n         * count could be the same as long as the\n         * camera device subsystems enabled stay the same.</p>\n         *\n         * @param request The request that was given to the RequestProcessor\n         * @param partialResult The partial output metadata from the capture,\n         *                      which includes a subset of the {@link\n         *                      TotalCaptureResult} fields.\n         ",
    "links" : [ "#onCaptureCompleted", "#onCaptureStarted", "android.hardware.camera2.CameraCharacteristics#REQUEST_PARTIAL_RESULT_COUNT", "android.hardware.camera2.TotalCaptureResult", "#onCaptureProgressed" ]
  }, {
    "name" : " void onCaptureCompleted(@NonNull Request request, @Nullable TotalCaptureResult totalCaptureResult)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when an image capture has fully completed and\n         * all the result metadata is available.\n         *\n         * <p>This callback will always fire after the last {@link\n         * #onCaptureProgressed}; in other words, no more partial results will\n         * be delivered once the completed result is available.</p>\n         *\n         * <p>For performance-intensive use-cases where latency is a factor,\n         * consider using {@link #onCaptureProgressed} instead.</p>\n         *\n         *\n         * @param request The request that was given to the RequestProcessor\n         * @param totalCaptureResult The total output metadata from the\n         *                           capture, including the final capture\n         *                           parameters and the state of the camera\n         *                           system during capture.\n         ",
    "links" : [ "#onCaptureProgressed" ]
  }, {
    "name" : " void onCaptureFailed(@NonNull Request request, @NonNull CaptureFailure failure)",
    "returnType" : "void",
    "comment" : "\n         * This method is called instead of {@link #onCaptureCompleted} when the\n         * camera device failed to produce a {@link CaptureResult} for the\n         * request.\n         *\n         * <p>Other requests are unaffected, and some or all image buffers\n         * from the capture may have been pushed to their respective output\n         * streams.</p>\n         *\n         * <p>If a logical multi-camera fails to generate capture result for\n         * one of its physical cameras, this method will be called with a\n         * {@link CaptureFailure} for that physical camera. In such cases, as\n         * long as the logical camera capture result is valid, {@link\n         * #onCaptureCompleted} will still be called.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param request The request that was given to the RequestProcessor\n         * @param failure The output failure from the capture, including the\n         *                failure reason and the frame number.\n         ",
    "links" : [ "#onCaptureCompleted", "android.hardware.camera2.CaptureResult", "android.hardware.camera2.CaptureFailure" ]
  }, {
    "name" : " void onCaptureBufferLost(@NonNull Request request, long frameNumber, int outputStreamId)",
    "returnType" : "void",
    "comment" : "\n         * <p>This method is called if a single buffer for a capture could not\n         * be sent to its destination surface.</p>\n         *\n         * <p>If the whole capture failed, then {@link #onCaptureFailed} will be\n         * called instead. If some but not all buffers were captured but the\n         * result metadata will not be available, then captureFailed will be\n         * invoked with {@link CaptureFailure#wasImageCaptured}\n         * returning true, along with one or more calls to {@link\n         * #onCaptureBufferLost} for the failed outputs.</p>\n         *\n         * @param request The request that was given to the RequestProcessor\n         * @param frameNumber The frame number for the request\n         * @param outputStreamId The output stream id that the buffer will not\n         *                       be produced for\n         ",
    "links" : [ "#onCaptureBufferLost", "android.hardware.camera2.CaptureFailure#wasImageCaptured", "#onCaptureFailed" ]
  }, {
    "name" : " void onCaptureSequenceCompleted(int sequenceId, long frameNumber)",
    "returnType" : "void",
    "comment" : "\n         * This method is called independently of the others in\n         * CaptureCallback, when a capture sequence finishes and all {@link\n         * CaptureResult} or {@link CaptureFailure} for it have been returned\n         * via this listener.\n         *\n         * <p>In total, there will be at least one result/failure returned by\n         * this listener  before this callback is invoked. If the capture\n         * sequence is aborted before any requests have been processed,\n         * {@link #onCaptureSequenceAborted} is invoked instead.</p>\n         *\n         * @param sequenceId A sequence ID returned by the RequestProcessor\n         *                   capture family of methods\n         * @param frameNumber The last frame number (returned by {@link\n         *                    CaptureResult#getFrameNumber}\n         *                    or {@link CaptureFailure#getFrameNumber}) in\n         *                    the capture sequence.\n         ",
    "links" : [ "android.hardware.camera2.CaptureResult", "#onCaptureSequenceAborted", "android.hardware.camera2.CaptureFailure#getFrameNumber", "android.hardware.camera2.CaptureFailure", "android.hardware.camera2.CaptureResult#getFrameNumber" ]
  }, {
    "name" : " void onCaptureSequenceAborted(int sequenceId)",
    "returnType" : "void",
    "comment" : "\n         * This method is called independently of the others in\n         * CaptureCallback, when a capture sequence aborts before any {@link\n         * CaptureResult} or {@link CaptureFailure} for it have been returned\n         * via this listener.\n         *\n         * <p>Due to the asynchronous nature of the camera device, not all\n         * submitted captures are immediately processed. It is possible to\n         * clear out the pending requests by a variety of operations such as\n         * {@link RequestProcessor#stopRepeating} or\n         * {@link RequestProcessor#abortCaptures}. When such an event\n         * happens, {@link #onCaptureSequenceCompleted} will not be called.</p>\n         * @param sequenceId A sequence ID returned by the RequestProcessor\n         *                   capture family of methods\n         ",
    "links" : [ "#onCaptureSequenceCompleted", "android.hardware.camera2.CaptureResult", "android.hardware.camera2.CaptureFailure", "android.hardware.camera2.extension.RequestProcessor#stopRepeating", "android.hardware.camera2.extension.RequestProcessor#abortCaptures" ]
  } ],
  "methodNames" : [ " void onCaptureStarted(@NonNull Request request, long frameNumber, long timestamp)", " void onCaptureProgressed(@NonNull Request request, @NonNull CaptureResult partialResult)", " void onCaptureCompleted(@NonNull Request request, @Nullable TotalCaptureResult totalCaptureResult)", " void onCaptureFailed(@NonNull Request request, @NonNull CaptureFailure failure)", " void onCaptureBufferLost(@NonNull Request request, long frameNumber, int outputStreamId)", " void onCaptureSequenceCompleted(int sequenceId, long frameNumber)", " void onCaptureSequenceAborted(int sequenceId)" ],
  "variableNames" : [ ]
}