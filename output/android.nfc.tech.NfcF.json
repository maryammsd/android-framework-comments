{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/tech/NfcF.java",
  "packageName" : "android.nfc.tech",
  "className" : "NfcF",
  "comment" : "\n * Provides access to NFC-F (JIS 6319-4) properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire a {@link NfcF} object using {@link #get}.\n * <p>The primary NFC-F I/O operation is {@link #transceive}. Applications must\n * implement their own protocol stack on top of {@link #transceive}.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SC",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PMM",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mSystemCode",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturer",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NfcF get(Tag tag)",
    "returnType" : "NfcF",
    "comment" : "\n     * Get an instance of {@link NfcF} for the given tag.\n     * <p>Returns null if {@link NfcF} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag does not support NFC-F.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param tag an NFC-F compatible tag\n     * @return NFC-F object\n     ",
    "links" : [ "android.nfc.Tag#getTechList", "android.nfc.tech.NfcF" ]
  }, {
    "name" : "public byte[] getSystemCode()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the System Code bytes from tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return System Code bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getManufacturer()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the Manufacturer bytes from tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return Manufacturer bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw NFC-F commands to the tag and receive the response.\n     *\n     * <p>Applications must not prefix the SoD (preamble and sync code)\n     * and/or append the EoD (CRC) to the payload, it will be automatically calculated.\n     *\n     * <p>A typical NFC-F frame for this method looks like:\n     * <pre>\n     * LENGTH (1 byte) --- CMD (1 byte) -- IDm (8 bytes) -- PARAMS (LENGTH - 10 bytes)\n     * </pre>\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum amount of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param data bytes to send\n     * @return bytes received in response\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or this operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#getMaxTransceiveLength", "java.io.IOException", "#close" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive" ]
  }, {
    "name" : "public void setTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link #transceive} timeout in milliseconds.\n     *\n     * <p>The timeout only applies to {@link #transceive} on this object,\n     * and is reset to a default value when {@link #close} is called.\n     *\n     * <p>Setting a longer timeout may be useful when performing\n     * transactions that require a long processing time on the tag\n     * such as key generation.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param timeout timeout value in milliseconds\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#close" ]
  }, {
    "name" : "public int getTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Get the current {@link #transceive} timeout in milliseconds.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return timeout value in milliseconds\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive" ]
  } ],
  "variableNames" : [ "TAG", "EXTRA_SC", "EXTRA_PMM", "mSystemCode", "mManufacturer" ],
  "methodNames" : [ "public static NfcF get(Tag tag)", "public byte[] getSystemCode()", "public byte[] getManufacturer()", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()", "public void setTimeout(int timeout)", "public int getTimeout()" ]
}