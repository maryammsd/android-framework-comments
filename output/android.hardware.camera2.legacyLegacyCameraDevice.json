{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/LegacyCameraDevice.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "LegacyCameraDevice",
  "comment" : "\n * This class emulates the functionality of a Camera2 device using a the old Camera class.\n *\n * <p>\n * There are two main components that are used to implement this:\n * - A state machine containing valid Camera2 device states ({@link CameraDeviceState}).\n * - A message-queue based pipeline that manages an old Camera class, and executes capture and\n *   configuration requests.\n * </p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCameraId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStaticCharacteristics",
    "type" : "CameraCharacteristics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceCallbacks",
    "type" : "ICameraDeviceCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceState",
    "type" : "CameraDeviceState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguredSurfaces",
    "type" : "SparseArray<Surface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdle",
    "type" : "ConditionVariable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackHandlerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ILLEGAL_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRALLOC_USAGE_RENDERSCRIPT",
    "type" : "int",
    "comment" : " Keep up to date with values in hardware/libhardware/include/hardware/gralloc.h",
    "links" : [ ]
  }, {
    "name" : "GRALLOC_USAGE_SW_READ_OFTEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRALLOC_USAGE_HW_TEXTURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRALLOC_USAGE_HW_COMPOSER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRALLOC_USAGE_HW_RENDER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRALLOC_USAGE_HW_VIDEO_ENCODER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_DIMEN_FOR_ROUNDING",
    "type" : "int",
    "comment" : " maximum allowed width for rounding",
    "links" : [ ]
  }, {
    "name" : "NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW",
    "type" : "int",
    "comment" : " Keep up to date with values in system/core/include/system/window.h",
    "links" : [ ]
  }, {
    "name" : "mStateListener",
    "type" : "CameraDeviceState.CameraDeviceStateListener",
    "comment" : "\n     * Listener for the camera device state machine.  Calls the appropriate\n     * {@link ICameraDeviceCallbacks} for each state transition.\n     ",
    "links" : [ "ICameraDeviceCallbacks" ]
  }, {
    "name" : "mRequestThreadManager",
    "type" : "RequestThreadManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private CaptureResultExtras getExtrasFromRequest(RequestHolder holder)",
    "returnType" : "CaptureResultExtras",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CaptureResultExtras getExtrasFromRequest(RequestHolder holder, int errorCode, Object errorArg)",
    "returnType" : "CaptureResultExtras",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean needsConversion(Surface s) throws BufferQueueAbandonedException",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a given surface uses {@link ImageFormat#YUV_420_888} or format that can be readily\n     * converted to this; YV12 and NV21 are the two currently supported formats.\n     *\n     * @param s the surface to check.\n     * @return {@code true} if the surfaces uses {@link ImageFormat#YUV_420_888} or a compatible\n     *          format.\n     ",
    "links" : [ "ImageFormat#YUV_420_888", "ImageFormat#YUV_420_888" ]
  }, {
    "name" : "public int configureOutputs(SparseArray<Surface> outputs)",
    "returnType" : "int",
    "comment" : "\n     * Configure the device with a set of output surfaces.\n     *\n     * <p>Using empty or {@code null} {@code outputs} is the same as unconfiguring.</p>\n     *\n     * <p>Every surface in {@code outputs} must be non-{@code null}.</p>\n     *\n     * @param outputs a list of surfaces to set. LegacyCameraDevice will take ownership of this\n     *          list; it must not be modified by the caller once it's passed in.\n     * @return an error code for this binder operation, or {@link NO_ERROR}\n     *          on success.\n     ",
    "links" : [ "NO_ERROR" ]
  }, {
    "name" : "public int configureOutputs(SparseArray<Surface> outputs, boolean validateSurfacesOnly)",
    "returnType" : "int",
    "comment" : "\n     * Configure the device with a set of output surfaces.\n     *\n     * <p>Using empty or {@code null} {@code outputs} is the same as unconfiguring.</p>\n     *\n     * <p>Every surface in {@code outputs} must be non-{@code null}.</p>\n     *\n     * @param outputs a list of surfaces to set. LegacyCameraDevice will take ownership of this\n     *          list; it must not be modified by the caller once it's passed in.\n     * @param validateSurfacesOnly If set it will only check whether the outputs are supported\n     *                             and avoid any device configuration.\n     * @return an error code for this binder operation, or {@link NO_ERROR}\n     *          on success.\n     * @hide\n     ",
    "links" : [ "NO_ERROR" ]
  }, {
    "name" : "public SubmitInfo submitRequestList(CaptureRequest[] requestList, boolean repeating)",
    "returnType" : "SubmitInfo",
    "comment" : "\n     * Submit a burst of capture requests.\n     *\n     * @param requestList a list of capture requests to execute.\n     * @param repeating {@code true} if this burst is repeating.\n     * @return the submission info, including the new request id, and the last frame number, which\n     *   contains either the frame number of the last frame that will be returned for this request,\n     *   or the frame number of the last frame that will be returned for the current repeating\n     *   request if this burst is set to be repeating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SubmitInfo submitRequest(CaptureRequest request, boolean repeating)",
    "returnType" : "SubmitInfo",
    "comment" : "\n     * Submit a single capture request.\n     *\n     * @param request the capture request to execute.\n     * @param repeating {@code true} if this request is repeating.\n     * @return the submission info, including the new request id, and the last frame number, which\n     *   contains either the frame number of the last frame that will be returned for this request,\n     *   or the frame number of the last frame that will be returned for the current repeating\n     *   request if this burst is set to be repeating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long cancelRequest(int requestId)",
    "returnType" : "long",
    "comment" : "\n     * Cancel the repeating request with the given request id.\n     *\n     * @param requestId the request id of the request to cancel.\n     * @return the last frame number to be returned from the HAL for the given repeating request, or\n     *          {@code INVALID_FRAME} if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void waitUntilIdle()",
    "returnType" : "void",
    "comment" : "\n     * Block until the {@link ICameraDeviceCallbacks#onCameraIdle()} callback is received.\n     ",
    "links" : [ "ICameraDeviceCallbacks#onCameraIdle" ]
  }, {
    "name" : "public long flush()",
    "returnType" : "long",
    "comment" : "\n     * Flush any pending requests.\n     *\n     * @return the last frame number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioRestriction(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAudioRestriction()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the device has been closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long findEuclidDistSquare(Size a, Size b)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Size findClosestSize(Size size, Size[] supportedSizes)",
    "returnType" : "Size",
    "comment" : " frameworks/av/services/camera/libcameraservice/api2/CameraDeviceClient.cpp",
    "links" : [ ]
  }, {
    "name" : "public static Size getSurfaceSize(Surface surface) throws BufferQueueAbandonedException",
    "returnType" : "Size",
    "comment" : "\n     * Query the surface for its currently configured default buffer size.\n     * @param surface a non-{@code null} {@code Surface}\n     * @return the width and height of the surface\n     *\n     * @throws NullPointerException if the {@code surface} was {@code null}\n     * @throws BufferQueueAbandonedException if the {@code surface} was invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFlexibleConsumer(Surface output)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPreviewConsumer(Surface output)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isVideoEncoderConsumer(Surface output)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int detectSurfaceUsageFlags(Surface surface)",
    "returnType" : "int",
    "comment" : "\n     * Query the surface for its currently configured usage flags\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int detectSurfaceType(Surface surface) throws BufferQueueAbandonedException",
    "returnType" : "int",
    "comment" : "\n     * Query the surface for its currently configured format\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int detectSurfaceDataspace(Surface surface) throws BufferQueueAbandonedException",
    "returnType" : "int",
    "comment" : "\n     * Query the surface for its currently configured dataspace\n     ",
    "links" : [ ]
  }, {
    "name" : " static void connectSurface(Surface surface) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void disconnectSurface(Surface surface) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void produceFrame(Surface surface, byte[] pixelBuffer, int width, int height, int pixelFormat) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setSurfaceFormat(Surface surface, int pixelFormat) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setSurfaceDimens(Surface surface, int width, int height) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long getSurfaceId(Surface surface) throws BufferQueueAbandonedException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static List<Long> getSurfaceIds(SparseArray<Surface> surfaces) throws BufferQueueAbandonedException",
    "returnType" : "List<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static List<Long> getSurfaceIds(Collection<Surface> surfaces) throws BufferQueueAbandonedException",
    "returnType" : "List<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean containsSurfaceId(Surface s, Collection<Long> ids)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setSurfaceOrientation(Surface surface, int facing, int sensorOrientation) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Size getTextureSize(SurfaceTexture surfaceTexture) throws BufferQueueAbandonedException",
    "returnType" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setNextTimestamp(Surface surface, long timestamp) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setScalingMode(Surface surface, int mode) throws BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceType(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceDataspace(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceDimens(Surface surface, int[] dimens)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeConnectSurface(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeProduceFrame(Surface surface, byte[] pixelBuffer, int width, int height, int pixelFormat)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetSurfaceFormat(Surface surface, int pixelFormat)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetSurfaceDimens(Surface surface, int width, int height)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetSurfaceId(Surface surface)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetSurfaceOrientation(Surface surface, int facing, int sensorOrientation)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectTextureDimens(SurfaceTexture surfaceTexture, int[] dimens)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetNextTimestamp(Surface surface, long timestamp)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceUsageFlags(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetScalingMode(Surface surface, int scalingMode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDisconnectSurface(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static native int nativeGetJpegFooterSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mCameraId", "mStaticCharacteristics", "mDeviceCallbacks", "mDeviceState", "mConfiguredSurfaces", "mClosed", "mIdle", "mResultThread", "mCallbackHandlerThread", "mCallbackHandler", "mResultHandler", "ILLEGAL_VALUE", "GRALLOC_USAGE_RENDERSCRIPT", "GRALLOC_USAGE_SW_READ_OFTEN", "GRALLOC_USAGE_HW_TEXTURE", "GRALLOC_USAGE_HW_COMPOSER", "GRALLOC_USAGE_HW_RENDER", "GRALLOC_USAGE_HW_VIDEO_ENCODER", "MAX_DIMEN_FOR_ROUNDING", "NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW", "mStateListener", "mRequestThreadManager" ],
  "methodNames" : [ "private CaptureResultExtras getExtrasFromRequest(RequestHolder holder)", "private CaptureResultExtras getExtrasFromRequest(RequestHolder holder, int errorCode, Object errorArg)", " static boolean needsConversion(Surface s) throws BufferQueueAbandonedException", "public int configureOutputs(SparseArray<Surface> outputs)", "public int configureOutputs(SparseArray<Surface> outputs, boolean validateSurfacesOnly)", "public SubmitInfo submitRequestList(CaptureRequest[] requestList, boolean repeating)", "public SubmitInfo submitRequest(CaptureRequest request, boolean repeating)", "public long cancelRequest(int requestId)", "public void waitUntilIdle()", "public long flush()", "public void setAudioRestriction(int mode)", "public int getAudioRestriction()", "public boolean isClosed()", "public void close()", "protected void finalize() throws Throwable", " static long findEuclidDistSquare(Size a, Size b)", " static Size findClosestSize(Size size, Size[] supportedSizes)", "public static Size getSurfaceSize(Surface surface) throws BufferQueueAbandonedException", "public static boolean isFlexibleConsumer(Surface output)", "public static boolean isPreviewConsumer(Surface output)", "public static boolean isVideoEncoderConsumer(Surface output)", " static int detectSurfaceUsageFlags(Surface surface)", "public static int detectSurfaceType(Surface surface) throws BufferQueueAbandonedException", "public static int detectSurfaceDataspace(Surface surface) throws BufferQueueAbandonedException", " static void connectSurface(Surface surface) throws BufferQueueAbandonedException", " static void disconnectSurface(Surface surface) throws BufferQueueAbandonedException", " static void produceFrame(Surface surface, byte[] pixelBuffer, int width, int height, int pixelFormat) throws BufferQueueAbandonedException", " static void setSurfaceFormat(Surface surface, int pixelFormat) throws BufferQueueAbandonedException", " static void setSurfaceDimens(Surface surface, int width, int height) throws BufferQueueAbandonedException", "public static long getSurfaceId(Surface surface) throws BufferQueueAbandonedException", " static List<Long> getSurfaceIds(SparseArray<Surface> surfaces) throws BufferQueueAbandonedException", " static List<Long> getSurfaceIds(Collection<Surface> surfaces) throws BufferQueueAbandonedException", " static boolean containsSurfaceId(Surface s, Collection<Long> ids)", " static void setSurfaceOrientation(Surface surface, int facing, int sensorOrientation) throws BufferQueueAbandonedException", " static Size getTextureSize(SurfaceTexture surfaceTexture) throws BufferQueueAbandonedException", " static void setNextTimestamp(Surface surface, long timestamp) throws BufferQueueAbandonedException", " static void setScalingMode(Surface surface, int mode) throws BufferQueueAbandonedException", "private static native int nativeDetectSurfaceType(Surface surface)", "private static native int nativeDetectSurfaceDataspace(Surface surface)", "private static native int nativeDetectSurfaceDimens(Surface surface, int[] dimens)", "private static native int nativeConnectSurface(Surface surface)", "private static native int nativeProduceFrame(Surface surface, byte[] pixelBuffer, int width, int height, int pixelFormat)", "private static native int nativeSetSurfaceFormat(Surface surface, int pixelFormat)", "private static native int nativeSetSurfaceDimens(Surface surface, int width, int height)", "private static native long nativeGetSurfaceId(Surface surface)", "private static native int nativeSetSurfaceOrientation(Surface surface, int facing, int sensorOrientation)", "private static native int nativeDetectTextureDimens(SurfaceTexture surfaceTexture, int[] dimens)", "private static native int nativeSetNextTimestamp(Surface surface, long timestamp)", "private static native int nativeDetectSurfaceUsageFlags(Surface surface)", "private static native int nativeSetScalingMode(Surface surface, int scalingMode)", "private static native int nativeDisconnectSurface(Surface surface)", " static native int nativeGetJpegFooterSize()" ]
}