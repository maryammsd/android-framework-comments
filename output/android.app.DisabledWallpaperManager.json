{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/DisabledWallpaperManager.java",
  "packageName" : "android.app",
  "className" : "DisabledWallpaperManager",
  "comment" : "\n * A no-op implementation of {@link WallpaperManager}.\n ",
  "links" : [ "android.app.WallpaperManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "DisabledWallpaperManager",
    "comment" : " Don't need to worry about synchronization",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static DisabledWallpaperManager getInstance()",
    "returnType" : "DisabledWallpaperManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWallpaperSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSetWallpaperAllowed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static T unsupported()",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean unsupportedBoolean()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int unsupportedInt()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int which)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, int which)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getFastDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekFastDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap(boolean hardware)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmapAsUser(int userId, boolean hardware)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(int which)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnColorsChangedListener(OnColorsChangedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnColorsChangedListener(OnColorsChangedListener listener, Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(OnColorsChangedListener callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(OnColorsChangedListener callback, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(int which)",
    "returnType" : "WallpaperColors",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(int which, int userId)",
    "returnType" : "WallpaperColors",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(int which, int userId)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(int which, boolean getCropped)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forgetLoadedWallpaper()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo()",
    "returnType" : "WallpaperInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperInfoFile()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfoForUser(int userId)",
    "returnType" : "WallpaperInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which)",
    "returnType" : "WallpaperInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which, int userId)",
    "returnType" : "WallpaperInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperId(int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperIdForUser(int which, int userId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getCropAndSetWallpaperIntent(Uri imageUri)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setResource(int resid) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setResource(int resid, int which) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBitmap(Bitmap bitmap) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, int which) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, int which, int userId) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStream(InputStream bitmapData) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, int which) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasResourceWallpaper(int resid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void suggestDesiredDimensions(int minimumWidth, int minimumHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayPadding(Rect padding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayOffset(IBinder windowToken, int x, int y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaper()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaper(int which, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setWallpaperComponent(ComponentName name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setWallpaperComponent(ComponentName name, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaperOffsets(IBinder windowToken, float xOffset, float yOffset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaperOffsetSteps(float xStep, float yStep)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaperOffsets(IBinder windowToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear(int which) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWallpaperBackupEligible(int which)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean wallpaperSupportsWcg(int which)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static DisabledWallpaperManager getInstance()", "public boolean isWallpaperSupported()", "public boolean isSetWallpaperAllowed()", "private static T unsupported()", "private static boolean unsupportedBoolean()", "private static int unsupportedInt()", "public Drawable getDrawable()", "public Drawable getBuiltInDrawable()", "public Drawable getBuiltInDrawable(int which)", "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)", "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, int which)", "public Drawable peekDrawable()", "public Drawable getFastDrawable()", "public Drawable peekFastDrawable()", "public Bitmap getBitmap()", "public Bitmap getBitmap(boolean hardware)", "public Bitmap getBitmapAsUser(int userId, boolean hardware)", "public ParcelFileDescriptor getWallpaperFile(int which)", "public void addOnColorsChangedListener(OnColorsChangedListener listener, Handler handler)", "public void addOnColorsChangedListener(OnColorsChangedListener listener, Handler handler, int userId)", "public void removeOnColorsChangedListener(OnColorsChangedListener callback)", "public void removeOnColorsChangedListener(OnColorsChangedListener callback, int userId)", "public WallpaperColors getWallpaperColors(int which)", "public WallpaperColors getWallpaperColors(int which, int userId)", "public ParcelFileDescriptor getWallpaperFile(int which, int userId)", "public ParcelFileDescriptor getWallpaperFile(int which, boolean getCropped)", "public void forgetLoadedWallpaper()", "public WallpaperInfo getWallpaperInfo()", "public ParcelFileDescriptor getWallpaperInfoFile()", "public WallpaperInfo getWallpaperInfoForUser(int userId)", "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which)", "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which, int userId)", "public int getWallpaperId(int which)", "public int getWallpaperIdForUser(int which, int userId)", "public Intent getCropAndSetWallpaperIntent(Uri imageUri)", "public void setResource(int resid) throws IOException", "public int setResource(int resid, int which) throws IOException", "public void setBitmap(Bitmap bitmap) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, int which) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, int which, int userId) throws IOException", "public void setStream(InputStream bitmapData) throws IOException", "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup) throws IOException", "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, int which) throws IOException", "public boolean hasResourceWallpaper(int resid)", "public int getDesiredMinimumWidth()", "public int getDesiredMinimumHeight()", "public void suggestDesiredDimensions(int minimumWidth, int minimumHeight)", "public void setDisplayPadding(Rect padding)", "public void setDisplayOffset(IBinder windowToken, int x, int y)", "public void clearWallpaper()", "public void clearWallpaper(int which, int userId)", "public boolean setWallpaperComponent(ComponentName name)", "public boolean setWallpaperComponent(ComponentName name, int userId)", "public void setWallpaperOffsets(IBinder windowToken, float xOffset, float yOffset)", "public void setWallpaperOffsetSteps(float xStep, float yStep)", "public void sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)", "public void clearWallpaperOffsets(IBinder windowToken)", "public void clear() throws IOException", "public void clear(int which) throws IOException", "public boolean isWallpaperBackupEligible(int which)", "public boolean wallpaperSupportsWcg(int which)" ],
  "variableNames" : [ "TAG", "sInstance", "DEBUG" ]
}