{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Grego.java",
  "packageName" : "android.icu.impl",
  "className" : "Grego",
  "comment" : "\n * A utility class providing proleptic Gregorian calendar functions\n * used by time zone and calendar code.  Do not instantiate.\n *\n * Note:  Unlike GregorianCalendar, all computations performed by this\n * class occur in the pure proleptic GregorianCalendar.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_MILLIS",
    "type" : "long",
    "comment" : " Max/min milliseconds ",
    "links" : [ ]
  }, {
    "name" : "MAX_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_SECOND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_MINUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JULIAN_1_CE",
    "type" : "int",
    "comment" : "  January 1, 1 CE Gregorian",
    "links" : [ ]
  }, {
    "name" : "JULIAN_1970_CE",
    "type" : "int",
    "comment" : "  January 1, 1970 CE Gregorian",
    "links" : [ ]
  }, {
    "name" : "MONTH_LENGTH",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAYS_BEFORE",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final boolean isLeapYear(int year)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the given year is a leap year.\n     * @param year Gregorian year, with 0 == 1 BCE, -1 == 2 BCE, etc.\n     * @return true if the year is a leap year\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int monthLength(int year, int month)",
    "returnType" : "int",
    "comment" : "\n     * Return the number of days in the given month.\n     * @param year Gregorian year, with 0 == 1 BCE, -1 == 2 BCE, etc.\n     * @param month 0-based month, with 0==Jan\n     * @return the number of days in the given month\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int previousMonthLength(int year, int month)",
    "returnType" : "int",
    "comment" : "\n     * Return the length of a previous month of the Gregorian calendar.\n     * @param year Gregorian year, with 0 == 1 BCE, -1 == 2 BCE, etc.\n     * @param month 0-based month, with 0==Jan\n     * @return the number of days in the month previous to the given month\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long fieldsToDay(int year, int month, int dom)",
    "returnType" : "long",
    "comment" : "\n     * Convert a year, month, and day-of-month, given in the proleptic\n     * Gregorian calendar, to 1970 epoch days.\n     * @param year Gregorian year, with 0 == 1 BCE, -1 == 2 BCE, etc.\n     * @param month 0-based month, with 0==Jan\n     * @param dom 1-based day of month\n     * @return the day number, with day 0 == Jan 1 1970\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int dayOfWeek(long day)",
    "returnType" : "int",
    "comment" : "\n     * Return the day of week on the 1970-epoch day\n     * @param day the 1970-epoch day (integral value)\n     * @return the day of week\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] dayToFields(long day, int[] fields)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int[] timeToFields(long time, int[] fields)",
    "returnType" : "int[]",
    "comment" : "\n     * Convert long time to date/time fields\n     * \n     * result[0] : year\n     * result[1] : month\n     * result[2] : dayOfMonth\n     * result[3] : dayOfWeek\n     * result[4] : dayOfYear\n     * result[5] : millisecond in day\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long floorDivide(long numerator, long denominator)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long floorDivide(long numerator, long denominator, long[] remainder)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getDayOfWeekInMonth(int year, int month, int dayOfMonth)",
    "returnType" : "int",
    "comment" : "\n     * Returns the ordinal number for the specified day of week in the month.\n     * The valid return value is 1, 2, 3, 4 or -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String timeToString(long time)",
    "returnType" : "String",
    "comment" : "\n     * Convenient method for formatting time to ISO 8601 style\n     * date string.\n     * @param time long time\n     * @return ISO-8601 date string\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final boolean isLeapYear(int year)", "public static final int monthLength(int year, int month)", "public static final int previousMonthLength(int year, int month)", "public static long fieldsToDay(int year, int month, int dom)", "public static int dayOfWeek(long day)", "public static int[] dayToFields(long day, int[] fields)", "public static int[] timeToFields(long time, int[] fields)", "public static long floorDivide(long numerator, long denominator)", "private static long floorDivide(long numerator, long denominator, long[] remainder)", "public static int getDayOfWeekInMonth(int year, int month, int dayOfMonth)", "public static String timeToString(long time)" ],
  "variableNames" : [ "MIN_MILLIS", "MAX_MILLIS", "MILLIS_PER_SECOND", "MILLIS_PER_MINUTE", "MILLIS_PER_HOUR", "MILLIS_PER_DAY", "JULIAN_1_CE", "JULIAN_1970_CE", "MONTH_LENGTH", "DAYS_BEFORE" ]
}