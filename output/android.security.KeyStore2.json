{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyStore2.java",
  "packageName" : "android.security",
  "className" : "KeyStore2",
  "comment" : "\n * @hide This should not be made public in its present form because it\n * assumes that private and secret key bytes are available and would\n * preclude the use of hardware crypto.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECOVERY_GRACE_PERIOD_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYSTORE_OPERATION_CREATION_MAY_FAIL",
    "type" : "long",
    "comment" : "\n     * Keystore operation creation may fail\n     *\n     * Keystore used to work under the assumption that the creation of cryptographic operations\n     * always succeeds. However, the KeyMint backend has only a limited number of operation slots.\n     * In order to keep up the appearance of \"infinite\" operation slots, the Keystore daemon\n     * would prune least recently used operations if there is no available operation slot.\n     * As a result, good operations could be terminated prematurely.\n     *\n     * This opens AndroidKeystore up to denial-of-service and unintended livelock situations.\n     * E.g.: if multiple apps wake up at the same time, e.g., due to power management optimizations,\n     * and attempt to perform crypto operations, they start terminating each others operations\n     * without making any progress.\n     *\n     * To break out of livelocks and to discourage DoS attempts we have changed the pruning\n     * strategy such that it prefers clients that use few operation slots and only briefly.\n     * As a result we can, almost, guarantee that single operations that don't linger inactive\n     * for more than 5 seconds will conclude unhampered by the pruning strategy. \"Almost\",\n     * because there are operations related to file system encryption that can prune even\n     * these operations, but those are extremely rare.\n     *\n     * As a side effect of this new pruning strategy operation creation can now fail if the\n     * client has a lower pruning power than all of the existing operations.\n     *\n     * Pruning strategy\n     *\n     * To find a suitable candidate we compute the malus for the caller and each existing\n     * operation. The malus is the inverse of the pruning power (caller) or pruning\n     * resistance (existing operation). For the caller to be able to prune an operation it must\n     * find an operation with a malus higher than its own.\n     *\n     * For more detail on the pruning strategy consult the implementation at\n     * https://android.googlesource.com/platform/system/security/+/refs/heads/master/keystore2/src/operation.rs\n     *\n     * For older SDK version, KeyStore2 will poll the Keystore daemon for a free operation\n     * slot. So to applications, targeting earlier SDK versions, it will still look like cipher and\n     * signature object initialization always succeeds, however, it may take longer to get an\n     * operation.\n     *\n     * All SDK version benefit from fairer operation slot scheduling and a better chance to\n     * successfully conclude an operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IKeystoreService",
    "comment" : " of a remote exception.",
    "links" : [ ]
  }, {
    "name" : "KEYSTORE2_SERVICE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYSTORE_ENGINE_GRANT_ALIAS_PREFIX",
    "type" : "String",
    "comment" : "\n     * Grant string prefix as used by the keystore boringssl engine. Must be kept in sync\n     * with system/security/keystore-engine. Note: The prefix here includes the 0x which\n     * std::stringstream used in keystore-engine needs to identify the number as hex represented.\n     * Here we include it in the prefix, because Long#parseUnsignedLong does not understand it\n     * and gets the radix as explicit argument.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private R handleRemoteExceptionWithRetry(@NonNull CheckedRemoteRequest<R> request) throws KeyStoreException",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static KeyStore2 getInstance()",
    "returnType" : "KeyStore2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized IKeystoreService getService(boolean retryLookup)",
    "returnType" : "IKeystoreService",
    "comment" : "\n     * Gets the {@link IKeystoreService} that should be started in early_hal in Android.\n     *\n     * @throws IllegalStateException if the KeystoreService is not available or has not\n     * been initialized when called. This is a state that should not happen and indicates\n     * and error somewhere in the stack or with the calling processes access permissions.\n     ",
    "links" : [ "android.system.keystore2.IKeystoreService" ]
  }, {
    "name" : " void delete(KeyDescriptor descriptor) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeyDescriptor[] list(int domain, long namespace) throws KeyStoreException",
    "returnType" : "KeyDescriptor[]",
    "comment" : "\n     * List all entries in the keystore for in the given namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyDescriptor[] listBatch(int domain, long namespace, String startPastAlias) throws KeyStoreException",
    "returnType" : "KeyDescriptor[]",
    "comment" : "\n     * List all entries in the keystore for in the given namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String makeKeystoreEngineGrantString(long grantId)",
    "returnType" : "String",
    "comment" : "\n     * This function turns a grant identifier into a specific string that is understood by the\n     * keystore-engine in system/security/keystore-engine. Is only used by VPN and WI-FI components\n     * to allow certain system components like racoon or vendor components like WPA supplicant\n     * to use keystore keys with boring ssl.\n     *\n     * @param grantId the grant id as returned by {@link #grant} in the {@code nspace} filed of\n     *                the resulting {@code KeyDescriptor}.\n     * @return The grant descriptor string.\n     * @hide\n     ",
    "links" : [ "#grant" ]
  }, {
    "name" : "public static KeyDescriptor keystoreEngineGrantString2KeyDescriptor(String grantString)",
    "returnType" : "KeyDescriptor",
    "comment" : "\n     * Convenience function to turn a keystore engine grant string as returned by\n     * {@link #makeKeystoreEngineGrantString(long)} back into a grant KeyDescriptor.\n     *\n     * @param grantString As string returned by {@link #makeKeystoreEngineGrantString(long)}\n     * @return The grant key descriptor.\n     * @hide\n     ",
    "links" : [ "#makeKeystoreEngineGrantString(long)" ]
  }, {
    "name" : "public KeyDescriptor grant(KeyDescriptor descriptor, int granteeUid, int accessVector) throws KeyStoreException",
    "returnType" : "KeyDescriptor",
    "comment" : "\n     * Create a grant that allows the grantee identified by {@code granteeUid} to use\n     * the key specified by {@code descriptor} withint the restrictions given by\n     * {@code accessVectore}.\n     * @see IKeystoreService#grant(KeyDescriptor, int, int) for more details.\n     * @param descriptor\n     * @param granteeUid\n     * @param accessVector\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ungrant(KeyDescriptor descriptor, int granteeUid) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Destroys a grant.\n     * @see IKeystoreService#ungrant(KeyDescriptor, int) for more details.\n     * @param descriptor\n     * @param granteeUid\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyEntryResponse getKeyEntry(@NonNull KeyDescriptor descriptor) throws KeyStoreException",
    "returnType" : "KeyEntryResponse",
    "comment" : "\n     * Retrieves a key entry from the keystore backend.\n     * @see IKeystoreService#getKeyEntry(KeyDescriptor) for more details.\n     * @param descriptor\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyStoreSecurityLevel getSecurityLevel(int securityLevel) throws KeyStoreException",
    "returnType" : "KeyStoreSecurityLevel",
    "comment" : "\n     * Get the security level specific keystore interface from the keystore daemon.\n     * @see IKeystoreService#getSecurityLevel(int) for more details.\n     * @param securityLevel\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateSubcomponents(@NonNull KeyDescriptor key, byte[] publicCert, byte[] publicCertChain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Update the subcomponents of a key entry designated by the key descriptor.\n     * @see IKeystoreService#updateSubcomponent(KeyDescriptor, byte[], byte[]) for more details.\n     * @param key\n     * @param publicCert\n     * @param publicCertChain\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteKey(@NonNull KeyDescriptor descriptor) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Delete the key designed by the key descriptor.\n     * @see IKeystoreService#deleteKey(KeyDescriptor) for more details.\n     * @param descriptor\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumberOfEntries(int domain, long namespace) throws KeyStoreException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of Keystore entries for a given domain and namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static void interruptedPreservingSleep(long millis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static KeyStoreException getKeyStoreException(int errorCode, String serviceErrorMessage)",
    "returnType" : "KeyStoreException",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private R handleRemoteExceptionWithRetry(@NonNull CheckedRemoteRequest<R> request) throws KeyStoreException", "public static KeyStore2 getInstance()", "private synchronized IKeystoreService getService(boolean retryLookup)", " void delete(KeyDescriptor descriptor) throws KeyStoreException", "public KeyDescriptor[] list(int domain, long namespace) throws KeyStoreException", "public KeyDescriptor[] listBatch(int domain, long namespace, String startPastAlias) throws KeyStoreException", "public static String makeKeystoreEngineGrantString(long grantId)", "public static KeyDescriptor keystoreEngineGrantString2KeyDescriptor(String grantString)", "public KeyDescriptor grant(KeyDescriptor descriptor, int granteeUid, int accessVector) throws KeyStoreException", "public void ungrant(KeyDescriptor descriptor, int granteeUid) throws KeyStoreException", "public KeyEntryResponse getKeyEntry(@NonNull KeyDescriptor descriptor) throws KeyStoreException", "public KeyStoreSecurityLevel getSecurityLevel(int securityLevel) throws KeyStoreException", "public void updateSubcomponents(@NonNull KeyDescriptor key, byte[] publicCert, byte[] publicCertChain) throws KeyStoreException", "public void deleteKey(@NonNull KeyDescriptor descriptor) throws KeyStoreException", "public int getNumberOfEntries(int domain, long namespace) throws KeyStoreException", "protected static void interruptedPreservingSleep(long millis)", " static KeyStoreException getKeyStoreException(int errorCode, String serviceErrorMessage)" ],
  "variableNames" : [ "TAG", "RECOVERY_GRACE_PERIOD_MS", "KEYSTORE_OPERATION_CREATION_MAY_FAIL", "mBinder", "KEYSTORE2_SERVICE_NAME", "KEYSTORE_ENGINE_GRANT_ALIAS_PREFIX" ]
}