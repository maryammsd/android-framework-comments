{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/quickaccesswallet/QuickAccessWalletClientImpl.java",
  "packageName" : "android.service.quickaccesswallet",
  "className" : "QuickAccessWalletClientImpl",
  "comment" : "\n * Implements {@link QuickAccessWalletClient}. The client connects, performs requests, waits for\n * responses, and disconnects automatically one minute after the last call is performed.\n *\n * @hide\n ",
  "links" : [ "android.service.quickaccesswallet.QuickAccessWalletClient" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SETTING_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestQueue",
    "type" : "Queue<ApiCaller>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventListeners",
    "type" : "Map<WalletServiceEventListener, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLifecycleExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsConnected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_CONNECTION_TIMEOUT_MS",
    "type" : "long",
    "comment" : " Timeout for active service connections (1 minute) ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IQuickAccessWalletService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceInfo",
    "type" : "QuickAccessWalletServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TIMEOUT_SERVICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isWalletServiceAvailable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWalletFeatureAvailable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWalletFeatureAvailableWhenDeviceLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getWalletCards(@NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getWalletCards(@NonNull @CallbackExecutor Executor executor, @NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void selectWalletCard(@NonNull SelectWalletCardRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyWalletDismissed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addWalletServiceEventListener(WalletServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addWalletServiceEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull WalletServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeWalletServiceEventListener(WalletServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent createWalletIntent()",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getWalletPendingIntent(@NonNull @CallbackExecutor Executor executor, @NonNull WalletPendingIntentCallback pendingIntentCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent createWalletSettingsIntent()",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Intent createIntent(@Nullable String activityName, String packageName, String action)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String queryActivityForAction(PackageManager pm, String packageName, String action)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isActivityEnabled(PackageManager pm, ComponentName component)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getLogo()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getTileIcon()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getServiceLabel()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getShortcutShortLabel()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getShortcutLongLabel()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void connect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void connectInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onConnectedInternal(IQuickAccessWalletService service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetServiceConnectionTimeout()",
    "returnType" : "void",
    "comment" : "\n     * Resets the idle timeout for this connection by removing any pending timeout messages and\n     * posting a new delayed message.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void disconnectInternal(boolean clearEventListeners)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeApiCall(ApiCaller apiCaller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeInternal(ApiCaller apiCaller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performApiCallInternal(ApiCaller apiCaller, IQuickAccessWalletService service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(ComponentName name, IBinder binder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected(ComponentName name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBindingDied(ComponentName name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onNullBinding(ComponentName name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkSecureSetting(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkUserSetupComplete()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isWalletServiceAvailable()", "public boolean isWalletFeatureAvailable()", "public boolean isWalletFeatureAvailableWhenDeviceLocked()", "public void getWalletCards(@NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)", "public void getWalletCards(@NonNull @CallbackExecutor Executor executor, @NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)", "public void selectWalletCard(@NonNull SelectWalletCardRequest request)", "public void notifyWalletDismissed()", "public void addWalletServiceEventListener(WalletServiceEventListener listener)", "public void addWalletServiceEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull WalletServiceEventListener listener)", "public void removeWalletServiceEventListener(WalletServiceEventListener listener)", "public void close() throws IOException", "public void disconnect()", "public Intent createWalletIntent()", "public void getWalletPendingIntent(@NonNull @CallbackExecutor Executor executor, @NonNull WalletPendingIntentCallback pendingIntentCallback)", "public Intent createWalletSettingsIntent()", "private Intent createIntent(@Nullable String activityName, String packageName, String action)", "private static String queryActivityForAction(PackageManager pm, String packageName, String action)", "private static boolean isActivityEnabled(PackageManager pm, ComponentName component)", "public Drawable getLogo()", "public Drawable getTileIcon()", "public CharSequence getServiceLabel()", "public CharSequence getShortcutShortLabel()", "public CharSequence getShortcutLongLabel()", "private void connect()", "private void connectInternal()", "private void onConnectedInternal(IQuickAccessWalletService service)", "private void resetServiceConnectionTimeout()", "private void disconnectInternal(boolean clearEventListeners)", "private void executeApiCall(ApiCaller apiCaller)", "private void executeInternal(ApiCaller apiCaller)", "private void performApiCallInternal(ApiCaller apiCaller, IQuickAccessWalletService service)", "public void onServiceConnected(ComponentName name, IBinder binder)", "public void onServiceDisconnected(ComponentName name)", "public void onBindingDied(ComponentName name)", "public void onNullBinding(ComponentName name)", "private boolean checkSecureSetting(String name)", "private boolean checkUserSetupComplete()" ],
  "variableNames" : [ "TAG", "SETTING_KEY", "mHandler", "mContext", "mRequestQueue", "mEventListeners", "mLifecycleExecutor", "mIsConnected", "SERVICE_CONNECTION_TIMEOUT_MS", "mService", "mServiceInfo", "MSG_TIMEOUT_SERVICE" ]
}