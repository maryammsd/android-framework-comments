{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/ListFormatter.java",
  "packageName" : "android.icu.text",
  "className" : "ListFormatter",
  "comment" : "\n * Immutable class for formatting a list, using data from CLDR (or supplied\n * separately). The class is not subclassable.\n *\n * @author Mark Davis\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "start",
    "type" : "String",
    "comment" : " Compiled SimpleFormatter patterns.",
    "links" : [ ]
  }, {
    "name" : "middle",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "patternHandler",
    "type" : "PatternHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "compiledY",
    "type" : "String",
    "comment" : " Pattern in the ICU Data which might be replaced y by e.",
    "links" : [ ]
  }, {
    "name" : "compiledE",
    "type" : "String",
    "comment" : " The new pattern to replace y to e",
    "links" : [ ]
  }, {
    "name" : "compiledO",
    "type" : "String",
    "comment" : " Pattern in the ICU Data which might be replaced o by u.",
    "links" : [ ]
  }, {
    "name" : "compiledU",
    "type" : "String",
    "comment" : " The new pattern to replace u to o",
    "links" : [ ]
  }, {
    "name" : "changeToE",
    "type" : "Pattern",
    "comment" : " Starts with \"hi\" or \"i\" but not with \"hie\" nor \"hia\"a",
    "links" : [ ]
  }, {
    "name" : "changeToU",
    "type" : "Pattern",
    "comment" : " Starts with \"o\", \"ho\", and \"8\". Also \"11\" by itself.",
    "links" : [ ]
  }, {
    "name" : "compiledVav",
    "type" : "String",
    "comment" : " Pattern in the ICU Data which might need to add a DASH after VAV.",
    "links" : [ ]
  }, {
    "name" : "compiledVavDash",
    "type" : "String",
    "comment" : " Pattern to add a DASH after VAV.",
    "links" : [ ]
  }, {
    "name" : "changeToVavDash",
    "type" : "Pattern",
    "comment" : " Starts with non Hebrew letter.",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "Cache",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static String compilePattern(String pattern, StringBuilder sb)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ListFormatter getInstance(ULocale locale, Type type, Width width)",
    "returnType" : "ListFormatter",
    "comment" : "\n     * Create a list formatter that is appropriate for a locale.\n     *\n     * @param locale\n     *            the locale in question.\n     * @return ListFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ListFormatter getInstance(Locale locale, Type type, Width width)",
    "returnType" : "ListFormatter",
    "comment" : "\n     * Create a list formatter that is appropriate for a locale.\n     *\n     * @param locale\n     *            the locale in question.\n     * @return ListFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ListFormatter getInstance(ULocale locale)",
    "returnType" : "ListFormatter",
    "comment" : "\n     * Create a list formatter that is appropriate for a locale.\n     *\n     * @param locale\n     *            the locale in question.\n     * @return ListFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ListFormatter getInstance(Locale locale)",
    "returnType" : "ListFormatter",
    "comment" : "\n     * Create a list formatter that is appropriate for a locale.\n     *\n     * @param locale\n     *            the locale in question.\n     * @return ListFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ListFormatter getInstance()",
    "returnType" : "ListFormatter",
    "comment" : "\n     * Create a list formatter that is appropriate for the default FORMAT locale.\n     *\n     * @return ListFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format(Object... items)",
    "returnType" : "String",
    "comment" : "\n     * Format a list of objects.\n     *\n     * @param items\n     *            items to format. The toString() method is called on each.\n     * @return items formatted into a string\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format(Collection<?> items)",
    "returnType" : "String",
    "comment" : "\n     * Format a collection of objects. The toString() method is called on each.\n     *\n     * @param items\n     *            items to format. The toString() method is called on each.\n     * @return items formatted into a string\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedList formatToValue(Object... items)",
    "returnType" : "FormattedList",
    "comment" : "\n     * Format a list of objects to a FormattedList. You can access the offsets\n     * of each element from the FormattedList.\n     *\n     * @param items\n     *            items to format. The toString() method is called on each.\n     * @return items formatted into a FormattedList\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedList formatToValue(Collection<?> items)",
    "returnType" : "FormattedList",
    "comment" : "\n     * Format a collection of objects to a FormattedList. You can access the offsets\n     * of each element from the FormattedList.\n     *\n     * @param items\n     *            items to format. The toString() method is called on each.\n     * @return items formatted into a FormattedList\n     ",
    "links" : [ ]
  }, {
    "name" : " FormattedListBuilder formatImpl(Collection<?> items, boolean needsFields)",
    "returnType" : "FormattedListBuilder",
    "comment" : " the offset.",
    "links" : [ ]
  }, {
    "name" : "private PatternHandler createPatternHandler(String two, String end)",
    "returnType" : "PatternHandler",
    "comment" : " Handle specal case of Spanish and Hebrew",
    "links" : [ ]
  }, {
    "name" : "public String getPatternForNumItems(int count)",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern to use for a particular item count.\n     * @param count the item count.\n     * @return the pattern with {0}, {1}, {2}, etc. For English,\n     * getPatternForNumItems(3) == \"{0}, {1}, and {2}\"\n     * @throws IllegalArgumentException when count is 0 or negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale getLocale()",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the locale of this object.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " static String typeWidthToStyleString(Type type, Width width)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static String compilePattern(String pattern, StringBuilder sb)", "public static ListFormatter getInstance(ULocale locale, Type type, Width width)", "public static ListFormatter getInstance(Locale locale, Type type, Width width)", "public static ListFormatter getInstance(ULocale locale)", "public static ListFormatter getInstance(Locale locale)", "public static ListFormatter getInstance()", "public String format(Object... items)", "public String format(Collection<?> items)", "public FormattedList formatToValue(Object... items)", "public FormattedList formatToValue(Collection<?> items)", " FormattedListBuilder formatImpl(Collection<?> items, boolean needsFields)", "private PatternHandler createPatternHandler(String two, String end)", "public String getPatternForNumItems(int count)", "public ULocale getLocale()", " static String typeWidthToStyleString(Type type, Width width)" ],
  "variableNames" : [ "start", "middle", "locale", "patternHandler", "compiledY", "compiledE", "compiledO", "compiledU", "changeToE", "changeToU", "compiledVav", "compiledVavDash", "changeToVavDash", "cache" ]
}