{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/http/params/HttpConnectionParams.java",
  "packageName" : "org.apache.http.params",
  "className" : "HttpConnectionParams",
  "comment" : "\n * An adaptor for accessing connection parameters in {@link HttpParams}.\n * <br/>\n * Note that the <i>implements</i> relation to {@link CoreConnectionPNames}\n * is for compatibility with existing application code only. References to\n * the parameter names should use the interface, not this class.\n * \n * @author <a href=\"mailto:oleg at ural.ru\">Oleg Kalnichevski</a>\n * \n * @version $Revision: 576089 $\n * \n * @since 4.0\n *\n * @deprecated Please use {@link java.net.URL#openConnection} instead.\n *     Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>\n *     for further details.\n ",
  "links" : [ "org.apache.http.params.HttpParams", "java.net.URL#openConnection", "org.apache.http.params.CoreConnectionPNames" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static int getSoTimeout(final HttpParams params)",
    "returnType" : "int",
    "comment" : "\n     * Returns the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the \n     * timeout for waiting for data. A timeout value of zero is interpreted as an infinite \n     * timeout. This value is used when no socket timeout is set in the \n     * method parameters. \n     *\n     * @return timeout in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setSoTimeout(final HttpParams params, int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the \n     * timeout for waiting for data. A timeout value of zero is interpreted as an infinite \n     * timeout. This value is used when no socket timeout is set in the \n     * method parameters. \n     *\n     * @param timeout Timeout in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getTcpNoDelay(final HttpParams params)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if Nagle's algorithm is to be used.  \n     *\n     * @return <tt>true</tt> if the Nagle's algorithm is to NOT be used\n     *   (that is enable TCP_NODELAY), <tt>false</tt> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTcpNoDelay(final HttpParams params, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether Nagle's algorithm is to be used. The Nagle's algorithm \n     * tries to conserve bandwidth by minimizing the number of segments that are \n     * sent. When applications wish to decrease network latency and increase \n     * performance, they can disable Nagle's algorithm (that is enable TCP_NODELAY). \n     * Data will be sent earlier, at the cost of an increase in bandwidth consumption. \n     *\n     * @param value <tt>true</tt> if the Nagle's algorithm is to NOT be used\n     *   (that is enable TCP_NODELAY), <tt>false</tt> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getSocketBufferSize(final HttpParams params)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setSocketBufferSize(final HttpParams params, int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getLinger(final HttpParams params)",
    "returnType" : "int",
    "comment" : "\n     * Returns linger-on-close timeout. Value <tt>0</tt> implies that the option is \n     * disabled. Value <tt>-1</tt> implies that the JRE default is used.\n     * \n     * @return the linger-on-close timeout\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setLinger(final HttpParams params, int value)",
    "returnType" : "void",
    "comment" : "\n     * Returns linger-on-close timeout. This option disables/enables immediate return \n     * from a close() of a TCP Socket. Enabling this option with a non-zero Integer \n     * timeout means that a close() will block pending the transmission and \n     * acknowledgement of all data written to the peer, at which point the socket is \n     * closed gracefully. Value <tt>0</tt> implies that the option is \n     * disabled. Value <tt>-1</tt> implies that the JRE default is used.\n     *\n     * @param value the linger-on-close timeout\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getConnectionTimeout(final HttpParams params)",
    "returnType" : "int",
    "comment" : "\n     * Returns the timeout until a connection is etablished. A value of zero \n     * means the timeout is not used. The default value is zero.\n     * \n     * @return timeout in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setConnectionTimeout(final HttpParams params, int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Sets the timeout until a connection is etablished. A value of zero \n     * means the timeout is not used. The default value is zero.\n     * \n     * @param timeout Timeout in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStaleCheckingEnabled(final HttpParams params)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether stale connection check is to be used. Disabling \n     * stale connection check may result in slight performance improvement \n     * at the risk of getting an I/O error when executing a request over a\n     * connection that has been closed at the server side. \n     * \n     * @return <tt>true</tt> if stale connection check is to be used, \n     *   <tt>false</tt> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setStaleCheckingEnabled(final HttpParams params, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Defines whether stale connection check is to be used. Disabling \n     * stale connection check may result in slight performance improvement \n     * at the risk of getting an I/O error when executing a request over a\n     * connection that has been closed at the server side. \n     * \n     * @param value <tt>true</tt> if stale connection check is to be used, \n     *   <tt>false</tt> otherwise.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getSoTimeout(final HttpParams params)", "public static void setSoTimeout(final HttpParams params, int timeout)", "public static boolean getTcpNoDelay(final HttpParams params)", "public static void setTcpNoDelay(final HttpParams params, boolean value)", "public static int getSocketBufferSize(final HttpParams params)", "public static void setSocketBufferSize(final HttpParams params, int size)", "public static int getLinger(final HttpParams params)", "public static void setLinger(final HttpParams params, int value)", "public static int getConnectionTimeout(final HttpParams params)", "public static void setConnectionTimeout(final HttpParams params, int timeout)", "public static boolean isStaleCheckingEnabled(final HttpParams params)", "public static void setStaleCheckingEnabled(final HttpParams params, boolean value)" ],
  "variableNames" : [ ]
}