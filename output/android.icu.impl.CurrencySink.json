{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUCurrencyDisplayInfoProvider.java",
  "packageName" : "android.icu.impl",
  "className" : "CurrencySink",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "noRoot",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entrypointTable",
    "type" : "EntrypointTable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formattingData",
    "type" : "FormattingData",
    "comment" : " The fields to be populated on this run of the data sink will be non-null.",
    "links" : [ ]
  }, {
    "name" : "pluralsData",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parsingData",
    "type" : "ParsingData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unitPatterns",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "spacingInfo",
    "type" : "CurrencySpacingInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "variantSymbol",
    "type" : "VariantSymbol",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void put(UResource.Key key, UResource.Value value, boolean isRoot)",
    "returnType" : "void",
    "comment" : "\n             * The entrypoint method delegates to helper methods for each of the types of tables\n             * found in the currency data.\n             ",
    "links" : [ ]
  }, {
    "name" : "private void consumeTopTable(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrenciesTable(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "\n             *  Currencies{\n             *      ...\n             *      USD{\n             *          \"US$\",        => symbol\n             *          \"US Dollar\",  => display name\n             *      }\n             *      ...\n             *      ESP{\n             *          \"₧\",                  => symbol\n             *          \"pesseta espanyola\",  => display name\n             *          {\n             *              \"¤ #,##0.00\",     => currency-specific pattern\n             *              \",\",              => currency-specific grouping separator\n             *              \".\",              => currency-specific decimal separator\n             *          }\n             *      }\n             *      ...\n             *  }\n             ",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrenciesEntry(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrenciesVariantEntry(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "\n             *  Currencies%narrow{\n             *      AOA{\"Kz\"}\n             *      ARS{\"$\"}\n             *      ...\n             *  }\n             ",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrenciesVariantTable(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "\n             *  Currencies%variant{\n             *      TRY{\"TL\"}\n             *  }\n             ",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrencyPluralsTable(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "\n             *  CurrencyPlurals{\n             *      BYB{\n             *          one{\"Belarusian new rouble (1994–1999)\"}\n             *          other{\"Belarusian new roubles (1994–1999)\"}\n             *      }\n             *      ...\n             *  }\n             ",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrencyPluralsEntry(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrencySpacingTable(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "\n             *  currencySpacing{\n             *      afterCurrency{\n             *          currencyMatch{\"[:^S:]\"}\n             *          insertBetween{\" \"}\n             *          surroundingMatch{\"[:digit:]\"}\n             *      }\n             *      beforeCurrency{\n             *          currencyMatch{\"[:^S:]\"}\n             *          insertBetween{\" \"}\n             *          surroundingMatch{\"[:digit:]\"}\n             *      }\n             *  }\n             ",
    "links" : [ ]
  }, {
    "name" : " void consumeCurrencyUnitPatternsTable(UResource.Key key, UResource.Value value)",
    "returnType" : "void",
    "comment" : "\n             *  CurrencyUnitPatterns{\n             *      other{\"{0} {1}\"}\n             *      ...\n             *  }\n             ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void put(UResource.Key key, UResource.Value value, boolean isRoot)", "private void consumeTopTable(UResource.Key key, UResource.Value value)", " void consumeCurrenciesTable(UResource.Key key, UResource.Value value)", " void consumeCurrenciesEntry(UResource.Key key, UResource.Value value)", " void consumeCurrenciesVariantEntry(UResource.Key key, UResource.Value value)", " void consumeCurrenciesVariantTable(UResource.Key key, UResource.Value value)", " void consumeCurrencyPluralsTable(UResource.Key key, UResource.Value value)", " void consumeCurrencyPluralsEntry(UResource.Key key, UResource.Value value)", " void consumeCurrencySpacingTable(UResource.Key key, UResource.Value value)", " void consumeCurrencyUnitPatternsTable(UResource.Key key, UResource.Value value)" ],
  "variableNames" : [ "noRoot", "entrypointTable", "formattingData", "pluralsData", "parsingData", "unitPatterns", "spacingInfo", "variantSymbol" ]
}