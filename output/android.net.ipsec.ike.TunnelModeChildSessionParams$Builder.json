{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/TunnelModeChildSessionParams.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "Builder",
  "comment" : " This class can be used to incrementally construct a {@link TunnelModeChildSessionParams}. ",
  "links" : [ "android.net.ipsec.ike.TunnelModeChildSessionParams" ],
  "variables" : [ {
    "name" : "IPv4_DEFAULT_PREFIX_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasIp4AddressRequest",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasIp4NetmaskRequest",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigRequestList",
    "type" : "List<TunnelModeChildConfigAttribute>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addSaProposal(@NonNull ChildSaProposal proposal)",
    "returnType" : "Builder",
    "comment" : " {@link ChildSessionParams#getSaProposals}",
    "links" : [ "android.net.ipsec.ike.ChildSessionParams#getSaProposals" ]
  }, {
    "name" : "public Builder addChildSaProposal(@NonNull ChildSaProposal proposal)",
    "returnType" : "Builder",
    "comment" : " {@link ChildSessionParams#getChildSaProposals}",
    "links" : [ "android.net.ipsec.ike.ChildSessionParams#getChildSaProposals" ]
  }, {
    "name" : "public Builder addInboundTrafficSelectors(@NonNull IkeTrafficSelector trafficSelector)",
    "returnType" : "Builder",
    "comment" : " ChildSessionParams#getInboundTrafficSelectors}",
    "links" : [ ]
  }, {
    "name" : "public Builder addOutboundTrafficSelectors(@NonNull IkeTrafficSelector trafficSelector)",
    "returnType" : "Builder",
    "comment" : " ChildSessionParams#getOutboundTrafficSelectors}",
    "links" : [ ]
  }, {
    "name" : "public Builder setLifetimeSeconds(@IntRange(from = CHILD_HARD_LIFETIME_SEC_MINIMUM, to = CHILD_HARD_LIFETIME_SEC_MAXIMUM) int hardLifetimeSeconds, @IntRange(from = CHILD_SOFT_LIFETIME_SEC_MINIMUM, to = CHILD_HARD_LIFETIME_SEC_MAXIMUM) int softLifetimeSeconds)",
    "returnType" : "Builder",
    "comment" : " ChildSessionParams#getSoftLifetimeSeconds}",
    "links" : [ ]
  }, {
    "name" : "public Builder addInternalAddressRequest(int addressFamily)",
    "returnType" : "Builder",
    "comment" : " requests",
    "links" : [ ]
  }, {
    "name" : "public Builder addInternalAddressRequest(@NonNull Inet4Address address)",
    "returnType" : "Builder",
    "comment" : " requests",
    "links" : [ ]
  }, {
    "name" : "public Builder addInternalAddressRequest(@NonNull Inet6Address address, int prefixLen)",
    "returnType" : "Builder",
    "comment" : " requests",
    "links" : [ ]
  }, {
    "name" : "public Builder addInternalDnsServerRequest(int addressFamily)",
    "returnType" : "Builder",
    "comment" : " requests",
    "links" : [ ]
  }, {
    "name" : "public Builder addInternalDnsServerRequest(@NonNull InetAddress address)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a specific internal DNS server request to the {@link TunnelModeChildSessionParams}\n         * being built.\n         *\n         * @param address the requested DNS server address.\n         * @return Builder this, to facilitate chaining.\n         * @hide\n         ",
    "links" : [ "android.net.ipsec.ike.TunnelModeChildSessionParams" ]
  }, {
    "name" : "public Builder addInternalDhcpServerRequest(int addressFamily)",
    "returnType" : "Builder",
    "comment" : " requests.",
    "links" : [ ]
  }, {
    "name" : "public Builder addInternalDhcpServerRequest(@NonNull InetAddress address)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a specific internal DHCP server request to the {@link TunnelModeChildSessionParams}\n         * being built.\n         *\n         * <p>Only DHCPv4 server requests are supported.\n         *\n         * @param address the requested DHCP server address.\n         * @return Builder this, to facilitate chaining.\n         * @hide\n         ",
    "links" : [ "android.net.ipsec.ike.TunnelModeChildSessionParams" ]
  }, {
    "name" : "public Builder addConfigRequest(@NonNull TunnelModeChildConfigAttribute attribute)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds Configuration requests. Internal use only.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public TunnelModeChildSessionParams build()",
    "returnType" : "TunnelModeChildSessionParams",
    "comment" : "\n         * Validates and builds the {@link TunnelModeChildSessionParams}.\n         *\n         * @return the validated {@link TunnelModeChildSessionParams}.\n         ",
    "links" : [ "android.net.ipsec.ike.TunnelModeChildSessionParams" ]
  } ],
  "methodNames" : [ "public Builder addSaProposal(@NonNull ChildSaProposal proposal)", "public Builder addChildSaProposal(@NonNull ChildSaProposal proposal)", "public Builder addInboundTrafficSelectors(@NonNull IkeTrafficSelector trafficSelector)", "public Builder addOutboundTrafficSelectors(@NonNull IkeTrafficSelector trafficSelector)", "public Builder setLifetimeSeconds(@IntRange(from = CHILD_HARD_LIFETIME_SEC_MINIMUM, to = CHILD_HARD_LIFETIME_SEC_MAXIMUM) int hardLifetimeSeconds, @IntRange(from = CHILD_SOFT_LIFETIME_SEC_MINIMUM, to = CHILD_HARD_LIFETIME_SEC_MAXIMUM) int softLifetimeSeconds)", "public Builder addInternalAddressRequest(int addressFamily)", "public Builder addInternalAddressRequest(@NonNull Inet4Address address)", "public Builder addInternalAddressRequest(@NonNull Inet6Address address, int prefixLen)", "public Builder addInternalDnsServerRequest(int addressFamily)", "public Builder addInternalDnsServerRequest(@NonNull InetAddress address)", "public Builder addInternalDhcpServerRequest(int addressFamily)", "public Builder addInternalDhcpServerRequest(@NonNull InetAddress address)", "public Builder addConfigRequest(@NonNull TunnelModeChildConfigAttribute attribute)", "public TunnelModeChildSessionParams build()" ],
  "variableNames" : [ "IPv4_DEFAULT_PREFIX_LEN", "mHasIp4AddressRequest", "mHasIp4NetmaskRequest", "mConfigRequestList" ]
}