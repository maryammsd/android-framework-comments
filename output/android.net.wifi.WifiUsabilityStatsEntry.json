{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiUsabilityStatsEntry.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiUsabilityStatsEntry",
  "comment" : "\n * This class makes a subset of\n * com.android.server.wifi.nano.WifiMetricsProto.WifiUsabilityStatsEntry parcelable.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINK_STATE_UNKNOWN",
    "type" : "int",
    "comment" : " Chip does not support reporting the state of the link. ",
    "links" : [ ]
  }, {
    "name" : "LINK_STATE_NOT_IN_USE",
    "type" : "int",
    "comment" : "\n     * Link has not been in use since last report. It is placed in power save. All management,\n     * control and data frames for the MLO connection are carried over other links. In this state\n     * the link will not listen to beacons even in DTIM period and does not perform any\n     * GTK/IGTK/BIGTK updates but remains associated.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINK_STATE_IN_USE",
    "type" : "int",
    "comment" : "\n     * Link is in use. In presence of traffic, it is set to be power active. When the traffic\n     * stops, the link will go into power save mode and will listen for beacons every DTIM period.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROBE_STATUS_UNKNOWN",
    "type" : "int",
    "comment" : " Link probe status is unknown ",
    "links" : [ ]
  }, {
    "name" : "PROBE_STATUS_NO_PROBE",
    "type" : "int",
    "comment" : " Link probe is not triggered ",
    "links" : [ ]
  }, {
    "name" : "PROBE_STATUS_SUCCESS",
    "type" : "int",
    "comment" : " Link probe is triggered and the result is success ",
    "links" : [ ]
  }, {
    "name" : "PROBE_STATUS_FAILURE",
    "type" : "int",
    "comment" : " Link probe is triggered and the result is failure ",
    "links" : [ ]
  }, {
    "name" : "mTimeStampMillis",
    "type" : "long",
    "comment" : " Absolute milliseconds from device boot when these stats were sampled ",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : " The RSSI (in dBm) at the sample time ",
    "links" : [ ]
  }, {
    "name" : "mLinkSpeedMbps",
    "type" : "int",
    "comment" : " Link speed at the sample time in Mbps ",
    "links" : [ ]
  }, {
    "name" : "mTotalTxSuccess",
    "type" : "long",
    "comment" : " The total number of tx success counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalTxRetries",
    "type" : "long",
    "comment" : " The total number of MPDU data packet retries counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalTxBad",
    "type" : "long",
    "comment" : " The total number of tx bad counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalRxSuccess",
    "type" : "long",
    "comment" : " The total number of rx success counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalRadioOnTimeMillis",
    "type" : "long",
    "comment" : " The total time the wifi radio is on in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalRadioTxTimeMillis",
    "type" : "long",
    "comment" : " The total time the wifi radio is doing tx in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalRadioRxTimeMillis",
    "type" : "long",
    "comment" : " The total time the wifi radio is doing rx in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalScanTimeMillis",
    "type" : "long",
    "comment" : " The total time spent on all types of scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalNanScanTimeMillis",
    "type" : "long",
    "comment" : " The total time spent on nan scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalBackgroundScanTimeMillis",
    "type" : "long",
    "comment" : " The total time spent on background scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalRoamScanTimeMillis",
    "type" : "long",
    "comment" : " The total time spent on roam scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalPnoScanTimeMillis",
    "type" : "long",
    "comment" : " The total time spent on pno scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalHotspot2ScanTimeMillis",
    "type" : "long",
    "comment" : " The total time spent on hotspot2.0 scans and GAS exchange in ms counted from the last radio\n     * chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalCcaBusyFreqTimeMillis",
    "type" : "long",
    "comment" : " The total time CCA is on busy status on the current frequency in ms counted from the last\n     * radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalRadioOnFreqTimeMillis",
    "type" : "long",
    "comment" : " The total radio on time on the current frequency from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mTotalBeaconRx",
    "type" : "long",
    "comment" : " The total number of beacons received from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "mProbeStatusSinceLastUpdate",
    "type" : "int",
    "comment" : " The status of link probe since last stats update ",
    "links" : [ ]
  }, {
    "name" : "mProbeElapsedTimeSinceLastUpdateMillis",
    "type" : "int",
    "comment" : " The elapsed time of the most recent link probe since last stats update ",
    "links" : [ ]
  }, {
    "name" : "mProbeMcsRateSinceLastUpdate",
    "type" : "int",
    "comment" : " The MCS rate of the most recent link probe since last stats update ",
    "links" : [ ]
  }, {
    "name" : "mRxLinkSpeedMbps",
    "type" : "int",
    "comment" : " Rx link speed at the sample time in Mbps ",
    "links" : [ ]
  }, {
    "name" : "mTimeSliceDutyCycleInPercent",
    "type" : "int",
    "comment" : " @see #getTimeSliceDutyCycleInPercent() ",
    "links" : [ ]
  }, {
    "name" : "WME_ACCESS_CATEGORY_BE",
    "type" : "int",
    "comment" : "\n     * Wireless Multimedia Extensions (WME) Best Effort Access Category, IEEE Std 802.11-2020,\n     * Section 9.4.2.28, Table 9-155\n     ",
    "links" : [ ]
  }, {
    "name" : "WME_ACCESS_CATEGORY_BK",
    "type" : "int",
    "comment" : "\n     * Wireless Multimedia Extensions (WME) Background Access Category, IEEE Std 802.11-2020,\n     * Section 9.4.2.28, Table 9-155\n     ",
    "links" : [ ]
  }, {
    "name" : "WME_ACCESS_CATEGORY_VI",
    "type" : "int",
    "comment" : "\n     * Wireless Multimedia Extensions (WME) Video Access Category, IEEE Std 802.11-2020,\n     * Section 9.4.2.28, Table 9-155\n     ",
    "links" : [ ]
  }, {
    "name" : "WME_ACCESS_CATEGORY_VO",
    "type" : "int",
    "comment" : "\n     * Wireless Multimedia Extensions (WME) Voice Access Category, IEEE Std 802.11-2020,\n     * Section 9.4.2.28, Table 9-155\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_WME_ACCESS_CATEGORIES",
    "type" : "int",
    "comment" : " Number of WME Access Categories ",
    "links" : [ ]
  }, {
    "name" : "mContentionTimeStats",
    "type" : "ContentionTimeStats[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_OFDM",
    "type" : "int",
    "comment" : " Preamble type for 802.11a/g, IEEE Std 802.11-2020, Section 17 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_CCK",
    "type" : "int",
    "comment" : " Preamble type for 802.11b, IEEE Std 802.11-2020, Section 16 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_HT",
    "type" : "int",
    "comment" : " Preamble type for 802.11n, IEEE Std 802.11-2020, Section 19 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_VHT",
    "type" : "int",
    "comment" : " Preamble type for 802.11ac, IEEE Std 802.11-2020, Section 21 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_HE",
    "type" : "int",
    "comment" : " Preamble type for 802.11ax, IEEE Std 802.11ax-2021, Section 27 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_EHT",
    "type" : "int",
    "comment" : " Preamble type for 802.11be, IEEE Std 802.11be-2021, Section 36 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_PREAMBLE_INVALID",
    "type" : "int",
    "comment" : " Invalid ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SPATIAL_STREAMS_ONE",
    "type" : "int",
    "comment" : " Single stream, 1x1 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SPATIAL_STREAMS_TWO",
    "type" : "int",
    "comment" : " Dual streams, 2x2 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SPATIAL_STREAMS_THREE",
    "type" : "int",
    "comment" : " Three streams, 3x3 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SPATIAL_STREAMS_FOUR",
    "type" : "int",
    "comment" : " Four streams, 4x4 ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SPATIAL_STREAMS_INVALID",
    "type" : "int",
    "comment" : " Invalid ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_20_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 20MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_40_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 40MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_80_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 80MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_160_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 160MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_80P80_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 80MHz + 80MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_5_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 5MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_10_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 10MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_320_MHZ",
    "type" : "int",
    "comment" : " Channel bandwidth: 320MHz ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BANDWIDTH_INVALID",
    "type" : "int",
    "comment" : " Invalid ",
    "links" : [ ]
  }, {
    "name" : "mRateStats",
    "type" : "RateStats[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadioStats",
    "type" : "RadioStats[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelUtilizationRatio",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsThroughputSufficient",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsWifiScoringEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsCellularDataAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellularDataNetworkType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellularSignalStrengthDbm",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellularSignalStrengthDb",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSameRegisteredCell",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinkStats",
    "type" : "SparseArray<LinkStats>",
    "comment" : " Link stats per link ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiUsabilityStatsEntry>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getLinkStateString(@LinkState int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public int[] getLinkIds()",
    "returnType" : "int[]",
    "comment" : " Get identifiers of the links if multi link configuration exists.\n     *\n     * @return An array of link identifiers if exists, otherwise null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkState(int linkId)",
    "returnType" : "int",
    "comment" : "\n     * Get link state. Refer {@link LinkState}.\n     *\n     * @param linkId Identifier of the link.\n     * @return Link state.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ "LinkState" ]
  }, {
    "name" : "public long getTimeStampMillis()",
    "returnType" : "long",
    "comment" : " Absolute milliseconds from device boot when these stats were sampled ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * The RSSI (in dBm) at the sample time. In case of Multi Link Operation (MLO), returned RSSI is\n     * the highest of all associated links.\n     *\n     * @return the RSSI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi(int linkId)",
    "returnType" : "int",
    "comment" : " The RSSI (in dBm) of the link at the sample time.\n     *\n     * @param linkId Identifier of the link.\n     * @return RSSI in dBm.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getRadioId(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * Get firmware/hardware implementation specific persistent value for this\n     * device, identifying the radio interface for which the stats are produced.\n     *\n     * @param linkId Identifier of the link.\n     * @return Radio identifier.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : " Link speed at the sample time in Mbps. In case of Multi Link Operation (MLO), returned value\n     *  is the current link speed of the associated link with the highest RSSI.\n     *\n     * @return Link speed in Mpbs or {@link WifiInfo#LINK_SPEED_UNKNOWN} if link speed is unknown.\n     ",
    "links" : [ "android.net.wifi.WifiInfo#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getTxLinkSpeedMbps(int linkId)",
    "returnType" : "int",
    "comment" : "\n     * Tx Link speed of the link at the sample time in Mbps.\n     *\n     * @param linkId Identifier of the link.\n     * @return Transmit link speed in Mpbs or {@link WifiInfo#LINK_SPEED_UNKNOWN} if link speed\n     * is unknown.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ "android.net.wifi.WifiInfo#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public long getTotalTxSuccess()",
    "returnType" : "long",
    "comment" : "\n     * The total number of tx success counted from the last radio chip reset.  In case of Multi\n     * Link Operation (MLO), the returned value is the sum of total number of tx success on all\n     * associated links.\n     *\n     * @return total tx success count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTxSuccess(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total number of tx success on a link counted from the last radio chip reset.\n     *\n     * @param linkId Identifier of the link.\n     * @return total tx success count.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTxRetries()",
    "returnType" : "long",
    "comment" : "\n     * The total number of MPDU data packet retries counted from the last radio chip reset. In\n     * case of Multi Link Operation (MLO), the returned value is the sum of total number of MPDU\n     * data packet retries on all associated links.\n     *\n     * @return total tx retries count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTxRetries(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total number of MPDU data packet retries on a link counted from the last radio chip\n     * reset.\n     *\n     * @param linkId Identifier of the link.\n     * @return total tx retries count.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTxBad()",
    "returnType" : "long",
    "comment" : "\n     * The total number of tx bad counted from the last radio chip reset. In case of Multi Link\n     * Operation (MLO), the returned value is the sum of total number of tx bad on all associated\n     * links.\n     *\n     * @return total tx bad count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTxBad(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total number of tx bad on a link counted from the last radio chip reset.\n     *\n     * @param linkId Identifier of the link.\n     * @return total tx bad count.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRxSuccess()",
    "returnType" : "long",
    "comment" : "\n     * The total number of rx success counted from the last radio chip reset. In case of Multi\n     * Link Operation (MLO), the returned value is the sum of total number of rx success on all\n     * associated links.\n     *\n     * @return total rx success count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRxSuccess(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total number of rx success on a link counted from the last radio chip reset.\n     *\n     * @param linkId Identifier of the link.\n     * @return total rx success count.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRadioOnTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time the wifi radio is on in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRadioTxTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time the wifi radio is doing tx in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRadioRxTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time the wifi radio is doing rx in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalScanTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time spent on all types of scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalNanScanTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time spent on nan scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalBackgroundScanTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time spent on background scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRoamScanTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time spent on roam scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalPnoScanTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time spent on pno scans in ms counted from the last radio chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalHotspot2ScanTimeMillis()",
    "returnType" : "long",
    "comment" : " The total time spent on hotspot2.0 scans and GAS exchange in ms counted from the last radio\n     * chip reset ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalCcaBusyFreqTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * The total time CCA is on busy status on the current frequency in ms counted from the last\n     * radio chip reset.In case of Multi Link Operation (MLO), returned value is the total time\n     * CCA is on busy status on the current frequency of the associated link with the highest\n     * RSSI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalCcaBusyFreqTimeMillis(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total time CCA is on busy status on the link frequency in ms counted from the last radio\n     * chip reset.\n     *\n     * @param linkId Identifier of the link.\n     * @return total time CCA is on busy status for the link in ms.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRadioOnFreqTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * The total radio on time on the current frequency from the last radio chip reset. In case of\n     * Multi Link Operation (MLO), returned value is the total time radio on time on the current\n     * frequency of the associated link with the highest RSSI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalRadioOnFreqTimeMillis(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total radio on time on the link frequency from the last radio chip reset\n     *\n     * @param linkId Identifier of the link.\n     * @return The total radio on time for the link in ms.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalBeaconRx()",
    "returnType" : "long",
    "comment" : "\n     * The total number of beacons received from the last radio chip reset. In case of Multi Link\n     * Operation (MLO), the returned value is the beacons received on the associated link with\n     * the highest RSSI.\n     *\n     * @return total beacons received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalBeaconRx(int linkId)",
    "returnType" : "long",
    "comment" : "\n     * The total number of beacons received from the last radio chip reset.\n     *\n     * @param linkId Identifier of the link.\n     * @return total beacons received.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProbeStatusSinceLastUpdate()",
    "returnType" : "int",
    "comment" : " The status of link probe since last stats update ",
    "links" : [ ]
  }, {
    "name" : "public int getProbeElapsedTimeSinceLastUpdateMillis()",
    "returnType" : "int",
    "comment" : " The elapsed time of the most recent link probe since last stats update ",
    "links" : [ ]
  }, {
    "name" : "public int getProbeMcsRateSinceLastUpdate()",
    "returnType" : "int",
    "comment" : " The MCS rate of the most recent link probe since last stats update ",
    "links" : [ ]
  }, {
    "name" : "public int getRxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Rx link speed at the sample time in Mbps. In case of Multi Link Operation (MLO), returned\n     * value is the receive link speed of the associated link with the highest RSSI.\n     *\n     * @return Receive link speed in Mbps or {@link WifiInfo#LINK_SPEED_UNKNOWN} if link speed\n     * is unknown.\n     ",
    "links" : [ "android.net.wifi.WifiInfo#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getRxLinkSpeedMbps(int linkId)",
    "returnType" : "int",
    "comment" : "\n     * Rx Link speed of the link at the sample time in Mbps.\n     *\n     * @param linkId Identifier of the link.\n     * @return Receive link speed in Mbps or {@link WifiInfo#LINK_SPEED_UNKNOWN} if link speed\n     * is unknown.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ "android.net.wifi.WifiInfo#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getTimeSliceDutyCycleInPercent()",
    "returnType" : "int",
    "comment" : "\n     * Duty cycle of the connection.\n     * If this connection is being served using time slicing on a radio with one or more interfaces\n     * (i.e MCC), then this method returns the duty cycle assigned to this interface in percent.\n     * If no concurrency or not using time slicing during concurrency (i.e SCC or DBS), set to 100.\n     * In case of Multi Link Operation (MLO), returned value is the duty cycle of the associated\n     * link with the highest RSSI.\n     *\n     * @return duty cycle in percent if known.\n     * @throws NoSuchElementException if the duty cycle is unknown (not provided by the HAL).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimeSliceDutyCycleInPercent(int linkId)",
    "returnType" : "int",
    "comment" : "\n     * Duty cycle of the connection for a link.\n     * If this connection is being served using time slicing on a radio with one or more interfaces\n     * (i.e MCC) and links, then this method returns the duty cycle assigned to this interface in\n     * percent for the link. If no concurrency or not using time slicing during concurrency (i.e SCC\n     * or DBS), set to 100.\n     *\n     * @param linkId Identifier of the link.\n     * @return duty cycle in percent if known.\n     * @throws NoSuchElementException if the duty cycle is unknown (not provided by the HAL) or\n     * linkId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentionTimeStats getContentionTimeStats(@WmeAccessCategory int ac)",
    "returnType" : "ContentionTimeStats",
    "comment" : "\n     * Data packet contention time statistics for Access Category. In case of Multi Link\n     * Operation (MLO), the returned value is the contention stats of the associated link with the\n     * highest RSSI.\n     *\n     * @param ac The access category, see {@link WmeAccessCategory}.\n     * @return The contention time statistics, see {@link ContentionTimeStats}\n     ",
    "links" : [ "WmeAccessCategory", "ContentionTimeStats" ]
  }, {
    "name" : "public ContentionTimeStats getContentionTimeStats(int linkId, @WmeAccessCategory int ac)",
    "returnType" : "ContentionTimeStats",
    "comment" : "\n     * Data packet contention time statistics of a link for Access Category.\n     *\n     * @param linkId Identifier of the link.\n     * @param ac The access category, see {@link WmeAccessCategory}.\n     * @return The contention time statistics, see {@link ContentionTimeStats}.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ "WmeAccessCategory", "ContentionTimeStats" ]
  }, {
    "name" : "public List<RateStats> getRateStats()",
    "returnType" : "List<RateStats>",
    "comment" : "\n     * Rate information and statistics, which are ordered by preamble, modulation and coding scheme\n     * (MCS), and number of spatial streams (NSS). In case of Multi Link Operation (MLO), the\n     * returned rate information is that of the associated link with the highest RSSI.\n     *\n     * @return A list of rate statistics in the form of a list of {@link RateStats} objects.\n     *         Depending on the link type, the list is created following the order of:\n     *         - HT (IEEE Std 802.11-2020, Section 19): LEGACY rates (1Mbps, ..., 54Mbps),\n     *           HT MCS0, ..., MCS15;\n     *         - VHT (IEEE Std 802.11-2020, Section 21): LEGACY rates (1Mbps, ..., 54Mbps),\n     *           VHT MCS0/NSS1, ..., VHT MCS11/NSS1, VHT MCSO/NSS2, ..., VHT MCS11/NSS2;\n     *         - HE (IEEE Std 802.11ax-2020, Section 27): LEGACY rates (1Mbps, ..., 54Mbps),\n     *           HE MCS0/NSS1, ..., HE MCS11/NSS1, HE MCSO/NSS2, ..., HE MCS11/NSS2.\n     *         - EHT (IEEE std 802.11be-2021, Section 36): Legacy rates (1Mbps, ..., 54Mbps),\n     *           EHT MSC0/NSS1, ..., EHT MCS14/NSS1, EHT MCS0/NSS2, ..., EHT MCS14/NSS2.\n     ",
    "links" : [ "RateStats" ]
  }, {
    "name" : "public List<RateStats> getRateStats(int linkId)",
    "returnType" : "List<RateStats>",
    "comment" : "\n     * Rate information and statistics, which are ordered by preamble, modulation and coding scheme\n     * (MCS), and number of spatial streams (NSS) for link.\n     *\n     * @param linkId Identifier of the link.\n     * @return A list of rate statistics in the form of a list of {@link RateStats} objects.\n     *         Depending on the link type, the list is created following the order of:\n     *         - HT (IEEE Std 802.11-2020, Section 19): LEGACY rates (1Mbps, ..., 54Mbps),\n     *           HT MCS0, ..., MCS15;\n     *         - VHT (IEEE Std 802.11-2020, Section 21): LEGACY rates (1Mbps, ..., 54Mbps),\n     *           VHT MCS0/NSS1, ..., VHT MCS11/NSS1, VHT MCSO/NSS2, ..., VHT MCS11/NSS2;\n     *         - HE (IEEE Std 802.11ax-2020, Section 27): LEGACY rates (1Mbps, ..., 54Mbps),\n     *           HE MCS0/NSS1, ..., HE MCS11/NSS1, HE MCSO/NSS2, ..., HE MCS11/NSS2.\n     *         - EHT (IEEE std 802.11be-2021, Section 36): Legacy rates (1Mbps, ..., 54Mbps),\n     *           EHT MSC0/NSS1, ..., EHT MCS14/NSS1, EHT MCS0/NSS2, ..., EHT MCS14/NSS2.\n     * @throws NoSuchElementException if linkId is invalid.\n     ",
    "links" : [ "RateStats" ]
  }, {
    "name" : "public List<RadioStats> getWifiLinkLayerRadioStats()",
    "returnType" : "List<RadioStats>",
    "comment" : "\n     * Radio stats from all the radios, see {@link RadioStats#getRadioId()}\n     * @return A list of Wifi link layer radio stats, see {@link RadioStats}\n     ",
    "links" : [ "#getRadioId()", "RadioStats" ]
  }, {
    "name" : "public int getChannelUtilizationRatio()",
    "returnType" : "int",
    "comment" : "\n     * Channel utilization ratio on the current channel.\n     *\n     * @return The channel utilization ratio (value) in the range of [0, 255], where x corresponds\n     *         to (x * 100 / 255)%, or -1 indicating that there is no valid value to return.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isThroughputSufficient()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether current link layer (L2) throughput is sufficient.  L2 throughput is\n     * sufficient when one of the following conditions is met: 1) L3 throughput is low and L2\n     * throughput is above its low threshold; 2) L3 throughput is not low and L2 throughput over L3\n     * throughput ratio is above a threshold; 3) L3 throughput is not low and L2 throughput is\n     * above its high threshold.\n     *\n     * @return true if it is sufficient or false if it is insufficient.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWifiScoringEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether Wi-Fi scoring is enabled by the user,\n     * see {@link WifiManager#setWifiScoringEnabled(boolean)}.\n     *\n     * @return true if it is enabled.\n     ",
    "links" : [ "android.net.wifi.WifiManager#setWifiScoringEnabled(boolean)" ]
  }, {
    "name" : "public boolean isCellularDataAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether Cellular data is available.\n     *\n     * @return true if it is available and false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCellularDataNetworkType()",
    "returnType" : "int",
    "comment" : " Cellular data network type currently in use on the device for data transmission ",
    "links" : [ ]
  }, {
    "name" : "public int getCellularSignalStrengthDbm()",
    "returnType" : "int",
    "comment" : "\n     * Cellular signal strength in dBm, NR: CsiRsrp, LTE: Rsrp, WCDMA/TDSCDMA: Rscp,\n     * CDMA: Rssi, EVDO: Rssi, GSM: Rssi\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCellularSignalStrengthDb()",
    "returnType" : "int",
    "comment" : "\n     * Cellular signal strength in dB, NR: CsiSinr, LTE: Rsrq, WCDMA: EcNo, TDSCDMA: invalid,\n     * CDMA: Ecio, EVDO: SNR, GSM: invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameRegisteredCell()",
    "returnType" : "boolean",
    "comment" : " Whether the primary registered cell of current entry is same as that of previous entry ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getLinkStateString(@LinkState int state)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int[] getLinkIds()", "public int getLinkState(int linkId)", "public long getTimeStampMillis()", "public int getRssi()", "public int getRssi(int linkId)", "public long getRadioId(int linkId)", "public int getLinkSpeedMbps()", "public int getTxLinkSpeedMbps(int linkId)", "public long getTotalTxSuccess()", "public long getTotalTxSuccess(int linkId)", "public long getTotalTxRetries()", "public long getTotalTxRetries(int linkId)", "public long getTotalTxBad()", "public long getTotalTxBad(int linkId)", "public long getTotalRxSuccess()", "public long getTotalRxSuccess(int linkId)", "public long getTotalRadioOnTimeMillis()", "public long getTotalRadioTxTimeMillis()", "public long getTotalRadioRxTimeMillis()", "public long getTotalScanTimeMillis()", "public long getTotalNanScanTimeMillis()", "public long getTotalBackgroundScanTimeMillis()", "public long getTotalRoamScanTimeMillis()", "public long getTotalPnoScanTimeMillis()", "public long getTotalHotspot2ScanTimeMillis()", "public long getTotalCcaBusyFreqTimeMillis()", "public long getTotalCcaBusyFreqTimeMillis(int linkId)", "public long getTotalRadioOnFreqTimeMillis()", "public long getTotalRadioOnFreqTimeMillis(int linkId)", "public long getTotalBeaconRx()", "public long getTotalBeaconRx(int linkId)", "public int getProbeStatusSinceLastUpdate()", "public int getProbeElapsedTimeSinceLastUpdateMillis()", "public int getProbeMcsRateSinceLastUpdate()", "public int getRxLinkSpeedMbps()", "public int getRxLinkSpeedMbps(int linkId)", "public int getTimeSliceDutyCycleInPercent()", "public int getTimeSliceDutyCycleInPercent(int linkId)", "public ContentionTimeStats getContentionTimeStats(@WmeAccessCategory int ac)", "public ContentionTimeStats getContentionTimeStats(int linkId, @WmeAccessCategory int ac)", "public List<RateStats> getRateStats()", "public List<RateStats> getRateStats(int linkId)", "public List<RadioStats> getWifiLinkLayerRadioStats()", "public int getChannelUtilizationRatio()", "public boolean isThroughputSufficient()", "public boolean isWifiScoringEnabled()", "public boolean isCellularDataAvailable()", "public int getCellularDataNetworkType()", "public int getCellularSignalStrengthDbm()", "public int getCellularSignalStrengthDb()", "public boolean isSameRegisteredCell()" ],
  "variableNames" : [ "TAG", "LINK_STATE_UNKNOWN", "LINK_STATE_NOT_IN_USE", "LINK_STATE_IN_USE", "PROBE_STATUS_UNKNOWN", "PROBE_STATUS_NO_PROBE", "PROBE_STATUS_SUCCESS", "PROBE_STATUS_FAILURE", "mTimeStampMillis", "mRssi", "mLinkSpeedMbps", "mTotalTxSuccess", "mTotalTxRetries", "mTotalTxBad", "mTotalRxSuccess", "mTotalRadioOnTimeMillis", "mTotalRadioTxTimeMillis", "mTotalRadioRxTimeMillis", "mTotalScanTimeMillis", "mTotalNanScanTimeMillis", "mTotalBackgroundScanTimeMillis", "mTotalRoamScanTimeMillis", "mTotalPnoScanTimeMillis", "mTotalHotspot2ScanTimeMillis", "mTotalCcaBusyFreqTimeMillis", "mTotalRadioOnFreqTimeMillis", "mTotalBeaconRx", "mProbeStatusSinceLastUpdate", "mProbeElapsedTimeSinceLastUpdateMillis", "mProbeMcsRateSinceLastUpdate", "mRxLinkSpeedMbps", "mTimeSliceDutyCycleInPercent", "WME_ACCESS_CATEGORY_BE", "WME_ACCESS_CATEGORY_BK", "WME_ACCESS_CATEGORY_VI", "WME_ACCESS_CATEGORY_VO", "NUM_WME_ACCESS_CATEGORIES", "mContentionTimeStats", "WIFI_PREAMBLE_OFDM", "WIFI_PREAMBLE_CCK", "WIFI_PREAMBLE_HT", "WIFI_PREAMBLE_VHT", "WIFI_PREAMBLE_HE", "WIFI_PREAMBLE_EHT", "WIFI_PREAMBLE_INVALID", "WIFI_SPATIAL_STREAMS_ONE", "WIFI_SPATIAL_STREAMS_TWO", "WIFI_SPATIAL_STREAMS_THREE", "WIFI_SPATIAL_STREAMS_FOUR", "WIFI_SPATIAL_STREAMS_INVALID", "WIFI_BANDWIDTH_20_MHZ", "WIFI_BANDWIDTH_40_MHZ", "WIFI_BANDWIDTH_80_MHZ", "WIFI_BANDWIDTH_160_MHZ", "WIFI_BANDWIDTH_80P80_MHZ", "WIFI_BANDWIDTH_5_MHZ", "WIFI_BANDWIDTH_10_MHZ", "WIFI_BANDWIDTH_320_MHZ", "WIFI_BANDWIDTH_INVALID", "mRateStats", "mRadioStats", "mChannelUtilizationRatio", "mIsThroughputSufficient", "mIsWifiScoringEnabled", "mIsCellularDataAvailable", "mCellularDataNetworkType", "mCellularSignalStrengthDbm", "mCellularSignalStrengthDb", "mIsSameRegisteredCell", "mLinkStats", "CREATOR" ]
}