{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/DateTimePatternGenerator.java",
  "packageName" : "android.icu.text",
  "className" : "FormatParser",
  "comment" : "\n     * This class provides mechanisms for parsing a SimpleDateFormat pattern\n     * or generating a new pattern, while handling the quoting. It represents\n     * the result of the parse as a list of items, where each item is either a\n     * literal string or a variable field. When parsing It can be used to find\n     * out which variable fields are in a date format, and in what order, such\n     * as for presentation in a UI as separate text entry fields. It can also be\n     * used to construct new SimpleDateFormats.\n     * <p>Example:\n     * <pre>\n    public boolean containsZone(String pattern) {\n        for (Iterator it = formatParser.set(pattern).getItems().iterator(); it.hasNext();) {\n            Object item = it.next();\n            if (item instanceof VariableField) {\n                VariableField variableField = (VariableField) item;\n                if (variableField.getType() == DateTimePatternGenerator.ZONE) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n     *  </pre>\n     * @deprecated This API is ICU internal only.\n     * @hide Only a subset of ICU is exposed in Android\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SYNTAX_CHARS",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUOTING_CHARS",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tokenizer",
    "type" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "items",
    "type" : "List<Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final FormatParser set(String string)",
    "returnType" : "FormatParser",
    "comment" : "\n         * Parses the string into a list of items.\n         * @param string The string to parse.\n         * @return this, for chaining\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public FormatParser set(String string, boolean strict)",
    "returnType" : "FormatParser",
    "comment" : "\n         * Parses the string into a list of items, taking into account all of the quoting that may be going on.\n         * @param string  The string to parse.\n         * @param strict If true, then only allows exactly those lengths specified by CLDR for variables. For example, \"hh:mm aa\" would throw an exception.\n         * @return this, for chaining\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "private void addVariable(StringBuffer variable, boolean strict)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Object> getItems()",
    "returnType" : "List<Object>",
    "comment" : "\n         * Returns modifiable list which is a mixture of Strings and VariableFields, in the order found during parsing. The strings represent literals, and have all quoting removed. Thus the string \"dd 'de' MM\" will parse into three items:\n         * <pre>\n         * VariableField: dd\n         * String: \" de \"\n         * VariableField: MM\n         * </pre>\n         * The list is modifiable, so you can add any strings or variables to it, or remove any items.\n         * @return modifiable list of items.\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " Provide display form of formatted input. Each literal string is quoted if necessary.. That is, if the input was \"hh':'mm\", the result would be \"hh:mm\", since the \":\" doesn't need quoting. See quoteLiteral().\n         * @return printable output string\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString(int start, int limit)",
    "returnType" : "String",
    "comment" : "\n         * Provide display form of a segment of the parsed input. Each literal string is minimally quoted. That is, if the input was \"hh':'mm\", the result would be \"hh:mm\", since the \":\" doesn't need quoting. See quoteLiteral().\n         * @param start item to start from\n         * @param limit last item +1\n         * @return printable output string\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDateAndTimeFields()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if it has a mixture of date and time variable fields: that is, at least one date variable and at least one time variable.\n         * @return true or false\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public Object quoteLiteral(String string)",
    "returnType" : "Object",
    "comment" : "\n         *  Each literal string is quoted as needed. That is, the ' quote marks will only be added if needed. The exact pattern of quoting is not guaranteed, thus \" de la \" could be quoted as \" 'de la' \" or as \" 'de' 'la' \".\n         * @param string The string to check.\n         * @return string with quoted literals\n         * @deprecated This API is ICU internal only.\n         * @hide original deprecated declaration\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final FormatParser set(String string)", "public FormatParser set(String string, boolean strict)", "private void addVariable(StringBuffer variable, boolean strict)", "public List<Object> getItems()", "public String toString()", "public String toString(int start, int limit)", "public boolean hasDateAndTimeFields()", "public Object quoteLiteral(String string)" ],
  "variableNames" : [ "SYNTAX_CHARS", "QUOTING_CHARS", "tokenizer", "items" ]
}