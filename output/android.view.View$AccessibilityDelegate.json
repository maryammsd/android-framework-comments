{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/View.java",
  "packageName" : "android.view",
  "className" : "AccessibilityDelegate",
  "comment" : "\n     * <p>\n     * This class represents a delegate that can be registered in a {@link View}\n     * to enhance accessibility support via composition rather via inheritance.\n     * It is specifically targeted to widget developers that extend basic View\n     * classes i.e. classes in package android.view, that would like their\n     * applications to be backwards compatible.\n     * </p>\n     * <div class=\"special reference\">\n     * <h3>Developer Guides</h3>\n     * <p>For more information about making applications accessible, read the\n     * <a href=\"{@docRoot}guide/topics/ui/accessibility/index.html\">Accessibility</a>\n     * developer guide.</p>\n     * </div>\n     * <p>\n     * A scenario in which a developer would like to use an accessibility delegate\n     * is overriding a method introduced in a later API version than the minimal API\n     * version supported by the application. For example, the method\n     * {@link View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} is not available\n     * in API version 4 when the accessibility APIs were first introduced. If a\n     * developer would like their application to run on API version 4 devices (assuming\n     * all other APIs used by the application are version 4 or lower) and take advantage\n     * of this method, instead of overriding the method which would break the application's\n     * backwards compatibility, they can override the corresponding method in this\n     * delegate and register the delegate in the target View if the API version of\n     * the system is high enough, i.e. the API version is the same as or higher than the API\n     * version that introduced\n     * {@link View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)}.\n     * </p>\n     * <p>\n     * Here is an example implementation:\n     * </p>\n     * <code><pre><p>\n     * if (Build.VERSION.SDK_INT >= 14) {\n     *     // If the API version is equal of higher than the version in\n     *     // which onInitializeAccessibilityNodeInfo was introduced we\n     *     // register a delegate with a customized implementation.\n     *     View view = findViewById(R.id.view_id);\n     *     view.setAccessibilityDelegate(new AccessibilityDelegate() {\n     *         public void onInitializeAccessibilityNodeInfo(View host,\n     *                 AccessibilityNodeInfo info) {\n     *             // Let the default implementation populate the info.\n     *             super.onInitializeAccessibilityNodeInfo(host, info);\n     *             // Set some other information.\n     *             info.setEnabled(host.isEnabled());\n     *         }\n     *     });\n     * }\n     * </code></pre></p>\n     * <p>\n     * This delegate contains methods that correspond to the accessibility methods\n     * in View. If a delegate has been specified the implementation in View hands\n     * off handling to the corresponding method in this delegate. The default\n     * implementation the delegate methods behaves exactly as the corresponding\n     * method in View for the case of no accessibility delegate been set. Hence,\n     * to customize the behavior of a View method, clients can override only the\n     * corresponding delegate method without altering the behavior of the rest\n     * accessibility related methods of the host view.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> On platform versions prior to\n     * {@link android.os.Build.VERSION_CODES#M API 23}, delegate methods on\n     * views in the {@code android.widget.*} package are called <i>before</i>\n     * host methods. This prevents certain properties such as class name from\n     * being modified by overriding\n     * {@link AccessibilityDelegate#onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)},\n     * as any changes will be overwritten by the host class.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#M API 23}, delegate\n     * methods are called <i>after</i> host methods, which all properties to be\n     * modified without being overwritten by the host class.\n     * <aside class=\"note\">\n     * <b>Note:</b> Use a {@link androidx.core.view.AccessibilityDelegateCompat}\n     * wrapper instead of this class for backwards-compatibility.\n     * </aside>\n     *\n     ",
  "links" : [ "android.view.View", "androidx.core.view.AccessibilityDelegateCompat", "android.view.View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)", "android.os.Build.VERSION_CODES#M", "#onInitializeAccessibilityNodeInfo(View" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void sendAccessibilityEvent(@NonNull View host, int eventType)",
    "returnType" : "void",
    "comment" : "\n         * Sends an accessibility event of the given type. If accessibility is not\n         * enabled this method has no effect.\n         * <p>\n         * The default implementation behaves as {@link View#sendAccessibilityEvent(int)\n         *  View#sendAccessibilityEvent(int)} for the case of no accessibility delegate\n         * been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param eventType The type of the event to send.\n         *\n         * @see View#sendAccessibilityEvent(int) View#sendAccessibilityEvent(int)\n         ",
    "links" : [ "android.view.View#sendAccessibilityEvent(int)" ]
  }, {
    "name" : "public boolean performAccessibilityAction(@NonNull View host, int action, @Nullable Bundle args)",
    "returnType" : "boolean",
    "comment" : "\n         * Performs the specified accessibility action on the view. For\n         * possible accessibility actions look at {@link AccessibilityNodeInfo}.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#performAccessibilityAction(int, Bundle)\n         *  View#performAccessibilityAction(int, Bundle)} for the case of\n         *  no accessibility delegate been set.\n         * </p>\n         *\n         * @param action The action to perform.\n         * @return Whether the action was performed.\n         *\n         * @see View#performAccessibilityAction(int, Bundle)\n         *      View#performAccessibilityAction(int, Bundle)\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.View#performAccessibilityAction(int" ]
  }, {
    "name" : "public void sendAccessibilityEventUnchecked(@NonNull View host, @NonNull AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Sends an accessibility event. This method behaves exactly as\n         * {@link #sendAccessibilityEvent(View, int)} but takes as an argument an\n         * empty {@link AccessibilityEvent} and does not perform a check whether\n         * accessibility is enabled.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#sendAccessibilityEventUnchecked(AccessibilityEvent)\n         *  View#sendAccessibilityEventUnchecked(AccessibilityEvent)} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param event The event to send.\n         *\n         * @see View#sendAccessibilityEventUnchecked(AccessibilityEvent)\n         *      View#sendAccessibilityEventUnchecked(AccessibilityEvent)\n         ",
    "links" : [ "#sendAccessibilityEvent(View", "android.view.accessibility.AccessibilityEvent", "android.view.View#sendAccessibilityEventUnchecked(AccessibilityEvent)" ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(@NonNull View host, @NonNull AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Dispatches an {@link AccessibilityEvent} to the host {@link View} first and then\n         * to its children for adding their text content to the event.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n         *  View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param event The event.\n         * @return True if the event population was completed.\n         *\n         * @see View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n         *      View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n         ",
    "links" : [ "android.view.View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)", "android.view.View", "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public void onPopulateAccessibilityEvent(@NonNull View host, @NonNull AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Gives a chance to the host View to populate the accessibility event with its\n         * text content.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#onPopulateAccessibilityEvent(AccessibilityEvent)\n         *  View#onPopulateAccessibilityEvent(AccessibilityEvent)} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param event The accessibility event which to populate.\n         *\n         * @see View#onPopulateAccessibilityEvent(AccessibilityEvent)\n         *      View#onPopulateAccessibilityEvent(AccessibilityEvent)\n         ",
    "links" : [ "android.view.View#onPopulateAccessibilityEvent(AccessibilityEvent)" ]
  }, {
    "name" : "public void onInitializeAccessibilityEvent(@NonNull View host, @NonNull AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Initializes an {@link AccessibilityEvent} with information about the\n         * the host View which is the event source.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#onInitializeAccessibilityEvent(AccessibilityEvent)\n         *  View#onInitializeAccessibilityEvent(AccessibilityEvent)} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param event The event to initialize.\n         *\n         * @see View#onInitializeAccessibilityEvent(AccessibilityEvent)\n         *      View#onInitializeAccessibilityEvent(AccessibilityEvent)\n         ",
    "links" : [ "android.view.View#onInitializeAccessibilityEvent(AccessibilityEvent)", "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfo(@NonNull View host, @NonNull AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Initializes an {@link AccessibilityNodeInfo} with information about the host view.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)\n         *  View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param info The instance to initialize.\n         *\n         * @see View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)\n         *      View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)" ]
  }, {
    "name" : "public void addExtraDataToAccessibilityNodeInfo(@NonNull View host, @NonNull AccessibilityNodeInfo info, @NonNull String extraDataKey, @Nullable Bundle arguments)",
    "returnType" : "void",
    "comment" : "\n         * Adds extra data to an {@link AccessibilityNodeInfo} based on an explicit request for the\n         * additional data.\n         * <p>\n         * This method only needs to be implemented if the View offers to provide additional data.\n         * </p>\n         * <p>\n         * The default implementation behaves as\n         * {@link View#addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo, String, Bundle)\n         * for the case where no accessibility delegate is set.\n         * </p>\n         *\n         * @param host The View hosting the delegate. Never {@code null}.\n         * @param info The info to which to add the extra data. Never {@code null}.\n         * @param extraDataKey A key specifying the type of extra data to add to the info. The\n         *                     extra data should be added to the {@link Bundle} returned by\n         *                     the info's {@link AccessibilityNodeInfo#getExtras} method.  Never\n         *                     {@code null}.\n         * @param arguments A {@link Bundle} holding any arguments relevant for this request.\n         *                  May be {@code null} if the if the service provided no arguments.\n         *\n         * @see AccessibilityNodeInfo#setAvailableExtraData(List)\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.os.Bundle", "android.view.View#addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#getExtras" ]
  }, {
    "name" : "public boolean onRequestSendAccessibilityEvent(@NonNull ViewGroup host, @NonNull View child, @NonNull AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a child of the host View has requested sending an\n         * {@link AccessibilityEvent} and gives an opportunity to the parent (the host)\n         * to augment the event.\n         * <p>\n         * The default implementation behaves as\n         * {@link ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)\n         *  ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @param host The View hosting the delegate.\n         * @param child The child which requests sending the event.\n         * @param event The event to be sent.\n         * @return True if the event should be sent\n         *\n         * @see ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)\n         *      ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent", "android.view.ViewGroup#onRequestSendAccessibilityEvent(View" ]
  }, {
    "name" : "public AccessibilityNodeProvider getAccessibilityNodeProvider(@NonNull View host)",
    "returnType" : "AccessibilityNodeProvider",
    "comment" : "\n         * Gets the provider for managing a virtual view hierarchy rooted at this View\n         * and reported to {@link android.accessibilityservice.AccessibilityService}s\n         * that explore the window content.\n         * <p>\n         * The default implementation behaves as\n         * {@link View#getAccessibilityNodeProvider() View#getAccessibilityNodeProvider()} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         *\n         * @return The provider.\n         *\n         * @see AccessibilityNodeProvider\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.View#getAccessibilityNodeProvider()" ]
  }, {
    "name" : "public AccessibilityNodeInfo createAccessibilityNodeInfo(@NonNull View host)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n         * Returns an {@link AccessibilityNodeInfo} representing the host view from the\n         * point of view of an {@link android.accessibilityservice.AccessibilityService}.\n         * This method is responsible for obtaining an accessibility node info from a\n         * pool of reusable instances and calling\n         * {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on the host\n         * view to initialize the former.\n         * <p>\n         * <strong>Note:</strong> The client is responsible for recycling the obtained\n         * instance by calling {@link AccessibilityNodeInfo#recycle()} to minimize object\n         * creation.\n         * </p>\n         * <p>\n         * The default implementation behaves as\n         * {@link View#createAccessibilityNodeInfo() View#createAccessibilityNodeInfo()} for\n         * the case of no accessibility delegate been set.\n         * </p>\n         * @return A populated {@link AccessibilityNodeInfo}.\n         *\n         * @see AccessibilityNodeInfo\n         *\n         * @hide\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityService", "#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)", "android.view.accessibility.AccessibilityNodeInfo#recycle()", "android.view.View#createAccessibilityNodeInfo()" ]
  } ],
  "methodNames" : [ "public void sendAccessibilityEvent(@NonNull View host, int eventType)", "public boolean performAccessibilityAction(@NonNull View host, int action, @Nullable Bundle args)", "public void sendAccessibilityEventUnchecked(@NonNull View host, @NonNull AccessibilityEvent event)", "public boolean dispatchPopulateAccessibilityEvent(@NonNull View host, @NonNull AccessibilityEvent event)", "public void onPopulateAccessibilityEvent(@NonNull View host, @NonNull AccessibilityEvent event)", "public void onInitializeAccessibilityEvent(@NonNull View host, @NonNull AccessibilityEvent event)", "public void onInitializeAccessibilityNodeInfo(@NonNull View host, @NonNull AccessibilityNodeInfo info)", "public void addExtraDataToAccessibilityNodeInfo(@NonNull View host, @NonNull AccessibilityNodeInfo info, @NonNull String extraDataKey, @Nullable Bundle arguments)", "public boolean onRequestSendAccessibilityEvent(@NonNull ViewGroup host, @NonNull View child, @NonNull AccessibilityEvent event)", "public AccessibilityNodeProvider getAccessibilityNodeProvider(@NonNull View host)", "public AccessibilityNodeInfo createAccessibilityNodeInfo(@NonNull View host)" ],
  "variableNames" : [ ]
}