{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "Message",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "KEY_TEXT",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "KEY_TIMESTAMP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SENDER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SENDER_PERSON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA_MIME_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA_URI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_EXTRAS_BUNDLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_REMOTE_INPUT_HISTORY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSender",
    "type" : "Person",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteInputHistory",
    "type" : "boolean",
    "comment" : " True if this message was generated from the extra\n             *  {@link Notification#EXTRA_REMOTE_INPUT_HISTORY_ITEMS}\n             ",
    "links" : [ "android.app.Notification#EXTRA_REMOTE_INPUT_HISTORY_ITEMS" ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataMimeType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Message setData(String dataMimeType, Uri dataUri)",
    "returnType" : "Message",
    "comment" : "\n             * Sets a binary blob of data and an associated MIME type for a message. In the case\n             * where the platform doesn't support the MIME type, the original text provided in the\n             * constructor will be used.\n             * @param dataMimeType The MIME type of the content. See\n             * {@link android.graphics.ImageDecoder#isMimeTypeSupported(String)} for a list of\n             * supported image MIME types.\n             * @param dataUri The uri containing the content whose type is given by the MIME type.\n             * <p class=\"note\">\n             * Notification Listeners including the System UI need permission to access the\n             * data the Uri points to. The recommended ways to do this are:\n             * <ol>\n             *   <li>Store the data in your own ContentProvider, making sure that other apps have\n             *       the correct permission to access your provider. The preferred mechanism for\n             *       providing access is to use per-URI permissions which are temporary and only\n             *       grant access to the receiving application. An easy way to create a\n             *       ContentProvider like this is to use the FileProvider helper class.</li>\n             *   <li>Use the system MediaStore. The MediaStore is primarily aimed at video, audio\n             *       and image MIME types, however beginning with Android 3.0 (API level 11) it can\n             *       also store non-media types (see MediaStore.Files for more info). Files can be\n             *       inserted into the MediaStore using scanFile() after which a content:// style\n             *       Uri suitable for sharing is passed to the provided onScanCompleted() callback.\n             *       Note that once added to the system MediaStore the content is accessible to any\n             *       app on the device.</li>\n             * </ol>\n             * @return this object for method chaining\n             ",
    "links" : [ "android.graphics.ImageDecoder#isMimeTypeSupported(String)" ]
  }, {
    "name" : "public void ensureColorContrastOrStripStyling(int backgroundColor)",
    "returnType" : "void",
    "comment" : "\n             * Strip styling or updates TextAppearance spans in message text.\n             * @hide\n             ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence stripNonStyleSpans(CharSequence text)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ensureColorContrast(int backgroundColor)",
    "returnType" : "void",
    "comment" : "\n             * Updates TextAppearance spans in the message text so it has sufficient contrast\n             * against its background.\n             * @hide\n             ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n             * Get the text to be used for this message, or the fallback text if a type and content\n             * Uri have been set\n             ",
    "links" : [ ]
  }, {
    "name" : "public long getTimestamp()",
    "returnType" : "long",
    "comment" : "\n             * Get the time at which this message arrived\n             ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n             * Get the extras Bundle for this message.\n             ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSender()",
    "returnType" : "CharSequence",
    "comment" : "\n             * Get the text used to display the contact's name in the messaging experience\n             *\n             * @deprecated use {@link #getSenderPerson()}\n             ",
    "links" : [ "#getSenderPerson()" ]
  }, {
    "name" : "public Person getSenderPerson()",
    "returnType" : "Person",
    "comment" : "\n             * Get the sender associated with this message.\n             ",
    "links" : [ ]
  }, {
    "name" : "public String getDataMimeType()",
    "returnType" : "String",
    "comment" : "\n             * Get the MIME type of the data pointed to by the Uri\n             ",
    "links" : [ ]
  }, {
    "name" : "public Uri getDataUri()",
    "returnType" : "Uri",
    "comment" : "\n             * Get the Uri pointing to the content of the message. Can be null, in which case\n             * {@see #getText()} is used.\n             ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRemoteInputHistory()",
    "returnType" : "boolean",
    "comment" : "\n             * @return True if the message was generated from\n             * {@link Notification#EXTRA_REMOTE_INPUT_HISTORY_ITEMS}.\n             * @hide\n             ",
    "links" : [ "android.app.Notification#EXTRA_REMOTE_INPUT_HISTORY_ITEMS" ]
  }, {
    "name" : "public Bundle toBundle()",
    "returnType" : "Bundle",
    "comment" : "\n             * Converts the message into a {@link Bundle}. To extract the message back,\n             * check {@link #getMessageFromBundle()}\n             * @hide\n             ",
    "links" : [ "android.os.Bundle", "#getMessageFromBundle()" ]
  }, {
    "name" : "public void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "\n             * See {@link Notification#visitUris(Consumer)}.\n             *\n             * @hide\n             ",
    "links" : [ "android.app.Notification#visitUris(Consumer)" ]
  }, {
    "name" : "public static List<Message> getMessagesFromBundleArray(@Nullable Parcelable[] bundles)",
    "returnType" : "List<Message>",
    "comment" : "\n             * Returns a list of messages read from the given bundle list, e.g.\n             * {@link #EXTRA_MESSAGES} or {@link #EXTRA_HISTORIC_MESSAGES}.\n             ",
    "links" : [ "#EXTRA_MESSAGES", "#EXTRA_HISTORIC_MESSAGES" ]
  }, {
    "name" : "public static Message getMessageFromBundle(@NonNull Bundle bundle)",
    "returnType" : "Message",
    "comment" : "\n             * Returns the message that is stored in the bundle (e.g. one of the values in the lists\n             * in {@link #EXTRA_MESSAGES} or {@link #EXTRA_HISTORIC_MESSAGES}) or null if the\n             * message couldn't be resolved.\n             * @hide\n             ",
    "links" : [ "#EXTRA_MESSAGES", "#EXTRA_HISTORIC_MESSAGES" ]
  } ],
  "methodNames" : [ "public Message setData(String dataMimeType, Uri dataUri)", "public void ensureColorContrastOrStripStyling(int backgroundColor)", "private CharSequence stripNonStyleSpans(CharSequence text)", "public void ensureColorContrast(int backgroundColor)", "public CharSequence getText()", "public long getTimestamp()", "public Bundle getExtras()", "public CharSequence getSender()", "public Person getSenderPerson()", "public String getDataMimeType()", "public Uri getDataUri()", "public boolean isRemoteInputHistory()", "public Bundle toBundle()", "public void visitUris(@NonNull Consumer<Uri> visitor)", "public static List<Message> getMessagesFromBundleArray(@Nullable Parcelable[] bundles)", "public static Message getMessageFromBundle(@NonNull Bundle bundle)" ],
  "variableNames" : [ "KEY_TEXT", "KEY_TIMESTAMP", "KEY_SENDER", "KEY_SENDER_PERSON", "KEY_DATA_MIME_TYPE", "KEY_DATA_URI", "KEY_EXTRAS_BUNDLE", "KEY_REMOTE_INPUT_HISTORY", "mText", "mTimestamp", "mSender", "mRemoteInputHistory", "mExtras", "mDataMimeType", "mDataUri" ]
}