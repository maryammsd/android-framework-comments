{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/DoubleAccumulator.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "SerializationProxy",
  "comment" : "\n     * Serialization proxy, used to avoid reference to the non-public\n     * Striped64 superclass in serialized forms.\n     * @serial include\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "double",
    "comment" : "\n         * The current value returned by get().\n         * @serial\n         ",
    "links" : [ ]
  }, {
    "name" : "function",
    "type" : "DoubleBinaryOperator",
    "comment" : "\n         * The function used for updates.\n         * @serial\n         ",
    "links" : [ ]
  }, {
    "name" : "identity",
    "type" : "long",
    "comment" : "\n         * The identity value, represented as a long, as converted by\n         * {@link Double#doubleToRawLongBits}.  The original identity\n         * can be recovered using {@link Double#longBitsToDouble}.\n         * @serial\n         ",
    "links" : [ "java.lang.Double.longBitsToDouble#longBitsToDouble", "java.lang.Double.longBitsToDouble#doubleToRawLongBits" ]
  } ],
  "methods" : [ {
    "name" : "private Object readResolve()",
    "returnType" : "Object",
    "comment" : "\n         * Returns a {@code DoubleAccumulator} object with initial state\n         * held by this proxy.\n         *\n         * @return a {@code DoubleAccumulator} object with initial state\n         * held by this proxy\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private Object readResolve()" ],
  "variableNames" : [ "serialVersionUID", "value", "function", "identity" ]
}