{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/utils/TypeReference.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "TypeReference",
  "comment" : "\n * Super type token; allows capturing generic types at runtime by forcing them to be reified.\n *\n * <p>Usage example: <pre>{@code\n *      // using anonymous classes (preferred)\n *      TypeReference&lt;Integer> intToken = new TypeReference&lt;Integer>() {{ }};\n *\n *      // using named classes\n *      class IntTypeReference extends TypeReference&lt;Integer> {...}\n *      TypeReference&lt;Integer> intToken = new IntTypeReference();\n * }</p></pre>\n *\n * <p>Unlike the reference implementation, this bans nested TypeVariables; that is all\n * dynamic types must equal to the static types.</p>\n *\n * <p>See <a href=\"http://gafter.blogspot.com/2007/05/limitation-of-super-type-tokens.html\">\n * http://gafter.blogspot.com/2007/05/limitation-of-super-type-tokens.html</a>\n * for more details.</p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mType",
    "type" : "Type",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHash",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Type getType()",
    "returnType" : "Type",
    "comment" : "\n     * Return the dynamic {@link Type} corresponding to the captured type {@code T}.\n     ",
    "links" : [ "java.lang.reflect.GenericArrayType" ]
  }, {
    "name" : "public static TypeReference<T> createSpecializedTypeReference(Class<T> klass)",
    "returnType" : "TypeReference<T>",
    "comment" : "\n     * Create a specialized type reference from a dynamic class instance,\n     * bypassing the standard compile-time checks.\n     *\n     * <p>As with a regular type reference, the {@code klass} must not contain\n     * any type variables.</p>\n     *\n     * @param klass a non-{@code null} {@link Class} instance\n     *\n     * @return a type reference which captures {@code T} at runtime\n     *\n     * @throws IllegalArgumentException if {@code T} had any type variables\n     ",
    "links" : [ "Class" ]
  }, {
    "name" : "public static TypeReference<?> createSpecializedTypeReference(Type type)",
    "returnType" : "TypeReference<?>",
    "comment" : "\n     * Create a specialized type reference from a dynamic {@link Type} instance,\n     * bypassing the standard compile-time checks.\n     *\n     * <p>As with a regular type reference, the {@code type} must not contain\n     * any type variables.</p>\n     *\n     * @param type a non-{@code null} {@link Type} instance\n     *\n     * @return a type reference which captures {@code T} at runtime\n     *\n     * @throws IllegalArgumentException if {@code type} had any type variables\n     ",
    "links" : [ "java.lang.reflect.GenericArrayType" ]
  }, {
    "name" : "public final Class<? super T> getRawType()",
    "returnType" : "Class<? super T>",
    "comment" : "\n     * Returns the raw type of T.\n     *\n     * <p><ul>\n     * <li>If T is a Class itself, T itself is returned.\n     * <li>If T is a ParameterizedType, the raw type of the parameterized type is returned.\n     * <li>If T is a GenericArrayType, the returned type is the corresponding array class.\n     * For example: {@code List<Integer>[]} => {@code List[]}.\n     * <li>If T is a type variable or a wildcard type, the raw type of the first upper bound is\n     * returned. For example: {@code <X extends Foo>} => {@code Foo}.\n     * </ul>\n     *\n     * @return the raw type of {@code T}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final Class<?> getRawType(Type type)",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final Class<?> getRawType(Type[] types)",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final Class<?> getArrayClass(Class<?> componentType)",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TypeReference<?> getComponentType()",
    "returnType" : "TypeReference<?>",
    "comment" : "\n     * Get the component type, e.g. {@code T} from {@code T[]}.\n     *\n     * @return component type, or {@code null} if {@code T} is not an array\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Type getComponentType(Type type)",
    "returnType" : "Type",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two objects for equality.\n     *\n     * <p>A TypeReference is only equal to another TypeReference if their captured type {@code T}\n     * is also equal.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean containsTypeVariable(Type type)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the {@code type} contains a {@link TypeVariable} recursively.\n     *\n     * <p>Intuitively, a type variable is a type in a type expression that refers to a generic\n     * type which is not known at the definition of the expression (commonly seen when\n     * type parameters are used, e.g. {@code class Foo<T>}).</p>\n     *\n     * <p>See <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.4\">\n     * http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.4</a>\n     * for a more formal definition of a type variable</p>.\n     *\n     * @param type a type object ({@code null} is allowed)\n     * @return {@code true} if there were nested type variables; {@code false} otherwise\n     ",
    "links" : [ "java.lang.reflect.TypeVariable" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void toString(Type type, StringBuilder out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void toString(Type[] types, StringBuilder out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsTypeVariable(Type[] typeArray)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if any of the elements in this array contained a type variable.\n     *\n     * <p>Empty and null arrays trivially have no type variables.</p>\n     *\n     * @param typeArray an array ({@code null} is ok) of types\n     * @return true if any elements contained a type variable; false otherwise\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Type getType()", "public static TypeReference<T> createSpecializedTypeReference(Class<T> klass)", "public static TypeReference<?> createSpecializedTypeReference(Type type)", "public final Class<? super T> getRawType()", "private static final Class<?> getRawType(Type type)", "private static final Class<?> getRawType(Type[] types)", "private static final Class<?> getArrayClass(Class<?> componentType)", "public TypeReference<?> getComponentType()", "private static Type getComponentType(Type type)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public static boolean containsTypeVariable(Type type)", "public String toString()", "private static void toString(Type type, StringBuilder out)", "private static void toString(Type[] types, StringBuilder out)", "private static boolean containsTypeVariable(Type[] typeArray)" ],
  "variableNames" : [ "mType", "mHash" ]
}