{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/TimeZone.java",
  "packageName" : "android.icu.util",
  "className" : "TimeZone",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.util.TimeZone}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p><code>TimeZone</code> represents a time zone offset, and also computes daylight\n * savings.\n *\n * <p>Typically, you get a <code>TimeZone</code> using {@link #getDefault()}\n * which creates a <code>TimeZone</code> based on the time zone where the program\n * is running. For example, for a program running in Japan, <code>getDefault</code>\n * creates a <code>TimeZone</code> object based on Japanese Standard Time.\n *\n * <p>You can also get a <code>TimeZone</code> using {@link #getTimeZone(String)}\n * along with a time zone ID. For instance, the time zone ID for the\n * U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a\n * U.S. Pacific Time <code>TimeZone</code> object with:\n *\n * <blockquote>\n * <pre>\n * TimeZone tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n * </pre>\n * </blockquote>\n * You can use the {@link #getAvailableIDs()} method to iterate through\n * all the supported time zone IDs, or getCanonicalID method to check\n * if a time zone ID is supported or not. You can then choose a\n * supported ID to get a <code>TimeZone</code>.\n * If the time zone you want is not represented by one of the\n * supported IDs, then you can create a custom time zone ID with\n * the following syntax:\n *\n * <blockquote>\n * <pre>\n * GMT[+|-]hh[[:]mm]\n * </pre>\n * </blockquote>\n *\n * For example, you might specify GMT+14:00 as a custom\n * time zone ID.  The <code>TimeZone</code> that is returned\n * when you specify a custom time zone ID uses the specified\n * offset from GMT(=UTC) and does not observe daylight saving\n * time. For example, you might specify GMT+14:00 as a custom\n * time zone ID to create a TimeZone representing 14 hours ahead\n * of GMT (with no daylight saving time). In addition,\n * <code>getCanonicalID</code> can also be used to\n * normalize a custom time zone ID.\n *\n * <p>For compatibility with JDK 1.1.x, some other three-letter time zone IDs\n * (such as \"PST\", \"CTT\", \"AST\") are also supported. However, <strong>their\n * use is deprecated</strong> because the same abbreviation is often used\n * for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard\n * Time\" and \"China Standard Time\"), and the Java platform can then only\n * recognize one of them.\n *\n * @see          Calendar\n * @see          GregorianCalendar\n * @author       Mark Davis, Deborah Goldsmith, Chen-Lieh Huang, Alan Liu\n ",
  "links" : [ "#getDefault()", "#getAvailableIDs()", "java.util.TimeZone", "#getTimeZone(String)" ],
  "variables" : [ {
    "name" : "LOGGER",
    "type" : "Logger",
    "comment" : "\n     * Logger instance for this class\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " using serialver from jdk1.4.2_05",
    "links" : [ ]
  }, {
    "name" : "TIMEZONE_ICU",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A time zone implementation type indicating ICU's own TimeZone used by\n     * <code>getTimeZone</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "TIMEZONE_JDK",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A time zone implementation type indicating the {@link java.util.TimeZone}\n     * used by <code>getTimeZone</code>.\n     ",
    "links" : [ "java.util.TimeZone" ]
  }, {
    "name" : "SHORT",
    "type" : "int",
    "comment" : "\n     * A style specifier for <code>getDisplayName()</code> indicating\n     * a short name, such as \"PST.\"\n     * @see #LONG\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG",
    "type" : "int",
    "comment" : "\n     * A style specifier for <code>getDisplayName()</code> indicating\n     * a long name, such as \"Pacific Standard Time.\"\n     * @see #SHORT\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORT_GENERIC",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating\n     * a short generic name, such as \"PT.\"\n     * @see #LONG_GENERIC\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_GENERIC",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating\n     * a long generic name, such as \"Pacific Time.\"\n     * @see #SHORT_GENERIC\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORT_GMT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating\n     * a short name derived from the timezone's offset, such as \"-0800.\"\n     * @see #LONG_GMT\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_GMT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating\n     * a long name derived from the timezone's offset, such as \"GMT-08:00.\"\n     * @see #SHORT_GMT\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORT_COMMONLY_USED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GENERIC_LOCATION",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating\n     * a long name derived from the timezone's fallback name, such as\n     * \"United States (Los Angeles).\"\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_ZONE_ID",
    "type" : "String",
    "comment" : "\n     * <strong>[icu]</strong> The time zone ID reserved for unknown time zone.\n     * @see #getTimeZone(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "GMT_ZONE_ID",
    "type" : "String",
    "comment" : "\n     * The canonical ID for GMT(UTC) time zone.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_ZONE",
    "type" : "TimeZone",
    "comment" : "\n     * <strong>[icu]</strong> The immutable (frozen) \"unknown\" time zone.\n     * It behaves like the GMT/UTC time zone but has the UNKNOWN_ZONE_ID = \"Etc/Unknown\".\n     * {@link TimeZone#getTimeZone(String)} returns a mutable clone of this\n     * time zone if the input ID is not recognized.\n     *\n     * @see #UNKNOWN_ZONE_ID\n     * @see #getTimeZone(String)\n     ",
    "links" : [ "android.icu.impl.JavaTimeZone#getTimeZone(String)" ]
  }, {
    "name" : "GMT_ZONE",
    "type" : "TimeZone",
    "comment" : "\n     * <strong>[icu]</strong> The immutable GMT (=UTC) time zone. Its ID is \"Etc/GMT\".\n     ",
    "links" : [ ]
  }, {
    "name" : "ID",
    "type" : "String",
    "comment" : "\n     * The string identifier of this <code>TimeZone</code>.  This is a\n     * programmatic identifier used internally to look up <code>TimeZone</code>\n     * objects from the system table and also to map them to their localized\n     * display names.  <code>ID</code> values are unique in the system\n     * table but may not be for dynamically created zones.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultZone",
    "type" : "TimeZone",
    "comment" : "\n     * The default time zone, or null if not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "TZ_IMPL",
    "type" : "int",
    "comment" : "\n     * TimeZone implementation type\n     ",
    "links" : [ ]
  }, {
    "name" : "TZIMPL_CONFIG_KEY",
    "type" : "String",
    "comment" : "\n     * TimeZone implementation type initialization\n     ",
    "links" : [ ]
  }, {
    "name" : "TZIMPL_CONFIG_ICU",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TZIMPL_CONFIG_JDK",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",
    "returnType" : "int",
    "comment" : "\n     * Gets the time zone offset, for current date, modified in case of\n     * daylight savings. This is the offset to add <i>to</i> UTC to get local time.\n     * @param era the era of the given date.\n     * @param year the year in the given date.\n     * @param month the month in the given date.\n     * Month is 0-based. e.g., 0 for January.\n     * @param day the day-in-month of the given date.\n     * @param dayOfWeek the day-of-week of the given date.\n     * @param milliseconds the millis in day in <em>standard</em> local time.\n     * @return the offset to add <i>to</i> GMT to get local time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(long date)",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset of this time zone from UTC at the specified\n     * date. If Daylight Saving Time is in effect at the specified\n     * date, the offset value is adjusted with the amount of daylight\n     * saving.\n     *\n     * @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT\n     * @return the amount of time in milliseconds to add to UTC to get local time.\n     *\n     * @see Calendar#ZONE_OFFSET\n     * @see Calendar#DST_OFFSET\n     * @see #getOffset(long, boolean, int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffset(long date, boolean local, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * Returns the time zone raw and GMT offset for the given moment\n     * in time.  Upon return, local-millis = GMT-millis + rawOffset +\n     * dstOffset.  All computations are performed in the proleptic\n     * Gregorian calendar.  The default implementation in the TimeZone\n     * class delegates to the 8-argument getOffset().\n     *\n     * @param date moment in time for which to return offsets, in\n     * units of milliseconds from January 1, 1970 0:00 GMT, either GMT\n     * time or local wall time, depending on {@code local}.\n     * @param local if true, {@code date} is local wall time; otherwise it\n     * is in GMT time.\n     * @param offsets output parameter to receive the raw offset, that\n     * is, the offset not including DST adjustments, in offsets[0],\n     * and the DST offset, that is, the offset to be added to\n     * {@code rawOffset} to obtain the total offset between local and GMT\n     * time, in offsets[1]. If DST is not in effect, the DST offset is\n     * zero; otherwise it is a positive value, typically one hour.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the base time zone offset to GMT.\n     * This is the offset to add <i>to</i> UTC to get local time.\n     * @param offsetMillis the given base time zone offset to GMT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getRawOffset()",
    "returnType" : "int",
    "comment" : "\n     * Gets unmodified offset, NOT modified in case of daylight savings.\n     * This is the offset to add <i>to</i> UTC to get local time.\n     * @return the unmodified offset to add <i>to</i> UTC to get local time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getID()",
    "returnType" : "String",
    "comment" : "\n     * Gets the ID of this time zone.\n     * @return the ID of this time zone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setID(String ID)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time zone ID. This does not change any other data in\n     * the time zone object.\n     * @param ID the new time zone ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Returns a name of this time zone suitable for presentation to the user\n     * in the default <code>DISPLAY</code> locale.\n     * This method returns the long generic name.\n     * If the display name is not available for the locale,\n     * a fallback based on the country, city, or time zone id will be used.\n     * @return the human-readable name of this time zone in the default locale.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getDisplayName(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name of this time zone suitable for presentation to the user\n     * in the specified locale.\n     * This method returns the long generic name.\n     * If the display name is not available for the locale,\n     * a fallback based on the country, city, or time zone id will be used.\n     * @param locale the locale in which to supply the display name.\n     * @return the human-readable name of this time zone in the given locale\n     * or in the default locale if the given locale is not recognized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getDisplayName(ULocale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name of this time zone suitable for presentation to the user\n     * in the specified locale.\n     * This method returns the long name, not including daylight savings.\n     * If the display name is not available for the locale,\n     * a fallback based on the country, city, or time zone id will be used.\n     * @param locale the ulocale in which to supply the display name.\n     * @return the human-readable name of this time zone in the given locale\n     * or in the default ulocale if the given ulocale is not recognized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getDisplayName(boolean daylight, int style)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name of this time zone suitable for presentation to the user\n     * in the default <code>DISPLAY</code> locale.\n     * If the display name is not available for the locale,\n     * then this method returns a string in the localized GMT offset format\n     * such as <code>GMT[+-]HH:mm</code>.\n     * @param daylight if true, return the daylight savings name.\n     * @param style the output style of the display name.  Valid styles are\n     * <code>SHORT</code>, <code>LONG</code>, <code>SHORT_GENERIC</code>,\n     * <code>LONG_GENERIC</code>, <code>SHORT_GMT</code>, <code>LONG_GMT</code>,\n     * <code>SHORT_COMMONLY_USED</code> or <code>GENERIC_LOCATION</code>.\n     * @return the human-readable name of this time zone in the default locale.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(boolean daylight, int style, Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name of this time zone suitable for presentation to the user\n     * in the specified locale.\n     * If the display name is not available for the locale,\n     * then this method returns a string in the localized GMT offset format\n     * such as <code>GMT[+-]HH:mm</code>.\n     * @param daylight if true, return the daylight savings name.\n     * @param style the output style of the display name.  Valid styles are\n     * <code>SHORT</code>, <code>LONG</code>, <code>SHORT_GENERIC</code>,\n     * <code>LONG_GENERIC</code>, <code>SHORT_GMT</code>, <code>LONG_GMT</code>,\n     * <code>SHORT_COMMONLY_USED</code> or <code>GENERIC_LOCATION</code>.\n     * @param locale the locale in which to supply the display name.\n     * @return the human-readable name of this time zone in the given locale\n     * or in the default locale if the given locale is not recognized.\n     * @exception IllegalArgumentException style is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(boolean daylight, int style, ULocale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name of this time zone suitable for presentation to the user\n     * in the specified locale.\n     * If the display name is not available for the locale,\n     * then this method returns a string in the localized GMT offset format\n     * such as <code>GMT[+-]HH:mm</code>.\n     * @param daylight if true, return the daylight savings name.\n     * @param style the output style of the display name.  Valid styles are\n     * <code>SHORT</code>, <code>LONG</code>, <code>SHORT_GENERIC</code>,\n     * <code>LONG_GENERIC</code>, <code>SHORT_GMT</code>, <code>LONG_GMT</code>,\n     * <code>SHORT_COMMONLY_USED</code> or <code>GENERIC_LOCATION</code>.\n     * @param locale the locale in which to supply the display name.\n     * @return the human-readable name of this time zone in the given locale\n     * or in the default locale if the given locale is not recognized.\n     * @exception IllegalArgumentException style is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String _getDisplayName(int style, boolean daylight, ULocale locale)",
    "returnType" : "String",
    "comment" : "\n     * internal version (which is called by public APIs) accepts\n     * SHORT, LONG, SHORT_GENERIC, LONG_GENERIC, SHORT_GMT, LONG_GMT,\n     * SHORT_COMMONLY_USED and GENERIC_LOCATION.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDSTSavings()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of time to be added to local standard time\n     * to get local wall clock time.\n     * <p>\n     * The default implementation always returns 3600000 milliseconds\n     * (i.e., one hour) if this time zone observes Daylight Saving\n     * Time. Otherwise, 0 (zero) is returned.\n     * <p>\n     * If an underlying TimeZone implementation subclass supports\n     * historical Daylight Saving Time changes, this method returns\n     * the known latest daylight saving value.\n     *\n     * @return the amount of saving time in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if this time zone uses daylight savings time.\n     * @return true if this time zone uses daylight savings time,\n     * false, otherwise.\n     * <p><strong>Note:</strong>The default implementation of\n     * ICU TimeZone uses the tz database, which supports historic\n     * rule changes, for system time zones. With the implementation,\n     * there are time zones that used daylight savings time in the\n     * past, but no longer used currently. For example, Asia/Tokyo has\n     * never used daylight savings time since 1951. Most clients would\n     * expect that this method to return <code>false</code> for such case.\n     * The default implementation of this method returns <code>true</code>\n     * when the time zone uses daylight savings time in the current\n     * (Gregorian) calendar year.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if this time zone is in daylight saving time or will observe\n     * daylight saving time at any future time.\n     * <p>The default implementation in this class returns <code>true</code> if {@link #useDaylightTime()}\n     * or {@link #inDaylightTime(Date) inDaylightTime(new Date())} returns <code>true</code>.\n     * <p>\n     * <strong>Note:</strong> This method was added for {@link java.util.TimeZone} compatibility\n     * support. The {@link java.util.TimeZone#useDaylightTime()} method only checks the last known\n     * rule(s), therefore it may return false even the zone observes daylight saving time currently.\n     * {@link java.util.TimeZone} added <code>observesDaylightTime()</code> to resolve the issue.\n     * In ICU, {@link #useDaylightTime()} works differently. The ICU implementation checks if the\n     * zone uses daylight saving time in the current calendar year. Therefore, it will never return\n     * <code>false</code> if daylight saving time is currently used.\n     * <p>\n     * ICU's TimeZone subclass implementations override this method to support the same behavior\n     * with {@link java.util.TimeZone#observesDaylightTime()}. Unlike {@link #useDaylightTime()},\n     * the implementation does not take past daylight saving time into account, so\n     * that this method may return <code>false</code> even when {@link #useDaylightTime()} returns\n     * <code>true</code>.\n     *\n     * @return <code>true</code> if this time zone is in daylight saving time or will observe\n     * daylight saving time at any future time.\n     * @see #useDaylightTime\n     ",
    "links" : [ "java.util.TimeZone", "#useDaylightTime()", "java.util.TimeZone#observesDaylightTime()", "#inDaylightTime(Date)", "java.util.TimeZone#useDaylightTime()" ]
  }, {
    "name" : "public abstract boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if the given date is in daylight savings time in\n     * this time zone.\n     * @param date the given Date.\n     * @return true if the given date is in daylight savings time,\n     * false, otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone getTimeZone(String ID)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the <code>TimeZone</code> for the given ID.\n     *\n     * @param ID the ID for a <code>TimeZone</code>, such as \"America/Los_Angeles\",\n     * or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations,\n     * such as \"PST\", is for JDK 1.1.x compatibility only and full names should be used.\n     *\n     * @return the specified <code>TimeZone</code>, or a mutable clone of the UNKNOWN_ZONE\n     * if the given ID cannot be understood or if the given ID is \"Etc/Unknown\".\n     * @see #UNKNOWN_ZONE\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone getFrozenTimeZone(String ID)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the <code>TimeZone</code> for the given ID. The instance of <code>TimeZone</code>\n     * returned by this method is immutable. Any methods mutate the instance({@link #setID(String)},\n     * {@link #setRawOffset(int)}) will throw <code>UnsupportedOperationException</code> upon its\n     * invocation.\n     *\n     * @param ID the ID for a <code>TimeZone</code>, such as \"America/Los_Angeles\",\n     * or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations,\n     * such as \"PST\", is for JDK 1.1.x compatibility only and full names should be used.\n     *\n     * @return the specified <code>TimeZone</code>, or the UNKNOWN_ZONE\n     * if the given ID cannot be understood.\n     * @see #UNKNOWN_ZONE\n     ",
    "links" : [ "#setID(String)", "#setRawOffset(int)" ]
  }, {
    "name" : "public static TimeZone getTimeZone(String ID, int type)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the <code>TimeZone</code> for the given ID and the timezone type.\n     * @param ID the ID for a <code>TimeZone</code>, such as \"America/Los_Angeles\", or a\n     * custom ID such as \"GMT-8:00\". Note that the support of abbreviations, such as\n     * \"PST\", is for JDK 1.1.x compatibility only and full names should be used.\n     * @param type Time zone type, either <code>TIMEZONE_ICU</code> or\n     * <code>TIMEZONE_JDK</code>.\n     * @return the specified <code>TimeZone</code>, or a mutable clone of the UNKNOWN_ZONE if the given ID\n     * cannot be understood or if the given ID is \"Etc/Unknown\".\n     * @see #UNKNOWN_ZONE\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TimeZone getTimeZone(String id, int type, boolean frozen)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the <code>TimeZone</code> for the given ID and the timezone type.\n     * @param id time zone ID\n     * @param type time zone implementation type, TIMEZONE_JDK or TIMEZONE_ICU\n     * @param frozen specify if the returned object can be frozen\n     * @return the specified <code>TimeZone</code> or UNKNOWN_ZONE if the given ID\n     * cannot be understood.\n     ",
    "links" : [ ]
  }, {
    "name" : " static BasicTimeZone getFrozenICUTimeZone(String id, boolean trySystem)",
    "returnType" : "BasicTimeZone",
    "comment" : "\n     * Returns a frozen ICU type TimeZone object given a time zone ID.\n     * @param id the time zone ID\n     * @param trySystem if true tries the system time zones first otherwise skip to the\n     *   custom time zones.\n     * @return the frozen ICU TimeZone or null if one could not be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setDefaultTimeZoneType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default time zone type used by <code>getTimeZone</code>.\n     * @param type time zone type, either <code>TIMEZONE_ICU</code> or\n     * <code>TIMEZONE_JDK</code>.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultTimeZoneType()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns the default time zone type currently used.\n     * @return The default time zone type, either <code>TIMEZONE_ICU</code> or\n     * <code>TIMEZONE_JDK</code>.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getAvailableIDs(SystemTimeZoneType zoneType, String region, Integer rawOffset)",
    "returnType" : "Set<String>",
    "comment" : "\n     * <strong>[icu]</strong> Returns a set of time zone ID strings with the given filter conditions.\n     * <p><b>Note:</b>A <code>Set</code> returned by this method is\n     * immutable.\n     * @param zoneType      The system time zone type.\n     * @param region        The ISO 3166 two-letter country code or UN M.49 three-digit area code.\n     *                      When null, no filtering done by region.\n     * @param rawOffset     An offset from GMT in milliseconds, ignoring the effect of daylight savings\n     *                      time, if any. When null, no filtering done by zone offset.\n     * @return an immutable set of system time zone IDs.\n     * @see SystemTimeZoneType\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAvailableIDs(int rawOffset)",
    "returnType" : "String[]",
    "comment" : "\n     * Return a new String array containing all system TimeZone IDs\n     * with the given raw offset from GMT.  These IDs may be passed to\n     * <code>get()</code> to construct the corresponding TimeZone\n     * object.\n     * @param rawOffset the offset in milliseconds from GMT\n     * @return an array of IDs for system TimeZones with the given\n     * raw offset.  If there are none, return a zero-length array.\n     * @see #getAvailableIDs(SystemTimeZoneType, String, Integer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAvailableIDs(String country)",
    "returnType" : "String[]",
    "comment" : "\n     * Return a new String array containing all system TimeZone IDs\n     * associated with the given country.  These IDs may be passed to\n     * <code>get()</code> to construct the corresponding TimeZone\n     * object.\n     * @param country a two-letter ISO 3166 country code, or <code>null</code>\n     * to return zones not associated with any country\n     * @return an array of IDs for system TimeZones in the given\n     * country.  If there are none, return a zero-length array.\n     * @see #getAvailableIDs(SystemTimeZoneType, String, Integer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAvailableIDs()",
    "returnType" : "String[]",
    "comment" : "\n     * Return a new String array containing all system TimeZone IDs.\n     * These IDs (and only these IDs) may be passed to\n     * <code>get()</code> to construct the corresponding TimeZone\n     * object.\n     * @return an array of all system TimeZone IDs\n     * @see #getAvailableIDs(SystemTimeZoneType, String, Integer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int countEquivalentIDs(String id)",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns the number of IDs in the equivalency group that\n     * includes the given ID.  An equivalency group contains zones\n     * that have the same GMT offset and rules.\n     *\n     * <p>The returned count includes the given ID; it is always &gt;= 1\n     * for valid IDs.  The given ID must be a system time zone.  If it\n     * is not, returns zero.\n     * @param id a system time zone ID\n     * @return the number of zones in the equivalency group containing\n     * 'id', or zero if 'id' is not a valid system ID\n     * @see #getEquivalentID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getEquivalentID(String id, int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns an ID in the equivalency group that\n     * includes the given ID.  An equivalency group contains zones\n     * that have the same GMT offset and rules.\n     *\n     * <p>The given index must be in the range 0..n-1, where n is the\n     * value returned by <code>countEquivalentIDs(id)</code>.  For\n     * some value of 'index', the returned value will be equal to the\n     * given id.  If the given id is not a valid system time zone, or\n     * if 'index' is out of range, then returns an empty string.\n     * @param id a system time zone ID\n     * @param index a value from 0 to n-1, where n is the value\n     * returned by <code>countEquivalentIDs(id)</code>\n     * @return the ID of the index-th zone in the equivalency group\n     * containing 'id', or an empty string if 'id' is not a valid\n     * system ID or 'index' is out of range\n     * @see #countEquivalentIDs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone forULocaleOrDefault(ULocale locale)",
    "returnType" : "TimeZone",
    "comment" : "\n     * If the locale contains the timezone keyword, creates a copy of that\n     * <code>TimeZone</code>.\n     * Otherwise, create the default <code>TimeZone</code>.\n     * @param locale a locale which may contains 'timezone' keyword/value.\n     * @return A <code>TimeZone</code>. Clients are responsible for deleting the\n     *   <code>TimeZone</code> object returned.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone forLocaleOrDefault(Locale locale)",
    "returnType" : "TimeZone",
    "comment" : "\n     * If the locale contains the timezone keyword, creates a copy of that\n     * <code>TimeZone</code>.\n     * Otherwise, create the default <code>TimeZone</code>.\n     * @param locale a locale which may contains 'timezone' keyword/value.\n     * @return A <code>TimeZone</code>. Clients are responsible for deleting the\n     *   <code>TimeZone</code> object returned.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone getDefault()",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the default <code>TimeZone</code> for this host.\n     * The source of the default <code>TimeZone</code>\n     * may vary with implementation.\n     * @return a default <code>TimeZone</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setDefault(TimeZone tz)",
    "returnType" : "void",
    "comment" : "\n     * Sets the <code>TimeZone</code> that is returned by the <code>getDefault</code>\n     * method. This method also sets a Java TimeZone equivalent to the input <code>tz</code>\n     * as the JVM's default time zone if not null. If <code>tz</code> is null, next\n     * {@link #getDefault()} method invocation will reset the default time zone\n     * synchronized with the JVM's default at that time.\n     *\n     * @param tz the new default time zone\n     * @hide unsupported on Android\n     ",
    "links" : [ "#getDefault()" ]
  }, {
    "name" : "public static synchronized void setICUDefault(TimeZone tz)",
    "returnType" : "void",
    "comment" : "\n     * Sets the <code>TimeZone</code> that is returned by the <code>getDefault</code>\n     * method. If <code>tz</code> is null, next {@link #getDefault()} method invocation\n     * will reset the default time zone synchronized with the JVM's default at that time.\n     * Unlike {@link #setDefault(TimeZone)}, this method does not change the JVM's\n     * default time zone.\n     *\n     * @param tz the new default time zone\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "#getDefault()", "#setDefault(TimeZone)" ]
  }, {
    "name" : "public boolean hasSameRules(TimeZone other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this zone has the same rule and offset as another zone.\n     * That is, if this zone differs only in ID, if at all.  Returns false\n     * if the other zone is null.\n     * @param other the <code>TimeZone</code> object to be compared with\n     * @return true if the other zone is not null and is the same as this one,\n     * with the possible exception of the ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides equals.\n     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Overrides hashCode.\n     * @return a hash code value for this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getTZDataVersion()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the time zone data version currently used by ICU.\n     *\n     * @return the version string, such as \"2007f\"\n     * @throws MissingResourceException if ICU time zone resource bundle\n     * is missing or the version information is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCanonicalID(String id)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the canonical system time zone ID or the normalized\n     * custom time zone ID for the given time zone ID.\n     * @param id The input time zone ID to be canonicalized.\n     * @return The canonical system time zone ID or the custom time zone ID\n     * in normalized format for the given time zone ID.  When the given time zone ID\n     * is neither a known system time zone ID nor a valid custom time zone ID,\n     * null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCanonicalID(String id, boolean[] isSystemID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the canonical system time zone ID or the normalized\n     * custom time zone ID for the given time zone ID.\n     * @param id The input time zone ID to be canonicalized.\n     * @param isSystemID When non-null boolean array is specified and\n     * the given ID is a known system time zone ID, true is set to <code>isSystemID[0]</code>\n     * @return The canonical system time zone ID or the custom time zone ID\n     * in normalized format for the given time zone ID.  When the given time zone ID\n     * is neither a known system time zone ID nor a valid custom time zone ID,\n     * null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getIanaID(String id)",
    "returnType" : "String",
    "comment" : "\n     * Returns the preferred time zone ID in the IANA database for the given time zone ID.\n     * There are two types of preferred IDs. The first type is the one defined in zone.tab file,\n     * such as \"America/Los_Angeles\". The second types is the one defined for zones not associated\n     * with a specific region, but not defined with \"Link\" syntax, such as \"Etc/GMT+10\".\n     *\n     * <p>Note: For most of system time zone IDs, this method returns an ID same as {@link TimeZone#getCanonicalID(String)}.\n     * {@link TimeZone#getCanonicalID(String)} is based on canonical time zone IDs defined in Unicode CLDR.\n     * These canonical time zone IDs in CLDR were based on very old version of the time zone database.\n     * In the IANA time zone database, some IDs were updated since then. This API returns a newer\n     * time zone ID. For example, CLDR defines \"Asia/Calcutta\" as the canonical time zone ID. This\n     * method returns \"Asia/Kolkata\" instead.\n     * <p> \"Etc/Unknown\" is a special time zone ID defined by CLDR. There are no corresponding zones\n     * in the IANA time zone database. when the input is \"Etc/Unknown\", this method returns \"Etc/Unknown\",\n     * but it really means no mappings available. Caller of this method should interpret \"Etc/Unknown\"\n     * as an error.\n     *\n     * @param id    The input time zone ID.\n     * @return  The preferred time zone ID in the IANA time zone database, or {@link TimeZone#UNKNOWN_ZONE_ID}\n     * if the input ID is not a system ID.\n     * @see #getCanonicalID(String)\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.impl.JavaTimeZone#UNKNOWN_ZONE_ID", "android.icu.impl.JavaTimeZone#getCanonicalID(String)" ]
  }, {
    "name" : "public static String getRegion(String id)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the region code associated with the given\n     * system time zone ID. The region code is either ISO 3166\n     * 2-letter country code or UN M.49 3-digit area code.\n     * When the time zone is not associated with a specific location,\n     * for example - \"Etc/UTC\", \"EST5EDT\", then this method returns\n     * \"001\" (UN M.49 area code for World).\n     * @param id the system time zone ID.\n     * @return the region code associated with the given\n     * system time zone ID.\n     * @throws IllegalArgumentException if <code>id</code> is not a known system ID.\n     * @see #getAvailableIDs(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getWindowsID(String id)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Converts a system time zone ID to an equivalent Windows time zone ID. For example,\n     * Windows time zone ID \"Pacific Standard Time\" is returned for input \"America/Los_Angeles\".\n     *\n     * <p>There are system time zones that cannot be mapped to Windows zones. When the input\n     * system time zone ID is unknown or unmappable to a Windows time zone, then this\n     * method returns <code>null</code>.\n     *\n     * <p>This implementation utilizes <a href=\"http://unicode.org/cldr/charts/supplemental/zone_tzid.html\">\n     * Zone-Tzid mapping data</a>. The mapping data is updated time to time. To get the latest changes,\n     * please read the ICU user guide section <a href=\"https://unicode-org.github.io/icu/userguide/datetime/timezone#updating-the-time-zone-data\">\n     * Updating the Time Zone Data</a>.\n     *\n     * @param id A system time zone ID\n     * @return A Windows time zone ID mapped from the input system time zone ID,\n     * or <code>null</code> when the input ID is unknown or unmappable.\n     * @see #getIDForWindowsID(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getIDForWindowsID(String winid, String region)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Converts a Windows time zone ID to an equivalent system time zone ID\n     * for a region. For example, system time zone ID \"America/Los_Angeles\" is returned\n     * for input Windows ID \"Pacific Standard Time\" and region \"US\" (or <code>null</code>),\n     * \"America/Vancouver\" is returned for the same Windows ID \"Pacific Standard Time\" and\n     * region \"CA\".\n     *\n     * <p>Not all Windows time zones can be mapped to system time zones. When the input\n     * Windows time zone ID is unknown or unmappable to a system time zone, then this\n     * method returns <code>null</code>.\n     *\n     * <p>This implementation utilizes <a href=\"http://unicode.org/cldr/charts/supplemental/zone_tzid.html\">\n     * Zone-Tzid mapping data</a>. The mapping data is updated time to time. To get the latest changes,\n     * please read the ICU user guide section <a href=\"https://unicode-org.github.io/icu/userguide/datetime/timezone#updating-the-time-zone-data\">\n     * Updating the Time Zone Data</a>.\n     *\n     * @param winid A Windows time zone ID\n     * @param region A region code, or <code>null</code> if no regional preference.\n     * @return A system time zone ID mapped from the input Windows time zone ID,\n     * or <code>null</code> when the input ID is unknown or unmappable.\n     * @see #getWindowsID(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone freeze()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone cloneAsThawed()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)", "public int getOffset(long date)", "public void getOffset(long date, boolean local, int[] offsets)", "public abstract void setRawOffset(int offsetMillis)", "public abstract int getRawOffset()", "public String getID()", "public void setID(String ID)", "public final String getDisplayName()", "public final String getDisplayName(Locale locale)", "public final String getDisplayName(ULocale locale)", "public final String getDisplayName(boolean daylight, int style)", "public String getDisplayName(boolean daylight, int style, Locale locale)", "public String getDisplayName(boolean daylight, int style, ULocale locale)", "private String _getDisplayName(int style, boolean daylight, ULocale locale)", "public int getDSTSavings()", "public abstract boolean useDaylightTime()", "public boolean observesDaylightTime()", "public abstract boolean inDaylightTime(Date date)", "public static TimeZone getTimeZone(String ID)", "public static TimeZone getFrozenTimeZone(String ID)", "public static TimeZone getTimeZone(String ID, int type)", "private static TimeZone getTimeZone(String id, int type, boolean frozen)", " static BasicTimeZone getFrozenICUTimeZone(String id, boolean trySystem)", "public static synchronized void setDefaultTimeZoneType(int type)", "public static int getDefaultTimeZoneType()", "public static Set<String> getAvailableIDs(SystemTimeZoneType zoneType, String region, Integer rawOffset)", "public static String[] getAvailableIDs(int rawOffset)", "public static String[] getAvailableIDs(String country)", "public static String[] getAvailableIDs()", "public static int countEquivalentIDs(String id)", "public static String getEquivalentID(String id, int index)", "public static TimeZone forULocaleOrDefault(ULocale locale)", "public static TimeZone forLocaleOrDefault(Locale locale)", "public static TimeZone getDefault()", "public static synchronized void setDefault(TimeZone tz)", "public static synchronized void setICUDefault(TimeZone tz)", "public boolean hasSameRules(TimeZone other)", "public Object clone()", "public boolean equals(Object obj)", "public int hashCode()", "public static String getTZDataVersion()", "public static String getCanonicalID(String id)", "public static String getCanonicalID(String id, boolean[] isSystemID)", "public static String getIanaID(String id)", "public static String getRegion(String id)", "public static String getWindowsID(String id)", "public static String getIDForWindowsID(String winid, String region)", "public boolean isFrozen()", "public TimeZone freeze()", "public TimeZone cloneAsThawed()" ],
  "variableNames" : [ "LOGGER", "serialVersionUID", "TIMEZONE_ICU", "TIMEZONE_JDK", "SHORT", "LONG", "SHORT_GENERIC", "LONG_GENERIC", "SHORT_GMT", "LONG_GMT", "SHORT_COMMONLY_USED", "GENERIC_LOCATION", "UNKNOWN_ZONE_ID", "GMT_ZONE_ID", "UNKNOWN_ZONE", "GMT_ZONE", "ID", "defaultZone", "TZ_IMPL", "TZIMPL_CONFIG_KEY", "TZIMPL_CONFIG_ICU", "TZIMPL_CONFIG_JDK" ]
}