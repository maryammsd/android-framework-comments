{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/BroadcastReceiver.java",
  "packageName" : "android.content",
  "className" : "PendingResult",
  "comment" : "\n     * State for a result that is pending for a broadcast receiver.  Returned\n     * by {@link BroadcastReceiver#goAsync() goAsync()}\n     * while in {@link BroadcastReceiver#onReceive BroadcastReceiver.onReceive()}.\n     * This allows you to return from onReceive() without having the broadcast\n     * terminate; you must call {@link #finish()} once you are done with the\n     * broadcast.  This allows you to process the broadcast off of the main\n     * thread of your app.\n     *\n     * <p>Note on threading: the state inside of this class is not itself\n     * thread-safe, however you can use it from any thread if you properly\n     * sure that you do not have races.  Typically this means you will hand\n     * the entire object to another thread, which will be solely responsible\n     * for setting any results and finally calling {@link #finish()}.\n     ",
  "variables" : [ {
    "name" : "TYPE_COMPONENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_REGISTERED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNREGISTERED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrderedHint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialStickyHint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSendingUser",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultData",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAbortBroadcast",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void setResultCode(int code)",
    "returnType" : "void",
    "comment" : "\n         * Version of {@link BroadcastReceiver#setResultCode(int)\n         * BroadcastReceiver.setResultCode(int)} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#setResultCode" ]
  }, {
    "name" : "public final int getResultCode()",
    "returnType" : "int",
    "comment" : "\n         * Version of {@link BroadcastReceiver#getResultCode()\n         * BroadcastReceiver.getResultCode()} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#getResultCode" ]
  }, {
    "name" : "public final void setResultData(String data)",
    "returnType" : "void",
    "comment" : "\n         * Version of {@link BroadcastReceiver#setResultData(String)\n         * BroadcastReceiver.setResultData(String)} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#setResultData" ]
  }, {
    "name" : "public final String getResultData()",
    "returnType" : "String",
    "comment" : "\n         * Version of {@link BroadcastReceiver#getResultData()\n         * BroadcastReceiver.getResultData()} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#getResultData" ]
  }, {
    "name" : "public final void setResultExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Version of {@link BroadcastReceiver#setResultExtras(Bundle)\n         * BroadcastReceiver.setResultExtras(Bundle)} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#setResultExtras" ]
  }, {
    "name" : "public final Bundle getResultExtras(boolean makeMap)",
    "returnType" : "Bundle",
    "comment" : "\n         * Version of {@link BroadcastReceiver#getResultExtras(boolean)\n         * BroadcastReceiver.getResultExtras(boolean)} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#getResultExtras" ]
  }, {
    "name" : "public final void setResult(int code, String data, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Version of {@link BroadcastReceiver#setResult(int, String, Bundle)\n         * BroadcastReceiver.setResult(int, String, Bundle)} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#setResult" ]
  }, {
    "name" : "public final boolean getAbortBroadcast()",
    "returnType" : "boolean",
    "comment" : "\n         * Version of {@link BroadcastReceiver#getAbortBroadcast()\n         * BroadcastReceiver.getAbortBroadcast()} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#getAbortBroadcast" ]
  }, {
    "name" : "public final void abortBroadcast()",
    "returnType" : "void",
    "comment" : "\n         * Version of {@link BroadcastReceiver#abortBroadcast()\n         * BroadcastReceiver.abortBroadcast()} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#abortBroadcast" ]
  }, {
    "name" : "public final void clearAbortBroadcast()",
    "returnType" : "void",
    "comment" : "\n         * Version of {@link BroadcastReceiver#clearAbortBroadcast()\n         * BroadcastReceiver.clearAbortBroadcast()} for\n         * asynchronous broadcast handling.\n         ",
    "links" : [ "BroadcastReceiver#clearAbortBroadcast" ]
  }, {
    "name" : "public final void finish()",
    "returnType" : "void",
    "comment" : "\n         * Finish the broadcast.  The current result will be sent and the\n         * next broadcast will proceed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setExtrasClassLoader(ClassLoader cl)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendFinished(IActivityManager am)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getSendingUserId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void checkSynchronousHint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_COMPONENT", "TYPE_REGISTERED", "TYPE_UNREGISTERED", "mType", "mOrderedHint", "mInitialStickyHint", "mToken", "mSendingUser", "mFlags", "mResultCode", "mResultData", "mResultExtras", "mAbortBroadcast", "mFinished" ],
  "methodNames" : [ "public final void setResultCode(int code)", "public final int getResultCode()", "public final void setResultData(String data)", "public final String getResultData()", "public final void setResultExtras(Bundle extras)", "public final Bundle getResultExtras(boolean makeMap)", "public final void setResult(int code, String data, Bundle extras)", "public final boolean getAbortBroadcast()", "public final void abortBroadcast()", "public final void clearAbortBroadcast()", "public final void finish()", "public void setExtrasClassLoader(ClassLoader cl)", "public void sendFinished(IActivityManager am)", "public int getSendingUserId()", " void checkSynchronousHint()" ]
}