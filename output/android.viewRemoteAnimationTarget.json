{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/RemoteAnimationTarget.java",
  "packageName" : "android.view",
  "className" : "RemoteAnimationTarget",
  "comment" : "\n * Describes an activity to be animated as part of a remote animation.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "MODE_OPENING",
    "type" : "int",
    "comment" : "\n     * The app is in the set of opening apps of this transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_CLOSING",
    "type" : "int",
    "comment" : "\n     * The app is in the set of closing apps of this transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_CHANGING",
    "type" : "int",
    "comment" : "\n     * The app is in the set of resizing apps (eg. mode change) of this transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "int",
    "comment" : "\n     * The {@link Mode} to describe whether this app is opening or closing.\n     ",
    "links" : [ "Mode" ]
  }, {
    "name" : "taskId",
    "type" : "int",
    "comment" : "\n     * The id of the task this app belongs to.\n     ",
    "links" : [ ]
  }, {
    "name" : "leash",
    "type" : "SurfaceControl",
    "comment" : "\n     * The {@link SurfaceControl} object to actually control the transform of the app.\n     ",
    "links" : [ "SurfaceControl" ]
  }, {
    "name" : "startLeash",
    "type" : "SurfaceControl",
    "comment" : "\n     * The {@link SurfaceControl} for the starting state of a target if this transition is\n     * MODE_CHANGING, {@code null)} otherwise. This is relative to the app window.\n     ",
    "links" : [ "SurfaceControl" ]
  }, {
    "name" : "isTranslucent",
    "type" : "boolean",
    "comment" : "\n     * Whether the app is translucent and may reveal apps behind.\n     ",
    "links" : [ ]
  }, {
    "name" : "clipRect",
    "type" : "Rect",
    "comment" : "\n     * The clip rect window manager applies when clipping the app's main surface in screen space\n     * coordinates. This is just a hint to the animation runner: If running a clip-rect animation,\n     * anything that extends beyond these bounds will not have any effect. This implies that any\n     * clip-rect animation should likely stop at these bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "contentInsets",
    "type" : "Rect",
    "comment" : "\n     * The insets of the main app window.\n     ",
    "links" : [ ]
  }, {
    "name" : "prefixOrderIndex",
    "type" : "int",
    "comment" : "\n     * The index of the element in the tree in prefix order. This should be used for z-layering\n     * to preserve original z-layer order in the hierarchy tree assuming no \"boosting\" needs to\n     * happen.\n     ",
    "links" : [ ]
  }, {
    "name" : "position",
    "type" : "Point",
    "comment" : "\n     * The source position of the app, in screen spaces coordinates. If the position of the leash\n     * is modified from the controlling app, any animation transform needs to be offset by this\n     * amount.\n     * @deprecated Use {@link #localBounds} instead.\n     ",
    "links" : [ "#localBounds" ]
  }, {
    "name" : "localBounds",
    "type" : "Rect",
    "comment" : "\n     * Bounds of the target relative to its parent.\n     * When the app target animating on its parent, we need to use the local coordinates relative to\n     * its parent with {@code localBounds.left} & {@code localBounds.top} rather than using\n     * {@code position} in screen coordinates.\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceContainerBounds",
    "type" : "Rect",
    "comment" : "\n     * The bounds of the source container the app lives in, in screen space coordinates. If the crop\n     * of the leash is modified from the controlling app, it needs to take the source container\n     * bounds into account when calculating the crop.\n     * @deprecated Renamed to {@link #screenSpaceBounds}\n     ",
    "links" : [ "#screenSpaceBounds" ]
  }, {
    "name" : "screenSpaceBounds",
    "type" : "Rect",
    "comment" : "\n     * Bounds of the target relative to the screen. If the crop of the leash is modified from the\n     * controlling app, it needs to take the screen space bounds into account when calculating the\n     * crop.\n     ",
    "links" : [ ]
  }, {
    "name" : "startBounds",
    "type" : "Rect",
    "comment" : "\n     * The starting bounds of the source container in screen space coordinates. This is {@code null}\n     * if the animation target isn't MODE_CHANGING. Since this is the starting bounds, it's size\n     * should be equivalent to the size of the starting thumbnail. Note that sourceContainerBounds\n     * is the end bounds of a change transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "windowConfiguration",
    "type" : "WindowConfiguration",
    "comment" : "\n     * The window configuration for the target.\n     ",
    "links" : [ ]
  }, {
    "name" : "isNotInRecents",
    "type" : "boolean",
    "comment" : "\n     * Whether the task is not presented in Recents UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RemoteAnimationTarget>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MODE_OPENING", "MODE_CLOSING", "MODE_CHANGING", "mode", "taskId", "leash", "startLeash", "isTranslucent", "clipRect", "contentInsets", "prefixOrderIndex", "position", "localBounds", "sourceContainerBounds", "screenSpaceBounds", "startBounds", "windowConfiguration", "isNotInRecents", "CREATOR" ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void dump(PrintWriter pw, String prefix)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)" ]
}