{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AudioDeviceInfo.java",
  "packageName" : "android.media",
  "className" : "AudioDeviceInfo",
  "comment" : "\n * Class to provide information about the audio devices.\n ",
  "variables" : [ {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * A device type associated with an unknown or uninitialized device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_EARPIECE",
    "type" : "int",
    "comment" : "\n     * A device type describing the attached earphone speaker.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_SPEAKER",
    "type" : "int",
    "comment" : "\n     * A device type describing the speaker system (i.e. a mono speaker or stereo speakers) built\n     * in a device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WIRED_HEADSET",
    "type" : "int",
    "comment" : "\n     * A device type describing a headset, which is the combination of a headphones and microphone.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WIRED_HEADPHONES",
    "type" : "int",
    "comment" : "\n     * A device type describing a pair of wired headphones.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LINE_ANALOG",
    "type" : "int",
    "comment" : "\n     * A device type describing an analog line-level connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LINE_DIGITAL",
    "type" : "int",
    "comment" : "\n     * A device type describing a digital line connection (e.g. SPDIF).\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BLUETOOTH_SCO",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth device typically used for telephony.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BLUETOOTH_A2DP",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth device supporting the A2DP profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HDMI",
    "type" : "int",
    "comment" : "\n     * A device type describing an HDMI connection .\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HDMI_ARC",
    "type" : "int",
    "comment" : "\n     * A device type describing the Audio Return Channel of an HDMI connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB_DEVICE",
    "type" : "int",
    "comment" : "\n     * A device type describing a USB audio device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * A device type describing a USB audio device in accessory mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOCK",
    "type" : "int",
    "comment" : "\n     * A device type describing the audio device associated with a dock.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FM",
    "type" : "int",
    "comment" : "\n     * A device type associated with the transmission of audio signals over FM.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_MIC",
    "type" : "int",
    "comment" : "\n     * A device type describing the microphone(s) built in a device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FM_TUNER",
    "type" : "int",
    "comment" : "\n     * A device type for accessing the audio content transmitted over FM.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TV_TUNER",
    "type" : "int",
    "comment" : "\n     * A device type for accessing the audio content transmitted over the TV tuner system.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TELEPHONY",
    "type" : "int",
    "comment" : "\n     * A device type describing the transmission of audio signals over the telephony network.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_AUX_LINE",
    "type" : "int",
    "comment" : "\n     * A device type describing the auxiliary line-level connectors.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IP",
    "type" : "int",
    "comment" : "\n     * A device type connected over IP.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUS",
    "type" : "int",
    "comment" : "\n     * A type-agnostic device used for communication with external audio systems\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB_HEADSET",
    "type" : "int",
    "comment" : "\n     * A device type describing a USB audio headset.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HEARING_AID",
    "type" : "int",
    "comment" : "\n     * A device type describing a Hearing Aid.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_SPEAKER_SAFE",
    "type" : "int",
    "comment" : "\n     * A device type describing the speaker system (i.e. a mono speaker or stereo speakers) built\n     * in a device, that is specifically tuned for outputting sounds like notifications and alarms\n     * (i.e. sounds the user couldn't necessarily anticipate).\n     * <p>Note that this physical audio device may be the same as {@link #TYPE_BUILTIN_SPEAKER}\n     * but is driven differently to safely accommodate the different use case.</p>\n     ",
    "links" : [ "#TYPE_BUILTIN_SPEAKER" ]
  }, {
    "name" : "TYPE_REMOTE_SUBMIX",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A device type for rerouting audio within the Android framework between mixes and\n     * system applications. Typically created when using\n     * {@link android.media.audiopolicy.AudioPolicy} for mixes created with the\n     * {@link android.media.audiopolicy.AudioMix#ROUTE_FLAG_RENDER} flag.\n     ",
    "links" : [ "android.media.audiopolicy.AudioMix#ROUTE_FLAG_RENDER", "android.media.audiopolicy.AudioPolicy" ]
  }, {
    "name" : "mPort",
    "type" : "AudioDevicePort",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INT_TO_EXT_DEVICE_MAPPING",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXT_TO_INT_DEVICE_MAPPING",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isValidAudioDeviceTypeOut(int type)",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static boolean isValidAudioDeviceTypeIn(int type)",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public static void enforceValidAudioDeviceTypeOut(int type)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Throws IAE on an invalid output device type\n     * @param type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enforceValidAudioDeviceTypeIn(int type)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Throws IAE on an invalid input device type\n     * @param type\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioDevicePort getPort()",
    "returnType" : "AudioDevicePort",
    "comment" : "\n     * @hide\n     * @return The underlying {@link AudioDevicePort} instance.\n     ",
    "links" : [ "android.media.AudioDevicePort" ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * @return The internal device ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getProductName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return The human-readable name of the audio device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAddress()",
    "returnType" : "String",
    "comment" : "\n     * @return The \"address\" string of the device. This generally contains device-specific\n     * parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSource()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the audio device is a source for audio data (e.e an input).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSink()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the audio device is a sink for audio data (i.e. an output).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSampleRates()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of sample rates supported by the audio device.\n     *\n     * Note: an empty array indicates that the device supports arbitrary rates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getChannelMasks()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of channel position masks (e.g. {@link AudioFormat#CHANNEL_IN_STEREO},\n     * {@link AudioFormat#CHANNEL_OUT_7POINT1}) for which this audio device can be configured.\n     *\n     * @see AudioFormat\n     *\n     * Note: an empty array indicates that the device supports arbitrary channel masks.\n     ",
    "links" : [ "android.media.AudioFormat#CHANNEL_IN_STEREO", "android.media.AudioFormat#CHANNEL_OUT_7POINT1" ]
  }, {
    "name" : "public int[] getChannelIndexMasks()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of channel index masks for which this audio device can be configured.\n     *\n     * @see AudioFormat\n     *\n     * Note: an empty array indicates that the device supports arbitrary channel index masks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getChannelCounts()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of channel counts (1, 2, 4, ...) for which this audio device\n     * can be configured.\n     *\n     * Note: an empty array indicates that the device supports arbitrary channel counts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getEncodings()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of audio encodings (e.g. {@link AudioFormat#ENCODING_PCM_16BIT},\n     * {@link AudioFormat#ENCODING_PCM_FLOAT}) supported by the audio device.\n     * <code>ENCODING_PCM_FLOAT</code> indicates the device supports more\n     * than 16 bits of integer precision.  As there is no AudioFormat constant\n     * specifically defined for 24-bit PCM, the value <code>ENCODING_PCM_FLOAT</code>\n     * indicates that {@link AudioTrack} or {@link AudioRecord} can preserve at least 24 bits of\n     * integer precision to that device.\n     *\n     * @see AudioFormat\n     *\n     * Note: an empty array indicates that the device supports arbitrary encodings.\n     ",
    "links" : [ "android.media.AudioFormat#ENCODING_PCM_FLOAT", "android.media.AudioRecord", "android.media.AudioTrack", "android.media.AudioFormat#ENCODING_PCM_16BIT" ]
  }, {
    "name" : "public int[] getEncapsulationModes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array of supported encapsulation modes for the device.\n     *\n     * The array can include any of the {@code AudioTrack} encapsulation modes,\n     * e.g. {@link AudioTrack#ENCAPSULATION_MODE_ELEMENTARY_STREAM}.\n     *\n     * @return An array of supported encapsulation modes for the device.  This\n     *     may be an empty array if no encapsulation modes are supported.\n     ",
    "links" : [ "android.media.AudioTrack#ENCAPSULATION_MODE_ELEMENTARY_STREAM" ]
  }, {
    "name" : "public int[] getEncapsulationMetadataTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array of supported encapsulation metadata types for the device.\n     *\n     * The metadata type returned should be allowed for all encapsulation modes supported\n     * by the device.  Some metadata types may apply only to certain\n     * compressed stream formats, the returned list is the union of subsets.\n     *\n     * The array can include any of\n     * {@link AudioTrack#ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER},\n     * {@link AudioTrack#ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR}.\n     *\n     * @return An array of supported encapsulation metadata types for the device.  This\n     *     may be an empty array if no metadata types are supported.\n     ",
    "links" : [ "android.media.AudioTrack#ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER", "android.media.AudioTrack#ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * @return The device type identifier of the audio device (i.e. TYPE_BUILTIN_SPEAKER).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertDeviceTypeToInternalDevice(int deviceType)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int convertInternalDeviceToDeviceType(int intDevice)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_UNKNOWN", "TYPE_BUILTIN_EARPIECE", "TYPE_BUILTIN_SPEAKER", "TYPE_WIRED_HEADSET", "TYPE_WIRED_HEADPHONES", "TYPE_LINE_ANALOG", "TYPE_LINE_DIGITAL", "TYPE_BLUETOOTH_SCO", "TYPE_BLUETOOTH_A2DP", "TYPE_HDMI", "TYPE_HDMI_ARC", "TYPE_USB_DEVICE", "TYPE_USB_ACCESSORY", "TYPE_DOCK", "TYPE_FM", "TYPE_BUILTIN_MIC", "TYPE_FM_TUNER", "TYPE_TV_TUNER", "TYPE_TELEPHONY", "TYPE_AUX_LINE", "TYPE_IP", "TYPE_BUS", "TYPE_USB_HEADSET", "TYPE_HEARING_AID", "TYPE_BUILTIN_SPEAKER_SAFE", "TYPE_REMOTE_SUBMIX", "mPort", "INT_TO_EXT_DEVICE_MAPPING", "EXT_TO_INT_DEVICE_MAPPING" ],
  "methodNames" : [ " static boolean isValidAudioDeviceTypeOut(int type)", " static boolean isValidAudioDeviceTypeIn(int type)", "public static void enforceValidAudioDeviceTypeOut(int type)", "public static void enforceValidAudioDeviceTypeIn(int type)", "public boolean equals(Object o)", "public int hashCode()", "public AudioDevicePort getPort()", "public int getId()", "public CharSequence getProductName()", "public String getAddress()", "public boolean isSource()", "public boolean isSink()", "public int[] getSampleRates()", "public int[] getChannelMasks()", "public int[] getChannelIndexMasks()", "public int[] getChannelCounts()", "public int[] getEncodings()", "public int[] getEncapsulationModes()", "public int[] getEncapsulationMetadataTypes()", "public int getType()", "public static int convertDeviceTypeToInternalDevice(int deviceType)", "public static int convertInternalDeviceToDeviceType(int intDevice)" ]
}