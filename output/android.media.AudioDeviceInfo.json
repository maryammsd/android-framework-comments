{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioDeviceInfo.java",
  "packageName" : "android.media",
  "className" : "AudioDeviceInfo",
  "comment" : "\n * Provides information about an audio device.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * A device type associated with an unknown or uninitialized device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_EARPIECE",
    "type" : "int",
    "comment" : "\n     * A device type describing the attached earphone speaker.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_SPEAKER",
    "type" : "int",
    "comment" : "\n     * A device type describing the speaker system (i.e. a mono speaker or stereo speakers) built\n     * in a device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WIRED_HEADSET",
    "type" : "int",
    "comment" : "\n     * A device type describing a headset, which is the combination of a headphones and microphone.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WIRED_HEADPHONES",
    "type" : "int",
    "comment" : "\n     * A device type describing a pair of wired headphones.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LINE_ANALOG",
    "type" : "int",
    "comment" : "\n     * A device type describing an analog line-level connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LINE_DIGITAL",
    "type" : "int",
    "comment" : "\n     * A device type describing a digital line connection (e.g. SPDIF).\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BLUETOOTH_SCO",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth device typically used for telephony.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BLUETOOTH_A2DP",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth device supporting the A2DP profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HDMI",
    "type" : "int",
    "comment" : "\n     * A device type describing an HDMI connection .\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HDMI_ARC",
    "type" : "int",
    "comment" : "\n     * A device type describing the Audio Return Channel of an HDMI connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB_DEVICE",
    "type" : "int",
    "comment" : "\n     * A device type describing a USB audio device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * A device type describing a USB audio device in accessory mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOCK",
    "type" : "int",
    "comment" : "\n     * A device type describing the audio device associated with a dock.\n     * Starting at API 34, this device type only represents digital docks, while docks with an\n     * analog connection are represented with {@link #TYPE_DOCK_ANALOG}.\n     * @see #TYPE_DOCK_ANALOG\n     ",
    "links" : [ "#TYPE_DOCK_ANALOG" ]
  }, {
    "name" : "TYPE_FM",
    "type" : "int",
    "comment" : "\n     * A device type associated with the transmission of audio signals over FM.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_MIC",
    "type" : "int",
    "comment" : "\n     * A device type describing the microphone(s) built in a device.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FM_TUNER",
    "type" : "int",
    "comment" : "\n     * A device type for accessing the audio content transmitted over FM.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TV_TUNER",
    "type" : "int",
    "comment" : "\n     * A device type for accessing the audio content transmitted over the TV tuner system.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TELEPHONY",
    "type" : "int",
    "comment" : "\n     * A device type describing the transmission of audio signals over the telephony network.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_AUX_LINE",
    "type" : "int",
    "comment" : "\n     * A device type describing the auxiliary line-level connectors.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IP",
    "type" : "int",
    "comment" : "\n     * A device type connected over IP.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUS",
    "type" : "int",
    "comment" : "\n     * A type-agnostic device used for communication with external audio systems\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB_HEADSET",
    "type" : "int",
    "comment" : "\n     * A device type describing a USB audio headset.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HEARING_AID",
    "type" : "int",
    "comment" : "\n     * A device type describing a Hearing Aid.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUILTIN_SPEAKER_SAFE",
    "type" : "int",
    "comment" : "\n     * A device type describing the speaker system (i.e. a mono speaker or stereo speakers) built\n     * in a device, that is specifically tuned for outputting sounds like notifications and alarms\n     * (i.e. sounds the user couldn't necessarily anticipate).\n     * <p>Note that this physical audio device may be the same as {@link #TYPE_BUILTIN_SPEAKER}\n     * but is driven differently to safely accommodate the different use case.</p>\n     ",
    "links" : [ "#TYPE_BUILTIN_SPEAKER" ]
  }, {
    "name" : "TYPE_REMOTE_SUBMIX",
    "type" : "int",
    "comment" : " {@link android.media.audiopolicy.AudioMix#ROUTE_FLAG_LOOP_BACK} flag.",
    "links" : [ "android.media.audiopolicy.AudioMix#ROUTE_FLAG_LOOP_BACK" ]
  }, {
    "name" : "TYPE_BLE_HEADSET",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth Low Energy (BLE) audio headset or headphones.\n     * Headphones are grouped with headsets when the device is a sink:\n     * the features of headsets and headphones with regard to playback are the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BLE_SPEAKER",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth Low Energy (BLE) audio speaker.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ECHO_REFERENCE",
    "type" : "int",
    "comment" : "\n     * A device type describing an Echo Canceller loopback Reference.\n     * This device is only used when capturing with MediaRecorder.AudioSource.ECHO_REFERENCE,\n     * which requires privileged permission\n     * {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT}.\n     * @hide ",
    "links" : [ "android.Manifest.permission#CAPTURE_AUDIO_OUTPUT" ]
  }, {
    "name" : "TYPE_HDMI_EARC",
    "type" : "int",
    "comment" : "\n     * A device type describing the Enhanced Audio Return Channel of an HDMI connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BLE_BROADCAST",
    "type" : "int",
    "comment" : "\n     * A device type describing a Bluetooth Low Energy (BLE) broadcast group.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOCK_ANALOG",
    "type" : "int",
    "comment" : "\n     * A device type describing the audio device associated with a dock using an analog connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPort",
    "type" : "AudioDevicePort",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INT_TO_EXT_DEVICE_MAPPING",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXT_TO_INT_DEVICE_MAPPING",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXT_TO_INT_INPUT_DEVICE_MAPPING",
    "type" : "SparseIntArray",
    "comment" : "\n     * EXT_TO_INT_INPUT_DEVICE_MAPPING aims at mapping external device type to internal input device\n     * type.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isValidAudioDeviceTypeOut(int type)",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static boolean isValidAudioDeviceTypeIn(int type)",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public static void enforceValidAudioDeviceTypeOut(int type)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Enforces whether the audio device type is acceptable for output.\n     *\n     * A vendor implemented output type should modify isValidAudioDeviceTypeOut()\n     * appropriately to accept the new type.  Do not remove already acceptable types.\n     *\n     * @throws IllegalArgumentException on an invalid output device type.\n     * @param type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enforceValidAudioDeviceTypeIn(int type)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Enforces whether the audio device type is acceptable for input.\n     *\n     * A vendor implemented input type should modify isValidAudioDeviceTypeIn()\n     * appropriately to accept the new type.  Do not remove already acceptable types.\n     *\n     * @throws IllegalArgumentException on an invalid input device type.\n     * @param type\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioDevicePort getPort()",
    "returnType" : "AudioDevicePort",
    "comment" : "\n     * @hide\n     * @return The underlying {@link AudioDevicePort} instance.\n     ",
    "links" : [ "android.media.AudioDevicePort" ]
  }, {
    "name" : "public int getInternalType()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @return the internal device type\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * @return The internal device ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getProductName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return The human-readable name of the audio device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAddress()",
    "returnType" : "String",
    "comment" : "\n     * @return The \"address\" string of the device. This generally contains device-specific\n     * parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSource()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the audio device is a source for audio data (e.e an input).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSink()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the audio device is a sink for audio data (i.e. an output).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSampleRates()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of sample rates supported by the audio device.\n     *\n     * Note: an empty array indicates that the device supports arbitrary rates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getChannelMasks()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of channel position masks (e.g. {@link AudioFormat#CHANNEL_IN_STEREO},\n     * {@link AudioFormat#CHANNEL_OUT_7POINT1}) for which this audio device can be configured.\n     *\n     * @see AudioFormat\n     *\n     * Note: an empty array indicates that the device supports arbitrary channel masks.\n     ",
    "links" : [ "android.media.AudioFormat#CHANNEL_IN_STEREO", "android.media.AudioFormat#CHANNEL_OUT_7POINT1" ]
  }, {
    "name" : "public int[] getChannelIndexMasks()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of channel index masks for which this audio device can be configured.\n     *\n     * @see AudioFormat\n     *\n     * Note: an empty array indicates that the device supports arbitrary channel index masks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getChannelCounts()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of channel counts (1, 2, 4, ...) for which this audio device\n     * can be configured.\n     *\n     * Note: an empty array indicates that the device supports arbitrary channel counts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getEncodings()",
    "returnType" : "int[]",
    "comment" : "\n     * @return An array of audio encodings (e.g. {@link AudioFormat#ENCODING_PCM_16BIT},\n     * {@link AudioFormat#ENCODING_PCM_FLOAT}) supported by the audio device.\n     * <code>ENCODING_PCM_FLOAT</code> indicates the device supports more\n     * than 16 bits of integer precision.  As there is no AudioFormat constant\n     * specifically defined for 24-bit PCM, the value <code>ENCODING_PCM_FLOAT</code>\n     * indicates that {@link AudioTrack} or {@link AudioRecord} can preserve at least 24 bits of\n     * integer precision to that device.\n     *\n     * @see AudioFormat\n     *\n     * Note: an empty array indicates that the device supports arbitrary encodings.\n     * For forward compatibility, applications should ignore entries it does not recognize.\n     ",
    "links" : [ "android.media.AudioFormat#ENCODING_PCM_FLOAT", "android.media.AudioRecord", "android.media.AudioTrack", "android.media.AudioFormat#ENCODING_PCM_16BIT" ]
  }, {
    "name" : "public List<AudioProfile> getAudioProfiles()",
    "returnType" : "List<AudioProfile>",
    "comment" : "\n     * @return A list of {@link AudioProfile} supported by the audio devices.\n     ",
    "links" : [ "android.media.AudioProfile" ]
  }, {
    "name" : "public List<AudioDescriptor> getAudioDescriptors()",
    "returnType" : "List<AudioDescriptor>",
    "comment" : "\n     * @return A list of {@link AudioDescriptor} supported by the audio devices.\n     ",
    "links" : [ "android.media.AudioDescriptor" ]
  }, {
    "name" : "public int[] getEncapsulationModes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array of supported encapsulation modes for the device.\n     *\n     * The array can include any of the {@code AudioTrack} encapsulation modes,\n     * e.g. {@link AudioTrack#ENCAPSULATION_MODE_ELEMENTARY_STREAM}.\n     *\n     * @return An array of supported encapsulation modes for the device.  This\n     *     may be an empty array if no encapsulation modes are supported.\n     ",
    "links" : [ "android.media.AudioTrack#ENCAPSULATION_MODE_ELEMENTARY_STREAM" ]
  }, {
    "name" : "public int[] getEncapsulationMetadataTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array of supported encapsulation metadata types for the device.\n     *\n     * The metadata type returned should be allowed for all encapsulation modes supported\n     * by the device.  Some metadata types may apply only to certain\n     * compressed stream formats, the returned list is the union of subsets.\n     *\n     * The array can include any of\n     * {@link AudioTrack#ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER},\n     * {@link AudioTrack#ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR}.\n     *\n     * @return An array of supported encapsulation metadata types for the device.  This\n     *     may be an empty array if no metadata types are supported.\n     ",
    "links" : [ "android.media.AudioTrack#ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER", "android.media.AudioTrack#ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * @return The device type identifier of the audio device (i.e. TYPE_BUILTIN_SPEAKER).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertDeviceTypeToInternalDevice(int deviceType)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int convertInternalDeviceToDeviceType(int intDevice)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int convertDeviceTypeToInternalInputDevice(int deviceType)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int convertDeviceTypeToInternalInputDevice(int deviceType, String address)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean isValidAudioDeviceTypeOut(int type)", " static boolean isValidAudioDeviceTypeIn(int type)", "public static void enforceValidAudioDeviceTypeOut(int type)", "public static void enforceValidAudioDeviceTypeIn(int type)", "public boolean equals(Object o)", "public int hashCode()", "public AudioDevicePort getPort()", "public int getInternalType()", "public int getId()", "public CharSequence getProductName()", "public String getAddress()", "public boolean isSource()", "public boolean isSink()", "public int[] getSampleRates()", "public int[] getChannelMasks()", "public int[] getChannelIndexMasks()", "public int[] getChannelCounts()", "public int[] getEncodings()", "public List<AudioProfile> getAudioProfiles()", "public List<AudioDescriptor> getAudioDescriptors()", "public int[] getEncapsulationModes()", "public int[] getEncapsulationMetadataTypes()", "public int getType()", "public static int convertDeviceTypeToInternalDevice(int deviceType)", "public static int convertInternalDeviceToDeviceType(int intDevice)", "public static int convertDeviceTypeToInternalInputDevice(int deviceType)", "public static int convertDeviceTypeToInternalInputDevice(int deviceType, String address)" ],
  "variableNames" : [ "TYPE_UNKNOWN", "TYPE_BUILTIN_EARPIECE", "TYPE_BUILTIN_SPEAKER", "TYPE_WIRED_HEADSET", "TYPE_WIRED_HEADPHONES", "TYPE_LINE_ANALOG", "TYPE_LINE_DIGITAL", "TYPE_BLUETOOTH_SCO", "TYPE_BLUETOOTH_A2DP", "TYPE_HDMI", "TYPE_HDMI_ARC", "TYPE_USB_DEVICE", "TYPE_USB_ACCESSORY", "TYPE_DOCK", "TYPE_FM", "TYPE_BUILTIN_MIC", "TYPE_FM_TUNER", "TYPE_TV_TUNER", "TYPE_TELEPHONY", "TYPE_AUX_LINE", "TYPE_IP", "TYPE_BUS", "TYPE_USB_HEADSET", "TYPE_HEARING_AID", "TYPE_BUILTIN_SPEAKER_SAFE", "TYPE_REMOTE_SUBMIX", "TYPE_BLE_HEADSET", "TYPE_BLE_SPEAKER", "TYPE_ECHO_REFERENCE", "TYPE_HDMI_EARC", "TYPE_BLE_BROADCAST", "TYPE_DOCK_ANALOG", "mPort", "INT_TO_EXT_DEVICE_MAPPING", "EXT_TO_INT_DEVICE_MAPPING", "EXT_TO_INT_INPUT_DEVICE_MAPPING" ]
}