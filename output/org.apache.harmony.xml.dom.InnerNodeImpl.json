{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/dom/InnerNodeImpl.java",
  "packageName" : "org.apache.harmony.xml.dom",
  "className" : "InnerNodeImpl",
  "comment" : "\n * Provides a straightforward implementation of the corresponding W3C DOM\n * interface. The class is used internally only, thus only notable members that\n * are not in the original interface are documented (the W3C docs are quite\n * extensive).\n *\n * <p>Some of the fields may have package visibility, so other classes belonging\n * to the DOM implementation can easily access them while maintaining the DOM\n * tree structure.\n *\n * <p>This class represents a Node that has a parent Node as well as\n * (potentially) a number of children.\n *\n * <p>Some code was adapted from Apache Xerces.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "children",
    "type" : "List<LeafNodeImpl>",
    "comment" : " Maintained by LeafNodeImpl and ElementImpl.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Node insertChildAt(Node newChild, int index) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Inserts {@code newChild} at {@code index}. If it is already child of\n     * another node, it is removed from there.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isParentOf(Node node)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void normalize()",
    "returnType" : "void",
    "comment" : "\n     * Normalize the text nodes within this subtree. Although named similarly,\n     * this method is unrelated to Document.normalize.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void refreshIndices(int fromIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node removeChild(Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Removes {@code oldChild} and adds {@code newChild} in its place. This\n     * is not atomic.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getTextContent(StringBuilder buf) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean hasTextContent(Node child)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getElementsByTagName(NodeListImpl out, String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getElementsByTagNameNS(NodeListImpl out, String namespaceURI, String localName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean matchesNameOrWildcard(String pattern, String s)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@code pattern} equals either \"*\" or {@code s}. Pattern\n     * may be {@code null}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node appendChild(Node newChild) throws DOMException", "public NodeList getChildNodes()", "public Node getFirstChild()", "public Node getLastChild()", "public Node getNextSibling()", "public boolean hasChildNodes()", "public Node insertBefore(Node newChild, Node refChild) throws DOMException", " Node insertChildAt(Node newChild, int index) throws DOMException", "public boolean isParentOf(Node node)", "public final void normalize()", "private void refreshIndices(int fromIndex)", "public Node removeChild(Node oldChild) throws DOMException", "public Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public String getTextContent() throws DOMException", " void getTextContent(StringBuilder buf) throws DOMException", " final boolean hasTextContent(Node child)", " void getElementsByTagName(NodeListImpl out, String name)", " void getElementsByTagNameNS(NodeListImpl out, String namespaceURI, String localName)", "private static boolean matchesNameOrWildcard(String pattern, String s)" ],
  "variableNames" : [ "children" ]
}