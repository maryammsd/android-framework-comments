{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectInput.java",
  "packageName" : "java.io",
  "className" : "ObjectInput",
  "comment" : "\n * ObjectInput extends the DataInput interface to include the reading of\n * objects. DataInput includes methods for the input of primitive types,\n * ObjectInput extends that interface to include objects, arrays, and Strings.\n *\n * @author  unascribed\n * @see java.io.InputStream\n * @see java.io.ObjectOutputStream\n * @see java.io.ObjectInputStream\n * @since   1.1\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Object readObject() throws ClassNotFoundException, IOException",
    "returnType" : "Object",
    "comment" : "\n     * Read and return an object. The class that implements this interface\n     * defines where the object is \"read\" from.\n     *\n     * @return the object read from the stream\n     * @exception java.lang.ClassNotFoundException If the class of a serialized\n     *      object cannot be found.\n     * @exception IOException If any of the usual Input/Output\n     * related exceptions occur.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a byte of data. This method will block if no input is\n     * available.\n     * @return  the byte read, or -1 if the end of the\n     *          stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into an array of bytes.  This method will\n     * block until some input is available.\n     * @param b the buffer into which the data is read\n     * @return  the actual number of bytes read, -1 is\n     *          returned when the end of the stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into an array of bytes.  This method will\n     * block until some input is available.\n     * @param b the buffer into which the data is read\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes read\n     * @return  the actual number of bytes read, -1 is\n     *          returned when the end of the stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips n bytes of input.\n     * @param n the number of bytes to be skipped\n     * @return  the actual number of bytes skipped.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read\n     * without blocking.\n     * @return the number of available bytes.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the input stream. Must be called\n     * to release any resources associated with\n     * the stream.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object readObject() throws ClassNotFoundException, IOException", "public int read() throws IOException", "public int read(byte[] b) throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public int available() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ ]
}