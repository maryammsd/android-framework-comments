{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/function/LongUnaryOperator.java",
  "packageName" : "java.util.function",
  "className" : "LongUnaryOperator",
  "comment" : "\n * Represents an operation on a single {@code long}-valued operand that produces\n * a {@code long}-valued result.  This is the primitive type specialization of\n * {@link UnaryOperator} for {@code long}.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #applyAsLong(long)}.\n *\n * @see UnaryOperator\n * @since 1.8\n ",
  "links" : [ "#applyAsLong(long)", "java.util.function.UnaryOperator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " long applyAsLong(long operand)",
    "returnType" : "long",
    "comment" : "\n     * Applies this operator to the given operand.\n     *\n     * @param operand the operand\n     * @return the operator result\n     ",
    "links" : [ ]
  }, {
    "name" : " LongUnaryOperator compose(LongUnaryOperator before)",
    "returnType" : "LongUnaryOperator",
    "comment" : "\n     * Returns a composed operator that first applies the {@code before}\n     * operator to its input, and then applies this operator to the result.\n     * If evaluation of either operator throws an exception, it is relayed to\n     * the caller of the composed operator.\n     *\n     * @param before the operator to apply before this operator is applied\n     * @return a composed operator that first applies the {@code before}\n     * operator and then applies this operator\n     * @throws NullPointerException if before is null\n     *\n     * @see #andThen(LongUnaryOperator)\n     ",
    "links" : [ ]
  }, {
    "name" : " LongUnaryOperator andThen(LongUnaryOperator after)",
    "returnType" : "LongUnaryOperator",
    "comment" : "\n     * Returns a composed operator that first applies this operator to\n     * its input, and then applies the {@code after} operator to the result.\n     * If evaluation of either operator throws an exception, it is relayed to\n     * the caller of the composed operator.\n     *\n     * @param after the operator to apply after this operator is applied\n     * @return a composed operator that first applies this operator and then\n     * applies the {@code after} operator\n     * @throws NullPointerException if after is null\n     *\n     * @see #compose(LongUnaryOperator)\n     ",
    "links" : [ ]
  }, {
    "name" : " static LongUnaryOperator identity()",
    "returnType" : "LongUnaryOperator",
    "comment" : "\n     * Returns a unary operator that always returns its input argument.\n     *\n     * @return a unary operator that always returns its input argument\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " long applyAsLong(long operand)", " LongUnaryOperator compose(LongUnaryOperator before)", " LongUnaryOperator andThen(LongUnaryOperator after)", " static LongUnaryOperator identity()" ],
  "variableNames" : [ ]
}