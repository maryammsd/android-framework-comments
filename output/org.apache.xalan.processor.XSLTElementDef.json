{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/processor/XSLTElementDef.java",
  "packageName" : "org.apache.xalan.processor",
  "className" : "XSLTElementDef",
  "comment" : "\n * This class defines the allowed structure for an element in a XSLT stylesheet,\n * is meant to reflect the structure defined in http://www.w3.org/TR/xslt#dtd, and the\n * mapping between Xalan classes and the markup elements in the XSLT instance.\n * This actually represents both text nodes and elements.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "T_ELEMENT",
    "type" : "int",
    "comment" : " Content type enumerations    ",
    "links" : [ ]
  }, {
    "name" : "T_PCDATA",
    "type" : "int",
    "comment" : " Content type enumerations    ",
    "links" : [ ]
  }, {
    "name" : "T_ANY",
    "type" : "int",
    "comment" : " Content type enumerations    ",
    "links" : [ ]
  }, {
    "name" : "m_type",
    "type" : "int",
    "comment" : "\n   * The type of this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_namespace",
    "type" : "String",
    "comment" : "\n   * The allowed namespace for this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_name",
    "type" : "String",
    "comment" : "\n   * The name of this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_nameAlias",
    "type" : "String",
    "comment" : "\n   * The name of this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_elements",
    "type" : "XSLTElementDef[]",
    "comment" : "\n   * The allowed elements for this type.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_attributes",
    "type" : "XSLTAttributeDef[]",
    "comment" : "\n   * The allowed attributes for this type.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_elementProcessor",
    "type" : "XSLTElementProcessor",
    "comment" : "\n   * If non-null, the ContentHandler/TransformerFactory for this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_classObject",
    "type" : "Class",
    "comment" : "\n   * If non-null, the class object that should in instantiated for\n   * a Xalan instance of this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_has_required",
    "type" : "boolean",
    "comment" : "\n   * If true, this has a required element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_required",
    "type" : "boolean",
    "comment" : "\n   * If true, this is a required element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_requiredFound",
    "type" : "Hashtable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_isOrdered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_order",
    "type" : "int",
    "comment" : "\n   * the order that this element should appear, or -1 if not ordered\n   ",
    "links" : [ ]
  }, {
    "name" : "m_lastOrder",
    "type" : "int",
    "comment" : "\n   * the highest order of child elements have appeared so far, \n   * or -1 if not ordered\n   ",
    "links" : [ ]
  }, {
    "name" : "m_multiAllowed",
    "type" : "boolean",
    "comment" : "\n   * True if this element can appear multiple times\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void build(String namespace, String name, String nameAlias, XSLTElementDef[] elements, XSLTAttributeDef[] attributes, XSLTElementProcessor contentHandler, Class classObject)",
    "returnType" : "void",
    "comment" : "\n   * Construct an instance of XSLTElementDef.\n   *\n   * @param namespace  The Namespace URI, \"*\", or null.\n   * @param name The local name (without prefix), \"*\", or null.\n   * @param nameAlias A potential alias for the name, or null.\n   * @param elements An array of allowed child element defs, or null.\n   * @param attributes An array of allowed attribute defs, or null.\n   * @param contentHandler The element processor for this element.\n   * @param classObject The class of the object that this element def should produce.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalsMayBeNull(Object obj1, Object obj2)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are equal, when either one may be null.\n   * If both are null, they are considered equal.\n   *\n   * @param obj1 A reference to the first object, or null.\n   * @param obj2 A reference to the second object, or null.\n   *\n   * @return true if the to objects are equal by both being null or \n   * because obj2.equals(obj1) returns true.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalsMayBeNullOrZeroLen(String s1, String s2)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the two string refs are equal,\n   * equality being defined as:\n   * 1) Both strings are null.\n   * 2) One string is null and the other is empty.\n   * 3) Both strings are non-null, and equal.\n   *\n   * @param s1 A reference to the first string, or null.\n   * @param s2 A reference to the second string, or null.\n   *\n   * @return true if Both strings are null, or if \n   * one string is null and the other is empty, or if \n   * both strings are non-null, and equal because \n   * s1.equals(s2) returns true.\n   ",
    "links" : [ ]
  }, {
    "name" : " int getType()",
    "returnType" : "int",
    "comment" : "\n   * Get the type of this element.\n   *\n   * @return Content type, one of T_ELEMENT, T_PCDATA, or T_ANY.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setType(int t)",
    "returnType" : "void",
    "comment" : "\n   * Set the type of this element.\n   *\n   * @param t Content type, one of T_ELEMENT, T_PCDATA, or T_ANY.\n   ",
    "links" : [ ]
  }, {
    "name" : " String getNamespace()",
    "returnType" : "String",
    "comment" : "\n   * Get the allowed namespace for this element.\n   *\n   * @return The Namespace URI, \"*\", or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " String getName()",
    "returnType" : "String",
    "comment" : "\n   * Get the local name of this element.\n   *\n   * @return The local name of this element, \"*\", or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " String getNameAlias()",
    "returnType" : "String",
    "comment" : "\n   * Get the name of this element.\n   *\n   * @return A potential alias for the name, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XSLTElementDef[] getElements()",
    "returnType" : "XSLTElementDef[]",
    "comment" : "\n   * Get the allowed elements for this type.\n   *\n   * @return An array of allowed child element defs, or null.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : " void setElements(XSLTElementDef[] defs)",
    "returnType" : "void",
    "comment" : "\n   * Set the allowed elements for this type.\n   *\n   * @param defs An array of allowed child element defs, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean QNameEquals(String uri, String localName)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the namespace URI and local name match this\n   * element.\n   * @param uri The namespace uri, which may be null.\n   * @param localName The local name of an element, which may be null.\n   *\n   * @return true if the uri and local name arguments are considered \n   * to match the uri and local name of this element def.\n   ",
    "links" : [ ]
  }, {
    "name" : " XSLTElementProcessor getProcessorFor(String uri, String localName)",
    "returnType" : "XSLTElementProcessor",
    "comment" : "\n   * Given a namespace URI, and a local name, get the processor\n   * for the element, or return null if not allowed.\n   *\n   * @param uri The Namespace URI, or an empty string.\n   * @param localName The local name (without prefix), or empty string if not namespace processing.\n   *\n   * @return The element processor that matches the arguments, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " XSLTElementProcessor getProcessorForUnknown(String uri, String localName)",
    "returnType" : "XSLTElementProcessor",
    "comment" : "\n   * Given an unknown element, get the processor\n   * for the element.\n   *\n   * @param uri The Namespace URI, or an empty string.\n   * @param localName The local name (without prefix), or empty string if not namespace processing.\n   *\n   * @return normally a {@link ProcessorUnknown} reference.\n   * @see ProcessorUnknown\n   ",
    "links" : [ "org.apache.xalan.processor.ProcessorUnknown" ]
  }, {
    "name" : " XSLTAttributeDef[] getAttributes()",
    "returnType" : "XSLTAttributeDef[]",
    "comment" : "\n   * Get the allowed attributes for this type.\n   *\n   * @return An array of allowed attribute defs, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " XSLTAttributeDef getAttributeDef(String uri, String localName)",
    "returnType" : "XSLTAttributeDef",
    "comment" : "\n   * Given a namespace URI, and a local name, return the element's\n   * attribute definition, if it has one.\n   *\n   * @param uri The Namespace URI, or an empty string.\n   * @param localName The local name (without prefix), or empty string if not namespace processing.\n   *\n   * @return The attribute def that matches the arguments, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XSLTElementProcessor getElementProcessor()",
    "returnType" : "XSLTElementProcessor",
    "comment" : "\n   * Return the XSLTElementProcessor for this element.\n   *\n   * @return The element processor for this element.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setElementProcessor(XSLTElementProcessor handler)",
    "returnType" : "void",
    "comment" : "\n   * Set the XSLTElementProcessor for this element.\n   *\n   * @param handler The element processor for this element.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : " Class getClassObject()",
    "returnType" : "Class",
    "comment" : "\n   * Return the class object that should in instantiated for\n   * a Xalan instance of this element.\n   *\n   * @return The class of the object that this element def should produce, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean hasRequired()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not this has a required element.\n   *\n   * @return true if this this has a required element.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean getRequired()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not this is a required element.\n   *\n   * @return true if this is a required element.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setRequiredFound(String elem, boolean found)",
    "returnType" : "void",
    "comment" : "\n   * Set this required element found.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean getRequiredFound()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether all required elements were found.\n   *\n   * @return true if all required elements were found.\n   ",
    "links" : [ ]
  }, {
    "name" : " String getRequiredElem()",
    "returnType" : "String",
    "comment" : "\n   * Get required elements that were not found.\n   *\n   * @return required elements that were not found.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean isOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether this element requires ordered children.\n   *\n   * @return true if this element requires ordered children.\n   ",
    "links" : [ ]
  }, {
    "name" : " int getOrder()",
    "returnType" : "int",
    "comment" : "\n   * Get the order that this element should appear .\n   *\n   * @return the order that this element should appear.\n   ",
    "links" : [ ]
  }, {
    "name" : " int getLastOrder()",
    "returnType" : "int",
    "comment" : "\n   * Get the highest order of child elements have appeared so far .\n   *\n   * @return the highest order of child elements have appeared so far.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setLastOrder(int order)",
    "returnType" : "void",
    "comment" : "\n   * Set the highest order of child elements have appeared so far .\n   *\n   * @param order the highest order of child elements have appeared so far.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean getMultiAllowed()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether this element can appear multiple times\n   *\n   * @return true if this element can appear multiple times\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void build(String namespace, String name, String nameAlias, XSLTElementDef[] elements, XSLTAttributeDef[] attributes, XSLTElementProcessor contentHandler, Class classObject)", "private static boolean equalsMayBeNull(Object obj1, Object obj2)", "private static boolean equalsMayBeNullOrZeroLen(String s1, String s2)", " int getType()", " void setType(int t)", " String getNamespace()", " String getName()", " String getNameAlias()", "public XSLTElementDef[] getElements()", " void setElements(XSLTElementDef[] defs)", "private boolean QNameEquals(String uri, String localName)", " XSLTElementProcessor getProcessorFor(String uri, String localName)", " XSLTElementProcessor getProcessorForUnknown(String uri, String localName)", " XSLTAttributeDef[] getAttributes()", " XSLTAttributeDef getAttributeDef(String uri, String localName)", "public XSLTElementProcessor getElementProcessor()", "public void setElementProcessor(XSLTElementProcessor handler)", " Class getClassObject()", " boolean hasRequired()", " boolean getRequired()", " void setRequiredFound(String elem, boolean found)", " boolean getRequiredFound()", " String getRequiredElem()", " boolean isOrdered()", " int getOrder()", " int getLastOrder()", " void setLastOrder(int order)", " boolean getMultiAllowed()" ],
  "variableNames" : [ "T_ELEMENT", "T_PCDATA", "T_ANY", "m_type", "m_namespace", "m_name", "m_nameAlias", "m_elements", "m_attributes", "m_elementProcessor", "m_classObject", "m_has_required", "m_required", "m_requiredFound", "m_isOrdered", "m_order", "m_lastOrder", "m_multiAllowed" ]
}