{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/DefaultErrorHandler.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "DefaultErrorHandler",
  "comment" : "\n * Implement SAX error handler for default reporting.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_pw",
    "type" : "PrintWriter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_throwExceptionOnError",
    "type" : "boolean",
    "comment" : "\n   * if this flag is set to true, we will rethrow the exception on\n   * the error() and fatalError() methods. If it is false, the errors \n   * are reported to System.err. \n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PrintWriter getErrorWriter()",
    "returnType" : "PrintWriter",
    "comment" : "\n   * Retrieve <code>java.io.PrintWriter</code> to which errors are being\n   * directed.\n   * @return The <code>PrintWriter</code> installed via the constructor\n   *         or the default <code>PrintWriter</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a warning.\n   *\n   * <p>SAX parsers will use this method to report conditions that\n   * are not errors or fatal errors as defined by the XML 1.0\n   * recommendation.  The default behaviour is to take no action.</p>\n   *\n   * <p>The SAX parser must continue to provide normal parsing events\n   * after invoking this method: it should still be possible for the\n   * application to process the document through to the end.</p>\n   *\n   * @param exception The warning information encapsulated in a\n   *                  SAX parse exception.\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a recoverable error.\n   *\n   * <p>This corresponds to the definition of \"error\" in section 1.2\n   * of the W3C XML 1.0 Recommendation.  For example, a validating\n   * parser would use this callback to report the violation of a\n   * validity constraint.  The default behaviour is to take no\n   * action.</p>\n   *\n   * <p>The SAX parser must continue to provide normal parsing events\n   * after invoking this method: it should still be possible for the\n   * application to process the document through to the end.  If the\n   * application cannot do so, then the parser should report a fatal\n   * error even if the XML 1.0 recommendation does not require it to\n   * do so.</p>\n   *\n   * @param exception The error information encapsulated in a\n   *                  SAX parse exception.\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a non-recoverable error.\n   *\n   * <p>This corresponds to the definition of \"fatal error\" in\n   * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a\n   * parser would use this callback to report the violation of a\n   * well-formedness constraint.</p>\n   *\n   * <p>The application must assume that the document is unusable\n   * after the parser has invoked this method, and should continue\n   * (if at all) only for the sake of collecting addition error\n   * messages: in fact, SAX parsers are free to stop reporting any\n   * other events once this method has been invoked.</p>\n   *\n   * @param exception The error information encapsulated in a\n   *                  SAX parse exception.\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void warning(TransformerException exception) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a warning.\n   *\n   * <p>SAX parsers will use this method to report conditions that\n   * are not errors or fatal errors as defined by the XML 1.0\n   * recommendation.  The default behaviour is to take no action.</p>\n   *\n   * <p>The SAX parser must continue to provide normal parsing events\n   * after invoking this method: it should still be possible for the\n   * application to process the document through to the end.</p>\n   *\n   * @param exception The warning information encapsulated in a\n   *                  SAX parse exception.\n   * @throws javax.xml.transform.TransformerException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(TransformerException exception) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a recoverable error.\n   *\n   * <p>This corresponds to the definition of \"error\" in section 1.2\n   * of the W3C XML 1.0 Recommendation.  For example, a validating\n   * parser would use this callback to report the violation of a\n   * validity constraint.  The default behaviour is to take no\n   * action.</p>\n   *\n   * <p>The SAX parser must continue to provide normal parsing events\n   * after invoking this method: it should still be possible for the\n   * application to process the document through to the end.  If the\n   * application cannot do so, then the parser should report a fatal\n   * error even if the XML 1.0 recommendation does not require it to\n   * do so.</p>\n   *\n   * @param exception The error information encapsulated in a\n   *                  SAX parse exception.\n   * @throws javax.xml.transform.TransformerException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(TransformerException exception) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a non-recoverable error.\n   *\n   * <p>This corresponds to the definition of \"fatal error\" in\n   * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a\n   * parser would use this callback to report the violation of a\n   * well-formedness constraint.</p>\n   *\n   * <p>The application must assume that the document is unusable\n   * after the parser has invoked this method, and should continue\n   * (if at all) only for the sake of collecting addition error\n   * messages: in fact, SAX parsers are free to stop reporting any\n   * other events once this method has been invoked.</p>\n   *\n   * @param exception The error information encapsulated in a\n   *                  SAX parse exception.\n   * @throws javax.xml.transform.TransformerException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static void ensureLocationSet(TransformerException exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void printLocation(PrintStream pw, TransformerException exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void printLocation(java.io.PrintStream pw, org.xml.sax.SAXParseException exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void printLocation(PrintWriter pw, Throwable exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PrintWriter getErrorWriter()", "public void warning(SAXParseException exception) throws SAXException", "public void error(SAXParseException exception) throws SAXException", "public void fatalError(SAXParseException exception) throws SAXException", "public void warning(TransformerException exception) throws TransformerException", "public void error(TransformerException exception) throws TransformerException", "public void fatalError(TransformerException exception) throws TransformerException", "public static void ensureLocationSet(TransformerException exception)", "public static void printLocation(PrintStream pw, TransformerException exception)", "public static void printLocation(java.io.PrintStream pw, org.xml.sax.SAXParseException exception)", "public static void printLocation(PrintWriter pw, Throwable exception)" ],
  "variableNames" : [ "m_pw", "m_throwExceptionOnError" ]
}