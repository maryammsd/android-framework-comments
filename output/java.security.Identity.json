{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/Identity.java",
  "packageName" : "java.security",
  "className" : "Identity",
  "comment" : "\n * <p>This class represents identities: real-world objects such as people,\n * companies or organizations whose identities can be authenticated using\n * their public keys. Identities may also be more abstract (or concrete)\n * constructs, such as daemon threads or smart cards.\n *\n * <p>All Identity objects have a name and a public key. Names are\n * immutable. Identities may also be scoped. That is, if an Identity is\n * specified to have a particular scope, then the name and public\n * key of the Identity are unique within that scope.\n *\n * <p>An Identity also has a set of certificates (all certifying its own\n * public key). The Principal names specified in these certificates need\n * not be the same, only the key.\n *\n * <p>An Identity can be subclassed, to include postal and email addresses,\n * telephone numbers, images of faces and logos, and so on.\n *\n * @see IdentityScope\n * @see Signer\n * @see Principal\n *\n * @author Benjamin Renaud\n * @since 1.1\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by\n *     {@code java.security.KeyStore}, the {@code java.security.cert} package,\n *     and {@code java.security.Principal}.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.1.x for interoperability ",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * The name for this identity.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "publicKey",
    "type" : "PublicKey",
    "comment" : "\n     * The public key for this identity.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "info",
    "type" : "String",
    "comment" : "\n     * Generic, descriptive information about the identity.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "scope",
    "type" : "IdentityScope",
    "comment" : "\n     * The scope of the identity.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "certificates",
    "type" : "Vector<Certificate>",
    "comment" : "\n     * The certificates for this identity.\n     *\n     * @serial\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns this identity's name.\n     *\n     * @return the name of this identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final IdentityScope getScope()",
    "returnType" : "IdentityScope",
    "comment" : "\n     * Returns this identity's scope.\n     *\n     * @return the scope of this identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PublicKey getPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "\n     * Returns this identity's public key.\n     *\n     * @return the public key for this identity.\n     *\n     * @see #setPublicKey\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPublicKey(PublicKey key) throws KeyManagementException",
    "returnType" : "void",
    "comment" : " Should we throw an exception if this is already set? ",
    "links" : [ ]
  }, {
    "name" : "public void setInfo(String info)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a general information string for this identity.\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"setIdentityInfo\"}\n     * as its argument to see if it's ok to specify the information string.\n     *\n     * @param info the information string.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * setting the information string.\n     *\n     * @see #getInfo\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInfo()",
    "returnType" : "String",
    "comment" : "\n     * Returns general information previously specified for this identity.\n     *\n     * @return general information about this identity.\n     *\n     * @see #setInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCertificate(Certificate certificate) throws KeyManagementException",
    "returnType" : "void",
    "comment" : "\n     * Adds a certificate for this identity. If the identity has a public\n     * key, the public key in the certificate must be the same, and if\n     * the identity does not have a public key, the identity's\n     * public key is set to be that specified in the certificate.\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"addIdentityCertificate\"}\n     * as its argument to see if it's ok to add a certificate.\n     *\n     * @param certificate the certificate to be added.\n     *\n     * @exception KeyManagementException if the certificate is not valid,\n     * if the public key in the certificate being added conflicts with\n     * this identity's public key, or if another exception occurs.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * adding a certificate.\n     *\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean keyEquals(PublicKey aKey, PublicKey anotherKey)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeCertificate(Certificate certificate) throws KeyManagementException",
    "returnType" : "void",
    "comment" : "\n     * Removes a certificate from this identity.\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"removeIdentityCertificate\"}\n     * as its argument to see if it's ok to remove a certificate.\n     *\n     * @param certificate the certificate to be removed.\n     *\n     * @exception KeyManagementException if the certificate is\n     * missing, or if another exception occurs.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * removing a certificate.\n     *\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public Certificate[] certificates()",
    "returnType" : "Certificate[]",
    "comment" : "\n     * Returns a copy of all the certificates for this identity.\n     *\n     * @return a copy of all the certificates for this identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object identity)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for equality between the specified object and this identity.\n     * This first tests to see if the entities actually refer to the same\n     * object, in which case it returns true. Next, it checks to see if\n     * the entities have the same name and the same scope. If they do,\n     * the method returns true. Otherwise, it calls\n     * {@link #identityEquals(Identity) identityEquals}, which subclasses should\n     * override.\n     *\n     * @param identity the object to test for equality with this identity.\n     *\n     * @return true if the objects are considered equal, false otherwise.\n     *\n     * @see #identityEquals\n     ",
    "links" : [ "#identityEquals(Identity)" ]
  }, {
    "name" : "protected boolean identityEquals(Identity identity)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for equality between the specified identity and this identity.\n     * This method should be overriden by subclasses to test for equality.\n     * The default behavior is to return true if the names and public keys\n     * are equal.\n     *\n     * @param identity the identity to test for equality with this identity.\n     *\n     * @return true if the identities are considered equal, false\n     * otherwise.\n     *\n     * @see #equals\n     ",
    "links" : [ ]
  }, {
    "name" : " String fullName()",
    "returnType" : "String",
    "comment" : "\n     * Returns a parsable name for identity: identityName.scopeName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a short string describing this identity, telling its\n     * name and its scope (if any).\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"printIdentity\"}\n     * as its argument to see if it's ok to return the string.\n     *\n     * @return information about this identity, such as its name and the\n     * name of its scope (if any).\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * returning a string describing this identity.\n     *\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString(boolean detailed)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this identity, with\n     * optionally more details than that provided by the\n     * {@code toString} method without any arguments.\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"printIdentity\"}\n     * as its argument to see if it's ok to return the string.\n     *\n     * @param detailed whether or not to provide detailed information.\n     *\n     * @return information about this identity. If {@code detailed}\n     * is true, then this method returns more information than that\n     * provided by the {@code toString} method without any arguments.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * returning a string describing this identity.\n     *\n     * @see #toString\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : " String printKeys()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String printCertificates()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this identity.\n     *\n     * @return a hashcode for this identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void check(String directive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getName()", "public final IdentityScope getScope()", "public PublicKey getPublicKey()", "public void setPublicKey(PublicKey key) throws KeyManagementException", "public void setInfo(String info)", "public String getInfo()", "public void addCertificate(Certificate certificate) throws KeyManagementException", "private boolean keyEquals(PublicKey aKey, PublicKey anotherKey)", "public void removeCertificate(Certificate certificate) throws KeyManagementException", "public Certificate[] certificates()", "public final boolean equals(Object identity)", "protected boolean identityEquals(Identity identity)", " String fullName()", "public String toString()", "public String toString(boolean detailed)", " String printKeys()", " String printCertificates()", "public int hashCode()", "private static void check(String directive)" ],
  "variableNames" : [ "serialVersionUID", "name", "publicKey", "info", "scope", "certificates" ]
}