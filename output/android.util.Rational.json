{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/Rational.java",
  "packageName" : "android.util",
  "className" : "Rational",
  "comment" : "\n * <p>An immutable data type representation a rational number.</p>\n *\n * <p>Contains a pair of {@code int}s representing the numerator and denominator of a\n * Rational number. </p>\n ",
  "variables" : [ {
    "name" : "NaN",
    "type" : "Rational",
    "comment" : "\n     * Constant for the <em>Not-a-Number (NaN)</em> value of the {@code Rational} type.\n     *\n     * <p>A {@code NaN} value is considered to be equal to itself (that is {@code NaN.equals(NaN)}\n     * will return {@code true}; it is always greater than any non-{@code NaN} value (that is\n     * {@code NaN.compareTo(notNaN)} will return a number greater than {@code 0}).</p>\n     *\n     * <p>Equivalent to constructing a new rational with both the numerator and denominator\n     * equal to {@code 0}.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_INFINITY",
    "type" : "Rational",
    "comment" : "\n     * Constant for the positive infinity value of the {@code Rational} type.\n     *\n     * <p>Equivalent to constructing a new rational with a positive numerator and a denominator\n     * equal to {@code 0}.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_INFINITY",
    "type" : "Rational",
    "comment" : "\n     * Constant for the negative infinity value of the {@code Rational} type.\n     *\n     * <p>Equivalent to constructing a new rational with a negative numerator and a denominator\n     * equal to {@code 0}.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ZERO",
    "type" : "Rational",
    "comment" : "\n     * Constant for the zero value of the {@code Rational} type.\n     *\n     * <p>Equivalent to constructing a new rational with a numerator equal to {@code 0} and\n     * any non-zero denominator.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Unique version number per class to be compliant with {@link java.io.Serializable}.\n     *\n     * <p>Increment each time the fields change in any way.</p>\n     ",
    "links" : [ "java.io.Serializable" ]
  }, {
    "name" : "mNumerator",
    "type" : "int",
    "comment" : "\n     * Do not change the order of these fields or add new instance fields to maintain the\n     * Serializable compatibility across API revisions.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDenominator",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getNumerator()",
    "returnType" : "int",
    "comment" : "\n     * Gets the numerator of the rational.\n     *\n     * <p>The numerator will always return {@code 1} if this rational represents\n     * infinity (that is, the denominator is {@code 0}).</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDenominator()",
    "returnType" : "int",
    "comment" : "\n     * Gets the denominator of the rational\n     *\n     * <p>The denominator may return {@code 0}, in which case the rational may represent\n     * positive infinity (if the numerator was positive), negative infinity (if the numerator\n     * was negative), or {@code NaN} (if the numerator was {@code 0}).</p>\n     *\n     * <p>The denominator will always return {@code 1} if the numerator is {@code 0}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNaN()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this rational is a <em>Not-a-Number (NaN)</em> value.\n     *\n     * <p>A {@code NaN} value occurs when both the numerator and the denominator are {@code 0}.</p>\n     *\n     * @return {@code true} if this rational is a <em>Not-a-Number (NaN)</em> value;\n     *         {@code false} if this is a (potentially infinite) number value\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInfinite()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this rational represents an infinite value.\n     *\n     * <p>An infinite value occurs when the denominator is {@code 0} (but the numerator is not).</p>\n     *\n     * @return {@code true} if this rational is a (positive or negative) infinite value;\n     *         {@code false} if this is a finite number value (or {@code NaN})\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFinite()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this rational represents a finite value.\n     *\n     * <p>A finite value occurs when the denominator is not {@code 0}; in other words\n     * the rational is neither infinity or {@code NaN}.</p>\n     *\n     * @return {@code true} if this rational is a (positive or negative) infinite value;\n     *         {@code false} if this is a finite number value (or {@code NaN})\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isZero()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this rational represents a zero value.\n     *\n     * <p>A zero value is a {@link #isFinite finite} rational with a numerator of {@code 0}.</p>\n     *\n     * @return {@code true} if this rational is finite zero value;\n     *         {@code false} otherwise\n     ",
    "links" : [ "#isFinite" ]
  }, {
    "name" : "private boolean isPosInf()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isNegInf()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Compare this Rational to another object and see if they are equal.</p>\n     *\n     * <p>A Rational object can only be equal to another Rational object (comparing against any\n     * other type will return {@code false}).</p>\n     *\n     * <p>A Rational object is considered equal to another Rational object if and only if one of\n     * the following holds:</p>\n     * <ul><li>Both are {@code NaN}</li>\n     *     <li>Both are infinities of the same sign</li>\n     *     <li>Both have the same numerator and denominator in their reduced form</li>\n     * </ul>\n     *\n     * <p>A reduced form of a Rational is calculated by dividing both the numerator and the\n     * denominator by their greatest common divisor.</p>\n     *\n     * <pre>{@code\n     * (new Rational(1, 2)).equals(new Rational(1, 2)) == true   // trivially true\n     * (new Rational(2, 3)).equals(new Rational(1, 2)) == false  // trivially false\n     * (new Rational(1, 2)).equals(new Rational(2, 4)) == true   // true after reduction\n     * (new Rational(0, 0)).equals(new Rational(0, 0)) == true   // NaN.equals(NaN)\n     * (new Rational(1, 0)).equals(new Rational(5, 0)) == true   // both are +infinity\n     * (new Rational(1, 0)).equals(new Rational(-1, 0)) == false // +infinity != -infinity\n     * }</pre>\n     *\n     * @param obj a reference to another object\n     *\n     * @return A boolean that determines whether or not the two Rational objects are equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equals(Rational other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of this rational, e.g. {@code \"1/2\"}.\n     *\n     * <p>The following rules of conversion apply:\n     * <ul>\n     * <li>{@code NaN} values will return {@code \"NaN\"}\n     * <li>Positive infinity values will return {@code \"Infinity\"}\n     * <li>Negative infinity values will return {@code \"-Infinity\"}\n     * <li>All other values will return {@code \"numerator/denominator\"} where {@code numerator}\n     * and {@code denominator} are substituted with the appropriate numerator and denominator\n     * values.\n     * </ul></p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public float toFloat()",
    "returnType" : "float",
    "comment" : "\n     * <p>Convert to a floating point representation.</p>\n     *\n     * @return The floating point representation of this rational number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int gcd(int numerator, int denominator)",
    "returnType" : "int",
    "comment" : "\n     * Calculates the greatest common divisor using Euclid's algorithm.\n     *\n     * <p><em>Visible for testing only.</em></p>\n     *\n     * @param numerator the numerator in a fraction\n     * @param denominator the denominator in a fraction\n     *\n     * @return An int value representing the gcd. Always positive.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of the specified number as a {@code double}.\n     *\n     * <p>The {@code double} is calculated by converting both the numerator and denominator\n     * to a {@code double}; then returning the result of dividing the numerator by the\n     * denominator.</p>\n     *\n     * @return the divided value of the numerator and denominator as a {@code double}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of the specified number as a {@code float}.\n     *\n     * <p>The {@code float} is calculated by converting both the numerator and denominator\n     * to a {@code float}; then returning the result of dividing the numerator by the\n     * denominator.</p>\n     *\n     * @return the divided value of the numerator and denominator as a {@code float}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the specified number as a {@code int}.\n     *\n     * <p>{@link #isInfinite Finite} rationals are converted to an {@code int} value\n     * by dividing the numerator by the denominator; conversion for non-finite values happens\n     * identically to casting a floating point value to an {@code int}, in particular:\n     *\n     * <p>\n     * <ul>\n     * <li>Positive infinity saturates to the largest maximum integer\n     * {@link Integer#MAX_VALUE}</li>\n     * <li>Negative infinity saturates to the smallest maximum integer\n     * {@link Integer#MIN_VALUE}</li>\n     * <li><em>Not-A-Number (NaN)</em> returns {@code 0}.</li>\n     * </ul>\n     * </p>\n     *\n     * @return the divided value of the numerator and denominator as a {@code int}.\n     ",
    "links" : [ "#MIN_VALUE", "#MAX_VALUE", "#isInfinite" ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the specified number as a {@code long}.\n     *\n     * <p>{@link #isInfinite Finite} rationals are converted to an {@code long} value\n     * by dividing the numerator by the denominator; conversion for non-finite values happens\n     * identically to casting a floating point value to a {@code long}, in particular:\n     *\n     * <p>\n     * <ul>\n     * <li>Positive infinity saturates to the largest maximum long\n     * {@link Long#MAX_VALUE}</li>\n     * <li>Negative infinity saturates to the smallest maximum long\n     * {@link Long#MIN_VALUE}</li>\n     * <li><em>Not-A-Number (NaN)</em> returns {@code 0}.</li>\n     * </ul>\n     * </p>\n     *\n     * @return the divided value of the numerator and denominator as a {@code long}.\n     ",
    "links" : [ "#MIN_VALUE", "#MAX_VALUE", "#isInfinite" ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of the specified number as a {@code short}.\n     *\n     * <p>{@link #isInfinite Finite} rationals are converted to a {@code short} value\n     * identically to {@link #intValue}; the {@code int} result is then truncated to a\n     * {@code short} before returning the value.</p>\n     *\n     * @return the divided value of the numerator and denominator as a {@code short}.\n     ",
    "links" : [ "#intValue", "#isInfinite" ]
  }, {
    "name" : "public int compareTo(Rational another)",
    "returnType" : "int",
    "comment" : "\n     * Compare this rational to the specified rational to determine their natural order.\n     *\n     * <p>{@link #NaN} is considered to be equal to itself and greater than all other\n     * {@code Rational} values. Otherwise, if the objects are not {@link #equals equal}, then\n     * the following rules apply:</p>\n     *\n     * <ul>\n     * <li>Positive infinity is greater than any other finite number (or negative infinity)\n     * <li>Negative infinity is less than any other finite number (or positive infinity)\n     * <li>The finite number represented by this rational is checked numerically\n     * against the other finite number by converting both rationals to a common denominator multiple\n     * and comparing their numerators.\n     * </ul>\n     *\n     * @param another the rational to be compared\n     *\n     * @return a negative integer, zero, or a positive integer as this object is less than,\n     *         equal to, or greater than the specified rational.\n     *\n     * @throws NullPointerException if {@code another} was {@code null}\n     ",
    "links" : [ "#equals", "#NaN" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * writeObject with default serialized form - guards against\n     * deserializing non-reduced forms of the rational.\n     *\n     * @throws InvalidObjectException if the invariants were violated\n     ",
    "links" : [ ]
  }, {
    "name" : "private static NumberFormatException invalidRational(String s)",
    "returnType" : "NumberFormatException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Rational parseRational(String string) throws NumberFormatException",
    "returnType" : "Rational",
    "comment" : "\n     * Parses the specified string as a rational value.\n     * <p>The ASCII characters {@code \\}{@code u003a} (':') and\n     * {@code \\}{@code u002f} ('/') are recognized as separators between\n     * the numerator and denumerator.</p>\n     * <p>\n     * For any {@code Rational r}: {@code Rational.parseRational(r.toString()).equals(r)}.\n     * However, the method also handles rational numbers expressed in the\n     * following forms:</p>\n     * <p>\n     * \"<i>num</i>{@code /}<i>den</i>\" or\n     * \"<i>num</i>{@code :}<i>den</i>\" {@code => new Rational(num, den);},\n     * where <i>num</i> and <i>den</i> are string integers potentially\n     * containing a sign, such as \"-10\", \"+7\" or \"5\".</p>\n     *\n     * <pre>{@code\n     * Rational.parseRational(\"3:+6\").equals(new Rational(1, 2)) == true\n     * Rational.parseRational(\"-3/-6\").equals(new Rational(1, 2)) == true\n     * Rational.parseRational(\"4.56\") => throws NumberFormatException\n     * }</pre>\n     *\n     * @param string the string representation of a rational value.\n     * @return the rational value represented by {@code string}.\n     *\n     * @throws NumberFormatException if {@code string} cannot be parsed\n     * as a rational value.\n     * @throws NullPointerException if {@code string} was {@code null}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NaN", "POSITIVE_INFINITY", "NEGATIVE_INFINITY", "ZERO", "serialVersionUID", "mNumerator", "mDenominator" ],
  "methodNames" : [ "public int getNumerator()", "public int getDenominator()", "public boolean isNaN()", "public boolean isInfinite()", "public boolean isFinite()", "public boolean isZero()", "private boolean isPosInf()", "private boolean isNegInf()", "public boolean equals(Object obj)", "private boolean equals(Rational other)", "public String toString()", "public float toFloat()", "public int hashCode()", "public static int gcd(int numerator, int denominator)", "public double doubleValue()", "public float floatValue()", "public int intValue()", "public long longValue()", "public short shortValue()", "public int compareTo(Rational another)", "private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException", "private static NumberFormatException invalidRational(String s)", "public static Rational parseRational(String string) throws NumberFormatException" ]
}