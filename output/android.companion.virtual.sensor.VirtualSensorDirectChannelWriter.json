{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/sensor/VirtualSensorDirectChannelWriter.java",
  "packageName" : "android.companion.virtual.sensor",
  "className" : "VirtualSensorDirectChannelWriter",
  "comment" : "\n * Helper class for writing sensor events to the relevant configured direct channels.\n *\n * <p>The virtual device owner can forward the {@link VirtualSensorDirectChannelCallback}\n * invocations to a {@link VirtualSensorDirectChannelWriter} instance and use that writer to\n * write the events from the relevant sensors directly to the shared memory regions of the\n * corresponding {@link SensorDirectChannel} instances.\n *\n * <p>Example:\n * <p>During sensor and virtual device creation:\n * <pre>\n * VirtualSensorDirectChannelWriter writer = new VirtualSensorDirectChannelWriter();\n * VirtualSensorDirectChannelCallback callback = new VirtualSensorDirectChannelCallback() {\n *     {@literal @}Override\n *     public void onDirectChannelCreated(int channelHandle, SharedMemory sharedMemory) {\n *         writer.addChannel(channelHandle, sharedMemory);\n *     }\n *     {@literal @}Override\n *     public void onDirectChannelDestroyed(int channelHandle);\n *         writer.removeChannel(channelHandle);\n *     }\n *     {@literal @}Override\n *     public void onDirectChannelConfigured(int channelHandle, VirtualSensor sensor, int rateLevel,\n *             int reportToken)\n *         if (!writer.configureChannel(channelHandle, sensor, rateLevel, reportToken)) {\n *              // handle error\n *         }\n *     }\n * }\n * </pre>\n * <p>During the virtual device lifetime:\n * <pre>\n * VirtualSensor sensor = ...\n * while (shouldInjectEvents(sensor)) {\n *     if (!writer.writeSensorEvent(sensor, event)) {\n *         // handle error\n *     }\n * }\n * writer.close();\n * </pre>\n * <p>Note that the virtual device owner should take the currently configured rate level into\n * account when deciding whether and how often to inject events for a particular sensor.\n *\n * @see android.hardware.SensorDirectChannel#configure\n * @see VirtualSensorDirectChannelCallback\n *\n * @hide\n ",
  "links" : [ "android.companion.virtual.sensor.VirtualSensorDirectChannelWriter", "android.companion.virtual.sensor.VirtualSensorDirectChannelCallback", "android.hardware.SensorDirectChannel" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT32_MAX",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannels",
    "type" : "SparseArray<SharedMemoryWrapper>",
    "comment" : " Mapping from channel handle to channel shared memory region.",
    "links" : [ ]
  }, {
    "name" : "mChannelsLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguredChannels",
    "type" : "SparseArray<SparseArray<DirectChannelConfiguration>>",
    "comment" : " Mapping from sensor handle to channel handle to direct sensor configuration.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addChannel(@IntRange(from = 1) int channelHandle, @NonNull SharedMemory sharedMemory) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Adds a sensor direct channel handle and the relevant shared memory region.\n     *\n     * @throws ErrnoException if the mapping of the shared memory region failed.\n     *\n     * @see VirtualSensorDirectChannelCallback#onDirectChannelCreated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeChannel(@IntRange(from = 1) int channelHandle)",
    "returnType" : "void",
    "comment" : "\n     * Removes a sensor direct channel indicated by the handle and closes the relevant shared memory\n     * region.\n     *\n     * @see VirtualSensorDirectChannelCallback#onDirectChannelDestroyed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean configureChannel(@IntRange(from = 1) int channelHandle, @NonNull VirtualSensor sensor, @SensorDirectChannel.RateLevel int rateLevel, @IntRange(from = 1) int reportToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Configures a sensor direct channel indicated by the handle and prepares it for sensor event\n     * writes for the given sensor.\n     *\n     * @return Whether the configuration was successful.\n     *\n     * @see VirtualSensorDirectChannelCallback#onDirectChannelConfigured\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean writeSensorEvent(@NonNull VirtualSensor sensor, @NonNull VirtualSensorEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Writes a sensor event for the given sensor to all configured sensor direct channels for that\n     * sensor.\n     *\n     * @return Whether the write was successful.\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void addChannel(@IntRange(from = 1) int channelHandle, @NonNull SharedMemory sharedMemory) throws ErrnoException", "public void removeChannel(@IntRange(from = 1) int channelHandle)", "public boolean configureChannel(@IntRange(from = 1) int channelHandle, @NonNull VirtualSensor sensor, @SensorDirectChannel.RateLevel int rateLevel, @IntRange(from = 1) int reportToken)", "public boolean writeSensorEvent(@NonNull VirtualSensor sensor, @NonNull VirtualSensorEvent event)" ],
  "variableNames" : [ "TAG", "UINT32_MAX", "mChannels", "mChannelsLock", "mConfiguredChannels" ]
}