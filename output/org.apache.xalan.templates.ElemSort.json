{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemSort.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemSort",
  "comment" : "\n * Implement xsl:sort.\n * <pre>\n * <!ELEMENT xsl:sort EMPTY>\n * <!ATTLIST xsl:sort\n *   select %expr; \".\"\n *   lang %avt; #IMPLIED\n *   data-type %avt; \"text\"\n *   order %avt; \"ascending\"\n *   case-order %avt; #IMPLIED\n * >\n * <!-- xsl:sort cannot occur after any other elements or\n * any non-whitespace character -->\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#sorting\">sorting in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_selectExpression",
    "type" : "XPath",
    "comment" : "\n   * xsl:sort has a select attribute whose value is an expression.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_lang_avt",
    "type" : "AVT",
    "comment" : "\n   * lang specifies the language of the sort keys.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_dataType_avt",
    "type" : "AVT",
    "comment" : "\n   * data-type specifies the data type of the\n   * strings to be sorted.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_order_avt",
    "type" : "AVT",
    "comment" : "\n   * order specifies whether the strings should be sorted in ascending\n   * or descending order.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_caseorder_avt",
    "type" : "AVT",
    "comment" : "\n   * case-order has the value upper-first or lower-first.\n   * The default value is language dependent.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSelect(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"select\" attribute.\n   * xsl:sort has a select attribute whose value is an expression.\n   * For each node to be processed, the expression is evaluated\n   * with that node as the current node and with the complete\n   * list of nodes being processed in unsorted order as the current\n   * node list. The resulting object is converted to a string as if\n   * by a call to the string function; this string is used as the\n   * sort key for that node. The default value of the select attribute\n   * is ., which will cause the string-value of the current node to\n   * be used as the sort key.\n   *\n   * @param v Value to set for the \"select\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getSelect()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"select\" attribute.\n   * xsl:sort has a select attribute whose value is an expression.\n   * For each node to be processed, the expression is evaluated\n   * with that node as the current node and with the complete\n   * list of nodes being processed in unsorted order as the current\n   * node list. The resulting object is converted to a string as if\n   * by a call to the string function; this string is used as the\n   * sort key for that node. The default value of the select attribute\n   * is ., which will cause the string-value of the current node to\n   * be used as the sort key.\n   *\n   * @return The value of the \"select\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLang(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"lang\" attribute.\n   * lang specifies the language of the sort keys; it has the same\n   * range of values as xml:lang [XML]; if no lang value is\n   * specified, the language should be determined from the system environment.\n   *\n   * @param v The value to set for the \"lang\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getLang()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"lang\" attribute.\n   * lang specifies the language of the sort keys; it has the same\n   * range of values as xml:lang [XML]; if no lang value is\n   * specified, the language should be determined from the system environment.\n   *\n   * @return The value of the \"lang\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDataType(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"data-type\" attribute.\n   * <code>data-type</code> specifies the data type of the\n   * strings; the following values are allowed:\n   * <ul>\n   * <li>\n   * <code>text</code> specifies that the sort keys should be\n   * sorted lexicographically in the culturally correct manner for the\n   * language specified by <code>lang</code>.\n   * </li>\n   * <li>\n   * <code>number</code> specifies that the sort keys should be\n   * converted to numbers and then sorted according to the numeric value;\n   * the sort key is converted to a number as if by a call to the\n   * <b><a href=\"http://www.w3.org/TR/xpath#function-number\">number</a></b> function; the <code>lang</code>\n   * attribute is ignored.\n   * </li>\n   * <li>\n   * A <a href=\"http://www.w3.org/TR/REC-xml-names#NT-QName\">QName</a> with a prefix\n   * is expanded into an <a href=\"http://www.w3.org/TR/xpath#dt-expanded-name\">expanded-name</a> as described\n   * in <a href=\"#qname\">[<b>2.4 Qualified Names</b>]</a>; the expanded-name identifies the data-type;\n   * the behavior in this case is not specified by this document.\n   * </li>\n   * </ul>\n   * <p>The default value is <code>text</code>.</p>\n   * <blockquote>\n   * <b>NOTE: </b>The XSL Working Group plans that future versions of XSLT will\n   * leverage XML Schemas to define further values for this\n   * attribute.</blockquote>\n   *\n   * @param v Value to set for the \"data-type\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getDataType()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"data-type\" attribute.\n   * <code>data-type</code> specifies the data type of the\n   * strings; the following values are allowed:\n   * <ul>\n   * <li>\n   * <code>text</code> specifies that the sort keys should be\n   * sorted lexicographically in the culturally correct manner for the\n   * language specified by <code>lang</code>.\n   * </li>\n   * <li>\n   * <code>number</code> specifies that the sort keys should be\n   * converted to numbers and then sorted according to the numeric value;\n   * the sort key is converted to a number as if by a call to the\n   * <b><a href=\"http://www.w3.org/TR/xpath#function-number\">number</a></b> function; the <code>lang</code>\n   * attribute is ignored.\n   * </li>\n   * <li>\n   * A <a href=\"http://www.w3.org/TR/REC-xml-names#NT-QName\">QName</a> with a prefix\n   * is expanded into an <a href=\"http://www.w3.org/TR/xpath#dt-expanded-name\">expanded-name</a> as described\n   * in <a href=\"#qname\">[<b>2.4 Qualified Names</b>]</a>; the expanded-name identifies the data-type;\n   * the behavior in this case is not specified by this document.\n   * </li>\n   * </ul>\n   * <p>The default value is <code>text</code>.</p>\n   * <blockquote>\n   * <b>NOTE: </b>The XSL Working Group plans that future versions of XSLT will\n   * leverage XML Schemas to define further values for this\n   * attribute.</blockquote>\n   *\n   * @return The value of the \"data-type\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setOrder(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"order\" attribute.\n   * order specifies whether the strings should be sorted in ascending\n   * or descending order; ascending specifies ascending order; descending\n   * specifies descending order; the default is ascending.\n   *\n   * @param v The value to set for the \"order\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getOrder()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"order\" attribute.\n   * order specifies whether the strings should be sorted in ascending\n   * or descending order; ascending specifies ascending order; descending\n   * specifies descending order; the default is ascending.\n   *\n   * @return The value of the \"order\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setCaseOrder(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"case-order\" attribute.\n   * case-order has the value upper-first or lower-first; this applies\n   * when data-type=\"text\", and specifies that upper-case letters should\n   * sort before lower-case letters or vice-versa respectively.\n   * For example, if lang=\"en\", then A a B b are sorted with\n   * case-order=\"upper-first\" and a A b B are sorted with case-order=\"lower-first\".\n   * The default value is language dependent.\n   *\n   * @param v The value to set for the \"case-order\" attribute\n   * \n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getCaseOrder()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"case-order\" attribute.\n   * case-order has the value upper-first or lower-first; this applies\n   * when data-type=\"text\", and specifies that upper-case letters should\n   * sort before lower-case letters or vice-versa respectively.\n   * For example, if lang=\"en\", then A a B b are sorted with\n   * case-order=\"upper-first\" and a A b B are sorted with case-order=\"lower-first\".\n   * The default value is language dependent.\n   *\n   * @return The value of the \"case-order\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID of the element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Add a child to the child list.\n   *\n   * @param newChild Child to add to the child list\n   *\n   * @return Child just added to the child list\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSelect(XPath v)", "public XPath getSelect()", "public void setLang(AVT v)", "public AVT getLang()", "public void setDataType(AVT v)", "public AVT getDataType()", "public void setOrder(AVT v)", "public AVT getOrder()", "public void setCaseOrder(AVT v)", "public AVT getCaseOrder()", "public int getXSLToken()", "public String getNodeName()", "public Node appendChild(Node newChild) throws DOMException", "public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException" ],
  "variableNames" : [ "serialVersionUID", "m_selectExpression", "m_lang_avt", "m_dataType_avt", "m_order_avt", "m_caseorder_avt" ]
}