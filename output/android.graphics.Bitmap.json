{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/Bitmap.java",
  "packageName" : "android.graphics",
  "className" : "Bitmap",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DENSITY_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates that the bitmap was created for an unknown pixel density.\n     *\n     * @see Bitmap#getDensity()\n     * @see Bitmap#setDensity(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_ALLOCATION_SIZE",
    "type" : "long",
    "comment" : " pixel data.",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : " Convenience for JNI access",
    "links" : [ ]
  }, {
    "name" : "mRequestPremultiplied",
    "type" : "boolean",
    "comment" : "\n     * Represents whether the Bitmap's content is requested to be pre-multiplied.\n     * Note that isPremultiplied() does not directly return this value, because\n     * isPremultiplied() may never return true for a 565 Bitmap or a bitmap\n     * without alpha.\n     *\n     * setPremultiplied() does directly set the value so that setConfig() and\n     * setPremultiplied() aren't order dependent, despite being setters.\n     *\n     * The native bitmap's premultiplication state is kept up to date by\n     * pushing down this preference for every config change.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNinePatchChunk",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNinePatchInsets",
    "type" : "NinePatch.InsetStruct",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareBuffer",
    "type" : "WeakReference<HardwareBuffer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorSpace",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGainmap",
    "type" : "Gainmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDensity",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "sDefaultDensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllBitmaps",
    "type" : "WeakHashMap<Bitmap, Void>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "dumpData",
    "type" : "DumpData",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WORKING_COMPRESS_STORAGE",
    "type" : "int",
    "comment" : "\n     * Number of bytes of temp storage we use for communicating between the\n     * native compressor and the java OutputStream.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Bitmap>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setDefaultDensity(int density)",
    "returnType" : "void",
    "comment" : "\n     * For backwards compatibility, allows the app layer to change the default\n     * density when running old apps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getDefaultDensity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getNativeInstance()",
    "returnType" : "long",
    "comment" : "\n     * Return the pointer to the native object.\n     *\n     * @hide\n     * Must be public for access from android.graphics.pdf,\n     * but must not be called from outside the UI module.\n     ",
    "links" : [ ]
  }, {
    "name" : " void reinit(int width, int height, boolean requestPremultiplied)",
    "returnType" : "void",
    "comment" : "\n     * Native bitmap has been reconfigured, so set premult and cached\n     * width/height values\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDensity()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the density for this bitmap.</p>\n     *\n     * <p>The default density is the same density as the current display,\n     * unless the current application does not support different screen\n     * densities in which case it is\n     * {@link android.util.DisplayMetrics#DENSITY_DEFAULT}.  Note that\n     * compatibility mode is determined by the application that was initially\n     * loaded into a process -- applications that share the same process should\n     * all have the same compatibility, or ensure they explicitly set the\n     * density of their bitmaps appropriately.</p>\n     *\n     * @return A scaling factor of the default density or {@link #DENSITY_NONE}\n     *         if the scaling factor is unknown.\n     *\n     * @see #setDensity(int)\n     * @see android.util.DisplayMetrics#DENSITY_DEFAULT\n     * @see android.util.DisplayMetrics#densityDpi\n     * @see #DENSITY_NONE\n     ",
    "links" : [ "android.util.DisplayMetrics#DENSITY_DEFAULT", "#DENSITY_NONE" ]
  }, {
    "name" : "public void setDensity(int density)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specifies the density for this bitmap.  When the bitmap is\n     * drawn to a Canvas that also has a density, it will be scaled\n     * appropriately.</p>\n     *\n     * @param density The density scaling factor to use with this bitmap or\n     *        {@link #DENSITY_NONE} if the density is unknown.\n     *\n     * @see #getDensity()\n     * @see android.util.DisplayMetrics#DENSITY_DEFAULT\n     * @see android.util.DisplayMetrics#densityDpi\n     * @see #DENSITY_NONE\n     ",
    "links" : [ "#DENSITY_NONE" ]
  }, {
    "name" : "public void reconfigure(int width, int height, @NonNull Config config)",
    "returnType" : "void",
    "comment" : "\n     * <p>Modifies the bitmap to have a specified width, height, and {@link\n     * Config}, without affecting the underlying allocation backing the bitmap.\n     * Bitmap pixel data is not re-initialized for the new configuration.</p>\n     *\n     * <p>This method can be used to avoid allocating a new bitmap, instead\n     * reusing an existing bitmap's allocation for a new configuration of equal\n     * or lesser size. If the Bitmap's allocation isn't large enough to support\n     * the new configuration, an IllegalArgumentException will be thrown and the\n     * bitmap will not be modified.</p>\n     *\n     * <p>The result of {@link #getByteCount()} will reflect the new configuration,\n     * while {@link #getAllocationByteCount()} will reflect that of the initial\n     * configuration.</p>\n     *\n     * <p>Note: This may change this result of hasAlpha(). When converting to 565,\n     * the new bitmap will always be considered opaque. When converting from 565,\n     * the new bitmap will be considered non-opaque, and will respect the value\n     * set by setPremultiplied().</p>\n     *\n     * <p>WARNING: This method should NOT be called on a bitmap currently in use\n     * by the view system, Canvas, or the AndroidBitmap NDK API. It does not\n     * make guarantees about how the underlying pixel buffer is remapped to the\n     * new config, just that the allocation is reused. Additionally, the view\n     * system does not account for bitmap properties being modifying during use,\n     * e.g. while attached to drawables.</p>\n     *\n     * <p>In order to safely ensure that a Bitmap is no longer in use by the\n     * View system it is necessary to wait for a draw pass to occur after\n     * invalidate()'ing any view that had previously drawn the Bitmap in the last\n     * draw pass due to hardware acceleration's caching of draw commands. As\n     * an example, here is how this can be done for an ImageView:\n     * <pre class=\"prettyprint\">\n     *      ImageView myImageView = ...;\n     *      final Bitmap myBitmap = ...;\n     *      myImageView.setImageDrawable(null);\n     *      myImageView.post(new Runnable() {\n     *          public void run() {\n     *              // myBitmap is now no longer in use by the ImageView\n     *              // and can be safely reconfigured.\n     *              myBitmap.reconfigure(...);\n     *          }\n     *      });\n     * </pre></p>\n     *\n     * @see #setWidth(int)\n     * @see #setHeight(int)\n     * @see #setConfig(Config)\n     ",
    "links" : [ "#getByteCount()", "Config", "#getAllocationByteCount()" ]
  }, {
    "name" : "public void setWidth(int width)",
    "returnType" : "void",
    "comment" : "\n     * <p>Convenience method for calling {@link #reconfigure(int, int, Config)}\n     * with the current height and config.</p>\n     *\n     * <p>WARNING: this method should not be used on bitmaps currently used by\n     * the view system, see {@link #reconfigure(int, int, Config)} for more\n     * details.</p>\n     *\n     * @see #reconfigure(int, int, Config)\n     * @see #setHeight(int)\n     * @see #setConfig(Config)\n     ",
    "links" : [ "#reconfigure(int" ]
  }, {
    "name" : "public void setHeight(int height)",
    "returnType" : "void",
    "comment" : "\n     * <p>Convenience method for calling {@link #reconfigure(int, int, Config)}\n     * with the current width and config.</p>\n     *\n     * <p>WARNING: this method should not be used on bitmaps currently used by\n     * the view system, see {@link #reconfigure(int, int, Config)} for more\n     * details.</p>\n     *\n     * @see #reconfigure(int, int, Config)\n     * @see #setWidth(int)\n     * @see #setConfig(Config)\n     ",
    "links" : [ "#reconfigure(int" ]
  }, {
    "name" : "public void setConfig(@NonNull Config config)",
    "returnType" : "void",
    "comment" : "\n     * <p>Convenience method for calling {@link #reconfigure(int, int, Config)}\n     * with the current height and width.</p>\n     *\n     * <p>WARNING: this method should not be used on bitmaps currently used by\n     * the view system, see {@link #reconfigure(int, int, Config)} for more\n     * details.</p>\n     *\n     * @see #reconfigure(int, int, Config)\n     * @see #setWidth(int)\n     * @see #setHeight(int)\n     ",
    "links" : [ "#reconfigure(int" ]
  }, {
    "name" : "private void setNinePatchChunk(byte[] chunk)",
    "returnType" : "void",
    "comment" : "\n     * Sets the nine patch chunk.\n     *\n     * @param chunk The definition of the nine patch\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Free the native object associated with this bitmap, and clear the\n     * reference to the pixel data. This will not free the pixel data synchronously;\n     * it simply allows it to be garbage collected if there are no other references.\n     * The bitmap is marked as \"dead\", meaning it will throw an exception if\n     * getPixels() or setPixels() is called, and will draw nothing. This operation\n     * cannot be reversed, so it should only be called if you are sure there are no\n     * further uses for the bitmap. This is an advanced call, and normally need\n     * not be called, since the normal GC process will free up this memory when\n     * there are no more references to this bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isRecycled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this bitmap has been recycled. If so, then it is an error\n     * to try to access its pixels, and the bitmap will not draw.\n     *\n     * @return true if the bitmap has been recycled\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGenerationId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the generation ID of this bitmap. The generation ID changes\n     * whenever the bitmap is modified. This can be used as an efficient way to\n     * check if a bitmap has changed.\n     *\n     * @return The current generation ID for this bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkRecycled(String errorMessage)",
    "returnType" : "void",
    "comment" : "\n     * This is called by methods that want to throw an exception if the bitmap\n     * has already been recycled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkHardware(String errorMessage)",
    "returnType" : "void",
    "comment" : "\n     * This is called by methods that want to throw an exception if the bitmap\n     * is {@link Config#HARDWARE}.\n     ",
    "links" : [ "#HARDWARE" ]
  }, {
    "name" : "private static void checkXYSign(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Common code for checking that x and y are >= 0\n     *\n     * @param x x coordinate to ensure is >= 0\n     * @param y y coordinate to ensure is >= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkWidthHeight(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Common code for checking that width and height are > 0\n     *\n     * @param width  width to ensure is > 0\n     * @param height height to ensure is > 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyPixelsToBuffer(@NonNull Buffer dst)",
    "returnType" : "void",
    "comment" : "\n     * <p>Copy the bitmap's pixels into the specified buffer (allocated by the\n     * caller). An exception is thrown if the buffer is not large enough to\n     * hold all of the pixels (taking into account the number of bytes per\n     * pixel) or if the Buffer subclass is not one of the support types\n     * (ByteBuffer, ShortBuffer, IntBuffer).</p>\n     * <p>The content of the bitmap is copied into the buffer as-is. This means\n     * that if this bitmap stores its pixels pre-multiplied\n     * (see {@link #isPremultiplied()}, the values in the buffer will also be\n     * pre-multiplied. The pixels remain in the color space of the bitmap.</p>\n     * <p>After this method returns, the current position of the buffer is\n     * updated: the position is incremented by the number of elements written\n     * in the buffer.</p>\n     * @throws IllegalStateException if the bitmap's config is {@link Config#HARDWARE}\n     ",
    "links" : [ "#isPremultiplied()", "#HARDWARE" ]
  }, {
    "name" : "public void copyPixelsFromBuffer(@NonNull Buffer src)",
    "returnType" : "void",
    "comment" : "\n     * <p>Copy the pixels from the buffer, beginning at the current position,\n     * overwriting the bitmap's pixels. The data in the buffer is not changed\n     * in any way (unlike setPixels(), which converts from unpremultipled 32bit\n     * to whatever the bitmap's native format is. The pixels in the source\n     * buffer are assumed to be in the bitmap's color space.</p>\n     * <p>After this method returns, the current position of the buffer is\n     * updated: the position is incremented by the number of elements read from\n     * the buffer. If you need to read the bitmap from the buffer again you must\n     * first rewind the buffer.</p>\n     * @throws IllegalStateException if the bitmap's config is {@link Config#HARDWARE}\n     ",
    "links" : [ "#HARDWARE" ]
  }, {
    "name" : "private void noteHardwareBitmapSlowCall()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap copy(@NonNull Config config, boolean isMutable)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Tries to make a new bitmap based on the dimensions of this bitmap,\n     * setting the new bitmap's config to the one specified, and then copying\n     * this bitmap's pixels into the new bitmap. If the conversion is not\n     * supported, or the allocator fails, then this returns NULL.  The returned\n     * bitmap has the same density and color space as the original, except in\n     * the following cases. When copying to {@link Config#ALPHA_8}, the color\n     * space is dropped. When copying to or from {@link Config#RGBA_F16},\n     * EXTENDED or non-EXTENDED variants may be adjusted as appropriate.\n     *\n     * @param config    The desired config for the resulting bitmap\n     * @param isMutable True if the resulting bitmap should be mutable (i.e.\n     *                  its pixels can be modified)\n     * @return the new bitmap, or null if the copy could not be made.\n     * @throws IllegalArgumentException if config is {@link Config#HARDWARE} and isMutable is true\n     ",
    "links" : [ "#HARDWARE", "#ALPHA_8", "#RGBA_F16" ]
  }, {
    "name" : "public Bitmap createAshmemBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates a new immutable bitmap backed by ashmem which can efficiently\n     * be passed between processes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap asShared()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Return an immutable bitmap backed by shared memory which can be\n     * efficiently passed between processes via Parcelable.\n     *\n     * <p>If this bitmap already meets these criteria it will return itself.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SharedMemory getSharedMemory()",
    "returnType" : "SharedMemory",
    "comment" : "\n     * Returns the shared memory handle to the pixel storage if the bitmap is already using\n     * shared memory and null if it is not.  The SharedMemory object is then useful to then pass\n     * through HIDL APIs (e.g. WearOS's DisplayOffload service).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap wrapHardwareBuffer(@NonNull HardwareBuffer hardwareBuffer, @Nullable ColorSpace colorSpace)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a hardware bitmap backed by a {@link HardwareBuffer}.\n     *\n     * <p>The passed HardwareBuffer's usage flags must contain\n     * {@link HardwareBuffer#USAGE_GPU_SAMPLED_IMAGE}.\n     *\n     * <p>The bitmap will keep a reference to the buffer so that callers can safely close the\n     * HardwareBuffer without affecting the Bitmap. However the HardwareBuffer must not be\n     * modified while a wrapped Bitmap is accessing it. Doing so will result in undefined behavior.\n     *\n     * @param hardwareBuffer The HardwareBuffer to wrap.\n     * @param colorSpace The color space of the bitmap. Must be a {@link ColorSpace.Rgb} colorspace.\n     *                   If null, SRGB is assumed.\n     * @return A bitmap wrapping the buffer, or null if there was a problem creating the bitmap.\n     * @throws IllegalArgumentException if the HardwareBuffer has an invalid usage, or an invalid\n     *                                  colorspace is given.\n     ",
    "links" : [ "ColorSpace.Rgb", "android.hardware.HardwareBuffer", "android.hardware.HardwareBuffer#USAGE_GPU_SAMPLED_IMAGE" ]
  }, {
    "name" : "public static Bitmap createScaledBitmap(@NonNull Bitmap src, int dstWidth, int dstHeight, boolean filter)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates a new bitmap, scaled from an existing bitmap, when possible. If the\n     * specified width and height are the same as the current width and height of\n     * the source bitmap, the source bitmap is returned and no new bitmap is\n     * created.\n     *\n     * @param src       The source bitmap.\n     * @param dstWidth  The new bitmap's desired width.\n     * @param dstHeight The new bitmap's desired height.\n     * @param filter    Whether or not bilinear filtering should be used when scaling the\n     *                  bitmap. If this is true then bilinear filtering will be used when\n     *                  scaling which has better image quality at the cost of worse performance.\n     *                  If this is false then nearest-neighbor scaling is used instead which\n     *                  will have worse image quality but is faster. Recommended default\n     *                  is to set filter to 'true' as the cost of bilinear filtering is\n     *                  typically minimal and the improved image quality is significant.\n     * @return The new scaled bitmap or the source bitmap if no scaling is required.\n     * @throws IllegalArgumentException if width is <= 0, or height is <= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull Bitmap src)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a bitmap from the source bitmap. The new bitmap may\n     * be the same object as source, or a copy may have been made.  It is\n     * initialized with the same density and color space as the original bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull Bitmap source, int x, int y, int width, int height)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a bitmap from the specified subset of the source\n     * bitmap. The new bitmap may be the same object as source, or a copy may\n     * have been made. It is initialized with the same density and color space\n     * as the original bitmap.\n     *\n     * @param source   The bitmap we are subsetting\n     * @param x        The x coordinate of the first pixel in source\n     * @param y        The y coordinate of the first pixel in source\n     * @param width    The number of pixels in each row\n     * @param height   The number of rows\n     * @return A copy of a subset of the source bitmap or the source bitmap itself.\n     * @throws IllegalArgumentException if the x, y, width, height values are\n     *         outside of the dimensions of the source bitmap, or width is <= 0,\n     *         or height is <= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull Bitmap source, int x, int y, int width, int height, @Nullable Matrix m, boolean filter)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a bitmap from subset of the source bitmap,\n     * transformed by the optional matrix. The new bitmap may be the\n     * same object as source, or a copy may have been made. It is\n     * initialized with the same density and color space as the original\n     * bitmap.\n     *\n     * If the source bitmap is immutable and the requested subset is the\n     * same as the source bitmap itself, then the source bitmap is\n     * returned and no new bitmap is created.\n     *\n     * The returned bitmap will always be mutable except in the following scenarios:\n     * (1) In situations where the source bitmap is returned and the source bitmap is immutable\n     *\n     * (2) The source bitmap is a hardware bitmap. That is {@link #getConfig()} is equivalent to\n     * {@link Config#HARDWARE}\n     *\n     * @param source   The bitmap we are subsetting\n     * @param x        The x coordinate of the first pixel in source\n     * @param y        The y coordinate of the first pixel in source\n     * @param width    The number of pixels in each row\n     * @param height   The number of rows\n     * @param m        Optional matrix to be applied to the pixels\n     * @param filter   true if the source should be filtered.\n     *                   Only applies if the matrix contains more than just\n     *                   translation.\n     * @return A bitmap that represents the specified subset of source\n     * @throws IllegalArgumentException if the x, y, width, height values are\n     *         outside of the dimensions of the source bitmap, or width is <= 0,\n     *         or height is <= 0, or if the source bitmap has already been recycled\n     ",
    "links" : [ "#HARDWARE", "#getConfig()" ]
  }, {
    "name" : "private static Bitmap transformGainmap(Bitmap source, Matrix m, int neww, int newh, Paint paint, Rect srcR, RectF dstR, RectF deviceR)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap createBitmap(int width, int height, @NonNull Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a mutable bitmap with the specified width and height.  Its\n     * initial density is as per {@link #getDensity}. The newly created\n     * bitmap is in the {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create.\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         Config is Config.HARDWARE, because hardware bitmaps are always immutable\n     ",
    "links" : [ "#getDensity", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static Bitmap createBitmap(@Nullable DisplayMetrics display, int width, int height, @NonNull Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a mutable bitmap with the specified width and height.  Its\n     * initial density is determined from the given {@link DisplayMetrics}.\n     * The newly created bitmap is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @param display  Display metrics for the display this bitmap will be\n     *                 drawn on.\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create.\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         Config is Config.HARDWARE, because hardware bitmaps are always immutable\n     ",
    "links" : [ "ColorSpace.Named#SRGB", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public static Bitmap createBitmap(int width, int height, @NonNull Config config, boolean hasAlpha)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a mutable bitmap with the specified width and height.  Its\n     * initial density is as per {@link #getDensity}. The newly created\n     * bitmap is in the {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create.\n     * @param hasAlpha If the bitmap is ARGB_8888, RGBA_16F, or RGBA_1010102 this flag can be\n     *                 used to mark the bitmap as opaque. Doing so will clear the bitmap in black\n     *                 instead of transparent.\n     *\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         Config is Config.HARDWARE, because hardware bitmaps are always immutable\n     ",
    "links" : [ "#getDensity", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static Bitmap createBitmap(int width, int height, @NonNull Config config, boolean hasAlpha, @NonNull ColorSpace colorSpace)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a mutable bitmap with the specified width and height.  Its\n     * initial density is as per {@link #getDensity}.\n     *\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create.\n     * @param hasAlpha If the bitmap is ARGB_8888, RGBA_16F, or RGBA_1010102 this flag can be\n     *                 used to mark the bitmap as opaque. Doing so will clear the bitmap in black\n     *                 instead of transparent.\n     * @param colorSpace The color space of the bitmap. If the config is {@link Config#RGBA_F16}\n     *                   and {@link ColorSpace.Named#SRGB sRGB} or\n     *                   {@link ColorSpace.Named#LINEAR_SRGB Linear sRGB} is provided then the\n     *                   corresponding extended range variant is assumed.\n     *\n     * @throws IllegalArgumentException if the width or height are <= 0, if\n     *         Config is Config.HARDWARE (because hardware bitmaps are always\n     *         immutable), if the specified color space is not {@link ColorSpace.Model#RGB RGB},\n     *         if the specified color space's transfer function is not an\n     *         {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}, or if\n     *         the color space is null\n     ",
    "links" : [ "ColorSpace.Named#LINEAR_SRGB", "ColorSpace.Rgb.TransferParameters", "#RGBA_F16", "#getDensity", "ColorSpace.Named#SRGB", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public static Bitmap createBitmap(@Nullable DisplayMetrics display, int width, int height, @NonNull Config config, boolean hasAlpha)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a mutable bitmap with the specified width and height.  Its\n     * initial density is determined from the given {@link DisplayMetrics}.\n     * The newly created bitmap is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @param display  Display metrics for the display this bitmap will be\n     *                 drawn on.\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create.\n     * @param hasAlpha If the bitmap is ARGB_8888, RGBA_16F, or RGBA_1010102 this flag can be\n     *                 used to mark the bitmap as opaque. Doing so will clear the bitmap in black\n     *                 instead of transparent.\n     *\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         Config is Config.HARDWARE, because hardware bitmaps are always immutable\n     ",
    "links" : [ "ColorSpace.Named#SRGB", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public static Bitmap createBitmap(@Nullable DisplayMetrics display, int width, int height, @NonNull Config config, boolean hasAlpha, @NonNull ColorSpace colorSpace)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a mutable bitmap with the specified width and height.  Its\n     * initial density is determined from the given {@link DisplayMetrics}.\n     * The newly created bitmap is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @param display  Display metrics for the display this bitmap will be\n     *                 drawn on.\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create.\n     * @param hasAlpha If the bitmap is ARGB_8888, RGBA_16F, or RGBA_1010102 this flag can be\n     *                 used to mark the bitmap as opaque. Doing so will clear the bitmap in black\n     *                 instead of transparent.\n     * @param colorSpace The color space of the bitmap. If the config is {@link Config#RGBA_F16}\n     *                   and {@link ColorSpace.Named#SRGB sRGB} or\n     *                   {@link ColorSpace.Named#LINEAR_SRGB Linear sRGB} is provided then the\n     *                   corresponding extended range variant is assumed.\n     *\n     * @throws IllegalArgumentException if the width or height are <= 0, if\n     *         Config is Config.HARDWARE (because hardware bitmaps are always\n     *         immutable), if the specified color space is not {@link ColorSpace.Model#RGB RGB},\n     *         if the specified color space's transfer function is not an\n     *         {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}, or if\n     *         the color space is null\n     ",
    "links" : [ "ColorSpace.Named#LINEAR_SRGB", "ColorSpace.Rgb.TransferParameters", "#RGBA_F16", "ColorSpace.Named#SRGB", "android.util.DisplayMetrics", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull @ColorInt int[] colors, int offset, int stride, int width, int height, @NonNull Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a immutable bitmap with the specified width and height, with each\n     * pixel value set to the corresponding value in the colors array.  Its\n     * initial density is as per {@link #getDensity}. The newly created\n     * bitmap is in the {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param colors   Array of sRGB {@link Color colors} used to initialize the pixels.\n     * @param offset   Number of values to skip before the first color in the\n     *                 array of colors.\n     * @param stride   Number of colors in the array between rows (must be >=\n     *                 width or <= -width).\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create. If the config does not\n     *                 support per-pixel alpha (e.g. RGB_565), then the alpha\n     *                 bytes in the colors[] will be ignored (assumed to be FF)\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         the color array's length is less than the number of pixels.\n     ",
    "links" : [ "android.graphics.Color", "#getDensity", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull DisplayMetrics display, @NonNull @ColorInt int[] colors, int offset, int stride, int width, int height, @NonNull Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a immutable bitmap with the specified width and height, with each\n     * pixel value set to the corresponding value in the colors array.  Its\n     * initial density is determined from the given {@link DisplayMetrics}.\n     * The newly created bitmap is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @param display  Display metrics for the display this bitmap will be\n     *                 drawn on.\n     * @param colors   Array of sRGB {@link Color colors} used to initialize the pixels.\n     * @param offset   Number of values to skip before the first color in the\n     *                 array of colors.\n     * @param stride   Number of colors in the array between rows (must be >=\n     *                 width or <= -width).\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create. If the config does not\n     *                 support per-pixel alpha (e.g. RGB_565), then the alpha\n     *                 bytes in the colors[] will be ignored (assumed to be FF)\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         the color array's length is less than the number of pixels.\n     ",
    "links" : [ "android.graphics.Color", "ColorSpace.Named#SRGB", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull @ColorInt int[] colors, int width, int height, Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a immutable bitmap with the specified width and height, with each\n     * pixel value set to the corresponding value in the colors array.  Its\n     * initial density is as per {@link #getDensity}. The newly created\n     * bitmap is in the {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param colors   Array of sRGB {@link Color colors} used to initialize the pixels.\n     *                 This array must be at least as large as width * height.\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create. If the config does not\n     *                 support per-pixel alpha (e.g. RGB_565), then the alpha\n     *                 bytes in the colors[] will be ignored (assumed to be FF)\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         the color array's length is less than the number of pixels.\n     ",
    "links" : [ "android.graphics.Color", "#getDensity", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static Bitmap createBitmap(@Nullable DisplayMetrics display, @NonNull @ColorInt int[] colors, int width, int height, @NonNull Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a immutable bitmap with the specified width and height, with each\n     * pixel value set to the corresponding value in the colors array.  Its\n     * initial density is determined from the given {@link DisplayMetrics}.\n     * The newly created bitmap is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @param display  Display metrics for the display this bitmap will be\n     *                 drawn on.\n     * @param colors   Array of sRGB {@link Color colors} used to initialize the pixels.\n     *                 This array must be at least as large as width * height.\n     * @param width    The width of the bitmap\n     * @param height   The height of the bitmap\n     * @param config   The bitmap config to create. If the config does not\n     *                 support per-pixel alpha (e.g. RGB_565), then the alpha\n     *                 bytes in the colors[] will be ignored (assumed to be FF)\n     * @throws IllegalArgumentException if the width or height are <= 0, or if\n     *         the color array's length is less than the number of pixels.\n     ",
    "links" : [ "android.graphics.Color", "ColorSpace.Named#SRGB", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull Picture source)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates a Bitmap from the given {@link Picture} source of recorded drawing commands.\n     *\n     * Equivalent to calling {@link #createBitmap(Picture, int, int, Config)} with\n     * width and height the same as the Picture's width and height and a Config.HARDWARE\n     * config.\n     *\n     * @param source The recorded {@link Picture} of drawing commands that will be\n     *               drawn into the returned Bitmap.\n     * @return An immutable bitmap with a HARDWARE config whose contents are created\n     * from the recorded drawing commands in the Picture source.\n     ",
    "links" : [ "android.graphics.Picture", "#createBitmap(Picture" ]
  }, {
    "name" : "public static Bitmap createBitmap(@NonNull Picture source, int width, int height, @NonNull Config config)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates a Bitmap from the given {@link Picture} source of recorded drawing commands.\n     *\n     * The bitmap will be immutable with the given width and height. If the width and height\n     * are not the same as the Picture's width & height, the Picture will be scaled to\n     * fit the given width and height.\n     *\n     * @param source The recorded {@link Picture} of drawing commands that will be\n     *               drawn into the returned Bitmap.\n     * @param width The width of the bitmap to create. The picture's width will be\n     *              scaled to match if necessary.\n     * @param height The height of the bitmap to create. The picture's height will be\n     *              scaled to match if necessary.\n     * @param config The {@link Config} of the created bitmap.\n     *\n     * @return An immutable bitmap with a configuration specified by the config parameter\n     ",
    "links" : [ "android.graphics.Picture", "Config" ]
  }, {
    "name" : "public byte[] getNinePatchChunk()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns an optional array of private data, used by the UI system for\n     * some bitmaps. Not intended to be called by applications.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOpticalInsets(@NonNull Rect outInsets)",
    "returnType" : "void",
    "comment" : "\n     * Populates a rectangle with the bitmap's optical insets.\n     *\n     * @param outInsets Rect to populate with optical insets\n     *\n     * @hide\n     * Must be public for access from android.graphics.drawable,\n     * but must not be called from outside the UI module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NinePatch.InsetStruct getNinePatchInsets()",
    "returnType" : "NinePatch.InsetStruct",
    "comment" : "\n     * @hide\n     * Must be public for access from android.graphics.drawable,\n     * but must not be called from outside the UI module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpAll(@Nullable String format)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *\n     * Dump all the bitmaps with their contents compressed into dumpData\n     *\n     * @param format  format of the compressed image, null to clear dump data\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean compress(@NonNull CompressFormat format, int quality, @NonNull OutputStream stream)",
    "returnType" : "boolean",
    "comment" : "\n     * Write a compressed version of the bitmap to the specified outputstream.\n     * If this returns true, the bitmap can be reconstructed by passing a\n     * corresponding inputstream to BitmapFactory.decodeStream(). Note: not\n     * all Formats support all bitmap configs directly, so it is possible that\n     * the returned bitmap from BitmapFactory could be in a different bitdepth,\n     * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque\n     * pixels).\n     *\n     * @param format   The format of the compressed image\n     * @param quality  Hint to the compressor, 0-100. The value is interpreted\n     *                 differently depending on the {@link CompressFormat}.\n     * @param stream   The outputstream to write the compressed data.\n     * @return true if successfully compressed to the specified stream.\n     ",
    "links" : [ "CompressFormat" ]
  }, {
    "name" : "public final boolean isMutable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the bitmap is marked as mutable (i.e.&nbsp;can be drawn into)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setImmutable()",
    "returnType" : "void",
    "comment" : "\n     * Marks the Bitmap as immutable. Further modifications to this Bitmap are disallowed.\n     * After this method is called, this Bitmap cannot be made mutable again and subsequent calls\n     * to {@link #reconfigure(int, int, Config)}, {@link #setPixel(int, int, int)},\n     * {@link #setPixels(int[], int, int, int, int, int, int)} and {@link #eraseColor(int)} will\n     * fail and throw an IllegalStateException.\n     ",
    "links" : [ "#setPixels(int", "#reconfigure(int", "#eraseColor(int)", "#setPixel(int" ]
  }, {
    "name" : "public final boolean isPremultiplied()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether pixels stored in this bitmaps are stored pre-multiplied.\n     * When a pixel is pre-multiplied, the RGB components have been multiplied by\n     * the alpha component. For instance, if the original color is a 50%\n     * translucent red <code>(128, 255, 0, 0)</code>, the pre-multiplied form is\n     * <code>(128, 128, 0, 0)</code>.</p>\n     *\n     * <p>This method always returns false if {@link #getConfig()} is\n     * {@link Bitmap.Config#RGB_565}.</p>\n     *\n     * <p>The return value is undefined if {@link #getConfig()} is\n     * {@link Bitmap.Config#ALPHA_8}.</p>\n     *\n     * <p>This method only returns true if {@link #hasAlpha()} returns true.\n     * A bitmap with no alpha channel can be used both as a pre-multiplied and\n     * as a non pre-multiplied bitmap.</p>\n     *\n     * <p>Only pre-multiplied bitmaps may be drawn by the view system or\n     * {@link Canvas}. If a non-pre-multiplied bitmap with an alpha channel is\n     * drawn to a Canvas, a RuntimeException will be thrown.</p>\n     *\n     * @return true if the underlying pixels have been pre-multiplied, false\n     *         otherwise\n     *\n     * @see Bitmap#setPremultiplied(boolean)\n     * @see BitmapFactory.Options#inPremultiplied\n     ",
    "links" : [ "Bitmap.Config#RGB_565", "#hasAlpha()", "#getConfig()", "Bitmap.Config#ALPHA_8", "android.graphics.Canvas" ]
  }, {
    "name" : "public final void setPremultiplied(boolean premultiplied)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the bitmap should treat its data as pre-multiplied.\n     *\n     * <p>Bitmaps are always treated as pre-multiplied by the view system and\n     * {@link Canvas} for performance reasons. Storing un-pre-multiplied data in\n     * a Bitmap (through {@link #setPixel}, {@link #setPixels}, or {@link\n     * BitmapFactory.Options#inPremultiplied BitmapFactory.Options.inPremultiplied})\n     * can lead to incorrect blending if drawn by the framework.</p>\n     *\n     * <p>This method will not affect the behavior of a bitmap without an alpha\n     * channel, or if {@link #hasAlpha()} returns false.</p>\n     *\n     * <p>Calling {@link #createBitmap} or {@link #createScaledBitmap} with a source\n     * Bitmap whose colors are not pre-multiplied may result in a RuntimeException,\n     * since those functions require drawing the source, which is not supported for\n     * un-pre-multiplied Bitmaps.</p>\n     *\n     * @see Bitmap#isPremultiplied()\n     * @see BitmapFactory.Options#inPremultiplied\n     ",
    "links" : [ "#hasAlpha()", "#createScaledBitmap", "#setPixel", "BitmapFactory.Options#inPremultiplied", "#setPixels", "#createBitmap", "android.graphics.Canvas" ]
  }, {
    "name" : "public final int getWidth()",
    "returnType" : "int",
    "comment" : " Returns the bitmap's width ",
    "links" : [ ]
  }, {
    "name" : "public final int getHeight()",
    "returnType" : "int",
    "comment" : " Returns the bitmap's height ",
    "links" : [ ]
  }, {
    "name" : "public int getScaledWidth(@NonNull Canvas canvas)",
    "returnType" : "int",
    "comment" : "\n     * Convenience for calling {@link #getScaledWidth(int)} with the target\n     * density of the given {@link Canvas}.\n     ",
    "links" : [ "android.graphics.Canvas", "#getScaledWidth(int)" ]
  }, {
    "name" : "public int getScaledHeight(@NonNull Canvas canvas)",
    "returnType" : "int",
    "comment" : "\n     * Convenience for calling {@link #getScaledHeight(int)} with the target\n     * density of the given {@link Canvas}.\n     ",
    "links" : [ "android.graphics.Canvas", "#getScaledHeight(int)" ]
  }, {
    "name" : "public int getScaledWidth(@NonNull DisplayMetrics metrics)",
    "returnType" : "int",
    "comment" : "\n     * Convenience for calling {@link #getScaledWidth(int)} with the target\n     * density of the given {@link DisplayMetrics}.\n     ",
    "links" : [ "#getScaledWidth(int)", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public int getScaledHeight(@NonNull DisplayMetrics metrics)",
    "returnType" : "int",
    "comment" : "\n     * Convenience for calling {@link #getScaledHeight(int)} with the target\n     * density of the given {@link DisplayMetrics}.\n     ",
    "links" : [ "#getScaledHeight(int)", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public int getScaledWidth(int targetDensity)",
    "returnType" : "int",
    "comment" : "\n     * Convenience method that returns the width of this bitmap divided\n     * by the density scale factor.\n     *\n     * Returns the bitmap's width multiplied by the ratio of the target density to the bitmap's\n     * source density\n     *\n     * @param targetDensity The density of the target canvas of the bitmap.\n     * @return The scaled width of this bitmap, according to the density scale factor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScaledHeight(int targetDensity)",
    "returnType" : "int",
    "comment" : "\n     * Convenience method that returns the height of this bitmap divided\n     * by the density scale factor.\n     *\n     * Returns the bitmap's height multiplied by the ratio of the target density to the bitmap's\n     * source density\n     *\n     * @param targetDensity The density of the target canvas of the bitmap.\n     * @return The scaled height of this bitmap, according to the density scale factor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int scaleFromDensity(int size, int sdensity, int tdensity)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Must be public for access from android.graphics.drawable,\n     * but must not be called from outside the UI module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getRowBytes()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of bytes between rows in the bitmap's pixels. Note that\n     * this refers to the pixels as stored natively by the bitmap. If you call\n     * getPixels() or setPixels(), then the pixels are uniformly treated as\n     * 32bit values, packed according to the Color class.\n     *\n     * <p>As of {@link android.os.Build.VERSION_CODES#KITKAT}, this method\n     * should not be used to calculate the memory usage of the bitmap. Instead,\n     * see {@link #getAllocationByteCount()}.\n     *\n     * @return number of bytes between rows of the native bitmap pixels.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT", "#getAllocationByteCount()" ]
  }, {
    "name" : "public final int getByteCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum number of bytes that can be used to store this bitmap's pixels.\n     *\n     * <p>As of {@link android.os.Build.VERSION_CODES#KITKAT}, the result of this method can\n     * no longer be used to determine memory usage of a bitmap. See {@link\n     * #getAllocationByteCount()}.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT", "#getAllocationByteCount()" ]
  }, {
    "name" : "public final int getAllocationByteCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the allocated memory used to store this bitmap's pixels.\n     *\n     * <p>This can be larger than the result of {@link #getByteCount()} if a bitmap is reused to\n     * decode other bitmaps of smaller size, or by manual reconfiguration. See {@link\n     * #reconfigure(int, int, Config)}, {@link #setWidth(int)}, {@link #setHeight(int)}, {@link\n     * #setConfig(Bitmap.Config)}, and {@link BitmapFactory.Options#inBitmap\n     * BitmapFactory.Options.inBitmap}. If a bitmap is not modified in this way, this value will be\n     * the same as that returned by {@link #getByteCount()}.</p>\n     *\n     * <p>This value will not change over the lifetime of a Bitmap.</p>\n     *\n     * @see #reconfigure(int, int, Config)\n     ",
    "links" : [ "BitmapFactory.Options#inBitmapBitmapFactory.Options.inBitmap", "#getByteCount()", "#reconfigure(int", "#setWidth(int)", "#setConfig(Bitmap.Config)", "#setHeight(int)" ]
  }, {
    "name" : "public final Config getConfig()",
    "returnType" : "Config",
    "comment" : "\n     * If the bitmap's internal config is in one of the public formats, return\n     * that config, otherwise return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasAlpha()",
    "returnType" : "boolean",
    "comment" : " Returns true if the bitmap's config supports per-pixel alpha, and\n     * if the pixels may contain non-opaque alpha values. For some configs,\n     * this is always false (e.g. RGB_565), since they do not support per-pixel\n     * alpha. However, for configs that do, the bitmap may be flagged to be\n     * known that all of its pixels are opaque. In this case hasAlpha() will\n     * also return false. If a config such as ARGB_8888 is not so flagged,\n     * it will return true by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHasAlpha(boolean hasAlpha)",
    "returnType" : "void",
    "comment" : "\n     * Tell the bitmap if all of the pixels are known to be opaque (false)\n     * or if some of the pixels may contain non-opaque alpha values (true).\n     * Note, for some configs (e.g. RGB_565) this call is ignored, since it\n     * does not support per-pixel alpha values.\n     *\n     * This is meant as a drawing hint, as in some cases a bitmap that is known\n     * to be opaque can take a faster drawing case than one that may have\n     * non-opaque per-pixel alpha values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasMipMap()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the renderer responsible for drawing this\n     * bitmap should attempt to use mipmaps when this bitmap is drawn\n     * scaled down.\n     *\n     * If you know that you are going to draw this bitmap at less than\n     * 50% of its original size, you may be able to obtain a higher\n     * quality\n     *\n     * This property is only a suggestion that can be ignored by the\n     * renderer. It is not guaranteed to have any effect.\n     *\n     * @return true if the renderer should attempt to use mipmaps,\n     *         false otherwise\n     *\n     * @see #setHasMipMap(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setHasMipMap(boolean hasMipMap)",
    "returnType" : "void",
    "comment" : "\n     * Set a hint for the renderer responsible for drawing this bitmap\n     * indicating that it should attempt to use mipmaps when this bitmap\n     * is drawn scaled down.\n     *\n     * If you know that you are going to draw this bitmap at less than\n     * 50% of its original size, you may be able to obtain a higher\n     * quality by turning this property on.\n     *\n     * Note that if the renderer respects this hint it might have to\n     * allocate extra memory to hold the mipmap levels for this bitmap.\n     *\n     * This property is only a suggestion that can be ignored by the\n     * renderer. It is not guaranteed to have any effect.\n     *\n     * @param hasMipMap indicates whether the renderer should attempt\n     *                  to use mipmaps\n     *\n     * @see #hasMipMap()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ColorSpace getColorSpace()",
    "returnType" : "ColorSpace",
    "comment" : "\n     * Returns the color space associated with this bitmap. If the color\n     * space is unknown, this method returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorSpace(@NonNull ColorSpace colorSpace)",
    "returnType" : "void",
    "comment" : "\n     * <p>Modifies the bitmap to have the specified {@link ColorSpace}, without\n     * affecting the underlying allocation backing the bitmap.</p>\n     *\n     * <p>This affects how the framework will interpret the color at each pixel. A bitmap\n     * with {@link Config#ALPHA_8} never has a color space, since a color space does not\n     * affect the alpha channel. Other {@code Config}s must always have a non-null\n     * {@code ColorSpace}.</p>\n     *\n     * @throws IllegalArgumentException If the specified color space is {@code null}, not\n     *         {@link ColorSpace.Model#RGB RGB}, or whose components min/max values reduce\n     *         the numerical range compared to the previously assigned color space.\n     *         Prior to {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n     *         <code>IllegalArgumentException</code> will also be thrown\n     *         if the specified color space has a transfer function that is not an\n     *         {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}. Starting from\n     *         {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, the color spaces with non\n     *         ICC parametric curve transfer function are allowed.\n     *         E.g., {@link ColorSpace.Named#BT2020_HLG BT2020_HLG}.\n     *\n     * @throws IllegalArgumentException If the {@code Config} (returned by {@link #getConfig()})\n     *         is {@link Config#ALPHA_8}.\n     *\n     * @param colorSpace to assign to the bitmap\n     ",
    "links" : [ "#ALPHA_8", "ColorSpace.Rgb.TransferParameters", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "ColorSpace.Named#BT2020_HLG", "#getConfig()", "android.graphics.ColorSpace", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public boolean hasGainmap()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this Bitmap contains a Gainmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Gainmap getGainmap()",
    "returnType" : "Gainmap",
    "comment" : "\n     * Returns the gainmap or null if the bitmap doesn't contain a gainmap\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGainmap(@Nullable Gainmap gainmap)",
    "returnType" : "void",
    "comment" : "\n     * Sets a gainmap on this bitmap, or removes the gainmap if null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void eraseColor(@ColorInt int c)",
    "returnType" : "void",
    "comment" : "\n     * Fills the bitmap's pixels with the specified {@link Color}.\n     *\n     * @throws IllegalStateException if the bitmap is not mutable.\n     ",
    "links" : [ "android.graphics.Color" ]
  }, {
    "name" : "public void eraseColor(@ColorLong long color)",
    "returnType" : "void",
    "comment" : "\n     * Fills the bitmap's pixels with the specified {@code ColorLong}.\n     *\n     * @param color The color to fill as packed by the {@link Color} class.\n     * @throws IllegalStateException if the bitmap is not mutable.\n     * @throws IllegalArgumentException if the color space encoded in the\n     *                                  {@code ColorLong} is invalid or unknown.\n     *\n     ",
    "links" : [ "android.graphics.Color" ]
  }, {
    "name" : "public int getPixel(int x, int y)",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@link Color} at the specified location. Throws an exception\n     * if x or y are out of bounds (negative or >= to the width or height\n     * respectively). The returned color is a non-premultiplied ARGB value in\n     * the {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param x    The x coordinate (0...width-1) of the pixel to return\n     * @param y    The y coordinate (0...height-1) of the pixel to return\n     * @return     The argb {@link Color} at the specified coordinate\n     * @throws IllegalArgumentException if x, y exceed the bitmap's bounds\n     * @throws IllegalStateException if the bitmap's config is {@link Config#HARDWARE}\n     ",
    "links" : [ "android.graphics.Color", "#HARDWARE", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "private static float clamp(float value, @NonNull ColorSpace cs, int index)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Color getColor(int x, int y)",
    "returnType" : "Color",
    "comment" : "\n     * Returns the {@link Color} at the specified location. Throws an exception\n     * if x or y are out of bounds (negative or >= to the width or height\n     * respectively).\n     *\n     * @param x    The x coordinate (0...width-1) of the pixel to return\n     * @param y    The y coordinate (0...height-1) of the pixel to return\n     * @return     The {@link Color} at the specified coordinate\n     * @throws IllegalArgumentException if x, y exceed the bitmap's bounds\n     * @throws IllegalStateException if the bitmap's config is {@link Config#HARDWARE}\n     *\n     ",
    "links" : [ "android.graphics.Color", "#HARDWARE" ]
  }, {
    "name" : "public void getPixels(@NonNull @ColorInt int[] pixels, int offset, int stride, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Returns in pixels[] a copy of the data in the bitmap. Each value is\n     * a packed int representing a {@link Color}. The stride parameter allows\n     * the caller to allow for gaps in the returned pixels array between\n     * rows. For normal packed results, just pass width for the stride value.\n     * The returned colors are non-premultiplied ARGB values in the\n     * {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param pixels   The array to receive the bitmap's colors\n     * @param offset   The first index to write into pixels[]\n     * @param stride   The number of entries in pixels[] to skip between\n     *                 rows (must be >= bitmap's width). Can be negative.\n     * @param x        The x coordinate of the first pixel to read from\n     *                 the bitmap\n     * @param y        The y coordinate of the first pixel to read from\n     *                 the bitmap\n     * @param width    The number of pixels to read from each row\n     * @param height   The number of rows to read\n     *\n     * @throws IllegalArgumentException if x, y, width, height exceed the\n     *         bounds of the bitmap, or if abs(stride) < width.\n     * @throws ArrayIndexOutOfBoundsException if the pixels array is too small\n     *         to receive the specified number of pixels.\n     * @throws IllegalStateException if the bitmap's config is {@link Config#HARDWARE}\n     ",
    "links" : [ "android.graphics.Color", "#HARDWARE", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "private void checkPixelAccess(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Shared code to check for illegal arguments passed to getPixel()\n     * or setPixel()\n     *\n     * @param x x coordinate of the pixel\n     * @param y y coordinate of the pixel\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkPixelsAccess(int x, int y, int width, int height, int offset, int stride, int[] pixels)",
    "returnType" : "void",
    "comment" : "\n     * Shared code to check for illegal arguments passed to getPixels()\n     * or setPixels()\n     *\n     * @param x left edge of the area of pixels to access\n     * @param y top edge of the area of pixels to access\n     * @param width width of the area of pixels to access\n     * @param height height of the area of pixels to access\n     * @param offset offset into pixels[] array\n     * @param stride number of elements in pixels[] between each logical row\n     * @param pixels array to hold the area of pixels being accessed\n    ",
    "links" : [ ]
  }, {
    "name" : "public void setPixel(int x, int y, @ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * <p>Write the specified {@link Color} into the bitmap (assuming it is\n     * mutable) at the x,y coordinate. The color must be a\n     * non-premultiplied ARGB value in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.</p>\n     *\n     * @param x     The x coordinate of the pixel to replace (0...width-1)\n     * @param y     The y coordinate of the pixel to replace (0...height-1)\n     * @param color The ARGB color to write into the bitmap\n     *\n     * @throws IllegalStateException if the bitmap is not mutable\n     * @throws IllegalArgumentException if x, y are outside of the bitmap's\n     *         bounds.\n     ",
    "links" : [ "android.graphics.Color", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public void setPixels(@NonNull @ColorInt int[] pixels, int offset, int stride, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * <p>Replace pixels in the bitmap with the colors in the array. Each element\n     * in the array is a packed int representing a non-premultiplied ARGB\n     * {@link Color} in the {@link ColorSpace.Named#SRGB sRGB} color space.</p>\n     *\n     * @param pixels   The colors to write to the bitmap\n     * @param offset   The index of the first color to read from pixels[]\n     * @param stride   The number of colors in pixels[] to skip between rows.\n     *                 Normally this value will be the same as the width of\n     *                 the bitmap, but it can be larger (or negative).\n     * @param x        The x coordinate of the first pixel to write to in\n     *                 the bitmap.\n     * @param y        The y coordinate of the first pixel to write to in\n     *                 the bitmap.\n     * @param width    The number of colors to copy from pixels[] per row\n     * @param height   The number of rows to write to the bitmap\n     *\n     * @throws IllegalStateException if the bitmap is not mutable\n     * @throws IllegalArgumentException if x, y, width, height are outside of\n     *         the bitmap's bounds.\n     * @throws ArrayIndexOutOfBoundsException if the pixels array is too small\n     *         to receive the specified number of pixels.\n     ",
    "links" : [ "android.graphics.Color", "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * No special parcel contents.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel p, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write the bitmap and its pixels to the parcel. The bitmap can be\n     * rebuilt from the parcel by calling CREATOR.createFromParcel().\n     *\n     * If this bitmap is {@link Config#HARDWARE}, it may be unparceled with a different pixel\n     * format (e.g. 565, 8888), but the content will be preserved to the best quality permitted\n     * by the final pixel format\n     * @param p    Parcel object to write the bitmap data into\n     ",
    "links" : [ "#HARDWARE" ]
  }, {
    "name" : "public Bitmap extractAlpha()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a new bitmap that captures the alpha values of the original.\n     * This may be drawn with Canvas.drawBitmap(), where the color(s) will be\n     * taken from the paint that is passed to the draw call.\n     *\n     * @return new bitmap containing the alpha channel of the original bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap extractAlpha(@Nullable Paint paint, int[] offsetXY)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a new bitmap that captures the alpha values of the original.\n     * These values may be affected by the optional Paint parameter, which\n     * can contain its own alpha, and may also contain a MaskFilter which\n     * could change the actual dimensions of the resulting bitmap (e.g.\n     * a blur maskfilter might enlarge the resulting bitmap). If offsetXY\n     * is not null, it returns the amount to offset the returned bitmap so\n     * that it will logically align with the original. For example, if the\n     * paint contains a blur of radius 2, then offsetXY[] would contains\n     * -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then\n     * drawing the original would result in the blur visually aligning with\n     * the original.\n     *\n     * <p>The initial density of the returned bitmap is the same as the original's.\n     *\n     * @param paint Optional paint used to modify the alpha values in the\n     *              resulting bitmap. Pass null for default behavior.\n     * @param offsetXY Optional array that returns the X (index 0) and Y\n     *                 (index 1) offset needed to position the returned bitmap\n     *                 so that it visually lines up with the original.\n     * @return new bitmap containing the (optionally modified by paint) alpha\n     *         channel of the original bitmap. This may be drawn with\n     *         Canvas.drawBitmap(), where the color(s) will be taken from the\n     *         paint that is passed to the draw call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameAs(@Nullable Bitmap other)",
    "returnType" : "boolean",
    "comment" : "\n     *  Given another bitmap, return true if it has the same dimensions, config,\n     *  and pixel data as this bitmap. If any of those differ, return false.\n     *  If other is null, return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void prepareToDraw()",
    "returnType" : "void",
    "comment" : "\n     * Builds caches associated with the bitmap that are used for drawing it.\n     *\n     * <p>Starting in {@link android.os.Build.VERSION_CODES#N}, this call initiates an asynchronous\n     * upload to the GPU on RenderThread, if the Bitmap is not already uploaded. With Hardware\n     * Acceleration, Bitmaps must be uploaded to the GPU in order to be rendered. This is done by\n     * default the first time a Bitmap is drawn, but the process can take several milliseconds,\n     * depending on the size of the Bitmap. Each time a Bitmap is modified and drawn again, it must\n     * be re-uploaded.</p>\n     *\n     * <p>Calling this method in advance can save time in the first frame it's used. For example, it\n     * is recommended to call this on an image decoding worker thread when a decoded Bitmap is about\n     * to be displayed. It is recommended to make any pre-draw modifications to the Bitmap before\n     * calling this method, so the cached, uploaded copy may be reused without re-uploading.</p>\n     *\n     * In {@link android.os.Build.VERSION_CODES#KITKAT} and below, for purgeable bitmaps, this call\n     * would attempt to ensure that the pixels have been decoded.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT", "android.os.Build.VERSION_CODES#N" ]
  }, {
    "name" : "public HardwareBuffer getHardwareBuffer()",
    "returnType" : "HardwareBuffer",
    "comment" : "\n     * @return {@link HardwareBuffer} which is internally used by hardware bitmap\n     *\n     * Note: the HardwareBuffer does *not* have an associated {@link ColorSpace}.\n     * To render this object the same as its rendered with this Bitmap, you\n     * should also call {@link #getColorSpace()}.</p>\n     *\n     * Must not be modified while a wrapped Bitmap is accessing it. Doing so will\n     * result in undefined behavior.</p>\n     *\n     * @throws IllegalStateException if the bitmap's config is not {@link Config#HARDWARE}\n     * or if the bitmap has been recycled.\n     ",
    "links" : [ "#getColorSpace()", "#HARDWARE", "android.hardware.HardwareBuffer", "android.graphics.ColorSpace" ]
  }, {
    "name" : "private static native Bitmap nativeCreate(int[] colors, int offset, int stride, int width, int height, int nativeConfig, boolean mutable, long nativeColorSpace)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeCopy(long nativeSrcBitmap, int nativeConfig, boolean isMutable)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeCopyAshmem(long nativeSrcBitmap)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeCopyAshmemConfig(long nativeSrcBitmap, int nativeConfig)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetAshmemFD(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRecycle(long nativeBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReconfigure(long nativeBitmap, int width, int height, int config, boolean isPremultiplied)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeCompress(long nativeBitmap, int format, int quality, OutputStream stream, byte[] tempStorage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeErase(long nativeBitmap, int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeErase(long nativeBitmap, long colorSpacePtr, long color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeRowBytes(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeConfig(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetPixel(long nativeBitmap, int x, int y)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetColor(long nativeBitmap, int x, int y)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeGetPixels(long nativeBitmap, int[] pixels, int offset, int stride, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPixel(long nativeBitmap, int x, int y, int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPixels(long nativeBitmap, int[] colors, int offset, int stride, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeCopyPixelsToBuffer(long nativeBitmap, Buffer dst)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeCopyPixelsFromBuffer(long nativeBitmap, Buffer src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGenerationId(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeCreateFromParcel(Parcel p)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeWriteToParcel(long nativeBitmap, int density, Parcel p)",
    "returnType" : "boolean",
    "comment" : " returns true on success",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeExtractAlpha(long nativeBitmap, long nativePaint, int[] offsetXY)",
    "returnType" : "Bitmap",
    "comment" : " returns a new bitmap built from the native bitmap's alpha, and the paint",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeHasAlpha(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsPremultiplied(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPremultiplied(long nativeBitmap, boolean isPremul)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetHasAlpha(long nativeBitmap, boolean hasAlpha, boolean requestPremul)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeHasMipMap(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetHasMipMap(long nativeBitmap, boolean hasMipMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSameAs(long nativeBitmap0, long nativeBitmap1)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativePrepareToDraw(long nativeBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetAllocationByteCount(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeCopyPreserveInternalConfig(long nativeBitmap)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeWrapHardwareBufferBitmap(HardwareBuffer buffer, long nativeColorSpace)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native HardwareBuffer nativeGetHardwareBuffer(long nativeBitmap)",
    "returnType" : "HardwareBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native ColorSpace nativeComputeColorSpace(long nativePtr)",
    "returnType" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColorSpace(long nativePtr, long nativeColorSpace)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsSRGB(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsSRGBLinear(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetImmutable(long nativePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Gainmap nativeExtractGainmap(long nativePtr)",
    "returnType" : "Gainmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGainmap(long bitmapPtr, long gainmapPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsImmutable(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsBackedByAshmem(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeHasGainmap(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setDefaultDensity(int density)", " static int getDefaultDensity()", "public long getNativeInstance()", " void reinit(int width, int height, boolean requestPremultiplied)", "public int getDensity()", "public void setDensity(int density)", "public void reconfigure(int width, int height, @NonNull Config config)", "public void setWidth(int width)", "public void setHeight(int height)", "public void setConfig(@NonNull Config config)", "private void setNinePatchChunk(byte[] chunk)", "public void recycle()", "public final boolean isRecycled()", "public int getGenerationId()", " void checkRecycled(String errorMessage)", "private void checkHardware(String errorMessage)", "private static void checkXYSign(int x, int y)", "private static void checkWidthHeight(int width, int height)", "public void copyPixelsToBuffer(@NonNull Buffer dst)", "public void copyPixelsFromBuffer(@NonNull Buffer src)", "private void noteHardwareBitmapSlowCall()", "public Bitmap copy(@NonNull Config config, boolean isMutable)", "public Bitmap createAshmemBitmap()", "public Bitmap asShared()", "public SharedMemory getSharedMemory()", "public static Bitmap wrapHardwareBuffer(@NonNull HardwareBuffer hardwareBuffer, @Nullable ColorSpace colorSpace)", "public static Bitmap createScaledBitmap(@NonNull Bitmap src, int dstWidth, int dstHeight, boolean filter)", "public static Bitmap createBitmap(@NonNull Bitmap src)", "public static Bitmap createBitmap(@NonNull Bitmap source, int x, int y, int width, int height)", "public static Bitmap createBitmap(@NonNull Bitmap source, int x, int y, int width, int height, @Nullable Matrix m, boolean filter)", "private static Bitmap transformGainmap(Bitmap source, Matrix m, int neww, int newh, Paint paint, Rect srcR, RectF dstR, RectF deviceR)", "public static Bitmap createBitmap(int width, int height, @NonNull Config config)", "public static Bitmap createBitmap(@Nullable DisplayMetrics display, int width, int height, @NonNull Config config)", "public static Bitmap createBitmap(int width, int height, @NonNull Config config, boolean hasAlpha)", "public static Bitmap createBitmap(int width, int height, @NonNull Config config, boolean hasAlpha, @NonNull ColorSpace colorSpace)", "public static Bitmap createBitmap(@Nullable DisplayMetrics display, int width, int height, @NonNull Config config, boolean hasAlpha)", "public static Bitmap createBitmap(@Nullable DisplayMetrics display, int width, int height, @NonNull Config config, boolean hasAlpha, @NonNull ColorSpace colorSpace)", "public static Bitmap createBitmap(@NonNull @ColorInt int[] colors, int offset, int stride, int width, int height, @NonNull Config config)", "public static Bitmap createBitmap(@NonNull DisplayMetrics display, @NonNull @ColorInt int[] colors, int offset, int stride, int width, int height, @NonNull Config config)", "public static Bitmap createBitmap(@NonNull @ColorInt int[] colors, int width, int height, Config config)", "public static Bitmap createBitmap(@Nullable DisplayMetrics display, @NonNull @ColorInt int[] colors, int width, int height, @NonNull Config config)", "public static Bitmap createBitmap(@NonNull Picture source)", "public static Bitmap createBitmap(@NonNull Picture source, int width, int height, @NonNull Config config)", "public byte[] getNinePatchChunk()", "public void getOpticalInsets(@NonNull Rect outInsets)", "public NinePatch.InsetStruct getNinePatchInsets()", "public static void dumpAll(@Nullable String format)", "public boolean compress(@NonNull CompressFormat format, int quality, @NonNull OutputStream stream)", "public final boolean isMutable()", "private void setImmutable()", "public final boolean isPremultiplied()", "public final void setPremultiplied(boolean premultiplied)", "public final int getWidth()", "public final int getHeight()", "public int getScaledWidth(@NonNull Canvas canvas)", "public int getScaledHeight(@NonNull Canvas canvas)", "public int getScaledWidth(@NonNull DisplayMetrics metrics)", "public int getScaledHeight(@NonNull DisplayMetrics metrics)", "public int getScaledWidth(int targetDensity)", "public int getScaledHeight(int targetDensity)", "public static int scaleFromDensity(int size, int sdensity, int tdensity)", "public final int getRowBytes()", "public final int getByteCount()", "public final int getAllocationByteCount()", "public final Config getConfig()", "public final boolean hasAlpha()", "public void setHasAlpha(boolean hasAlpha)", "public final boolean hasMipMap()", "public final void setHasMipMap(boolean hasMipMap)", "public final ColorSpace getColorSpace()", "public void setColorSpace(@NonNull ColorSpace colorSpace)", "public boolean hasGainmap()", "public Gainmap getGainmap()", "public void setGainmap(@Nullable Gainmap gainmap)", "public void eraseColor(@ColorInt int c)", "public void eraseColor(@ColorLong long color)", "public int getPixel(int x, int y)", "private static float clamp(float value, @NonNull ColorSpace cs, int index)", "public Color getColor(int x, int y)", "public void getPixels(@NonNull @ColorInt int[] pixels, int offset, int stride, int x, int y, int width, int height)", "private void checkPixelAccess(int x, int y)", "private void checkPixelsAccess(int x, int y, int width, int height, int offset, int stride, int[] pixels)", "public void setPixel(int x, int y, @ColorInt int color)", "public void setPixels(@NonNull @ColorInt int[] pixels, int offset, int stride, int x, int y, int width, int height)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel p, int flags)", "public Bitmap extractAlpha()", "public Bitmap extractAlpha(@Nullable Paint paint, int[] offsetXY)", "public boolean sameAs(@Nullable Bitmap other)", "public void prepareToDraw()", "public HardwareBuffer getHardwareBuffer()", "private static native Bitmap nativeCreate(int[] colors, int offset, int stride, int width, int height, int nativeConfig, boolean mutable, long nativeColorSpace)", "private static native Bitmap nativeCopy(long nativeSrcBitmap, int nativeConfig, boolean isMutable)", "private static native Bitmap nativeCopyAshmem(long nativeSrcBitmap)", "private static native Bitmap nativeCopyAshmemConfig(long nativeSrcBitmap, int nativeConfig)", "private static native int nativeGetAshmemFD(long nativeBitmap)", "private static native long nativeGetNativeFinalizer()", "private static native void nativeRecycle(long nativeBitmap)", "private static native void nativeReconfigure(long nativeBitmap, int width, int height, int config, boolean isPremultiplied)", "private static native boolean nativeCompress(long nativeBitmap, int format, int quality, OutputStream stream, byte[] tempStorage)", "private static native void nativeErase(long nativeBitmap, int color)", "private static native void nativeErase(long nativeBitmap, long colorSpacePtr, long color)", "private static native int nativeRowBytes(long nativeBitmap)", "private static native int nativeConfig(long nativeBitmap)", "private static native int nativeGetPixel(long nativeBitmap, int x, int y)", "private static native long nativeGetColor(long nativeBitmap, int x, int y)", "private static native void nativeGetPixels(long nativeBitmap, int[] pixels, int offset, int stride, int x, int y, int width, int height)", "private static native void nativeSetPixel(long nativeBitmap, int x, int y, int color)", "private static native void nativeSetPixels(long nativeBitmap, int[] colors, int offset, int stride, int x, int y, int width, int height)", "private static native void nativeCopyPixelsToBuffer(long nativeBitmap, Buffer dst)", "private static native void nativeCopyPixelsFromBuffer(long nativeBitmap, Buffer src)", "private static native int nativeGenerationId(long nativeBitmap)", "private static native Bitmap nativeCreateFromParcel(Parcel p)", "private static native boolean nativeWriteToParcel(long nativeBitmap, int density, Parcel p)", "private static native Bitmap nativeExtractAlpha(long nativeBitmap, long nativePaint, int[] offsetXY)", "private static native boolean nativeHasAlpha(long nativeBitmap)", "private static native boolean nativeIsPremultiplied(long nativeBitmap)", "private static native void nativeSetPremultiplied(long nativeBitmap, boolean isPremul)", "private static native void nativeSetHasAlpha(long nativeBitmap, boolean hasAlpha, boolean requestPremul)", "private static native boolean nativeHasMipMap(long nativeBitmap)", "private static native void nativeSetHasMipMap(long nativeBitmap, boolean hasMipMap)", "private static native boolean nativeSameAs(long nativeBitmap0, long nativeBitmap1)", "private static native void nativePrepareToDraw(long nativeBitmap)", "private static native int nativeGetAllocationByteCount(long nativeBitmap)", "private static native Bitmap nativeCopyPreserveInternalConfig(long nativeBitmap)", "private static native Bitmap nativeWrapHardwareBufferBitmap(HardwareBuffer buffer, long nativeColorSpace)", "private static native HardwareBuffer nativeGetHardwareBuffer(long nativeBitmap)", "private static native ColorSpace nativeComputeColorSpace(long nativePtr)", "private static native void nativeSetColorSpace(long nativePtr, long nativeColorSpace)", "private static native boolean nativeIsSRGB(long nativePtr)", "private static native boolean nativeIsSRGBLinear(long nativePtr)", "private static native void nativeSetImmutable(long nativePtr)", "private static native Gainmap nativeExtractGainmap(long nativePtr)", "private static native void nativeSetGainmap(long bitmapPtr, long gainmapPtr)", "private static native boolean nativeIsImmutable(long nativePtr)", "private static native boolean nativeIsBackedByAshmem(long nativePtr)", "private static native boolean nativeHasGainmap(long nativePtr)" ],
  "variableNames" : [ "TAG", "DENSITY_NONE", "NATIVE_ALLOCATION_SIZE", "mNativePtr", "mRequestPremultiplied", "mNinePatchChunk", "mNinePatchInsets", "mWidth", "mHeight", "mHardwareBuffer", "mRecycled", "mColorSpace", "mGainmap", "mDensity", "sDefaultDensity", "sAllBitmaps", "dumpData", "WORKING_COMPRESS_STORAGE", "CREATOR" ]
}