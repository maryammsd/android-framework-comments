{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/ParserAdapter.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "ParserAdapter",
  "comment" : "\n * Adapt a SAX1 Parser as a SAX2 XMLReader.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class wraps a SAX1 {@link org.xml.sax.Parser Parser}\n * and makes it act as a SAX2 {@link org.xml.sax.XMLReader XMLReader},\n * with feature, property, and Namespace support.  Note\n * that it is not possible to report {@link org.xml.sax.ContentHandler#skippedEntity\n * skippedEntity} events, since SAX1 does not make that information available.</p>\n *\n * <p>This adapter does not test for duplicate Namespace-qualified\n * attribute names.</p>\n *\n * @since SAX 2.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.helpers.XMLReaderAdapter\n * @see org.xml.sax.XMLReader\n * @see org.xml.sax.Parser\n ",
  "links" : [ "org.xml.sax.Parser", "org.xml.sax.XMLReader", "org.xml.sax.ContentHandler#skippedEntityskippedEntity" ],
  "variables" : [ {
    "name" : "FEATURES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAMESPACES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PREFIXES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XMLNS_URIs",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nsSupport",
    "type" : "NamespaceSupport",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "attAdapter",
    "type" : "AttributeListAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parsing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nameParts",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parser",
    "type" : "Parser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "atts",
    "type" : "AttributesImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespaces",
    "type" : "boolean",
    "comment" : " Features",
    "links" : [ ]
  }, {
    "name" : "prefixes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "uris",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locator",
    "type" : "Locator",
    "comment" : " Handlers",
    "links" : [ ]
  }, {
    "name" : "entityResolver",
    "type" : "EntityResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dtdHandler",
    "type" : "DTDHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contentHandler",
    "type" : "ContentHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errorHandler",
    "type" : "ErrorHandler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setup(Parser parser)",
    "returnType" : "void",
    "comment" : "\n     * Internal setup method.\n     *\n     * @param parser The embedded parser.\n     * @exception java.lang.NullPointerException If the parser parameter\n     *            is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set a feature flag for the parser.\n     *\n     * <p>The only features recognized are namespaces and\n     * namespace-prefixes.</p>\n     *\n     * @param name The feature name, as a complete URI.\n     * @param value The requested feature value.\n     * @exception SAXNotRecognizedException If the feature\n     *            can't be assigned or retrieved.\n     * @exception SAXNotSupportedException If the feature\n     *            can't be assigned that value.\n     * @see org.xml.sax.XMLReader#setFeature\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "boolean",
    "comment" : "\n     * Check a parser feature flag.\n     *\n     * <p>The only features recognized are namespaces and\n     * namespace-prefixes.</p>\n     *\n     * @param name The feature name, as a complete URI.\n     * @return The current feature value.\n     * @exception SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved.\n     * @exception SAXNotSupportedException If the\n     *            feature is not currently readable.\n     * @see org.xml.sax.XMLReader#setFeature\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set a parser property.\n     *\n     * <p>No properties are currently recognized.</p>\n     *\n     * @param name The property name.\n     * @param value The property value.\n     * @exception SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved.\n     * @exception SAXNotSupportedException If the property\n     *            can't be assigned that value.\n     * @see org.xml.sax.XMLReader#setProperty\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Get a parser property.\n     *\n     * <p>No properties are currently recognized.</p>\n     *\n     * @param name The property name.\n     * @return The property value.\n     * @exception SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved.\n     * @exception SAXNotSupportedException If the property\n     *            value is not currently readable.\n     * @see org.xml.sax.XMLReader#getProperty\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Set the entity resolver.\n     *\n     * @param resolver The new entity resolver.\n     * @see org.xml.sax.XMLReader#setEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public EntityResolver getEntityResolver()",
    "returnType" : "EntityResolver",
    "comment" : "\n     * Return the current entity resolver.\n     *\n     * @return The current entity resolver, or null if none was supplied.\n     * @see org.xml.sax.XMLReader#getEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDTDHandler(DTDHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the DTD handler.\n     *\n     * @param handler the new DTD handler\n     * @see org.xml.sax.XMLReader#setEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public DTDHandler getDTDHandler()",
    "returnType" : "DTDHandler",
    "comment" : "\n     * Return the current DTD handler.\n     *\n     * @return the current DTD handler, or null if none was supplied\n     * @see org.xml.sax.XMLReader#getEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the content handler.\n     *\n     * @param handler the new content handler\n     * @see org.xml.sax.XMLReader#setEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentHandler getContentHandler()",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Return the current content handler.\n     *\n     * @return The current content handler, or null if none was supplied.\n     * @see org.xml.sax.XMLReader#getEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the error handler.\n     *\n     * @param handler The new error handler.\n     * @see org.xml.sax.XMLReader#setEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public ErrorHandler getErrorHandler()",
    "returnType" : "ErrorHandler",
    "comment" : "\n     * Return the current error handler.\n     *\n     * @return The current error handler, or null if none was supplied.\n     * @see org.xml.sax.XMLReader#getEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parse(String systemId) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parse an XML document.\n     *\n     * @param systemId The absolute URL of the document.\n     * @exception java.io.IOException If there is a problem reading\n     *            the raw content of the document.\n     * @exception SAXException If there is a problem\n     *            processing the document.\n     * @see #parse(org.xml.sax.InputSource)\n     * @see org.xml.sax.Parser#parse(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parse(InputSource input) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parse an XML document.\n     *\n     * @param input An input source for the document.\n     * @exception java.io.IOException If there is a problem reading\n     *            the raw content of the document.\n     * @exception SAXException If there is a problem\n     *            processing the document.\n     * @see #parse(java.lang.String)\n     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 document locator event.\n     *\n     * @param locator A document locator.\n     * @see org.xml.sax.ContentHandler#setDocumentLocator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 start document event.\n     *\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.DocumentHandler#startDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 end document event.\n     *\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.DocumentHandler#endDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String qName, AttributeList qAtts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 startElement event.\n     *\n     * <p>If necessary, perform Namespace processing.</p>\n     *\n     * @param qName The qualified (prefixed) name.\n     * @param qAtts The XML attribute list (with qnames).\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 end element event.\n     *\n     * @param qName The qualified (prefixed) name.\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.DocumentHandler#endElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 characters event.\n     *\n     * @param ch An array of characters.\n     * @param start The starting position in the array.\n     * @param length The number of characters to use.\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.DocumentHandler#characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 ignorable whitespace event.\n     *\n     * @param ch An array of characters.\n     * @param start The starting position in the array.\n     * @param length The number of characters to use.\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.DocumentHandler#ignorableWhitespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapter implementation method; do not call.\n     * Adapt a SAX1 processing instruction event.\n     *\n     * @param target The processing instruction target.\n     * @param data The remainder of the processing instruction\n     * @exception SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.DocumentHandler#processingInstruction\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupParser()",
    "returnType" : "void",
    "comment" : "\n     * Initialize the parser before each run.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String[] processName(String qName, boolean isAttribute, boolean useException) throws SAXException",
    "returnType" : "String[]",
    "comment" : "\n     * Process a qualified (prefixed) name.\n     *\n     * <p>If the name has an undeclared prefix, use only the qname\n     * and make an ErrorHandler.error callback in case the app is\n     * interested.</p>\n     *\n     * @param qName The qualified (prefixed) name.\n     * @param isAttribute true if this is an attribute name.\n     * @return The name split into three parts.\n     * @exception SAXException The client may throw\n     *            an exception if there is an error callback.\n     ",
    "links" : [ ]
  }, {
    "name" : " void reportError(String message) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report a non-fatal error.\n     *\n     * @param message The error message.\n     * @exception SAXException The client may throw\n     *            an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "private SAXParseException makeException(String message)",
    "returnType" : "SAXParseException",
    "comment" : "\n     * Construct an exception for the current context.\n     *\n     * @param message The error message.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkNotParsing(String type, String name) throws SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Throw an exception if we are parsing.\n     *\n     * <p>Use this method to detect illegal feature or\n     * property changes.</p>\n     *\n     * @param type The type of thing (feature or property).\n     * @param name The feature or property name.\n     * @exception SAXNotSupportedException If a\n     *            document is currently being parsed.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setup(Parser parser)", "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException", "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException", "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setEntityResolver(EntityResolver resolver)", "public EntityResolver getEntityResolver()", "public void setDTDHandler(DTDHandler handler)", "public DTDHandler getDTDHandler()", "public void setContentHandler(ContentHandler handler)", "public ContentHandler getContentHandler()", "public void setErrorHandler(ErrorHandler handler)", "public ErrorHandler getErrorHandler()", "public void parse(String systemId) throws IOException, SAXException", "public void parse(InputSource input) throws IOException, SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "public void startElement(String qName, AttributeList qAtts) throws SAXException", "public void endElement(String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "private void setupParser()", "private String[] processName(String qName, boolean isAttribute, boolean useException) throws SAXException", " void reportError(String message) throws SAXException", "private SAXParseException makeException(String message)", "private void checkNotParsing(String type, String name) throws SAXNotSupportedException" ],
  "variableNames" : [ "FEATURES", "NAMESPACES", "NAMESPACE_PREFIXES", "XMLNS_URIs", "nsSupport", "attAdapter", "parsing", "nameParts", "parser", "atts", "namespaces", "prefixes", "uris", "locator", "entityResolver", "dtdHandler", "contentHandler", "errorHandler" ]
}