{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioPlaybackConfiguration.java",
  "packageName" : "android.media",
  "className" : "AudioPlaybackConfiguration",
  "comment" : "\n * The AudioPlaybackConfiguration class collects the information describing an audio playback\n * session.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLAYER_PIID_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_UPID_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_DEVICEID_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * An unknown type of player\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_JAM_AUDIOTRACK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Player backed by a java android.media.AudioTrack player\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_JAM_MEDIAPLAYER",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Player backed by a java android.media.MediaPlayer player\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_JAM_SOUNDPOOL",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Player backed by a java android.media.SoundPool player\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_SLES_AUDIOPLAYER_BUFFERQUEUE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Player backed by a C OpenSL ES AudioPlayer player with a BufferQueue source\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_SLES_AUDIOPLAYER_URI_FD",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Player backed by a C OpenSL ES AudioPlayer player with a URI or FD source\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_AAUDIO",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Player backed an AAudio player.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_HW_SOURCE",
    "type" : "int",
    "comment" : " TODO unhide for SystemApi, update getPlayerType()",
    "links" : [ ]
  }, {
    "name" : "PLAYER_TYPE_EXTERNAL_PROXY",
    "type" : "int",
    "comment" : " TODO unhide for SystemApi, update getPlayerType()",
    "links" : [ ]
  }, {
    "name" : "PLAYER_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * An unknown player state\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_STATE_RELEASED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The resources of the player have been released, it cannot play anymore\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The state of a player when it's created\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_STATE_STARTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The state of a player that is actively playing\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_STATE_PAUSED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The state of a player where playback is paused\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_STATE_STOPPED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The state of a player where playback is stopped\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_UPDATE_DEVICE_ID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The state used to update device id, does not actually change the state of the player\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_UPDATE_PORT_ID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The state used to update port id, does not actually change the state of the player\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_UPDATE_MUTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Used to update the mute state of a player through its port id\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYER_UPDATE_FORMAT",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Used to update the spatialization status and format of a player through its port id\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PLAYER_EVENT_SPATIALIZED",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Used to update the spatialization status of a player through its port ID. Must be kept in\n     * sync with frameworks/native/include/audiomanager/AudioManager.h\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PLAYER_EVENT_SAMPLE_RATE",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Used to update the sample rate of a player through its port ID. Must be kept in sync with\n     * frameworks/native/include/audiomanager/AudioManager.h\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PLAYER_EVENT_CHANNEL_MASK",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Used to update the channel mask of a player through its port ID. Must be kept in sync with\n     * frameworks/native/include/audiomanager/AudioManager.h\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PLAYER_EVENT_MUTE",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Used to update the mute state of a player through its port ID. Must be kept in sync with\n     * frameworks/native/include/audiomanager/AudioManager.h\n     ",
    "links" : [ ]
  }, {
    "name" : "MUTED_BY_MASTER",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used when muted by master volume.\n     ",
    "links" : [ ]
  }, {
    "name" : "MUTED_BY_STREAM_VOLUME",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used when muted by stream volume.\n     ",
    "links" : [ ]
  }, {
    "name" : "MUTED_BY_STREAM_MUTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used when muted by stream mute.\n     ",
    "links" : [ ]
  }, {
    "name" : "MUTED_BY_APP_OPS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used when playback is muted by AppOpsManager#OP_PLAY_AUDIO.\n     ",
    "links" : [ ]
  }, {
    "name" : "MUTED_BY_CLIENT_VOLUME",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used when muted by client volume.\n     ",
    "links" : [ ]
  }, {
    "name" : "MUTED_BY_VOLUME_SHAPER",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used when muted by volume shaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPlayerIId",
    "type" : "int",
    "comment" : " immutable data",
    "links" : [ ]
  }, {
    "name" : "mPlayerType",
    "type" : "int",
    "comment" : " not final due to anonymization step",
    "links" : [ ]
  }, {
    "name" : "mClientUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientPid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIPlayerShell",
    "type" : "IPlayerShell",
    "comment" : " the IPlayer reference and death monitor",
    "links" : [ ]
  }, {
    "name" : "mPlayerState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayerAttr",
    "type" : "AudioAttributes",
    "comment" : " never null",
    "links" : [ ]
  }, {
    "name" : "mUpdateablePropLock",
    "type" : "Object",
    "comment" : " lock for updateable properties",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatInfo",
    "type" : "FormatInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutedState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPlayerDeathMonitor",
    "type" : "PlayerDeathMonitor",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioPlaybackConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String playerStateToString(@PlayerState int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void init()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUpdateableFields(int deviceId, int sessionId, int mutedState, FormatInfo format)",
    "returnType" : "void",
    "comment" : " sets the fields that are updateable and require synchronization",
    "links" : [ ]
  }, {
    "name" : "public static AudioPlaybackConfiguration anonymizedCopy(AudioPlaybackConfiguration in)",
    "returnType" : "AudioPlaybackConfiguration",
    "comment" : "\n     * @hide\n     * Creates a copy of the playback configuration that is stripped of any data enabling\n     * identification of which application it is associated with (\"anonymized\").\n     * @param in the instance to copy from\n     ",
    "links" : [ ]
  }, {
    "name" : "public AudioAttributes getAudioAttributes()",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * Return the {@link AudioAttributes} of the corresponding player.\n     * @return the audio attributes of the player\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public int getClientUid()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the uid of the client application that created this player.\n     * @return the uid of the client\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getClientPid()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the pid of the client application that created this player.\n     * @return the pid of the client\n     ",
    "links" : [ ]
  }, {
    "name" : "public AudioDeviceInfo getAudioDeviceInfo()",
    "returnType" : "AudioDeviceInfo",
    "comment" : "\n     * Returns information about the {@link AudioDeviceInfo} used for this playback.\n     * @return the audio playback device or null if the device is not available at the time of query\n     ",
    "links" : [ "android.media.AudioDeviceInfo" ]
  }, {
    "name" : "public int getSessionId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the audio session ID associated with this player.\n     * See {@link AudioManager#generateAudioSessionId()}.\n     * @return an audio session ID\n     ",
    "links" : [ "android.media.AudioManager#generateAudioSessionId()" ]
  }, {
    "name" : "public boolean isMuted()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Used for determining if the current player is muted.\n     * <br>Note that if this result is true then {@link #getMutedBy} will be > 0.\n     * @return {@code true} if the player associated with this configuration has been muted (by any\n     * given MUTED_BY_* source event) or {@code false} otherwise.\n     ",
    "links" : [ "#getMutedBy" ]
  }, {
    "name" : "public int getMutedBy()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns a bitmask expressing the mute state as a combination of MUTED_BY_* flags.\n     * <br>A value of 0 corresponds to an unmuted player.\n     * @return the mute state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPlayerType()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the type of player linked to this configuration.\n     * <br>Note that player types not exposed in the system API will be represented as\n     * {@link #PLAYER_TYPE_UNKNOWN}.\n     * @return the type of the player.\n     ",
    "links" : [ "#PLAYER_TYPE_UNKNOWN" ]
  }, {
    "name" : "public int getPlayerState()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the current state of the player linked to this configuration. The return value is one\n     * of {@link #PLAYER_STATE_IDLE}, {@link #PLAYER_STATE_PAUSED}, {@link #PLAYER_STATE_STARTED},\n     * {@link #PLAYER_STATE_STOPPED}, {@link #PLAYER_STATE_RELEASED} or\n     * {@link #PLAYER_STATE_UNKNOWN}.\n     * @return the state of the player.\n     ",
    "links" : [ "#PLAYER_STATE_STARTED", "#PLAYER_STATE_UNKNOWN", "#PLAYER_STATE_PAUSED", "#PLAYER_STATE_RELEASED", "#PLAYER_STATE_STOPPED", "#PLAYER_STATE_IDLE" ]
  }, {
    "name" : "public int getPlayerInterfaceId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return an identifier unique for the lifetime of the player.\n     * @return a player interface identifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public PlayerProxy getPlayerProxy()",
    "returnType" : "PlayerProxy",
    "comment" : "\n     * @hide\n     * Return a proxy for the player associated with this playback configuration\n     * @return a proxy player\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpatialized()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Return whether this player's output is being processed by the spatializer effect backing\n     * the {@link android.media.Spatializer} implementation.\n     * @return true if spatialized, false if not or playback hasn't started\n     ",
    "links" : [ "android.media.Spatializer" ]
  }, {
    "name" : "public int getSampleRate()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the sample rate in Hz of the content being played.\n     * @return the sample rate in Hertz, or 0 if playback hasn't started\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChannelMask()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the player's channel mask\n     * @return the channel mask, or 0 if playback hasn't started. See {@link AudioFormat} and\n     *     the definitions for the <code>CHANNEL_OUT_*</code> values used for the mask's bitfield\n     ",
    "links" : [ "android.media.AudioFormat" ]
  }, {
    "name" : " IPlayer getIPlayer()",
    "returnType" : "IPlayer",
    "comment" : "\n     * @hide\n     * @return the IPlayer interface for the associated player\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean handleAudioAttributesEvent(@NonNull AudioAttributes attr)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Handle a change of audio attributes\n     * @param attr\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean handleSessionIdEvent(int sessionId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Handle a change of audio session ID\n     * @param sessionId the audio session ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean handleMutedEvent(@PlayerMuteEvent int mutedState)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Handle a change of the muted state\n     * @param mutedState the mute reason as a combination of {@link PlayerMuteEvent} flags\n     * @return true if the state changed, false otherwise\n     ",
    "links" : [ "PlayerMuteEvent" ]
  }, {
    "name" : "public boolean handleFormatEvent(@NonNull FormatInfo fi)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Handle a change of playback format\n     * @param fi the latest format information\n     * @return true if the format changed, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean handleStateEvent(int event, int deviceId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Handle a player state change\n     * @param event\n     * @param deviceId active device id or {@Code PLAYER_DEVICEID_INVALID}\n     * <br>Note device id is valid for {@code PLAYER_UPDATE_DEVICE_ID} or\n     * <br>{@code PLAYER_STATE_STARTED} events, as the device id will be reset to none when\n     * <br>pausing or stopping playback. It will be set to active device when playback starts or\n     * <br>it will be changed when PLAYER_UPDATE_DEVICE_ID is sent. The latter can happen if the\n     * <br>device changes in the middle of playback.\n     * @return true if the state changed, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private void playerDied()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isMuteAffectingActiveState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isActive()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Returns true if the player is considered \"active\", i.e. actively playing with unmuted\n     * volume, and thus in a state that should make it considered for the list public (sanitized)\n     * active playback configurations\n     * @return true if active\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * For AudioService dump\n     * @param pw\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String toLogFriendlyPlayerType(int type)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String toLogFriendlyPlayerState(int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String playerStateToString(@PlayerState int state)", "public void init()", "private void setUpdateableFields(int deviceId, int sessionId, int mutedState, FormatInfo format)", "public static AudioPlaybackConfiguration anonymizedCopy(AudioPlaybackConfiguration in)", "public AudioAttributes getAudioAttributes()", "public int getClientUid()", "public int getClientPid()", "public AudioDeviceInfo getAudioDeviceInfo()", "public int getSessionId()", "public boolean isMuted()", "public int getMutedBy()", "public int getPlayerType()", "public int getPlayerState()", "public int getPlayerInterfaceId()", "public PlayerProxy getPlayerProxy()", "public boolean isSpatialized()", "public int getSampleRate()", "public int getChannelMask()", " IPlayer getIPlayer()", "public boolean handleAudioAttributesEvent(@NonNull AudioAttributes attr)", "public boolean handleSessionIdEvent(int sessionId)", "public boolean handleMutedEvent(@PlayerMuteEvent int mutedState)", "public boolean handleFormatEvent(@NonNull FormatInfo fi)", "public boolean handleStateEvent(int event, int deviceId)", "private void playerDied()", "private boolean isMuteAffectingActiveState()", "public boolean isActive()", "public void dump(PrintWriter pw)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object o)", "public String toString()", "public static String toLogFriendlyPlayerType(int type)", "public static String toLogFriendlyPlayerState(int state)" ],
  "variableNames" : [ "TAG", "DEBUG", "PLAYER_PIID_INVALID", "PLAYER_UPID_INVALID", "PLAYER_DEVICEID_INVALID", "PLAYER_TYPE_UNKNOWN", "PLAYER_TYPE_JAM_AUDIOTRACK", "PLAYER_TYPE_JAM_MEDIAPLAYER", "PLAYER_TYPE_JAM_SOUNDPOOL", "PLAYER_TYPE_SLES_AUDIOPLAYER_BUFFERQUEUE", "PLAYER_TYPE_SLES_AUDIOPLAYER_URI_FD", "PLAYER_TYPE_AAUDIO", "PLAYER_TYPE_HW_SOURCE", "PLAYER_TYPE_EXTERNAL_PROXY", "PLAYER_STATE_UNKNOWN", "PLAYER_STATE_RELEASED", "PLAYER_STATE_IDLE", "PLAYER_STATE_STARTED", "PLAYER_STATE_PAUSED", "PLAYER_STATE_STOPPED", "PLAYER_UPDATE_DEVICE_ID", "PLAYER_UPDATE_PORT_ID", "PLAYER_UPDATE_MUTED", "PLAYER_UPDATE_FORMAT", "EXTRA_PLAYER_EVENT_SPATIALIZED", "EXTRA_PLAYER_EVENT_SAMPLE_RATE", "EXTRA_PLAYER_EVENT_CHANNEL_MASK", "EXTRA_PLAYER_EVENT_MUTE", "MUTED_BY_MASTER", "MUTED_BY_STREAM_VOLUME", "MUTED_BY_STREAM_MUTED", "MUTED_BY_APP_OPS", "MUTED_BY_CLIENT_VOLUME", "MUTED_BY_VOLUME_SHAPER", "mPlayerIId", "mPlayerType", "mClientUid", "mClientPid", "mIPlayerShell", "mPlayerState", "mPlayerAttr", "mUpdateablePropLock", "mDeviceId", "mSessionId", "mFormatInfo", "mMutedState", "sPlayerDeathMonitor", "CREATOR" ]
}