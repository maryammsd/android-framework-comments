{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/StringBlock.java",
  "packageName" : "android.content.res",
  "className" : "StringBlock",
  "comment" : "\n * Conveniences for retrieving data out of a compiled string resource.\n *\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNative",
    "type" : "long",
    "comment" : " final, but gets modified when closed",
    "links" : [ ]
  }, {
    "name" : "mUseSparse",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnsNative",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrings",
    "type" : "CharSequence[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSparseStrings",
    "type" : "SparseArray<CharSequence>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStyleIDs",
    "type" : "StyleIDs",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence get(int idx)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @deprecated use {@link #getSequence(int)} which can return null when a string cannot be found\n     *             due to incremental installation.\n     ",
    "links" : [ "#getSequence(int)" ]
  }, {
    "name" : "public CharSequence getSequence(int idx)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence applyStyles(String str, int[] style, StyleIDs ids)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CharacterStyle getColor(String color, boolean foreground)",
    "returnType" : "CharacterStyle",
    "comment" : "\n     * Returns a span for the specified color string representation.\n     * If the specified string does not represent a color (null, empty, etc.)\n     * the color black is returned instead.\n     *\n     * @param color The color as a string. Can be a resource reference,\n     *              hexadecimal, octal or a name\n     * @param foreground True if the color will be used as the foreground color,\n     *                   false otherwise\n     *\n     * @return A CharacterStyle\n     *\n     * @see Color#parseColor(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void addParagraphSpan(Spannable buffer, Object what, int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * If a translator has messed up the edges of paragraph-level markup,\n     * fix it to actually cover the entire paragraph that it is attached to\n     * instead of just whatever range they put it on.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String subtag(String full, String attribute)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreate(byte[] data, int offset, int size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetSize(long obj)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetString(long obj, int idx)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetStyle(long obj, int idx)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroy(long obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CharSequence get(int idx)", "public CharSequence getSequence(int idx)", "protected void finalize() throws Throwable", "public void close()", "private CharSequence applyStyles(String str, int[] style, StyleIDs ids)", "private static CharacterStyle getColor(String color, boolean foreground)", "private static void addParagraphSpan(Spannable buffer, Object what, int start, int end)", "private static String subtag(String full, String attribute)", "private static native long nativeCreate(byte[] data, int offset, int size)", "private static native int nativeGetSize(long obj)", "private static native String nativeGetString(long obj, int idx)", "private static native int[] nativeGetStyle(long obj, int idx)", "private static native void nativeDestroy(long obj)" ],
  "variableNames" : [ "TAG", "localLOGV", "mNative", "mUseSparse", "mOwnsNative", "mStrings", "mSparseStrings", "mOpen", "mStyleIDs" ]
}