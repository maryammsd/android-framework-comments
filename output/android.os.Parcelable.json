{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Parcelable.java",
  "packageName" : "android.os",
  "className" : "Parcelable",
  "comment" : "\n * Interface for classes whose instances can be written to\n * and restored from a {@link Parcel}.  Classes implementing the Parcelable\n * interface must also have a non-null public static field called\n * <code>CREATOR</code> of a type that implements the {@link Parcelable.Creator}\n * interface.\n *\n * <p>A typical implementation of Parcelable is:</p>\n *\n * <div>\n * <div class=\"ds-selector-tabs\"><section><h3 id=\"kotlin\">Kotlin</h3>\n * <pre class=\"prettyprint lang-kotlin\">\n * class MyParcelable private constructor(`in`: Parcel) : Parcelable {\n *     private val mData: Int = `in`.readInt()\n *\n *     override fun describeContents(): Int {\n *         return 0\n *     }\n *\n *     override fun writeToParcel(out: Parcel, flags: Int) {\n *         out.writeInt(mData)\n *     }\n *\n *     companion object CREATOR: Parcelable.Creator&lt;MyParcelable?&gt; {\n *         override fun createFromParcel(`in`: Parcel): MyParcelable? {\n *             return MyParcelable(`in`)\n *         }\n *\n *         override fun newArray(size: Int): Array&lt;MyParcelable?&gt; {\n *             return arrayOfNulls(size)\n *         }\n *     }\n * }\n * </pre>\n * </section><section><h3 id=\"java\">Java</h3>\n * <pre class=\"prettyprint lang-java\">\n * public class MyParcelable implements Parcelable {\n *     private int mData;\n *\n *     public int describeContents() {\n *         return 0;\n *     }\n *\n *     public void writeToParcel(Parcel out, int flags) {\n *         out.writeInt(mData);\n *     }\n *\n *     public static final Parcelable.Creator&lt;MyParcelable&gt; CREATOR\n *             = new Parcelable.Creator&lt;MyParcelable&gt;() {\n *         public MyParcelable createFromParcel(Parcel in) {\n *             return new MyParcelable(in);\n *         }\n *\n *         public MyParcelable[] newArray(int size) {\n *             return new MyParcelable[size];\n *         }\n *     };\n *\n *     private MyParcelable(Parcel in) {\n *         mData = in.readInt();\n *     }\n * }</pre></section></div></div>\n ",
  "links" : [ "android.os.Parcel", "Parcelable.Creator" ],
  "variables" : [ {
    "name" : "PARCELABLE_WRITE_RETURN_VALUE",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #writeToParcel}: the object being written\n     * is a return value, that is the result of a function such as\n     * \"<code>Parcelable someFunction()</code>\",\n     * \"<code>void someFunction(out Parcelable)</code>\", or\n     * \"<code>void someFunction(inout Parcelable)</code>\".  Some implementations\n     * may want to release resources at this point.\n     ",
    "links" : [ "#writeToParcel" ]
  }, {
    "name" : "PARCELABLE_ELIDE_DUPLICATES",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #writeToParcel}: a parent object will take\n     * care of managing duplicate state/data that is nominally replicated\n     * across its inner data members.  This flag instructs the inner data\n     * types to omit that data during marshaling.  Exact behavior may vary\n     * on a case by case basis.\n     * @hide\n     ",
    "links" : [ "#writeToParcel" ]
  }, {
    "name" : "PARCELABLE_STABILITY_LOCAL",
    "type" : "int",
    "comment" : "\n     * Something that is not meant to cross compilation boundaries.\n     *\n     * Note: unlike binder/Stability.h which uses bitsets to detect stability,\n     * since we don't currently have a notion of different local locations,\n     * higher stability levels are formed at higher levels.\n     *\n     * For instance, contained entirely within system partitions.\n     * @see #getStability()\n     * @see ParcelableHolder\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARCELABLE_STABILITY_VINTF",
    "type" : "int",
    "comment" : "\n     * Something that is meant to be used between system and vendor.\n     * @see #getStability()\n     * @see ParcelableHolder\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENTS_FILE_DESCRIPTOR",
    "type" : "int",
    "comment" : "\n     * Descriptor bit used with {@link #describeContents()}: indicates that\n     * the Parcelable object's flattened representation includes a file descriptor.\n     *\n     * @see #describeContents()\n     ",
    "links" : [ "#describeContents()" ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Describe the kinds of special objects contained in this Parcelable\n     * instance's marshaled representation. For example, if the object will\n     * include a file descriptor in the output of {@link #writeToParcel(Parcel, int)},\n     * the return value of this method must include the\n     * {@link #CONTENTS_FILE_DESCRIPTOR} bit.\n     *  \n     * @return a bitmask indicating the set of special object types marshaled\n     * by this Parcelable object instance.\n     ",
    "links" : [ "#CONTENTS_FILE_DESCRIPTOR", "#writeToParcel(Parcel" ]
  }, {
    "name" : " int getStability()",
    "returnType" : "int",
    "comment" : "\n     * 'Stable' means this parcelable is guaranteed to be stable for multiple years.\n     * It must be guaranteed by setting stability field in aidl_interface,\n     * OR explicitly override this method from @JavaOnlyStableParcelable marked Parcelable.\n     * WARNING: isStable() is only expected to be overridden by auto-generated code,\n     * OR @JavaOnlyStableParcelable marked Parcelable only if there is guaranteed to\n     * be only once copy of the parcelable on the system.\n     * @return true if this parcelable is stable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, @WriteFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this object in to a Parcel.\n     * \n     * @param dest The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     * May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}.\n     ",
    "links" : [ "#PARCELABLE_WRITE_RETURN_VALUE" ]
  } ],
  "methodNames" : [ "public int describeContents()", " int getStability()", "public void writeToParcel(@NonNull Parcel dest, @WriteFlags int flags)" ],
  "variableNames" : [ "PARCELABLE_WRITE_RETURN_VALUE", "PARCELABLE_ELIDE_DUPLICATES", "PARCELABLE_STABILITY_LOCAL", "PARCELABLE_STABILITY_VINTF", "CONTENTS_FILE_DESCRIPTOR" ]
}