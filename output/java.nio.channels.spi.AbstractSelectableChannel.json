{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/spi/AbstractSelectableChannel.java",
  "packageName" : "java.nio.channels.spi",
  "className" : "AbstractSelectableChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "SelectorProvider",
    "comment" : " The provider that created this channel",
    "links" : [ ]
  }, {
    "name" : "keys",
    "type" : "SelectionKey[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "keyCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "keyLock",
    "type" : "Object",
    "comment" : " Lock for key set and count",
    "links" : [ ]
  }, {
    "name" : "regLock",
    "type" : "Object",
    "comment" : " Lock for registration and configureBlocking operations",
    "links" : [ ]
  }, {
    "name" : "nonBlocking",
    "type" : "boolean",
    "comment" : " True when non-blocking, need regLock to change;",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final SelectorProvider provider()",
    "returnType" : "SelectorProvider",
    "comment" : "\n     * Returns the provider that created this channel.\n     *\n     * @return  The provider that created this channel\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addKey(SelectionKey k)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SelectionKey findKey(Selector sel)",
    "returnType" : "SelectionKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeKey(SelectionKey k)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean haveValidKeys()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isRegistered()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final SelectionKey keyFor(Selector sel)",
    "returnType" : "SelectionKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final SelectionKey register(Selector sel, int ops, Object att) throws ClosedChannelException",
    "returnType" : "SelectionKey",
    "comment" : "\n     * Registers this channel with the given selector, returning a selection key.\n     *\n     * <p>  This method first verifies that this channel is open and that the\n     * given initial interest set is valid.\n     *\n     * <p> If this channel is already registered with the given selector then\n     * the selection key representing that registration is returned after\n     * setting its interest set to the given value.\n     *\n     * <p> Otherwise this channel has not yet been registered with the given\n     * selector, so the {@link AbstractSelector#register register} method of\n     * the selector is invoked while holding the appropriate locks.  The\n     * resulting key is added to this channel's key set before being returned.\n     * </p>\n     *\n     * @throws  ClosedSelectorException {@inheritDoc}\n     *\n     * @throws  IllegalBlockingModeException {@inheritDoc}\n     *\n     * @throws  IllegalSelectorException {@inheritDoc}\n     *\n     * @throws  CancelledKeyException {@inheritDoc}\n     *\n     * @throws  IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ "java.nio.channels.spi.AbstractSelector#register" ]
  }, {
    "name" : "protected final void implCloseChannel() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this channel.\n     *\n     * <p> This method, which is specified in the {@link\n     * AbstractInterruptibleChannel} class and is invoked by the {@link\n     * java.nio.channels.Channel#close close} method, in turn invokes the\n     * {@link #implCloseSelectableChannel implCloseSelectableChannel} method in\n     * order to perform the actual work of closing this channel.  It then\n     * cancels all of this channel's keys.  </p>\n     ",
    "links" : [ "#implCloseSelectableChannel", "java.nio.channels.Channel#close", "java.nio.channels.spi.AbstractInterruptibleChannel" ]
  }, {
    "name" : "protected abstract void implCloseSelectableChannel() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this selectable channel.\n     *\n     * <p> This method is invoked by the {@link java.nio.channels.Channel#close\n     * close} method in order to perform the actual work of closing the\n     * channel.  This method is only invoked if the channel has not yet been\n     * closed, and it is never invoked more than once.\n     *\n     * <p> An implementation of this method must arrange for any other thread\n     * that is blocked in an I/O operation upon this channel to return\n     * immediately, either by throwing an exception or by returning normally.\n     * </p>\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.Channel#closeclose" ]
  }, {
    "name" : "public final boolean isBlocking()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Object blockingLock()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final SelectableChannel configureBlocking(boolean block) throws IOException",
    "returnType" : "SelectableChannel",
    "comment" : "\n     * Adjusts this channel's blocking mode.\n     *\n     * <p> If the given blocking mode is different from the current blocking\n     * mode then this method invokes the {@link #implConfigureBlocking\n     * implConfigureBlocking} method, while holding the appropriate locks, in\n     * order to change the mode.  </p>\n     ",
    "links" : [ "#implConfigureBlockingimplConfigureBlocking" ]
  }, {
    "name" : "protected abstract void implConfigureBlocking(boolean block) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Adjusts this channel's blocking mode.\n     *\n     * <p> This method is invoked by the {@link #configureBlocking\n     * configureBlocking} method in order to perform the actual work of\n     * changing the blocking mode.  This method is only invoked if the new mode\n     * is different from the current mode.  </p>\n     *\n     * @param  block  If {@code true} then this channel will be placed in\n     *                blocking mode; if {@code false} then it will be placed\n     *                non-blocking mode\n     *\n     * @throws IOException\n     *         If an I/O error occurs\n     ",
    "links" : [ "#configureBlockingconfigureBlocking" ]
  } ],
  "methodNames" : [ "public final SelectorProvider provider()", "private void addKey(SelectionKey k)", "private SelectionKey findKey(Selector sel)", " void removeKey(SelectionKey k)", "private boolean haveValidKeys()", "public final boolean isRegistered()", "public final SelectionKey keyFor(Selector sel)", "public final SelectionKey register(Selector sel, int ops, Object att) throws ClosedChannelException", "protected final void implCloseChannel() throws IOException", "protected abstract void implCloseSelectableChannel() throws IOException", "public final boolean isBlocking()", "public final Object blockingLock()", "public final SelectableChannel configureBlocking(boolean block) throws IOException", "protected abstract void implConfigureBlocking(boolean block) throws IOException" ],
  "variableNames" : [ "provider", "keys", "keyCount", "keyLock", "regLock", "nonBlocking" ]
}