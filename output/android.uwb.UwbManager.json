{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/uwb/UwbManager.java",
  "packageName" : "android.uwb",
  "className" : "UwbManager",
  "comment" : "\n * This class provides a way to perform Ultra Wideband (UWB) operations such as querying the\n * device's capabilities and determining the distance and angle between the local device and a\n * remote device.\n *\n * <p>To get a {@link UwbManager}, call the <code>Context.getSystemService(UwbManager.class)</code>.\n *\n * <p> Note: This API surface uses opaque {@link PersistableBundle} params. These params are to be\n * created using the provided UWB support library. The support library is present in this\n * location on AOSP: <code>packages/modules/Uwb/service/support_lib/</code>\n *\n * @hide\n ",
  "links" : [ "android.os.PersistableBundle", "android.uwb.UwbManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUwbAdapter",
    "type" : "IUwbAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapterStateListener",
    "type" : "AdapterStateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRangingManager",
    "type" : "RangingManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUwbVendorUciCallbackListener",
    "type" : "UwbVendorUciCallbackListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUwbOemExtensionCallbackListener",
    "type" : "UwbOemExtensionCallbackListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SET_SESSION_CONFIGURATION_SUCCESS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Vendor configuration successful for the session\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_SET_SESSION_CONFIGURATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Failure to set vendor configuration for the session\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_SERVICE_PROFILE_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Successfully removed the service profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_SERVICE_PROFILE_ERROR_UNKNOWN_SERVICE",
    "type" : "int",
    "comment" : "\n     * Failed to remove service since the service profile is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_SERVICE_PROFILE_ERROR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Failed to remove service due to some internal error while processing the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_PROFILE_ADF_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Successfully removed the profile ADF.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_PROFILE_ADF_ERROR_UNKNOWN_SERVICE",
    "type" : "int",
    "comment" : "\n     * Failed to remove ADF since the service profile is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_PROFILE_ADF_ERROR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Failed to remove ADF due to some internal error while processing the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_VENDOR_UCI_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Successfully sent the UCI message.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_VENDOR_UCI_ERROR_HW",
    "type" : "int",
    "comment" : "\n     * Failed to send the UCI message because of an error returned from the HAL interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_VENDOR_UCI_ERROR_OFF",
    "type" : "int",
    "comment" : "\n     * Failed to send the UCI message since UWB is toggled off.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_VENDOR_UCI_ERROR_INVALID_ARGS",
    "type" : "int",
    "comment" : "\n     * Failed to send the UCI message since UWB UCI command is malformed.\n     * GID.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_VENDOR_UCI_ERROR_INVALID_GID",
    "type" : "int",
    "comment" : "\n     * Failed to send the UCI message since UWB GID used is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_TYPE_COMMAND",
    "type" : "int",
    "comment" : "\n     * Message Type for UCI Command.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_TYPE_TEST_1",
    "type" : "int",
    "comment" : "\n     * Message Type for C-APDU (Command - Application Protocol Data Unit),\n     * used for communication with secure component.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_TYPE_TEST_2",
    "type" : "int",
    "comment" : "\n     * Message Type for R-APDU (Response - Application Protocol Data Unit),\n     * used for communication with secure component.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerAdapterStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull AdapterStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an {@link AdapterStateCallback} to listen for UWB adapter state changes\n     * <p>The provided callback will be invoked by the given {@link Executor}.\n     *\n     * <p>When first registering a callback, the callbacks's\n     * {@link AdapterStateCallback#onStateChanged(int, int)} is immediately invoked to indicate\n     * the current state of the underlying UWB adapter with the most recent\n     * {@link AdapterStateCallback.StateChangedReason} that caused the change.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link AdapterStateCallback}\n     ",
    "links" : [ "#onStateChanged(int", "android.annotation.CallbackExecutor", "AdapterStateCallback.StateChangedReason", "AdapterStateCallback" ]
  }, {
    "name" : "public void unregisterAdapterStateCallback(@NonNull AdapterStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link AdapterStateCallback}\n     * <p>The same {@link AdapterStateCallback} object used when calling\n     * {@link #registerAdapterStateCallback(Executor, AdapterStateCallback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away\n     *\n     * @param callback user implementation of the {@link AdapterStateCallback}\n     ",
    "links" : [ "#registerAdapterStateCallback(Executor", "AdapterStateCallback" ]
  }, {
    "name" : "public void registerUwbVendorUciCallback(@NonNull @CallbackExecutor Executor executor, @NonNull UwbVendorUciCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an {@link UwbVendorUciCallback} to listen for UWB vendor responses and notifications\n     * <p>The provided callback will be invoked by the given {@link Executor}.\n     *\n     * <p>When first registering a callback, the callbacks's\n     * {@link UwbVendorUciCallback#onVendorUciCallBack(byte[])} is immediately invoked to\n     * notify the vendor notification.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link UwbVendorUciCallback}\n     ",
    "links" : [ "UwbVendorUciCallback", "android.annotation.CallbackExecutor", "#onVendorUciCallBack(byte" ]
  }, {
    "name" : "public void unregisterUwbVendorUciCallback(@NonNull UwbVendorUciCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link UwbVendorUciCallback}\n     *\n     * <p>The same {@link UwbVendorUciCallback} object used when calling\n     * {@link #registerUwbVendorUciCallback(Executor, UwbVendorUciCallback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away\n     *\n     * @param callback user implementation of the {@link UwbVendorUciCallback}\n     ",
    "links" : [ "UwbVendorUciCallback", "#registerUwbVendorUciCallback(Executor" ]
  }, {
    "name" : "public void registerUwbOemExtensionCallback(@NonNull @CallbackExecutor Executor executor, @NonNull UwbOemExtensionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an {@link UwbOemExtensionCallback} to listen for UWB oem extension callbacks\n     * <p>The provided callback will be invoked by the given {@link Executor}.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback oem implementation of {@link UwbOemExtensionCallback}\n     ",
    "links" : [ "UwbOemExtensionCallback", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterUwbOemExtensionCallback(@NonNull UwbOemExtensionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link UwbOemExtensionCallback}\n     *\n     * <p>The same {@link UwbOemExtensionCallback} object used when calling\n     * {@link #registerUwbOemExtensionCallback(Executor, UwbOemExtensionCallback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when an application process goes away\n     *\n     * @param callback oem implementation of {@link UwbOemExtensionCallback}\n     ",
    "links" : [ "UwbOemExtensionCallback", "#registerUwbOemExtensionCallback(Executor" ]
  }, {
    "name" : "public PersistableBundle getSpecificationInfo()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Get a {@link PersistableBundle} with the supported UWB protocols and parameters.\n     * <p>The {@link PersistableBundle} should be parsed using a support library\n     *\n     * <p>Android reserves the '^android.*' namespace</p>\n     *\n     * @return {@link PersistableBundle} of the device's supported UWB protocols and parameters\n     ",
    "links" : [ "android.os.PersistableBundle" ]
  }, {
    "name" : "public PersistableBundle getSpecificationInfo(@NonNull String chipId)",
    "returnType" : "PersistableBundle",
    "comment" : " TODO(b/205614701): Add documentation about how to find the relevant chipId",
    "links" : [ ]
  }, {
    "name" : "private PersistableBundle getSpecificationInfoInternal(String chipId)",
    "returnType" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long queryUwbsTimestampMicros()",
    "returnType" : "long",
    "comment" : "\n     * Get uwbs timestamp in micros.\n     *\n     * @return uwb device timestamp in micros.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long elapsedRealtimeResolutionNanos()",
    "returnType" : "long",
    "comment" : "\n     * Get the timestamp resolution for events in nanoseconds\n     * <p>This value defines the maximum error of all timestamps for events reported to\n     * {@link RangingSession.Callback}.\n     *\n     * @return the timestamp resolution in nanoseconds\n     ",
    "links" : [ "RangingSession.Callback" ]
  }, {
    "name" : "public long elapsedRealtimeResolutionNanos(@NonNull String chipId)",
    "returnType" : "long",
    "comment" : "\n     * Get the timestamp resolution for events in nanoseconds\n     *\n     * @see #elapsedRealtimeResolutionNanos() if you don't need multi-HAL support\n     *\n     * @param chipId identifier of UWB chip for multi-HAL devices\n     *\n     * @return the timestamp resolution in nanoseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "private long elapsedRealtimeResolutionNanosInternal(String chipId)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CancellationSignal openRangingSession(@NonNull PersistableBundle parameters, @NonNull @CallbackExecutor Executor executor, @NonNull RangingSession.Callback callbacks)",
    "returnType" : "CancellationSignal",
    "comment" : "\n     * Open a {@link RangingSession} with the given parameters\n     * <p>The {@link RangingSession.Callback#onOpened(RangingSession)} function is called with a\n     * {@link RangingSession} object used to control ranging when the session is successfully\n     * opened.\n     *\n     * if this session uses FIRA defined profile (not custom profile), this triggers:\n     *   - OOB discovery using service UUID\n     *   - OOB connection establishment after discovery for session params\n     *     negotiation.\n     *   - Secure element interactions needed for dynamic STS based session establishment.\n     *   - Setup the UWB session based on the parameters negotiated via OOB.\n     *   - Note: The OOB flow requires additional BLE Permissions\n     *     {permission.BLUETOOTH_ADVERTISE/permission.BLUETOOTH_SCAN\n     *      and permission.BLUETOOTH_CONNECT}.\n     *\n     * <p>If a session cannot be opened, then\n     * {@link RangingSession.Callback#onClosed(int, PersistableBundle)} will be invoked with the\n     * appropriate {@link RangingSession.Callback.Reason}.\n     *\n     * <p>An open {@link RangingSession} will be automatically closed if client application process\n     * dies.\n     *\n     * <p>A UWB support library must be used in order to construct the {@code parameter}\n     * {@link PersistableBundle}.\n     *\n     * @param parameters the parameters that define the ranging session\n     * @param executor {@link Executor} to run callbacks\n     * @param callbacks {@link RangingSession.Callback} to associate with the\n     *                  {@link RangingSession} that is being opened.\n     *\n     * @return an {@link CancellationSignal} that is able to be used to cancel the opening of a\n     *         {@link RangingSession} that has been requested through {@link #openRangingSession}\n     *         but has not yet been made available by\n     *         {@link RangingSession.Callback#onOpened(RangingSession)}.\n     ",
    "links" : [ "RangingSession.Callback#onOpened(RangingSession)", "RangingSession.Callback.Reason", "android.os.PersistableBundle", "RangingSession.Callback", "android.os.CancellationSignal", "android.uwb.RangingSession", "RangingSession.Callback#onClosed(int", "android.annotation.CallbackExecutor", "#openRangingSession" ]
  }, {
    "name" : "public CancellationSignal openRangingSession(@NonNull PersistableBundle parameters, @NonNull @CallbackExecutor Executor executor, @NonNull RangingSession.Callback callbacks, @SuppressLint(\"ListenerLast\") @NonNull String chipId)",
    "returnType" : "CancellationSignal",
    "comment" : "\n     * Open a {@link RangingSession} with the given parameters on a specific UWB subsystem\n     *\n     * @see #openRangingSession(PersistableBundle, Executor, RangingSession.Callback) if you don't\n     * need multi-HAL support\n     *\n     * @param parameters the parameters that define the ranging session\n     * @param executor {@link Executor} to run callbacks\n     * @param callbacks {@link RangingSession.Callback} to associate with the\n     *                  {@link RangingSession} that is being opened.\n     * @param chipId identifier of UWB chip for multi-HAL devices\n     *\n     * @return an {@link CancellationSignal} that is able to be used to cancel the opening of a\n     *         {@link RangingSession} that has been requested through {@link #openRangingSession}\n     *         but has not yet been made available by\n     *         {@link RangingSession.Callback#onOpened(RangingSession)}.\n     ",
    "links" : [ "RangingSession.Callback#onOpened(RangingSession)", "RangingSession.Callback", "android.os.CancellationSignal", "android.uwb.RangingSession", "android.annotation.CallbackExecutor", "#openRangingSession" ]
  }, {
    "name" : "private CancellationSignal openRangingSessionInternal(PersistableBundle parameters, Executor executor, RangingSession.Callback callbacks, String chipId)",
    "returnType" : "CancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAdapterState()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current enabled/disabled state for UWB.\n     *\n     * Possible values are:\n     * AdapterStateCallback#STATE_DISABLED\n     * AdapterStateCallback#STATE_ENABLED_INACTIVE\n     * AdapterStateCallback#STATE_ENABLED_ACTIVE\n     *\n     * @return value representing current enabled/disabled state for UWB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUwbEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether UWB is enabled or disabled.\n     *\n     * <p>\n     * If disabled, this could indicate that either\n     * <li> User has toggled UWB off from settings, OR </li>\n     * <li> UWB subsystem has shut down due to a fatal error. </li>\n     * </p>\n     *\n     * @return true if enabled, false otherwise.\n     *\n     * @see #getAdapterState()\n     * @see #setUwbEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUwbEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Disables or enables UWB by the user.\n     *\n     * If enabled any subsequent calls to\n     * {@link #openRangingSession(PersistableBundle, Executor, RangingSession.Callback)} will be\n     * allowed. If disabled, all active ranging sessions will be closed and subsequent calls to\n     * {@link #openRangingSession(PersistableBundle, Executor, RangingSession.Callback)} will be\n     * disallowed.\n     *\n     * @param enabled value representing intent to disable or enable UWB.\n     ",
    "links" : [ "#openRangingSession(PersistableBundle" ]
  }, {
    "name" : "public boolean isUwbHwIdleTurnOffEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether UWB hardware will automatically turn off when there are no clients requesting it.\n     * This feature is only turned on non-phone form factor devices which needs to keep the UWB\n     * hardware turned to avoid battery drain.\n     *\n     * <p>\n     * If the device supports automatically turning off UWB hardware, the state of UWB hardware\n     * is controlled by:\n     * <li> UWB user toggle state or Airplane mode state, AND </li>\n     * <li> Whether any clients are actively enabling UWB </li>\n     * </p>\n     *\n     * @return true if enabled, false otherwise.\n     *\n     * @see #isUwbHwEnableRequested()\n     * @see #requestUwbHwEnable(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUwbHwEnableRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this client has requested for UWB hardware to be enabled or disabled.\n     * Only supported on devices which supports hw idle turn off (indicated by\n     * {@link #isUwbHwIdleTurnOffEnabled()})\n     *\n     * <p>\n     * This does not indicate the global state of UWB, this only indicates whether this app\n     * (identified by {@link Context#getAttributionSource()}) has requested for UWB hardware to be\n     * enabled or disabled.\n     * </p>\n     *\n     * @return true if enabled, false otherwise.\n     * @throws IllegalStateException if the device does not support this feature\n     *\n     * @see #isUwbHwIdleTurnOffEnabled()\n     * @see #requestUwbHwEnable(boolean)\n     ",
    "links" : [ "android.content.Context#getAttributionSource()", "#isUwbHwIdleTurnOffEnabled()" ]
  }, {
    "name" : "public void requestUwbHwEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * This client has requested for UWB hardware to be enabled or disabled.\n     * Only supported on devices which supports hw idle turn off (indicated by\n     * {@link #isUwbHwIdleTurnOffEnabled()})\n     *\n     * <p>\n     * This does not indicate the global state of UWB, this only indicates whether this app\n     * (identified by {@link Context#getAttributionSource()}) has requested for UWB hardware to be\n     * enabled or disabled.\n     * If UWB is enabled by the user and has at least 1 privileged client requesting UWB toggle on,\n     * then UWB hardware is enabled, else the UWB hardware is disabled.\n     * </p>\n     *\n     * @param enabled value representing intent to disable or enable UWB.\n     * @throws IllegalStateException if the device does not support this feature\n     *\n     * @see #isUwbHwIdleTurnOffEnabled()\n     * @see #isUwbHwEnableRequested() ()\n     ",
    "links" : [ "android.content.Context#getAttributionSource()", "#isUwbHwIdleTurnOffEnabled()" ]
  }, {
    "name" : "public List<PersistableBundle> getChipInfos()",
    "returnType" : "List<PersistableBundle>",
    "comment" : "\n     * Returns a list of UWB chip infos in a {@link PersistableBundle}.\n     *\n     * Callers can invoke methods on a specific UWB chip by passing its {@code chipId} to the\n     * method, which can be determined by calling:\n     * <pre>\n     * List<PersistableBundle> chipInfos = getChipInfos();\n     * for (PersistableBundle chipInfo : chipInfos) {\n     *     String chipId = ChipInfoParams.fromBundle(chipInfo).getChipId();\n     * }\n     * </pre>\n     *\n     * @return list of {@link PersistableBundle} containing info about UWB chips for a multi-HAL\n     * system, or a list of info for a single chip for a single HAL system.\n     ",
    "links" : [ "android.os.PersistableBundle" ]
  }, {
    "name" : "public String getDefaultChipId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default UWB chip identifier.\n     *\n     * If callers do not pass a specific {@code chipId} to UWB methods, then the method will be\n     * invoked on the default chip, which is determined at system initialization from a\n     * configuration file.\n     *\n     * @return default UWB chip identifier for a multi-HAL system, or the identifier of the only UWB\n     * chip in a single HAL system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle addServiceProfile(@NonNull PersistableBundle parameters)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Register the UWB service profile.\n     * This profile instance is persisted by the platform until explicitly removed\n     * using {@link #removeServiceProfile(PersistableBundle)}\n     *\n     * @param parameters the parameters that define the service profile.\n     * @return Protocol specific params to be used as handle for triggering the profile.\n     ",
    "links" : [ "#removeServiceProfile(PersistableBundle)" ]
  }, {
    "name" : "public int removeServiceProfile(@NonNull PersistableBundle parameters)",
    "returnType" : "int",
    "comment" : "\n     * Remove the service profile registered with {@link #addServiceProfile} and\n     * all related resources.\n     *\n     * @param parameters the parameters that define the service profile.\n     *\n     * @return true if the service profile is removed, false otherwise.\n     ",
    "links" : [ "#addServiceProfile" ]
  }, {
    "name" : "public PersistableBundle getAllServiceProfiles()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Get all service profiles initialized with {@link #addServiceProfile}\n     *\n     * @return the parameters that define the service profiles.\n     ",
    "links" : [ "#addServiceProfile" ]
  }, {
    "name" : "public PersistableBundle getAdfProvisioningAuthorities(@NonNull PersistableBundle serviceProfileBundle)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Get the list of ADF (application defined file) provisioning authorities available for the UWB\n     * applet in SE (secure element).\n     *\n     * @param serviceProfileBundle Parameters representing the profile to use.\n     * @return The list of key information of ADF provisioning authority defined in FiRa\n     * CSML 8.2.2.7.2.4 and 8.2.2.14.4.1.2.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getAdfCertificateInfo(@NonNull PersistableBundle serviceProfileBundle)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Get certificate information for the UWB applet in SE (secure element) that can be used to\n     * provision ADF (application defined file).\n     *\n     * @param serviceProfileBundle Parameters representing the profile to use.\n     * @return The Fira applet certificate information defined in FiRa CSML 7.3.4.3 and\n     * 8.2.2.14.4.1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public void provisionProfileAdfByScript(@NonNull PersistableBundle serviceProfileBundle, @NonNull @CallbackExecutor Executor executor, @NonNull AdfProvisionStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Mechanism to provision ADFs (application defined file) in the UWB applet present in SE\n     * (secure element) for a profile instance.\n     *\n     * @param serviceProfileBundle Parameters representing the profile to use.\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link AdapterStateCallback}\n     ",
    "links" : [ "android.annotation.CallbackExecutor", "AdapterStateCallback" ]
  }, {
    "name" : "public int removeProfileAdf(@NonNull PersistableBundle serviceProfileBundle)",
    "returnType" : "int",
    "comment" : "\n     * Remove the ADF (application defined file) provisioned by {@link #provisionProfileAdfByScript}\n     *\n     * @param serviceProfileBundle Parameters representing the profile to use.\n     * @return true if the ADF is removed, false otherwise.\n     ",
    "links" : [ "#provisionProfileAdfByScript" ]
  }, {
    "name" : "public int sendVendorUciMessage(@IntRange(from = 0, to = 15) int gid, int oid, @NonNull byte[] payload)",
    "returnType" : "int",
    "comment" : "\n     * Send Vendor specific Uci Messages.\n     *\n     * The format of the UCI messages are defined in the UCI specification. The platform is\n     * responsible for fragmenting the payload if necessary.\n     *\n     * @param gid Group ID of the command. This needs to be one of the vendor reserved GIDs from\n     *            the UCI specification.\n     * @param oid Opcode ID of the command. This is left to the OEM / vendor to decide.\n     * @param payload containing vendor Uci message payload.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int sendVendorUciMessage(@MessageType int mt, @IntRange(from = 0, to = 15) int gid, int oid, @NonNull byte[] payload)",
    "returnType" : "int",
    "comment" : "\n     * Send Vendor specific Uci Messages with custom message type.\n     *\n     * The format of the UCI messages are defined in the UCI specification. The platform is\n     * responsible for fragmenting the payload if necessary.\n     *\n     * Note that mt (message type) is added at the beginning of method parameters as it is more\n     * distinctive than other parameters and was requested from vendor.\n     *\n     * @param mt Message Type of the command\n     * @param gid Group ID of the command. This needs to be one of the vendor reserved GIDs from\n     *            the UCI specification\n     * @param oid Opcode ID of the command. This is left to the OEM / vendor to decide\n     * @param payload containing vendor Uci message payload\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getUwbActivityEnergyInfoAsync(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<UwbActivityEnergyInfo> listener)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the current {@link UwbActivityEnergyInfo} asynchronously.\n     *\n     * @param executor the executor that the listener will be invoked on\n     * @param listener the listener that will receive the {@link UwbActivityEnergyInfo} object\n     *                 when it becomes available. The listener will be triggered at most once for\n     *                 each call to this method.\n     ",
    "links" : [ "android.uwb.UwbActivityEnergyInfo" ]
  } ],
  "methodNames" : [ "public void registerAdapterStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull AdapterStateCallback callback)", "public void unregisterAdapterStateCallback(@NonNull AdapterStateCallback callback)", "public void registerUwbVendorUciCallback(@NonNull @CallbackExecutor Executor executor, @NonNull UwbVendorUciCallback callback)", "public void unregisterUwbVendorUciCallback(@NonNull UwbVendorUciCallback callback)", "public void registerUwbOemExtensionCallback(@NonNull @CallbackExecutor Executor executor, @NonNull UwbOemExtensionCallback callback)", "public void unregisterUwbOemExtensionCallback(@NonNull UwbOemExtensionCallback callback)", "public PersistableBundle getSpecificationInfo()", "public PersistableBundle getSpecificationInfo(@NonNull String chipId)", "private PersistableBundle getSpecificationInfoInternal(String chipId)", "public long queryUwbsTimestampMicros()", "public long elapsedRealtimeResolutionNanos()", "public long elapsedRealtimeResolutionNanos(@NonNull String chipId)", "private long elapsedRealtimeResolutionNanosInternal(String chipId)", "public CancellationSignal openRangingSession(@NonNull PersistableBundle parameters, @NonNull @CallbackExecutor Executor executor, @NonNull RangingSession.Callback callbacks)", "public CancellationSignal openRangingSession(@NonNull PersistableBundle parameters, @NonNull @CallbackExecutor Executor executor, @NonNull RangingSession.Callback callbacks, @SuppressLint(\"ListenerLast\") @NonNull String chipId)", "private CancellationSignal openRangingSessionInternal(PersistableBundle parameters, Executor executor, RangingSession.Callback callbacks, String chipId)", "public int getAdapterState()", "public boolean isUwbEnabled()", "public void setUwbEnabled(boolean enabled)", "public boolean isUwbHwIdleTurnOffEnabled()", "public boolean isUwbHwEnableRequested()", "public void requestUwbHwEnabled(boolean enabled)", "public List<PersistableBundle> getChipInfos()", "public String getDefaultChipId()", "public PersistableBundle addServiceProfile(@NonNull PersistableBundle parameters)", "public int removeServiceProfile(@NonNull PersistableBundle parameters)", "public PersistableBundle getAllServiceProfiles()", "public PersistableBundle getAdfProvisioningAuthorities(@NonNull PersistableBundle serviceProfileBundle)", "public PersistableBundle getAdfCertificateInfo(@NonNull PersistableBundle serviceProfileBundle)", "public void provisionProfileAdfByScript(@NonNull PersistableBundle serviceProfileBundle, @NonNull @CallbackExecutor Executor executor, @NonNull AdfProvisionStateCallback callback)", "public int removeProfileAdf(@NonNull PersistableBundle serviceProfileBundle)", "public int sendVendorUciMessage(@IntRange(from = 0, to = 15) int gid, int oid, @NonNull byte[] payload)", "public int sendVendorUciMessage(@MessageType int mt, @IntRange(from = 0, to = 15) int gid, int oid, @NonNull byte[] payload)", "public void getUwbActivityEnergyInfoAsync(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<UwbActivityEnergyInfo> listener)" ],
  "variableNames" : [ "TAG", "mContext", "mUwbAdapter", "mAdapterStateListener", "mRangingManager", "mUwbVendorUciCallbackListener", "mUwbOemExtensionCallbackListener", "VENDOR_SET_SESSION_CONFIGURATION_SUCCESS", "VENDOR_SET_SESSION_CONFIGURATION_FAILURE", "REMOVE_SERVICE_PROFILE_SUCCESS", "REMOVE_SERVICE_PROFILE_ERROR_UNKNOWN_SERVICE", "REMOVE_SERVICE_PROFILE_ERROR_INTERNAL", "REMOVE_PROFILE_ADF_SUCCESS", "REMOVE_PROFILE_ADF_ERROR_UNKNOWN_SERVICE", "REMOVE_PROFILE_ADF_ERROR_INTERNAL", "SEND_VENDOR_UCI_SUCCESS", "SEND_VENDOR_UCI_ERROR_HW", "SEND_VENDOR_UCI_ERROR_OFF", "SEND_VENDOR_UCI_ERROR_INVALID_ARGS", "SEND_VENDOR_UCI_ERROR_INVALID_GID", "MESSAGE_TYPE_COMMAND", "MESSAGE_TYPE_TEST_1", "MESSAGE_TYPE_TEST_2" ]
}