{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/SimpleFormatter.java",
  "packageName" : "java.util.logging",
  "className" : "SimpleFormatter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "format",
    "type" : "String",
    "comment" : " format string for printing the log record",
    "links" : [ ]
  }, {
    "name" : "dat",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized String format(LogRecord record)",
    "returnType" : "String",
    "comment" : "\n     * Format the given LogRecord.\n     * <p>\n     * The formatting can be customized by specifying the\n     * <a href=\"../Formatter.html#syntax\">format string</a>\n     * in the <a href=\"#formatting\">\n     * {@code java.util.logging.SimpleFormatter.format}</a> property.\n     * The given {@code LogRecord} will be formatted as if by calling:\n     * <pre>\n     *    {@link String#format String.format}(format, date, source, logger, level, message, thrown);\n     * </pre>\n     * where the arguments are:<br>\n     * <ol>\n     * <li>{@code format} - the {@link java.util.Formatter\n     *     java.util.Formatter} format string specified in the\n     *     {@code java.util.logging.SimpleFormatter.format} property\n     *     or the default format.</li>\n     * <li>{@code date} - a {@link Date} object representing\n     *     {@linkplain LogRecord#getMillis event time} of the log record.</li>\n     * <li>{@code source} - a string representing the caller, if available;\n     *     otherwise, the logger's name.</li>\n     * <li>{@code logger} - the logger's name.</li>\n     * <li>{@code level} - the {@linkplain Level#getLocalizedName\n     *     log level}.</li>\n     * <li>{@code message} - the formatted log message\n     *     returned from the {@link Formatter#formatMessage(LogRecord)}\n     *     method.  It uses {@link java.text.MessageFormat java.text}\n     *     formatting and does not use the {@code java.util.Formatter\n     *     format} argument.</li>\n     * <li>{@code thrown} - a string representing\n     *     the {@linkplain LogRecord#getThrown throwable}\n     *     associated with the log record and its backtrace\n     *     beginning with a newline character, if any;\n     *     otherwise, an empty string.</li>\n     * </ol>\n     *\n     * <p>Some example formats:<br>\n     * <ul>\n     * <li> {@code java.util.logging.SimpleFormatter.format=\"%4$s: %5$s [%1$tc]%n\"}\n     *     <p>This prints 1 line with the log level ({@code 4$}),\n     *     the log message ({@code 5$}) and the timestamp ({@code 1$}) in\n     *     a square bracket.\n     *     <pre>\n     *     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]\n     *     </pre></li>\n     * <li> {@code java.util.logging.SimpleFormatter.format=\"%1$tc %2$s%n%4$s: %5$s%6$s%n\"}\n     *     <p>This prints 2 lines where the first line includes\n     *     the timestamp ({@code 1$}) and the source ({@code 2$});\n     *     the second line includes the log level ({@code 4$}) and\n     *     the log message ({@code 5$}) followed with the throwable\n     *     and its backtrace ({@code 6$}), if any:\n     *     <pre>\n     *     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal\n     *     SEVERE: several message with an exception\n     *     java.lang.IllegalArgumentException: invalid argument\n     *             at MyClass.mash(MyClass.java:9)\n     *             at MyClass.crunch(MyClass.java:6)\n     *             at MyClass.main(MyClass.java:3)\n     *     </pre></li>\n     * <li> {@code java.util.logging.SimpleFormatter.format=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\"}\n     *      <p>This prints 2 lines similar to the example above\n     *         with a different date/time formatting and does not print\n     *         the throwable and its backtrace:\n     *     <pre>\n     *     Mar 22, 2011 1:11:31 PM MyClass fatal\n     *     SEVERE: several message with an exception\n     *     </pre></li>\n     * </ul>\n     * <p>This method can also be overridden in a subclass.\n     * It is recommended to use the {@link Formatter#formatMessage}\n     * convenience method to localize and format the message field.\n     *\n     * @param record the log record to be formatted.\n     * @return a formatted log record\n     ",
    "links" : [ "#format", "java.util.Date", "java.util.Formatterjava.util.Formatter", "java.util.logging.Formatter#formatMessage(LogRecord)", "java.text.MessageFormat", "java.util.logging.Formatter#formatMessage" ]
  } ],
  "methodNames" : [ "public synchronized String format(LogRecord record)" ],
  "variableNames" : [ "format", "dat" ]
}