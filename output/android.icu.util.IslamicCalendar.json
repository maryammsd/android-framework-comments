{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/IslamicCalendar.java",
  "packageName" : "android.icu.util",
  "className" : "IslamicCalendar",
  "comment" : "\n * <code>IslamicCalendar</code> is a subclass of <code>Calendar</code>\n * that that implements the Islamic civil and religious calendars.  It\n * is used as the civil calendar in most of the Arab world and the\n * liturgical calendar of the Islamic faith worldwide.  This calendar\n * is also known as the \"Hijri\" calendar, since it starts at the time\n * of Mohammed's emigration (or \"hijra\") to Medinah on Thursday,\n * July 15, 622 AD (Julian).\n * <p>\n * The Islamic calendar is strictly lunar, and thus an Islamic year of twelve\n * lunar months does not correspond to the solar year used by most other\n * calendar systems, including the Gregorian.  An Islamic year is, on average,\n * about 354 days long, so each successive Islamic year starts about 11 days\n * earlier in the corresponding Gregorian year.\n * <p>\n * Each month of the calendar starts when the new moon's crescent is visible\n * at sunset.  However, in order to keep the time fields in this class\n * synchronized with those of the other calendars and with local clock time,\n * we treat days and months as beginning at midnight,\n * roughly 6 hours after the corresponding sunset.\n * <p>\n * There are three main variants of the Islamic calendar in existence.  The first\n * is the <em>civil</em> calendar, which uses a fixed cycle of alternating 29-\n * and 30-day months, with a leap day added to the last month of 11 out of\n * every 30 years.  This calendar is easily calculated and thus predictable in\n * advance, so it is used as the civil calendar in a number of Arab countries.\n * This is the default behavior of a newly-created <code>IslamicCalendar</code>\n * object.\n * <p>\n * The Islamic <em>religious</em> calendar and Saudi Arabia's <em>Umm al-Qura</em>\n * calendar, however, are based on the <em>observation</em> of the crescent moon.\n * It is thus affected by the position at which the\n * observations are made, seasonal variations in the time of sunset, the\n * eccentricities of the moon's orbit, and even the weather at the observation\n * site.  This makes it impossible to calculate in advance, and it causes the\n * start of a month in the religious calendar to differ from the civil calendar\n * by up to three days.\n * <p>\n * Using astronomical calculations for the position of the sun and moon, the\n * moon's illumination, and other factors, it is possible to determine the start\n * of a lunar month with a fairly high degree of certainty.  However, these\n * calculations are extremely complicated and thus slow, so most algorithms,\n * including the one used here, are only approximations of the true astronomical\n * calculations.  At present, the approximations used in this class are fairly\n * simplistic; they will be improved in later versions of the code.\n * <p>\n * Like the Islamic religious calendar, <em>Umm al-Qura</em> is also based\n * on the sighting method of the crescent moon but is standardized by Saudi Arabia.\n * <p>\n * The fixed-cycle <em>civil</em> calendar is used.\n * <p>\n * This class should not be subclassed.</p>\n * <p>\n * IslamicCalendar usually should be instantiated using\n * {@link android.icu.util.Calendar#getInstance(ULocale)} passing in a <code>ULocale</code>\n * with the tag <code>\"@calendar=islamic\"</code> or <code>\"@calendar=islamic-civil\"</code>\n * or <code>\"@calendar=islamic-umalqura\"</code>.</p>\n *\n * @see android.icu.util.GregorianCalendar\n * @see android.icu.util.Calendar\n *\n * @author Laura Werner\n * @author Alan Liu\n ",
  "links" : [ "android.icu.util.Calendar#getInstance(ULocale)" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " jdk1.4.2 serialver",
    "links" : [ ]
  }, {
    "name" : "MUHARRAM",
    "type" : "int",
    "comment" : "\n     * Constant for Muharram, the 1st month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "SAFAR",
    "type" : "int",
    "comment" : "\n     * Constant for Safar, the 2nd month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "RABI_1",
    "type" : "int",
    "comment" : "\n     * Constant for Rabi' al-awwal (or Rabi' I), the 3rd month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "RABI_2",
    "type" : "int",
    "comment" : "\n     * Constant for Rabi' al-thani or (Rabi' II), the 4th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "JUMADA_1",
    "type" : "int",
    "comment" : "\n     * Constant for Jumada al-awwal or (Jumada I), the 5th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "JUMADA_2",
    "type" : "int",
    "comment" : "\n     * Constant for Jumada al-thani or (Jumada II), the 6th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "RAJAB",
    "type" : "int",
    "comment" : "\n     * Constant for Rajab, the 7th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHABAN",
    "type" : "int",
    "comment" : "\n     * Constant for Sha'ban, the 8th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "RAMADAN",
    "type" : "int",
    "comment" : "\n     * Constant for Ramadan, the 9th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHAWWAL",
    "type" : "int",
    "comment" : "\n     * Constant for Shawwal, the 10th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "DHU_AL_QIDAH",
    "type" : "int",
    "comment" : "\n     * Constant for Dhu al-Qi'dah, the 11th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "DHU_AL_HIJJAH",
    "type" : "int",
    "comment" : "\n     * Constant for Dhu al-Hijjah, the 12th month of the Islamic year.\n     ",
    "links" : [ ]
  }, {
    "name" : "HIJRA_MILLIS",
    "type" : "long",
    "comment" : " 7/16/622 AD 00:00",
    "links" : [ ]
  }, {
    "name" : "CIVIL_EPOCH",
    "type" : "long",
    "comment" : " CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)",
    "links" : [ ]
  }, {
    "name" : "ASTRONOMICAL_EPOCH",
    "type" : "long",
    "comment" : " CE 622 July 15 Thursday (Julian calendar)",
    "links" : [ ]
  }, {
    "name" : "ISLAMIC_ALGORITHM",
    "type" : "Algorithm",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CIVIL_ALGORITHM",
    "type" : "Algorithm",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TBLA_ALGORITHM",
    "type" : "Algorithm",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UMALQURA_ALGORITHM",
    "type" : "Algorithm",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIMITS",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UMALQURA_MONTHLENGTH",
    "type" : "int[]",
    "comment" : "\n     * bit map array where a bit turned on represents a month with 30 days.\n     ",
    "links" : [ ]
  }, {
    "name" : "UMALQURA_YEAR_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UMALQURA_YEAR_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UMALQURA_YEAR_START_ESTIMATE_FIX",
    "type" : "byte[]",
    "comment" : " we could compress this down more if we need to",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "CalendarCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "civil",
    "type" : "boolean",
    "comment" : "\n     * <code>true</code> if this object uses the fixed-cycle Islamic civil calendar,\n     * and <code>false</code> if it approximates the true religious calendar using\n     * astronomical calculations for the time of the new moon.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "cType",
    "type" : "CalculationType",
    "comment" : "\n     * determines the type of calculation to use for this instance\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "Algorithm",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCivil(boolean beCivil)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether this object uses the fixed-cycle Islamic civil calendar\n     * or an approximation of the religious, astronomical calendar.\n     *\n     * @param beCivil   <code>true</code> to use the civil calendar,\n     *                  <code>false</code> to use the astronomical calendar.\n     * @apiNote <strong>Discouraged:</strong> ICU 57 use setCalculationType(CalculationType) instead\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCivil()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <code>true</code> if this object is using the fixed-cycle civil\n     * calendar, or <code>false</code> if using the religious, astronomical\n     * calendar.\n     * @apiNote <strong>Discouraged:</strong> ICU 57 use getCalculationType() instead\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetLimit(int field, int limitType)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final boolean civilLeapYear(int year)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether a year is a leap year in the Islamic civil calendar\n     ",
    "links" : [ ]
  }, {
    "name" : "private long yearStart(int year)",
    "returnType" : "long",
    "comment" : "\n     * Return the day # on which the given year starts.  Days are counted\n     * from the Hijri epoch, origin 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final long trueMonthStart(long month)",
    "returnType" : "long",
    "comment" : "\n     * Find the day number on which a particular month of the true/lunar\n     * Islamic calendar starts.\n     *\n     * @param month The month in question, origin 0 from the Hijri epoch\n     *\n     * @return The day number on which the given month starts.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final double moonAge(long time)",
    "returnType" : "double",
    "comment" : "\n     * Return the \"age\" of the moon at the given time; this is the difference\n     * in ecliptic latitude between the moon and the sun.  This method simply\n     * calls CalendarAstronomer.moonAge, converts to degrees,\n     * and adjusts the resultto be in the range [-180, 180].\n     *\n     * @param time  The time at which the moon's age is desired,\n     *              in millis since 1/1/1970.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetMonthLength(int extendedYear, int month)",
    "returnType" : "int",
    "comment" : "\n     * Return the length (in days) of the given month.\n     *\n     * @param extendedYear  The hijri year\n     * @param month The hijri month, 0-based\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetYearLength(int extendedYear)",
    "returnType" : "int",
    "comment" : "\n     * Return the number of days in the given Islamic year\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetExtendedYear()",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void handleComputeFields(int julianDay)",
    "returnType" : "void",
    "comment" : "\n     * Override Calendar to compute several fields specific to the Islamic\n     * calendar system.  These are:\n     *\n     * <ul><li>ERA\n     * <li>YEAR\n     * <li>MONTH\n     * <li>DAY_OF_MONTH\n     * <li>DAY_OF_YEAR\n     * <li>EXTENDED_YEAR</ul>\n     *\n     * The DAY_OF_WEEK and DOW_LOCAL fields are already set when this\n     * method is called. The getGregorianXxx() methods return Gregorian\n     * calendar equivalents for the given Julian day.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCalculationType(CalculationType type)",
    "returnType" : "void",
    "comment" : "\n     * sets the calculation type for this calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CalculationType getCalculationType()",
    "returnType" : "CalculationType",
    "comment" : "\n     * gets the calculation type for this calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setCalcTypeForLocale(ULocale locale)",
    "returnType" : "void",
    "comment" : "\n     * set type based on locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean inTemporalLeapYear()",
    "returnType" : "boolean",
    "comment" : "\n     * <strong>[icu]</strong> Returns true if the date is in a leap year. Recalculate the current time\n     * field values if the time value has been changed by a call to setTime().\n     * This method is semantically const, but may alter the object in memory.\n     * A \"leap year\" is a year that contains more days than other years (for\n     * solar or lunar calendars) or more months than other years (for lunisolar\n     * calendars like Hebrew or Chinese), as defined in the ECMAScript Temporal\n     * proposal.\n     * @return true if the date in the fields is in a Temporal proposal\n     *               defined leap year. False otherwise.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCivil(boolean beCivil)", "public boolean isCivil()", "protected int handleGetLimit(int field, int limitType)", "private static final boolean civilLeapYear(int year)", "private long yearStart(int year)", "private static final long trueMonthStart(long month)", " static final double moonAge(long time)", "protected int handleGetMonthLength(int extendedYear, int month)", "protected int handleGetYearLength(int extendedYear)", "protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)", "protected int handleGetExtendedYear()", "protected void handleComputeFields(int julianDay)", "public void setCalculationType(CalculationType type)", "public CalculationType getCalculationType()", "private void setCalcTypeForLocale(ULocale locale)", "public String getType()", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "public boolean inTemporalLeapYear()" ],
  "variableNames" : [ "serialVersionUID", "MUHARRAM", "SAFAR", "RABI_1", "RABI_2", "JUMADA_1", "JUMADA_2", "RAJAB", "SHABAN", "RAMADAN", "SHAWWAL", "DHU_AL_QIDAH", "DHU_AL_HIJJAH", "HIJRA_MILLIS", "CIVIL_EPOCH", "ASTRONOMICAL_EPOCH", "ISLAMIC_ALGORITHM", "CIVIL_ALGORITHM", "TBLA_ALGORITHM", "UMALQURA_ALGORITHM", "LIMITS", "UMALQURA_MONTHLENGTH", "UMALQURA_YEAR_START", "UMALQURA_YEAR_END", "UMALQURA_YEAR_START_ESTIMATE_FIX", "cache", "civil", "cType", "algorithm" ]
}