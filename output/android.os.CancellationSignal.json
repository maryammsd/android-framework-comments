{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/CancellationSignal.java",
  "packageName" : "android.os",
  "className" : "CancellationSignal",
  "comment" : "\n * Provides the ability to cancel an operation in progress.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mIsCanceled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCancelListener",
    "type" : "OnCancelListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemote",
    "type" : "ICancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelInProgress",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isCanceled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation has been canceled.\n     *\n     * @return True if the operation has been canceled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void throwIfCanceled()",
    "returnType" : "void",
    "comment" : "\n     * Throws {@link OperationCanceledException} if the operation has been canceled.\n     *\n     * @throws OperationCanceledException if the operation has been canceled.\n     ",
    "links" : [ "android.os.OperationCanceledException" ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the operation and signals the cancellation listener.\n     * If the operation has not yet started, then it will be canceled as soon as it does.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCancelListener(OnCancelListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cancellation listener to be called when canceled.\n     *\n     * This method is intended to be used by the recipient of a cancellation signal\n     * such as a database or a content provider to handle cancellation requests\n     * while performing a long-running operation.  This method is not intended to be\n     * used by applications themselves.\n     *\n     * If {@link CancellationSignal#cancel} has already been called, then the provided\n     * listener is invoked immediately.\n     *\n     * This method is guaranteed that the listener will not be called after it\n     * has been removed.\n     *\n     * @param listener The cancellation listener, or null to remove the current listener.\n     ",
    "links" : [ "android.os.CancellationSignal#cancel" ]
  }, {
    "name" : "public void setRemote(ICancellationSignal remote)",
    "returnType" : "void",
    "comment" : "\n     * Sets the remote transport.\n     *\n     * If {@link CancellationSignal#cancel} has already been called, then the provided\n     * remote transport is canceled immediately.\n     *\n     * This method is guaranteed that the remote transport will not be called after it\n     * has been removed.\n     *\n     * @param remote The remote transport, or null to remove.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.CancellationSignal#cancel" ]
  }, {
    "name" : "private void waitForCancelFinishedLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ICancellationSignal createTransport()",
    "returnType" : "ICancellationSignal",
    "comment" : "\n     * Creates a transport that can be returned back to the caller of\n     * a Binder function and subsequently used to dispatch a cancellation signal.\n     *\n     * @return The new cancellation signal transport.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CancellationSignal fromTransport(ICancellationSignal transport)",
    "returnType" : "CancellationSignal",
    "comment" : "\n     * Given a locally created transport, returns its associated cancellation signal.\n     *\n     * @param transport The locally created transport, or null if none.\n     * @return The associated cancellation signal, or null if none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isCanceled()", "public void throwIfCanceled()", "public void cancel()", "public void setOnCancelListener(OnCancelListener listener)", "public void setRemote(ICancellationSignal remote)", "private void waitForCancelFinishedLocked()", "public static ICancellationSignal createTransport()", "public static CancellationSignal fromTransport(ICancellationSignal transport)" ],
  "variableNames" : [ "mIsCanceled", "mOnCancelListener", "mRemote", "mCancelInProgress" ]
}