{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/rollback/RollbackManager.java",
  "packageName" : "android.content.rollback",
  "className" : "RollbackManager",
  "comment" : "\n * Offers the ability to rollback packages after upgrade.\n * <p>\n * For packages installed with rollbacks enabled, the RollbackManager can be\n * used to initiate rollback of those packages for a limited time period after\n * upgrade.\n *\n * @see PackageInstaller.SessionParams#setEnableRollback(boolean)\n * @hide\n ",
  "variables" : [ {
    "name" : "mCallerPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IRollbackManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_ROLLBACK_LIFETIME_MILLIS",
    "type" : "String",
    "comment" : "\n     * Lifetime duration of rollback packages in millis. A rollback will be available for\n     * at most that duration of time after a package is installed with\n     * {@link PackageInstaller.SessionParams#setEnableRollback(boolean)}.\n     *\n     * <p>If flag value is negative, the default value will be assigned.\n     *\n     * @see RollbackManager\n     *\n     * Flag type: {@code long}\n     * Namespace: NAMESPACE_ROLLBACK_BOOT\n     *\n     * @hide\n     ",
    "links" : [ "PackageInstaller.SessionParams#setEnableRollback(boolean)" ]
  }, {
    "name" : "EXTRA_STATUS",
    "type" : "String",
    "comment" : "\n     * Status of a rollback commit. Will be one of\n     * {@link #STATUS_SUCCESS}, {@link #STATUS_FAILURE},\n     * {@link #STATUS_FAILURE_ROLLBACK_UNAVAILABLE}, {@link #STATUS_FAILURE_INSTALL}\n     *\n     * @see Intent#getIntExtra(String, int)\n     ",
    "links" : [ "#STATUS_FAILURE", "#STATUS_SUCCESS", "#STATUS_FAILURE_ROLLBACK_UNAVAILABLE", "#STATUS_FAILURE_INSTALL" ]
  }, {
    "name" : "EXTRA_STATUS_MESSAGE",
    "type" : "String",
    "comment" : "\n     * Detailed string representation of the status, including raw details that\n     * are useful for debugging.\n     *\n     * @see Intent#getStringExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The rollback was successfully committed.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_FAILURE",
    "type" : "int",
    "comment" : "\n     * The rollback could not be committed due to some generic failure.\n     *\n     * @see #EXTRA_STATUS_MESSAGE\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_FAILURE_ROLLBACK_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The rollback could not be committed because it was no longer available.\n     *\n     * @see #EXTRA_STATUS_MESSAGE\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_FAILURE_INSTALL",
    "type" : "int",
    "comment" : "\n     * The rollback failed to install successfully.\n     *\n     * @see #EXTRA_STATUS_MESSAGE\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<RollbackInfo> getAvailableRollbacks()",
    "returnType" : "List<RollbackInfo>",
    "comment" : "\n     * Returns a list of all currently available rollbacks.\n     *\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<RollbackInfo> getRecentlyCommittedRollbacks()",
    "returnType" : "List<RollbackInfo>",
    "comment" : "\n     * Gets the list of all recently committed rollbacks.\n     * This is for the purposes of preventing re-install of a bad version of a\n     * package and monitoring the status of a staged rollback.\n     * <p>\n     * Returns an empty list if there are no recently committed rollbacks.\n     * <p>\n     * To avoid having to keep around complete rollback history forever on a\n     * device, the returned list of rollbacks is only guaranteed to include\n     * rollbacks that are still relevant. A rollback is no longer considered\n     * relevant if the package is subsequently uninstalled or upgraded\n     * (without the possibility of rollback) to a higher version code than was\n     * rolled back from.\n     *\n     * @return the recently committed rollbacks\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void commitRollback(int rollbackId, @NonNull List<VersionedPackage> causePackages, @NonNull IntentSender statusReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Commit the rollback with given id, rolling back all versions of the\n     * packages to the last good versions previously installed on the device\n     * as specified in the corresponding RollbackInfo object. The\n     * rollback will fail if any of the installed packages or available\n     * rollbacks are inconsistent with the versions specified in the given\n     * rollback object, which can happen if a package has been updated or a\n     * rollback expired since the rollback object was retrieved from\n     * {@link #getAvailableRollbacks()}.\n     *\n     * @param rollbackId ID of the rollback to commit\n     * @param causePackages package versions to record as the motivation for this\n     *                      rollback.\n     * @param statusReceiver where to deliver the results. Intents sent to\n     *                       this receiver contain {@link #EXTRA_STATUS}\n     *                       and {@link #EXTRA_STATUS_MESSAGE}.\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     ",
    "links" : [ "#EXTRA_STATUS_MESSAGE", "#getAvailableRollbacks()", "#EXTRA_STATUS" ]
  }, {
    "name" : "public void reloadPersistedData()",
    "returnType" : "void",
    "comment" : "\n     * Reload all persisted rollback data from device storage.\n     * This API is meant to test that rollback state is properly preserved\n     * across device reboot, by simulating what happens on reboot without\n     * actually rebooting the device.\n     *\n     * Note rollbacks in the process of enabling will be lost after calling\n     * this method since they are not persisted yet. Don't call this method\n     * in the middle of the install process.\n     *\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void expireRollbackForPackage(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Expire the rollback data for a given package.\n     * This API is meant to facilitate testing of rollback logic for\n     * expiring rollback data. Removes rollback data for available and\n     * recently committed rollbacks that contain the given package.\n     *\n     * @param packageName the name of the package to expire data for.\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void blockRollbackManager(long millis)",
    "returnType" : "void",
    "comment" : "\n     * Block the RollbackManager for a specified amount of time.\n     * This API is meant to facilitate testing of race conditions in\n     * RollbackManager. Blocks RollbackManager from processing anything for\n     * the given number of milliseconds.\n     *\n     * @param millis number of milliseconds to block the RollbackManager for\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mCallerPackageName", "mBinder", "PROPERTY_ROLLBACK_LIFETIME_MILLIS", "EXTRA_STATUS", "EXTRA_STATUS_MESSAGE", "STATUS_SUCCESS", "STATUS_FAILURE", "STATUS_FAILURE_ROLLBACK_UNAVAILABLE", "STATUS_FAILURE_INSTALL" ],
  "methodNames" : [ "public List<RollbackInfo> getAvailableRollbacks()", "public List<RollbackInfo> getRecentlyCommittedRollbacks()", "public void commitRollback(int rollbackId, @NonNull List<VersionedPackage> causePackages, @NonNull IntentSender statusReceiver)", "public void reloadPersistedData()", "public void expireRollbackForPackage(@NonNull String packageName)", "public void blockRollbackManager(long millis)" ]
}