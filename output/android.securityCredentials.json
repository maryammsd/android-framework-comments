{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/Credentials.java",
  "packageName" : "android.security",
  "className" : "Credentials",
  "comment" : "\n * {@hide}\n ",
  "variables" : [ {
    "name" : "LOGTAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTALL_ACTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTALL_AS_USER_ACTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CA_CERTIFICATE",
    "type" : "String",
    "comment" : " Key prefix for CA certificates. ",
    "links" : [ ]
  }, {
    "name" : "USER_CERTIFICATE",
    "type" : "String",
    "comment" : " Key prefix for user certificates. ",
    "links" : [ ]
  }, {
    "name" : "USER_PRIVATE_KEY",
    "type" : "String",
    "comment" : " Key prefix for user private and secret keys. ",
    "links" : [ ]
  }, {
    "name" : "USER_SECRET_KEY",
    "type" : "String",
    "comment" : " Key prefix for user secret keys.\n     *  @deprecated use {@code USER_PRIVATE_KEY} for this category instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "VPN",
    "type" : "String",
    "comment" : " Key prefix for VPN. ",
    "links" : [ ]
  }, {
    "name" : "PLATFORM_VPN",
    "type" : "String",
    "comment" : " Key prefix for platform VPNs. ",
    "links" : [ ]
  }, {
    "name" : "WIFI",
    "type" : "String",
    "comment" : " Key prefix for WIFI. ",
    "links" : [ ]
  }, {
    "name" : "APP_SOURCE_CERTIFICATE",
    "type" : "String",
    "comment" : " Key prefix for App Source certificates. ",
    "links" : [ ]
  }, {
    "name" : "LOCKDOWN_VPN",
    "type" : "String",
    "comment" : " Key containing suffix of lockdown VPN profile. ",
    "links" : [ ]
  }, {
    "name" : "CERTIFICATE_USAGE_CA",
    "type" : "String",
    "comment" : " Name of CA certificate usage. ",
    "links" : [ ]
  }, {
    "name" : "CERTIFICATE_USAGE_USER",
    "type" : "String",
    "comment" : " Name of User certificate usage. ",
    "links" : [ ]
  }, {
    "name" : "CERTIFICATE_USAGE_WIFI",
    "type" : "String",
    "comment" : " Name of WIFI certificate usage. ",
    "links" : [ ]
  }, {
    "name" : "CERTIFICATE_USAGE_APP_SOURCE",
    "type" : "String",
    "comment" : " Name of App Source certificate usage. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PUBLIC_KEY",
    "type" : "String",
    "comment" : " Data type for public keys. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PRIVATE_KEY",
    "type" : "String",
    "comment" : " Data type for private keys. ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_CRT",
    "type" : "String",
    "comment" : " historically used by Android",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_P12",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_CER",
    "type" : "String",
    "comment" : " commonly used on Windows",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_PFX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INSTALL_AS_UID",
    "type" : "String",
    "comment" : "\n     * Intent extra: install the certificate bundle as this UID instead of\n     * system.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CERTIFICATE_USAGE",
    "type" : "String",
    "comment" : "\n     * Intent extra: type of the certificate to install\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_USER_KEY_ALIAS",
    "type" : "String",
    "comment" : "\n     * Intent extra: name for the user's key pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_USER_PRIVATE_KEY_DATA",
    "type" : "String",
    "comment" : "\n     * Intent extra: data for the user's private key in PEM-encoded PKCS#8.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_USER_CERTIFICATE_DATA",
    "type" : "String",
    "comment" : "\n     * Intent extra: data for the user's certificate in PEM-encoded X.509.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CA_CERTIFICATES_DATA",
    "type" : "String",
    "comment" : "\n     * Intent extra: data for CA certificate chain in PEM-encoded X.509.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static byte[] convertToPem(Certificate... objects) throws IOException, CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "\n     * Convert objects to a PEM format which is used for\n     * CA_CERTIFICATE and USER_CERTIFICATE entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<X509Certificate> convertFromPem(byte[] bytes) throws IOException, CertificateException",
    "returnType" : "List<X509Certificate>",
    "comment" : "\n     * Convert objects from PEM format, which is used for\n     * CA_CERTIFICATE and USER_CERTIFICATE entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteAllTypesForAlias(KeyStore keystore, String alias)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete all types (private key, user certificate, CA certificate) for a\n     * particular {@code alias}. All three can exist for any given alias.\n     * Returns {@code true} if the alias no longer contains any types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteAllTypesForAlias(KeyStore keystore, String alias, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete all types (private key, user certificate, CA certificate) for a\n     * particular {@code alias}. All three can exist for any given alias.\n     * Returns {@code true} if the alias no longer contains any types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteCertificateTypesForAlias(KeyStore keystore, String alias)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete certificate types (user certificate, CA certificate) for a\n     * particular {@code alias}. Both can exist for any given alias.\n     * Returns {@code true} if the alias no longer contains either type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteCertificateTypesForAlias(KeyStore keystore, String alias, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete certificate types (user certificate, CA certificate) for a\n     * particular {@code alias}. Both can exist for any given alias.\n     * Returns {@code true} if the alias no longer contains either type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteUserKeyTypeForAlias(KeyStore keystore, String alias)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete user key for a particular {@code alias}.\n     * Returns {@code true} if the entry no longer exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteUserKeyTypeForAlias(KeyStore keystore, String alias, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete user key for a particular {@code alias}.\n     * Returns {@code true} if the entry no longer exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteLegacyKeyForAlias(KeyStore keystore, String alias, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete legacy prefixed entry for a particular {@code alias}\n     * Returns {@code true} if the entry no longer exists.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOGTAG", "INSTALL_ACTION", "INSTALL_AS_USER_ACTION", "CA_CERTIFICATE", "USER_CERTIFICATE", "USER_PRIVATE_KEY", "USER_SECRET_KEY", "VPN", "PLATFORM_VPN", "WIFI", "APP_SOURCE_CERTIFICATE", "LOCKDOWN_VPN", "CERTIFICATE_USAGE_CA", "CERTIFICATE_USAGE_USER", "CERTIFICATE_USAGE_WIFI", "CERTIFICATE_USAGE_APP_SOURCE", "EXTRA_PUBLIC_KEY", "EXTRA_PRIVATE_KEY", "EXTENSION_CRT", "EXTENSION_P12", "EXTENSION_CER", "EXTENSION_PFX", "EXTRA_INSTALL_AS_UID", "EXTRA_CERTIFICATE_USAGE", "EXTRA_USER_KEY_ALIAS", "EXTRA_USER_PRIVATE_KEY_DATA", "EXTRA_USER_CERTIFICATE_DATA", "EXTRA_CA_CERTIFICATES_DATA" ],
  "methodNames" : [ "public static byte[] convertToPem(Certificate... objects) throws IOException, CertificateEncodingException", "public static List<X509Certificate> convertFromPem(byte[] bytes) throws IOException, CertificateException", "public static boolean deleteAllTypesForAlias(KeyStore keystore, String alias)", "public static boolean deleteAllTypesForAlias(KeyStore keystore, String alias, int uid)", "public static boolean deleteCertificateTypesForAlias(KeyStore keystore, String alias)", "public static boolean deleteCertificateTypesForAlias(KeyStore keystore, String alias, int uid)", "public static boolean deleteUserKeyTypeForAlias(KeyStore keystore, String alias)", "public static boolean deleteUserKeyTypeForAlias(KeyStore keystore, String alias, int uid)", "public static boolean deleteLegacyKeyForAlias(KeyStore keystore, String alias, int uid)" ]
}