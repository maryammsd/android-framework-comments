{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/ChronoPeriod.java",
  "packageName" : "java.time.chrono",
  "className" : "ChronoPeriod",
  "comment" : "\n * A date-based amount of time, such as '3 years, 4 months and 5 days' in an\n * arbitrary chronology, intended for advanced globalization use cases.\n * <p>\n * This interface models a date-based amount of time in a calendar system.\n * While most calendar systems use years, months and days, some do not.\n * Therefore, this interface operates solely in terms of a set of supported\n * units that are defined by the {@code Chronology}.\n * The set of supported units is fixed for a given chronology.\n * The amount of a supported unit may be set to zero.\n * <p>\n * The period is modeled as a directed amount of time, meaning that individual\n * parts of the period may be negative.\n *\n * @implSpec\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static ChronoPeriod between(ChronoLocalDate startDateInclusive, ChronoLocalDate endDateExclusive)",
    "returnType" : "ChronoPeriod",
    "comment" : "\n     * Obtains a {@code ChronoPeriod} consisting of amount of time between two dates.\n     * <p>\n     * The start date is included, but the end date is not.\n     * The period is calculated using {@link ChronoLocalDate#until(ChronoLocalDate)}.\n     * As such, the calculation is chronology specific.\n     * <p>\n     * The chronology of the first date is used.\n     * The chronology of the second date is ignored, with the date being converted\n     * to the target chronology system before the calculation starts.\n     * <p>\n     * The result of this method can be a negative period if the end is before the start.\n     * In most cases, the positive/negative sign will be the same in each of the supported fields.\n     *\n     * @param startDateInclusive  the start date, inclusive, specifying the chronology of the calculation, not null\n     * @param endDateExclusive  the end date, exclusive, in any chronology, not null\n     * @return the period between this date and the end date, not null\n     * @see ChronoLocalDate#until(ChronoLocalDate)\n     ",
    "links" : [ "java.time.chrono.ChronoLocalDate#until(ChronoLocalDate)" ]
  }, {
    "name" : " long get(TemporalUnit unit)",
    "returnType" : "long",
    "comment" : "\n     * Gets the value of the requested unit.\n     * <p>\n     * The supported units are chronology specific.\n     * They will typically be {@link ChronoUnit#YEARS YEARS},\n     * {@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.\n     * Requesting an unsupported unit will throw an exception.\n     *\n     * @param unit the {@code TemporalUnit} for which to return the value\n     * @return the long value of the unit\n     * @throws DateTimeException if the unit is not supported\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     ",
    "links" : [ "java.time.temporal.ChronoUnit#YEARS", "java.time.temporal.ChronoUnit#MONTHS", "java.time.temporal.ChronoUnit#DAYS" ]
  }, {
    "name" : " List<TemporalUnit> getUnits()",
    "returnType" : "List<TemporalUnit>",
    "comment" : "\n     * Gets the set of units supported by this period.\n     * <p>\n     * The supported units are chronology specific.\n     * They will typically be {@link ChronoUnit#YEARS YEARS},\n     * {@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.\n     * They are returned in order from largest to smallest.\n     * <p>\n     * This set can be used in conjunction with {@link #get(TemporalUnit)}\n     * to access the entire state of the period.\n     *\n     * @return a list containing the supported units, not null\n     ",
    "links" : [ "java.time.temporal.ChronoUnit#YEARS", "#get(TemporalUnit)", "java.time.temporal.ChronoUnit#MONTHS", "java.time.temporal.ChronoUnit#DAYS" ]
  }, {
    "name" : " Chronology getChronology()",
    "returnType" : "Chronology",
    "comment" : "\n     * Gets the chronology that defines the meaning of the supported units.\n     * <p>\n     * The period is defined by the chronology.\n     * It controls the supported units and restricts addition/subtraction\n     * to {@code ChronoLocalDate} instances of the same chronology.\n     *\n     * @return the chronology defining the period, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isZero()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if all the supported units of this period are zero.\n     *\n     * @return true if this period is zero-length\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isNegative()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if any of the supported units of this period are negative.\n     *\n     * @return true if any unit of this period is negative\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoPeriod plus(TemporalAmount amountToAdd)",
    "returnType" : "ChronoPeriod",
    "comment" : "\n     * Returns a copy of this period with the specified period added.\n     * <p>\n     * If the specified amount is a {@code ChronoPeriod} then it must have\n     * the same chronology as this period. Implementations may choose to\n     * accept or reject other {@code TemporalAmount} implementations.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the period to add, not null\n     * @return a {@code ChronoPeriod} based on this period with the requested period added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoPeriod minus(TemporalAmount amountToSubtract)",
    "returnType" : "ChronoPeriod",
    "comment" : "\n     * Returns a copy of this period with the specified period subtracted.\n     * <p>\n     * If the specified amount is a {@code ChronoPeriod} then it must have\n     * the same chronology as this period. Implementations may choose to\n     * accept or reject other {@code TemporalAmount} implementations.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToSubtract  the period to subtract, not null\n     * @return a {@code ChronoPeriod} based on this period with the requested period subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoPeriod multipliedBy(int scalar)",
    "returnType" : "ChronoPeriod",
    "comment" : "\n     * Returns a new instance with each amount in this period in this period\n     * multiplied by the specified scalar.\n     * <p>\n     * This returns a period with each supported unit individually multiplied.\n     * For example, a period of \"2 years, -3 months and 4 days\" multiplied by\n     * 3 will return \"6 years, -9 months and 12 days\".\n     * No normalization is performed.\n     *\n     * @param scalar  the scalar to multiply by, not null\n     * @return a {@code ChronoPeriod} based on this period with the amounts multiplied\n     *  by the scalar, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoPeriod negated()",
    "returnType" : "ChronoPeriod",
    "comment" : "\n     * Returns a new instance with each amount in this period negated.\n     * <p>\n     * This returns a period with each supported unit individually negated.\n     * For example, a period of \"2 years, -3 months and 4 days\" will be\n     * negated to \"-2 years, 3 months and -4 days\".\n     * No normalization is performed.\n     *\n     * @return a {@code ChronoPeriod} based on this period with the amounts negated, not null\n     * @throws ArithmeticException if numeric overflow occurs, which only happens if\n     *  one of the units has the value {@code Long.MIN_VALUE}\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoPeriod normalized()",
    "returnType" : "ChronoPeriod",
    "comment" : "\n     * Returns a copy of this period with the amounts of each unit normalized.\n     * <p>\n     * The process of normalization is specific to each calendar system.\n     * For example, in the ISO calendar system, the years and months are\n     * normalized but the days are not, such that \"15 months\" would be\n     * normalized to \"1 year and 3 months\".\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return a {@code ChronoPeriod} based on this period with the amounts of each\n     *  unit normalized, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " Temporal addTo(Temporal temporal)",
    "returnType" : "Temporal",
    "comment" : "\n     * Adds this period to the specified temporal object.\n     * <p>\n     * This returns a temporal object of the same observable type as the input\n     * with this period added.\n     * <p>\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#plus(TemporalAmount)}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisPeriod.addTo(dateTime);\n     *   dateTime = dateTime.plus(thisPeriod);\n     * </pre>\n     * <p>\n     * The specified temporal must have the same chronology as this period.\n     * This returns a temporal with the non-zero supported units added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param temporal  the temporal object to adjust, not null\n     * @return an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.Temporal#plus(TemporalAmount)" ]
  }, {
    "name" : " Temporal subtractFrom(Temporal temporal)",
    "returnType" : "Temporal",
    "comment" : "\n     * Subtracts this period from the specified temporal object.\n     * <p>\n     * This returns a temporal object of the same observable type as the input\n     * with this period subtracted.\n     * <p>\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#minus(TemporalAmount)}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisPeriod.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(thisPeriod);\n     * </pre>\n     * <p>\n     * The specified temporal must have the same chronology as this period.\n     * This returns a temporal with the non-zero supported units subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param temporal  the temporal object to adjust, not null\n     * @return an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.Temporal#minus(TemporalAmount)" ]
  }, {
    "name" : " boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this period is equal to another period, including the chronology.\n     * <p>\n     * Compares this period with another ensuring that the type, each amount and\n     * the chronology are the same.\n     * Note that this means that a period of \"15 Months\" is not equal to a period\n     * of \"1 Year and 3 Months\".\n     *\n     * @param obj  the object to check, null returns false\n     * @return true if this is equal to the other period\n     ",
    "links" : [ ]
  }, {
    "name" : " int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * A hash code for this period.\n     *\n     * @return a suitable hash code\n     ",
    "links" : [ ]
  }, {
    "name" : " String toString()",
    "returnType" : "String",
    "comment" : "\n     * Outputs this period as a {@code String}.\n     * <p>\n     * The output will include the period amounts and chronology.\n     *\n     * @return a string representation of this period, not null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ChronoPeriod between(ChronoLocalDate startDateInclusive, ChronoLocalDate endDateExclusive)", " long get(TemporalUnit unit)", " List<TemporalUnit> getUnits()", " Chronology getChronology()", " boolean isZero()", " boolean isNegative()", " ChronoPeriod plus(TemporalAmount amountToAdd)", " ChronoPeriod minus(TemporalAmount amountToSubtract)", " ChronoPeriod multipliedBy(int scalar)", " ChronoPeriod negated()", " ChronoPeriod normalized()", " Temporal addTo(Temporal temporal)", " Temporal subtractFrom(Temporal temporal)", " boolean equals(Object obj)", " int hashCode()", " String toString()" ],
  "variableNames" : [ ]
}