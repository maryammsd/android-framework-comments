{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaTimeProvider.java",
  "packageName" : "android.media",
  "className" : "MediaTimeProvider",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_TIME",
    "type" : "long",
    "comment" : "\n     * Presentation time value if no timed event notification is requested.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void notifyAt(long timeUs, OnMediaTimeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Cancels all previous notification request from this listener if any.  It\n     * registers the listener to get seek and stop notifications.  If timeUs is\n     * not negative, it also registers the listener for a timed event\n     * notification when the presentation time reaches (becomes greater) than\n     * the value specified.  This happens immediately if the current media time\n     * is larger than or equal to timeUs.\n     *\n     * @param timeUs presentation time to get timed event callback at (or\n     *               {@link #NO_TIME})\n     ",
    "links" : [ "#NO_TIME" ]
  }, {
    "name" : "public void scheduleUpdate(OnMediaTimeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Cancels all previous notification request from this listener if any.  It\n     * registers the listener to get seek and stop notifications.  If the media\n     * is stopped, the listener will immediately receive a stop notification.\n     * Otherwise, it will receive a timed event notificaton.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancelNotifications(OnMediaTimeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Cancels all previous notification request from this listener if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentTimeUs(boolean precise, boolean monotonic) throws IllegalStateException",
    "returnType" : "long",
    "comment" : "\n     * Get the current presentation time.\n     *\n     * @param precise   Whether getting a precise time is important. This is\n     *                  more costly.\n     * @param monotonic Whether returned time should be monotonic: that is,\n     *                  greater than or equal to the last returned time.  Don't\n     *                  always set this to true.  E.g. this has undesired\n     *                  consequences if the media is seeked between calls.\n     * @throws IllegalStateException if the media is not initialized\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void notifyAt(long timeUs, OnMediaTimeListener listener)", "public void scheduleUpdate(OnMediaTimeListener listener)", "public void cancelNotifications(OnMediaTimeListener listener)", "public long getCurrentTimeUs(boolean precise, boolean monotonic) throws IllegalStateException" ],
  "variableNames" : [ "NO_TIME" ]
}