{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/X509CRL.java",
  "packageName" : "java.security.cert",
  "className" : "X509CRL",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "issuerPrincipal",
    "type" : "X500Principal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this CRL for equality with the given\n     * object. If the {@code other} object is an\n     * {@code instanceof} {@code X509CRL}, then\n     * its encoded form is retrieved and compared with the\n     * encoded form of this CRL.\n     *\n     * @param other the object to test for equality with this CRL.\n     *\n     * @return true iff the encoded forms of the two CRLs\n     * match, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode value for this CRL from its\n     * encoded form.\n     *\n     * @return the hashcode value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getEncoded() throws CRLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the ASN.1 DER-encoded form of this CRL.\n     *\n     * @return the encoded form of this certificate\n     * @exception CRLException if an encoding error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void verify(PublicKey key) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this CRL was signed using the\n     * private key that corresponds to the given public key.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception NoSuchProviderException if there's no default provider.\n     * @exception SignatureException on signature errors.\n     * @exception CRLException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void verify(PublicKey key, String sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this CRL was signed using the\n     * private key that corresponds to the given public key.\n     * This method uses the signature verification engine\n     * supplied by the given provider.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     * @param sigProvider the name of the signature provider.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception NoSuchProviderException on incorrect provider.\n     * @exception SignatureException on signature errors.\n     * @exception CRLException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void verify(PublicKey key, Provider sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this CRL was signed using the\n     * private key that corresponds to the given public key.\n     * This method uses the signature verification engine\n     * supplied by the given provider. Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * This method was added to version 1.8 of the Java Platform Standard\n     * Edition. In order to maintain backwards compatibility with existing\n     * service providers, this method is not {@code abstract}\n     * and it provides a default implementation.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     * @param sigProvider the signature provider.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception SignatureException on signature errors.\n     * @exception CRLException on encoding errors.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the {@code version} (version number) value from the CRL.\n     * The ASN.1 definition for this is:\n     * <pre>\n     * version    Version OPTIONAL,\n     *             -- if present, must be v2\n     *\n     * Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }\n     *             -- v3 does not apply to CRLs but appears for consistency\n     *             -- with definition of Version for certs\n     * </pre>\n     *\n     * @return the version number, i.e. 1 or 2.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Principal getIssuerDN()",
    "returnType" : "Principal",
    "comment" : "\n     * <strong>Denigrated</strong>, replaced by {@linkplain\n     * #getIssuerX500Principal()}. This method returns the {@code issuer}\n     * as an implementation specific Principal object, which should not be\n     * relied upon by portable code.\n     *\n     * <p>\n     * Gets the {@code issuer} (issuer distinguished name) value from\n     * the CRL. The issuer name identifies the entity that signed (and\n     * issued) the CRL.\n     *\n     * <p>The issuer name field contains an\n     * X.500 distinguished name (DN).\n     * The ASN.1 definition for this is:\n     * <pre>\n     * issuer    Name\n     *\n     * Name ::= CHOICE { RDNSequence }\n     * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n     * RelativeDistinguishedName ::=\n     *     SET OF AttributeValueAssertion\n     *\n     * AttributeValueAssertion ::= SEQUENCE {\n     *                               AttributeType,\n     *                               AttributeValue }\n     * AttributeType ::= OBJECT IDENTIFIER\n     * AttributeValue ::= ANY\n     * </pre>\n     * The {@code Name} describes a hierarchical name composed of\n     * attributes,\n     * such as country name, and corresponding values, such as US.\n     * The type of the {@code AttributeValue} component is determined by\n     * the {@code AttributeType}; in general it will be a\n     * {@code directoryString}. A {@code directoryString} is usually\n     * one of {@code PrintableString},\n     * {@code TeletexString} or {@code UniversalString}.\n     *\n     * @return a Principal whose name is the issuer distinguished name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public X500Principal getIssuerX500Principal()",
    "returnType" : "X500Principal",
    "comment" : "\n     * Returns the issuer (issuer distinguished name) value from the\n     * CRL as an {@code X500Principal}.\n     * <p>\n     * It is recommended that subclasses override this method.\n     *\n     * @return an {@code X500Principal} representing the issuer\n     *          distinguished name\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getThisUpdate()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the {@code thisUpdate} date from the CRL.\n     * The ASN.1 definition for this is:\n     * <pre>\n     * thisUpdate   ChoiceOfTime\n     * ChoiceOfTime ::= CHOICE {\n     *     utcTime        UTCTime,\n     *     generalTime    GeneralizedTime }\n     * </pre>\n     *\n     * @return the {@code thisUpdate} date from the CRL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getNextUpdate()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the {@code nextUpdate} date from the CRL.\n     *\n     * @return the {@code nextUpdate} date from the CRL, or null if\n     * not present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract X509CRLEntry getRevokedCertificate(BigInteger serialNumber)",
    "returnType" : "X509CRLEntry",
    "comment" : "\n     * Gets the CRL entry, if any, with the given certificate serialNumber.\n     *\n     * @param serialNumber the serial number of the certificate for which a CRL entry\n     * is to be looked up\n     * @return the entry with the given serial number, or null if no such entry\n     * exists in this CRL.\n     * @see X509CRLEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509CRLEntry getRevokedCertificate(X509Certificate certificate)",
    "returnType" : "X509CRLEntry",
    "comment" : "\n     * Get the CRL entry, if any, for the given certificate.\n     *\n     * <p>This method can be used to lookup CRL entries in indirect CRLs,\n     * that means CRLs that contain entries from issuers other than the CRL\n     * issuer. The default implementation will only return entries for\n     * certificates issued by the CRL issuer. Subclasses that wish to\n     * support indirect CRLs should override this method.\n     *\n     * @param certificate the certificate for which a CRL entry is to be looked\n     *   up\n     * @return the entry for the given certificate, or null if no such entry\n     *   exists in this CRL.\n     * @exception NullPointerException if certificate is null\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Set<? extends X509CRLEntry> getRevokedCertificates()",
    "returnType" : "Set<? extends X509CRLEntry>",
    "comment" : "\n     * Gets all the entries from this CRL.\n     * This returns a Set of X509CRLEntry objects.\n     *\n     * @return all the entries or null if there are none present.\n     * @see X509CRLEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getTBSCertList() throws CRLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the DER-encoded CRL information, the\n     * {@code tbsCertList} from this CRL.\n     * This can be used to verify the signature independently.\n     *\n     * @return the DER-encoded CRL information.\n     * @exception CRLException if an encoding error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getSignature()",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the {@code signature} value (the raw signature bits) from\n     * the CRL.\n     * The ASN.1 definition for this is:\n     * <pre>\n     * signature     BIT STRING\n     * </pre>\n     *\n     * @return the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSigAlgName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the signature algorithm name for the CRL\n     * signature algorithm. An example is the string \"SHA256withRSA\".\n     * The ASN.1 definition for this is:\n     * <pre>\n     * signatureAlgorithm   AlgorithmIdentifier\n     *\n     * AlgorithmIdentifier  ::=  SEQUENCE  {\n     *     algorithm               OBJECT IDENTIFIER,\n     *     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n     *                             -- contains a value of the type\n     *                             -- registered for use with the\n     *                             -- algorithm object identifier value\n     * </pre>\n     *\n     * <p>The algorithm name is determined from the {@code algorithm}\n     * OID string.\n     *\n     * @return the signature algorithm name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSigAlgOID()",
    "returnType" : "String",
    "comment" : "\n     * Gets the signature algorithm OID string from the CRL.\n     * An OID is represented by a set of nonnegative whole numbers separated\n     * by periods.\n     * For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1\n     * with DSA signature algorithm defined in\n     * <a href=\"http://www.ietf.org/rfc/rfc3279.txt\">RFC 3279: Algorithms and\n     * Identifiers for the Internet X.509 Public Key Infrastructure Certificate\n     * and CRL Profile</a>.\n     *\n     * <p>See {@link #getSigAlgName() getSigAlgName} for\n     * relevant ASN.1 definitions.\n     *\n     * @return the signature algorithm OID string.\n     ",
    "links" : [ "#getSigAlgName()" ]
  }, {
    "name" : "public abstract byte[] getSigAlgParams()",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the DER-encoded signature algorithm parameters from this\n     * CRL's signature algorithm. In most cases, the signature\n     * algorithm parameters are null; the parameters are usually\n     * supplied with the public key.\n     * If access to individual parameter values is needed then use\n     * {@link java.security.AlgorithmParameters AlgorithmParameters}\n     * and instantiate with the name returned by\n     * {@link #getSigAlgName() getSigAlgName}.\n     *\n     * <p>See {@link #getSigAlgName() getSigAlgName} for\n     * relevant ASN.1 definitions.\n     *\n     * @return the DER-encoded signature algorithm parameters, or\n     *         null if no parameters are present.\n     ",
    "links" : [ "#getSigAlgName()", "java.security.AlgorithmParameters" ]
  } ],
  "methodNames" : [ "public boolean equals(Object other)", "public int hashCode()", "public abstract byte[] getEncoded() throws CRLException", "public abstract void verify(PublicKey key) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public abstract void verify(PublicKey key, String sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public void verify(PublicKey key, Provider sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, SignatureException", "public abstract int getVersion()", "public abstract Principal getIssuerDN()", "public X500Principal getIssuerX500Principal()", "public abstract Date getThisUpdate()", "public abstract Date getNextUpdate()", "public abstract X509CRLEntry getRevokedCertificate(BigInteger serialNumber)", "public X509CRLEntry getRevokedCertificate(X509Certificate certificate)", "public abstract Set<? extends X509CRLEntry> getRevokedCertificates()", "public abstract byte[] getTBSCertList() throws CRLException", "public abstract byte[] getSignature()", "public abstract String getSigAlgName()", "public abstract String getSigAlgOID()", "public abstract byte[] getSigAlgParams()" ],
  "variableNames" : [ "issuerPrincipal" ]
}