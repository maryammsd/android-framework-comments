{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/MetadataReader.java",
  "packageName" : "android.provider",
  "className" : "MetadataReader",
  "comment" : "\n * Class providing support for extracting metadata from a file as a\n * {@link Bundle} suitable for use with {@link DocumentsContract#getDocumentMetadata}.\n * <p>Currently only EXIF data is supported.\n * <p>TODO: Add support for common video and audio types, as well as PDF files.\n * {@hide}\n ",
  "variables" : [ {
    "name" : "DEFAULT_EXIF_TAGS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOUBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_STRING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_MAPPING",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JPG_MIME_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JPEG_MIME_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSupportedMimeType(String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if caller can generally expect to get metadata results\n     * for the supplied mimetype.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void getMetadata(Bundle metadata, InputStream stream, String mimeType, @Nullable String[] tags) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Generic metadata retrieval method that can retrieve any available metadata from a given doc\n     * Currently only functions for exifdata\n     *\n     * @param metadata the bundle to which we add any relevant metadata\n     * @param stream InputStream containing a file\n     * @param mimeType type of the given file\n     * @param tags a variable amount of keys to differentiate which tags the user wants\n     *             if null, returns a default set of data. See {@link DEFAULT_EXIF_TAGS}.\n     * @throws IOException when the file doesn't exist\n     ",
    "links" : [ "DEFAULT_EXIF_TAGS" ]
  }, {
    "name" : "private static Bundle getExifData(InputStream stream, @Nullable String[] tags) throws IOException",
    "returnType" : "Bundle",
    "comment" : "\n     * Helper method that is called if getMetadata is called for an image mimeType.\n     *\n     * @param stream the input stream from which to extra data.\n     * @param tags a list of ExifInterface tags that are used to retrieve data.\n     *             if null, returns a default set of data. See {@link DEFAULT_EXIF_TAGS}.\n     ",
    "links" : [ "DEFAULT_EXIF_TAGS" ]
  } ],
  "variableNames" : [ "DEFAULT_EXIF_TAGS", "TYPE_INT", "TYPE_DOUBLE", "TYPE_STRING", "TYPE_MAPPING", "JPG_MIME_TYPE", "JPEG_MIME_TYPE" ],
  "methodNames" : [ "public static boolean isSupportedMimeType(String mimeType)", "public static void getMetadata(Bundle metadata, InputStream stream, String mimeType, @Nullable String[] tags) throws IOException", "private static Bundle getExifData(InputStream stream, @Nullable String[] tags) throws IOException" ]
}