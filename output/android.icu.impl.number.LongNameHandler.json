{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/LongNameHandler.java",
  "packageName" : "android.icu.impl.number",
  "className" : "LongNameHandler",
  "comment" : "\n * Takes care of formatting currency and measurement unit names, as well as populating the gender of measure units.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "i",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DNAM_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PER_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GENDER_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ARRAY_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "modifiers",
    "type" : "Map<StandardPlural, SimpleModifier>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "MicroPropsGenerator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gender",
    "type" : "String",
    "comment" : " Grammatical gender of the formatted result.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int getIndex(String pluralKeyword)",
    "returnType" : "int",
    "comment" : " Returns the array index that corresponds to the given pluralKeyword.",
    "links" : [ ]
  }, {
    "name" : " static String getWithPlural(String[] strings, StandardPlural plural)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ExtractCorePatternResult extractCorePattern(String pattern)",
    "returnType" : "ExtractCorePatternResult",
    "comment" : "\n     * Returns three outputs extracted from pattern.\n     *\n     * @param coreUnit is extracted as per Extract(...) in the spec:\n     *   https://unicode.org/reports/tr35/tr35-general.html#compound-units\n     * @param PlaceholderPosition indicates where in the string the placeholder\n     *   was found.\n     * @param joinerChar Iff the placeholder was at the beginning or end,\n     *   joinerChar contains the space character (if any) that separated the\n     *   placeholder from the rest of the pattern. Otherwise, joinerChar is set\n     *   to NUL. Only one space character is considered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getGenderForBuiltin(ULocale locale, MeasureUnit builtinUnit)",
    "returnType" : "String",
    "comment" : " string both in case of unknown gender and in case of unknown unit.",
    "links" : [ ]
  }, {
    "name" : " static void getInflectedMeasureData(String subKey, ULocale locale, UnitWidth width, String gender, String caseVariant, String[] outArray)",
    "returnType" : "void",
    "comment" : " in from unitsShort.",
    "links" : [ ]
  }, {
    "name" : " static void getMeasureData(ULocale locale, MeasureUnit unit, UnitWidth width, String unitDisplayCase, String[] outArray)",
    "returnType" : "void",
    "comment" : " NOTE: outArray MUST have at least ARRAY_LENGTH entries. No bounds checking is performed.",
    "links" : [ ]
  }, {
    "name" : "private static void getCurrencyLongNameData(ULocale locale, Currency currency, String[] outArray)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getCompoundValue(String compoundKey, ULocale locale, UnitWidth width)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getDeriveCompoundRule(ULocale locale, String feature, String structure)",
    "returnType" : "String",
    "comment" : "\n     * Loads and returns the value in rules that look like these:\n     *\n     * <deriveCompound feature=\"gender\" structure=\"per\" value=\"0\"/>\n     * <deriveCompound feature=\"gender\" structure=\"times\" value=\"1\"/>\n     *\n     * Currently a fake example, but spec compliant:\n     * <deriveCompound feature=\"gender\" structure=\"power\" value=\"feminine\"/>\n     *\n     * NOTE: If U_FAILURE(status), returns an empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDerivedGender(ULocale locale, String structure, String[] data0, String[] data1)",
    "returnType" : "String",
    "comment" : " \"prefix\" doesn't).",
    "links" : [ ]
  }, {
    "name" : "private static String calculateGenderForUnit(ULocale locale, MeasureUnit unit)",
    "returnType" : "String",
    "comment" : "\n     * Calculates the gender of an arbitrary unit: this is the *second*\n     * implementation of an algorithm to do this:\n     *\n     * Gender is also calculated in \"processPatternTimes\": that code path is\n     * \"bottom up\", loading the gender for every component of a compound unit\n     * (at the same time as loading the Long Names formatting patterns), even if\n     * the gender is unneeded, then combining the single units' genders into the\n     * compound unit's gender, according to the rules. This algorithm does a\n     * lazier \"top-down\" evaluation, starting with the compound unit,\n     * calculating which single unit's gender is needed by breaking it down\n     * according to the rules, and then loading only the gender of the one\n     * single unit who's gender is needed.\n     *\n     * For future refactorings:\n     * 1. we could drop processPatternTimes' gender calculation and just call\n     *    this function: for UNUM_UNIT_WIDTH_FULL_NAME, the unit gender is in\n     *    the very same table as the formatting patterns, so loading it then may\n     *    be efficient. For other unit widths however, it needs to be explicitly\n     *    looked up anyway.\n     * 2. alternatively, if CLDR is providing all the genders we need such that\n     *    we don't need to calculate them in ICU anymore, we could drop this\n     *    function and keep only processPatternTimes' calculation. (And optimise\n     *    it a bit?)\n     *\n     * @param locale The desired locale.\n     * @param unit The measure unit to calculate the gender for.\n     * @return The gender string for the unit, or an empty string if unknown or\n     *     ungendered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void maybeCalculateGender(ULocale locale, MeasureUnit unit, String[] outArray)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getUnitDisplayName(ULocale locale, MeasureUnit unit, UnitWidth width)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LongNameHandler forCurrencyLongNames(ULocale locale, Currency currency, PluralRules rules, MicroPropsGenerator parent)",
    "returnType" : "LongNameHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LongNameHandler forMeasureUnit(ULocale locale, MeasureUnit unit, UnitWidth width, String unitDisplayCase, PluralRules rules, MicroPropsGenerator parent)",
    "returnType" : "LongNameHandler",
    "comment" : "\n     * Construct a localized LongNameHandler for the specified MeasureUnit.\n     * <p>\n     * Mixed units are not supported, use MixedUnitLongNameHandler.forMeasureUnit.\n     *\n     * @param locale The desired locale.\n     * @param unit The measure unit to construct a LongNameHandler for.\n     * @param width Specifies the desired unit rendering.\n     * @param unitDisplayCase Specifies the desired grammatical case. If the\n     *     specified case is not found, we fall back to nominative or no-case.\n     * @param rules Plural rules.\n     * @param parent Plural rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static LongNameHandler forArbitraryUnit(ULocale loc, MeasureUnit unit, UnitWidth width, String unitDisplayCase, PluralRules rules, MicroPropsGenerator parent)",
    "returnType" : "LongNameHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void processPatternTimes(MeasureUnitImpl productUnit, ULocale loc, UnitWidth width, String caseVariant, String[] outArray)",
    "returnType" : "void",
    "comment" : "\n     * Roughly corresponds to patternTimes(...) in the spec:\n     * https://unicode.org/reports/tr35/tr35-general.html#compound-units\n     ",
    "links" : [ ]
  }, {
    "name" : "private void simpleFormatsToModifiers(String[] simpleFormats, NumberFormat.Field field)",
    "returnType" : "void",
    "comment" : " Sets modifiers to use the patterns from simpleFormats. ",
    "links" : [ ]
  }, {
    "name" : "private void multiSimpleFormatsToModifiers(String[] leadFormats, String trailFormat, NumberFormat.Field field)",
    "returnType" : "void",
    "comment" : "\n     * Sets modifiers to a combination of {@code leadFormats} (one per plural form)\n     * and {@code trailFormat} appended to each.\n     *\n     * With a leadFormat of \"{0}m\" and a trailFormat of \"{0}/s\", it produces a\n     * pattern of \"{0}m/s\" by inserting each leadFormat pattern into\n     * trailFormat.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MicroProps processQuantity(DecimalQuantity quantity)",
    "returnType" : "MicroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MicroProps processQuantityWithMicros(DecimalQuantity quantity, MicroProps micros)",
    "returnType" : "MicroProps",
    "comment" : "\n     * Produces a plural-appropriate Modifier for a unit: {@code quantity} is taken as\n     * the final smallest unit, while the larger unit values must be provided\n     * via {@code micros.mixedMeasures}.\n     *\n     * Does not call parent.processQuantity, so cannot get a MicroProps instance\n     * that way. Instead, the instance is passed in as a parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Modifier getModifier(Signum signum, StandardPlural plural)",
    "returnType" : "Modifier",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int getIndex(String pluralKeyword)", " static String getWithPlural(String[] strings, StandardPlural plural)", "private static ExtractCorePatternResult extractCorePattern(String pattern)", "private static String getGenderForBuiltin(ULocale locale, MeasureUnit builtinUnit)", " static void getInflectedMeasureData(String subKey, ULocale locale, UnitWidth width, String gender, String caseVariant, String[] outArray)", " static void getMeasureData(ULocale locale, MeasureUnit unit, UnitWidth width, String unitDisplayCase, String[] outArray)", "private static void getCurrencyLongNameData(ULocale locale, Currency currency, String[] outArray)", "private static String getCompoundValue(String compoundKey, ULocale locale, UnitWidth width)", "private static String getDeriveCompoundRule(ULocale locale, String feature, String structure)", "private static String getDerivedGender(ULocale locale, String structure, String[] data0, String[] data1)", "private static String calculateGenderForUnit(ULocale locale, MeasureUnit unit)", "private static void maybeCalculateGender(ULocale locale, MeasureUnit unit, String[] outArray)", "public static String getUnitDisplayName(ULocale locale, MeasureUnit unit, UnitWidth width)", "public static LongNameHandler forCurrencyLongNames(ULocale locale, Currency currency, PluralRules rules, MicroPropsGenerator parent)", "public static LongNameHandler forMeasureUnit(ULocale locale, MeasureUnit unit, UnitWidth width, String unitDisplayCase, PluralRules rules, MicroPropsGenerator parent)", "private static LongNameHandler forArbitraryUnit(ULocale loc, MeasureUnit unit, UnitWidth width, String unitDisplayCase, PluralRules rules, MicroPropsGenerator parent)", "private static void processPatternTimes(MeasureUnitImpl productUnit, ULocale loc, UnitWidth width, String caseVariant, String[] outArray)", "private void simpleFormatsToModifiers(String[] simpleFormats, NumberFormat.Field field)", "private void multiSimpleFormatsToModifiers(String[] leadFormats, String trailFormat, NumberFormat.Field field)", "public MicroProps processQuantity(DecimalQuantity quantity)", "public MicroProps processQuantityWithMicros(DecimalQuantity quantity, MicroProps micros)", "public Modifier getModifier(Signum signum, StandardPlural plural)" ],
  "variableNames" : [ "i", "DNAM_INDEX", "PER_INDEX", "GENDER_INDEX", "ARRAY_LENGTH", "modifiers", "rules", "parent", "gender" ]
}