{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accounts/AccountManager.java",
  "packageName" : "android.accounts",
  "className" : "AccountManager",
  "comment" : "\n * This class provides access to a centralized registry of the user's\n * online accounts.  The user enters credentials (username and password) once\n * per account, granting applications access to online resources with\n * \"one-click\" approval.\n *\n * <p>Different online services have different ways of handling accounts and\n * authentication, so the account manager uses pluggable <em>authenticator</em>\n * modules for different <em>account types</em>.  Authenticators (which may be\n * written by third parties) handle the actual details of validating account\n * credentials and storing account information.  For example, Google, Facebook,\n * and Microsoft Exchange each have their own authenticator.\n *\n * <p>Many servers support some notion of an <em>authentication token</em>,\n * which can be used to authenticate a request to the server without sending\n * the user's actual password.  (Auth tokens are normally created with a\n * separate request which does include the user's credentials.)  AccountManager\n * can generate auth tokens for applications, so the application doesn't need to\n * handle passwords directly.  Auth tokens are normally reusable and cached by\n * AccountManager, but must be refreshed periodically.  It's the responsibility\n * of applications to <em>invalidate</em> auth tokens when they stop working so\n * the AccountManager knows it needs to regenerate them.\n *\n * <p>Applications accessing a server normally go through these steps:\n *\n * <ul>\n * <li>Get an instance of AccountManager using {@link #get(Context)}.\n *\n * <li>List the available accounts using {@link #getAccountsByType} or\n * {@link #getAccountsByTypeAndFeatures}.  Normally applications will only\n * be interested in accounts with one particular <em>type</em>, which\n * identifies the authenticator.  Account <em>features</em> are used to\n * identify particular account subtypes and capabilities.  Both the account\n * type and features are authenticator-specific strings, and must be known by\n * the application in coordination with its preferred authenticators.\n *\n * <li>Select one or more of the available accounts, possibly by asking the\n * user for their preference.  If no suitable accounts are available,\n * {@link #addAccount} may be called to prompt the user to create an\n * account of the appropriate type.\n *\n * <li><b>Important:</b> If the application is using a previously remembered\n * account selection, it must make sure the account is still in the list\n * of accounts returned by {@link #getAccountsByType}.  Requesting an auth token\n * for an account no longer on the device results in an undefined failure.\n *\n * <li>Request an auth token for the selected account(s) using one of the\n * {@link #getAuthToken} methods or related helpers.  Refer to the description\n * of each method for exact usage and error handling details.\n *\n * <li>Make the request using the auth token.  The form of the auth token,\n * the format of the request, and the protocol used are all specific to the\n * service you are accessing.  The application may use whatever network and\n * protocol libraries are useful.\n *\n * <li><b>Important:</b> If the request fails with an authentication error,\n * it could be that a cached auth token is stale and no longer honored by\n * the server.  The application must call {@link #invalidateAuthToken} to remove\n * the token from the cache, otherwise requests will continue failing!  After\n * invalidating the auth token, immediately go back to the \"Request an auth\n * token\" step above.  If the process fails the second time, then it can be\n * treated as a \"genuine\" authentication failure and the user notified or other\n * appropriate actions taken.\n * </ul>\n *\n * <p>Some AccountManager methods may need to interact with the user to\n * prompt for credentials, present options, or ask the user to add an account.\n * The caller may choose whether to allow AccountManager to directly launch the\n * necessary user interface and wait for the user, or to return an Intent which\n * the caller may use to launch the interface, or (in some cases) to install a\n * notification which the user can select at any time to launch the interface.\n * To have AccountManager launch the interface directly, the caller must supply\n * the current foreground {@link Activity} context.\n *\n * <p>Many AccountManager methods take {@link AccountManagerCallback} and\n * {@link Handler} as parameters.  These methods return immediately and\n * run asynchronously. If a callback is provided then\n * {@link AccountManagerCallback#run} will be invoked on the Handler's\n * thread when the request completes, successfully or not.\n * The result is retrieved by calling {@link AccountManagerFuture#getResult()}\n * on the {@link AccountManagerFuture} returned by the method (and also passed\n * to the callback).  This method waits for the operation to complete (if\n * necessary) and either returns the result or throws an exception if an error\n * occurred during the operation.  To make the request synchronously, call\n * {@link AccountManagerFuture#getResult()} immediately on receiving the\n * future from the method; no callback need be supplied.\n *\n * <p>Requests which may block, including\n * {@link AccountManagerFuture#getResult()}, must never be called on\n * the application's main event thread.  These operations throw\n * {@link IllegalStateException} if they are used on the main thread.\n ",
  "links" : [ "IllegalStateException", "#getAccountsByTypeAndFeatures", "android.accounts.AccountManagerFuture", "#get(Context)", "android.accounts.AccountManagerCallback", "#getAccountsByType", "#getAuthToken", "android.os.Handler", "#addAccount", "android.accounts.AccountManagerCallback#run", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity", "#invalidateAuthToken" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_REMOTE_EXCEPTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_NETWORK_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_CANCELED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_INVALID_RESPONSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_UNSUPPORTED_OPERATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_BAD_ARGUMENTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_BAD_REQUEST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_BAD_AUTHENTICATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_USER_RESTRICTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE_MANAGEMENT_DISABLED_FOR_ACCOUNT_TYPE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "KEY_ACCOUNT_NAME",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link String} account name in results\n     * from methods which return information about a particular account.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "KEY_ACCOUNT_TYPE",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link String} account type in results\n     * from methods which return information about a particular account.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "KEY_ACCOUNT_ACCESS_ID",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the account access id used for noting the\n     * account was accessed when unmarshaled from a parcel.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTHTOKEN",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the auth token value in results\n     * from {@link #getAuthToken} and friends.\n     ",
    "links" : [ "#getAuthToken" ]
  }, {
    "name" : "KEY_INTENT",
    "type" : "String",
    "comment" : "\n     * Bundle key used for an {@link Intent} in results from methods that\n     * may require the caller to interact with the user.  The Intent can\n     * be used to start the corresponding user interface activity.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "KEY_PASSWORD",
    "type" : "String",
    "comment" : "\n     * Bundle key used to supply the password directly in options to\n     * {@link #confirmCredentials}, rather than prompting the user with\n     * the standard password prompt.\n     ",
    "links" : [ "#confirmCredentials" ]
  }, {
    "name" : "KEY_ACCOUNTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ACCOUNT_AUTHENTICATOR_RESPONSE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ACCOUNT_MANAGER_RESPONSE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTHENTICATOR_TYPES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTH_FAILED_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTH_TOKEN_LABEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_BOOLEAN_RESULT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ERROR_CODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ERROR_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_USERDATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_LAST_AUTHENTICATED_TIME",
    "type" : "String",
    "comment" : "\n     * Bundle key used to supply the last time the credentials of the account\n     * were authenticated successfully. Time is specified in milliseconds since\n     * epoch. Associated time is updated on successful authentication of account\n     * on adding account, confirming credentials, or updating credentials.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALLER_UID",
    "type" : "String",
    "comment" : "\n     * The UID of caller app.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALLER_PID",
    "type" : "String",
    "comment" : "\n     * The process id of caller app.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANDROID_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * The Android package of the caller will be set in the options bundle by the\n     * {@link AccountManager} and will be passed to the AccountManagerService and\n     * to the AccountAuthenticators. The uid of the caller will be known by the\n     * AccountManagerService as well as the AccountAuthenticators so they will be able to\n     * verify that the package is consistent with the uid (a uid might be shared by many\n     * packages).\n     ",
    "links" : [ "android.accounts.AccountManager" ]
  }, {
    "name" : "KEY_NOTIFY_ON_FAILURE",
    "type" : "String",
    "comment" : "\n     * Boolean, if set and 'customTokens' the authenticator is responsible for\n     * notifications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ACCOUNT_SESSION_BUNDLE",
    "type" : "String",
    "comment" : "\n     * Bundle key used for a {@link Bundle} in result from\n     * {@link #startAddAccountSession} and friends which returns session data\n     * for installing an account later.\n     ",
    "links" : [ "#startAddAccountSession", "android.os.Bundle" ]
  }, {
    "name" : "KEY_ACCOUNT_STATUS_TOKEN",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link String} account status token in result\n     * from {@link #startAddAccountSession} and friends which returns\n     * information about a particular account.\n     ",
    "links" : [ "#startAddAccountSession", "String" ]
  }, {
    "name" : "ACTION_AUTHENTICATOR_INTENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATOR_META_DATA_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATOR_ATTRIBUTES_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Account visibility was not set. Default visibility value will be used.\n     * See {@link #PACKAGE_NAME_KEY_LEGACY_VISIBLE}, {@link #PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE}\n     ",
    "links" : [ "#PACKAGE_NAME_KEY_LEGACY_VISIBLE", "#PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE" ]
  }, {
    "name" : "VISIBILITY_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Account is always visible to given application and only authenticator can revoke visibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_USER_MANAGED_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Account is visible to given application, but user can revoke visibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_NOT_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Account is not visible to given application and only authenticator can grant visibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_USER_MANAGED_NOT_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Account is not visible to given application, but user can reveal it, for example, using\n     * {@link #newChooseAccountIntent(Account, List, String[], String, String, String[], Bundle)}\n     ",
    "links" : [ "#newChooseAccountIntent(Account" ]
  }, {
    "name" : "ACCOUNT_ACCESS_TOKEN_TYPE",
    "type" : "String",
    "comment" : "\n     * Token type for the special case where a UID has access only to an account\n     * but no authenticator specific auth token types.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_ACCOUNTS_DATA_PROPERTY",
    "type" : "String",
    "comment" : "\n     * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "CACHE_ACCOUNTS_DATA_SIZE",
    "type" : "int",
    "comment" : "\n     * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "mAccountsForUserCache",
    "type" : "PropertyInvalidatedCache<UserPackage, Account[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_USER_DATA_PROPERTY",
    "type" : "String",
    "comment" : "\n     * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "CACHE_USER_DATA_SIZE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserDataCache",
    "type" : "PropertyInvalidatedCache<AccountKeyData, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAccountManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGIN_ACCOUNTS_CHANGED_ACTION",
    "type" : "String",
    "comment" : "\n     * Action sent as a broadcast Intent by the AccountsService when accounts are added, accounts\n     * are removed, or an account's credentials (saved password, etc) are changed.\n     *\n     * @see #addOnAccountsUpdatedListener\n     * @see #ACTION_ACCOUNT_REMOVED\n     *\n     * @deprecated use {@link #addOnAccountsUpdatedListener} to get account updates in runtime.\n     ",
    "links" : [ "#addOnAccountsUpdatedListener" ]
  }, {
    "name" : "ACTION_ACCOUNT_REMOVED",
    "type" : "String",
    "comment" : "\n     * Action sent as a broadcast Intent by the AccountsService when any account is removed\n     * or renamed. Only applications which were able to see the account will receive the intent.\n     * Intent extra will include the following fields:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the removed account\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * </ul>\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#KEY_ACCOUNT_TYPE" ]
  }, {
    "name" : "ACTION_VISIBLE_ACCOUNTS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Action sent as a broadcast Intent to specific package by the AccountsService\n     * when account visibility or account's credentials (saved password, etc) are changed.\n     *\n     * @see #addOnAccountsUpdatedListener\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_NAME_KEY_LEGACY_VISIBLE",
    "type" : "String",
    "comment" : "\n     * Key to set visibility for applications which satisfy one of the following conditions:\n     * <ul>\n     * <li>Target API level below {@link android.os.Build.VERSION_CODES#O} and have\n     * deprecated {@link android.Manifest.permission#GET_ACCOUNTS} permission.\n     * </li>\n     * <li> Have {@link android.Manifest.permission#GET_ACCOUNTS_PRIVILEGED} permission. </li>\n     * <li> Have the same signature as authenticator. </li>\n     * <li> Have {@link android.Manifest.permission#READ_CONTACTS} permission and\n     * account type may be associated with contacts data - (verified by\n     * {@link android.Manifest.permission#WRITE_CONTACTS} permission check for the authenticator).\n     * </li>\n     * </ul>\n     * See {@link #getAccountVisibility}. If the value was not set by authenticator\n     * {@link #VISIBILITY_USER_MANAGED_VISIBLE} is used.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "android.Manifest.permission#READ_CONTACTS", "#VISIBILITY_USER_MANAGED_VISIBLE", "#getAccountVisibility", "android.Manifest.permission#WRITE_CONTACTS", "android.Manifest.permission#GET_ACCOUNTS_PRIVILEGED", "android.Manifest.permission#GET_ACCOUNTS" ]
  }, {
    "name" : "PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE",
    "type" : "String",
    "comment" : "\n     * Key to set default visibility for applications which don't satisfy conditions in\n     * {@link #PACKAGE_NAME_KEY_LEGACY_VISIBLE}. If the value was not set by authenticator\n     * {@link #VISIBILITY_USER_MANAGED_NOT_VISIBLE} is used.\n     ",
    "links" : [ "#VISIBILITY_USER_MANAGED_NOT_VISIBLE", "#PACKAGE_NAME_KEY_LEGACY_VISIBLE" ]
  }, {
    "name" : "mAccountsUpdatedListeners",
    "type" : "HashMap<OnAccountsUpdateListener, Handler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccountsUpdatedListenersTypes",
    "type" : "HashMap<OnAccountsUpdateListener, Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccountsChangedBroadcastReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "\n     * BroadcastReceiver that listens for the ACTION_VISIBLE_ACCOUNTS_CHANGED intent\n     * so that it can read the updated list of accounts and send them to the listener\n     * in mAccountsUpdatedListeners.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Bundle sanitizeResult(Bundle result)",
    "returnType" : "Bundle",
    "comment" : "\n     * @hide for internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AccountManager get(Context context)",
    "returnType" : "AccountManager",
    "comment" : "\n     * Gets an AccountManager instance associated with a Context.\n     * The {@link Context} will be used as long as the AccountManager is\n     * active, so make sure to use a {@link Context} whose lifetime is\n     * commensurate with any listeners registered to\n     * {@link #addOnAccountsUpdatedListener} or similar methods.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>No permission is required to call this method.\n     *\n     * @param context The {@link Context} to use when necessary\n     * @return An {@link AccountManager} instance\n     ",
    "links" : [ "android.accounts.AccountManager", "android.content.Context", "#addOnAccountsUpdatedListener" ]
  }, {
    "name" : "public String getPassword(final Account account)",
    "returnType" : "String",
    "comment" : "\n     * Gets the saved password associated with the account. This is intended for authenticators and\n     * related code; applications should get an auth token instead.\n     *\n     * <p>\n     * It is safe to call this method from the main thread.\n     *\n     * <p>\n     * This method requires the caller to have a signature match with the authenticator that owns\n     * the specified account.\n     *\n     * <p>\n     * <b>NOTE:</b> If targeting your app to work on API level\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} and before, AUTHENTICATE_ACCOUNTS\n     * permission is needed for those platforms. See docs for this function in API level\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}.\n     *\n     * @param account The account to query for a password. Must not be {@code null}.\n     * @return The account's password, null if none or if the account doesn't exist\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP_MR1" ]
  }, {
    "name" : "public String getUserData(final Account account, final String key)",
    "returnType" : "String",
    "comment" : "\n     * Gets the user data named by \"key\" associated with the account. This is intended for\n     * authenticators and related code to store arbitrary metadata along with accounts. The meaning\n     * of the keys and values is up to the authenticator for the account.\n     *\n     * <p>\n     * It is safe to call this method from the main thread.\n     *\n     * <p>\n     * This method requires the caller to have a signature match with the authenticator that owns\n     * the specified account.\n     *\n     * <p>\n     * <b>NOTE:</b> If targeting your app to work on API level\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} and before, AUTHENTICATE_ACCOUNTS\n     * permission is needed for those platforms. See docs for this function in API level\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}.\n     *\n     * @param account The account to query for user data\n     * @return The user data, null if the account, key doesn't exist, or the user is locked\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP_MR1" ]
  }, {
    "name" : "public AuthenticatorDescription[] getAuthenticatorTypes()",
    "returnType" : "AuthenticatorDescription[]",
    "comment" : "\n     * Lists the currently registered authenticators.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>No permission is required to call this method.\n     *\n     * <p>Caller targeting API level 34 and above, the results are filtered\n     * by the rules of <a href=\"/training/basics/intents/package-visibility\">package visibility</a>.\n     *\n     * @return An array of {@link AuthenticatorDescription} for every\n     *     authenticator known to the AccountManager service.  Empty (never\n     *     null) if no authenticators are known.\n     ",
    "links" : [ "android.accounts.AuthenticatorDescription" ]
  }, {
    "name" : "public AuthenticatorDescription[] getAuthenticatorTypesAsUser(int userId)",
    "returnType" : "AuthenticatorDescription[]",
    "comment" : "\n     * @hide\n     * Lists the currently registered authenticators for a given user id.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>The caller has to be in the same user or have the permission\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @return An array of {@link AuthenticatorDescription} for every\n     *     authenticator known to the AccountManager service.  Empty (never\n     *     null) if no authenticators are known.\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.accounts.AuthenticatorDescription" ]
  }, {
    "name" : "public Account[] getAccounts()",
    "returnType" : "Account[]",
    "comment" : "\n     * Lists all accounts visible to the caller regardless of type. Equivalent to\n     * getAccountsByType(null). These accounts may be visible because the user granted access to the\n     * account, or the AbstractAccountAuthenticator managing the account did so or because the\n     * client shares a signature with the managing AbstractAccountAuthenticator.\n     *\n     * <div class=\"caution\"><p><b>Caution: </b>This method returns personal and sensitive user data.\n     * If your app accesses, collects, uses, or shares personal and sensitive data, you must clearly\n     * disclose that fact to users. For apps published on Google Play, policies protecting user data\n     * require that you do the following:</p>\n     * <ul>\n     * <li>Disclose to the user how your app accesses, collects, uses, or shares personal and\n     * sensitive data. Learn more about\n     * <a href=\"https://play.google.com/about/privacy-security-deception/user-data/#!#personal-sensitive\">acceptable\n     * disclosure and consent</a>.</li>\n     * <li>Provide a privacy policy that describes your use of this data on- and off-device.</li>\n     * </ul>\n     * <p>To learn more, visit the\n     * <a href=\"https://play.google.com/about/privacy-security-deception/user-data\">Google Play\n     * Policy regarding user data</a>.</p></div>\n     *\n     * <p>\n     * It is safe to call this method from the main thread.\n     *\n     * @return An array of {@link Account}, one for each account. Empty (never null) if no accounts\n     *         have been added.\n     ",
    "links" : [ "android.accounts.Account" ]
  }, {
    "name" : "public Account[] getAccountsAsUser(int userId)",
    "returnType" : "Account[]",
    "comment" : "\n     * @hide\n     * Lists all accounts visible to caller regardless of type for a given user id. Equivalent to\n     * getAccountsByType(null).\n     *\n     * <p>\n     * It is safe to call this method from the main thread.\n     *\n     * @return An array of {@link Account}, one for each account. Empty (never null) if no accounts\n     *         have been added.\n     ",
    "links" : [ "android.accounts.Account" ]
  }, {
    "name" : "public Account[] getAccountsForPackage(String packageName, int uid)",
    "returnType" : "Account[]",
    "comment" : "\n     * @hide\n     * For use by internal activities. Returns the list of accounts that the calling package\n     * is authorized to use, particularly for shared accounts.\n     * @param packageName package name of the calling app.\n     * @param uid the uid of the calling app.\n     * @return the accounts that are available to this package and user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Account[] getAccountsByTypeForPackage(String type, String packageName)",
    "returnType" : "Account[]",
    "comment" : "\n     * Returns the accounts visible to the specified package in an environment where some apps are\n     * not authorized to view all accounts. This method can only be called by system apps and\n     * authenticators managing the type.\n     * Beginning API level {@link android.os.Build.VERSION_CODES#O} it also return accounts\n     * which user can make visible to the application (see {@link #VISIBILITY_USER_MANAGED_VISIBLE}).\n     *\n     * @param type The type of accounts to return, null to retrieve all accounts\n     * @param packageName The package name of the app for which the accounts are to be returned\n     * @return An array of {@link Account}, one per matching account. Empty (never null) if no\n     *         accounts of the specified type can be accessed by the package.\n     *\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "#VISIBILITY_USER_MANAGED_VISIBLE", "android.accounts.Account" ]
  }, {
    "name" : "public Account[] getAccountsByType(String type)",
    "returnType" : "Account[]",
    "comment" : "\n     * Lists all accounts of particular type visible to the caller. These accounts may be visible\n     * because the user granted access to the account, or the AbstractAccountAuthenticator managing\n     * the account did so or because the client shares a signature with the managing\n     * AbstractAccountAuthenticator.\n     *\n     * <p>\n     * The account type is a string token corresponding to the authenticator and useful domain of\n     * the account. For example, there are types corresponding to Google and Facebook. The exact\n     * string token to use will be published somewhere associated with the authenticator in\n     * question.\n     * </p>\n     *\n     * <div class=\"caution\"><p><b>Caution: </b>This method returns personal and sensitive user data.\n     * If your app accesses, collects, uses, or shares personal and sensitive data, you must clearly\n     * disclose that fact to users. For apps published on Google Play, policies protecting user data\n     * require that you do the following:</p>\n     * <ul>\n     * <li>Disclose to the user how your app accesses, collects, uses, or shares personal and\n     * sensitive data. Learn more about\n     * <a href=\"https://play.google.com/about/privacy-security-deception/user-data/#!#personal-sensitive\">acceptable\n     * disclosure and consent</a>.</li>\n     * <li>Provide a privacy policy that describes your use of this data on- and off-device.</li>\n     * </ul>\n     * <p>To learn more, visit the\n     * <a href=\"https://play.google.com/about/privacy-security-deception/user-data\">Google Play\n     * Policy regarding user data</a>.</p></div>\n     *\n     * <p>\n     * It is safe to call this method from the main thread.\n     *\n     * <p>\n     * Caller targeting API level {@link android.os.Build.VERSION_CODES#O} and above, will get list\n     * of accounts made visible to it by user\n     * (see {@link #newChooseAccountIntent(Account, List, String[], String,\n     * String, String[], Bundle)}) or AbstractAccountAuthenticator\n     * using {@link #setAccountVisibility}.\n     * {@link android.Manifest.permission#GET_ACCOUNTS} permission is not used.\n     *\n     * <p>\n     * Caller targeting API level below {@link android.os.Build.VERSION_CODES#O} that have not been\n     * granted the {@link android.Manifest.permission#GET_ACCOUNTS} permission, will only see those\n     * accounts managed by AbstractAccountAuthenticators whose signature matches the client.\n     *\n     * <p>\n     * <b>NOTE:</b> If targeting your app to work on API level\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} and before,\n     * {@link android.Manifest.permission#GET_ACCOUNTS} permission is\n     * needed for those platforms, irrespective of uid or signature match. See docs for this\n     * function in API level {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}.\n     *\n     * @param type The type of accounts to return, null to retrieve all accounts\n     * @return An array of {@link Account}, one per matching account. Empty (never null) if no\n     *         accounts of the specified type have been added.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "#newChooseAccountIntent(Account", "android.accounts.Account", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "android.Manifest.permission#GET_ACCOUNTS", "#setAccountVisibility" ]
  }, {
    "name" : "public Account[] getAccountsByTypeAsUser(String type, UserHandle userHandle)",
    "returnType" : "Account[]",
    "comment" : " @hide Same as {@link #getAccountsByType(String)} but for a specific user. ",
    "links" : [ "#getAccountsByType(String)" ]
  }, {
    "name" : "public void updateAppPermission(Account account, String authTokenType, int uid, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Change whether or not an app (identified by its uid) is allowed to retrieve an authToken\n     * for an account.\n     * <p>\n     * This is only meant to be used by system activities and is not in the SDK.\n     * @param account The account whose permissions are being modified\n     * @param authTokenType The type of token whose permissions are being modified\n     * @param uid The uid that identifies the app which is being granted or revoked permission.\n     * @param value true is permission is being granted, false for revoked\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccountManagerFuture<String> getAuthTokenLabel(final String accountType, final String authTokenType, AccountManagerCallback<String> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<String>",
    "comment" : "\n     * Get the user-friendly label associated with an authenticator's auth token.\n     * @param accountType the type of the authenticator. must not be null.\n     * @param authTokenType the token type. must not be null.\n     * @param callback callback to invoke when the result is available. may be null.\n     * @param handler the handler on which to invoke the callback, or null for the main thread\n     * @return a future containing the label string\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccountManagerFuture<Boolean> hasFeatures(final Account account, final String[] features, AccountManagerCallback<Boolean> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Boolean>",
    "comment" : "\n     * Finds out whether a particular account has all the specified features. Account features are\n     * authenticator-specific string tokens identifying boolean account properties. For example,\n     * features are used to tell whether Google accounts have a particular service (such as Google\n     * Calendar or Google Talk) enabled. The feature names and their meanings are published\n     * somewhere associated with the authenticator in question.\n     *\n     * <p>\n     * This method may be called from any thread, but the returned {@link AccountManagerFuture} must\n     * not be used on the main thread.\n     *\n     * <p>\n     * If caller target API level is below {@link android.os.Build.VERSION_CODES#O}, it is\n     * required to hold the permission {@link android.Manifest.permission#GET_ACCOUNTS} or have a\n     * signature match with the AbstractAccountAuthenticator that manages the account.\n     *\n     * @param account The {@link Account} to test\n     * @param features An array of the account features to check\n     * @param callback Callback to invoke when the request completes, null for no callback\n     * @param handler {@link Handler} identifying the callback thread, null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Boolean, true if the account\n     *         exists and has all of the specified features.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "android.accounts.Account", "android.os.Handler", "android.Manifest.permission#GET_ACCOUNTS", "android.accounts.AccountManagerFuture" ]
  }, {
    "name" : "private AccountManagerFuture<Boolean> hasFeaturesAsUser(final Account account, final String[] features, AccountManagerCallback<Boolean> callback, Handler handler, int userId)",
    "returnType" : "AccountManagerFuture<Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(final String type, final String[] features, AccountManagerCallback<Account[]> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Account[]>",
    "comment" : "\n     * Lists all accounts of a type which have certain features. The account type identifies the\n     * authenticator (see {@link #getAccountsByType}). Account features are authenticator-specific\n     * string tokens identifying boolean account properties (see {@link #hasFeatures}).\n     *\n     * <p>\n     * Unlike {@link #getAccountsByType}, this method calls the authenticator, which may contact the\n     * server or do other work to check account features, so the method returns an\n     * {@link AccountManagerFuture}.\n     *\n     * <p>\n     * This method may be called from any thread, but the returned {@link AccountManagerFuture} must\n     * not be used on the main thread.\n     *\n     * <p>\n     * Caller targeting API level {@link android.os.Build.VERSION_CODES#O} and above, will get list\n     * of accounts made visible to it by user\n     * (see {@link #newChooseAccountIntent(Account, List, String[], String,\n     * String, String[], Bundle)}) or AbstractAccountAuthenticator\n     * using {@link #setAccountVisibility}.\n     * {@link android.Manifest.permission#GET_ACCOUNTS} permission is not used.\n     *\n     * <p>\n     * Caller targeting API level below {@link android.os.Build.VERSION_CODES#O} that have not been\n     * granted the {@link android.Manifest.permission#GET_ACCOUNTS} permission, will only see those\n     * accounts managed by AbstractAccountAuthenticators whose signature matches the client.\n     * <p>\n     * <b>NOTE:</b> If targeting your app to work on API level\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} and before,\n     * {@link android.Manifest.permission#GET_ACCOUNTS} permission is\n     * needed for those platforms, irrespective of uid or signature match. See docs for this\n     * function in API level {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}.\n     *\n     *\n     * @param type The type of accounts to return, must not be null\n     * @param features An array of the account features to require, may be null or empty *\n     * @param callback Callback to invoke when the request completes, null for no callback\n     * @param handler {@link Handler} identifying the callback thread, null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to an array of {@link Account}, one\n     *         per account of the specified type which matches the requested features.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "#getAccountsByType", "#newChooseAccountIntent(Account", "android.accounts.Account", "android.os.Handler", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "android.Manifest.permission#GET_ACCOUNTS", "android.accounts.AccountManagerFuture", "#setAccountVisibility", "#hasFeatures" ]
  }, {
    "name" : "public boolean addAccountExplicitly(Account account, String password, Bundle userdata)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an account directly to the AccountManager. Normally used by sign-up\n     * wizards associated with authenticators, not directly by applications.\n     * <p>Calling this method does not update the last authenticated timestamp,\n     * referred by {@link #KEY_LAST_AUTHENTICATED_TIME}. To update it, call\n     * {@link #notifyAccountAuthenticated(Account)} after getting success.\n     * However, if this method is called when it is triggered by addAccount() or\n     * addAccountAsUser() or similar functions, then there is no need to update\n     * timestamp manually as it is updated automatically by framework on\n     * successful completion of the mentioned functions.\n     * <p>It is safe to call this method from the main thread.\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that owns the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs\n     * for this function in API level 22.\n     *\n     * @param account The {@link Account} to add\n     * @param password The password to associate with the account, null for none\n     * @param userdata String values to use for the account's userdata, null for\n     *            none\n     * @return True if the account was successfully added, false if the account\n     *         already exists, the account is null, the user is locked, or another error occurs.\n     ",
    "links" : [ "android.accounts.Account", "#notifyAccountAuthenticated(Account)", "#KEY_LAST_AUTHENTICATED_TIME" ]
  }, {
    "name" : "public boolean addAccountExplicitly(Account account, String password, Bundle extras, Map<String, Integer> visibility)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an account directly to the AccountManager. Additionally it specifies Account visibility\n     * for given list of packages.\n     * <p>\n     * Normally used by sign-up wizards associated with authenticators, not directly by\n     * applications.\n     * <p>\n     * Calling this method does not update the last authenticated timestamp, referred by\n     * {@link #KEY_LAST_AUTHENTICATED_TIME}. To update it, call\n     * {@link #notifyAccountAuthenticated(Account)} after getting success.\n     * <p>\n     * It is safe to call this method from the main thread.\n     * <p>\n     * This method requires the caller to have a signature match with the authenticator that owns\n     * the specified account.\n     *\n     * @param account The {@link Account} to add\n     * @param password The password to associate with the account, null for none\n     * @param extras String values to use for the account's userdata, null for none\n     * @param visibility Map from packageName to visibility values which will be set before account\n     *        is added. See {@link #getAccountVisibility} for possible values. Declaring\n     *        <a href=\"/training/basics/intents/package-visibility\">package visibility</a> needs for\n     *        package names in the map is needed, if the caller is targeting API level 34 and above.\n     *\n     * @return True if the account was successfully added, false if the account already exists, the\n     *         account is null, or another error occurs.\n     ",
    "links" : [ "#getAccountVisibility", "android.accounts.Account", "#notifyAccountAuthenticated(Account)", "#KEY_LAST_AUTHENTICATED_TIME" ]
  }, {
    "name" : "public Map<String, Integer> getPackagesAndVisibilityForAccount(Account account)",
    "returnType" : "Map<String, Integer>",
    "comment" : "\n     * Returns package names and visibility which were explicitly set for given account.\n     * <p>\n     * This method requires the caller to have a signature match with the authenticator that owns\n     * the specified account.\n     *\n     * @param account The account for which visibility data should be returned\n     *\n     * @return Map from package names to visibility for given account\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<Account, Integer> getAccountsAndVisibilityForPackage(String packageName, String accountType)",
    "returnType" : "Map<Account, Integer>",
    "comment" : "\n     * Gets all accounts of given type and their visibility for specific package. This method\n     * requires the caller to have a signature match with the authenticator that manages\n     * accountType. It is a helper method which combines calls to {@link #getAccountsByType} by\n     * authenticator and {@link #getAccountVisibility} for every returned account.\n     *\n     * <p>\n     *\n     * @param packageName Package name\n     * @param accountType {@link Account} type\n     *\n     * @return Map with visibility for all accounts of given type\n     * See {@link #getAccountVisibility} for possible values\n     ",
    "links" : [ "#getAccountsByType", "#getAccountVisibility", "android.accounts.Account" ]
  }, {
    "name" : "public boolean setAccountVisibility(Account account, String packageName, @AccountVisibility int visibility)",
    "returnType" : "boolean",
    "comment" : "\n     * Set visibility value of given account to certain package.\n     * Package name must match installed application, or be equal to\n     * {@link #PACKAGE_NAME_KEY_LEGACY_VISIBLE} or {@link #PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE}.\n     * <p>\n     * Possible visibility values:\n     * <ul>\n     * <li>{@link #VISIBILITY_UNDEFINED}</li>\n     * <li>{@link #VISIBILITY_VISIBLE}</li>\n     * <li>{@link #VISIBILITY_USER_MANAGED_VISIBLE}</li>\n     * <li>{@link #VISIBILITY_NOT_VISIBLE}\n     * <li>{@link #VISIBILITY_USER_MANAGED_NOT_VISIBLE}</li>\n     * </ul>\n     * <p>\n     * This method requires the caller to have a signature match with the authenticator that owns\n     * the specified account.\n     *\n     * @param account {@link Account} to update visibility\n     * @param packageName Package name of the application to modify account visibility. Declaring\n     *        <a href=\"/training/basics/intents/package-visibility\">package visibility</a> needs\n     *        for it is needed, if the caller is targeting API level 34 and above.\n     * @param visibility New visibility value\n     *\n     * @return True, if visibility value was successfully updated.\n     ",
    "links" : [ "#VISIBILITY_VISIBLE", "#VISIBILITY_USER_MANAGED_VISIBLE", "#VISIBILITY_UNDEFINED", "android.accounts.Account", "#VISIBILITY_USER_MANAGED_NOT_VISIBLE", "#PACKAGE_NAME_KEY_LEGACY_VISIBLE", "#VISIBILITY_NOT_VISIBLE", "#PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE" ]
  }, {
    "name" : "public int getAccountVisibility(Account account, String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Get visibility of certain account for given application. Possible returned values are:\n     * <ul>\n     * <li>{@link #VISIBILITY_VISIBLE}</li>\n     * <li>{@link #VISIBILITY_USER_MANAGED_VISIBLE}</li>\n     * <li>{@link #VISIBILITY_NOT_VISIBLE}\n     * <li>{@link #VISIBILITY_USER_MANAGED_NOT_VISIBLE}</li>\n     * </ul>\n     *\n     * <p>\n     * This method requires the caller to have a signature match with the authenticator that owns\n     * the specified account.\n     *\n     * @param account {@link Account} to get visibility\n     * @param packageName Package name of the application to get account visibility\n     *\n     * @return int Visibility of given account. For the caller targeting API level 34 and above,\n     * {@link #VISIBILITY_NOT_VISIBLE} is returned if the given package is filtered by the rules of\n     * <a href=\"/training/basics/intents/package-visibility\">package visibility</a>.\n     ",
    "links" : [ "#VISIBILITY_VISIBLE", "#VISIBILITY_USER_MANAGED_VISIBLE", "android.accounts.Account", "#VISIBILITY_USER_MANAGED_NOT_VISIBLE", "#VISIBILITY_NOT_VISIBLE" ]
  }, {
    "name" : "public boolean notifyAccountAuthenticated(Account account)",
    "returnType" : "boolean",
    "comment" : "\n     * Notifies the system that the account has just been authenticated. This\n     * information may be used by other applications to verify the account. This\n     * should be called only when the user has entered correct credentials for\n     * the account.\n     * <p>\n     * It is not safe to call this method from the main thread. As such, call it\n     * from another thread.\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that owns the specified account.\n     *\n     * @param account The {@link Account} to be updated.\n     * @return boolean {@code true} if the authentication of the account has been successfully\n     *         acknowledged. Otherwise {@code false}.\n     ",
    "links" : [ "android.accounts.Account" ]
  }, {
    "name" : "public AccountManagerFuture<Account> renameAccount(final Account account, @Size(min = 1) final String newName, AccountManagerCallback<Account> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Account>",
    "comment" : "\n     * Rename the specified {@link Account}.  This is equivalent to removing\n     * the existing account and adding a new renamed account with the old\n     * account's user data.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator\n     * is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param account The {@link Account} to rename\n     * @param newName String name to be associated with the account.\n     * @param callback Callback to invoke when the request completes, null for\n     *     no callback\n     * @param handler {@link Handler} identifying the callback thread, null for\n     *     the main thread\n     * @return An {@link AccountManagerFuture} which resolves to the Account\n     *     after the name change. If successful the account's name will be the\n     *     specified new name.\n     ",
    "links" : [ "android.accounts.Account", "android.os.Handler", "android.accounts.AccountManagerFuture" ]
  }, {
    "name" : "public String getPreviousName(final Account account)",
    "returnType" : "String",
    "comment" : "\n     * Gets the previous name associated with the account or {@code null}, if\n     * none. This is intended so that clients of\n     * {@link OnAccountsUpdateListener} can determine if an\n     * authenticator has renamed an account.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * @param account The account to query for a previous name.\n     * @return The account's previous name, null if the account has never been\n     *         renamed.\n     ",
    "links" : [ "android.accounts.OnAccountsUpdateListener" ]
  }, {
    "name" : "public AccountManagerFuture<Boolean> removeAccount(final Account account, AccountManagerCallback<Boolean> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Boolean>",
    "comment" : "\n     * Removes an account from the AccountManager.  Does nothing if the account\n     * does not exist.  Does not delete the account from the server.\n     * The authenticator may have its own policies preventing account\n     * deletion, in which case the account will not be deleted.\n     *\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param account The {@link Account} to remove\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Boolean,\n     *     true if the account has been successfully removed\n     * @deprecated use\n     *     {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}\n     *     instead\n     ",
    "links" : [ "android.accounts.Account", "android.os.Handler", "#removeAccount(Account", "android.accounts.AccountManagerFuture" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> removeAccount(final Account account, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Removes an account from the AccountManager. Does nothing if the account\n     * does not exist.  Does not delete the account from the server.\n     * The authenticator may have its own policies preventing account\n     * deletion, in which case the account will not be deleted.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param account The {@link Account} to remove\n     * @param activity The {@link Activity} context to use for launching a new\n     *     authenticator-defined sub-Activity to prompt the user to delete an\n     *     account; used only to call startActivity(); if null, the prompt\n     *     will not be launched directly, but the {@link Intent} may be\n     *     returned to the caller instead\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *     {@link #KEY_BOOLEAN_RESULT} if activity was specified and an account\n     *     was removed or if active. If no activity was specified, the returned\n     *     Bundle contains only {@link #KEY_INTENT} with the {@link Intent}\n     *     needed to launch the actual account removal process, if authenticator\n     *     needs the activity launch. If an error occurred,\n     *     {@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if no authenticator was registered for\n     *      this account type or the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation was canceled for\n     *      any reason, including the user canceling the creation process or\n     *      adding accounts (of this type) has been disabled by policy\n     * </ul>\n     ",
    "links" : [ "android.accounts.Account", "android.os.Handler", "#KEY_BOOLEAN_RESULT", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException" ]
  }, {
    "name" : "public AccountManagerFuture<Boolean> removeAccountAsUser(final Account account, AccountManagerCallback<Boolean> callback, Handler handler, final UserHandle userHandle)",
    "returnType" : "AccountManagerFuture<Boolean>",
    "comment" : "\n     * @see #removeAccount(Account, AccountManagerCallback, Handler)\n     * @hide\n     * @deprecated use\n     *     {@link #removeAccountAsUser(Account, Activity, AccountManagerCallback, Handler)}\n     *     instead\n     ",
    "links" : [ "#removeAccountAsUser(Account" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> removeAccountAsUser(final Account account, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler, final UserHandle userHandle)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * @see #removeAccount(Account, Activity, AccountManagerCallback, Handler)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAccountExplicitly(Account account)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes an account directly. Normally used by authenticators, not\n     * directly by applications. Does not delete the account from the server.\n     * The authenticator may have its own policies preventing account deletion,\n     * in which case the account will not be deleted.\n     * <p>\n     * It is safe to call this method from the main thread.\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator\n     * is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param account The {@link Account} to delete.\n     * @return True if the account was successfully deleted, false if the\n     *         account did not exist, the account is null, or another error\n     *         occurs.\n     ",
    "links" : [ "android.accounts.Account" ]
  }, {
    "name" : "public void invalidateAuthToken(final String accountType, final String authToken)",
    "returnType" : "void",
    "comment" : "\n     * Removes an auth token from the AccountManager's cache.  Does nothing if\n     * the auth token is not currently in the cache.  Applications must call this\n     * method when the auth token is found to have expired or otherwise become\n     * invalid for authenticating requests.  The AccountManager does not validate\n     * or expire cached auth tokens otherwise.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS or USE_CREDENTIALS permission is needed for those\n     * platforms. See docs for this function in API level 22.\n     *\n     * @param accountType The account type of the auth token to invalidate, must not be null\n     * @param authToken The auth token to invalidate, may be null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String peekAuthToken(final Account account, final String authTokenType)",
    "returnType" : "String",
    "comment" : "\n     * Gets an auth token from the AccountManager's cache.  If no auth\n     * token is cached for this account, null will be returned -- a new\n     * auth token will not be generated, and the server will not be contacted.\n     * Intended for use by the authenticator, not directly by applications.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator\n     * is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param account The account for which an auth token is to be fetched. Cannot be {@code null}.\n     * @param authTokenType The type of auth token to fetch. Cannot be {@code null}.\n     * @return The cached auth token for this account and type, or null if\n     *     no auth token is cached, the account does not exist, or the user is locked\n     * @see #getAuthToken\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPassword(final Account account, final String password)",
    "returnType" : "void",
    "comment" : "\n     * Sets or forgets a saved password. This modifies the local copy of the\n     * password used to automatically authenticate the user; it does not change\n     * the user's account password on the server. Intended for use by the\n     * authenticator, not directly by applications.\n     * <p>Calling this method does not update the last authenticated timestamp,\n     * referred by {@link #KEY_LAST_AUTHENTICATED_TIME}. To update it, call\n     * {@link #notifyAccountAuthenticated(Account)} after getting success.\n     * <p>It is safe to call this method from the main thread.\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator\n     * is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param account The account whose password is to be set. Cannot be\n     *            {@code null}.\n     * @param password The password to set, null to clear the password\n     ",
    "links" : [ "#notifyAccountAuthenticated(Account)", "#KEY_LAST_AUTHENTICATED_TIME" ]
  }, {
    "name" : "public void clearPassword(final Account account)",
    "returnType" : "void",
    "comment" : "\n     * Forgets a saved password.  This erases the local copy of the password;\n     * it does not change the user's account password on the server.\n     * Has the same effect as setPassword(account, null) but requires fewer\n     * permissions, and may be used by applications or management interfaces\n     * to \"sign out\" from an account.\n     *\n     * <p>This method only successfully clear the account's password when the\n     * caller has the same signature as the authenticator that owns the\n     * specified account. Otherwise, this method will silently fail.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param account The account whose password to clear\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUserData(final Account account, final String key, final String value)",
    "returnType" : "void",
    "comment" : "\n     * Sets one userdata key for an account. Intended by use for the\n     * authenticator to stash state for itself, not directly by applications.\n     * The meaning of the keys and values is up to the authenticator.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator\n     * is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param account Account whose user data is to be set. Must not be {@code null}.\n     * @param key String user data key to set.  Must not be null\n     * @param value String value to set, {@code null} to clear this user data key\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAuthToken(Account account, final String authTokenType, final String authToken)",
    "returnType" : "void",
    "comment" : "\n     * Adds an auth token to the AccountManager cache for an account.\n     * If the account does not exist then this call has no effect.\n     * Replaces any previous auth token for this account and auth token type.\n     * Intended for use by the authenticator, not directly by applications.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>This method requires the caller to have a signature match with the\n     * authenticator that manages the specified account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator\n     * is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param account The account to set an auth token for\n     * @param authTokenType The type of the auth token, see {#getAuthToken}\n     * @param authToken The auth token to add to the cache\n     ",
    "links" : [ ]
  }, {
    "name" : "public String blockingGetAuthToken(Account account, String authTokenType, boolean notifyAuthFailure) throws OperationCanceledException, IOException, AuthenticatorException",
    "returnType" : "String",
    "comment" : "\n     * This convenience helper synchronously gets an auth token with\n     * {@link #getAuthToken(Account, String, boolean, AccountManagerCallback, Handler)}.\n     *\n     * <p>This method may block while a network request completes, and must\n     * never be made from the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * USE_CREDENTIALS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param account The account to fetch an auth token for\n     * @param authTokenType The auth token type, see {@link #getAuthToken getAuthToken()}\n     * @param notifyAuthFailure If true, display a notification and return null\n     *     if authentication fails; if false, prompt and wait for the user to\n     *     re-enter correct credentials before returning\n     * @return An auth token of the specified type for this account, or null\n     *     if authentication fails or none can be fetched.\n     * @throws AuthenticatorException if the authenticator failed to respond\n     * @throws OperationCanceledException if the request was canceled for any\n     *     reason, including the user canceling a credential request\n     * @throws java.io.IOException if the authenticator experienced an I/O problem\n     *     creating a new auth token, usually because of network trouble\n     ",
    "links" : [ "#getAuthToken(Account", "#getAuthToken" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> getAuthToken(final Account account, final String authTokenType, final Bundle options, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Gets an auth token of the specified type for a particular account,\n     * prompting the user for credentials if necessary.  This method is\n     * intended for applications running in the foreground where it makes\n     * sense to ask the user directly for a password.\n     *\n     * <p>If a previously generated auth token is cached for this account and\n     * type, then it is returned.  Otherwise, if a saved password is\n     * available, it is sent to the server to generate a new auth token.\n     * Otherwise, the user is prompted to enter a password.\n     *\n     * <p>Some authenticators have auth token <em>types</em>, whose value\n     * is authenticator-dependent.  Some services use different token types to\n     * access different functionality -- for example, Google uses different auth\n     * tokens to access Gmail and Google Calendar for the same account.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * USE_CREDENTIALS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * @param account The account to fetch an auth token for\n     * @param authTokenType The auth token type, an authenticator-dependent\n     *     string token, must not be null\n     * @param options Authenticator-specific options for the request,\n     *     may be null or empty\n     * @param activity The {@link Activity} context to use for launching a new\n     *     authenticator-defined sub-Activity to prompt the user for a password\n     *     if necessary; used only to call startActivity(); must not be null.\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *     at least the following fields:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted\n     * </ul>\n     *\n     * (Other authenticator-specific values may be returned.)  If an auth token\n     * could not be fetched, {@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation is canceled for\n     *      any reason, incluidng the user canceling a credential request\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      creating a new auth token, usually because of network trouble\n     * </ul>\n     * If the account is no longer present on the device, the return value is\n     * authenticator-dependent.  The caller should verify the validity of the\n     * account before requesting an auth token.\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#KEY_AUTHTOKEN", "android.os.Handler", "android.accounts.OperationCanceledException", "android.accounts.AccountManagerFuture#getResult()", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.app.Activity", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> getAuthToken(final Account account, final String authTokenType, final boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Gets an auth token of the specified type for a particular account,\n     * optionally raising a notification if the user must enter credentials.\n     * This method is intended for background tasks and services where the\n     * user should not be immediately interrupted with a password prompt.\n     *\n     * <p>If a previously generated auth token is cached for this account and\n     * type, then it is returned.  Otherwise, if a saved password is\n     * available, it is sent to the server to generate a new auth token.\n     * Otherwise, an {@link Intent} is returned which, when started, will\n     * prompt the user for a password.  If the notifyAuthFailure parameter is\n     * set, a status bar notification is also created with the same Intent,\n     * alerting the user that they need to enter a password at some point.\n     *\n     * <p>In that case, you may need to wait until the user responds, which\n     * could take hours or days or forever.  When the user does respond and\n     * supply a new password, the account manager will broadcast the\n     * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent and\n     * notify {@link OnAccountsUpdateListener} which applications can\n     * use to try again.\n     *\n     * <p>If notifyAuthFailure is not set, it is the application's\n     * responsibility to launch the returned Intent at some point.\n     * Either way, the result from this call will not wait for user action.\n     *\n     * <p>Some authenticators have auth token <em>types</em>, whose value\n     * is authenticator-dependent.  Some services use different token types to\n     * access different functionality -- for example, Google uses different auth\n     * tokens to access Gmail and Google Calendar for the same account.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * @param account The account to fetch an auth token for\n     * @param authTokenType The auth token type, an authenticator-dependent\n     *     string token, must not be null\n     * @param notifyAuthFailure True to add a notification to prompt the\n     *     user for a password if necessary, false to leave that to the caller\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *     at least the following fields on success:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted\n     * </ul>\n     *\n     * (Other authenticator-specific values may be returned.)  If the user\n     * must enter credentials, the returned Bundle contains only\n     * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.\n     *\n     * If an error occurred, {@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation is canceled for\n     *      any reason, incluidng the user canceling a credential request\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      creating a new auth token, usually because of network trouble\n     * </ul>\n     * If the account is no longer present on the device, the return value is\n     * authenticator-dependent.  The caller should verify the validity of the\n     * account before requesting an auth token.\n     * @deprecated use {@link #getAuthToken(Account, String, android.os.Bundle,\n     * boolean, AccountManagerCallback, android.os.Handler)} instead\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#getAuthToken(Account", "#LOGIN_ACCOUNTS_CHANGED_ACTION", "#KEY_AUTHTOKEN", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.accounts.OnAccountsUpdateListener", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException", "android.os.Handler", "android.accounts.AccountManagerFuture#getResult()" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> getAuthToken(final Account account, final String authTokenType, final Bundle options, final boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Gets an auth token of the specified type for a particular account,\n     * optionally raising a notification if the user must enter credentials.\n     * This method is intended for background tasks and services where the\n     * user should not be immediately interrupted with a password prompt.\n     *\n     * <p>If a previously generated auth token is cached for this account and\n     * type, then it is returned.  Otherwise, if a saved password is\n     * available, it is sent to the server to generate a new auth token.\n     * Otherwise, an {@link Intent} is returned which, when started, will\n     * prompt the user for a password.  If the notifyAuthFailure parameter is\n     * set, a status bar notification is also created with the same Intent,\n     * alerting the user that they need to enter a password at some point.\n     *\n     * <p>In that case, you may need to wait until the user responds, which\n     * could take hours or days or forever.  When the user does respond and\n     * supply a new password, the account manager will broadcast the\n     * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent and\n     * notify {@link OnAccountsUpdateListener} which applications can\n     * use to try again.\n     *\n     * <p>If notifyAuthFailure is not set, it is the application's\n     * responsibility to launch the returned Intent at some point.\n     * Either way, the result from this call will not wait for user action.\n     *\n     * <p>Some authenticators have auth token <em>types</em>, whose value\n     * is authenticator-dependent.  Some services use different token types to\n     * access different functionality -- for example, Google uses different auth\n     * tokens to access Gmail and Google Calendar for the same account.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * USE_CREDENTIALS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param account The account to fetch an auth token for\n     * @param authTokenType The auth token type, an authenticator-dependent\n     *     string token, must not be null\n     * @param options Authenticator-specific options for the request,\n     *     may be null or empty\n     * @param notifyAuthFailure True to add a notification to prompt the\n     *     user for a password if necessary, false to leave that to the caller\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *     at least the following fields on success:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted\n     * </ul>\n     *\n     * (Other authenticator-specific values may be returned.)  If the user\n     * must enter credentials, the returned Bundle contains only\n     * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.\n     *\n     * If an error occurred, {@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation is canceled for\n     *      any reason, incluidng the user canceling a credential request\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      creating a new auth token, usually because of network trouble\n     * </ul>\n     * If the account is no longer present on the device, the return value is\n     * authenticator-dependent.  The caller should verify the validity of the\n     * account before requesting an auth token.\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#LOGIN_ACCOUNTS_CHANGED_ACTION", "#KEY_AUTHTOKEN", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.accounts.OnAccountsUpdateListener", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException", "android.os.Handler", "android.accounts.AccountManagerFuture#getResult()" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> addAccount(final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle addAccountOptions, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Asks the user to add an account of a specified type.  The authenticator\n     * for this account type processes this request with the appropriate user\n     * interface.  If the user does elect to create a new account, the account\n     * name is returned.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param accountType The type of account to add; must not be null\n     * @param authTokenType The type of auth token (see {@link #getAuthToken})\n     *     this account will need to be able to generate, null for none\n     * @param requiredFeatures The features (see {@link #hasFeatures}) this\n     *     account must have, null for none\n     * @param addAccountOptions Authenticator-specific options for the request,\n     *     may be null or empty\n     * @param activity The {@link Activity} context to use for launching a new\n     *     authenticator-defined sub-Activity to prompt the user to create an\n     *     account; used only to call startActivity(); if null, the prompt\n     *     will not be launched directly, but the necessary {@link Intent}\n     *     will be returned to the caller instead\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *     these fields if activity was specified and an account was created:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * </ul>\n     *\n     * If no activity was specified, the returned Bundle contains only\n     * {@link #KEY_INTENT} with the {@link Intent} needed to launch the\n     * actual account creation process.  If an error occurred,\n     * {@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if no authenticator was registered for\n     *      this account type or the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation was canceled for\n     *      any reason, including the user canceling the creation process or adding accounts\n     *      (of this type) has been disabled by policy\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      creating a new account, usually because of network trouble\n     * </ul>\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException", "#getAuthToken", "android.os.Handler", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity", "#hasFeatures" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> addAccountAsUser(final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle addAccountOptions, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler, final UserHandle userHandle)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * @see #addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback, Handler)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSharedAccountsFromParentUser(UserHandle parentUser, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Adds shared accounts from a parent user to a secondary user. Adding the shared account\n     * doesn't take effect immediately. When the target user starts up, any pending shared accounts\n     * are attempted to be copied to the target user from the primary via calls to the\n     * authenticator.\n     * @param parentUser parent user\n     * @param user target user\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccountManagerFuture<Boolean> copyAccountToUser(final Account account, final UserHandle fromUser, final UserHandle toUser, AccountManagerCallback<Boolean> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Boolean>",
    "comment" : "\n     * Copies an account from one user to another user.\n     * @param account the account to copy\n     * @param fromUser the user to copy the account from\n     * @param toUser the target user\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Boolean indicated whether it\n     * succeeded.\n     * @hide\n     ",
    "links" : [ "android.os.Handler", "android.accounts.AccountManagerFuture" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> confirmCredentials(final Account account, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Confirms that the user knows the password for an account to make extra\n     * sure they are the owner of the account.  The user-entered password can\n     * be supplied directly, otherwise the authenticator for this account type\n     * prompts the user with the appropriate interface.  This method is\n     * intended for applications which want extra assurance; for example, the\n     * phone lock screen uses this to let the user unlock the phone with an\n     * account password if they forget the lock pattern.\n     *\n     * <p>If the user-entered password matches a saved password for this\n     * account, the request is considered valid; otherwise the authenticator\n     * verifies the password (usually by contacting the server).\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs\n     * for this function in API level 22.\n     *\n     * @param account The account to confirm password knowledge for\n     * @param options Authenticator-specific options for the request;\n     *     if the {@link #KEY_PASSWORD} string field is present, the\n     *     authenticator may use it directly rather than prompting the user;\n     *     may be null or empty\n     * @param activity The {@link Activity} context to use for launching a new\n     *     authenticator-defined sub-Activity to prompt the user to enter a\n     *     password; used only to call startActivity(); if null, the prompt\n     *     will not be launched directly, but the necessary {@link Intent}\n     *     will be returned to the caller instead\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle\n     *     with these fields if activity or password was supplied and\n     *     the account was successfully verified:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account verified\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * <li> {@link #KEY_BOOLEAN_RESULT} - true to indicate success\n     * </ul>\n     *\n     * If no activity or password was specified, the returned Bundle contains\n     * {@link #KEY_INTENT} with the {@link Intent} needed to launch the\n     * password prompt.\n     *\n     * <p>Also the returning Bundle may contain {@link\n     * #KEY_LAST_AUTHENTICATED_TIME} indicating the last time the\n     * credential was validated/created.\n     *\n     * If an error occurred,{@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation was canceled for\n     *      any reason, including the user canceling the password prompt\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      verifying the password, usually because of network trouble\n     * </ul>\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#KEY_PASSWORD", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.accounts.AccountManagerFuture", "#KEY_LAST_AUTHENTICATED_TIME", "android.accounts.AuthenticatorException", "android.os.Handler", "#KEY_BOOLEAN_RESULT", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> confirmCredentialsAsUser(final Account account, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler, UserHandle userHandle)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * @hide\n     * Same as {@link #confirmCredentials(Account, Bundle, Activity, AccountManagerCallback, Handler)}\n     * but for the specified user.\n     ",
    "links" : [ "#confirmCredentials(Account" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> updateCredentials(final Account account, final String authTokenType, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Asks the user to enter a new password for an account, updating the\n     * saved credentials for the account.  Normally this happens automatically\n     * when the server rejects credentials during an auth token fetch, but this\n     * can be invoked directly to ensure we have the correct credentials stored.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for\n     * this function in API level 22.\n     *\n     * @param account The account to update credentials for\n     * @param authTokenType The credentials entered must allow an auth token\n     *     of this type to be created (but no actual auth token is returned);\n     *     may be null\n     * @param options Authenticator-specific options for the request;\n     *     may be null or empty\n     * @param activity The {@link Activity} context to use for launching a new\n     *     authenticator-defined sub-Activity to prompt the user to enter a\n     *     password; used only to call startActivity(); if null, the prompt\n     *     will not be launched directly, but the necessary {@link Intent}\n     *     will be returned to the caller instead\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle\n     *     with these fields if an activity was supplied and the account\n     *     credentials were successfully updated:\n     * <ul>\n     * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account\n     * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n     * </ul>\n     *\n     * If no activity was specified, the returned Bundle contains\n     * {@link #KEY_INTENT} with the {@link Intent} needed to launch the\n     * password prompt. If an error occurred,\n     * {@link AccountManagerFuture#getResult()} throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation was canceled for\n     *      any reason, including the user canceling the password prompt\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      verifying the password, usually because of network trouble\n     * </ul>\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "android.os.Handler", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "android.accounts.AccountManagerFuture#getResult()", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.app.Activity", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> editProperties(final String accountType, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Offers the user an opportunity to change an authenticator's settings.\n     * These properties are for the authenticator in general, not a particular\n     * account.  Not all authenticators support this method.\n     *\n     * <p>This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * <p>This method requires the caller to have the same signature as the\n     * authenticator associated with the specified account type.\n     *\n     * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n     * MANAGE_ACCOUNTS permission is needed for those platforms. See docs\n     * for this function in API level 22.\n     *\n     * @param accountType The account type associated with the authenticator\n     *     to adjust\n     * @param activity The {@link Activity} context to use for launching a new\n     *     authenticator-defined sub-Activity to adjust authenticator settings;\n     *     used only to call startActivity(); if null, the settings dialog will\n     *     not be launched directly, but the necessary {@link Intent} will be\n     *     returned to the caller instead\n     * @param callback Callback to invoke when the request completes,\n     *     null for no callback\n     * @param handler {@link Handler} identifying the callback thread,\n     *     null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle\n     *     which is empty if properties were edited successfully, or\n     *     if no activity was specified, contains only {@link #KEY_INTENT}\n     *     needed to launch the authenticator's settings dialog.\n     *     If an error occurred, {@link AccountManagerFuture#getResult()}\n     *     throws:\n     * <ul>\n     * <li> {@link AuthenticatorException} if no authenticator was registered for\n     *      this account type or the authenticator failed to respond\n     * <li> {@link OperationCanceledException} if the operation was canceled for\n     *      any reason, including the user canceling the settings dialog\n     * <li> {@link IOException} if the authenticator experienced an I/O problem\n     *      updating settings, usually because of network trouble\n     * </ul>\n     ",
    "links" : [ "android.os.Handler", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "android.accounts.AccountManagerFuture#getResult()", "java.io.IOException", "android.app.Activity", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException" ]
  }, {
    "name" : "public boolean someUserHasAccount(@NonNull final Account account)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks if the given account exists on any of the users on the device.\n     * Only the system process can call this method.\n     *\n     * @param account The account to check for existence.\n     * @return whether any user has this account\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureNotOnMainThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postToHandler(Handler handler, final AccountManagerCallback<Bundle> callback, final AccountManagerFuture<Bundle> future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postToHandler(Handler handler, final OnAccountsUpdateListener listener, final Account[] accounts)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Exception convertErrorToException(int code, String message)",
    "returnType" : "Exception",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getAccountByTypeAndFeatures(String accountType, String[] features, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> getAuthTokenByFeatures(final String accountType, final String authTokenType, final String[] features, final Activity activity, final Bundle addAccountOptions, final Bundle getAuthTokenOptions, final AccountManagerCallback<Bundle> callback, final Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * This convenience helper combines the functionality of {@link #getAccountsByTypeAndFeatures},\n     * {@link #getAuthToken}, and {@link #addAccount}.\n     *\n     * <p>\n     * This method gets a list of the accounts matching specific type and feature set which are\n     * visible to the caller (see {@link #getAccountsByType} for details);\n     * if there is exactly one already visible account, it is used; if there are some\n     * accounts for which user grant visibility, the user is prompted to pick one; if there are\n     * none, the user is prompted to add one. Finally, an auth token is acquired for the chosen\n     * account.\n     *\n     * <p>\n     * This method may be called from any thread, but the returned {@link AccountManagerFuture} must\n     * not be used on the main thread.\n     *\n     * <p>\n     * <b>NOTE:</b> If targeting your app to work on API level 22 and before, MANAGE_ACCOUNTS\n     * permission is needed for those platforms. See docs for this function in API level 22.\n     *\n     * @param accountType The account type required (see {@link #getAccountsByType}), must not be\n     *        null\n     * @param authTokenType The desired auth token type (see {@link #getAuthToken}), must not be\n     *        null\n     * @param features Required features for the account (see\n     *        {@link #getAccountsByTypeAndFeatures}), may be null or empty\n     * @param activity The {@link Activity} context to use for launching new sub-Activities to\n     *        prompt to add an account, select an account, and/or enter a password, as necessary;\n     *        used only to call startActivity(); should not be null\n     * @param addAccountOptions Authenticator-specific options to use for adding new accounts; may\n     *        be null or empty\n     * @param getAuthTokenOptions Authenticator-specific options to use for getting auth tokens; may\n     *        be null or empty\n     * @param callback Callback to invoke when the request completes, null for no callback\n     * @param handler {@link Handler} identifying the callback thread, null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with at least the\n     *         following fields:\n     *         <ul>\n     *         <li>{@link #KEY_ACCOUNT_NAME} - the name of the account\n     *         <li>{@link #KEY_ACCOUNT_TYPE} - the type of the account\n     *         <li>{@link #KEY_AUTHTOKEN} - the auth token you wanted\n     *         </ul>\n     *\n     *         If an error occurred, {@link AccountManagerFuture#getResult()} throws:\n     *         <ul>\n     *         <li>{@link AuthenticatorException} if no authenticator was registered for this\n     *         account type or the authenticator failed to respond\n     *         <li>{@link OperationCanceledException} if the operation was canceled for any reason,\n     *         including the user canceling any operation\n     *         <li>{@link IOException} if the authenticator experienced an I/O problem updating\n     *         settings, usually because of network trouble\n     *         </ul>\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#getAccountsByTypeAndFeatures", "#KEY_AUTHTOKEN", "android.accounts.OperationCanceledException", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException", "#getAuthToken", "#getAccountsByType", "android.os.Handler", "#addAccount", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity" ]
  }, {
    "name" : "public static Intent newChooseAccountIntent(Account selectedAccount, ArrayList<Account> allowableAccounts, String[] allowableAccountTypes, boolean alwaysPromptForAccount, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions)",
    "returnType" : "Intent",
    "comment" : "\n     * Deprecated in favor of {@link #newChooseAccountIntent(Account, List, String[], String,\n     * String, String[], Bundle)}.\n     *\n     * Returns an intent to an {@link Activity} that prompts the user to choose from a list of\n     * accounts.\n     * The caller will then typically start the activity by calling\n     * <code>startActivityForResult(intent, ...);</code>.\n     * <p>\n     * On success the activity returns a Bundle with the account name and type specified using\n     * keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}.\n     * Chosen account is marked as {@link #VISIBILITY_USER_MANAGED_VISIBLE} to the caller\n     * (see {@link #setAccountVisibility}) and will be returned to it in consequent\n     * {@link #getAccountsByType}) calls.\n     * <p>\n     * The most common case is to call this with one account type, e.g.:\n     * <p>\n     * <pre>  newChooseAccountIntent(null, null, new String[]{\"com.google\"}, false, null,\n     * null, null, null);</pre>\n     * @param selectedAccount if specified, indicates that the {@link Account} is the currently\n     * selected one, according to the caller's definition of selected.\n     * @param allowableAccounts an optional {@link List} of accounts that are allowed to be\n     * shown. If not specified then this field will not limit the displayed accounts.\n     * @param allowableAccountTypes an optional string array of account types. These are used\n     * both to filter the shown accounts and to filter the list of account types that are shown\n     * when adding an account. If not specified then this field will not limit the displayed\n     * account types when adding an account.\n     * @param alwaysPromptForAccount boolean that is ignored.\n     * @param descriptionOverrideText if non-null this string is used as the description in the\n     * accounts chooser screen rather than the default\n     * @param addAccountAuthTokenType this string is passed as the {@link #addAccount}\n     * authTokenType parameter\n     * @param addAccountRequiredFeatures this string array is passed as the {@link #addAccount}\n     * requiredFeatures parameter\n     * @param addAccountOptions This {@link Bundle} is passed as the {@link #addAccount} options\n     * parameter\n     * @return an {@link Intent} that can be used to launch the ChooseAccount activity flow.\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#VISIBILITY_USER_MANAGED_VISIBLE", "#getAccountsByType", "android.os.Bundle", "#newChooseAccountIntent(Account", "android.accounts.Account", "#addAccount", "android.content.Intent", "#KEY_ACCOUNT_TYPE", "android.app.Activity", "#setAccountVisibility", "java.util.ArrayList" ]
  }, {
    "name" : "public static Intent newChooseAccountIntent(Account selectedAccount, List<Account> allowableAccounts, String[] allowableAccountTypes, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an intent to an {@link Activity} that prompts the user to choose from a list of\n     * accounts.\n     * The caller will then typically start the activity by calling\n     * <code>startActivityForResult(intent, ...);</code>.\n     * <p>\n     * On success the activity returns a Bundle with the account name and type specified using\n     * keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}.\n     * Chosen account is marked as {@link #VISIBILITY_USER_MANAGED_VISIBLE} to the caller\n     * (see {@link #setAccountVisibility}) and will be returned to it in consequent\n     * {@link #getAccountsByType}) calls.\n     * <p>\n     * The most common case is to call this with one account type, e.g.:\n     * <p>\n     * <pre>  newChooseAccountIntent(null, null, new String[]{\"com.google\"}, null, null, null,\n     * null);</pre>\n     * @param selectedAccount if specified, indicates that the {@link Account} is the currently\n     * selected one, according to the caller's definition of selected.\n     * @param allowableAccounts an optional {@link List} of accounts that are allowed to be\n     * shown. If not specified then this field will not limit the displayed accounts.\n     * @param allowableAccountTypes an optional string array of account types. These are used\n     * both to filter the shown accounts and to filter the list of account types that are shown\n     * when adding an account. If not specified then this field will not limit the displayed\n     * account types when adding an account.\n     * @param descriptionOverrideText if non-null this string is used as the description in the\n     * accounts chooser screen rather than the default\n     * @param addAccountAuthTokenType this string is passed as the {@link #addAccount}\n     * authTokenType parameter\n     * @param addAccountRequiredFeatures this string array is passed as the {@link #addAccount}\n     * requiredFeatures parameter\n     * @param addAccountOptions This {@link Bundle} is passed as the {@link #addAccount} options\n     * parameter\n     * @return an {@link Intent} that can be used to launch the ChooseAccount activity flow.\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#VISIBILITY_USER_MANAGED_VISIBLE", "#getAccountsByType", "android.os.Bundle", "android.accounts.Account", "#addAccount", "android.content.Intent", "#KEY_ACCOUNT_TYPE", "android.app.Activity", "#setAccountVisibility", "java.util.ArrayList" ]
  }, {
    "name" : "public void addOnAccountsUpdatedListener(final OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately)",
    "returnType" : "void",
    "comment" : "\n     * Adds an {@link OnAccountsUpdateListener} to this instance of the {@link AccountManager}. This\n     * listener will be notified whenever user or AbstractAccountAuthenticator made changes to\n     * accounts of any type related to the caller. This method is equivalent to\n     * addOnAccountsUpdatedListener(listener, handler, updateImmediately, null)\n     *\n     * @see #addOnAccountsUpdatedListener(OnAccountsUpdateListener, Handler, boolean,\n     *      String[])\n     ",
    "links" : [ "android.accounts.AccountManager", "android.accounts.OnAccountsUpdateListener" ]
  }, {
    "name" : "public void addOnAccountsUpdatedListener(final OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately, String[] accountTypes)",
    "returnType" : "void",
    "comment" : "\n     * Adds an {@link OnAccountsUpdateListener} to this instance of the {@link AccountManager}. This\n     * listener will be notified whenever user or AbstractAccountAuthenticator made changes to\n     * accounts of given types related to the caller -\n     * either list of accounts returned by {@link #getAccounts()}\n     * was changed, or new account was added for which user can grant access to the caller.\n     * <p>\n     * As long as this listener is present, the AccountManager instance will not be\n     * garbage-collected, and neither will the {@link Context} used to retrieve it, which may be a\n     * large Activity instance. To avoid memory leaks, you must remove this listener before then.\n     * Normally listeners are added in an Activity or Service's {@link Activity#onCreate} and\n     * removed in {@link Activity#onDestroy}.\n     * <p>\n     * It is safe to call this method from the main thread.\n     *\n     * @param listener The listener to send notifications to\n     * @param handler {@link Handler} identifying the thread to use for notifications, null for the\n     *        main thread\n     * @param updateImmediately If true, the listener will be invoked (on the handler thread) right\n     *        away with the current account list\n     * @param accountTypes If set, only changes to accounts of given types will be reported.\n     * @throws IllegalArgumentException if listener is null\n     * @throws IllegalStateException if listener was already added\n     ",
    "links" : [ "android.accounts.AccountManager", "android.content.Context", "android.app.Activity#onCreate", "android.os.Handler", "android.app.Activity#onDestroy", "#getAccounts()", "android.accounts.OnAccountsUpdateListener" ]
  }, {
    "name" : "public void removeOnAccountsUpdatedListener(OnAccountsUpdateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes an {@link OnAccountsUpdateListener} previously registered with\n     * {@link #addOnAccountsUpdatedListener}.  The listener will no longer\n     * receive notifications of account changes.\n     *\n     * <p>It is safe to call this method from the main thread.\n     *\n     * <p>No permission is required to call this method.\n     *\n     * @param listener The previously added listener to remove\n     * @throws IllegalArgumentException if listener is null\n     * @throws IllegalStateException if listener was not already added\n     ",
    "links" : [ "#addOnAccountsUpdatedListener", "android.accounts.OnAccountsUpdateListener" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> startAddAccountSession(final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle options, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Asks the user to authenticate with an account of a specified type. The\n     * authenticator for this account type processes this request with the\n     * appropriate user interface. If the user does elect to authenticate with a\n     * new account, a bundle of session data for installing the account later is\n     * returned with optional account password and account status token.\n     * <p>\n     * This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     * <p>\n     * <p>\n     * <b>NOTE:</b> The account will not be installed to the device by calling\n     * this api alone. #finishSession should be called after this to install the\n     * account on device.\n     *\n     * @param accountType The type of account to add; must not be null\n     * @param authTokenType The type of auth token (see {@link #getAuthToken})\n     *            this account will need to be able to generate, null for none\n     * @param requiredFeatures The features (see {@link #hasFeatures}) this\n     *            account must have, null for none\n     * @param options Authenticator-specific options for the request, may be\n     *            null or empty\n     * @param activity The {@link Activity} context to use for launching a new\n     *            authenticator-defined sub-Activity to prompt the user to\n     *            create an account; used only to call startActivity(); if null,\n     *            the prompt will not be launched directly, but the necessary\n     *            {@link Intent} will be returned to the caller instead\n     * @param callback Callback to invoke when the request completes, null for\n     *            no callback\n     * @param handler {@link Handler} identifying the callback thread, null for\n     *            the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *         these fields if activity was specified and user was authenticated\n     *         with an account:\n     *         <ul>\n     *         <li>{@link #KEY_ACCOUNT_SESSION_BUNDLE} - encrypted Bundle for\n     *         adding the the to the device later.\n     *         <li>{@link #KEY_ACCOUNT_STATUS_TOKEN} - optional, token to check\n     *         status of the account\n     *         </ul>\n     *         If no activity was specified, the returned Bundle contains only\n     *         {@link #KEY_INTENT} with the {@link Intent} needed to launch the\n     *         actual account creation process. If authenticator doesn't support\n     *         this method, the returned Bundle contains only\n     *         {@link #KEY_ACCOUNT_SESSION_BUNDLE} with encrypted\n     *         {@code options} needed to add account later. If an error\n     *         occurred, {@link AccountManagerFuture#getResult()} throws:\n     *         <ul>\n     *         <li>{@link AuthenticatorException} if no authenticator was\n     *         registered for this account type or the authenticator failed to\n     *         respond\n     *         <li>{@link OperationCanceledException} if the operation was\n     *         canceled for any reason, including the user canceling the\n     *         creation process or adding accounts (of this type) has been\n     *         disabled by policy\n     *         <li>{@link IOException} if the authenticator experienced an I/O\n     *         problem creating a new account, usually because of network\n     *         trouble\n     *         </ul>\n     * @see #finishSession\n     ",
    "links" : [ "#KEY_ACCOUNT_SESSION_BUNDLE", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "java.io.IOException", "#KEY_ACCOUNT_STATUS_TOKEN", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException", "#getAuthToken", "android.os.Handler", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity", "#hasFeatures" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> startUpdateCredentialsSession(final Account account, final String authTokenType, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Asks the user to enter a new password for the account but not updating the\n     * saved credentials for the account until {@link #finishSession} is called.\n     * <p>\n     * This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     * <p>\n     * <b>NOTE:</b> The saved credentials for the account alone will not be\n     * updated by calling this API alone. #finishSession should be called after\n     * this to update local credentials\n     *\n     * @param account The account to update credentials for\n     * @param authTokenType The credentials entered must allow an auth token of\n     *            this type to be created (but no actual auth token is\n     *            returned); may be null\n     * @param options Authenticator-specific options for the request; may be\n     *            null or empty\n     * @param activity The {@link Activity} context to use for launching a new\n     *            authenticator-defined sub-Activity to prompt the user to enter\n     *            a password; used only to call startActivity(); if null, the\n     *            prompt will not be launched directly, but the necessary\n     *            {@link Intent} will be returned to the caller instead\n     * @param callback Callback to invoke when the request completes, null for\n     *            no callback\n     * @param handler {@link Handler} identifying the callback thread, null for\n     *            the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *         these fields if an activity was supplied and user was\n     *         successfully re-authenticated to the account:\n     *         <ul>\n     *         <li>{@link #KEY_ACCOUNT_SESSION_BUNDLE} - encrypted Bundle for\n     *         updating the local credentials on device later.\n     *         <li>{@link #KEY_ACCOUNT_STATUS_TOKEN} - optional, token to check\n     *         status of the account\n     *         </ul>\n     *         If no activity was specified, the returned Bundle contains\n     *         {@link #KEY_INTENT} with the {@link Intent} needed to launch the\n     *         password prompt. If an error occurred,\n     *         {@link AccountManagerFuture#getResult()} throws:\n     *         <ul>\n     *         <li>{@link AuthenticatorException} if the authenticator failed to\n     *         respond\n     *         <li>{@link OperationCanceledException} if the operation was\n     *         canceled for any reason, including the user canceling the\n     *         password prompt\n     *         <li>{@link IOException} if the authenticator experienced an I/O\n     *         problem verifying the password, usually because of network\n     *         trouble\n     *         </ul>\n     * @see #finishSession\n     ",
    "links" : [ "#KEY_ACCOUNT_SESSION_BUNDLE", "android.os.Handler", "#KEY_INTENT", "#finishSession", "android.accounts.OperationCanceledException", "android.content.Intent", "android.accounts.AccountManagerFuture#getResult()", "java.io.IOException", "#KEY_ACCOUNT_STATUS_TOKEN", "android.app.Activity", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> finishSession(final Bundle sessionBundle, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * Finishes the session started by {@link #startAddAccountSession} or\n     * {@link #startUpdateCredentialsSession}. This will either add the account\n     * to AccountManager or update the local credentials stored.\n     * <p>\n     * This method may be called from any thread, but the returned\n     * {@link AccountManagerFuture} must not be used on the main thread.\n     *\n     * @param sessionBundle a {@link Bundle} created by {@link #startAddAccountSession} or\n     *            {@link #startUpdateCredentialsSession}\n     * @param activity The {@link Activity} context to use for launching a new\n     *            authenticator-defined sub-Activity to prompt the user to\n     *            create an account or reauthenticate existing account; used\n     *            only to call startActivity(); if null, the prompt will not\n     *            be launched directly, but the necessary {@link Intent} will\n     *            be returned to the caller instead\n     * @param callback Callback to invoke when the request completes, null for\n     *            no callback\n     * @param handler {@link Handler} identifying the callback thread, null for\n     *            the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Bundle with\n     *         these fields if an activity was supplied and an account was added\n     *         to device or local credentials were updated::\n     *         <ul>\n     *         <li>{@link #KEY_ACCOUNT_NAME} - the name of the account created\n     *         <li>{@link #KEY_ACCOUNT_TYPE} - the type of the account\n     *         <li>{@link #KEY_ACCOUNT_STATUS_TOKEN} - optional, token to check\n     *         status of the account\n     *         </ul>\n     *         If no activity was specified and additional information is needed\n     *         from user, the returned Bundle may only contain\n     *         {@link #KEY_INTENT} with the {@link Intent} needed to launch the\n     *         actual account creation process. If an error occurred,\n     *         {@link AccountManagerFuture#getResult()} throws:\n     *         <ul>\n     *         <li>{@link AuthenticatorException} if no authenticator was\n     *         registered for this account type or the authenticator failed to\n     *         respond\n     *         <li>{@link OperationCanceledException} if the operation was\n     *         canceled for any reason, including the user canceling the\n     *         creation process or adding accounts (of this type) has been\n     *         disabled by policy\n     *         <li>{@link IOException} if the authenticator experienced an I/O\n     *         problem creating a new account, usually because of network\n     *         trouble\n     *         </ul>\n     * @see #startAddAccountSession and #startUpdateCredentialsSession\n     ",
    "links" : [ "#KEY_ACCOUNT_NAME", "#startAddAccountSession", "#startUpdateCredentialsSession", "android.os.Bundle", "#KEY_INTENT", "android.accounts.OperationCanceledException", "android.content.Intent", "java.io.IOException", "#KEY_ACCOUNT_TYPE", "#KEY_ACCOUNT_STATUS_TOKEN", "android.accounts.AccountManagerFuture", "android.accounts.AuthenticatorException", "android.os.Handler", "android.accounts.AccountManagerFuture#getResult()", "android.app.Activity" ]
  }, {
    "name" : "public AccountManagerFuture<Bundle> finishSessionAsUser(final Bundle sessionBundle, final Activity activity, final UserHandle userHandle, AccountManagerCallback<Bundle> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Bundle>",
    "comment" : "\n     * @see #finishSession\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccountManagerFuture<Boolean> isCredentialsUpdateSuggested(final Account account, final String statusToken, AccountManagerCallback<Boolean> callback, Handler handler)",
    "returnType" : "AccountManagerFuture<Boolean>",
    "comment" : "\n     * Checks whether {@link #updateCredentials} or {@link #startUpdateCredentialsSession} should be\n     * called with respect to the specified account.\n     * <p>\n     * This method may be called from any thread, but the returned {@link AccountManagerFuture} must\n     * not be used on the main thread.\n     *\n     * @param account The {@link Account} to be checked whether {@link #updateCredentials} or\n     * {@link #startUpdateCredentialsSession} should be called\n     * @param statusToken a String of token to check account staus\n     * @param callback Callback to invoke when the request completes, null for no callback\n     * @param handler {@link Handler} identifying the callback thread, null for the main thread\n     * @return An {@link AccountManagerFuture} which resolves to a Boolean, true if the credentials\n     *         of the account should be updated.\n     ",
    "links" : [ "#startUpdateCredentialsSession", "android.accounts.Account", "android.os.Handler", "#updateCredentials", "android.accounts.AccountManagerFuture" ]
  }, {
    "name" : "public boolean hasAccountAccess(@NonNull Account account, @NonNull String packageName, @NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether a given package under a user has access to an account.\n     * Can be called only from the system UID.\n     *\n     * @param account The account for which to check.\n     * @param packageName The package for which to check.\n     * @param userHandle The user for which to check.\n     * @return True if the package can access the account.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntentSender createRequestAccountAccessIntentSenderAsUser(@NonNull Account account, @NonNull String packageName, @NonNull UserHandle userHandle)",
    "returnType" : "IntentSender",
    "comment" : "\n     * Creates an intent to request access to a given account for a UID.\n     * The returned intent should be stated for a result where {@link\n     * Activity#RESULT_OK} result means access was granted whereas {@link\n     * Activity#RESULT_CANCELED} result means access wasn't granted. Can\n     * be called only from the system UID.\n     *\n     * @param account The account for which to request.\n     * @param packageName The package name which to request.\n     * @param userHandle The user for which to request.\n     * @return The intent to request account access or null if the package\n     *     doesn't exist.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.Activity#RESULT_CANCELED", "android.app.Activity#RESULT_OK" ]
  }, {
    "name" : "public static void invalidateLocalAccountsDataCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Calling this will invalidate Local Accounts Data Cache which\n     * forces the next query in any process to recompute the cache\n    ",
    "links" : [ ]
  }, {
    "name" : "public void disableLocalAccountCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Calling this will disable account data caching.\n    ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateLocalAccountUserDataCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Calling this will invalidate Local Account User Data Cache which\n     * forces the next query in any process to recompute the cache\n    ",
    "links" : [ ]
  }, {
    "name" : "public void disableLocalUserInfoCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Calling this will disable user info caching.\n    ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Bundle sanitizeResult(Bundle result)", "public static AccountManager get(Context context)", "public String getPassword(final Account account)", "public String getUserData(final Account account, final String key)", "public AuthenticatorDescription[] getAuthenticatorTypes()", "public AuthenticatorDescription[] getAuthenticatorTypesAsUser(int userId)", "public Account[] getAccounts()", "public Account[] getAccountsAsUser(int userId)", "public Account[] getAccountsForPackage(String packageName, int uid)", "public Account[] getAccountsByTypeForPackage(String type, String packageName)", "public Account[] getAccountsByType(String type)", "public Account[] getAccountsByTypeAsUser(String type, UserHandle userHandle)", "public void updateAppPermission(Account account, String authTokenType, int uid, boolean value)", "public AccountManagerFuture<String> getAuthTokenLabel(final String accountType, final String authTokenType, AccountManagerCallback<String> callback, Handler handler)", "public AccountManagerFuture<Boolean> hasFeatures(final Account account, final String[] features, AccountManagerCallback<Boolean> callback, Handler handler)", "private AccountManagerFuture<Boolean> hasFeaturesAsUser(final Account account, final String[] features, AccountManagerCallback<Boolean> callback, Handler handler, int userId)", "public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(final String type, final String[] features, AccountManagerCallback<Account[]> callback, Handler handler)", "public boolean addAccountExplicitly(Account account, String password, Bundle userdata)", "public boolean addAccountExplicitly(Account account, String password, Bundle extras, Map<String, Integer> visibility)", "public Map<String, Integer> getPackagesAndVisibilityForAccount(Account account)", "public Map<Account, Integer> getAccountsAndVisibilityForPackage(String packageName, String accountType)", "public boolean setAccountVisibility(Account account, String packageName, @AccountVisibility int visibility)", "public int getAccountVisibility(Account account, String packageName)", "public boolean notifyAccountAuthenticated(Account account)", "public AccountManagerFuture<Account> renameAccount(final Account account, @Size(min = 1) final String newName, AccountManagerCallback<Account> callback, Handler handler)", "public String getPreviousName(final Account account)", "public AccountManagerFuture<Boolean> removeAccount(final Account account, AccountManagerCallback<Boolean> callback, Handler handler)", "public AccountManagerFuture<Bundle> removeAccount(final Account account, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Boolean> removeAccountAsUser(final Account account, AccountManagerCallback<Boolean> callback, Handler handler, final UserHandle userHandle)", "public AccountManagerFuture<Bundle> removeAccountAsUser(final Account account, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler, final UserHandle userHandle)", "public boolean removeAccountExplicitly(Account account)", "public void invalidateAuthToken(final String accountType, final String authToken)", "public String peekAuthToken(final Account account, final String authTokenType)", "public void setPassword(final Account account, final String password)", "public void clearPassword(final Account account)", "public void setUserData(final Account account, final String key, final String value)", "public void setAuthToken(Account account, final String authTokenType, final String authToken)", "public String blockingGetAuthToken(Account account, String authTokenType, boolean notifyAuthFailure) throws OperationCanceledException, IOException, AuthenticatorException", "public AccountManagerFuture<Bundle> getAuthToken(final Account account, final String authTokenType, final Bundle options, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> getAuthToken(final Account account, final String authTokenType, final boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> getAuthToken(final Account account, final String authTokenType, final Bundle options, final boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> addAccount(final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle addAccountOptions, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> addAccountAsUser(final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle addAccountOptions, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler, final UserHandle userHandle)", "public void addSharedAccountsFromParentUser(UserHandle parentUser, UserHandle user)", "public AccountManagerFuture<Boolean> copyAccountToUser(final Account account, final UserHandle fromUser, final UserHandle toUser, AccountManagerCallback<Boolean> callback, Handler handler)", "public AccountManagerFuture<Bundle> confirmCredentials(final Account account, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)", "public AccountManagerFuture<Bundle> confirmCredentialsAsUser(final Account account, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler, UserHandle userHandle)", "public AccountManagerFuture<Bundle> updateCredentials(final Account account, final String authTokenType, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)", "public AccountManagerFuture<Bundle> editProperties(final String accountType, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)", "public boolean someUserHasAccount(@NonNull final Account account)", "private void ensureNotOnMainThread()", "private void postToHandler(Handler handler, final AccountManagerCallback<Bundle> callback, final AccountManagerFuture<Bundle> future)", "private void postToHandler(Handler handler, final OnAccountsUpdateListener listener, final Account[] accounts)", "private Exception convertErrorToException(int code, String message)", "private void getAccountByTypeAndFeatures(String accountType, String[] features, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> getAuthTokenByFeatures(final String accountType, final String authTokenType, final String[] features, final Activity activity, final Bundle addAccountOptions, final Bundle getAuthTokenOptions, final AccountManagerCallback<Bundle> callback, final Handler handler)", "public static Intent newChooseAccountIntent(Account selectedAccount, ArrayList<Account> allowableAccounts, String[] allowableAccountTypes, boolean alwaysPromptForAccount, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions)", "public static Intent newChooseAccountIntent(Account selectedAccount, List<Account> allowableAccounts, String[] allowableAccountTypes, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions)", "public void addOnAccountsUpdatedListener(final OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately)", "public void addOnAccountsUpdatedListener(final OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately, String[] accountTypes)", "public void removeOnAccountsUpdatedListener(OnAccountsUpdateListener listener)", "public AccountManagerFuture<Bundle> startAddAccountSession(final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle options, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> startUpdateCredentialsSession(final Account account, final String authTokenType, final Bundle options, final Activity activity, final AccountManagerCallback<Bundle> callback, final Handler handler)", "public AccountManagerFuture<Bundle> finishSession(final Bundle sessionBundle, final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Bundle> finishSessionAsUser(final Bundle sessionBundle, final Activity activity, final UserHandle userHandle, AccountManagerCallback<Bundle> callback, Handler handler)", "public AccountManagerFuture<Boolean> isCredentialsUpdateSuggested(final Account account, final String statusToken, AccountManagerCallback<Boolean> callback, Handler handler)", "public boolean hasAccountAccess(@NonNull Account account, @NonNull String packageName, @NonNull UserHandle userHandle)", "public IntentSender createRequestAccountAccessIntentSenderAsUser(@NonNull Account account, @NonNull String packageName, @NonNull UserHandle userHandle)", "public static void invalidateLocalAccountsDataCaches()", "public void disableLocalAccountCaches()", "public static void invalidateLocalAccountUserDataCaches()", "public void disableLocalUserInfoCaches()" ],
  "variableNames" : [ "TAG", "ERROR_CODE_REMOTE_EXCEPTION", "ERROR_CODE_NETWORK_ERROR", "ERROR_CODE_CANCELED", "ERROR_CODE_INVALID_RESPONSE", "ERROR_CODE_UNSUPPORTED_OPERATION", "ERROR_CODE_BAD_ARGUMENTS", "ERROR_CODE_BAD_REQUEST", "ERROR_CODE_BAD_AUTHENTICATION", "ERROR_CODE_USER_RESTRICTED", "ERROR_CODE_MANAGEMENT_DISABLED_FOR_ACCOUNT_TYPE", "KEY_ACCOUNT_NAME", "KEY_ACCOUNT_TYPE", "KEY_ACCOUNT_ACCESS_ID", "KEY_AUTHTOKEN", "KEY_INTENT", "KEY_PASSWORD", "KEY_ACCOUNTS", "KEY_ACCOUNT_AUTHENTICATOR_RESPONSE", "KEY_ACCOUNT_MANAGER_RESPONSE", "KEY_AUTHENTICATOR_TYPES", "KEY_AUTH_FAILED_MESSAGE", "KEY_AUTH_TOKEN_LABEL", "KEY_BOOLEAN_RESULT", "KEY_ERROR_CODE", "KEY_ERROR_MESSAGE", "KEY_USERDATA", "KEY_LAST_AUTHENTICATED_TIME", "KEY_CALLER_UID", "KEY_CALLER_PID", "KEY_ANDROID_PACKAGE_NAME", "KEY_NOTIFY_ON_FAILURE", "KEY_ACCOUNT_SESSION_BUNDLE", "KEY_ACCOUNT_STATUS_TOKEN", "ACTION_AUTHENTICATOR_INTENT", "AUTHENTICATOR_META_DATA_NAME", "AUTHENTICATOR_ATTRIBUTES_NAME", "VISIBILITY_UNDEFINED", "VISIBILITY_VISIBLE", "VISIBILITY_USER_MANAGED_VISIBLE", "VISIBILITY_NOT_VISIBLE", "VISIBILITY_USER_MANAGED_NOT_VISIBLE", "ACCOUNT_ACCESS_TOKEN_TYPE", "CACHE_KEY_ACCOUNTS_DATA_PROPERTY", "CACHE_ACCOUNTS_DATA_SIZE", "mAccountsForUserCache", "CACHE_KEY_USER_DATA_PROPERTY", "CACHE_USER_DATA_SIZE", "mUserDataCache", "mContext", "mService", "mMainHandler", "LOGIN_ACCOUNTS_CHANGED_ACTION", "ACTION_ACCOUNT_REMOVED", "ACTION_VISIBLE_ACCOUNTS_CHANGED", "PACKAGE_NAME_KEY_LEGACY_VISIBLE", "PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE", "mAccountsUpdatedListeners", "mAccountsUpdatedListenersTypes", "mAccountsChangedBroadcastReceiver" ]
}