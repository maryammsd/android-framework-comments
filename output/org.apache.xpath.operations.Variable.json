{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/operations/Variable.java",
  "packageName" : "org.apache.xpath.operations",
  "className" : "Variable",
  "comment" : "\n * The variable reference expression executer.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_fixUpWasCalled",
    "type" : "boolean",
    "comment" : " Tell if fixupVariables was called.\n   *  @serial   ",
    "links" : [ ]
  }, {
    "name" : "m_qname",
    "type" : "QName",
    "comment" : " The qualified name of the variable.\n   *  @serial   ",
    "links" : [ ]
  }, {
    "name" : "m_index",
    "type" : "int",
    "comment" : "\n   * The index of the variable, which is either an absolute index to a \n   * global, or, if higher than the globals area, must be adjusted by adding \n   * the offset to the current stack frame.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isGlobal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PSUEDOVARNAMESPACE",
    "type" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setIndex(int index)",
    "returnType" : "void",
    "comment" : "\n   * Set the index for the variable into the stack.  For advanced use only. You \n   * must know what you are doing to use this.\n   * \n   * @param index a global or local index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n   * Set the index for the variable into the stack.  For advanced use only.\n   * \n   * @return index a global or local index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIsGlobal(boolean isGlobal)",
    "returnType" : "void",
    "comment" : "\n   * Set whether or not this is a global reference.  For advanced use only.\n   * \n   * @param isGlobal true if this should be a global variable reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getGlobal()",
    "returnType" : "boolean",
    "comment" : "\n   * Set the index for the variable into the stack.  For advanced use only.\n   * \n   * @return true if this should be a global variable reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setQName(QName qname)",
    "returnType" : "void",
    "comment" : "\n   * Set the qualified name of the variable.\n   *\n   * @param qname Must be a non-null reference to a qualified name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getQName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the qualified name of the variable.\n   *\n   * @return A non-null reference to a qualified name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, boolean destructiveOK) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Dereference the variable, and return the reference value.  Note that lazy \n   * evaluation will occur.  If a variable within scope is not found, a warning \n   * will be sent to the error listener, and an empty nodeset will be returned.\n   *\n   *\n   * @param xctxt The runtime execution context.\n   *\n   * @return The evaluated variable, or an empty nodeset if not found.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.apache.xalan.templates.ElemVariable getElemVariable()",
    "returnType" : "org.apache.xalan.templates.ElemVariable",
    "comment" : "\n   * Get the XSLT ElemVariable that this sub-expression references.  In order for \n   * this to work, the SourceLocator must be the owning ElemTemplateElement.\n   * @return The dereference to the ElemVariable, or null if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStableNumber()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression returns a stable number that will not change during \n   * iterations within the expression.  This is used to determine if a proximity \n   * position predicate can indicate that no more searching has to occur.\n   * \n   *\n   * @return true if the expression represents a stable number.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : " \n   * Get the analysis bits for this walker, as defined in the WalkerFactory.\n   * @return One of WalkerFactory#BIT_DESCENDANT, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPsuedoVarRef()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this is a psuedo variable reference, declared by Xalan instead \n   * of by the user.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setIndex(int index)", "public int getIndex()", "public void setIsGlobal(boolean isGlobal)", "public boolean getGlobal()", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public void setQName(QName qname)", "public QName getQName()", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt, boolean destructiveOK) throws javax.xml.transform.TransformerException", "public org.apache.xalan.templates.ElemVariable getElemVariable()", "public boolean isStableNumber()", "public int getAnalysisBits()", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public boolean deepEquals(Expression expr)", "public boolean isPsuedoVarRef()" ],
  "variableNames" : [ "serialVersionUID", "m_fixUpWasCalled", "m_qname", "m_index", "m_isGlobal", "PSUEDOVARNAMESPACE" ]
}