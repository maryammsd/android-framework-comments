{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/Authenticator.java",
  "packageName" : "java.net",
  "className" : "Authenticator",
  "comment" : " subclass.",
  "links" : [ ],
  "variables" : [ {
    "name" : "theAuthenticator",
    "type" : "Authenticator",
    "comment" : " The system-wide authenticator object.  See setDefault().",
    "links" : [ ]
  }, {
    "name" : "requestingHost",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingSite",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingProtocol",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingPrompt",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingScheme",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingURL",
    "type" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestingAuthType",
    "type" : "RequestorType",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setDefault(Authenticator a)",
    "returnType" : "void",
    "comment" : "\n     * Sets the authenticator that will be used by the networking code\n     * when a proxy or an HTTP server asks for authentication.\n     * <p>\n     * First, if there is a security manager, its {@code checkPermission}\n     * method is called with a\n     * {@code NetPermission(\"setDefaultAuthenticator\")} permission.\n     * This may result in a java.lang.SecurityException.\n     *\n     * @param   a       The authenticator to be set. If a is {@code null} then\n     *                  any previously set authenticator is removed.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn't allow\n     *        setting the default authenticator.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.net.NetPermission\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PasswordAuthentication requestPasswordAuthentication(InetAddress addr, int port, String protocol, String prompt, String scheme)",
    "returnType" : "PasswordAuthentication",
    "comment" : "\n     * Ask the authenticator that has been registered with the system\n     * for a password.\n     * <p>\n     * First, if there is a security manager, its {@code checkPermission}\n     * method is called with a\n     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n     * This may result in a java.lang.SecurityException.\n     *\n     * @param addr The InetAddress of the site requesting authorization,\n     *             or null if not known.\n     * @param port the port for the requested connection\n     * @param protocol The protocol that's requesting the connection\n     *          ({@link java.net.Authenticator#getRequestingProtocol()})\n     * @param prompt A prompt string for the user\n     * @param scheme The authentication scheme\n     *\n     * @return The username/password, or null if one can't be gotten.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn't allow\n     *        the password authentication request.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.net.NetPermission\n     ",
    "links" : [ "java.net.Authenticator#getRequestingProtocol()" ]
  }, {
    "name" : "public static PasswordAuthentication requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme)",
    "returnType" : "PasswordAuthentication",
    "comment" : "\n     * Ask the authenticator that has been registered with the system\n     * for a password. This is the preferred method for requesting a password\n     * because the hostname can be provided in cases where the InetAddress\n     * is not available.\n     * <p>\n     * First, if there is a security manager, its {@code checkPermission}\n     * method is called with a\n     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n     * This may result in a java.lang.SecurityException.\n     *\n     * @param host The hostname of the site requesting authentication.\n     * @param addr The InetAddress of the site requesting authentication,\n     *             or null if not known.\n     * @param port the port for the requested connection.\n     * @param protocol The protocol that's requesting the connection\n     *          ({@link java.net.Authenticator#getRequestingProtocol()})\n     * @param prompt A prompt string for the user which identifies the authentication realm.\n     * @param scheme The authentication scheme\n     *\n     * @return The username/password, or null if one can't be gotten.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn't allow\n     *        the password authentication request.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.net.NetPermission\n     * @since 1.4\n     ",
    "links" : [ "java.net.Authenticator#getRequestingProtocol()" ]
  }, {
    "name" : "public static PasswordAuthentication requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme, URL url, RequestorType reqType)",
    "returnType" : "PasswordAuthentication",
    "comment" : "\n     * Ask the authenticator that has been registered with the system\n     * for a password.\n     * <p>\n     * First, if there is a security manager, its {@code checkPermission}\n     * method is called with a\n     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n     * This may result in a java.lang.SecurityException.\n     *\n     * @param host The hostname of the site requesting authentication.\n     * @param addr The InetAddress of the site requesting authorization,\n     *             or null if not known.\n     * @param port the port for the requested connection\n     * @param protocol The protocol that's requesting the connection\n     *          ({@link java.net.Authenticator#getRequestingProtocol()})\n     * @param prompt A prompt string for the user\n     * @param scheme The authentication scheme\n     * @param url The requesting URL that caused the authentication\n     * @param reqType The type (server or proxy) of the entity requesting\n     *              authentication.\n     *\n     * @return The username/password, or null if one can't be gotten.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn't allow\n     *        the password authentication request.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.net.NetPermission\n     *\n     * @since 1.5\n     ",
    "links" : [ "java.net.Authenticator#getRequestingProtocol()" ]
  }, {
    "name" : "protected final String getRequestingHost()",
    "returnType" : "String",
    "comment" : "\n     * Gets the {@code hostname} of the\n     * site or proxy requesting authentication, or {@code null}\n     * if not available.\n     *\n     * @return the hostname of the connection requiring authentication, or null\n     *          if it's not available.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final InetAddress getRequestingSite()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Gets the {@code InetAddress} of the\n     * site requesting authorization, or {@code null}\n     * if not available.\n     *\n     * @return the InetAddress of the site requesting authorization, or null\n     *          if it's not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final int getRequestingPort()",
    "returnType" : "int",
    "comment" : "\n     * Gets the port number for the requested connection.\n     * @return an {@code int} indicating the\n     * port for the requested connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final String getRequestingProtocol()",
    "returnType" : "String",
    "comment" : "\n     * Give the protocol that's requesting the connection.  Often this\n     * will be based on a URL, but in a future JDK it could be, for\n     * example, \"SOCKS\" for a password-protected SOCKS5 firewall.\n     *\n     * @return the protocol, optionally followed by \"/version\", where\n     *          version is a version number.\n     *\n     * @see java.net.URL#getProtocol()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final String getRequestingPrompt()",
    "returnType" : "String",
    "comment" : "\n     * Gets the prompt string given by the requestor.\n     *\n     * @return the prompt string given by the requestor (realm for\n     *          http requests)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final String getRequestingScheme()",
    "returnType" : "String",
    "comment" : "\n     * Gets the scheme of the requestor (the HTTP scheme\n     * for an HTTP firewall, for example).\n     *\n     * @return the scheme of the requestor\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected PasswordAuthentication getPasswordAuthentication()",
    "returnType" : "PasswordAuthentication",
    "comment" : "\n     * Called when password authorization is needed.  Subclasses should\n     * override the default implementation, which returns null.\n     * @return The PasswordAuthentication collected from the\n     *          user, or null if none is provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected URL getRequestingURL()",
    "returnType" : "URL",
    "comment" : "\n     * Returns the URL that resulted in this\n     * request for authentication.\n     *\n     * @since 1.5\n     *\n     * @return the requesting URL\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected RequestorType getRequestorType()",
    "returnType" : "RequestorType",
    "comment" : "\n     * Returns whether the requestor is a Proxy or a Server.\n     *\n     * @since 1.5\n     *\n     * @return the authentication type of the requestor\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void reset()", "public static synchronized void setDefault(Authenticator a)", "public static PasswordAuthentication requestPasswordAuthentication(InetAddress addr, int port, String protocol, String prompt, String scheme)", "public static PasswordAuthentication requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme)", "public static PasswordAuthentication requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme, URL url, RequestorType reqType)", "protected final String getRequestingHost()", "protected final InetAddress getRequestingSite()", "protected final int getRequestingPort()", "protected final String getRequestingProtocol()", "protected final String getRequestingPrompt()", "protected final String getRequestingScheme()", "protected PasswordAuthentication getPasswordAuthentication()", "protected URL getRequestingURL()", "protected RequestorType getRequestorType()" ],
  "variableNames" : [ "theAuthenticator", "requestingHost", "requestingSite", "requestingPort", "requestingProtocol", "requestingPrompt", "requestingScheme", "requestingURL", "requestingAuthType" ]
}