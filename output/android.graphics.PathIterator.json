{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/PathIterator.java",
  "packageName" : "android.graphics",
  "className" : "PathIterator",
  "comment" : "\n * <code>PathIterator</code> can be used to query a given {@link Path} object, to discover its\n * operations and point values.\n ",
  "links" : [ "android.graphics.Path" ],
  "variables" : [ {
    "name" : "mPointsArray",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPointsAddress",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedVerb",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeIterator",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPathGenerationId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POINT_ARRAY_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERB_MOVE",
    "type" : "int",
    "comment" : " these must match the values in SkPath.h",
    "links" : [ ]
  }, {
    "name" : "VERB_LINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERB_QUAD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERB_CONIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERB_CUBIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERB_CLOSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERB_DONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int next(@NonNull float[] points, int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the next verb in this iterator's {@link Path}, and fills entries in the\n     * <code>points</code> array with the point data (if any) for that operation.\n     * Each two floats represent the data for a single point of that operation.\n     * The number of pairs of floats supplied in the resulting array depends on the verb:\n     * <ul>\n     * <li>{@link #VERB_MOVE}: 1 pair (indices 0 to 1)</li>\n     * <li>{@link #VERB_LINE}: 2 pairs (indices 0 to 3)</li>\n     * <li>{@link #VERB_QUAD}: 3 pairs (indices 0 to 5)</li>\n     * <li>{@link #VERB_CONIC}: 3.5 pairs (indices 0 to 6), the seventh entry has the conic\n     * weight</li>\n     * <li>{@link #VERB_CUBIC}: 4 pairs (indices 0 to 7)</li>\n     * <li>{@link #VERB_CLOSE}: 0 pairs</li>\n     * <li>{@link #VERB_DONE}: 0 pairs</li>\n     * </ul>\n     * @param points The point data for this operation, must have at least\n     *               8 items available to hold up to 4 pairs of point values\n     * @param offset An offset into the <code>points</code> array where entries should be placed.\n     * @return the operation for the next element in the iteration\n     * @throws ArrayIndexOutOfBoundsException if the points array is too small\n     * @throws ConcurrentModificationException if the underlying path was modified\n     * since this iterator was created.\n     ",
    "links" : [ "#VERB_CONIC", "android.graphics.Path", "#VERB_CLOSE", "#VERB_LINE", "#VERB_MOVE", "#VERB_QUAD", "#VERB_DONE", "#VERB_CUBIC" ]
  }, {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the there are more elements in this iterator to be returned.\n     * A return value of <code>false</code> means there are no more elements, and an\n     * ensuing call to {@link #next()} or {@link #next(float[], int)} )} will return\n     * {@link #VERB_DONE}.\n     *\n     * @return true if there are more elements to be iterated through, false otherwise\n     * @throws ConcurrentModificationException if the underlying path was modified\n     * since this iterator was created.\n     ",
    "links" : [ "#next()", "#VERB_DONE", "#next(float" ]
  }, {
    "name" : "public int peek()",
    "returnType" : "int",
    "comment" : "\n     * Returns the next verb in the iteration, or {@link #VERB_DONE} if there are no more\n     * elements.\n     *\n     * @return the next verb in the iteration, or {@link #VERB_DONE} if there are no more\n     * elements\n     * @throws ConcurrentModificationException if the underlying path was modified\n     * since this iterator was created.\n     ",
    "links" : [ "#VERB_DONE" ]
  }, {
    "name" : "private int nextInternal()",
    "returnType" : "int",
    "comment" : "\n     * This is where the work is done for {@link #next()}. Using this internal method\n     * is helfpul for managing the cached segment used by {@link #hasNext()}.\n     *\n     * @return the segment to be returned by {@link #next()}\n     * @throws ConcurrentModificationException if the underlying path was modified\n     * since this iterator was created.\n     ",
    "links" : [ "#next()", "#hasNext()" ]
  }, {
    "name" : "public Segment next()",
    "returnType" : "Segment",
    "comment" : "\n     * Returns the next {@link Segment} element in this iterator.\n     *\n     * There are two versions of <code>next()</code>. This version is slightly more\n     * expensive at runtime, since it allocates a new {@link Segment} object with\n     * every call. The other version, {@link #next(float[], int)} requires no such allocation, but\n     * requires a little more manual effort to use.\n     *\n     * @return the next segment in this iterator\n     * @throws ConcurrentModificationException if the underlying path was modified\n     * since this iterator was created.\n     ",
    "links" : [ "Segment", "#next(float" ]
  }, {
    "name" : "private int getReturnVerb(int cachedVerb)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreate(long nativePath)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nNext(long nativeIterator, long pointsAddress)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nPeek(long nativeIterator)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int next(@NonNull float[] points, int offset)", "public boolean hasNext()", "public int peek()", "private int nextInternal()", "public Segment next()", "private int getReturnVerb(int cachedVerb)", "private static native long nCreate(long nativePath)", "private static native long nGetFinalizer()", "private static native int nNext(long nativeIterator, long pointsAddress)", "private static native int nPeek(long nativeIterator)" ],
  "variableNames" : [ "mPointsArray", "mPointsAddress", "mCachedVerb", "mDone", "mNativeIterator", "mPath", "mPathGenerationId", "POINT_ARRAY_SIZE", "sRegistry", "VERB_MOVE", "VERB_LINE", "VERB_QUAD", "VERB_CONIC", "VERB_CUBIC", "VERB_CLOSE", "VERB_DONE" ]
}