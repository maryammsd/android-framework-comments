{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/Checksum.java",
  "packageName" : "java.util.zip",
  "className" : "Checksum",
  "comment" : "\n * An interface representing a data checksum.\n *\n * @author David Connelly\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void update(int b)",
    "returnType" : "void",
    "comment" : "\n     * Updates the current checksum with the specified byte.\n     *\n     * @param b the byte to update the checksum with\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(byte[] b)",
    "returnType" : "void",
    "comment" : "\n     * Updates the current checksum with the specified array of bytes.\n     *\n     * @implSpec This default implementation is equal to calling\n     * {@code update(b, 0, b.length)}.\n     *\n     * @param b the array of bytes to update the checksum with\n     *\n     * @throws NullPointerException\n     *         if {@code b} is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(byte[] b, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Updates the current checksum with the specified array of bytes.\n     *\n     * @param b the byte array to update the checksum with\n     * @param off the start offset of the data\n     * @param len the number of bytes to use for the update\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Updates the current checksum with the bytes from the specified buffer.\n     *\n     * The checksum is updated with the remaining bytes in the buffer, starting\n     * at the buffer's position. Upon return, the buffer's position will be\n     * updated to its limit; its limit will not have been changed.\n     *\n     * @apiNote For best performance with DirectByteBuffer and other ByteBuffer\n     * implementations without a backing array implementers of this interface\n     * should override this method.\n     *\n     * @implSpec The default implementation has the following behavior.<br>\n     * For ByteBuffers backed by an accessible byte array.\n     * <pre>{@code\n     * update(buffer.array(),\n     *        buffer.position() + buffer.arrayOffset(),\n     *        buffer.remaining());\n     * }</pre>\n     * For ByteBuffers not backed by an accessible byte array.\n     * <pre>{@code\n     * byte[] b = new byte[Math.min(buffer.remaining(), 4096)];\n     * while (buffer.hasRemaining()) {\n     *     int length = Math.min(buffer.remaining(), b.length);\n     *     buffer.get(b, 0, length);\n     *     update(b, 0, length);\n     * }\n     * }</pre>\n     *\n     * @param buffer the ByteBuffer to update the checksum with\n     *\n     * @throws NullPointerException\n     *         if {@code buffer} is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current checksum value.\n     *\n     * @return the current checksum value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the checksum to its initial value.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void update(int b)", "public void update(byte[] b)", "public void update(byte[] b, int off, int len)", "public void update(ByteBuffer buffer)", "public long getValue()", "public void reset()" ],
  "variableNames" : [ ]
}