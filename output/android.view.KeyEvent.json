{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/KeyEvent.java",
  "packageName" : "android.view",
  "className" : "KeyEvent",
  "comment" : "\n * Object used to report key and button events.\n * <p>\n * Each key press is described by a sequence of key events.  A key press\n * starts with a key event with {@link #ACTION_DOWN}.  If the key is held\n * sufficiently long that it repeats, then the initial down is followed\n * additional key events with {@link #ACTION_DOWN} and a non-zero value for\n * {@link #getRepeatCount()}.  The last key event is a {@link #ACTION_UP}\n * for the key up.  If the key press is canceled, the key up event will have the\n * {@link #FLAG_CANCELED} flag set.\n * </p><p>\n * Key events are generally accompanied by a key code ({@link #getKeyCode()}),\n * scan code ({@link #getScanCode()}) and meta state ({@link #getMetaState()}).\n * Key code constants are defined in this class.  Scan code constants are raw\n * device-specific codes obtained from the OS and so are not generally meaningful\n * to applications unless interpreted using the {@link KeyCharacterMap}.\n * Meta states describe the pressed state of key modifiers\n * such as {@link #META_SHIFT_ON} or {@link #META_ALT_ON}.\n * </p><p>\n * Key codes typically correspond one-to-one with individual keys on an input device.\n * Many keys and key combinations serve quite different functions on different\n * input devices so care must be taken when interpreting them.  Always use the\n * {@link KeyCharacterMap} associated with the input device when mapping keys\n * to characters.  Be aware that there may be multiple key input devices active\n * at the same time and each will have its own key character map.\n * </p><p>\n * As soft input methods can use multiple and inventive ways of inputting text,\n * there is no guarantee that any key press on a soft keyboard will generate a key\n * event: this is left to the IME's discretion, and in fact sending such events is\n * discouraged.  You should never rely on receiving KeyEvents for any key on a soft\n * input method.  In particular, the default software keyboard will never send any\n * key event to any application targetting Jelly Bean or later, and will only send\n * events for some presses of the delete and return keys to applications targetting\n * Ice Cream Sandwich or earlier.  Be aware that other software input methods may\n * never send key events regardless of the version.  Consider using editor actions\n * like {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE} if you need\n * specific interaction with the software keyboard, as it gives more visibility to\n * the user as to how your application will react to key presses.\n * </p><p>\n * When interacting with an IME, the framework may deliver key events\n * with the special action {@link #ACTION_MULTIPLE} that either specifies\n * that single repeated key code or a sequence of characters to insert.\n * </p><p>\n * In general, the framework cannot guarantee that the key events it delivers\n * to a view always constitute complete key sequences since some events may be dropped\n * or modified by containing views before they are delivered.  The view implementation\n * should be prepared to handle {@link #FLAG_CANCELED} and should tolerate anomalous\n * situations such as receiving a new {@link #ACTION_DOWN} without first having\n * received an {@link #ACTION_UP} for the prior key press.\n * </p><p>\n * Refer to {@link InputDevice} for more information about how different kinds of\n * input devices and sources represent keys and buttons.\n * </p>\n ",
  "variables" : [ {
    "name" : "KEYCODE_UNKNOWN",
    "type" : "int",
    "comment" : " Key code constant: Unknown key code. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SOFT_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Soft Left key.\n     * Usually situated below the display on phones and used as a multi-function\n     * feature key for selecting a software defined function shown on the bottom left\n     * of the display. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SOFT_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Soft Right key.\n     * Usually situated below the display on phones and used as a multi-function\n     * feature key for selecting a software defined function shown on the bottom right\n     * of the display. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_HOME",
    "type" : "int",
    "comment" : " Key code constant: Home key.\n     * This key is handled by the framework and is never delivered to applications. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BACK",
    "type" : "int",
    "comment" : " Key code constant: Back key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CALL",
    "type" : "int",
    "comment" : " Key code constant: Call key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ENDCALL",
    "type" : "int",
    "comment" : " Key code constant: End Call key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_0",
    "type" : "int",
    "comment" : " Key code constant: '0' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_1",
    "type" : "int",
    "comment" : " Key code constant: '1' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_2",
    "type" : "int",
    "comment" : " Key code constant: '2' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_3",
    "type" : "int",
    "comment" : " Key code constant: '3' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_4",
    "type" : "int",
    "comment" : " Key code constant: '4' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_5",
    "type" : "int",
    "comment" : " Key code constant: '5' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_6",
    "type" : "int",
    "comment" : " Key code constant: '6' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_7",
    "type" : "int",
    "comment" : " Key code constant: '7' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_8",
    "type" : "int",
    "comment" : " Key code constant: '8' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_9",
    "type" : "int",
    "comment" : " Key code constant: '9' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STAR",
    "type" : "int",
    "comment" : " Key code constant: '*' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_POUND",
    "type" : "int",
    "comment" : " Key code constant: '#' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_UP",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Up key.\n     * May also be synthesized from trackball motions. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Down key.\n     * May also be synthesized from trackball motions. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Left key.\n     * May also be synthesized from trackball motions. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Right key.\n     * May also be synthesized from trackball motions. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_CENTER",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Center key.\n     * May also be synthesized from trackball motions. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_VOLUME_UP",
    "type" : "int",
    "comment" : " Key code constant: Volume Up key.\n     * Adjusts the speaker volume up. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_VOLUME_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Volume Down key.\n     * Adjusts the speaker volume down. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_POWER",
    "type" : "int",
    "comment" : " Key code constant: Power key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CAMERA",
    "type" : "int",
    "comment" : " Key code constant: Camera key.\n     * Used to launch a camera application or take pictures. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CLEAR",
    "type" : "int",
    "comment" : " Key code constant: Clear key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_A",
    "type" : "int",
    "comment" : " Key code constant: 'A' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_B",
    "type" : "int",
    "comment" : " Key code constant: 'B' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_C",
    "type" : "int",
    "comment" : " Key code constant: 'C' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_D",
    "type" : "int",
    "comment" : " Key code constant: 'D' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_E",
    "type" : "int",
    "comment" : " Key code constant: 'E' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F",
    "type" : "int",
    "comment" : " Key code constant: 'F' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_G",
    "type" : "int",
    "comment" : " Key code constant: 'G' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_H",
    "type" : "int",
    "comment" : " Key code constant: 'H' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_I",
    "type" : "int",
    "comment" : " Key code constant: 'I' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_J",
    "type" : "int",
    "comment" : " Key code constant: 'J' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_K",
    "type" : "int",
    "comment" : " Key code constant: 'K' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_L",
    "type" : "int",
    "comment" : " Key code constant: 'L' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_M",
    "type" : "int",
    "comment" : " Key code constant: 'M' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_N",
    "type" : "int",
    "comment" : " Key code constant: 'N' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_O",
    "type" : "int",
    "comment" : " Key code constant: 'O' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_P",
    "type" : "int",
    "comment" : " Key code constant: 'P' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_Q",
    "type" : "int",
    "comment" : " Key code constant: 'Q' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_R",
    "type" : "int",
    "comment" : " Key code constant: 'R' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_S",
    "type" : "int",
    "comment" : " Key code constant: 'S' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_T",
    "type" : "int",
    "comment" : " Key code constant: 'T' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_U",
    "type" : "int",
    "comment" : " Key code constant: 'U' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_V",
    "type" : "int",
    "comment" : " Key code constant: 'V' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_W",
    "type" : "int",
    "comment" : " Key code constant: 'W' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_X",
    "type" : "int",
    "comment" : " Key code constant: 'X' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_Y",
    "type" : "int",
    "comment" : " Key code constant: 'Y' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_Z",
    "type" : "int",
    "comment" : " Key code constant: 'Z' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_COMMA",
    "type" : "int",
    "comment" : " Key code constant: ',' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PERIOD",
    "type" : "int",
    "comment" : " Key code constant: '.' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ALT_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Left Alt modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ALT_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Right Alt modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SHIFT_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Left Shift modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SHIFT_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Right Shift modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TAB",
    "type" : "int",
    "comment" : " Key code constant: Tab key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SPACE",
    "type" : "int",
    "comment" : " Key code constant: Space key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SYM",
    "type" : "int",
    "comment" : " Key code constant: Symbol modifier key.\n     * Used to enter alternate symbols. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_EXPLORER",
    "type" : "int",
    "comment" : " Key code constant: Explorer special function key.\n     * Used to launch a browser application. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ENVELOPE",
    "type" : "int",
    "comment" : " Key code constant: Envelope special function key.\n     * Used to launch a mail application. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ENTER",
    "type" : "int",
    "comment" : " Key code constant: Enter key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DEL",
    "type" : "int",
    "comment" : " Key code constant: Backspace key.\n     * Deletes characters before the insertion point, unlike {@link #KEYCODE_FORWARD_DEL}. ",
    "links" : [ "#KEYCODE_FORWARD_DEL" ]
  }, {
    "name" : "KEYCODE_GRAVE",
    "type" : "int",
    "comment" : " Key code constant: '`' (backtick) key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MINUS",
    "type" : "int",
    "comment" : " Key code constant: '-'. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_EQUALS",
    "type" : "int",
    "comment" : " Key code constant: '=' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_LEFT_BRACKET",
    "type" : "int",
    "comment" : " Key code constant: '[' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_RIGHT_BRACKET",
    "type" : "int",
    "comment" : " Key code constant: ']' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BACKSLASH",
    "type" : "int",
    "comment" : " Key code constant: '\\' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SEMICOLON",
    "type" : "int",
    "comment" : " Key code constant: ';' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_APOSTROPHE",
    "type" : "int",
    "comment" : " Key code constant: ''' (apostrophe) key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SLASH",
    "type" : "int",
    "comment" : " Key code constant: '/' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_AT",
    "type" : "int",
    "comment" : " Key code constant: '@' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUM",
    "type" : "int",
    "comment" : " Key code constant: Number modifier key.\n     * Used to enter numeric symbols.\n     * This key is not Num Lock; it is more like {@link #KEYCODE_ALT_LEFT} and is\n     * interpreted as an ALT key by {@link android.text.method.MetaKeyKeyListener}. ",
    "links" : [ "android.text.method.MetaKeyKeyListener", "#KEYCODE_ALT_LEFT" ]
  }, {
    "name" : "KEYCODE_HEADSETHOOK",
    "type" : "int",
    "comment" : " Key code constant: Headset Hook key.\n     * Used to hang up calls and stop media. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_FOCUS",
    "type" : "int",
    "comment" : " *Camera* focus",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PLUS",
    "type" : "int",
    "comment" : " Key code constant: '+' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MENU",
    "type" : "int",
    "comment" : " Key code constant: Menu key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NOTIFICATION",
    "type" : "int",
    "comment" : " Key code constant: Notification key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SEARCH",
    "type" : "int",
    "comment" : " Key code constant: Search key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_PLAY_PAUSE",
    "type" : "int",
    "comment" : " Key code constant: Play/Pause media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_STOP",
    "type" : "int",
    "comment" : " Key code constant: Stop media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_NEXT",
    "type" : "int",
    "comment" : " Key code constant: Play Next media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_PREVIOUS",
    "type" : "int",
    "comment" : " Key code constant: Play Previous media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_REWIND",
    "type" : "int",
    "comment" : " Key code constant: Rewind media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_FAST_FORWARD",
    "type" : "int",
    "comment" : " Key code constant: Fast Forward media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MUTE",
    "type" : "int",
    "comment" : " Key code constant: Mute key.\n     * Mutes the microphone, unlike {@link #KEYCODE_VOLUME_MUTE}. ",
    "links" : [ "#KEYCODE_VOLUME_MUTE" ]
  }, {
    "name" : "KEYCODE_PAGE_UP",
    "type" : "int",
    "comment" : " Key code constant: Page Up key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PAGE_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Page Down key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PICTSYMBOLS",
    "type" : "int",
    "comment" : " switch symbol-sets (Emoji,Kao-moji)",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SWITCH_CHARSET",
    "type" : "int",
    "comment" : " switch char-sets (Kanji,Katakana)",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_A",
    "type" : "int",
    "comment" : " Key code constant: A Button key.\n     * On a game controller, the A button should be either the button labeled A\n     * or the first button on the bottom row of controller buttons. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_B",
    "type" : "int",
    "comment" : " Key code constant: B Button key.\n     * On a game controller, the B button should be either the button labeled B\n     * or the second button on the bottom row of controller buttons. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_C",
    "type" : "int",
    "comment" : " Key code constant: C Button key.\n     * On a game controller, the C button should be either the button labeled C\n     * or the third button on the bottom row of controller buttons. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_X",
    "type" : "int",
    "comment" : " Key code constant: X Button key.\n     * On a game controller, the X button should be either the button labeled X\n     * or the first button on the upper row of controller buttons. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_Y",
    "type" : "int",
    "comment" : " Key code constant: Y Button key.\n     * On a game controller, the Y button should be either the button labeled Y\n     * or the second button on the upper row of controller buttons. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_Z",
    "type" : "int",
    "comment" : " Key code constant: Z Button key.\n     * On a game controller, the Z button should be either the button labeled Z\n     * or the third button on the upper row of controller buttons. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_L1",
    "type" : "int",
    "comment" : " Key code constant: L1 Button key.\n     * On a game controller, the L1 button should be either the button labeled L1 (or L)\n     * or the top left trigger button. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_R1",
    "type" : "int",
    "comment" : " Key code constant: R1 Button key.\n     * On a game controller, the R1 button should be either the button labeled R1 (or R)\n     * or the top right trigger button. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_L2",
    "type" : "int",
    "comment" : " Key code constant: L2 Button key.\n     * On a game controller, the L2 button should be either the button labeled L2\n     * or the bottom left trigger button. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_R2",
    "type" : "int",
    "comment" : " Key code constant: R2 Button key.\n     * On a game controller, the R2 button should be either the button labeled R2\n     * or the bottom right trigger button. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_THUMBL",
    "type" : "int",
    "comment" : " Key code constant: Left Thumb Button key.\n     * On a game controller, the left thumb button indicates that the left (or only)\n     * joystick is pressed. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_THUMBR",
    "type" : "int",
    "comment" : " Key code constant: Right Thumb Button key.\n     * On a game controller, the right thumb button indicates that the right\n     * joystick is pressed. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_START",
    "type" : "int",
    "comment" : " Key code constant: Start Button key.\n     * On a game controller, the button labeled Start. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_SELECT",
    "type" : "int",
    "comment" : " Key code constant: Select Button key.\n     * On a game controller, the button labeled Select. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_MODE",
    "type" : "int",
    "comment" : " Key code constant: Mode Button key.\n     * On a game controller, the button labeled Mode. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ESCAPE",
    "type" : "int",
    "comment" : " Key code constant: Escape key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_FORWARD_DEL",
    "type" : "int",
    "comment" : " Key code constant: Forward Delete key.\n     * Deletes characters ahead of the insertion point, unlike {@link #KEYCODE_DEL}. ",
    "links" : [ "#KEYCODE_DEL" ]
  }, {
    "name" : "KEYCODE_CTRL_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Left Control modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CTRL_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Right Control modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CAPS_LOCK",
    "type" : "int",
    "comment" : " Key code constant: Caps Lock key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SCROLL_LOCK",
    "type" : "int",
    "comment" : " Key code constant: Scroll Lock key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_META_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Left Meta modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_META_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Right Meta modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_FUNCTION",
    "type" : "int",
    "comment" : " Key code constant: Function modifier key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SYSRQ",
    "type" : "int",
    "comment" : " Key code constant: System Request / Print Screen key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BREAK",
    "type" : "int",
    "comment" : " Key code constant: Break / Pause key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MOVE_HOME",
    "type" : "int",
    "comment" : " Key code constant: Home Movement key.\n     * Used for scrolling or moving the cursor around to the start of a line\n     * or to the top of a list. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MOVE_END",
    "type" : "int",
    "comment" : " Key code constant: End Movement key.\n     * Used for scrolling or moving the cursor around to the end of a line\n     * or to the bottom of a list. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_INSERT",
    "type" : "int",
    "comment" : " Key code constant: Insert key.\n     * Toggles insert / overwrite edit mode. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_FORWARD",
    "type" : "int",
    "comment" : " Key code constant: Forward key.\n     * Navigates forward in the history stack.  Complement of {@link #KEYCODE_BACK}. ",
    "links" : [ "#KEYCODE_BACK" ]
  }, {
    "name" : "KEYCODE_MEDIA_PLAY",
    "type" : "int",
    "comment" : " Key code constant: Play media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_PAUSE",
    "type" : "int",
    "comment" : " Key code constant: Pause media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_CLOSE",
    "type" : "int",
    "comment" : " Key code constant: Close media key.\n     * May be used to close a CD tray, for example. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_EJECT",
    "type" : "int",
    "comment" : " Key code constant: Eject media key.\n     * May be used to eject a CD tray, for example. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_RECORD",
    "type" : "int",
    "comment" : " Key code constant: Record media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F1",
    "type" : "int",
    "comment" : " Key code constant: F1 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F2",
    "type" : "int",
    "comment" : " Key code constant: F2 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F3",
    "type" : "int",
    "comment" : " Key code constant: F3 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F4",
    "type" : "int",
    "comment" : " Key code constant: F4 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F5",
    "type" : "int",
    "comment" : " Key code constant: F5 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F6",
    "type" : "int",
    "comment" : " Key code constant: F6 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F7",
    "type" : "int",
    "comment" : " Key code constant: F7 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F8",
    "type" : "int",
    "comment" : " Key code constant: F8 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F9",
    "type" : "int",
    "comment" : " Key code constant: F9 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F10",
    "type" : "int",
    "comment" : " Key code constant: F10 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F11",
    "type" : "int",
    "comment" : " Key code constant: F11 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_F12",
    "type" : "int",
    "comment" : " Key code constant: F12 key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUM_LOCK",
    "type" : "int",
    "comment" : " Key code constant: Num Lock key.\n     * This is the Num Lock key; it is different from {@link #KEYCODE_NUM}.\n     * This key alters the behavior of other keys on the numeric keypad. ",
    "links" : [ "#KEYCODE_NUM" ]
  }, {
    "name" : "KEYCODE_NUMPAD_0",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '0' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_1",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '1' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_2",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '2' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_3",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '3' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_4",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '4' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_5",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '5' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_6",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '6' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_7",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '7' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_8",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '8' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_9",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '9' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_DIVIDE",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '/' key (for division). ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_MULTIPLY",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '*' key (for multiplication). ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_SUBTRACT",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '-' key (for subtraction). ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_ADD",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '+' key (for addition). ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_DOT",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '.' key (for decimals or digit grouping). ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_COMMA",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad ',' key (for decimals or digit grouping). ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_ENTER",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad Enter key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_EQUALS",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '=' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_LEFT_PAREN",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad '(' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NUMPAD_RIGHT_PAREN",
    "type" : "int",
    "comment" : " Key code constant: Numeric keypad ')' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_VOLUME_MUTE",
    "type" : "int",
    "comment" : " Key code constant: Volume Mute key.\n     * Mutes the speaker, unlike {@link #KEYCODE_MUTE}.\n     * This key should normally be implemented as a toggle such that the first press\n     * mutes the speaker and the second press restores the original volume. ",
    "links" : [ "#KEYCODE_MUTE" ]
  }, {
    "name" : "KEYCODE_INFO",
    "type" : "int",
    "comment" : " Key code constant: Info key.\n     * Common on TV remotes to show additional information related to what is\n     * currently being viewed. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CHANNEL_UP",
    "type" : "int",
    "comment" : " Key code constant: Channel up key.\n     * On TV remotes, increments the television channel. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CHANNEL_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Channel down key.\n     * On TV remotes, decrements the television channel. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ZOOM_IN",
    "type" : "int",
    "comment" : " Key code constant: Zoom in key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ZOOM_OUT",
    "type" : "int",
    "comment" : " Key code constant: Zoom out key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV",
    "type" : "int",
    "comment" : " Key code constant: TV key.\n     * On TV remotes, switches to viewing live TV. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_WINDOW",
    "type" : "int",
    "comment" : " Key code constant: Window key.\n     * On TV remotes, toggles picture-in-picture mode or other windowing functions.\n     * On Android Wear devices, triggers a display offset. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_GUIDE",
    "type" : "int",
    "comment" : " Key code constant: Guide key.\n     * On TV remotes, shows a programming guide. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DVR",
    "type" : "int",
    "comment" : " Key code constant: DVR key.\n     * On some TV remotes, switches to a DVR mode for recorded shows. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BOOKMARK",
    "type" : "int",
    "comment" : " Key code constant: Bookmark key.\n     * On some TV remotes, bookmarks content or web pages. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CAPTIONS",
    "type" : "int",
    "comment" : " Key code constant: Toggle captions key.\n     * Switches the mode for closed-captioning text, for example during television shows. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SETTINGS",
    "type" : "int",
    "comment" : " Key code constant: Settings key.\n     * Starts the system settings activity. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_POWER",
    "type" : "int",
    "comment" : " Key code constant: TV power key.\n     * On TV remotes, toggles the power on a television screen. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT",
    "type" : "int",
    "comment" : " Key code constant: TV input key.\n     * On TV remotes, switches the input on a television screen. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STB_POWER",
    "type" : "int",
    "comment" : " Key code constant: Set-top-box power key.\n     * On TV remotes, toggles the power on an external Set-top-box. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STB_INPUT",
    "type" : "int",
    "comment" : " Key code constant: Set-top-box input key.\n     * On TV remotes, switches the input mode on an external Set-top-box. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_AVR_POWER",
    "type" : "int",
    "comment" : " Key code constant: A/V Receiver power key.\n     * On TV remotes, toggles the power on an external A/V Receiver. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_AVR_INPUT",
    "type" : "int",
    "comment" : " Key code constant: A/V Receiver input key.\n     * On TV remotes, switches the input mode on an external A/V Receiver. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PROG_RED",
    "type" : "int",
    "comment" : " Key code constant: Red \"programmable\" key.\n     * On TV remotes, acts as a contextual/programmable key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PROG_GREEN",
    "type" : "int",
    "comment" : " Key code constant: Green \"programmable\" key.\n     * On TV remotes, actsas a contextual/programmable key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PROG_YELLOW",
    "type" : "int",
    "comment" : " Key code constant: Yellow \"programmable\" key.\n     * On TV remotes, acts as a contextual/programmable key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PROG_BLUE",
    "type" : "int",
    "comment" : " Key code constant: Blue \"programmable\" key.\n     * On TV remotes, acts as a contextual/programmable key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_APP_SWITCH",
    "type" : "int",
    "comment" : " Key code constant: App switch key.\n     * Should bring up the application switcher dialog. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_1",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #1.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_2",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #2.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_3",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #3.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_4",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #4.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_5",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #5.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_6",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #6.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_7",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #7.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_8",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #8.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_9",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #9.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_10",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #10.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_11",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #11.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_12",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #12.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_13",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #13.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_14",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #14.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_15",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #15.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BUTTON_16",
    "type" : "int",
    "comment" : " Key code constant: Generic Game Pad Button #16.",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_LANGUAGE_SWITCH",
    "type" : "int",
    "comment" : " Key code constant: Language Switch key.\n     * Toggles the current input language such as switching between English and Japanese on\n     * a QWERTY keyboard.  On some devices, the same function may be performed by\n     * pressing Shift+Spacebar. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MANNER_MODE",
    "type" : "int",
    "comment" : " Key code constant: Manner Mode key.\n     * Toggles silent or vibrate mode on and off to make the device behave more politely\n     * in certain settings such as on a crowded train.  On some devices, the key may only\n     * operate when long-pressed. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_3D_MODE",
    "type" : "int",
    "comment" : " Key code constant: 3D Mode key.\n     * Toggles the display between 2D and 3D mode. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CONTACTS",
    "type" : "int",
    "comment" : " Key code constant: Contacts special function key.\n     * Used to launch an address book application. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CALENDAR",
    "type" : "int",
    "comment" : " Key code constant: Calendar special function key.\n     * Used to launch a calendar application. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MUSIC",
    "type" : "int",
    "comment" : " Key code constant: Music special function key.\n     * Used to launch a music player application. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CALCULATOR",
    "type" : "int",
    "comment" : " Key code constant: Calculator special function key.\n     * Used to launch a calculator application. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ZENKAKU_HANKAKU",
    "type" : "int",
    "comment" : " Key code constant: Japanese full-width / half-width key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_EISU",
    "type" : "int",
    "comment" : " Key code constant: Japanese alphanumeric key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MUHENKAN",
    "type" : "int",
    "comment" : " Key code constant: Japanese non-conversion key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_HENKAN",
    "type" : "int",
    "comment" : " Key code constant: Japanese conversion key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_KATAKANA_HIRAGANA",
    "type" : "int",
    "comment" : " Key code constant: Japanese katakana / hiragana key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_YEN",
    "type" : "int",
    "comment" : " Key code constant: Japanese Yen key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_RO",
    "type" : "int",
    "comment" : " Key code constant: Japanese Ro key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_KANA",
    "type" : "int",
    "comment" : " Key code constant: Japanese kana key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ASSIST",
    "type" : "int",
    "comment" : " Key code constant: Assist key.\n     * Launches the global assist activity.  Not delivered to applications. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BRIGHTNESS_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Brightness Down key.\n     * Adjusts the screen brightness down. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_BRIGHTNESS_UP",
    "type" : "int",
    "comment" : " Key code constant: Brightness Up key.\n     * Adjusts the screen brightness up. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_AUDIO_TRACK",
    "type" : "int",
    "comment" : " Key code constant: Audio Track key.\n     * Switches the audio tracks. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SLEEP",
    "type" : "int",
    "comment" : " Key code constant: Sleep key.\n     * Puts the device to sleep.  Behaves somewhat like {@link #KEYCODE_POWER} but it\n     * has no effect if the device is already asleep. ",
    "links" : [ "#KEYCODE_POWER" ]
  }, {
    "name" : "KEYCODE_WAKEUP",
    "type" : "int",
    "comment" : " Key code constant: Wakeup key.\n     * Wakes up the device.  Behaves somewhat like {@link #KEYCODE_POWER} but it\n     * has no effect if the device is already awake. ",
    "links" : [ "#KEYCODE_POWER" ]
  }, {
    "name" : "KEYCODE_PAIRING",
    "type" : "int",
    "comment" : " Key code constant: Pairing key.\n     * Initiates peripheral pairing mode. Useful for pairing remote control\n     * devices or game controllers, especially if no other input mode is\n     * available. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_TOP_MENU",
    "type" : "int",
    "comment" : " Key code constant: Media Top Menu key.\n     * Goes to the top of media menu. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_11",
    "type" : "int",
    "comment" : " Key code constant: '11' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_12",
    "type" : "int",
    "comment" : " Key code constant: '12' key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_LAST_CHANNEL",
    "type" : "int",
    "comment" : " Key code constant: Last Channel key.\n     * Goes to the last viewed channel. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_DATA_SERVICE",
    "type" : "int",
    "comment" : " Key code constant: TV data service key.\n     * Displays data services like weather, sports. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_VOICE_ASSIST",
    "type" : "int",
    "comment" : " Key code constant: Voice Assist key.\n     * Launches the global voice assist activity. Not delivered to applications. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_RADIO_SERVICE",
    "type" : "int",
    "comment" : " Key code constant: Radio key.\n     * Toggles TV service / Radio service. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_TELETEXT",
    "type" : "int",
    "comment" : " Key code constant: Teletext key.\n     * Displays Teletext service. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_NUMBER_ENTRY",
    "type" : "int",
    "comment" : " Key code constant: Number entry key.\n     * Initiates to enter multi-digit channel nubmber when each digit key is assigned\n     * for selecting separate channel. Corresponds to Number Entry Mode (0x1D) of CEC\n     * User Control Code. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_TERRESTRIAL_ANALOG",
    "type" : "int",
    "comment" : " Key code constant: Analog Terrestrial key.\n     * Switches to analog terrestrial broadcast service. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_TERRESTRIAL_DIGITAL",
    "type" : "int",
    "comment" : " Key code constant: Digital Terrestrial key.\n     * Switches to digital terrestrial broadcast service. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_SATELLITE",
    "type" : "int",
    "comment" : " Key code constant: Satellite key.\n     * Switches to digital satellite broadcast service. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_SATELLITE_BS",
    "type" : "int",
    "comment" : " Key code constant: BS key.\n     * Switches to BS digital satellite broadcasting service available in Japan. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_SATELLITE_CS",
    "type" : "int",
    "comment" : " Key code constant: CS key.\n     * Switches to CS digital satellite broadcasting service available in Japan. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_SATELLITE_SERVICE",
    "type" : "int",
    "comment" : " Key code constant: BS/CS key.\n     * Toggles between BS and CS digital satellite services. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_NETWORK",
    "type" : "int",
    "comment" : " Key code constant: Toggle Network key.\n     * Toggles selecting broacast services. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_ANTENNA_CABLE",
    "type" : "int",
    "comment" : " Key code constant: Antenna/Cable key.\n     * Toggles broadcast input source between antenna and cable. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_HDMI_1",
    "type" : "int",
    "comment" : " Key code constant: HDMI #1 key.\n     * Switches to HDMI input #1. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_HDMI_2",
    "type" : "int",
    "comment" : " Key code constant: HDMI #2 key.\n     * Switches to HDMI input #2. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_HDMI_3",
    "type" : "int",
    "comment" : " Key code constant: HDMI #3 key.\n     * Switches to HDMI input #3. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_HDMI_4",
    "type" : "int",
    "comment" : " Key code constant: HDMI #4 key.\n     * Switches to HDMI input #4. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_COMPOSITE_1",
    "type" : "int",
    "comment" : " Key code constant: Composite #1 key.\n     * Switches to composite video input #1. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_COMPOSITE_2",
    "type" : "int",
    "comment" : " Key code constant: Composite #2 key.\n     * Switches to composite video input #2. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_COMPONENT_1",
    "type" : "int",
    "comment" : " Key code constant: Component #1 key.\n     * Switches to component video input #1. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_COMPONENT_2",
    "type" : "int",
    "comment" : " Key code constant: Component #2 key.\n     * Switches to component video input #2. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_INPUT_VGA_1",
    "type" : "int",
    "comment" : " Key code constant: VGA #1 key.\n     * Switches to VGA (analog RGB) input #1. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_AUDIO_DESCRIPTION",
    "type" : "int",
    "comment" : " Key code constant: Audio description key.\n     * Toggles audio description off / on. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP",
    "type" : "int",
    "comment" : " Key code constant: Audio description mixing volume up key.\n     * Louden audio description volume as compared with normal audio volume. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Audio description mixing volume down key.\n     * Lessen audio description volume as compared with normal audio volume. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_ZOOM_MODE",
    "type" : "int",
    "comment" : " Key code constant: Zoom mode key.\n     * Changes Zoom mode (Normal, Full, Zoom, Wide-zoom, etc.) ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_CONTENTS_MENU",
    "type" : "int",
    "comment" : " Key code constant: Contents menu key.\n     * Goes to the title list. Corresponds to Contents Menu (0x0B) of CEC User Control\n     * Code ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_MEDIA_CONTEXT_MENU",
    "type" : "int",
    "comment" : " Key code constant: Media context menu key.\n     * Goes to the context menu of media contents. Corresponds to Media Context-sensitive\n     * Menu (0x11) of CEC User Control Code. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_TV_TIMER_PROGRAMMING",
    "type" : "int",
    "comment" : " Key code constant: Timer programming key.\n     * Goes to the timer recording menu. Corresponds to Timer Programming (0x54) of\n     * CEC User Control Code. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_HELP",
    "type" : "int",
    "comment" : " Key code constant: Help key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NAVIGATE_PREVIOUS",
    "type" : "int",
    "comment" : " Key code constant: Navigate to previous key.\n     * Goes backward by one item in an ordered collection of items. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NAVIGATE_NEXT",
    "type" : "int",
    "comment" : " Key code constant: Navigate to next key.\n     * Advances to the next item in an ordered collection of items. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NAVIGATE_IN",
    "type" : "int",
    "comment" : " Key code constant: Navigate in key.\n     * Activates the item that currently has focus or expands to the next level of a navigation\n     * hierarchy. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_NAVIGATE_OUT",
    "type" : "int",
    "comment" : " Key code constant: Navigate out key.\n     * Backs out one level of a navigation hierarchy or collapses the item that currently has\n     * focus. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STEM_PRIMARY",
    "type" : "int",
    "comment" : " Key code constant: Primary stem key for Wear\n     * Main power/reset button on watch. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STEM_1",
    "type" : "int",
    "comment" : " Key code constant: Generic stem key 1 for Wear ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STEM_2",
    "type" : "int",
    "comment" : " Key code constant: Generic stem key 2 for Wear ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_STEM_3",
    "type" : "int",
    "comment" : " Key code constant: Generic stem key 3 for Wear ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_UP_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Up-Left ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_DOWN_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Down-Left ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_UP_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Up-Right ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DPAD_DOWN_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Directional Pad Down-Right ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_SKIP_FORWARD",
    "type" : "int",
    "comment" : " Key code constant: Skip forward media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_SKIP_BACKWARD",
    "type" : "int",
    "comment" : " Key code constant: Skip backward media key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_STEP_FORWARD",
    "type" : "int",
    "comment" : " Key code constant: Step forward media key.\n     * Steps media forward, one frame at a time. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MEDIA_STEP_BACKWARD",
    "type" : "int",
    "comment" : " Key code constant: Step backward media key.\n     * Steps media backward, one frame at a time. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SOFT_SLEEP",
    "type" : "int",
    "comment" : " Key code constant: put device to sleep unless a wakelock is held. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CUT",
    "type" : "int",
    "comment" : " Key code constant: Cut key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_COPY",
    "type" : "int",
    "comment" : " Key code constant: Copy key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PASTE",
    "type" : "int",
    "comment" : " Key code constant: Paste key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SYSTEM_NAVIGATION_UP",
    "type" : "int",
    "comment" : " Key code constant: Consumed by the system for navigation up ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SYSTEM_NAVIGATION_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Consumed by the system for navigation down ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SYSTEM_NAVIGATION_LEFT",
    "type" : "int",
    "comment" : " Key code constant: Consumed by the system for navigation left",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SYSTEM_NAVIGATION_RIGHT",
    "type" : "int",
    "comment" : " Key code constant: Consumed by the system for navigation right ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ALL_APPS",
    "type" : "int",
    "comment" : " Key code constant: Show all apps ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_REFRESH",
    "type" : "int",
    "comment" : " Key code constant: Refresh key. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_THUMBS_UP",
    "type" : "int",
    "comment" : " Key code constant: Thumbs up key. Apps can use this to let user upvote content. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_THUMBS_DOWN",
    "type" : "int",
    "comment" : " Key code constant: Thumbs down key. Apps can use this to let user downvote content. ",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_PROFILE_SWITCH",
    "type" : "int",
    "comment" : "\n     * Key code constant: Used to switch current {@link android.accounts.Account} that is\n     * consuming content. May be consumed by system to set account globally.\n     ",
    "links" : [ "android.accounts.Account" ]
  }, {
    "name" : "LAST_KEYCODE",
    "type" : "int",
    "comment" : "\n     * Integer value of the last KEYCODE. Increases as new keycodes are added to KeyEvent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SYMBOLIC_NAMES",
    "type" : "String[]",
    "comment" : " Accordingly there are exactly 32 values in this table.",
    "links" : [ ]
  }, {
    "name" : "LABEL_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_KEYCODE",
    "type" : "int",
    "comment" : "\n     * @deprecated There are now more than MAX_KEYCODE keycodes.\n     * Use {@link #getMaxKeyCode()} instead.\n     ",
    "links" : [ "#getMaxKeyCode()" ]
  }, {
    "name" : "ACTION_DOWN",
    "type" : "int",
    "comment" : "\n     * {@link #getAction} value: the key has been pressed down.\n     ",
    "links" : [ "#getAction" ]
  }, {
    "name" : "ACTION_UP",
    "type" : "int",
    "comment" : "\n     * {@link #getAction} value: the key has been released.\n     ",
    "links" : [ "#getAction" ]
  }, {
    "name" : "ACTION_MULTIPLE",
    "type" : "int",
    "comment" : "\n     * @deprecated No longer used by the input system.\n     * {@link #getAction} value: multiple duplicate key events have\n     * occurred in a row, or a complex string is being delivered.  If the\n     * key code is not {@link #KEYCODE_UNKNOWN} then the\n     * {@link #getRepeatCount()} method returns the number of times\n     * the given key code should be executed.\n     * Otherwise, if the key code is {@link #KEYCODE_UNKNOWN}, then\n     * this is a sequence of characters as returned by {@link #getCharacters}.\n     ",
    "links" : [ "#KEYCODE_UNKNOWN", "#getCharacters", "#getRepeatCount()", "#getAction" ]
  }, {
    "name" : "META_CAP_LOCKED",
    "type" : "int",
    "comment" : "\n     * SHIFT key locked in CAPS mode.\n     * Reserved for use by {@link MetaKeyKeyListener} for a published constant in its API.\n     * @hide\n     ",
    "links" : [ "android.text.method.MetaKeyKeyListener" ]
  }, {
    "name" : "META_ALT_LOCKED",
    "type" : "int",
    "comment" : "\n     * ALT key locked.\n     * Reserved for use by {@link MetaKeyKeyListener} for a published constant in its API.\n     * @hide\n     ",
    "links" : [ "android.text.method.MetaKeyKeyListener" ]
  }, {
    "name" : "META_SYM_LOCKED",
    "type" : "int",
    "comment" : "\n     * SYM key locked.\n     * Reserved for use by {@link MetaKeyKeyListener} for a published constant in its API.\n     * @hide\n     ",
    "links" : [ "android.text.method.MetaKeyKeyListener" ]
  }, {
    "name" : "META_SELECTING",
    "type" : "int",
    "comment" : "\n     * Text is in selection mode.\n     * Reserved for use by {@link MetaKeyKeyListener} for a private unpublished constant\n     * in its API that is currently being retained for legacy reasons.\n     * @hide\n     ",
    "links" : [ "android.text.method.MetaKeyKeyListener" ]
  }, {
    "name" : "META_ALT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether one of the ALT meta keys is pressed.</p>\n     *\n     * @see #isAltPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_ALT_LEFT\n     * @see #KEYCODE_ALT_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_ALT_LEFT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the left ALT meta key is pressed.</p>\n     *\n     * @see #isAltPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_ALT_LEFT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_ALT_RIGHT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the right the ALT meta key is pressed.</p>\n     *\n     * @see #isAltPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_ALT_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SHIFT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether one of the SHIFT meta keys is pressed.</p>\n     *\n     * @see #isShiftPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_SHIFT_LEFT\n     * @see #KEYCODE_SHIFT_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SHIFT_LEFT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the left SHIFT meta key is pressed.</p>\n     *\n     * @see #isShiftPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_SHIFT_LEFT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SHIFT_RIGHT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the right SHIFT meta key is pressed.</p>\n     *\n     * @see #isShiftPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_SHIFT_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SYM_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the SYM meta key is pressed.</p>\n     *\n     * @see #isSymPressed()\n     * @see #getMetaState()\n     ",
    "links" : [ ]
  }, {
    "name" : "META_FUNCTION_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the FUNCTION meta key is pressed.</p>\n     *\n     * @see #isFunctionPressed()\n     * @see #getMetaState()\n     ",
    "links" : [ ]
  }, {
    "name" : "META_CTRL_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether one of the CTRL meta keys is pressed.</p>\n     *\n     * @see #isCtrlPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_CTRL_LEFT\n     * @see #KEYCODE_CTRL_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_CTRL_LEFT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the left CTRL meta key is pressed.</p>\n     *\n     * @see #isCtrlPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_CTRL_LEFT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_CTRL_RIGHT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the right CTRL meta key is pressed.</p>\n     *\n     * @see #isCtrlPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_CTRL_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_META_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether one of the META meta keys is pressed.</p>\n     *\n     * @see #isMetaPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_META_LEFT\n     * @see #KEYCODE_META_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_META_LEFT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the left META meta key is pressed.</p>\n     *\n     * @see #isMetaPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_META_LEFT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_META_RIGHT_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the right META meta key is pressed.</p>\n     *\n     * @see #isMetaPressed()\n     * @see #getMetaState()\n     * @see #KEYCODE_META_RIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "META_CAPS_LOCK_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the CAPS LOCK meta key is on.</p>\n     *\n     * @see #isCapsLockOn()\n     * @see #getMetaState()\n     * @see #KEYCODE_CAPS_LOCK\n     ",
    "links" : [ ]
  }, {
    "name" : "META_NUM_LOCK_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the NUM LOCK meta key is on.</p>\n     *\n     * @see #isNumLockOn()\n     * @see #getMetaState()\n     * @see #KEYCODE_NUM_LOCK\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SCROLL_LOCK_ON",
    "type" : "int",
    "comment" : "\n     * <p>This mask is used to check whether the SCROLL LOCK meta key is on.</p>\n     *\n     * @see #isScrollLockOn()\n     * @see #getMetaState()\n     * @see #KEYCODE_SCROLL_LOCK\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SHIFT_MASK",
    "type" : "int",
    "comment" : "\n     * This mask is a combination of {@link #META_SHIFT_ON}, {@link #META_SHIFT_LEFT_ON}\n     * and {@link #META_SHIFT_RIGHT_ON}.\n     ",
    "links" : [ "#META_SHIFT_LEFT_ON", "#META_SHIFT_RIGHT_ON", "#META_SHIFT_ON" ]
  }, {
    "name" : "META_ALT_MASK",
    "type" : "int",
    "comment" : "\n     * This mask is a combination of {@link #META_ALT_ON}, {@link #META_ALT_LEFT_ON}\n     * and {@link #META_ALT_RIGHT_ON}.\n     ",
    "links" : [ "#META_ALT_LEFT_ON", "#META_ALT_RIGHT_ON", "#META_ALT_ON" ]
  }, {
    "name" : "META_CTRL_MASK",
    "type" : "int",
    "comment" : "\n     * This mask is a combination of {@link #META_CTRL_ON}, {@link #META_CTRL_LEFT_ON}\n     * and {@link #META_CTRL_RIGHT_ON}.\n     ",
    "links" : [ "#META_CTRL_RIGHT_ON", "#META_CTRL_LEFT_ON", "#META_CTRL_ON" ]
  }, {
    "name" : "META_META_MASK",
    "type" : "int",
    "comment" : "\n     * This mask is a combination of {@link #META_META_ON}, {@link #META_META_LEFT_ON}\n     * and {@link #META_META_RIGHT_ON}.\n     ",
    "links" : [ "#META_META_ON", "#META_META_RIGHT_ON", "#META_META_LEFT_ON" ]
  }, {
    "name" : "FLAG_WOKE_HERE",
    "type" : "int",
    "comment" : "\n     * This mask is set if the device woke because of this key event.\n     *\n     * @deprecated This flag will never be set by the system since the system\n     * consumes all wake keys itself.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SOFT_KEYBOARD",
    "type" : "int",
    "comment" : "\n     * This mask is set if the key event was generated by a software keyboard.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEEP_TOUCH_MODE",
    "type" : "int",
    "comment" : "\n     * This mask is set if we don't want the key event to cause us to leave\n     * touch mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_FROM_SYSTEM",
    "type" : "int",
    "comment" : "\n     * This mask is set if an event was known to come from a trusted part\n     * of the system.  That is, the event is known to come from the user,\n     * and could not have been spoofed by a third party component.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_EDITOR_ACTION",
    "type" : "int",
    "comment" : "\n     * This mask is used for compatibility, to identify enter keys that are\n     * coming from an IME whose enter key has been auto-labelled \"next\" or\n     * \"done\".  This allows TextView to dispatch these as normal enter keys\n     * for old applications, but still do the appropriate action when\n     * receiving them.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CANCELED",
    "type" : "int",
    "comment" : "\n     * When associated with up key events, this indicates that the key press\n     * has been canceled.  Typically this is used with virtual touch screen\n     * keys, where the user can slide from the virtual key area on to the\n     * display: in that case, the application will receive a canceled up\n     * event and should not perform the action normally associated with the\n     * key.  Note that for this to work, the application can not perform an\n     * action for a key until it receives an up or the long press timeout has\n     * expired.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_VIRTUAL_HARD_KEY",
    "type" : "int",
    "comment" : "\n     * This key event was generated by a virtual (on-screen) hard key area.\n     * Typically this is an area of the touchscreen, outside of the regular\n     * display, dedicated to \"hardware\" buttons.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LONG_PRESS",
    "type" : "int",
    "comment" : "\n     * This flag is set for the first key repeat that occurs after the\n     * long press timeout.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CANCELED_LONG_PRESS",
    "type" : "int",
    "comment" : "\n     * Set when a key event has {@link #FLAG_CANCELED} set because a long\n     * press action was executed while it was down.\n     ",
    "links" : [ "#FLAG_CANCELED" ]
  }, {
    "name" : "FLAG_TRACKING",
    "type" : "int",
    "comment" : "\n     * Set for {@link #ACTION_UP} when this event's key code is still being\n     * tracked from its initial down.  That is, somebody requested that tracking\n     * started on the key down and a long press has not caused\n     * the tracking to be canceled.\n     ",
    "links" : [ "#ACTION_UP" ]
  }, {
    "name" : "FLAG_FALLBACK",
    "type" : "int",
    "comment" : "\n     * Set when a key event has been synthesized to implement default behavior\n     * for an event that the application did not handle.\n     * Fallback key events are generated by unhandled trackball motions\n     * (to emulate a directional keypad) and by certain unhandled key presses\n     * that are declared in the key map (such as special function numeric keypad\n     * keys when numlock is off).\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PREDISPATCH",
    "type" : "int",
    "comment" : "\n     * Signifies that the key is being predispatched.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_START_TRACKING",
    "type" : "int",
    "comment" : "\n     * Private control to determine when an app is tracking a key sequence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_TAINTED",
    "type" : "int",
    "comment" : "\n     * Private flag that indicates when the system has detected that this key event\n     * may be inconsistent with respect to the sequence of previously delivered key events,\n     * such as when a key up event is sent but the key was not down.\n     *\n     * @hide\n     * @see #isTainted\n     * @see #setTainted\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_RECYCLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerUsed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerTop",
    "type" : "KeyEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNext",
    "type" : "KeyEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHmac",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetaState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRepeatCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacters",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_MODIFIER_MASK",
    "type" : "int",
    "comment" : " Mask of all modifier key meta states.  Specifically excludes locked keys like caps lock.",
    "links" : [ ]
  }, {
    "name" : "META_LOCK_MASK",
    "type" : "int",
    "comment" : " Mask of all lock key meta states.",
    "links" : [ ]
  }, {
    "name" : "META_ALL_MASK",
    "type" : "int",
    "comment" : " Mask of all valid meta states.",
    "links" : [ ]
  }, {
    "name" : "META_SYNTHETIC_MASK",
    "type" : "int",
    "comment" : " historical uses in MetaKeyKeyListener.",
    "links" : [ ]
  }, {
    "name" : "META_INVALID_MODIFIER_MASK",
    "type" : "int",
    "comment" : " These bits are known to be used for purposes other than specifying modifiers.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<KeyEvent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getMaxKeyCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum keycode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDeadChar(int accent, int c)",
    "returnType" : "int",
    "comment" : "\n     * Get the character that is produced by putting accent on the character\n     * c.\n     * For example, getDeadChar('`', 'e') returns &egrave;.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeKeyCodeToString(int keyCode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeKeyCodeFromString(String keyCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeNextId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static KeyEvent obtain()",
    "returnType" : "KeyEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent obtain(int id, long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source, int displayId, @Nullable byte[] hmac, String characters)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Obtains a (potentially recycled) key event. Used by native code to create a Java object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent obtain(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scanCode, int flags, int source, int displayId, String characters)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Obtains a (potentially recycled) key event.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent obtain(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source, String characters)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Obtains a (potentially recycled) key event.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent obtain(KeyEvent other)",
    "returnType" : "KeyEvent",
    "comment" : "\n\n    /**\n     * Obtains a (potentially recycled) copy of another key event.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyEvent copy()",
    "returnType" : "KeyEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycles a key event.\n     * Key events should only be recycled if they are owned by the system since user\n     * code expects them to be essentially immutable, \"tracking\" notwithstanding.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void recycleIfNeededAfterDispatch()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Create a new key event that is the same as the given one, but whose\n     * event time and repeat count are replaced with the given value.\n     *\n     * @param event The existing event to be copied.  This is not modified.\n     * @param eventTime The new event time\n     * (in {@link android.os.SystemClock#uptimeMillis}) of the event.\n     * @param newRepeat The new repeat count of the event.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat, int newFlags)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Create a new key event that is the same as the given one, but whose\n     * event time and repeat count are replaced with the given value.\n     *\n     * @param event The existing event to be copied.  This is not modified.\n     * @param eventTime The new event time\n     * (in {@link android.os.SystemClock#uptimeMillis}) of the event.\n     * @param newRepeat The new repeat count of the event.\n     * @param newFlags New flags for the event, replacing the entire value\n     * in the original event.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public static KeyEvent changeAction(KeyEvent event, int action)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Create a new key event that is the same as the given one, but whose\n     * action is replaced with the given value.\n     *\n     * @param event The existing event to be copied.  This is not modified.\n     * @param action The new action code of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent changeFlags(KeyEvent event, int flags)",
    "returnType" : "KeyEvent",
    "comment" : "\n     * Create a new key event that is the same as the given one, but whose\n     * flags are replaced with the given value.\n     *\n     * @param event The existing event to be copied.  This is not modified.\n     * @param flags The new flags constant.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isTainted()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setTainted(boolean tainted)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isDown()",
    "returnType" : "boolean",
    "comment" : "\n     * Don't use in new code, instead explicitly check\n     * {@link #getAction()}.\n     *\n     * @return If the action is ACTION_DOWN, returns true; else false.\n     *\n     * @deprecated\n     * @hide\n     ",
    "links" : [ "#getAction()" ]
  }, {
    "name" : "public final boolean isSystem()",
    "returnType" : "boolean",
    "comment" : " Is this a system key?  System keys can not be used for menu shortcuts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isWakeKey()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isGamepadButton(int keyCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified keycode is a gamepad button.\n     * @return True if the keycode is a gamepad button, such as {@link #KEYCODE_BUTTON_A}.\n     ",
    "links" : [ "#KEYCODE_BUTTON_A" ]
  }, {
    "name" : "public static final boolean isConfirmKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : " Whether key will, by default, trigger a click on the focused view.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isMediaSessionKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this key will be sent to the\n     * {@link android.media.session.MediaSession.Callback} if not handled.\n     *\n     * @hide\n     ",
    "links" : [ "android.media.session.MediaSession.Callback" ]
  }, {
    "name" : "public static final boolean isSystemKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : " Is this a system key? System keys can not be used for menu shortcuts.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isWakeKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isMetaKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isAltKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getDeviceId()",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public final int getSource()",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public final void setSource(int source)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public final int getDisplayId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setDisplayId(int displayId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getMetaState()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the state of the meta keys.</p>\n     *\n     * @return an integer in which each bit set to 1 represents a pressed\n     *         meta key\n     *\n     * @see #isAltPressed()\n     * @see #isShiftPressed()\n     * @see #isSymPressed()\n     * @see #isCtrlPressed()\n     * @see #isMetaPressed()\n     * @see #isFunctionPressed()\n     * @see #isCapsLockOn()\n     * @see #isNumLockOn()\n     * @see #isScrollLockOn()\n     * @see #META_ALT_ON\n     * @see #META_ALT_LEFT_ON\n     * @see #META_ALT_RIGHT_ON\n     * @see #META_SHIFT_ON\n     * @see #META_SHIFT_LEFT_ON\n     * @see #META_SHIFT_RIGHT_ON\n     * @see #META_SYM_ON\n     * @see #META_FUNCTION_ON\n     * @see #META_CTRL_ON\n     * @see #META_CTRL_LEFT_ON\n     * @see #META_CTRL_RIGHT_ON\n     * @see #META_META_ON\n     * @see #META_META_LEFT_ON\n     * @see #META_META_RIGHT_ON\n     * @see #META_CAPS_LOCK_ON\n     * @see #META_NUM_LOCK_ON\n     * @see #META_SCROLL_LOCK_ON\n     * @see #getModifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the state of the modifier keys.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, this function specifically masks out\n     * {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}.\n     * </p><p>\n     * The value returned consists of the meta state (from {@link #getMetaState})\n     * normalized using {@link #normalizeMetaState(int)} and then masked with\n     * {@link #getModifierMetaStateMask} so that only valid modifier bits are retained.\n     * </p>\n     *\n     * @return An integer in which each bit set to 1 represents a pressed modifier key.\n     * @see #getMetaState\n     ",
    "links" : [ "#getModifierMetaStateMask", "#META_SCROLL_LOCK_ON", "#KEYCODE_CAPS_LOCK", "#KEYCODE_SCROLL_LOCK", "#META_NUM_LOCK_ON", "#normalizeMetaState(int)", "#KEYCODE_NUM_LOCK", "#META_CAPS_LOCK_ON", "#getMetaState" ]
  }, {
    "name" : "public final void setFlags(int newFlags)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the flags of the event.\n     *\n     * @param newFlags New flags for the event, replacing the entire value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags for this key event.\n     *\n     * @see #FLAG_WOKE_HERE\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getModifierMetaStateMask()",
    "returnType" : "int",
    "comment" : "\n     * Gets a mask that includes all valid modifier key meta state bits.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, the mask specifically excludes\n     * {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}.\n     * </p>\n     *\n     * @return The modifier meta state mask which is a combination of\n     * {@link #META_SHIFT_ON}, {@link #META_SHIFT_LEFT_ON}, {@link #META_SHIFT_RIGHT_ON},\n     * {@link #META_ALT_ON}, {@link #META_ALT_LEFT_ON}, {@link #META_ALT_RIGHT_ON},\n     * {@link #META_CTRL_ON}, {@link #META_CTRL_LEFT_ON}, {@link #META_CTRL_RIGHT_ON},\n     * {@link #META_META_ON}, {@link #META_META_LEFT_ON}, {@link #META_META_RIGHT_ON},\n     * {@link #META_SYM_ON}, {@link #META_FUNCTION_ON}.\n     ",
    "links" : [ "#META_META_ON", "#META_SCROLL_LOCK_ON", "#KEYCODE_SCROLL_LOCK", "#META_NUM_LOCK_ON", "#META_META_RIGHT_ON", "#META_CTRL_LEFT_ON", "#META_META_LEFT_ON", "#KEYCODE_NUM_LOCK", "#META_CAPS_LOCK_ON", "#META_FUNCTION_ON", "#META_SHIFT_LEFT_ON", "#META_SYM_ON", "#META_CTRL_RIGHT_ON", "#KEYCODE_CAPS_LOCK", "#META_SHIFT_RIGHT_ON", "#META_CTRL_ON", "#META_ALT_LEFT_ON", "#META_SHIFT_ON", "#META_ALT_RIGHT_ON", "#META_ALT_ON" ]
  }, {
    "name" : "public static boolean isModifierKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this key code is a modifier key.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, this function return false\n     * for those keys.\n     * </p>\n     *\n     * @return True if the key code is one of\n     * {@link #KEYCODE_SHIFT_LEFT} {@link #KEYCODE_SHIFT_RIGHT},\n     * {@link #KEYCODE_ALT_LEFT}, {@link #KEYCODE_ALT_RIGHT},\n     * {@link #KEYCODE_CTRL_LEFT}, {@link #KEYCODE_CTRL_RIGHT},\n     * {@link #KEYCODE_META_LEFT}, or {@link #KEYCODE_META_RIGHT},\n     * {@link #KEYCODE_SYM}, {@link #KEYCODE_NUM}, {@link #KEYCODE_FUNCTION}.\n     ",
    "links" : [ "#KEYCODE_CTRL_RIGHT", "#KEYCODE_SCROLL_LOCK", "#KEYCODE_NUM_LOCK", "#KEYCODE_SHIFT_RIGHT", "#KEYCODE_SYM", "#KEYCODE_NUM", "#KEYCODE_META_RIGHT", "#KEYCODE_ALT_LEFT", "#KEYCODE_CTRL_LEFT", "#KEYCODE_META_LEFT", "#KEYCODE_CAPS_LOCK", "#KEYCODE_ALT_RIGHT", "#KEYCODE_FUNCTION", "#KEYCODE_SHIFT_LEFT" ]
  }, {
    "name" : "public static int normalizeMetaState(int metaState)",
    "returnType" : "int",
    "comment" : "\n     * Normalizes the specified meta state.\n     * <p>\n     * The meta state is normalized such that if either the left or right modifier meta state\n     * bits are set then the result will also include the universal bit for that modifier.\n     * </p><p>\n     * If the specified meta state contains {@link #META_ALT_LEFT_ON} then\n     * the result will also contain {@link #META_ALT_ON} in addition to {@link #META_ALT_LEFT_ON}\n     * and the other bits that were specified in the input.  The same is process is\n     * performed for shift, control and meta.\n     * </p><p>\n     * If the specified meta state contains synthetic meta states defined by\n     * {@link MetaKeyKeyListener}, then those states are translated here and the original\n     * synthetic meta states are removed from the result.\n     * {@link MetaKeyKeyListener#META_CAP_LOCKED} is translated to {@link #META_CAPS_LOCK_ON}.\n     * {@link MetaKeyKeyListener#META_ALT_LOCKED} is translated to {@link #META_ALT_ON}.\n     * {@link MetaKeyKeyListener#META_SYM_LOCKED} is translated to {@link #META_SYM_ON}.\n     * </p><p>\n     * Undefined meta state bits are removed.\n     * </p>\n     *\n     * @param metaState The meta state.\n     * @return The normalized meta state.\n     ",
    "links" : [ "android.text.method.MetaKeyKeyListener#META_SYM_LOCKED", "#META_SYM_ON", "#META_ALT_LEFT_ON", "android.text.method.MetaKeyKeyListener#META_ALT_LOCKED", "#META_CAPS_LOCK_ON", "android.text.method.MetaKeyKeyListener", "#META_ALT_ON", "android.text.method.MetaKeyKeyListener#META_CAP_LOCKED" ]
  }, {
    "name" : "public static boolean metaStateHasNoModifiers(int metaState)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if no modifiers keys are pressed according to the specified meta state.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, this function ignores\n     * {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}.\n     * </p><p>\n     * The meta state is normalized prior to comparison using {@link #normalizeMetaState(int)}.\n     * </p>\n     *\n     * @param metaState The meta state to consider.\n     * @return True if no modifier keys are pressed.\n     * @see #hasNoModifiers()\n     ",
    "links" : [ "#META_SCROLL_LOCK_ON", "#KEYCODE_CAPS_LOCK", "#KEYCODE_SCROLL_LOCK", "#META_NUM_LOCK_ON", "#normalizeMetaState(int)", "#KEYCODE_NUM_LOCK", "#META_CAPS_LOCK_ON" ]
  }, {
    "name" : "public static boolean metaStateHasModifiers(int metaState, int modifiers)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if only the specified modifier keys are pressed according to\n     * the specified meta state.  Returns false if a different combination of modifier\n     * keys are pressed.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, this function ignores\n     * {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}.\n     * </p><p>\n     * If the specified modifier mask includes directional modifiers, such as\n     * {@link #META_SHIFT_LEFT_ON}, then this method ensures that the\n     * modifier is pressed on that side.\n     * If the specified modifier mask includes non-directional modifiers, such as\n     * {@link #META_SHIFT_ON}, then this method ensures that the modifier\n     * is pressed on either side.\n     * If the specified modifier mask includes both directional and non-directional modifiers\n     * for the same type of key, such as {@link #META_SHIFT_ON} and {@link #META_SHIFT_LEFT_ON},\n     * then this method throws an illegal argument exception.\n     * </p>\n     *\n     * @param metaState The meta state to consider.\n     * @param modifiers The meta state of the modifier keys to check.  May be a combination\n     * of modifier meta states as defined by {@link #getModifierMetaStateMask()}.  May be 0 to\n     * ensure that no modifier keys are pressed.\n     * @return True if only the specified modifier keys are pressed.\n     * @throws IllegalArgumentException if the modifiers parameter contains invalid modifiers\n     * @see #hasModifiers\n     ",
    "links" : [ "#META_SHIFT_LEFT_ON", "#META_SCROLL_LOCK_ON", "#KEYCODE_CAPS_LOCK", "#KEYCODE_SCROLL_LOCK", "#getModifierMetaStateMask()", "#META_NUM_LOCK_ON", "#KEYCODE_NUM_LOCK", "#META_CAPS_LOCK_ON", "#META_SHIFT_ON" ]
  }, {
    "name" : "private static int metaStateFilterDirectionalModifiers(int metaState, int modifiers, int basic, int left, int right)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasNoModifiers()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if no modifier keys are pressed.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, this function ignores\n     * {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}.\n     * </p><p>\n     * The meta state is normalized prior to comparison using {@link #normalizeMetaState(int)}.\n     * </p>\n     *\n     * @return True if no modifier keys are pressed.\n     * @see #metaStateHasNoModifiers\n     ",
    "links" : [ "#META_SCROLL_LOCK_ON", "#KEYCODE_CAPS_LOCK", "#KEYCODE_SCROLL_LOCK", "#META_NUM_LOCK_ON", "#normalizeMetaState(int)", "#KEYCODE_NUM_LOCK", "#META_CAPS_LOCK_ON" ]
  }, {
    "name" : "public final boolean hasModifiers(int modifiers)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if only the specified modifiers keys are pressed.\n     * Returns false if a different combination of modifier keys are pressed.\n     * <p>\n     * For the purposes of this function, {@link #KEYCODE_CAPS_LOCK},\n     * {@link #KEYCODE_SCROLL_LOCK}, and {@link #KEYCODE_NUM_LOCK} are\n     * not considered modifier keys.  Consequently, this function ignores\n     * {@link #META_CAPS_LOCK_ON}, {@link #META_SCROLL_LOCK_ON} and {@link #META_NUM_LOCK_ON}.\n     * </p><p>\n     * If the specified modifier mask includes directional modifiers, such as\n     * {@link #META_SHIFT_LEFT_ON}, then this method ensures that the\n     * modifier is pressed on that side.\n     * If the specified modifier mask includes non-directional modifiers, such as\n     * {@link #META_SHIFT_ON}, then this method ensures that the modifier\n     * is pressed on either side.\n     * If the specified modifier mask includes both directional and non-directional modifiers\n     * for the same type of key, such as {@link #META_SHIFT_ON} and {@link #META_SHIFT_LEFT_ON},\n     * then this method throws an illegal argument exception.\n     * </p>\n     *\n     * @param modifiers The meta state of the modifier keys to check.  May be a combination\n     * of modifier meta states as defined by {@link #getModifierMetaStateMask()}.  May be 0 to\n     * ensure that no modifier keys are pressed.\n     * @return True if only the specified modifier keys are pressed.\n     * @throws IllegalArgumentException if the modifiers parameter contains invalid modifiers\n     * @see #metaStateHasModifiers\n     ",
    "links" : [ "#META_SHIFT_LEFT_ON", "#META_SCROLL_LOCK_ON", "#KEYCODE_CAPS_LOCK", "#KEYCODE_SCROLL_LOCK", "#getModifierMetaStateMask()", "#META_NUM_LOCK_ON", "#KEYCODE_NUM_LOCK", "#META_CAPS_LOCK_ON", "#META_SHIFT_ON" ]
  }, {
    "name" : "public final boolean isAltPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the pressed state of the ALT meta key.</p>\n     *\n     * @return true if the ALT key is pressed, false otherwise\n     *\n     * @see #KEYCODE_ALT_LEFT\n     * @see #KEYCODE_ALT_RIGHT\n     * @see #META_ALT_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isShiftPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the pressed state of the SHIFT meta key.</p>\n     *\n     * @return true if the SHIFT key is pressed, false otherwise\n     *\n     * @see #KEYCODE_SHIFT_LEFT\n     * @see #KEYCODE_SHIFT_RIGHT\n     * @see #META_SHIFT_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isSymPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the pressed state of the SYM meta key.</p>\n     *\n     * @return true if the SYM key is pressed, false otherwise\n     *\n     * @see #KEYCODE_SYM\n     * @see #META_SYM_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isCtrlPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the pressed state of the CTRL meta key.</p>\n     *\n     * @return true if the CTRL key is pressed, false otherwise\n     *\n     * @see #KEYCODE_CTRL_LEFT\n     * @see #KEYCODE_CTRL_RIGHT\n     * @see #META_CTRL_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isMetaPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the pressed state of the META meta key.</p>\n     *\n     * @return true if the META key is pressed, false otherwise\n     *\n     * @see #KEYCODE_META_LEFT\n     * @see #KEYCODE_META_RIGHT\n     * @see #META_META_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFunctionPressed()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the pressed state of the FUNCTION meta key.</p>\n     *\n     * @return true if the FUNCTION key is pressed, false otherwise\n     *\n     * @see #KEYCODE_FUNCTION\n     * @see #META_FUNCTION_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isCapsLockOn()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the locked state of the CAPS LOCK meta key.</p>\n     *\n     * @return true if the CAPS LOCK key is on, false otherwise\n     *\n     * @see #KEYCODE_CAPS_LOCK\n     * @see #META_CAPS_LOCK_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isNumLockOn()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the locked state of the NUM LOCK meta key.</p>\n     *\n     * @return true if the NUM LOCK key is on, false otherwise\n     *\n     * @see #KEYCODE_NUM_LOCK\n     * @see #META_NUM_LOCK_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isScrollLockOn()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the locked state of the SCROLL LOCK meta key.</p>\n     *\n     * @return true if the SCROLL LOCK key is on, false otherwise\n     *\n     * @see #KEYCODE_SCROLL_LOCK\n     * @see #META_SCROLL_LOCK_ON\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getAction()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the action of this key event.  May be either\n     * {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link #ACTION_MULTIPLE}.\n     *\n     * @return The event action: ACTION_DOWN, ACTION_UP, or ACTION_MULTIPLE.\n     ",
    "links" : [ "#ACTION_UP", "#ACTION_DOWN", "#ACTION_MULTIPLE" ]
  }, {
    "name" : "public final boolean isCanceled()",
    "returnType" : "boolean",
    "comment" : "\n     * For {@link #ACTION_UP} events, indicates that the event has been\n     * canceled as per {@link #FLAG_CANCELED}.\n     ",
    "links" : [ "#ACTION_UP", "#FLAG_CANCELED" ]
  }, {
    "name" : "public final void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Set {@link #FLAG_CANCELED} flag for the key event.\n     *\n     * @hide\n     ",
    "links" : [ "#FLAG_CANCELED" ]
  }, {
    "name" : "public final void startTracking()",
    "returnType" : "void",
    "comment" : "\n     * Call this during {@link Callback#onKeyDown} to have the system track\n     * the key through its final up (possibly including a long press).  Note\n     * that only one key can be tracked at a time -- if another key down\n     * event is received while a previous one is being tracked, tracking is\n     * stopped on the previous event.\n     ",
    "links" : [ "#onKeyDown" ]
  }, {
    "name" : "public final boolean isTracking()",
    "returnType" : "boolean",
    "comment" : "\n     * For {@link #ACTION_UP} events, indicates that the event is still being\n     * tracked from its initial down event as per\n     * {@link #FLAG_TRACKING}.\n     ",
    "links" : [ "#ACTION_UP", "#FLAG_TRACKING" ]
  }, {
    "name" : "public final boolean isLongPress()",
    "returnType" : "boolean",
    "comment" : "\n     * For {@link #ACTION_DOWN} events, indicates that the event has been\n     * canceled as per {@link #FLAG_LONG_PRESS}.\n     ",
    "links" : [ "#ACTION_DOWN", "#FLAG_LONG_PRESS" ]
  }, {
    "name" : "public final int getKeyCode()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the key code of the key event.  This is the physical key that\n     * was pressed, <em>not</em> the Unicode character.\n     *\n     * @return The key code of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getCharacters()",
    "returnType" : "String",
    "comment" : "\n     * For the special case of a {@link #ACTION_MULTIPLE} event with key\n     * code of {@link #KEYCODE_UNKNOWN}, this is a raw string of characters\n     * associated with the event.  In all other cases it is null.\n     *\n     * @return Returns a String of 1 or more characters associated with\n     * the event.\n     *\n     * @deprecated no longer used by the input system.\n     ",
    "links" : [ "#KEYCODE_UNKNOWN", "#ACTION_MULTIPLE" ]
  }, {
    "name" : "public final int getScanCode()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the hardware key id of this key event.  These values are not\n     * reliable and vary from device to device.\n     *\n     * {@more}\n     * Mostly this is here for debugging purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getRepeatCount()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the repeat count of the event.  For key down events,\n     * this is the number of times the key has repeated with the first\n     * down starting at 0 and counting up from there.  For key up events,\n     * this is always equal to zero. For multiple key events,\n     * this is the number of down/up pairs that have occurred.\n     *\n     * @return The number of times the key has repeated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setTime(long downTime, long eventTime)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the down time and the event time of the event.\n     *\n     * @param downTime The new down time (in {@link android.os.SystemClock#uptimeMillis}) of the\n     *                 event.\n     * @param eventTime The new event time (in {@link android.os.SystemClock#uptimeMillis}) of the\n     *                  event.\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final long getDownTime()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time of the most recent key down event,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.  If this\n     * is a down event, this will be the same as {@link #getEventTime()}.\n     * Note that when chording keys, this value is the down time of the\n     * most recently pressed key, which may <em>not</em> be the same physical\n     * key of this event.\n     *\n     * @return Returns the most recent key down time, in the\n     * {@link android.os.SystemClock#uptimeMillis} time base\n     ",
    "links" : [ "#getEventTime()", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final long getEventTime()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     *\n     * @return Returns the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final long getEventTimeNano()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond (instead of millisecond) precision.\n     * <p>\n     * The value is in nanosecond precision but it may not have nanosecond accuracy.\n     * </p>\n     *\n     * @return Returns the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond (instead of millisecond) precision.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final int getKeyboardDevice()",
    "returnType" : "int",
    "comment" : "\n     * Renamed to {@link #getDeviceId}.\n     *\n     * @hide\n     * @deprecated use {@link #getDeviceId()} instead.\n     ",
    "links" : [ "#getDeviceId", "#getDeviceId()" ]
  }, {
    "name" : "public final KeyCharacterMap getKeyCharacterMap()",
    "returnType" : "KeyCharacterMap",
    "comment" : "\n     * Gets the {@link KeyCharacterMap} associated with the keyboard device.\n     *\n     * @return The associated key character map.\n     * @throws {@link KeyCharacterMap.UnavailableException} if the key character map\n     * could not be loaded because it was malformed or the default key character map\n     * is missing from the system.\n     *\n     * @see KeyCharacterMap#load\n     ",
    "links" : [ "android.view.KeyCharacterMap", "KeyCharacterMap.UnavailableException" ]
  }, {
    "name" : "public char getDisplayLabel()",
    "returnType" : "char",
    "comment" : "\n     * Gets the primary character for this key.\n     * In other words, the label that is physically printed on it.\n     *\n     * @return The display label character, or 0 if none (eg. for non-printing keys).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUnicodeChar()",
    "returnType" : "int",
    "comment" : "\n     * Gets the Unicode character generated by the specified key and meta\n     * key state combination.\n     * <p>\n     * Returns the Unicode character that the specified key would produce\n     * when the specified meta bits (see {@link MetaKeyKeyListener})\n     * were active.\n     * </p><p>\n     * Returns 0 if the key is not one that is used to type Unicode\n     * characters.\n     * </p><p>\n     * If the return value has bit {@link KeyCharacterMap#COMBINING_ACCENT} set, the\n     * key is a \"dead key\" that should be combined with another to\n     * actually produce a character -- see {@link KeyCharacterMap#getDeadChar} --\n     * after masking with {@link KeyCharacterMap#COMBINING_ACCENT_MASK}.\n     * </p>\n     *\n     * @return The associated character or combining accent, or 0 if none.\n     ",
    "links" : [ "android.view.KeyCharacterMap#COMBINING_ACCENT_MASK", "android.view.KeyCharacterMap#COMBINING_ACCENT", "android.view.KeyCharacterMap#getDeadChar", "android.text.method.MetaKeyKeyListener" ]
  }, {
    "name" : "public int getUnicodeChar(int metaState)",
    "returnType" : "int",
    "comment" : "\n     * Gets the Unicode character generated by the specified key and meta\n     * key state combination.\n     * <p>\n     * Returns the Unicode character that the specified key would produce\n     * when the specified meta bits (see {@link MetaKeyKeyListener})\n     * were active.\n     * </p><p>\n     * Returns 0 if the key is not one that is used to type Unicode\n     * characters.\n     * </p><p>\n     * If the return value has bit {@link KeyCharacterMap#COMBINING_ACCENT} set, the\n     * key is a \"dead key\" that should be combined with another to\n     * actually produce a character -- see {@link KeyCharacterMap#getDeadChar} --\n     * after masking with {@link KeyCharacterMap#COMBINING_ACCENT_MASK}.\n     * </p>\n     *\n     * @param metaState The meta key modifier state.\n     * @return The associated character or combining accent, or 0 if none.\n     ",
    "links" : [ "android.view.KeyCharacterMap#COMBINING_ACCENT_MASK", "android.view.KeyCharacterMap#COMBINING_ACCENT", "android.view.KeyCharacterMap#getDeadChar", "android.text.method.MetaKeyKeyListener" ]
  }, {
    "name" : "public boolean getKeyData(KeyData results)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the character conversion data for a given key code.\n     *\n     * @param results A {@link KeyCharacterMap.KeyData} instance that will be\n     * filled with the results.\n     * @return True if the key was mapped.  If the key was not mapped, results is not modified.\n     *\n     * @deprecated instead use {@link #getDisplayLabel()},\n     * {@link #getNumber()} or {@link #getUnicodeChar(int)}.\n     ",
    "links" : [ "#getUnicodeChar(int)", "KeyCharacterMap.KeyData", "#getDisplayLabel()", "#getNumber()" ]
  }, {
    "name" : "public char getMatch(char[] chars)",
    "returnType" : "char",
    "comment" : "\n     * Gets the first character in the character array that can be generated\n     * by the specified key code.\n     * <p>\n     * This is a convenience function that returns the same value as\n     * {@link #getMatch(char[],int) getMatch(chars, 0)}.\n     * </p>\n     *\n     * @param chars The array of matching characters to consider.\n     * @return The matching associated character, or 0 if none.\n     ",
    "links" : [ "#getMatch(char" ]
  }, {
    "name" : "public char getMatch(char[] chars, int metaState)",
    "returnType" : "char",
    "comment" : "\n     * Gets the first character in the character array that can be generated\n     * by the specified key code.  If there are multiple choices, prefers\n     * the one that would be generated with the specified meta key modifier state.\n     *\n     * @param chars The array of matching characters to consider.\n     * @param metaState The preferred meta key modifier state.\n     * @return The matching associated character, or 0 if none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getNumber()",
    "returnType" : "char",
    "comment" : "\n     * Gets the number or symbol associated with the key.\n     * <p>\n     * The character value is returned, not the numeric value.\n     * If the key is not a number, but is a symbol, the symbol is retuned.\n     * </p><p>\n     * This method is intended to to support dial pads and other numeric or\n     * symbolic entry on keyboards where certain keys serve dual function\n     * as alphabetic and symbolic keys.  This method returns the number\n     * or symbol associated with the key independent of whether the user\n     * has pressed the required modifier.\n     * </p><p>\n     * For example, on one particular keyboard the keys on the top QWERTY row generate\n     * numbers when ALT is pressed such that ALT-Q maps to '1'.  So for that keyboard\n     * when {@link #getNumber} is called with {@link KeyEvent#KEYCODE_Q} it returns '1'\n     * so that the user can type numbers without pressing ALT when it makes sense.\n     * </p>\n     *\n     * @return The associated numeric or symbolic character, or 0 if none.\n     ",
    "links" : [ "android.view.KeyEvent#KEYCODE_Q", "#getNumber" ]
  }, {
    "name" : "public boolean isPrintingKey()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this key produces a glyph.\n     *\n     * @return True if the key is a printing key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean dispatch(Callback receiver)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #dispatch(Callback, DispatcherState, Object)} instead.\n     ",
    "links" : [ "#dispatch(Callback" ]
  }, {
    "name" : "public final boolean dispatch(Callback receiver, DispatcherState state, Object target)",
    "returnType" : "boolean",
    "comment" : "\n     * Deliver this key event to a {@link Callback} interface.  If this is\n     * an ACTION_MULTIPLE event and it is not handled, then an attempt will\n     * be made to deliver a single normal event.\n     *\n     * @param receiver The Callback that will be given the event.\n     * @param state State information retained across events.\n     * @param target The target of the dispatch, for use in tracking.\n     *\n     * @return The return value from the Callback method that was called.\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String actionToString(int action)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified action\n     * such as \"ACTION_DOWN\", or an equivalent numeric constant such as \"35\" if unknown.\n     *\n     * @param action The action.\n     * @return The symbolic name of the specified action.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String keyCodeToString(int keyCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified keycode\n     * such as \"KEYCODE_A\", \"KEYCODE_DPAD_UP\", or an equivalent numeric constant\n     * such as \"1001\" if unknown.\n     *\n     * This function is intended to be used mostly for debugging, logging, and testing. It is not\n     * locale-specific and is not intended to be used in a user-facing manner.\n     *\n     * @param keyCode The key code.\n     * @return The symbolic name of the specified keycode.\n     *\n     * @see KeyCharacterMap#getDisplayLabel\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int keyCodeFromString(@NonNull String symbolicName)",
    "returnType" : "int",
    "comment" : "\n     * Gets a keycode by its symbolic name such as \"KEYCODE_A\" or an equivalent\n     * numeric constant such as \"29\". For symbolic names,\n     * starting in {@link android.os.Build.VERSION_CODES#Q} the prefix \"KEYCODE_\" is optional.\n     *\n     * @param symbolicName The symbolic name of the keycode.\n     * @return The keycode or {@link #KEYCODE_UNKNOWN} if not found.\n     * @see #keyCodeToString(int)\n     ",
    "links" : [ "#KEYCODE_UNKNOWN", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "private static boolean keyCodeIsValid(int keyCode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String metaStateToString(int metaState)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified combined meta\n     * key modifier state flags such as \"0\", \"META_SHIFT_ON\",\n     * \"META_ALT_ON|META_SHIFT_ON\" or an equivalent numeric constant such as \"0x10000000\"\n     * if unknown.\n     *\n     * @param metaState The meta state.\n     * @return The symbolic name of the specified combined meta state flags.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyEvent createFromParcelBody(Parcel in)",
    "returnType" : "KeyEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "KEYCODE_UNKNOWN", "KEYCODE_SOFT_LEFT", "KEYCODE_SOFT_RIGHT", "KEYCODE_HOME", "KEYCODE_BACK", "KEYCODE_CALL", "KEYCODE_ENDCALL", "KEYCODE_0", "KEYCODE_1", "KEYCODE_2", "KEYCODE_3", "KEYCODE_4", "KEYCODE_5", "KEYCODE_6", "KEYCODE_7", "KEYCODE_8", "KEYCODE_9", "KEYCODE_STAR", "KEYCODE_POUND", "KEYCODE_DPAD_UP", "KEYCODE_DPAD_DOWN", "KEYCODE_DPAD_LEFT", "KEYCODE_DPAD_RIGHT", "KEYCODE_DPAD_CENTER", "KEYCODE_VOLUME_UP", "KEYCODE_VOLUME_DOWN", "KEYCODE_POWER", "KEYCODE_CAMERA", "KEYCODE_CLEAR", "KEYCODE_A", "KEYCODE_B", "KEYCODE_C", "KEYCODE_D", "KEYCODE_E", "KEYCODE_F", "KEYCODE_G", "KEYCODE_H", "KEYCODE_I", "KEYCODE_J", "KEYCODE_K", "KEYCODE_L", "KEYCODE_M", "KEYCODE_N", "KEYCODE_O", "KEYCODE_P", "KEYCODE_Q", "KEYCODE_R", "KEYCODE_S", "KEYCODE_T", "KEYCODE_U", "KEYCODE_V", "KEYCODE_W", "KEYCODE_X", "KEYCODE_Y", "KEYCODE_Z", "KEYCODE_COMMA", "KEYCODE_PERIOD", "KEYCODE_ALT_LEFT", "KEYCODE_ALT_RIGHT", "KEYCODE_SHIFT_LEFT", "KEYCODE_SHIFT_RIGHT", "KEYCODE_TAB", "KEYCODE_SPACE", "KEYCODE_SYM", "KEYCODE_EXPLORER", "KEYCODE_ENVELOPE", "KEYCODE_ENTER", "KEYCODE_DEL", "KEYCODE_GRAVE", "KEYCODE_MINUS", "KEYCODE_EQUALS", "KEYCODE_LEFT_BRACKET", "KEYCODE_RIGHT_BRACKET", "KEYCODE_BACKSLASH", "KEYCODE_SEMICOLON", "KEYCODE_APOSTROPHE", "KEYCODE_SLASH", "KEYCODE_AT", "KEYCODE_NUM", "KEYCODE_HEADSETHOOK", "KEYCODE_FOCUS", "KEYCODE_PLUS", "KEYCODE_MENU", "KEYCODE_NOTIFICATION", "KEYCODE_SEARCH", "KEYCODE_MEDIA_PLAY_PAUSE", "KEYCODE_MEDIA_STOP", "KEYCODE_MEDIA_NEXT", "KEYCODE_MEDIA_PREVIOUS", "KEYCODE_MEDIA_REWIND", "KEYCODE_MEDIA_FAST_FORWARD", "KEYCODE_MUTE", "KEYCODE_PAGE_UP", "KEYCODE_PAGE_DOWN", "KEYCODE_PICTSYMBOLS", "KEYCODE_SWITCH_CHARSET", "KEYCODE_BUTTON_A", "KEYCODE_BUTTON_B", "KEYCODE_BUTTON_C", "KEYCODE_BUTTON_X", "KEYCODE_BUTTON_Y", "KEYCODE_BUTTON_Z", "KEYCODE_BUTTON_L1", "KEYCODE_BUTTON_R1", "KEYCODE_BUTTON_L2", "KEYCODE_BUTTON_R2", "KEYCODE_BUTTON_THUMBL", "KEYCODE_BUTTON_THUMBR", "KEYCODE_BUTTON_START", "KEYCODE_BUTTON_SELECT", "KEYCODE_BUTTON_MODE", "KEYCODE_ESCAPE", "KEYCODE_FORWARD_DEL", "KEYCODE_CTRL_LEFT", "KEYCODE_CTRL_RIGHT", "KEYCODE_CAPS_LOCK", "KEYCODE_SCROLL_LOCK", "KEYCODE_META_LEFT", "KEYCODE_META_RIGHT", "KEYCODE_FUNCTION", "KEYCODE_SYSRQ", "KEYCODE_BREAK", "KEYCODE_MOVE_HOME", "KEYCODE_MOVE_END", "KEYCODE_INSERT", "KEYCODE_FORWARD", "KEYCODE_MEDIA_PLAY", "KEYCODE_MEDIA_PAUSE", "KEYCODE_MEDIA_CLOSE", "KEYCODE_MEDIA_EJECT", "KEYCODE_MEDIA_RECORD", "KEYCODE_F1", "KEYCODE_F2", "KEYCODE_F3", "KEYCODE_F4", "KEYCODE_F5", "KEYCODE_F6", "KEYCODE_F7", "KEYCODE_F8", "KEYCODE_F9", "KEYCODE_F10", "KEYCODE_F11", "KEYCODE_F12", "KEYCODE_NUM_LOCK", "KEYCODE_NUMPAD_0", "KEYCODE_NUMPAD_1", "KEYCODE_NUMPAD_2", "KEYCODE_NUMPAD_3", "KEYCODE_NUMPAD_4", "KEYCODE_NUMPAD_5", "KEYCODE_NUMPAD_6", "KEYCODE_NUMPAD_7", "KEYCODE_NUMPAD_8", "KEYCODE_NUMPAD_9", "KEYCODE_NUMPAD_DIVIDE", "KEYCODE_NUMPAD_MULTIPLY", "KEYCODE_NUMPAD_SUBTRACT", "KEYCODE_NUMPAD_ADD", "KEYCODE_NUMPAD_DOT", "KEYCODE_NUMPAD_COMMA", "KEYCODE_NUMPAD_ENTER", "KEYCODE_NUMPAD_EQUALS", "KEYCODE_NUMPAD_LEFT_PAREN", "KEYCODE_NUMPAD_RIGHT_PAREN", "KEYCODE_VOLUME_MUTE", "KEYCODE_INFO", "KEYCODE_CHANNEL_UP", "KEYCODE_CHANNEL_DOWN", "KEYCODE_ZOOM_IN", "KEYCODE_ZOOM_OUT", "KEYCODE_TV", "KEYCODE_WINDOW", "KEYCODE_GUIDE", "KEYCODE_DVR", "KEYCODE_BOOKMARK", "KEYCODE_CAPTIONS", "KEYCODE_SETTINGS", "KEYCODE_TV_POWER", "KEYCODE_TV_INPUT", "KEYCODE_STB_POWER", "KEYCODE_STB_INPUT", "KEYCODE_AVR_POWER", "KEYCODE_AVR_INPUT", "KEYCODE_PROG_RED", "KEYCODE_PROG_GREEN", "KEYCODE_PROG_YELLOW", "KEYCODE_PROG_BLUE", "KEYCODE_APP_SWITCH", "KEYCODE_BUTTON_1", "KEYCODE_BUTTON_2", "KEYCODE_BUTTON_3", "KEYCODE_BUTTON_4", "KEYCODE_BUTTON_5", "KEYCODE_BUTTON_6", "KEYCODE_BUTTON_7", "KEYCODE_BUTTON_8", "KEYCODE_BUTTON_9", "KEYCODE_BUTTON_10", "KEYCODE_BUTTON_11", "KEYCODE_BUTTON_12", "KEYCODE_BUTTON_13", "KEYCODE_BUTTON_14", "KEYCODE_BUTTON_15", "KEYCODE_BUTTON_16", "KEYCODE_LANGUAGE_SWITCH", "KEYCODE_MANNER_MODE", "KEYCODE_3D_MODE", "KEYCODE_CONTACTS", "KEYCODE_CALENDAR", "KEYCODE_MUSIC", "KEYCODE_CALCULATOR", "KEYCODE_ZENKAKU_HANKAKU", "KEYCODE_EISU", "KEYCODE_MUHENKAN", "KEYCODE_HENKAN", "KEYCODE_KATAKANA_HIRAGANA", "KEYCODE_YEN", "KEYCODE_RO", "KEYCODE_KANA", "KEYCODE_ASSIST", "KEYCODE_BRIGHTNESS_DOWN", "KEYCODE_BRIGHTNESS_UP", "KEYCODE_MEDIA_AUDIO_TRACK", "KEYCODE_SLEEP", "KEYCODE_WAKEUP", "KEYCODE_PAIRING", "KEYCODE_MEDIA_TOP_MENU", "KEYCODE_11", "KEYCODE_12", "KEYCODE_LAST_CHANNEL", "KEYCODE_TV_DATA_SERVICE", "KEYCODE_VOICE_ASSIST", "KEYCODE_TV_RADIO_SERVICE", "KEYCODE_TV_TELETEXT", "KEYCODE_TV_NUMBER_ENTRY", "KEYCODE_TV_TERRESTRIAL_ANALOG", "KEYCODE_TV_TERRESTRIAL_DIGITAL", "KEYCODE_TV_SATELLITE", "KEYCODE_TV_SATELLITE_BS", "KEYCODE_TV_SATELLITE_CS", "KEYCODE_TV_SATELLITE_SERVICE", "KEYCODE_TV_NETWORK", "KEYCODE_TV_ANTENNA_CABLE", "KEYCODE_TV_INPUT_HDMI_1", "KEYCODE_TV_INPUT_HDMI_2", "KEYCODE_TV_INPUT_HDMI_3", "KEYCODE_TV_INPUT_HDMI_4", "KEYCODE_TV_INPUT_COMPOSITE_1", "KEYCODE_TV_INPUT_COMPOSITE_2", "KEYCODE_TV_INPUT_COMPONENT_1", "KEYCODE_TV_INPUT_COMPONENT_2", "KEYCODE_TV_INPUT_VGA_1", "KEYCODE_TV_AUDIO_DESCRIPTION", "KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP", "KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN", "KEYCODE_TV_ZOOM_MODE", "KEYCODE_TV_CONTENTS_MENU", "KEYCODE_TV_MEDIA_CONTEXT_MENU", "KEYCODE_TV_TIMER_PROGRAMMING", "KEYCODE_HELP", "KEYCODE_NAVIGATE_PREVIOUS", "KEYCODE_NAVIGATE_NEXT", "KEYCODE_NAVIGATE_IN", "KEYCODE_NAVIGATE_OUT", "KEYCODE_STEM_PRIMARY", "KEYCODE_STEM_1", "KEYCODE_STEM_2", "KEYCODE_STEM_3", "KEYCODE_DPAD_UP_LEFT", "KEYCODE_DPAD_DOWN_LEFT", "KEYCODE_DPAD_UP_RIGHT", "KEYCODE_DPAD_DOWN_RIGHT", "KEYCODE_MEDIA_SKIP_FORWARD", "KEYCODE_MEDIA_SKIP_BACKWARD", "KEYCODE_MEDIA_STEP_FORWARD", "KEYCODE_MEDIA_STEP_BACKWARD", "KEYCODE_SOFT_SLEEP", "KEYCODE_CUT", "KEYCODE_COPY", "KEYCODE_PASTE", "KEYCODE_SYSTEM_NAVIGATION_UP", "KEYCODE_SYSTEM_NAVIGATION_DOWN", "KEYCODE_SYSTEM_NAVIGATION_LEFT", "KEYCODE_SYSTEM_NAVIGATION_RIGHT", "KEYCODE_ALL_APPS", "KEYCODE_REFRESH", "KEYCODE_THUMBS_UP", "KEYCODE_THUMBS_DOWN", "KEYCODE_PROFILE_SWITCH", "LAST_KEYCODE", "META_SYMBOLIC_NAMES", "LABEL_PREFIX", "MAX_KEYCODE", "ACTION_DOWN", "ACTION_UP", "ACTION_MULTIPLE", "META_CAP_LOCKED", "META_ALT_LOCKED", "META_SYM_LOCKED", "META_SELECTING", "META_ALT_ON", "META_ALT_LEFT_ON", "META_ALT_RIGHT_ON", "META_SHIFT_ON", "META_SHIFT_LEFT_ON", "META_SHIFT_RIGHT_ON", "META_SYM_ON", "META_FUNCTION_ON", "META_CTRL_ON", "META_CTRL_LEFT_ON", "META_CTRL_RIGHT_ON", "META_META_ON", "META_META_LEFT_ON", "META_META_RIGHT_ON", "META_CAPS_LOCK_ON", "META_NUM_LOCK_ON", "META_SCROLL_LOCK_ON", "META_SHIFT_MASK", "META_ALT_MASK", "META_CTRL_MASK", "META_META_MASK", "FLAG_WOKE_HERE", "FLAG_SOFT_KEYBOARD", "FLAG_KEEP_TOUCH_MODE", "FLAG_FROM_SYSTEM", "FLAG_EDITOR_ACTION", "FLAG_CANCELED", "FLAG_VIRTUAL_HARD_KEY", "FLAG_LONG_PRESS", "FLAG_CANCELED_LONG_PRESS", "FLAG_TRACKING", "FLAG_FALLBACK", "FLAG_PREDISPATCH", "FLAG_START_TRACKING", "FLAG_TAINTED", "DEBUG", "TAG", "MAX_RECYCLED", "gRecyclerLock", "gRecyclerUsed", "gRecyclerTop", "mNext", "mId", "mDeviceId", "mSource", "mDisplayId", "mHmac", "mMetaState", "mAction", "mKeyCode", "mScanCode", "mRepeatCount", "mFlags", "mDownTime", "mEventTime", "mCharacters", "META_MODIFIER_MASK", "META_LOCK_MASK", "META_ALL_MASK", "META_SYNTHETIC_MASK", "META_INVALID_MODIFIER_MASK", "CREATOR" ],
  "methodNames" : [ "public static int getMaxKeyCode()", "public static int getDeadChar(int accent, int c)", "private static native String nativeKeyCodeToString(int keyCode)", "private static native int nativeKeyCodeFromString(String keyCode)", "private static native int nativeNextId()", "private static KeyEvent obtain()", "public static KeyEvent obtain(int id, long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source, int displayId, @Nullable byte[] hmac, String characters)", "public static KeyEvent obtain(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scanCode, int flags, int source, int displayId, String characters)", "public static KeyEvent obtain(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source, String characters)", "public static KeyEvent obtain(KeyEvent other)", "public KeyEvent copy()", "public final void recycle()", "public final void recycleIfNeededAfterDispatch()", "public int getId()", "public static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat)", "public static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat, int newFlags)", "public static KeyEvent changeAction(KeyEvent event, int action)", "public static KeyEvent changeFlags(KeyEvent event, int flags)", "public final boolean isTainted()", "public final void setTainted(boolean tainted)", "public final boolean isDown()", "public final boolean isSystem()", "public final boolean isWakeKey()", "public static final boolean isGamepadButton(int keyCode)", "public static final boolean isConfirmKey(int keyCode)", "public static final boolean isMediaSessionKey(int keyCode)", "public static final boolean isSystemKey(int keyCode)", "public static final boolean isWakeKey(int keyCode)", "public static final boolean isMetaKey(int keyCode)", "public static final boolean isAltKey(int keyCode)", "public final int getDeviceId()", "public final int getSource()", "public final void setSource(int source)", "public final int getDisplayId()", "public final void setDisplayId(int displayId)", "public final int getMetaState()", "public final int getModifiers()", "public final void setFlags(int newFlags)", "public final int getFlags()", "public static int getModifierMetaStateMask()", "public static boolean isModifierKey(int keyCode)", "public static int normalizeMetaState(int metaState)", "public static boolean metaStateHasNoModifiers(int metaState)", "public static boolean metaStateHasModifiers(int metaState, int modifiers)", "private static int metaStateFilterDirectionalModifiers(int metaState, int modifiers, int basic, int left, int right)", "public final boolean hasNoModifiers()", "public final boolean hasModifiers(int modifiers)", "public final boolean isAltPressed()", "public final boolean isShiftPressed()", "public final boolean isSymPressed()", "public final boolean isCtrlPressed()", "public final boolean isMetaPressed()", "public final boolean isFunctionPressed()", "public final boolean isCapsLockOn()", "public final boolean isNumLockOn()", "public final boolean isScrollLockOn()", "public final int getAction()", "public final boolean isCanceled()", "public final void cancel()", "public final void startTracking()", "public final boolean isTracking()", "public final boolean isLongPress()", "public final int getKeyCode()", "public final String getCharacters()", "public final int getScanCode()", "public final int getRepeatCount()", "public final void setTime(long downTime, long eventTime)", "public final long getDownTime()", "public final long getEventTime()", "public final long getEventTimeNano()", "public final int getKeyboardDevice()", "public final KeyCharacterMap getKeyCharacterMap()", "public char getDisplayLabel()", "public int getUnicodeChar()", "public int getUnicodeChar(int metaState)", "public boolean getKeyData(KeyData results)", "public char getMatch(char[] chars)", "public char getMatch(char[] chars, int metaState)", "public char getNumber()", "public boolean isPrintingKey()", "public final boolean dispatch(Callback receiver)", "public final boolean dispatch(Callback receiver, DispatcherState state, Object target)", "public String toString()", "public static String actionToString(int action)", "public static String keyCodeToString(int keyCode)", "public static int keyCodeFromString(@NonNull String symbolicName)", "private static boolean keyCodeIsValid(int keyCode)", "public static String metaStateToString(int metaState)", "public static KeyEvent createFromParcelBody(Parcel in)", "public void writeToParcel(Parcel out, int flags)" ]
}