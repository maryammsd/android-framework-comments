{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Timer.java",
  "packageName" : "java.util",
  "className" : "Timer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "queue",
    "type" : "TaskQueue",
    "comment" : " sched() call.",
    "links" : [ ]
  }, {
    "name" : "thread",
    "type" : "TimerThread",
    "comment" : " Android-added: @ReachabilitySensitive",
    "links" : [ ]
  }, {
    "name" : "cleanup",
    "type" : "Cleanable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nextSerialNumber",
    "type" : "AtomicInteger",
    "comment" : "\n     * This ID is used to generate thread names.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int serialNumber()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void schedule(TimerTask task, long delay)",
    "returnType" : "void",
    "comment" : "\n     * Schedules the specified task for execution after the specified delay.\n     *\n     * @param task  task to be scheduled.\n     * @param delay delay in milliseconds before task is to be executed.\n     * @throws IllegalArgumentException if {@code delay} is negative, or\n     *         {@code delay + System.currentTimeMillis()} is negative.\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void schedule(TimerTask task, Date time)",
    "returnType" : "void",
    "comment" : "\n     * Schedules the specified task for execution at the specified time.  If\n     * the time is in the past, the task is scheduled for immediate execution.\n     *\n     * @param task task to be scheduled.\n     * @param time time at which task is to be executed.\n     * @throws IllegalArgumentException if {@code time.getTime()} is negative.\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} or {@code time} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void schedule(TimerTask task, long delay, long period)",
    "returnType" : "void",
    "comment" : "\n     * Schedules the specified task for repeated <i>fixed-delay execution</i>,\n     * beginning after the specified delay.  Subsequent executions take place\n     * at approximately regular intervals separated by the specified period.\n     *\n     * <p>In fixed-delay execution, each execution is scheduled relative to\n     * the actual execution time of the previous execution.  If an execution\n     * is delayed for any reason (such as garbage collection or other\n     * background activity), subsequent executions will be delayed as well.\n     * In the long run, the frequency of execution will generally be slightly\n     * lower than the reciprocal of the specified period (assuming the system\n     * clock underlying {@code Object.wait(long)} is accurate).\n     *\n     * <p>Fixed-delay execution is appropriate for recurring activities\n     * that require \"smoothness.\"  In other words, it is appropriate for\n     * activities where it is more important to keep the frequency accurate\n     * in the short run than in the long run.  This includes most animation\n     * tasks, such as blinking a cursor at regular intervals.  It also includes\n     * tasks wherein regular activity is performed in response to human\n     * input, such as automatically repeating a character as long as a key\n     * is held down.\n     *\n     * @param task   task to be scheduled.\n     * @param delay  delay in milliseconds before task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code delay < 0}, or\n     *         {@code delay + System.currentTimeMillis() < 0}, or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void schedule(TimerTask task, Date firstTime, long period)",
    "returnType" : "void",
    "comment" : "\n     * Schedules the specified task for repeated <i>fixed-delay execution</i>,\n     * beginning at the specified time. Subsequent executions take place at\n     * approximately regular intervals, separated by the specified period.\n     *\n     * <p>In fixed-delay execution, each execution is scheduled relative to\n     * the actual execution time of the previous execution.  If an execution\n     * is delayed for any reason (such as garbage collection or other\n     * background activity), subsequent executions will be delayed as well.\n     * In the long run, the frequency of execution will generally be slightly\n     * lower than the reciprocal of the specified period (assuming the system\n     * clock underlying {@code Object.wait(long)} is accurate).  As a\n     * consequence of the above, if the scheduled first time is in the past,\n     * it is scheduled for immediate execution.\n     *\n     * <p>Fixed-delay execution is appropriate for recurring activities\n     * that require \"smoothness.\"  In other words, it is appropriate for\n     * activities where it is more important to keep the frequency accurate\n     * in the short run than in the long run.  This includes most animation\n     * tasks, such as blinking a cursor at regular intervals.  It also includes\n     * tasks wherein regular activity is performed in response to human\n     * input, such as automatically repeating a character as long as a key\n     * is held down.\n     *\n     * @param task   task to be scheduled.\n     * @param firstTime First time at which task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code firstTime.getTime() < 0}, or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} or {@code firstTime} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scheduleAtFixedRate(TimerTask task, long delay, long period)",
    "returnType" : "void",
    "comment" : "\n     * Schedules the specified task for repeated <i>fixed-rate execution</i>,\n     * beginning after the specified delay.  Subsequent executions take place\n     * at approximately regular intervals, separated by the specified period.\n     *\n     * <p>In fixed-rate execution, each execution is scheduled relative to the\n     * scheduled execution time of the initial execution.  If an execution is\n     * delayed for any reason (such as garbage collection or other background\n     * activity), two or more executions will occur in rapid succession to\n     * \"catch up.\"  In the long run, the frequency of execution will be\n     * exactly the reciprocal of the specified period (assuming the system\n     * clock underlying {@code Object.wait(long)} is accurate).\n     *\n     * <p>Fixed-rate execution is appropriate for recurring activities that\n     * are sensitive to <i>absolute</i> time, such as ringing a chime every\n     * hour on the hour, or running scheduled maintenance every day at a\n     * particular time.  It is also appropriate for recurring activities\n     * where the total time to perform a fixed number of executions is\n     * important, such as a countdown timer that ticks once every second for\n     * ten seconds.  Finally, fixed-rate execution is appropriate for\n     * scheduling multiple repeating timer tasks that must remain synchronized\n     * with respect to one another.\n     *\n     * @param task   task to be scheduled.\n     * @param delay  delay in milliseconds before task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code delay < 0}, or\n     *         {@code delay + System.currentTimeMillis() < 0}, or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scheduleAtFixedRate(TimerTask task, Date firstTime, long period)",
    "returnType" : "void",
    "comment" : "\n     * Schedules the specified task for repeated <i>fixed-rate execution</i>,\n     * beginning at the specified time. Subsequent executions take place at\n     * approximately regular intervals, separated by the specified period.\n     *\n     * <p>In fixed-rate execution, each execution is scheduled relative to the\n     * scheduled execution time of the initial execution.  If an execution is\n     * delayed for any reason (such as garbage collection or other background\n     * activity), two or more executions will occur in rapid succession to\n     * \"catch up.\"  In the long run, the frequency of execution will be\n     * exactly the reciprocal of the specified period (assuming the system\n     * clock underlying {@code Object.wait(long)} is accurate).  As a\n     * consequence of the above, if the scheduled first time is in the past,\n     * then any \"missed\" executions will be scheduled for immediate \"catch up\"\n     * execution.\n     *\n     * <p>Fixed-rate execution is appropriate for recurring activities that\n     * are sensitive to <i>absolute</i> time, such as ringing a chime every\n     * hour on the hour, or running scheduled maintenance every day at a\n     * particular time.  It is also appropriate for recurring activities\n     * where the total time to perform a fixed number of executions is\n     * important, such as a countdown timer that ticks once every second for\n     * ten seconds.  Finally, fixed-rate execution is appropriate for\n     * scheduling multiple repeating timer tasks that must remain synchronized\n     * with respect to one another.\n     *\n     * @param task   task to be scheduled.\n     * @param firstTime First time at which task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code firstTime.getTime() < 0} or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} or {@code firstTime} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sched(TimerTask task, long time, long period)",
    "returnType" : "void",
    "comment" : "\n     * Schedule the specified timer task for execution at the specified\n     * time with the specified period, in milliseconds.  If period is\n     * positive, the task is scheduled for repeated execution; if period is\n     * zero, the task is scheduled for one-time execution. Time is specified\n     * in Date.getTime() format.  This method checks timer state, task state,\n     * and initial execution time, but not period.\n     *\n     * @throws IllegalArgumentException if {@code time} is negative.\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Terminates this timer, discarding any currently scheduled tasks.\n     * Does not interfere with a currently executing task (if it exists).\n     * Once a timer has been terminated, its execution thread terminates\n     * gracefully, and no more tasks may be scheduled on it.\n     *\n     * <p>Note that calling this method from within the run method of a\n     * timer task that was invoked by this timer absolutely guarantees that\n     * the ongoing task execution is the last task execution that will ever\n     * be performed by this timer.\n     *\n     * <p>This method may be called repeatedly; the second and subsequent\n     * calls have no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int purge()",
    "returnType" : "int",
    "comment" : "\n     * Removes all cancelled tasks from this timer's task queue.  <i>Calling\n     * this method has no effect on the behavior of the timer</i>, but\n     * eliminates the references to the cancelled tasks from the queue.\n     * If there are no external references to these tasks, they become\n     * eligible for garbage collection.\n     *\n     * <p>Most programs will have no need to call this method.\n     * It is designed for use by the rare application that cancels a large\n     * number of tasks.  Calling this method trades time for space: the\n     * runtime of the method may be proportional to n + c log n, where n\n     * is the number of tasks in the queue and c is the number of cancelled\n     * tasks.\n     *\n     * <p>Note that it is permissible to call this method from within\n     * a task scheduled on this timer.\n     *\n     * @return the number of tasks removed from the queue.\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int serialNumber()", "public void schedule(TimerTask task, long delay)", "public void schedule(TimerTask task, Date time)", "public void schedule(TimerTask task, long delay, long period)", "public void schedule(TimerTask task, Date firstTime, long period)", "public void scheduleAtFixedRate(TimerTask task, long delay, long period)", "public void scheduleAtFixedRate(TimerTask task, Date firstTime, long period)", "private void sched(TimerTask task, long time, long period)", "public void cancel()", "public int purge()" ],
  "variableNames" : [ "queue", "thread", "cleanup", "nextSerialNumber" ]
}