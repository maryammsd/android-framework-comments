{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/BackupAgentHelper.java",
  "packageName" : "android.app.backup",
  "className" : "BackupAgentHelper",
  "comment" : "\n * A convenient {@link BackupAgent} wrapper class that automatically manages\n * heterogeneous data sets within the backup data, each identified by a unique\n * key prefix.  When processing a backup or restore operation, the BackupAgentHelper\n * dispatches to one or more installed {@link BackupHelper} objects, each\n * of which is responsible for a defined subset of the data being processed.\n * <p>\n * An application will typically extend this class in its own\n * backup agent. Then, within the agent's {@link BackupAgent#onCreate() onCreate()}\n * method, it will call {@link #addHelper(String, BackupHelper) addHelper()} one or more times to\n * install the handlers for each kind of data it wishes to manage within its backups.\n * <p>\n * The Android framework currently provides two predefined {@link BackupHelper} classes:</p>\n * <ul><li>{@link FileBackupHelper} - Manages the backup and restore of entire files\n * within an application's data directory hierarchy.</li>\n * <li>{@link SharedPreferencesBackupHelper} - Manages the backup and restore of an\n * application's {@link android.content.SharedPreferences} data.</li></ul>\n * <p>\n * An application can also implement its own helper classes to work within the\n * {@link BackupAgentHelper} framework.  See the {@link BackupHelper} interface\n * documentation for details.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using BackupAgentHelper, read the\n * <a href=\"{@docRoot}guide/topics/data/backup.html\">Data Backup</a> developer guide.</p>\n * </div>\n *\n * @see BackupHelper\n * @see FileBackupHelper\n * @see SharedPreferencesBackupHelper\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatcher",
    "type" : "BackupHelperDispatcher",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Run the backup process on each of the configured handlers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescriptor newState) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Run the restore process on each of the configured handlers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BackupHelperDispatcher getDispatcher()",
    "returnType" : "BackupHelperDispatcher",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addHelper(String keyPrefix, BackupHelper helper)",
    "returnType" : "void",
    "comment" : "\n     * Add a helper for a given data subset to the agent's configuration.  Each helper\n     * must have a prefix string that is unique within this backup agent's set of\n     * helpers.\n     *\n     * @param keyPrefix A string used to disambiguate the various helpers within this agent\n     * @param helper A backup/restore helper object to be invoked during backup and restore\n     *    operations.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mDispatcher" ],
  "methodNames" : [ "public void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState) throws IOException", "public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescriptor newState) throws IOException", "public BackupHelperDispatcher getDispatcher()", "public void addHelper(String keyPrefix, BackupHelper helper)" ]
}