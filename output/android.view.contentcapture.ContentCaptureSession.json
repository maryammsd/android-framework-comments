{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/contentcapture/ContentCaptureSession.java",
  "packageName" : "android.view.contentcapture",
  "className" : "ContentCaptureSession",
  "comment" : "\n * Session used when notifying the Android system about events associated with views.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_GENERATOR",
    "type" : "SecureRandom",
    "comment" : "  processes, we may need to explore other options.",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BINDER",
    "type" : "String",
    "comment" : "\n     * Name of the {@link IResultReceiver} extra used to pass the binder interface to the service.\n     * @hide\n     ",
    "links" : [ "com.android.internal.os.IResultReceiver" ]
  }, {
    "name" : "EXTRA_ENABLED_STATE",
    "type" : "String",
    "comment" : "\n     * Name of the {@link IResultReceiver} extra used to pass the content capture enabled state.\n     * @hide\n     ",
    "links" : [ "com.android.internal.os.IResultReceiver" ]
  }, {
    "name" : "UNKNOWN_STATE",
    "type" : "int",
    "comment" : " NOTE: not prefixed by STATE_ so it's not printed on getStateAsString()",
    "links" : [ ]
  }, {
    "name" : "STATE_WAITING_FOR_SERVER",
    "type" : "int",
    "comment" : "\n     * Service's startSession() was called, but server didn't confirm it was created yet.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * Session is active.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISABLED",
    "type" : "int",
    "comment" : "\n     * Session is disabled because there is no service for this user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DUPLICATED_ID",
    "type" : "int",
    "comment" : "\n     * Session is disabled because its id already existed on server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_NO_SERVICE",
    "type" : "int",
    "comment" : "\n     * Session is disabled because service is not set for user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_SECURE",
    "type" : "int",
    "comment" : "\n     * Session is disabled by FLAG_SECURE\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_BY_APP",
    "type" : "int",
    "comment" : "\n     * Session is disabled manually by the specific app\n     * (through {@link ContentCaptureManager#setContentCaptureEnabled(boolean)}).\n     *\n     * @hide\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager#setContentCaptureEnabled(boolean)" ]
  }, {
    "name" : "STATE_NO_RESPONSE",
    "type" : "int",
    "comment" : "\n     * Session is disabled because session start was never replied.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Session is disabled because an internal error.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_NOT_WHITELISTED",
    "type" : "int",
    "comment" : "\n     * Session is disabled because service didn't allowlist package or activity.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SERVICE_DIED",
    "type" : "int",
    "comment" : "\n     * Session is disabled because the service died.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SERVICE_UPDATING",
    "type" : "int",
    "comment" : "\n     * Session is disabled because the service package is being udpated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SERVICE_RESURRECTED",
    "type" : "int",
    "comment" : "\n     * Session is enabled, after the service died and came back to live.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIAL_CHILDREN_CAPACITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_FULL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_VIEW_ROOT_ENTERED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_SESSION_STARTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_SESSION_FINISHED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_IDLE_TIMEOUT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_TEXT_CHANGE_TIMEOUT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_SESSION_CONNECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_FORCE_FLUSH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_VIEW_TREE_APPEARING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLUSH_REASON_VIEW_TREE_APPEARED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_NODES_DISAPPEAR_NOW_SENDS_TREE_EVENTS",
    "type" : "long",
    "comment" : "\n     * After {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n     * {@link #notifyViewsDisappeared(AutofillId, long[])} wraps\n     * the virtual children with a pair of view tree appearing and view tree appeared events.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#notifyViewsDisappeared(AutofillId" ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "\n     * Guard use to ignore events after it's destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureSessionId",
    "type" : "ContentCaptureSessionId",
    "comment" : " Lazily created on demand.",
    "links" : [ ]
  }, {
    "name" : "mClientContext",
    "type" : "ContentCaptureContext",
    "comment" : "\n     * {@link ContentCaptureContext} set by client, or {@code null} when it's the\n     * {@link ContentCaptureManager#getMainContentCaptureSession() default session} for the\n     * context.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager#getMainContentCaptureSession()", "android.view.contentcapture.ContentCaptureContext" ]
  }, {
    "name" : "mChildren",
    "type" : "ArrayList<ContentCaptureSession>",
    "comment" : "\n     * List of children session.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " abstract ContentCaptureSession getMainCaptureSession()",
    "returnType" : "ContentCaptureSession",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " abstract void start(@NonNull IBinder token, @NonNull IBinder shareableActivityToken, @NonNull ComponentName component, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract boolean isDisabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract boolean setDisabled(boolean disabled)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the disabled state of content capture.\n     *\n     * @return whether disabled state was changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ContentCaptureSessionId getContentCaptureSessionId()",
    "returnType" : "ContentCaptureSessionId",
    "comment" : "\n     * Gets the id used to identify this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final ContentCaptureSession createContentCaptureSession(@NonNull ContentCaptureContext context)",
    "returnType" : "ContentCaptureSession",
    "comment" : "\n     * Creates a new {@link ContentCaptureSession}.\n     *\n     * <p>See {@link View#setContentCaptureSession(ContentCaptureSession)} for more info.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession", "android.view.View#setContentCaptureSession(ContentCaptureSession)" ]
  }, {
    "name" : " abstract ContentCaptureSession newChild(@NonNull ContentCaptureContext context)",
    "returnType" : "ContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void flush(@FlushReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Flushes the buffered events to the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setContentCaptureContext(@Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link ContentCaptureContext} associated with the session.\n     *\n     * <p>Typically used to change the context associated with the default session from an activity.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureContext" ]
  }, {
    "name" : " abstract void updateContentCaptureContext(@Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final ContentCaptureContext getContentCaptureContext()",
    "returnType" : "ContentCaptureContext",
    "comment" : "\n     * Gets the {@link ContentCaptureContext} associated with the session.\n     *\n     * @return context set on constructor or by\n     *         {@link #setContentCaptureContext(ContentCaptureContext)}, or {@code null} if never\n     *         explicitly set.\n     ",
    "links" : [ "#setContentCaptureContext(ContentCaptureContext)", "android.view.contentcapture.ContentCaptureContext" ]
  }, {
    "name" : "public final void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys this session, flushing out all pending notifications to the service.\n     *\n     * <p>Once destroyed, any new notification will be dropped.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyViewAppeared(@NonNull ViewStructure node)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Content Capture Service that a node has been added to the view structure.\n     *\n     * <p>Typically called \"manually\" by views that handle their own virtual view hierarchy, or\n     * automatically by the Android System for views that return {@code true} on\n     * {@link View#onProvideContentCaptureStructure(ViewStructure, int)}.\n     *\n     * <p>Consider use {@link #notifyViewsAppeared} which has a better performance when notifying\n     * a list of nodes has appeared.\n     *\n     * @param node node that has been added.\n     ",
    "links" : [ "#notifyViewsAppeared", "android.view.View#onProvideContentCaptureStructure(ViewStructure" ]
  }, {
    "name" : " abstract void internalNotifyViewAppeared(int sessionId, @NonNull ViewNode.ViewStructureImpl node)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void notifyViewDisappeared(@NonNull AutofillId id)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Content Capture Service that a node has been removed from the view structure.\n     *\n     * <p>Typically called \"manually\" by views that handle their own virtual view hierarchy, or\n     * automatically by the Android System for standard views.\n     *\n     * <p>Consider use {@link #notifyViewsDisappeared} which has a better performance when notifying\n     * a list of nodes has disappeared.\n     *\n     * @param id id of the node that has been removed.\n     ",
    "links" : [ "#notifyViewsDisappeared" ]
  }, {
    "name" : " abstract void internalNotifyViewDisappeared(int sessionId, @NonNull AutofillId id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void notifyViewsAppeared(@NonNull List<ViewStructure> appearedNodes)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Content Capture Service that a list of nodes has appeared in the view structure.\n     *\n     * <p>Typically called manually by views that handle their own virtual view hierarchy.\n     *\n     * @param appearedNodes nodes that have appeared. Each element represents a view node that has\n     * been added to the view structure. The order of the elements is important, which should be\n     * preserved as the attached order of when the node is attached to the virtual view hierarchy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyViewsDisappeared(@NonNull AutofillId hostId, @NonNull long[] virtualIds)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Content Capture Service that many nodes has been removed from a virtual view\n     * structure.\n     *\n     * <p>Should only be called by views that handle their own virtual view hierarchy.\n     *\n     * <p>After UPSIDE_DOWN_CAKE, this method wraps the virtual children with a pair of view tree\n     * appearing and view tree appeared events.\n     *\n     * @param hostId id of the non-virtual view hosting the virtual view hierarchy (it can be\n     * obtained by calling {@link ViewStructure#getAutofillId()}).\n     * @param virtualIds ids of the virtual children.\n     *\n     * @throws IllegalArgumentException if the {@code hostId} is an autofill id for a virtual view.\n     * @throws IllegalArgumentException if {@code virtualIds} is empty\n     ",
    "links" : [ "android.view.ViewStructure#getAutofillId()" ]
  }, {
    "name" : "public final void notifyViewTextChanged(@NonNull AutofillId id, @Nullable CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Intelligence Service that the value of a text node has been changed.\n     *\n     * @param id of the node.\n     * @param text new text.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifyViewTextChanged(int sessionId, @NonNull AutofillId id, @Nullable CharSequence text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void notifyViewInsetsChanged(@NonNull Insets viewInsets)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Intelligence Service that the insets of a view have changed.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifyViewInsetsChanged(int sessionId, @NonNull Insets viewInsets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyViewTreeEvent(boolean started)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifyViewTreeEvent(int sessionId, boolean started)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void notifySessionResumed()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Content Capture Service that a session has resumed.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifySessionResumed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void notifySessionPaused()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Content Capture Service that a session has paused.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifySessionPaused()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifyChildSessionStarted(int parentSessionId, int childSessionId, @NonNull ContentCaptureContext clientContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifyChildSessionFinished(int parentSessionId, int childSessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void internalNotifyContextUpdated(int sessionId, @Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void notifyWindowBoundsChanged(int sessionId, @NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void notifyContentCaptureEvents(@NonNull SparseArray<ArrayList<Object>> contentCaptureEvents)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final ViewStructure newViewStructure(@NonNull View view)",
    "returnType" : "ViewStructure",
    "comment" : "\n     * Creates a {@link ViewStructure} for a \"standard\" view.\n     *\n     * <p>This method should be called after a visible view is laid out; the view then must populate\n     * the structure and pass it to {@link #notifyViewAppeared(ViewStructure)}.\n     *\n     * <b>Note: </b>views that manage a virtual structure under this view must populate just the\n     * node representing this view and return right away, then asynchronously report (not\n     * necessarily in the UI thread) when the children nodes appear, disappear or have their text\n     * changed by calling {@link ContentCaptureSession#notifyViewAppeared(ViewStructure)},\n     * {@link ContentCaptureSession#notifyViewDisappeared(AutofillId)}, and\n     * {@link ContentCaptureSession#notifyViewTextChanged(AutofillId, CharSequence)} respectively.\n     * The structure for the a child must be created using\n     * {@link ContentCaptureSession#newVirtualViewStructure(AutofillId, long)}, and the\n     * {@code autofillId} for a child can be obtained either through\n     * {@code childStructure.getAutofillId()} or\n     * {@link ContentCaptureSession#newAutofillId(AutofillId, long)}.\n     *\n     * <p>When the virtual view hierarchy represents a web page, you should also:\n     *\n     * <ul>\n     * <li>Call {@link ContentCaptureManager#getContentCaptureConditions()} to infer content capture\n     * events should be generate for that URL.\n     * <li>Create a new {@link ContentCaptureSession} child for every HTML element that renders a\n     * new URL (like an {@code IFRAME}) and use that session to notify events from that subtree.\n     * </ul>\n     *\n     * <p><b>Note: </b>the following methods of the {@code structure} will be ignored:\n     * <ul>\n     * <li>{@link ViewStructure#setChildCount(int)}\n     * <li>{@link ViewStructure#addChildCount(int)}\n     * <li>{@link ViewStructure#getChildCount()}\n     * <li>{@link ViewStructure#newChild(int)}\n     * <li>{@link ViewStructure#asyncNewChild(int)}\n     * <li>{@link ViewStructure#asyncCommit()}\n     * <li>{@link ViewStructure#setWebDomain(String)}\n     * <li>{@link ViewStructure#newHtmlInfoBuilder(String)}\n     * <li>{@link ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)}\n     * <li>{@link ViewStructure#setDataIsSensitive(boolean)}\n     * <li>{@link ViewStructure#setAlpha(float)}\n     * <li>{@link ViewStructure#setElevation(float)}\n     * <li>{@link ViewStructure#setTransformation(android.graphics.Matrix)}\n     * </ul>\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession#newVirtualViewStructure(AutofillId", "android.view.contentcapture.ContentCaptureSession#notifyViewTextChanged(AutofillId", "android.view.ViewStructure#setChildCount(int)", "android.view.contentcapture.ContentCaptureSession#newAutofillId(AutofillId", "android.view.ViewStructure#asyncCommit()", "android.view.ViewStructure#setAlpha(float)", "android.view.ViewStructure#setWebDomain(String)", "#notifyViewAppeared(ViewStructure)", "android.view.ViewStructure#addChildCount(int)", "android.view.ViewStructure#setDataIsSensitive(boolean)", "android.view.contentcapture.ContentCaptureSession#notifyViewAppeared(ViewStructure)", "android.view.ViewStructure#newChild(int)", "android.view.contentcapture.ContentCaptureSession", "android.view.ViewStructure#asyncNewChild(int)", "android.view.ViewStructure", "android.view.ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)", "android.view.ViewStructure#getChildCount()", "android.view.ViewStructure#newHtmlInfoBuilder(String)", "android.view.contentcapture.ContentCaptureSession#notifyViewDisappeared(AutofillId)", "android.view.ViewStructure#setTransformation(android.graphics.Matrix)", "android.view.ViewStructure#setElevation(float)", "android.view.contentcapture.ContentCaptureManager#getContentCaptureConditions()" ]
  }, {
    "name" : "public AutofillId newAutofillId(@NonNull AutofillId hostId, long virtualChildId)",
    "returnType" : "AutofillId",
    "comment" : "\n     * Creates a new {@link AutofillId} for a virtual child, so it can be used to uniquely identify\n     * the children in the session.\n     *\n     * @param hostId id of the non-virtual view hosting the virtual view hierarchy (it can be\n     * obtained by calling {@link ViewStructure#getAutofillId()}).\n     * @param virtualChildId id of the virtual child, relative to the parent.\n     *\n     * @return if for the virtual child\n     *\n     * @throws IllegalArgumentException if the {@code parentId} is a virtual child id.\n     ",
    "links" : [ "android.view.ViewStructure#getAutofillId()", "android.view.autofill.AutofillId" ]
  }, {
    "name" : "public final ViewStructure newVirtualViewStructure(@NonNull AutofillId parentId, long virtualId)",
    "returnType" : "ViewStructure",
    "comment" : "\n     * Creates a {@link ViewStructure} for a \"virtual\" view, so it can be passed to\n     * {@link #notifyViewAppeared(ViewStructure)} by the view managing the virtual view hierarchy.\n     *\n     * @param parentId id of the virtual view parent (it can be obtained by calling\n     * {@link ViewStructure#getAutofillId()} on the parent).\n     * @param virtualId id of the virtual child, relative to the parent.\n     *\n     * @return a new {@link ViewStructure} that can be used for Content Capture purposes.\n     ",
    "links" : [ "android.view.ViewStructure", "#notifyViewAppeared(ViewStructure)", "android.view.ViewStructure#getAutofillId()" ]
  }, {
    "name" : " boolean isContentCaptureEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(@NonNull String prefix, @NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static String getStateAsString(int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getFlushReasonAsString(@FlushReason int reason)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static int getRandomSessionId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract ContentCaptureSession getMainCaptureSession()", " abstract void start(@NonNull IBinder token, @NonNull IBinder shareableActivityToken, @NonNull ComponentName component, int flags)", " abstract boolean isDisabled()", " abstract boolean setDisabled(boolean disabled)", "public final ContentCaptureSessionId getContentCaptureSessionId()", "public int getId()", "public final ContentCaptureSession createContentCaptureSession(@NonNull ContentCaptureContext context)", " abstract ContentCaptureSession newChild(@NonNull ContentCaptureContext context)", " abstract void flush(@FlushReason int reason)", "public final void setContentCaptureContext(@Nullable ContentCaptureContext context)", " abstract void updateContentCaptureContext(@Nullable ContentCaptureContext context)", "public final ContentCaptureContext getContentCaptureContext()", "public final void destroy()", " abstract void onDestroy()", "public void close()", "public final void notifyViewAppeared(@NonNull ViewStructure node)", " abstract void internalNotifyViewAppeared(int sessionId, @NonNull ViewNode.ViewStructureImpl node)", "public final void notifyViewDisappeared(@NonNull AutofillId id)", " abstract void internalNotifyViewDisappeared(int sessionId, @NonNull AutofillId id)", "public final void notifyViewsAppeared(@NonNull List<ViewStructure> appearedNodes)", "public final void notifyViewsDisappeared(@NonNull AutofillId hostId, @NonNull long[] virtualIds)", "public final void notifyViewTextChanged(@NonNull AutofillId id, @Nullable CharSequence text)", " abstract void internalNotifyViewTextChanged(int sessionId, @NonNull AutofillId id, @Nullable CharSequence text)", "public final void notifyViewInsetsChanged(@NonNull Insets viewInsets)", " abstract void internalNotifyViewInsetsChanged(int sessionId, @NonNull Insets viewInsets)", "public void notifyViewTreeEvent(boolean started)", " abstract void internalNotifyViewTreeEvent(int sessionId, boolean started)", "public final void notifySessionResumed()", " abstract void internalNotifySessionResumed()", "public final void notifySessionPaused()", " abstract void internalNotifySessionPaused()", " abstract void internalNotifyChildSessionStarted(int parentSessionId, int childSessionId, @NonNull ContentCaptureContext clientContext)", " abstract void internalNotifyChildSessionFinished(int parentSessionId, int childSessionId)", " abstract void internalNotifyContextUpdated(int sessionId, @Nullable ContentCaptureContext context)", "public abstract void notifyWindowBoundsChanged(int sessionId, @NonNull Rect bounds)", "public abstract void notifyContentCaptureEvents(@NonNull SparseArray<ArrayList<Object>> contentCaptureEvents)", "public final ViewStructure newViewStructure(@NonNull View view)", "public AutofillId newAutofillId(@NonNull AutofillId hostId, long virtualChildId)", "public final ViewStructure newVirtualViewStructure(@NonNull AutofillId parentId, long virtualId)", " boolean isContentCaptureEnabled()", " void dump(@NonNull String prefix, @NonNull PrintWriter pw)", "public String toString()", "protected static String getStateAsString(int state)", "public static String getFlushReasonAsString(@FlushReason int reason)", "private static int getRandomSessionId()" ],
  "variableNames" : [ "TAG", "ID_GENERATOR", "EXTRA_BINDER", "EXTRA_ENABLED_STATE", "UNKNOWN_STATE", "STATE_WAITING_FOR_SERVER", "STATE_ACTIVE", "STATE_DISABLED", "STATE_DUPLICATED_ID", "STATE_NO_SERVICE", "STATE_FLAG_SECURE", "STATE_BY_APP", "STATE_NO_RESPONSE", "STATE_INTERNAL_ERROR", "STATE_NOT_WHITELISTED", "STATE_SERVICE_DIED", "STATE_SERVICE_UPDATING", "STATE_SERVICE_RESURRECTED", "INITIAL_CHILDREN_CAPACITY", "FLUSH_REASON_FULL", "FLUSH_REASON_VIEW_ROOT_ENTERED", "FLUSH_REASON_SESSION_STARTED", "FLUSH_REASON_SESSION_FINISHED", "FLUSH_REASON_IDLE_TIMEOUT", "FLUSH_REASON_TEXT_CHANGE_TIMEOUT", "FLUSH_REASON_SESSION_CONNECTED", "FLUSH_REASON_FORCE_FLUSH", "FLUSH_REASON_VIEW_TREE_APPEARING", "FLUSH_REASON_VIEW_TREE_APPEARED", "NOTIFY_NODES_DISAPPEAR_NOW_SENDS_TREE_EVENTS", "mLock", "mDestroyed", "mId", "mState", "mContentCaptureSessionId", "mClientContext", "mChildren" ]
}