{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/AtomicFile.java",
  "packageName" : "android.util",
  "className" : "AtomicFile",
  "comment" : "\n * Helper class for performing atomic operations on a file by writing to a new file and renaming it\n * into the place of the original file after the write has successfully completed. If you need this\n * on older versions of the platform you can use {@link androidx.core.util.AtomicFile} in AndroidX.\n * <p>\n * Atomic file guarantees file integrity by ensuring that a file has been completely written and\n * sync'd to disk before renaming it to the original file. Previously this is done by renaming the\n * original file to a backup file beforehand, but this approach couldn't handle the case where the\n * file is created for the first time. This class will also handle the backup file created by the\n * old implementation properly.\n * <p>\n * Atomic file does not confer any file locking semantics. Do not use this class when the file may\n * be accessed or modified concurrently by multiple threads or processes. The caller is responsible\n * for ensuring appropriate mutual exclusion invariants whenever it accesses the file.\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseName",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNewName",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyBackupName",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommitTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public File getBaseFile()",
    "returnType" : "File",
    "comment" : "\n     * Return the path to the base file.  You should not generally use this,\n     * as the data at that path may not be valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void delete()",
    "returnType" : "void",
    "comment" : "\n     * Delete the atomic file.  This deletes both the base and new files.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileOutputStream startWrite() throws IOException",
    "returnType" : "FileOutputStream",
    "comment" : "\n     * Start a new write operation on the file.  This returns a FileOutputStream\n     * to which you can write the new file data.  The existing file is replaced\n     * with the new data.  You <em>must not</em> directly close the given\n     * FileOutputStream; instead call either {@link #finishWrite(FileOutputStream)}\n     * or {@link #failWrite(FileOutputStream)}.\n     *\n     * <p>Note that if another thread is currently performing\n     * a write, this will simply replace whatever that thread is writing\n     * with the new file being written by this thread, and when the other\n     * thread finishes the write the new write operation will no longer be\n     * safe (or will be lost).  You must do your own threading protection for\n     * access to AtomicFile.\n     ",
    "links" : [ "#finishWrite(FileOutputStream)", "#failWrite(FileOutputStream)" ]
  }, {
    "name" : "public FileOutputStream startWrite(long startTime) throws IOException",
    "returnType" : "FileOutputStream",
    "comment" : "\n     * @hide Internal version of {@link #startWrite()} that allows you to specify an earlier\n     * start time of the operation to adjust how the commit is logged.\n     * @param startTime The effective start time of the operation, in the time\n     * base of {@link SystemClock#uptimeMillis()}.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#startWrite()" ]
  }, {
    "name" : "public void finishWrite(FileOutputStream str)",
    "returnType" : "void",
    "comment" : "\n     * Call when you have successfully finished writing to the stream\n     * returned by {@link #startWrite()}.  This will close, sync, and\n     * commit the new data.  The next attempt to read the atomic file\n     * will return the new file stream.\n     ",
    "links" : [ "#startWrite()" ]
  }, {
    "name" : "public void failWrite(FileOutputStream str)",
    "returnType" : "void",
    "comment" : "\n     * Call when you have failed for some reason at writing to the stream\n     * returned by {@link #startWrite()}.  This will close the current\n     * write stream, and delete the new file.\n     ",
    "links" : [ "#startWrite()" ]
  }, {
    "name" : "public void truncate() throws IOException",
    "returnType" : "void",
    "comment" : " @hide\n     * @deprecated This is not safe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileOutputStream openAppend() throws IOException",
    "returnType" : "FileOutputStream",
    "comment" : " @hide\n     * @deprecated This is not safe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileInputStream openRead() throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "\n     * Open the atomic file for reading. You should call close() on the FileInputStream when you are\n     * done reading from it.\n     * <p>\n     * You must do your own threading protection for access to AtomicFile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean exists()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks if the original or legacy backup file exists.\n     * @return whether the original or legacy backup file exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastModifiedTime()",
    "returnType" : "long",
    "comment" : "\n     * Gets the last modified time of the atomic file.\n     * {@hide}\n     *\n     * @return last modified time in milliseconds since epoch.  Returns zero if\n     *     the file does not exist or an I/O error is encountered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] readFully() throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * A convenience for {@link #openRead()} that also reads all of the\n     * file contents into a byte array which is returned.\n     ",
    "links" : [ "#openRead()" ]
  }, {
    "name" : "public void write(Consumer<FileOutputStream> writeContent)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void rename(File source, File target)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "mBaseName", "mNewName", "mLegacyBackupName", "mCommitTag", "mStartTime" ],
  "methodNames" : [ "public File getBaseFile()", "public void delete()", "public FileOutputStream startWrite() throws IOException", "public FileOutputStream startWrite(long startTime) throws IOException", "public void finishWrite(FileOutputStream str)", "public void failWrite(FileOutputStream str)", "public void truncate() throws IOException", "public FileOutputStream openAppend() throws IOException", "public FileInputStream openRead() throws FileNotFoundException", "public boolean exists()", "public long getLastModifiedTime()", "public byte[] readFully() throws IOException", "public void write(Consumer<FileOutputStream> writeContent)", "private static void rename(File source, File target)" ]
}