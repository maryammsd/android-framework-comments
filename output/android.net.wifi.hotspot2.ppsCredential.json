{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/hotspot2/pps/Credential.java",
  "packageName" : "android.net.wifi.hotspot2.pps",
  "className" : "Credential",
  "comment" : "\n * Class representing Credential subtree in the PerProviderSubscription (PPS)\n * Management Object (MO) tree.\n * For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0\n * Release 2 Technical Specification.\n *\n * In addition to the fields in the Credential subtree, this will also maintain necessary\n * information for the private key and certificates associated with this credential.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_REALM_BYTES",
    "type" : "int",
    "comment" : "\n     * Max string length for realm.  Refer to Credential/Realm node in Hotspot 2.0 Release 2\n     * Technical Specification Section 9.1 for more info.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCreationTimeInMillis",
    "type" : "long",
    "comment" : "\n     * The time this credential is created. It is in the format of number\n     * of milliseconds since January 1, 1970, 00:00:00 GMT.\n     * Using Long.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExpirationTimeInMillis",
    "type" : "long",
    "comment" : "\n     * The time this credential will expire. It is in the format of number\n     * of milliseconds since January 1, 1970, 00:00:00 GMT.\n    * Using Long.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRealm",
    "type" : "String",
    "comment" : "\n     * The realm associated with this credential.  It will be used to determine\n     * if this credential can be used to authenticate with a given hotspot by\n     * comparing the realm specified in that hotspot's ANQP element.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCheckAaaServerCertStatus",
    "type" : "boolean",
    "comment" : "\n     * When set to true, the device should check AAA (Authentication, Authorization,\n     * and Accounting) server's certificate during EAP (Extensible Authentication\n     * Protocol) authentication.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserCredential",
    "type" : "UserCredential",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCertCredential",
    "type" : "CertificateCredential",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSimCredential",
    "type" : "SimCredential",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaCertificates",
    "type" : "X509Certificate[]",
    "comment" : "\n     * CA (Certificate Authority) X509 certificates.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClientCertificateChain",
    "type" : "X509Certificate[]",
    "comment" : "\n     * Client side X509 certificate chain.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClientPrivateKey",
    "type" : "PrivateKey",
    "comment" : "\n     * Client side private key.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<Credential>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCreationTimeInMillis(long creationTimeInMillis)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCreationTimeInMillis()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpirationTimeInMillis(long expirationTimeInMillis)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpirationTimeInMillis()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRealm(String realm)",
    "returnType" : "void",
    "comment" : "\n     * Set the realm associated with this credential.\n     *\n     * @param realm The realm to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRealm()",
    "returnType" : "String",
    "comment" : "\n     * Get the realm associated with this credential.\n     *\n     * @return the realm associated with this credential\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCheckAaaServerCertStatus(boolean checkAaaServerCertStatus)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getCheckAaaServerCertStatus()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUserCredential(UserCredential userCredential)",
    "returnType" : "void",
    "comment" : "\n     * Set the user credential information.\n     *\n     * @param userCredential The user credential to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserCredential getUserCredential()",
    "returnType" : "UserCredential",
    "comment" : "\n     * Get the user credential information.\n     *\n     * @return user credential information\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCertCredential(CertificateCredential certCredential)",
    "returnType" : "void",
    "comment" : "\n     * Set the certificate credential information.\n     *\n     * @param certCredential The certificate credential to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public CertificateCredential getCertCredential()",
    "returnType" : "CertificateCredential",
    "comment" : "\n     * Get the certificate credential information.\n     *\n     * @return certificate credential information\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSimCredential(SimCredential simCredential)",
    "returnType" : "void",
    "comment" : "\n     * Set the SIM credential information.\n     *\n     * @param simCredential The SIM credential to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public SimCredential getSimCredential()",
    "returnType" : "SimCredential",
    "comment" : "\n     * Get the SIM credential information.\n     *\n     * @return SIM credential information\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCaCertificate(X509Certificate caCertificate)",
    "returnType" : "void",
    "comment" : "\n     * Set the CA (Certification Authority) certificate associated with this credential.\n     *\n     * @param caCertificate The CA certificate to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCaCertificates(X509Certificate[] caCertificates)",
    "returnType" : "void",
    "comment" : "\n     * Set the CA (Certification Authority) certificates associated with this credential.\n     *\n     * @param caCertificates The list of CA certificates to set to\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate getCaCertificate()",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Get the CA (Certification Authority) certificate associated with this credential.\n     *\n     * @return CA certificate associated with this credential, {@code null} if certificate is not\n     * set or certificate is more than one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate[] getCaCertificates()",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Get the CA (Certification Authority) certificates associated with this credential.\n     *\n     * @return The list of CA certificates associated with this credential\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClientCertificateChain(X509Certificate[] certificateChain)",
    "returnType" : "void",
    "comment" : "\n     * Set the client certificate chain associated with this credential.\n     *\n     * @param certificateChain The client certificate chain to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate[] getClientCertificateChain()",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Get the client certificate chain associated with this credential.\n     *\n     * @return client certificate chain associated with this credential\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClientPrivateKey(PrivateKey clientPrivateKey)",
    "returnType" : "void",
    "comment" : "\n     * Set the client private key associated with this credential.\n     *\n     * @param clientPrivateKey the client private key to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrivateKey getClientPrivateKey()",
    "returnType" : "PrivateKey",
    "comment" : "\n     * Get the client private key associated with this credential.\n     *\n     * @return client private key associated with this credential.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object thatObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUniqueId()",
    "returnType" : "int",
    "comment" : "\n     * Get a unique identifier for Credential. This identifier depends only on items that remain\n     * constant throughout the lifetime of a subscription's credentials.\n     *\n     * @hide\n     * @return a Unique identifier for a Credential object\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean validate()",
    "returnType" : "boolean",
    "comment" : "\n     * Validate the configuration data.\n     *\n     * @return true on success or false on failure\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean verifyUserCredential()",
    "returnType" : "boolean",
    "comment" : "\n     * Verify user credential.\n     * If no CA certificate is provided, then the system uses the CAs in the trust store.\n     *\n     * @return true if user credential is valid, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean verifyCertCredential()",
    "returnType" : "boolean",
    "comment" : "\n     * Verify certificate credential, which is used for EAP-TLS.  This will verify\n     * that the necessary client key and certificates are provided.\n     * If no CA certificate is provided, then the system uses the CAs in the trust store.\n     *\n     * @return true if certificate credential is valid, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean verifySimCredential()",
    "returnType" : "boolean",
    "comment" : "\n     * Verify SIM credential.\n     *\n     * @return true if SIM credential is valid, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPrivateKeyEquals(PrivateKey key1, PrivateKey key2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isX509CertificateEquals(X509Certificate cert1, X509Certificate cert2)",
    "returnType" : "boolean",
    "comment" : "\n     * Verify two X.509 certificates are identical.\n     *\n     * @param cert1 a certificate to compare\n     * @param cert2 a certificate to compare\n     * @return {@code true} if given certificates are the same each other, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isX509CertificatesEquals(X509Certificate[] certs1, X509Certificate[] certs2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean verifySha256Fingerprint(X509Certificate[] certChain, byte[] expectedFingerprint) throws NoSuchAlgorithmException, CertificateEncodingException",
    "returnType" : "boolean",
    "comment" : "\n     * Verify that the digest for a certificate in the certificate chain matches expected\n     * fingerprint.  The certificate that matches the fingerprint is the client certificate.\n     *\n     * @param certChain Chain of certificates\n     * @param expectedFingerprint The expected SHA-256 digest of the client certificate\n     * @return true if the certificate chain contains a matching certificate, false otherwise\n     * @throws NoSuchAlgorithmException\n     * @throws CertificateEncodingException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MAX_REALM_BYTES", "mCreationTimeInMillis", "mExpirationTimeInMillis", "mRealm", "mCheckAaaServerCertStatus", "mUserCredential", "mCertCredential", "mSimCredential", "mCaCertificates", "mClientCertificateChain", "mClientPrivateKey", "CREATOR" ],
  "methodNames" : [ "public void setCreationTimeInMillis(long creationTimeInMillis)", "public long getCreationTimeInMillis()", "public void setExpirationTimeInMillis(long expirationTimeInMillis)", "public long getExpirationTimeInMillis()", "public void setRealm(String realm)", "public String getRealm()", "public void setCheckAaaServerCertStatus(boolean checkAaaServerCertStatus)", "public boolean getCheckAaaServerCertStatus()", "public void setUserCredential(UserCredential userCredential)", "public UserCredential getUserCredential()", "public void setCertCredential(CertificateCredential certCredential)", "public CertificateCredential getCertCredential()", "public void setSimCredential(SimCredential simCredential)", "public SimCredential getSimCredential()", "public void setCaCertificate(X509Certificate caCertificate)", "public void setCaCertificates(X509Certificate[] caCertificates)", "public X509Certificate getCaCertificate()", "public X509Certificate[] getCaCertificates()", "public void setClientCertificateChain(X509Certificate[] certificateChain)", "public X509Certificate[] getClientCertificateChain()", "public void setClientPrivateKey(PrivateKey clientPrivateKey)", "public PrivateKey getClientPrivateKey()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object thatObject)", "public int hashCode()", "public int getUniqueId()", "public String toString()", "public boolean validate()", "private boolean verifyUserCredential()", "private boolean verifyCertCredential()", "private boolean verifySimCredential()", "private static boolean isPrivateKeyEquals(PrivateKey key1, PrivateKey key2)", "public static boolean isX509CertificateEquals(X509Certificate cert1, X509Certificate cert2)", "private static boolean isX509CertificatesEquals(X509Certificate[] certs1, X509Certificate[] certs2)", "private static boolean verifySha256Fingerprint(X509Certificate[] certChain, byte[] expectedFingerprint) throws NoSuchAlgorithmException, CertificateEncodingException" ]
}