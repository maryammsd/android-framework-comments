{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ScrollView.java",
  "packageName" : "android.widget",
  "className" : "ScrollView",
  "comment" : "\n * A view group that allows the view hierarchy placed within it to be scrolled.\n * Scroll view may have only one direct child placed within it.\n * To add multiple views within the scroll view, make\n * the direct child you add a view group, for example {@link LinearLayout}, and\n * place additional views within that LinearLayout.\n *\n * <p>Scroll view supports vertical scrolling only. For horizontal scrolling,\n * use {@link HorizontalScrollView} instead.</p>\n *\n * <p>Never add a {@link androidx.recyclerview.widget.RecyclerView} or {@link ListView} to\n * a scroll view. Doing so results in poor user interface performance and a poor user\n * experience.</p>\n *\n * <p class=\"note\">\n * For vertical scrolling, consider {@link androidx.core.widget.NestedScrollView}\n * instead of scroll view which offers greater user interface flexibility and\n * support for the material design scrolling patterns.</p>\n *\n * <p>Material Design offers guidelines on how the appearance of\n * <a href=\"https://material.io/components/\">several UI components</a>, including app bars and\n * banners, should respond to gestures.</p>\n *\n * @attr ref android.R.styleable#ScrollView_fillViewport\n ",
  "links" : [ "android.widget.HorizontalScrollView", "android.widget.LinearLayout", "androidx.core.widget.NestedScrollView", "androidx.recyclerview.widget.RecyclerView", "android.widget.ListView" ],
  "variables" : [ {
    "name" : "ANIMATED_SCROLL_GAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SCROLL_FACTOR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLING_DESTRETCH_FACTOR",
    "type" : "float",
    "comment" : "\n     * When flinging the stretch towards scrolling content, it should destretch quicker than the\n     * fling would normally do. The visual effect of flinging the stretch looks strange as little\n     * appears to happen at first and then when the stretch disappears, the content starts\n     * scrolling quickly.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastScroll",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScroller",
    "type" : "OverScroller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEdgeGlowTop",
    "type" : "EdgeEffect",
    "comment" : "\n     * Tracks the state of the top edge glow.\n     *\n     * Even though this field is practically final, we cannot make it final because there are apps\n     * setting it via reflection and they need to keep working until they target Q.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mEdgeGlowBottom",
    "type" : "EdgeEffect",
    "comment" : "\n     * Tracks the state of the bottom edge glow.\n     *\n     * Even though this field is practically final, we cannot make it final because there are apps\n     * setting it via reflection and they need to keep working until they target Q.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastMotionY",
    "type" : "int",
    "comment" : "\n     * Position of the last motion event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsLayoutDirty",
    "type" : "boolean",
    "comment" : "\n     * True when the layout has changed but the traversal has not come through yet.\n     * Ideally the view hierarchy would keep track of this for us.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChildToScrollTo",
    "type" : "View",
    "comment" : "\n     * The child to give focus to in the event that a child has requested focus while the\n     * layout is dirty. This prevents the scroll from being wrong if the child has not been\n     * laid out before requesting focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsBeingDragged",
    "type" : "boolean",
    "comment" : "\n     * True if the user is currently dragging this ScrollView around. This is\n     * not the same as 'is being flinged', which can be checked by\n     * mScroller.isFinished() (flinging begins when the user lifts their finger).\n     ",
    "links" : [ ]
  }, {
    "name" : "mVelocityTracker",
    "type" : "VelocityTracker",
    "comment" : "\n     * Determines speed during touch scrolling\n     ",
    "links" : [ ]
  }, {
    "name" : "mFillViewport",
    "type" : "boolean",
    "comment" : "\n     * When set to true, the scroll view measure its child to make it fill the currently\n     * visible area.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSmoothScrollingEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether arrow scrolling is animated.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTouchSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverscrollDistance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverflingDistance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalScrollFactor",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivePointerId",
    "type" : "int",
    "comment" : "\n     * ID of the active pointer. This is used to retain consistency during\n     * drags/flings if multiple pointers are used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mScrollOffset",
    "type" : "int[]",
    "comment" : "\n     * Used during scrolling to retrieve the new offset within the window.\n     ",
    "links" : [ ]
  }, {
    "name" : "mScrollConsumed",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNestedYOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollStrictSpan",
    "type" : "StrictMode.Span",
    "comment" : " aka \"drag\"",
    "links" : [ ]
  }, {
    "name" : "mFlingStrictSpan",
    "type" : "StrictMode.Span",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDifferentialMotionFlingHelper",
    "type" : "DifferentialMotionFlingHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHapticScrollFeedbackProvider",
    "type" : "HapticScrollFeedbackProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_POINTER",
    "type" : "int",
    "comment" : "\n     * Sentinel value for no current active pointer.\n     * Used by {@link #mActivePointerId}.\n     ",
    "links" : [ "#mActivePointerId" ]
  }, {
    "name" : "mSavedState",
    "type" : "SavedState",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean shouldDelayChildPressedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected float getTopFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected float getBottomFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEdgeEffectColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the edge effect color for both top and bottom edge effects.\n     *\n     * @param color The color for the edge effects.\n     * @see #setTopEdgeEffectColor(int)\n     * @see #setBottomEdgeEffectColor(int)\n     * @see #getTopEdgeEffectColor()\n     * @see #getBottomEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBottomEdgeEffectColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bottom edge effect color.\n     *\n     * @param color The color for the bottom edge effect.\n     * @see #setTopEdgeEffectColor(int)\n     * @see #setEdgeEffectColor(int)\n     * @see #getTopEdgeEffectColor()\n     * @see #getBottomEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTopEdgeEffectColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the top edge effect color.\n     *\n     * @param color The color for the top edge effect.\n     * @see #setBottomEdgeEffectColor(int)\n     * @see #setEdgeEffectColor(int)\n     * @see #getTopEdgeEffectColor()\n     * @see #getBottomEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTopEdgeEffectColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the top edge effect color.\n     *\n     * @return The top edge effect color.\n     * @see #setEdgeEffectColor(int)\n     * @see #setTopEdgeEffectColor(int)\n     * @see #setBottomEdgeEffectColor(int)\n     * @see #getBottomEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBottomEdgeEffectColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bottom edge effect color.\n     *\n     * @return The bottom edge effect color.\n     * @see #setEdgeEffectColor(int)\n     * @see #setTopEdgeEffectColor(int)\n     * @see #setBottomEdgeEffectColor(int)\n     * @see #getTopEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxScrollAmount()",
    "returnType" : "int",
    "comment" : "\n     * @return The maximum amount this scroll view will scroll in response to\n     *   an arrow event.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initScrollView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean canScroll()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Returns true this ScrollView can be scrolled\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFillViewport()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this ScrollView's content is stretched to fill the viewport.\n     *\n     * @return True if the content fills the viewport, false otherwise.\n     *\n     * @attr ref android.R.styleable#ScrollView_fillViewport\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFillViewport(boolean fillViewport)",
    "returnType" : "void",
    "comment" : "\n     * Indicates this ScrollView whether it should stretch its content height to fill\n     * the viewport or not.\n     *\n     * @param fillViewport True to stretch the content's height to the viewport's\n     *        boundaries, false otherwise.\n     *\n     * @attr ref android.R.styleable#ScrollView_fillViewport\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSmoothScrollingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether arrow scrolling will animate its transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSmoothScrollingEnabled(boolean smoothScrollingEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether arrow scrolling will animate its transition.\n     * @param smoothScrollingEnabled whether arrow scrolling will animate its transition\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean executeKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * You can call this function yourself to have the scroll view perform\n     * scrolling from a key event, just as if the event had been dispatched to\n     * it by the view hierarchy.\n     *\n     * @param event The key event to execute.\n     * @return Return true if the event was handled, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean inChild(int x, int y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initOrResetVelocityTracker()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initVelocityTrackerIfNotExists()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initDifferentialFlingHelperIfNotExists()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initHapticScrollFeedbackProviderIfNotExists()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recycleVelocityTracker()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onInterceptTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldDisplayEdgeEffects()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSecondaryPointerUp(MotionEvent ev)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private int getScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findFocusableViewInBounds(boolean topFocus, int top, int bottom)",
    "returnType" : "View",
    "comment" : "\n     * <p>\n     * Finds the next focusable component that fits in the specified bounds.\n     * </p>\n     *\n     * @param topFocus look for a candidate is the one at the top of the bounds\n     *                 if topFocus is true, or at the bottom of the bounds if topFocus is\n     *                 false\n     * @param top      the top offset of the bounds in which a focusable must be\n     *                 found\n     * @param bottom   the bottom offset of the bounds in which a focusable must\n     *                 be found\n     * @return the next focusable component in the bounds or null if none can\n     *         be found\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pageScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Handles scrolling in response to a \"page up/down\" shortcut press. This\n     * method will scroll the view by one page up or down and give the focus\n     * to the topmost/bottommost component in the new visible area. If no\n     * component is a good candidate for focus, this scrollview reclaims the\n     * focus.</p>\n     *\n     * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n     *                  to go one page up or\n     *                  {@link android.view.View#FOCUS_DOWN} to go one page down\n     * @return true if the key event is consumed by this method, false otherwise\n     ",
    "links" : [ "android.view.View#FOCUS_DOWN", "android.view.View#FOCUS_UP" ]
  }, {
    "name" : "public boolean fullScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Handles scrolling in response to a \"home/end\" shortcut press. This\n     * method will scroll the view to the top or bottom and give the focus\n     * to the topmost/bottommost component in the new visible area. If no\n     * component is a good candidate for focus, this scrollview reclaims the\n     * focus.</p>\n     *\n     * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n     *                  to go the top of the view or\n     *                  {@link android.view.View#FOCUS_DOWN} to go the bottom\n     * @return true if the key event is consumed by this method, false otherwise\n     ",
    "links" : [ "android.view.View#FOCUS_DOWN", "android.view.View#FOCUS_UP" ]
  }, {
    "name" : "private boolean scrollAndFocus(int direction, int top, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Scrolls the view to make the area defined by <code>top</code> and\n     * <code>bottom</code> visible. This method attempts to give the focus\n     * to a component visible in this area. If no component can be focused in\n     * the new visible area, the focus is reclaimed by this ScrollView.</p>\n     *\n     * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n     *                  to go upward, {@link android.view.View#FOCUS_DOWN} to downward\n     * @param top       the top offset of the new area to be made visible\n     * @param bottom    the bottom offset of the new area to be made visible\n     * @return true if the key event is consumed by this method, false otherwise\n     ",
    "links" : [ "android.view.View#FOCUS_DOWN", "android.view.View#FOCUS_UP" ]
  }, {
    "name" : "public boolean arrowScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Handle scrolling in response to an up or down arrow click.\n     *\n     * @param direction The direction corresponding to the arrow key that was\n     *                  pressed\n     * @return True if we consumed the event, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isOffScreen(View descendant)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the descendant of this scroll view is scrolled off\n     *  screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isWithinDeltaOfScreen(View descendant, int delta, int height)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the descendant of this scroll view is within delta\n     *  pixels of being on the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doScrollY(int delta)",
    "returnType" : "void",
    "comment" : "\n     * Smooth scroll by a Y delta\n     *\n     * @param delta the number of pixels to scroll by on the Y axis\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void smoothScrollBy(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.\n     *\n     * @param dx the number of pixels to scroll by on the X axis\n     * @param dy the number of pixels to scroll by on the Y axis\n     ",
    "links" : [ "android.view.View#scrollBy" ]
  }, {
    "name" : "public final void smoothScrollTo(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #scrollTo}, but scroll smoothly instead of immediately.\n     *\n     * @param x the position where to scroll on the X axis\n     * @param y the position where to scroll on the Y axis\n     ",
    "links" : [ "#scrollTo" ]
  }, {
    "name" : "protected int computeVerticalScrollRange()",
    "returnType" : "int",
    "comment" : "\n     * <p>The scroll range of a scroll view is the overall height of all of its\n     * children.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void computeScroll()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int consumeFlingInStretch(int unconsumed)",
    "returnType" : "int",
    "comment" : "\n     * Used by consumeFlingInHorizontalStretch() and consumeFlinInVerticalStretch() for\n     * consuming deltas from EdgeEffects\n     * @param unconsumed The unconsumed delta that the EdgeEffets may consume\n     * @return The unconsumed delta after the EdgeEffects have had an opportunity to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scrollToDescendant(@NonNull View child)",
    "returnType" : "void",
    "comment" : "\n     * Scrolls the view to the given child.\n     *\n     * @param child the View to scroll to\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean scrollToChildRect(Rect rect, boolean immediate)",
    "returnType" : "boolean",
    "comment" : "\n     * If rect is off screen, scroll just enough to get it (or at least the\n     * first screen size chunk of it) on screen.\n     *\n     * @param rect      The rectangle.\n     * @param immediate True to scroll immediately without animation\n     * @return true if scrolling was performed\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)",
    "returnType" : "int",
    "comment" : "\n     * Compute the amount to scroll in the Y direction in order to get\n     * a rectangle completely on the screen (or, if taller than the screen,\n     * at least the first screen size chunk of it).\n     *\n     * @param rect The rect.\n     * @return The scroll delta.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestChildFocus(View child, View focused)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)",
    "returnType" : "boolean",
    "comment" : "\n     * When looking for focus in children of a scroll view, need to be a little\n     * more careful not to give focus to something that is scrolled off screen.\n     *\n     * This is more expensive than the default {@link android.view.ViewGroup}\n     * implementation, otherwise this behavior might have been made the default.\n     ",
    "links" : [ "android.view.ViewGroup" ]
  }, {
    "name" : "public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isViewDescendantOf(View child, View parent)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if child is a descendant of parent, (or equal to the parent).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fling(int velocityY)",
    "returnType" : "void",
    "comment" : "\n     * Fling the scroll view\n     *\n     * @param velocityY The initial velocity in the Y direction. Positive\n     *                  numbers mean that the finger/cursor is moving down the screen,\n     *                  which means we want to scroll towards the top.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void flingWithNestedDispatch(int velocityY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldAbsorb(EdgeEffect edgeEffect, int velocity)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if edgeEffect should call onAbsorb() with veclocity or false if it should\n     * animate with a fling. It will animate with a fling if the velocity will remove the\n     * EdgeEffect through its normal operation.\n     *\n     * @param edgeEffect The EdgeEffect that might absorb the velocity.\n     * @param velocity The velocity of the fling motion\n     * @return true if the velocity should be absorbed or false if it should be flung.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void endDrag()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scrollTo(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This version also clamps the scrolling to the bounds of our child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onNestedScrollAccepted(View child, View target, int axes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStopNestedScroll(View target)",
    "returnType" : "void",
    "comment" : "\n     * @inheritDoc\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed)",
    "returnType" : "boolean",
    "comment" : "\n     * @inheritDoc\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int clamp(int n, int my, int child)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean shouldDelayChildPressedState()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "public void setEdgeEffectColor(@ColorInt int color)", "public void setBottomEdgeEffectColor(@ColorInt int color)", "public void setTopEdgeEffectColor(@ColorInt int color)", "public int getTopEdgeEffectColor()", "public int getBottomEdgeEffectColor()", "public int getMaxScrollAmount()", "private void initScrollView()", "public void addView(View child)", "public void addView(View child, int index)", "public void addView(View child, ViewGroup.LayoutParams params)", "public void addView(View child, int index, ViewGroup.LayoutParams params)", "private boolean canScroll()", "public boolean isFillViewport()", "public void setFillViewport(boolean fillViewport)", "public boolean isSmoothScrollingEnabled()", "public void setSmoothScrollingEnabled(boolean smoothScrollingEnabled)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean executeKeyEvent(KeyEvent event)", "private boolean inChild(int x, int y)", "private void initOrResetVelocityTracker()", "private void initVelocityTrackerIfNotExists()", "private void initDifferentialFlingHelperIfNotExists()", "private void initHapticScrollFeedbackProviderIfNotExists()", "private void recycleVelocityTracker()", "public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "private boolean shouldDisplayEdgeEffects()", "public boolean onTouchEvent(MotionEvent ev)", "private void onSecondaryPointerUp(MotionEvent ev)", "public boolean onGenericMotionEvent(MotionEvent event)", "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "private int getScrollRange()", "private View findFocusableViewInBounds(boolean topFocus, int top, int bottom)", "public boolean pageScroll(int direction)", "public boolean fullScroll(int direction)", "private boolean scrollAndFocus(int direction, int top, int bottom)", "public boolean arrowScroll(int direction)", "private boolean isOffScreen(View descendant)", "private boolean isWithinDeltaOfScreen(View descendant, int delta, int height)", "private void doScrollY(int delta)", "public final void smoothScrollBy(int dx, int dy)", "public final void smoothScrollTo(int x, int y)", "protected int computeVerticalScrollRange()", "protected int computeVerticalScrollOffset()", "protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)", "protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed)", "public void computeScroll()", "private int consumeFlingInStretch(int unconsumed)", "public void scrollToDescendant(@NonNull View child)", "private boolean scrollToChildRect(Rect rect, boolean immediate)", "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)", "public void requestChildFocus(View child, View focused)", "protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)", "public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)", "public void requestLayout()", "protected void onDetachedFromWindow()", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "private static boolean isViewDescendantOf(View child, View parent)", "public void fling(int velocityY)", "private void flingWithNestedDispatch(int velocityY)", "private boolean shouldAbsorb(EdgeEffect edgeEffect, int velocity)", "private void endDrag()", "public void scrollTo(int x, int y)", "public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)", "public void onNestedScrollAccepted(View child, View target, int axes)", "public void onStopNestedScroll(View target)", "public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)", "public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed)", "public void draw(Canvas canvas)", "private static int clamp(int n, int my, int child)", "protected void onRestoreInstanceState(Parcelable state)", "protected Parcelable onSaveInstanceState()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ],
  "variableNames" : [ "ANIMATED_SCROLL_GAP", "MAX_SCROLL_FACTOR", "TAG", "FLING_DESTRETCH_FACTOR", "mLastScroll", "mTempRect", "mScroller", "mEdgeGlowTop", "mEdgeGlowBottom", "mLastMotionY", "mIsLayoutDirty", "mChildToScrollTo", "mIsBeingDragged", "mVelocityTracker", "mFillViewport", "mSmoothScrollingEnabled", "mTouchSlop", "mMinimumVelocity", "mMaximumVelocity", "mOverscrollDistance", "mOverflingDistance", "mVerticalScrollFactor", "mActivePointerId", "mScrollOffset", "mScrollConsumed", "mNestedYOffset", "mScrollStrictSpan", "mFlingStrictSpan", "mDifferentialMotionFlingHelper", "mHapticScrollFeedbackProvider", "INVALID_POINTER", "mSavedState" ]
}