{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/CaptureRequest.java",
  "packageName" : "android.hardware.camera2",
  "className" : "Builder",
  "comment" : "\n     * A builder for capture requests.\n     *\n     * <p>To obtain a builder instance, use the\n     * {@link CameraDevice#createCaptureRequest} method, which initializes the\n     * request fields to one of the templates defined in {@link CameraDevice}.\n     *\n     * @see CameraDevice#createCaptureRequest\n     * @see CameraDevice#TEMPLATE_PREVIEW\n     * @see CameraDevice#TEMPLATE_RECORD\n     * @see CameraDevice#TEMPLATE_STILL_CAPTURE\n     * @see CameraDevice#TEMPLATE_VIDEO_SNAPSHOT\n     * @see CameraDevice#TEMPLATE_MANUAL\n     ",
  "variables" : [ {
    "name" : "mRequest",
    "type" : "CaptureRequest",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addTarget(@NonNull Surface outputTarget)",
    "returnType" : "void",
    "comment" : "\n         * <p>Add a surface to the list of targets for this request</p>\n         *\n         * <p>The Surface added must be one of the surfaces included in the most\n         * recent call to {@link CameraDevice#createCaptureSession}, when the\n         * request is given to the camera device.</p>\n         *\n         * <p>Adding a target more than once has no effect.</p>\n         *\n         * @param outputTarget Surface to use as an output target for this request\n         ",
    "links" : [ "CameraDevice#createCaptureSession" ]
  }, {
    "name" : "public void removeTarget(@NonNull Surface outputTarget)",
    "returnType" : "void",
    "comment" : "\n         * <p>Remove a surface from the list of targets for this request.</p>\n         *\n         * <p>Removing a target that is not currently added has no effect.</p>\n         *\n         * @param outputTarget Surface to use as an output target for this request\n         ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "\n         * Set a capture request field to a value. The field definitions can be\n         * found in {@link CaptureRequest}.\n         *\n         * <p>Setting a field to {@code null} will remove that field from the capture request.\n         * Unless the field is optional, removing it will likely produce an error from the camera\n         * device when the request is submitted.</p>\n         *\n         * @param key The metadata field to write.\n         * @param value The value to set the field to, which must be of a matching\n         * type to the key.\n         ",
    "links" : [ "CaptureRequest" ]
  }, {
    "name" : "public T get(Key<T> key)",
    "returnType" : "T",
    "comment" : "\n         * Get a capture request field value. The field definitions can be\n         * found in {@link CaptureRequest}.\n         *\n         * @throws IllegalArgumentException if the key was not valid\n         *\n         * @param key The metadata field to read.\n         * @return The value of that key, or {@code null} if the field is not set.\n         ",
    "links" : [ "CaptureRequest" ]
  }, {
    "name" : "public Builder setPhysicalCameraKey(@NonNull Key<T> key, T value, @NonNull String physicalCameraId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a capture request field to a value. The field definitions can be\n         * found in {@link CaptureRequest}.\n         *\n         * <p>Setting a field to {@code null} will remove that field from the capture request.\n         * Unless the field is optional, removing it will likely produce an error from the camera\n         * device when the request is submitted.</p>\n         *\n         *<p>This method can be called for logical camera devices, which are devices that have\n         * REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability and calls to\n         * {@link CameraCharacteristics#getPhysicalCameraIds} return a non-empty set of\n         * physical devices that are backing the logical camera. The camera Id included in the\n         * 'physicalCameraId' argument selects an individual physical device that will receive\n         * the customized capture request field.</p>\n         *\n         * @throws IllegalArgumentException if the physical camera id is not valid\n         *\n         * @param key The metadata field to write.\n         * @param value The value to set the field to, which must be of a matching type to the key.\n         * @param physicalCameraId A valid physical camera Id. The valid camera Ids can be obtained\n         *                         via calls to {@link CameraCharacteristics#getPhysicalCameraIds}.\n         * @return The builder object.\n         ",
    "links" : [ "CaptureRequest", "CameraCharacteristics#getPhysicalCameraIds", "CameraCharacteristics#getPhysicalCameraIds" ]
  }, {
    "name" : "public T getPhysicalCameraKey(Key<T> key, @NonNull String physicalCameraId)",
    "returnType" : "T",
    "comment" : "\n         * Get a capture request field value for a specific physical camera Id. The field\n         * definitions can be found in {@link CaptureRequest}.\n         *\n         *<p>This method can be called for logical camera devices, which are devices that have\n         * REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability and calls to\n         * {@link CameraCharacteristics#getPhysicalCameraIds} return a non-empty list of\n         * physical devices that are backing the logical camera. The camera Id included in the\n         * 'physicalCameraId' argument selects an individual physical device and returns\n         * its specific capture request field.</p>\n         *\n         * @throws IllegalArgumentException if the key or physical camera id were not valid\n         *\n         * @param key The metadata field to read.\n         * @param physicalCameraId A valid physical camera Id. The valid camera Ids can be obtained\n         *                         via calls to {@link CameraCharacteristics#getPhysicalCameraIds}.\n         * @return The value of that key, or {@code null} if the field is not set.\n         ",
    "links" : [ "CaptureRequest", "CameraCharacteristics#getPhysicalCameraIds", "CameraCharacteristics#getPhysicalCameraIds" ]
  }, {
    "name" : "public void setTag(@Nullable Object tag)",
    "returnType" : "void",
    "comment" : "\n         * Set a tag for this request.\n         *\n         * <p>This tag is not used for anything by the camera device, but can be\n         * used by an application to easily identify a CaptureRequest when it is\n         * returned by\n         * {@link CameraCaptureSession.CaptureCallback#onCaptureCompleted CaptureCallback.onCaptureCompleted}\n         *\n         * @param tag an arbitrary Object to store with this request\n         * @see CaptureRequest#getTag\n         ",
    "links" : [ "CameraCaptureSession.CaptureCallback#onCaptureCompleted" ]
  }, {
    "name" : "public void setPartOfCHSRequestList(boolean partOfCHSList)",
    "returnType" : "void",
    "comment" : "\n         * <p>Mark this request as part of a constrained high speed request list created by\n         * {@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList}.\n         * A constrained high speed request list contains some constrained high speed capture\n         * requests with certain interleaved pattern that is suitable for high speed preview/video\n         * streaming.</p>\n         *\n         * @hide\n         ",
    "links" : [ "android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList" ]
  }, {
    "name" : "public CaptureRequest build()",
    "returnType" : "CaptureRequest",
    "comment" : "\n         * Build a request using the current target Surfaces and settings.\n         * <p>Note that, although it is possible to create a {@code CaptureRequest} with no target\n         * {@link Surface}s, passing such a request into {@link CameraCaptureSession#capture},\n         * {@link CameraCaptureSession#captureBurst},\n         * {@link CameraCaptureSession#setRepeatingBurst}, or\n         * {@link CameraCaptureSession#setRepeatingRequest} will cause that method to throw an\n         * {@link IllegalArgumentException}.</p>\n         *\n         * @return A new capture request instance, ready for submission to the\n         * camera device.\n         ",
    "links" : [ "Surface", "CameraCaptureSession#capture", "CameraCaptureSession#captureBurst", "CameraCaptureSession#setRepeatingBurst", "CameraCaptureSession#setRepeatingRequest", "IllegalArgumentException" ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRequest" ],
  "methodNames" : [ "public void addTarget(@NonNull Surface outputTarget)", "public void removeTarget(@NonNull Surface outputTarget)", "public void set(@NonNull Key<T> key, T value)", "public T get(Key<T> key)", "public Builder setPhysicalCameraKey(@NonNull Key<T> key, T value, @NonNull String physicalCameraId)", "public T getPhysicalCameraKey(Key<T> key, @NonNull String physicalCameraId)", "public void setTag(@Nullable Object tag)", "public void setPartOfCHSRequestList(boolean partOfCHSList)", "public CaptureRequest build()", "public boolean isEmpty()" ]
}