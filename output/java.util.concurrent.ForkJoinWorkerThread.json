{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ForkJoinWorkerThread.java",
  "packageName" : "java.util.concurrent",
  "className" : "ForkJoinWorkerThread",
  "comment" : "\n * A thread managed by a {@link ForkJoinPool}, which executes\n * {@link ForkJoinTask}s.\n * This class is subclassable solely for the sake of adding\n * functionality -- there are no overridable methods dealing with\n * scheduling or execution.  However, you can override initialization\n * and termination methods surrounding the main task processing loop.\n * If you do create such a subclass, you will also need to supply a\n * custom {@link ForkJoinPool.ForkJoinWorkerThreadFactory} to\n * {@linkplain ForkJoinPool#ForkJoinPool(int, ForkJoinWorkerThreadFactory,\n * UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)\n * use it} in a {@code ForkJoinPool}.\n *\n * @since 1.7\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.ForkJoinTask", "java.util.concurrent.ForkJoinPool", "ForkJoinPool.ForkJoinWorkerThreadFactory" ],
  "variables" : [ {
    "name" : "pool",
    "type" : "ForkJoinPool",
    "comment" : " the pool this thread works in",
    "links" : [ ]
  }, {
    "name" : "workQueue",
    "type" : "ForkJoinPool.WorkQueue",
    "comment" : " work-stealing mechanics",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ForkJoinPool getPool()",
    "returnType" : "ForkJoinPool",
    "comment" : "\n     * Returns the pool hosting this thread.\n     *\n     * @return the pool\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPoolIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the unique index number of this thread in its pool.\n     * The returned value ranges from zero to the maximum number of\n     * threads (minus one) that may exist in the pool, and does not\n     * change during the lifetime of the thread.  This method may be\n     * useful for applications that track status or collect results\n     * per-worker-thread rather than per-task.\n     *\n     * @return the index number\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onStart()",
    "returnType" : "void",
    "comment" : "\n     * Initializes internal state after construction but before\n     * processing any tasks. If you override this method, you must\n     * invoke {@code super.onStart()} at the beginning of the method.\n     * Initialization requires care: Most fields must have legal\n     * default values, to ensure that attempted accesses from other\n     * threads work correctly even before this thread starts\n     * processing tasks.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onTermination(Throwable exception)",
    "returnType" : "void",
    "comment" : "\n     * Performs cleanup associated with termination of this worker\n     * thread.  If you override this method, you must invoke\n     * {@code super.onTermination} at the end of the overridden method.\n     *\n     * @param exception the exception causing this thread to abort due\n     * to an unrecoverable error, or {@code null} if completed normally\n     ",
    "links" : [ ]
  }, {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "\n     * This method is required to be public, but should never be\n     * called explicitly. It performs the main run loop to execute\n     * {@link ForkJoinTask}s.\n     ",
    "links" : [ "java.util.concurrent.ForkJoinTask" ]
  } ],
  "methodNames" : [ "public ForkJoinPool getPool()", "public int getPoolIndex()", "protected void onStart()", "protected void onTermination(Throwable exception)", "public void run()" ],
  "variableNames" : [ "pool", "workQueue" ]
}