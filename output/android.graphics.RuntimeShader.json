{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/RuntimeShader.java",
  "packageName" : "android.graphics",
  "className" : "RuntimeShader",
  "comment" : "\n * <p>A {@link RuntimeShader} calculates a per-pixel color based on the output of a user defined\n * Android Graphics Shading Language (AGSL) function.</p>\n *\n * <h3>Android Graphics Shading Language</h3>\n * <p>The AGSL syntax is very similar to OpenGL ES Shading Language, but there are some important\n * differences that are highlighted here. Most of these differences are summed up in one basic fact:\n * <b>With GPU shading languages, you are programming a stage of the GPU pipeline. With AGSL, you\n * are programming a stage of the {@link Canvas} or {@link RenderNode} drawing pipeline.</b></p>\n *\n * <p>In particular, a GLSL fragment shader controls the entire behavior of the GPU between the\n * rasterizer and the blending hardware. That shader does all of the work to compute a color, and\n * the color it generates is exactly what is fed to the blending stage of the pipeline.</p>\n *\n * <p>In contrast, AGSL functions exist as part of a larger pipeline. When you issue a\n * {@link Canvas} drawing operation, Android (generally) assembles a single GPU fragment shader to\n * do all of the required work. This shader typically includes several pieces. For example, it might\n * include:</p>\n * <ul>\n *  <li>Evaluating whether a pixel falls inside or outside of the shape being drawn (or on the\n *  border, where it might apply antialiasing).</li>\n *  <li>Evaluating whether a pixel falls inside or outside of the clipping region (again, with\n *  possible antialiasing logic for border pixels).</li>\n *  <li>Logic for the {@link Shader}, {@link ColorFilter}, and {@link BlendMode} on the\n *  {@link Paint}.</li>\n *  <li>Color space conversion code, as part of Android's color management.</li>\n * </ul>\n *\n * <p>A {@link RuntimeShader}, like other {@link Shader} types, effectively contributes a function\n * to the GPU's fragment shader.</p>\n *\n * <h3>AGSL Shader Execution</h3>\n * <p>Just like a GLSL shader, an AGSL shader begins execution in a main function. Unlike GLSL, the\n * function receives as an input parameter the position of the pixel within the {@link Canvas} or\n * {@link RenderNode} coordinate space (similar to gl_fragCoord) and returns the color to be shaded\n * as a vec4 (similar to out vec4 color or gl_FragColor in GLSL).</p>\n *\n * <pre class=\"prettyprint\">\n * vec4 main(vec2 canvas_coordinates);\n * </pre>\n *\n * <p>AGSL and GLSL use different coordinate spaces by default. In GLSL, the fragment coordinate\n * (fragCoord) is relative to the lower left. AGSL matches the screen coordinate system of the\n * Android {@link Canvas} which has its origin as the upper left corner. This means that the\n * coordinates provided as a parameter in the main function are local to the canvas with the\n * exception of any {@link Shader#getLocalMatrix(Matrix)} transformations applied to this shader.\n * Additionally, if the shader is invoked by another using {@link #setInputShader(String, Shader)},\n * then that parent shader may modify the input coordinates arbitrarily.</p>\n *\n * <h3>AGSL and Color Spaces</h3>\n * <p>Android Graphics and by extension {@link RuntimeShader} are color managed.  The working\n * {@link ColorSpace} for an AGSL shader is defined to be the color space of the destination, which\n * in most cases is determined by {@link Window#setColorMode(int)}.</p>\n *\n * <p>When authoring an AGSL shader, you won't know what the working color space is. For many\n * effects, this is fine because by default color inputs are automatically converted into the\n * working color space. For certain effects, it may be important to do some math in a fixed, known\n * color space. A common example is lighting - to get physically accurate lighting, math should be\n * done in a linear color space. To help with this, AGSL provides two intrinsic functions that\n * convert colors between the working color space and the\n * {@link ColorSpace.Named#LINEAR_EXTENDED_SRGB} color space:\n *\n * <pre class=\"prettyprint\">\n * vec3 toLinearSrgb(vec3 color);\n * vec3 fromLinearSrgb(vec3 color);</pre>\n *\n * <h3>AGSL and Premultiplied Alpha</h3>\n * <p>When dealing with transparent colors, there are two (common) possible representations:\n * straight (unassociated) alpha and premultiplied (associated) alpha. In ASGL the color returned\n * by the main function is expected to be premultiplied.  AGSL's use of premultiplied alpha\n * implies:\n * </p>\n *\n * <ul>\n *  <li>If your AGSL shader will return transparent colors, be sure to multiply the RGB by A.  The\n *  resulting color should be [R*A, G*A, B*A, A], not [R, G, B, A].</li>\n *  <li>For more complex shaders, you must understand which of your colors are premultiplied vs.\n *  straight. Many operations don't make sense if you mix both kinds of color together.</li>\n * </ul>\n *\n * <h3>Uniforms</h3>\n * <p>AGSL, like GLSL, exposes the concept of uniforms. An AGSL uniform is defined as a read-only,\n * global variable that is accessible by the AGSL code and is initialized by a number of setter\n * methods on {@link RuntimeShader}. AGSL exposes two primitive uniform data types (float, int) and\n * two specialized types (colors, shaders) that are outlined below.</p>\n *\n * <h4>Primitive Uniforms</h4>\n * <p>There are two primitive uniform types supported by AGSL, float and int. For these types and\n * uniforms representing a grouping of these types, like arrays and matrices, there are\n * corresponding {@link RuntimeShader} methods to initialize them.\n * <table border=\"2\" width=\"85%\" align=\"center\" cellpadding=\"5\">\n *     <thead>\n *         <tr><th>Java Type</th> <th>AGSL Type</th> <th>Method</th> </tr>\n *     </thead>\n *\n *     <tbody>\n *     <tr>\n *         <td rowspan=\"4\">Floats</td>\n *         <td>float</td>\n *         <td>{@link RuntimeShader#setFloatUniform(String, float)}</td>\n *     </tr>\n *     <tr>\n *         <td>vec2</td>\n *         <td>{@link RuntimeShader#setFloatUniform(String, float, float)}</td>\n *     </tr>\n *     <tr>\n *         <td>vec3</td>\n *         <td>{@link RuntimeShader#setFloatUniform(String, float, float, float)}</td>\n *     </tr>\n *     <tr>\n *         <td>vec4</td>\n *         <td>{@link RuntimeShader#setFloatUniform(String, float, float, float, float)}</td>\n *     </tr>\n *     <tr>\n *         <td rowspan=\"4\">Integers</td>\n *         <td>int</td>\n *         <td>{@link RuntimeShader#setIntUniform(String, int)}</td>\n *     </tr>\n *     <tr>\n *         <td>ivec2</td>\n *         <td>{@link RuntimeShader#setIntUniform(String, int, int)}</td>\n *     </tr>\n *     <tr>\n *         <td>ivec3</td>\n *         <td>{@link RuntimeShader#setIntUniform(String, int, int, int)}</td>\n *     </tr>\n *     <tr>\n *         <td>ivec4</td>\n *         <td>{@link RuntimeShader#setIntUniform(String, int, int, int, int)}</td>\n *     </tr>\n *     <tr>\n *         <td rowspan=\"2\">Matrices and Arrays</td>\n *         <td>mat2, mat3, and mat4, and float[]</td>\n *         <td>{@link RuntimeShader#setFloatUniform(String, float[])}</td>\n *     </tr>\n *     <tr>\n *         <td>int[]</td>\n *         <td>{@link RuntimeShader#setIntUniform(String, int[])}</td>\n *     </tr>\n *     </tbody>\n * </table>\n *\n * For example, a simple AGSL shader making use of a float uniform to modulate the transparency\n * of the output color would look like:</p>\n *\n * <pre class=\"prettyprint\">\n * uniform float alpha;\n * vec4 main(vec2 canvas_coordinates) {\n *     vec3 red = vec3(1.0, 0.0, 0.0);\n *     return vec4(red * alpha, alpha);\n * }</pre>\n *\n * <p>After creating a {@link RuntimeShader} with that program the uniform can then be initialized\n * and updated per frame by calling {@link RuntimeShader#setFloatUniform(String, float)} with the\n * value of alpha.  The value of a primitive uniform defaults to 0 if it is declared in the AGSL\n * shader but not initialized.</p>\n *\n * <h4>Color Uniforms</h4>\n * <p>AGSL doesn't know if uniform variables contain colors, it won't automatically convert them to\n * the working colorspace of the shader at runtime.  However, you can label your vec4 uniform with\n * the \"layout(color)\" qualifier which lets Android know that the uniform will be used as a color.\n * Doing so allows AGSL to transform the uniform value to the working color space. In AGSL, declare\n * the uniform like this:\n *\n * <pre class=\"prettyprint\">\n * layout(color) uniform vec4 inputColorA;\n * layout(color) uniform vec4 inputColorB;\n * vec4 main(vec2 canvas_coordinates) {\n *     // blend the two colors together and return the resulting color\n *     return mix(inputColorA, inputColorB, 0.5);\n * }</pre>\n *\n * <p>After creating a {@link RuntimeShader} with that program the uniforms can\n * then be initialized and updated per frame by calling\n * {@link RuntimeShader#setColorUniform(String, int)},\n * {@link RuntimeShader#setColorUniform(String, long)}, or\n * {@link RuntimeShader#setColorUniform(String, Color)} with the desired colors.  The value of a\n * color uniform is undefined if it is declared in the AGSL shader but not initialized.</p>\n *\n * <h4>Shader Uniforms</h4>\n * In GLSL, a fragment shader can sample a texture. For AGSL instead of sampling textures you can\n * sample from any {@link Shader}, which includes but is not limited to {@link BitmapShader}. To\n * make it clear that you are operating on an {@link Shader} object there is no \"sample\"\n * method. Instead, the shader uniform has an \"eval()\" method. This distinction enables AGSL shaders\n * to sample from existing bitmap and gradient shaders as well as other {@link RuntimeShader}\n * objects.  In AGSL, declare the uniform like this:\n *\n * <pre class=\"prettyprint\">\n * uniform shader myShader;\n * vec4 main(vec2 canvas_coordinates) {\n *     // swap the red and blue color channels when sampling from myShader\n *     return myShader.eval(canvas_coordinates).bgra;\n * }</pre>\n *\n * <p>After creating a {@link RuntimeShader} with that program the shader uniform can\n * then be initialized and updated per frame by calling\n * {@link RuntimeShader#setInputShader(String, Shader)} with the desired shader. The value of a\n * shader uniform is undefined if it is declared in the AGSL shader but not initialized.</p>\n *\n * <p>Although most {@link BitmapShader}s contain colors that should be color managed, some contain\n * data that isn't actually colors. This includes bitmaps storing normals, material properties\n * (e.g. roughness), heightmaps, or any other purely mathematical data that happens to be stored in\n * a bitmap. When using these kinds of shaders in AGSL, you probably want to initialize them with\n * {@link #setInputBuffer(String, BitmapShader)}. Shaders initialized this way work much like\n * a regular {@link BitmapShader} (including filtering and tiling), with a few major differences:\n * <ul>\n *  <li>No color space transformation is applied (the color space of the bitmap is ignored).</li>\n *  <li>Bitmaps that return false for {@link Bitmap#isPremultiplied()} are not automatically\n *  premultiplied.</li>\n * </ul>\n *\n * <p>In addition, when sampling from a {@link BitmapShader} be aware that the shader does not use\n * normalized coordinates (like a texture in GLSL). It uses (0, 0) in the upper-left corner, and\n * (width, height) in the bottom-right corner. Normally, this is exactly what you want. If you're\n * evaluating the shader with coordinates based on the ones passed to your AGSL program, the scale\n * is correct. However, if you want to adjust those coordinates (to do some kind of re-mapping of\n * the bitmap), remember that the coordinates are local to the canvas.</p>\n *\n ",
  "links" : [ "android.graphics.ColorFilter", "android.graphics.BitmapShader", "#setInputBuffer(String", "android.graphics.Shader#getLocalMatrix(Matrix)", "ColorSpace.Named#LINEAR_EXTENDED_SRGB", "android.graphics.RenderNode", "android.view.Window#setColorMode(int)", "android.graphics.BlendMode", "android.graphics.Bitmap#isPremultiplied()", "android.graphics.RuntimeShader#setFloatUniform(String", "android.graphics.Shader", "android.graphics.Canvas", "android.graphics.Paint", "#setInputShader(String", "android.graphics.RuntimeShader#setInputShader(String", "android.graphics.RuntimeShader", "android.graphics.ColorSpace", "android.graphics.RuntimeShader#setColorUniform(String", "android.graphics.RuntimeShader#setIntUniform(String" ],
  "variables" : [ {
    "name" : "mNativeInstanceRuntimeShaderBuilder",
    "type" : "long",
    "comment" : "\n     * Current native shader builder instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShaderUniforms",
    "type" : "ArrayMap<String, Shader>",
    "comment" : "\n     * For tracking GC usage. Keep a java-side reference for reachable objects to\n     * enable better heap tracking & tooling support\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setColorUniform(@NonNull String uniformName, @ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform color value corresponding to this shader.  If the shader does not have a\n     * uniform with that name or if the uniform is declared with a type other than vec3 or vec4 and\n     * corresponding layout(color) annotation then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the color uniform declared in the AGSL shader program\n     * @param color the provided sRGB color will be transformed into the shader program's output\n     *              colorspace and will be available as a vec4 uniform in the program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorUniform(@NonNull String uniformName, @ColorLong long color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform color value corresponding to this shader.  If the shader does not have a\n     * uniform with that name or if the uniform is declared with a type other than vec3 or vec4 and\n     * corresponding layout(color) annotation then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the color uniform declared in the AGSL shader program\n     * @param color the provided sRGB color will be transformed into the shader program's output\n     *              colorspace and will be available as a vec4 uniform in the program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorUniform(@NonNull String uniformName, @NonNull Color color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform color value corresponding to this shader.  If the shader does not have a\n     * uniform with that name or if the uniform is declared with a type other than vec3 or vec4 and\n     * corresponding layout(color) annotation then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the color uniform declared in the AGSL shader program\n     * @param color the provided sRGB color will be transformed into the shader program's output\n     *              colorspace and will be available as a vec4 uniform in the program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than a float or float[1]\n     * then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value1, float value2)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than vec2 or float[2] then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than vec3 or float[3] then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3, float value4)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than vec4 or float[4] then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, @NonNull float[] values)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than a float (for N=1), vecN,\n     * or float[N] where N is the length of the values param then an IllegalArgumentException is\n     * thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3, float value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setUniform(@NonNull String uniformName, @NonNull float[] values, boolean isColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than an int or int[1]\n     * then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value1, int value2)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than ivec2 or int[2] then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than ivec3 or int[3] then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3, int value4)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than ivec4 or int[4] then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, @NonNull int[] values)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to this shader.  If the shader does not have a uniform\n     * with that name or if the uniform is declared with a type other than an int (for N=1), ivecN,\n     * or int[N] where N is the length of the values param then an IllegalArgumentException is\n     * thrown.\n     *\n     * @param uniformName name matching the uniform declared in the AGSL shader program\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3, int value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputShader(@NonNull String shaderName, @NonNull Shader shader)",
    "returnType" : "void",
    "comment" : "\n     * Assigns the uniform shader to the provided shader parameter.  If the shader program does not\n     * have a uniform shader with that name then an IllegalArgumentException is thrown.\n     *\n     * @param shaderName name matching the uniform declared in the AGSL shader program\n     * @param shader shader passed into the AGSL shader program for sampling\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInputBuffer(@NonNull String shaderName, @NonNull BitmapShader shader)",
    "returnType" : "void",
    "comment" : "\n     * Assigns the uniform shader to the provided shader parameter.  If the shader program does not\n     * have a uniform shader with that name then an IllegalArgumentException is thrown.\n     *\n     * Unlike setInputShader this method returns samples directly from the bitmap's buffer. This\n     * means that there will be no transformation of the sampled pixels, such as colorspace\n     * conversion or alpha premultiplication.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long createNativeInstance(long nativeMatrix, boolean filterFromPaint)",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected long getNativeShaderBuilder()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateBuilder(String agsl)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateShader(long shaderBuilder, long matrix)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, float[] uniforms, boolean isColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, float value1, float value2, float value3, float value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, int[] uniforms)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, int value1, int value2, int value3, int value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateShader(long shaderBuilder, String shaderName, long shader)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setColorUniform(@NonNull String uniformName, @ColorInt int color)", "public void setColorUniform(@NonNull String uniformName, @ColorLong long color)", "public void setColorUniform(@NonNull String uniformName, @NonNull Color color)", "public void setFloatUniform(@NonNull String uniformName, float value)", "public void setFloatUniform(@NonNull String uniformName, float value1, float value2)", "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3)", "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3, float value4)", "public void setFloatUniform(@NonNull String uniformName, @NonNull float[] values)", "private void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3, float value4, int count)", "private void setUniform(@NonNull String uniformName, @NonNull float[] values, boolean isColor)", "public void setIntUniform(@NonNull String uniformName, int value)", "public void setIntUniform(@NonNull String uniformName, int value1, int value2)", "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3)", "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3, int value4)", "public void setIntUniform(@NonNull String uniformName, @NonNull int[] values)", "private void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3, int value4, int count)", "public void setInputShader(@NonNull String shaderName, @NonNull Shader shader)", "public void setInputBuffer(@NonNull String shaderName, @NonNull BitmapShader shader)", "protected long createNativeInstance(long nativeMatrix, boolean filterFromPaint)", "protected long getNativeShaderBuilder()", "private static native long nativeGetFinalizer()", "private static native long nativeCreateBuilder(String agsl)", "private static native long nativeCreateShader(long shaderBuilder, long matrix)", "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, float[] uniforms, boolean isColor)", "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, float value1, float value2, float value3, float value4, int count)", "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, int[] uniforms)", "private static native void nativeUpdateUniforms(long shaderBuilder, String uniformName, int value1, int value2, int value3, int value4, int count)", "private static native void nativeUpdateShader(long shaderBuilder, String shaderName, long shader)" ],
  "variableNames" : [ "mNativeInstanceRuntimeShaderBuilder", "mShaderUniforms" ]
}