{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/UserDataHost.java",
  "packageName" : "org.chromium.base",
  "className" : "UserDataHost",
  "comment" : "\n * A class that implements type-safe heterogeneous container. It can associate an object of type T\n * with a type token (T.class) as a key. Mismatch of the type between them can be checked at compile\n * time, hence type-safe. Objects are held using strong reference in the container. {@code null} is\n * not allowed for key or object.\n *\n * <p>Can be used for an object that needs to have other objects attached to it without having to\n * manage explicit references to them. Attached objects need to implement {@link UserData} so that\n * they can be destroyed by {@link #destroy()}.\n *\n * <p>No operation takes effect once {@link #destroy()} is called.\n *\n * <p>Usage: <code>\n * public class Foo {\n *     // Defines the container.\n *     private final UserDataHost mUserDataHost = new UserDataHost();\n *\n *     public UserDataHost getUserDataHost() {\n *         return mUserDataHost;\n *     }\n * }\n *\n * public class FooBar implements UserData {\n *\n *     public FooBar from(UserDataHost host) {\n *         FooBar foobar = host.getUserData(FooBar.class);\n *         // Instantiate FooBar upon the first access.\n *         return foobar != null ? foobar : host.setUserData(FooBar.class, new FooBar());\n *     }\n * }\n *\n *     Foo foo = new Foo();\n *     ...\n *\n *     FooBar bar = FooBar.from(foo.getUserDataHost());\n *\n *     ...\n *\n * </code>\n ",
  "links" : [ "org.chromium.base.UserData", "#destroy()" ],
  "variables" : [ {
    "name" : "mThreadId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserDataMap",
    "type" : "HashMap<Class<? extends UserData>, UserData>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void checkArgument(boolean condition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkThreadAndState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T setUserData(Class<T> key, T object)",
    "returnType" : "T",
    "comment" : "\n     * Associates the specified object with the specified key.\n     * @param key Type token with which the specified object is to be associated.\n     * @param object Object to be associated with the specified key.\n     * @return the object just stored, or {@code null} if storing the object failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getUserData(Class<T> key)",
    "returnType" : "T",
    "comment" : "\n     * Returns the value to which the specified key is mapped, or null if this map\n     * contains no mapping for the key.\n     * @param key Type token for which the specified object is to be returned.\n     * @return the value to which the specified key is mapped, or null if this map\n     *         contains no mapping for {@code key}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T removeUserData(Class<T> key)",
    "returnType" : "T",
    "comment" : "\n     * Removes the mapping for a key from this map. Exception will be thrown if\n     * the given key has no mapping.\n     * @param key Type token for which the specified object is to be removed.\n     * @return The previous value associated with {@code key}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroy all the managed {@link UserData} instances. This should be invoked at\n     * the end of the lifetime of the host that user data instances hang on to.\n     * The host stops managing them after this method is called.\n     ",
    "links" : [ "org.chromium.base.UserData" ]
  } ],
  "methodNames" : [ "private static void checkArgument(boolean condition)", "private void checkThreadAndState()", "public T setUserData(Class<T> key, T object)", "public T getUserData(Class<T> key)", "public T removeUserData(Class<T> key)", "public void destroy()" ],
  "variableNames" : [ "mThreadId", "mUserDataMap" ]
}