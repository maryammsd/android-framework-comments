{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLServerSocketFactory.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLServerSocketFactory",
  "comment" : "\n * <code>SSLServerSocketFactory</code>s create\n * <code>SSLServerSocket</code>s.\n *\n * @since 1.4\n * @see SSLSocket\n * @see SSLServerSocket\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "defaultServerSocketFactory",
    "type" : "SSLServerSocketFactory",
    "comment" : " without introducing app compatibility problems.  See http://b/62248930.",
    "links" : [ ]
  }, {
    "name" : "lastVersion",
    "type" : "int",
    "comment" : " private static boolean propertyChecked;",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static synchronized ServerSocketFactory getDefault()",
    "returnType" : "ServerSocketFactory",
    "comment" : "\n     * Returns the default SSL server socket factory.\n     *\n     * <p>The first time this method is called, the security property\n     * \"ssl.ServerSocketFactory.provider\" is examined. If it is non-null, a\n     * class by that name is loaded and instantiated. If that is successful and\n     * the object is an instance of SSLServerSocketFactory, it is made the\n     * default SSL server socket factory.\n     *\n     * <p>Otherwise, this method returns\n     * <code>SSLContext.getDefault().getServerSocketFactory()</code>. If that\n     * call fails, an inoperative factory is returned.\n     *\n     * @return the default <code>ServerSocketFactory</code>\n     * @see SSLContext#getDefault\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getDefaultCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the list of cipher suites which are enabled by default.\n     * Unless a different list is enabled, handshaking on an SSL connection\n     * will use one of these cipher suites.  The minimum quality of service\n     * for these defaults requires confidentiality protection and server\n     * authentication (that is, no anonymous cipher suites).\n     *\n     * @see #getSupportedCipherSuites()\n     * @return array of the cipher suites enabled by default\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getSupportedCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the cipher suites which could be enabled for use\n     * on an SSL connection created by this factory.\n     * Normally, only a subset of these will actually\n     * be enabled by default, since this list may include cipher suites which\n     * do not meet quality of service requirements for those defaults.  Such\n     * cipher suites are useful in specialized applications.\n     *\n     * <p class=\"caution\">Applications should not blindly enable all supported\n     * cipher suites.  The supported cipher suites can include signaling cipher suite\n     * values that can cause connection problems if enabled inappropriately.\n     *\n     * <p>The proper way to use this method is to either check if a specific cipher\n     * suite is supported via {@code Arrays.asList(getSupportedCipherSuites()).contains(...)}\n     * or to filter a desired list of cipher suites to only the supported ones via\n     * {@code desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites()))}.\n     *\n     * @return an array of cipher suite names\n     * @see #getDefaultCipherSuites()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void log(String msg)", "public static synchronized ServerSocketFactory getDefault()", "public abstract String[] getDefaultCipherSuites()", "public abstract String[] getSupportedCipherSuites()" ],
  "variableNames" : [ "defaultServerSocketFactory", "lastVersion" ]
}