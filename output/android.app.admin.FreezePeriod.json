{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/admin/FreezePeriod.java",
  "packageName" : "android.app.admin",
  "className" : "FreezePeriod",
  "comment" : "\n * A class that represents one freeze period which repeats <em>annually</em>. A freeze period has\n * two {@link java.time#MonthDay} values that define the start and end dates of the period, both\n * inclusive. If the end date is earlier than the start date, the period is considered wrapped\n * around the year-end. As far as freeze period is concerned, leap year is disregarded and February\n * 29th should be treated as if it were February 28th: so a freeze starting or ending on February\n * 28th is identical to a freeze starting or ending on February 29th. When calulating the length of\n * a freeze or the distance bewteen two freee periods, February 29th is also ignored.\n *\n * @see SystemUpdatePolicy#setFreezePeriods\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMMY_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAYS_IN_YEAR",
    "type" : "int",
    "comment" : " 365 since DUMMY_YEAR is not a leap year",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "MonthDay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "MonthDay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartDay",
    "type" : "int",
    "comment" : " [1, 365]",
    "links" : [ ]
  }, {
    "name" : "mEndDay",
    "type" : "int",
    "comment" : " [1, 365]",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MonthDay getStart()",
    "returnType" : "MonthDay",
    "comment" : "\n     * Returns the start date (inclusive) of this freeze period.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MonthDay getEnd()",
    "returnType" : "MonthDay",
    "comment" : "\n     * Returns the end date (inclusive) of this freeze period.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getLength()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " boolean isWrapped()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " int getEffectiveEndDay()",
    "returnType" : "int",
    "comment" : "\n     * Returns the effective end day, taking wrapping around year-end into consideration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(LocalDate localDate)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " boolean after(LocalDate localDate)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " Pair<LocalDate, LocalDate> toCurrentOrFutureRealDates(LocalDate now)",
    "returnType" : "Pair<LocalDate, LocalDate>",
    "comment" : "\n     * Instantiate the current interval to real calendar dates, given a calendar date\n     * {@code now}. If the interval contains now, the returned calendar dates should be the\n     * current interval (in real calendar dates) that includes now. If the interval does not\n     * include now, the returned dates represents the next future interval.\n     * The result will always have the same month and dayOfMonth value as the non-instantiated\n     * interval itself.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MonthDay dayOfYearToMonthDay(int dayOfYear)",
    "returnType" : "MonthDay",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static int dayOfYearDisregardLeapYear(LocalDate date)",
    "returnType" : "int",
    "comment" : "\n     * Treat the supplied date as in a non-leap year and return its day of year.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int distanceWithoutLeapYear(LocalDate first, LocalDate second)",
    "returnType" : "int",
    "comment" : "\n     * Compute the number of days between first (inclusive) and second (exclusive),\n     * treating all years in between as non-leap.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<FreezePeriod> canonicalizePeriods(List<FreezePeriod> intervals)",
    "returnType" : "List<FreezePeriod>",
    "comment" : "\n     * Sort, de-duplicate and merge an interval list\n     *\n     * Instead of using any fancy logic for merging intervals which has loads of corner cases,\n     * simply flatten the interval onto a list of 365 calendar days and recreate the interval list\n     * from that.\n     *\n     * This method should return a list of intervals with the following post-conditions:\n     *     1. Interval.startDay in strictly ascending order\n     *     2. No two intervals should overlap or touch\n     *     3. At most one wrapped Interval remains, and it will be at the end of the list\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static void validatePeriods(List<FreezePeriod> periods)",
    "returnType" : "void",
    "comment" : "\n     * Verifies if the supplied freeze periods satisfies the constraints set out in\n     * {@link SystemUpdatePolicy#setFreezePeriods(List)}, and in particular, any single freeze\n     * period cannot exceed {@link SystemUpdatePolicy#FREEZE_PERIOD_MAX_LENGTH} days, and two freeze\n     * periods need to be at least {@link SystemUpdatePolicy#FREEZE_PERIOD_MIN_SEPARATION} days\n     * apart.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.admin.SystemUpdatePolicy#FREEZE_PERIOD_MAX_LENGTH", "android.app.admin.SystemUpdatePolicy#setFreezePeriods(List)", "android.app.admin.SystemUpdatePolicy#FREEZE_PERIOD_MIN_SEPARATION" ]
  }, {
    "name" : " static void validateAgainstPreviousFreezePeriod(List<FreezePeriod> periods, LocalDate prevPeriodStart, LocalDate prevPeriodEnd, LocalDate now)",
    "returnType" : "void",
    "comment" : "\n     * Verifies that the current freeze periods are still legal, considering the previous freeze\n     * periods the device went through. In particular, when combined with the previous freeze\n     * period, the maximum freeze length or the minimum freeze separation should not be violated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DUMMY_YEAR", "DAYS_IN_YEAR", "mStart", "mEnd", "mStartDay", "mEndDay" ],
  "methodNames" : [ "public MonthDay getStart()", "public MonthDay getEnd()", " int getLength()", " boolean isWrapped()", " int getEffectiveEndDay()", " boolean contains(LocalDate localDate)", " boolean after(LocalDate localDate)", " Pair<LocalDate, LocalDate> toCurrentOrFutureRealDates(LocalDate now)", "public String toString()", "private static MonthDay dayOfYearToMonthDay(int dayOfYear)", "private static int dayOfYearDisregardLeapYear(LocalDate date)", "public static int distanceWithoutLeapYear(LocalDate first, LocalDate second)", " static List<FreezePeriod> canonicalizePeriods(List<FreezePeriod> intervals)", " static void validatePeriods(List<FreezePeriod> periods)", " static void validateAgainstPreviousFreezePeriod(List<FreezePeriod> periods, LocalDate prevPeriodStart, LocalDate prevPeriodEnd, LocalDate now)" ]
}