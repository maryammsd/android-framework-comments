{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/BinderCacheManager.java",
  "packageName" : "android.telephony",
  "className" : "BinderCacheManager",
  "comment" : "\n * Keeps track of the connection to a Binder node, refreshes the cache if the node dies, and lets\n * interested parties register listeners on the node to be notified when the node has died via the\n * registered {@link Runnable}.\n * @param <T> The IInterface representing the Binder type that this manager will be managing the\n *           cache of.\n * @hide\n ",
  "links" : [ "Runnable" ],
  "variables" : [ {
    "name" : "mBinderInterfaceFactory",
    "type" : "BinderInterfaceFactory<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedConnection",
    "type" : "AtomicReference<BinderDeathTracker>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T listenOnBinder(Object runnableKey, Runnable deadRunnable)",
    "returnType" : "T",
    "comment" : "\n     * Get the binder node connection and add a Runnable to be run if this Binder dies. Once this\n     * Runnable is run, the Runnable itself is discarded and must be added again.\n     * <p>\n     * Note: There should be no assumptions here as to which Thread this Runnable is called on. If\n     * the Runnable should be called on a specific thread, it should be up to the caller to handle\n     * that in the runnable implementation.\n     * @param runnableKey The Key associated with this runnable so that it can be removed later\n     *                    using {@link #removeRunnable(Object)} if needed.\n     * @param deadRunnable The runnable that will be run if the cached Binder node dies.\n     * @return T if the runnable was added or {@code null} if the connection is not alive right now\n     * and the associated runnable was never added.\n     ",
    "links" : [ "#removeRunnable(Object)" ]
  }, {
    "name" : "public T getBinder()",
    "returnType" : "T",
    "comment" : "\n     * @return The cached Binder node. May return null if the requested Binder node is not currently\n     * available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T removeRunnable(Object runnableKey)",
    "returnType" : "T",
    "comment" : "\n     * Removes a previously registered runnable associated with the returned  cached Binder node\n     * using the key it was registered with in {@link #listenOnBinder} if the runnable still exists.\n     * @param runnableKey The key that was used to register the Runnable earlier.\n     * @return The cached Binder node that the runnable used to registered to or null if the cached\n     * Binder node is not alive anymore.\n     ",
    "links" : [ "#listenOnBinder" ]
  }, {
    "name" : "private BinderDeathTracker getTracker()",
    "returnType" : "BinderDeathTracker",
    "comment" : "\n     * @return The BinderDeathTracker container, which contains the cached IInterface instance or\n     * null if it is not available right now.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T listenOnBinder(Object runnableKey, Runnable deadRunnable)", "public T getBinder()", "public T removeRunnable(Object runnableKey)", "private BinderDeathTracker getTracker()" ],
  "variableNames" : [ "mBinderInterfaceFactory", "mCachedConnection" ]
}