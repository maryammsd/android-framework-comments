{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/KeyAgreement.java",
  "packageName" : "javax.crypto",
  "className" : "KeyAgreement",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "spi",
    "type" : "KeyAgreementSpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The name of the key agreement algorithm.",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "warnCount",
    "type" : "int",
    "comment" : " max number of debug warnings to print from chooseFirstProvider()",
    "links" : [ ]
  }, {
    "name" : "I_NO_PARAMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I_PARAMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this {@code KeyAgreement} object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * {@code getInstance} calls that created this\n     * {@code KeyAgreement} object.\n     *\n     * @return the algorithm name of this {@code KeyAgreement} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final KeyAgreement getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "KeyAgreement",
    "comment" : "\n     * Returns a {@code KeyAgreement} object that implements the\n     * specified key agreement algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyAgreement object encapsulating the\n     * KeyAgreementSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested key agreement\n     * algorithm.\n     * See the KeyAgreement section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keyagreement-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new {@code KeyAgreement} object\n     *\n     * @exception NullPointerException if the specified algorithm\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          KeyAgreementSpi implementation for the\n     *          specified algorithm.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final KeyAgreement getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "KeyAgreement",
    "comment" : "\n     * Returns a {@code KeyAgreement} object that implements the\n     * specified key agreement algorithm.\n     *\n     * <p> A new KeyAgreement object encapsulating the\n     * KeyAgreementSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested key agreement\n     * algorithm.\n     * See the KeyAgreement section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keyagreement-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new {@code KeyAgreement} object\n     *\n     * @exception NullPointerException if the specified algorithm\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if a KeyAgreementSpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null or empty.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final KeyAgreement getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "KeyAgreement",
    "comment" : "\n     * Returns a {@code KeyAgreement} object that implements the\n     * specified key agreement algorithm.\n     *\n     * <p> A new KeyAgreement object encapsulating the\n     * KeyAgreementSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested key agreement\n     * algorithm.\n     * See the KeyAgreement section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keyagreement-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new {@code KeyAgreement} object\n     *\n     * @exception NullPointerException if the specified algorithm\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if a KeyAgreementSpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : " void chooseFirstProvider()",
    "returnType" : "void",
    "comment" : "\n     * Choose the Spi from the first provider available. Used if\n     * delayed provider selection is not possible because init()\n     * is not the first method called.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void implInit(KeyAgreementSpi spi, int type, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void chooseProvider(int initType, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this {@code KeyAgreement} object.\n     *\n     * @return the provider of this {@code KeyAgreement} object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key agreement with the given key, which is required to\n     * contain all the algorithm parameters required for this key agreement.\n     *\n     * <p> If this key agreement requires any random bytes, it will get\n     * them using the\n     * {@link java.security.SecureRandom}\n     * implementation of the highest-priority\n     * installed provider as the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * SecureRandom, a system-provided source of randomness will be used.)\n     *\n     * @param key the party's private information. For example, in the case\n     * of the Diffie-Hellman key agreement, this would be the party's own\n     * Diffie-Hellman private key.\n     *\n     * @exception InvalidKeyException if the given key is\n     * inappropriate for this key agreement, e.g., is of the wrong type or\n     * has an incompatible algorithm type.\n     ",
    "links" : [ "java.security.SecureRandom" ]
  }, {
    "name" : "public final void init(Key key, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key agreement with the given key and source of\n     * randomness. The given key is required to contain all the algorithm\n     * parameters required for this key agreement.\n     *\n     * <p> If the key agreement algorithm requires random bytes, it gets them\n     * from the given source of randomness, {@code random}.\n     * However, if the underlying\n     * algorithm implementation does not require any random bytes,\n     * {@code random} is ignored.\n     *\n     * @param key the party's private information. For example, in the case\n     * of the Diffie-Hellman key agreement, this would be the party's own\n     * Diffie-Hellman private key.\n     * @param random the source of randomness\n     *\n     * @exception InvalidKeyException if the given key is\n     * inappropriate for this key agreement, e.g., is of the wrong type or\n     * has an incompatible algorithm type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key agreement with the given key and set of\n     * algorithm parameters.\n     *\n     * <p> If this key agreement requires any random bytes, it will get\n     * them using the\n     * {@link java.security.SecureRandom}\n     * implementation of the highest-priority\n     * installed provider as the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * SecureRandom, a system-provided source of randomness will be used.)\n     *\n     * @param key the party's private information. For example, in the case\n     * of the Diffie-Hellman key agreement, this would be the party's own\n     * Diffie-Hellman private key.\n     * @param params the key agreement parameters\n     *\n     * @exception InvalidKeyException if the given key is\n     * inappropriate for this key agreement, e.g., is of the wrong type or\n     * has an incompatible algorithm type.\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key agreement.\n     ",
    "links" : [ "java.security.SecureRandom" ]
  }, {
    "name" : "private String getProviderName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key agreement with the given key, set of\n     * algorithm parameters, and source of randomness.\n     *\n     * @param key the party's private information. For example, in the case\n     * of the Diffie-Hellman key agreement, this would be the party's own\n     * Diffie-Hellman private key.\n     * @param params the key agreement parameters\n     * @param random the source of randomness\n     *\n     * @exception InvalidKeyException if the given key is\n     * inappropriate for this key agreement, e.g., is of the wrong type or\n     * has an incompatible algorithm type.\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key agreement.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Key doPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException",
    "returnType" : "Key",
    "comment" : "\n     * Executes the next phase of this key agreement with the given\n     * key that was received from one of the other parties involved in this key\n     * agreement.\n     *\n     * @param key the key for this phase. For example, in the case of\n     * Diffie-Hellman between 2 parties, this would be the other party's\n     * Diffie-Hellman public key.\n     * @param lastPhase flag which indicates whether or not this is the last\n     * phase of this key agreement.\n     *\n     * @return the (intermediate) key resulting from this phase, or null\n     * if this phase does not yield a key\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this phase.\n     * @exception IllegalStateException if this key agreement has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] generateSecret() throws IllegalStateException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the shared secret and returns it in a new buffer.\n     *\n     * <p>This method resets this {@code KeyAgreement} object, so that it\n     * can be reused for further key agreements. Unless this key agreement is\n     * reinitialized with one of the {@code init} methods, the same\n     * private information and algorithm parameters will be used for\n     * subsequent key agreements.\n     *\n     * @return the new buffer with the shared secret\n     *\n     * @exception IllegalStateException if this key agreement has not been\n     * completed yet\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int generateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException",
    "returnType" : "int",
    "comment" : "\n     * Generates the shared secret, and places it into the buffer\n     * {@code sharedSecret}, beginning at {@code offset} inclusive.\n     *\n     * <p>If the {@code sharedSecret} buffer is too small to hold the\n     * result, a {@code ShortBufferException} is thrown.\n     * In this case, this call should be repeated with a larger output buffer.\n     *\n     * <p>This method resets this {@code KeyAgreement} object, so that it\n     * can be reused for further key agreements. Unless this key agreement is\n     * reinitialized with one of the {@code init} methods, the same\n     * private information and algorithm parameters will be used for\n     * subsequent key agreements.\n     *\n     * @param sharedSecret the buffer for the shared secret\n     * @param offset the offset in {@code sharedSecret} where the\n     * shared secret will be stored\n     *\n     * @return the number of bytes placed into {@code sharedSecret}\n     *\n     * @exception IllegalStateException if this key agreement has not been\n     * completed yet\n     * @exception ShortBufferException if the given output buffer is too small\n     * to hold the secret\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "SecretKey",
    "comment" : "\n     * Creates the shared secret and returns it as a {@code SecretKey}\n     * object of the specified algorithm.\n     *\n     * <p>This method resets this {@code KeyAgreement} object, so that it\n     * can be reused for further key agreements. Unless this key agreement is\n     * reinitialized with one of the {@code init} methods, the same\n     * private information and algorithm parameters will be used for\n     * subsequent key agreements.\n     *\n     * @param algorithm the requested secret-key algorithm\n     *\n     * @return the shared secret key\n     *\n     * @exception IllegalStateException if this key agreement has not been\n     * completed yet\n     * @exception NoSuchAlgorithmException if the specified secret-key\n     * algorithm is not available\n     * @exception InvalidKeyException if the shared secret-key material cannot\n     * be used to generate a secret key of the specified algorithm (e.g.,\n     * the key material is too short)\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyAgreementSpi getCurrentSpi()",
    "returnType" : "KeyAgreementSpi",
    "comment" : "\n     * Returns the {@code KeyAgreementSpi} backing this {@code KeyAgreement} or\n     * {@code null} if no {@code KeyAgreementSpi} is backing this {@code KeyAgreement}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getAlgorithm()", "public static final KeyAgreement getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final KeyAgreement getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final KeyAgreement getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", " void chooseFirstProvider()", "private void implInit(KeyAgreementSpi spi, int type, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "private void chooseProvider(int initType, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "public final Provider getProvider()", "public final void init(Key key) throws InvalidKeyException", "public final void init(Key key, SecureRandom random) throws InvalidKeyException", "public final void init(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException", "private String getProviderName()", "public final void init(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "public final Key doPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException", "public final byte[] generateSecret() throws IllegalStateException", "public final int generateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException", "public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException", "public KeyAgreementSpi getCurrentSpi()" ],
  "variableNames" : [ "provider", "spi", "algorithm", "lock", "warnCount", "I_NO_PARAMS", "I_PARAMS" ]
}