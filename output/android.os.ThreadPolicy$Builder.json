{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/StrictMode.java",
  "packageName" : "android.os",
  "className" : "Builder",
  "comment" : "\n         * Creates {@link ThreadPolicy} instances. Methods whose names start with {@code detect}\n         * specify what problems we should look for. Methods whose names start with {@code penalty}\n         * specify what we should do when we detect a problem.\n         *\n         * <p>You can call as many {@code detect} and {@code penalty} methods as you like. Currently\n         * order is insignificant: all penalties apply to all detected problems.\n         *\n         * <p>For example, detect everything and log anything that's found:\n         *\n         * <pre>\n         * StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()\n         *     .detectAll()\n         *     .penaltyLog()\n         *     .build();\n         * StrictMode.setThreadPolicy(policy);\n         * </pre>\n         ",
  "links" : [ "ThreadPolicy" ],
  "variables" : [ {
    "name" : "mMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnThreadViolationListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder detectAll()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect everything that's potentially suspect.\n             *\n             * <p>As of the Gingerbread release this includes network and disk operations but will\n             * likely expand in future releases.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitAll()",
    "returnType" : "Builder",
    "comment" : " Disable the detection of everything. ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectNetwork()",
    "returnType" : "Builder",
    "comment" : " Enable detection of network operations. ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitNetwork()",
    "returnType" : "Builder",
    "comment" : " Disable detection of network operations. ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectDiskReads()",
    "returnType" : "Builder",
    "comment" : " Enable detection of disk reads. ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitDiskReads()",
    "returnType" : "Builder",
    "comment" : " Disable detection of disk reads. ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectCustomSlowCalls()",
    "returnType" : "Builder",
    "comment" : " Enable detection of slow calls. ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitCustomSlowCalls()",
    "returnType" : "Builder",
    "comment" : " Disable detection of slow calls. ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitResourceMismatches()",
    "returnType" : "Builder",
    "comment" : " Disable detection of mismatches between defined resource types and getter calls. ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectUnbufferedIo()",
    "returnType" : "Builder",
    "comment" : " Detect unbuffered input/output operations. ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitUnbufferedIo()",
    "returnType" : "Builder",
    "comment" : " Disable detection of unbuffered input/output operations. ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectResourceMismatches()",
    "returnType" : "Builder",
    "comment" : "\n             * Enables detection of mismatches between defined resource types and getter calls.\n             *\n             * <p>This helps detect accidental type mismatches and potentially expensive type\n             * conversions when obtaining typed resources.\n             *\n             * <p>For example, a strict mode violation would be thrown when calling {@link\n             * android.content.res.TypedArray#getInt(int, int)} on an index that contains a\n             * String-type resource. If the string value can be parsed as an integer, this method\n             * call will return a value without crashing; however, the developer should format the\n             * resource as an integer to avoid unnecessary type conversion.\n             ",
    "links" : [ "android.content.res.TypedArray#getInt(int" ]
  }, {
    "name" : "public Builder detectDiskWrites()",
    "returnType" : "Builder",
    "comment" : " Enable detection of disk writes. ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitDiskWrites()",
    "returnType" : "Builder",
    "comment" : " Disable detection of disk writes. ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectExplicitGc()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect calls to {@link Runtime#gc()}.\n             ",
    "links" : [ "dalvik.system.VMRuntime#gc()" ]
  }, {
    "name" : "public Builder permitExplicitGc()",
    "returnType" : "Builder",
    "comment" : "\n             * Disable detection of calls to {@link Runtime#gc()}.\n             ",
    "links" : [ "dalvik.system.VMRuntime#gc()" ]
  }, {
    "name" : "public Builder penaltyDialog()",
    "returnType" : "Builder",
    "comment" : "\n             * Show an annoying dialog to the developer on detected violations, rate-limited to be\n             * only a little annoying.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder penaltyDeath()",
    "returnType" : "Builder",
    "comment" : "\n             * Crash the whole process on violation. This penalty runs at the end of all enabled\n             * penalties so you'll still get see logging or other violations before the process\n             * dies.\n             *\n             * <p>Unlike {@link #penaltyDeathOnNetwork}, this applies to disk reads, disk writes,\n             * and network usage if their corresponding detect flags are set.\n             ",
    "links" : [ "#penaltyDeathOnNetwork" ]
  }, {
    "name" : "public Builder penaltyDeathOnNetwork()",
    "returnType" : "Builder",
    "comment" : "\n             * Crash the whole process on any network usage. Unlike {@link #penaltyDeath}, this\n             * penalty runs <em>before</em> anything else. You must still have called {@link\n             * #detectNetwork} to enable this.\n             *\n             * <p>In the Honeycomb or later SDKs, this is on by default.\n             ",
    "links" : [ "#detectNetwork", "#penaltyDeath" ]
  }, {
    "name" : "public Builder penaltyFlashScreen()",
    "returnType" : "Builder",
    "comment" : " Flash the screen during a violation. ",
    "links" : [ ]
  }, {
    "name" : "public Builder penaltyLog()",
    "returnType" : "Builder",
    "comment" : " Log detected violations to the system log. ",
    "links" : [ ]
  }, {
    "name" : "public Builder penaltyDropBox()",
    "returnType" : "Builder",
    "comment" : "\n             * Enable detected violations log a stacktrace and timing data to the {@link\n             * android.os.DropBoxManager DropBox} on policy violation. Intended mostly for platform\n             * integrators doing beta user field data collection.\n             ",
    "links" : [ "android.os.DropBoxManager" ]
  }, {
    "name" : "public Builder penaltyListener(@NonNull Executor executor, @NonNull OnThreadViolationListener listener)",
    "returnType" : "Builder",
    "comment" : "\n             * Call #{@link OnThreadViolationListener#onThreadViolation(Violation)} on specified\n             * executor every violation.\n             ",
    "links" : [ "#onThreadViolation(Violation)" ]
  }, {
    "name" : "public Builder penaltyListener(@NonNull OnThreadViolationListener listener, @NonNull Executor executor)",
    "returnType" : "Builder",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "private Builder enable(@ThreadPolicyMask int mask)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Builder disable(@ThreadPolicyMask int mask)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ThreadPolicy build()",
    "returnType" : "ThreadPolicy",
    "comment" : "\n             * Construct the ThreadPolicy instance.\n             *\n             * <p>Note: if no penalties are enabled before calling <code>build</code>, {@link\n             * #penaltyLog} is implicitly set.\n             ",
    "links" : [ "#penaltyLog" ]
  } ],
  "methodNames" : [ "public Builder detectAll()", "public Builder permitAll()", "public Builder detectNetwork()", "public Builder permitNetwork()", "public Builder detectDiskReads()", "public Builder permitDiskReads()", "public Builder detectCustomSlowCalls()", "public Builder permitCustomSlowCalls()", "public Builder permitResourceMismatches()", "public Builder detectUnbufferedIo()", "public Builder permitUnbufferedIo()", "public Builder detectResourceMismatches()", "public Builder detectDiskWrites()", "public Builder permitDiskWrites()", "public Builder detectExplicitGc()", "public Builder permitExplicitGc()", "public Builder penaltyDialog()", "public Builder penaltyDeath()", "public Builder penaltyDeathOnNetwork()", "public Builder penaltyFlashScreen()", "public Builder penaltyLog()", "public Builder penaltyDropBox()", "public Builder penaltyListener(@NonNull Executor executor, @NonNull OnThreadViolationListener listener)", "public Builder penaltyListener(@NonNull OnThreadViolationListener listener, @NonNull Executor executor)", "private Builder enable(@ThreadPolicyMask int mask)", "private Builder disable(@ThreadPolicyMask int mask)", "public ThreadPolicy build()" ],
  "variableNames" : [ "mMask", "mListener", "mExecutor" ]
}