{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/DTMAxisTraverser.java",
  "packageName" : "org.apache.xml.dtm",
  "className" : "DTMAxisTraverser",
  "comment" : "\n * A class that implements traverses DTMAxisTraverser interface can traverse\n * a set of nodes, usually as defined by an XPath axis.  It is different from\n * an iterator, because it does not need to hold state, and, in fact, must not\n * hold any iteration-based state.  It is meant to be implemented as an inner\n * class of a DTM, and returned by the getAxisTraverser(final int axis)\n * function.\n *\n * <p>A DTMAxisTraverser can probably not traverse a reverse axis in\n * document order.</p>\n *\n * <p>Typical usage:</p>\n * <pre><code>\n * for(int nodeHandle=myTraverser.first(myContext);\n *     nodeHandle!=DTM.NULL;\n *     nodeHandle=myTraverser.next(myContext,nodeHandle))\n * { ... processing for node indicated by nodeHandle goes here ... }\n * </code></pre>\n *\n * @author Scott Boag\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int first(int context)",
    "returnType" : "int",
    "comment" : "\n   * By the nature of the stateless traversal, the context node can not be\n   * returned or the iteration will go into an infinate loop.  So to traverse \n   * an axis, the first function must be used to get the first node.\n   *\n   * <p>This method needs to be overloaded only by those axis that process\n   * the self node. <\\p>\n   *\n   * @param context The context node of this traversal. This is the point\n   * that the traversal starts from.\n   * @return the first node in the traversal.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int first(int context, int extendedTypeID)",
    "returnType" : "int",
    "comment" : "\n   * By the nature of the stateless traversal, the context node can not be\n   * returned or the iteration will go into an infinate loop.  So to traverse \n   * an axis, the first function must be used to get the first node.\n   *\n   * <p>This method needs to be overloaded only by those axis that process\n   * the self node. <\\p>\n   *\n   * @param context The context node of this traversal. This is the point\n   * of origin for the traversal -- its \"root node\" or starting point.\n   * @param extendedTypeID The extended type ID that must match.\n   *\n   * @return the first node in the traversal.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next(int context, int current)",
    "returnType" : "int",
    "comment" : "\n   * Traverse to the next node after the current node.\n   *\n   * @param context The context node of this traversal. This is the point\n   * of origin for the traversal -- its \"root node\" or starting point.\n   * @param current The current node of the traversal. This is the last known\n   * location in the traversal, typically the node-handle returned by the\n   * previous traversal step. For the first traversal step, context\n   * should be set equal to current. Note that in order to test whether\n   * context is in the set, you must use the first() method instead.\n   *\n   * @return the next node in the iteration, or DTM.NULL.\n   * @see #first(int)\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next(int context, int current, int extendedTypeID)",
    "returnType" : "int",
    "comment" : "\n   * Traverse to the next node after the current node that is matched\n   * by the extended type ID.\n   *\n   * @param context The context node of this traversal. This is the point\n   * of origin for the traversal -- its \"root node\" or starting point.\n   * @param current The current node of the traversal. This is the last known\n   * location in the traversal, typically the node-handle returned by the\n   * previous traversal step. For the first traversal step, context\n   * should be set equal to current. Note that in order to test whether\n   * context is in the set, you must use the first() method instead.\n   * @param extendedTypeID The extended type ID that must match.\n   *\n   * @return the next node in the iteration, or DTM.NULL.\n   * @see #first(int,int)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int first(int context)", "public int first(int context, int extendedTypeID)", "public abstract int next(int context, int current)", "public abstract int next(int context, int current, int extendedTypeID)" ],
  "variableNames" : [ ]
}