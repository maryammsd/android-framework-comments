{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaCrypto.java",
  "packageName" : "android.media",
  "className" : "MediaCrypto",
  "comment" : "\n * MediaCrypto class can be used in conjunction with {@link android.media.MediaCodec}\n * to decode encrypted media data.\n *\n * Crypto schemes are assigned 16 byte UUIDs,\n * the method {@link #isCryptoSchemeSupported} can be used to query if a given\n * scheme is supported on the device.\n *\n ",
  "variables" : [ {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final boolean isCryptoSchemeSupported(@NonNull UUID uuid)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the given scheme identified by its UUID is supported on\n     * this device.\n     * @param uuid The UUID of the crypto scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final byte[] getByteArrayFromUUID(@NonNull UUID uuid)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final native boolean isCryptoSchemeSupportedNative(@NonNull byte[] uuid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final native boolean requiresSecureDecoderComponent(@NonNull String mime)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the crypto scheme requires the use of a secure decoder\n     * to decode data of the given mime type.\n     * @param mime The mime type of the media data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void setMediaDrmSession(@NonNull byte[] sessionId) throws MediaCryptoException",
    "returnType" : "void",
    "comment" : "\n     * Associate a MediaDrm session with this MediaCrypto instance.  The\n     * MediaDrm session is used to securely load decryption keys for a\n     * crypto scheme.  The crypto keys loaded through the MediaDrm session\n     * may be selected for use during the decryption operation performed\n     * by {@link android.media.MediaCodec#queueSecureInputBuffer} by specifying\n     * their key ids in the {@link android.media.MediaCodec.CryptoInfo#key} field.\n     * @param sessionId the MediaDrm sessionId to associate with this\n     * MediaCrypto instance\n     * @throws MediaCryptoException on failure to set the sessionId\n     ",
    "links" : [ "android.media.MediaCodec.CryptoInfo#key", "android.media.MediaCodec#queueSecureInputBuffer" ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final native void release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_setup(@NonNull byte[] uuid, @NonNull byte[] initData) throws MediaCryptoException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mNativeContext" ],
  "methodNames" : [ "public static final boolean isCryptoSchemeSupported(@NonNull UUID uuid)", "private static final byte[] getByteArrayFromUUID(@NonNull UUID uuid)", "private static final native boolean isCryptoSchemeSupportedNative(@NonNull byte[] uuid)", "public final native boolean requiresSecureDecoderComponent(@NonNull String mime)", "public final native void setMediaDrmSession(@NonNull byte[] sessionId) throws MediaCryptoException", "protected void finalize()", "public final native void release()", "private static final native void native_init()", "private final native void native_setup(@NonNull byte[] uuid, @NonNull byte[] initData) throws MediaCryptoException", "private final native void native_finalize()" ]
}