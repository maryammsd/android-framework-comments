{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/tech/NfcA.java",
  "packageName" : "android.nfc.tech",
  "className" : "NfcA",
  "comment" : "\n * Provides access to NFC-A (ISO 14443-3A) properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire a {@link NfcA} object using {@link #get}.\n * <p>The primary NFC-A I/O operation is {@link #transceive}. Applications must\n * implement their own protocol stack on top of {@link #transceive}.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SAK",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ATQA",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mSak",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAtqa",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NfcA get(Tag tag)",
    "returnType" : "NfcA",
    "comment" : "\n     * Get an instance of {@link NfcA} for the given tag.\n     * <p>Returns null if {@link NfcA} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag does not support NFC-A.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param tag an NFC-A compatible tag\n     * @return NFC-A object\n     ",
    "links" : [ "NfcA", "NfcA", "Tag#getTechList" ]
  }, {
    "name" : "public byte[] getAtqa()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the ATQA/SENS_RES bytes from tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return ATQA/SENS_RES bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getSak()",
    "returnType" : "short",
    "comment" : "\n     * Return the SAK/SEL_RES bytes from tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return SAK bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw NFC-A commands to the tag and receive the response.\n     *\n     * <p>Applications must not append the EoD (CRC) to the payload,\n     * it will be automatically calculated.\n     * <p>Applications must only send commands that are complete bytes,\n     * for example a SENS_REQ is not possible (these are used to\n     * manage tag polling and initialization).\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param data bytes to send\n     * @return bytes received in response\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or this operation is canceled\n     ",
    "links" : [ "#getMaxTransceiveLength", "#transceive", "IOException", "#close", "android.Manifest.permission#NFC" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive", "#transceive" ]
  }, {
    "name" : "public void setTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link #transceive} timeout in milliseconds.\n     *\n     * <p>The timeout only applies to {@link #transceive} on this object,\n     * and is reset to a default value when {@link #close} is called.\n     *\n     * <p>Setting a longer timeout may be useful when performing\n     * transactions that require a long processing time on the tag\n     * such as key generation.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param timeout timeout value in milliseconds\n     ",
    "links" : [ "#transceive", "#transceive", "#close", "android.Manifest.permission#NFC" ]
  }, {
    "name" : "public int getTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Get the current {@link #transceive} timeout in milliseconds.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return timeout value in milliseconds\n     ",
    "links" : [ "#transceive", "android.Manifest.permission#NFC" ]
  } ],
  "variableNames" : [ "TAG", "EXTRA_SAK", "EXTRA_ATQA", "mSak", "mAtqa" ],
  "methodNames" : [ "public static NfcA get(Tag tag)", "public byte[] getAtqa()", "public short getSak()", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()", "public void setTimeout(int timeout)", "public int getTimeout()" ]
}