{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "PhoneLookup",
  "comment" : "\n     * A table that represents the result of looking up a phone number, for\n     * example for caller ID. To perform a lookup you must append the number you\n     * want to find to {@link #CONTENT_FILTER_URI}.  This query is highly\n     * optimized.\n     * <pre>\n     * Uri uri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phoneNumber));\n     * resolver.query(uri, new String[]{PhoneLookup.DISPLAY_NAME,...\n     * </pre>\n     *\n     * <h3>Columns</h3>\n     *\n     * <table class=\"jd-sumtable\">\n     * <tr>\n     * <th colspan='4'>PhoneLookup</th>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #NUMBER}</td>\n     * <td>read-only</td>\n     * <td>Phone number.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #TYPE}</td>\n     * <td>read-only</td>\n     * <td>Phone number type. See {@link CommonDataKinds.Phone}.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #LABEL}</td>\n     * <td>read-only</td>\n     * <td>Custom label for the phone number. See {@link CommonDataKinds.Phone}.</td>\n     * </tr>\n     * </table>\n     * <p>\n     * Columns from the Contacts table are also available through a join.\n     * </p>\n     * <table class=\"jd-sumtable\">\n     * <tr>\n     * <th colspan='4'>Join with {@link Contacts}</th>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #_ID}</td>\n     * <td>read-only</td>\n     * <td>Contact ID.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #CONTACT_ID}</td>\n     * <td>read-only</td>\n     * <td>Contact ID.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #DATA_ID}</td>\n     * <td>read-only</td>\n     * <td>Data ID.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #LOOKUP_KEY}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #DISPLAY_NAME}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #PHOTO_ID}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #IN_VISIBLE_GROUP}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #HAS_PHONE_NUMBER}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #STARRED}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #CUSTOM_RINGTONE}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #SEND_TO_VOICEMAIL}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Contacts}.</td>\n     * </tr>\n     * </table>\n     ",
  "variables" : [ {
    "name" : "CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table.\n         *\n         * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store, this\n         * field doesn't sort results based on contacts frequency. For more information, see the\n         * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n         * page.\n         *\n         * Append the phone number you want to lookup\n         * to this URI and query it to perform a lookup. For example:\n         * <pre>\n         * Uri lookupUri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,\n         *         Uri.encode(phoneNumber));\n         * </pre>\n         ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * <p>URI used for the \"enterprise caller-id\".</p>\n         *\n         * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store, this\n         * field doesn't sort results based on contacts frequency. For more information, see the\n         * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n         * page.\n         *\n         * <p>\n         * It supports the same semantics as {@link #CONTENT_FILTER_URI} and returns the same\n         * columns.  If the device has no corp profile that is linked to the current profile, it\n         * behaves in the exact same way as {@link #CONTENT_FILTER_URI}.  If there is a corp profile\n         * linked to the current profile, it first queries against the personal contact database,\n         * and if no matching contacts are found there, then queries against the\n         * corp contacts database.\n         * </p>\n         * <p>\n         * If a result is from the corp profile, it makes the following changes to the data:\n         * <ul>\n         *     <li>\n         *     {@link #PHOTO_THUMBNAIL_URI} and {@link #PHOTO_URI} will be rewritten to special\n         *     URIs.  Use {@link ContentResolver#openAssetFileDescriptor} or its siblings to\n         *     load pictures from them.\n         *     {@link #PHOTO_ID} and {@link #PHOTO_FILE_ID} will be set to null.  Do not use them.\n         *     </li>\n         *     <li>\n         *     Corp contacts will get artificial {@link #_ID}s.  In order to tell whether a contact\n         *     is from the corp profile, use\n         *     {@link ContactsContract.Contacts#isEnterpriseContactId(long)}.\n         *     </li>\n         *     <li>\n         *     Corp contacts will get artificial {@link #LOOKUP_KEY}s too.\n         *     </li>\n         *     <li>\n         *     Returned work contact IDs and lookup keys are not accepted in places that not\n         *     explicitly say to accept them.\n         *     </li>\n         * </ul>\n         * <p>\n         * A contact lookup URL built by\n         * {@link ContactsContract.Contacts#getLookupUri(long, String)}\n         * with an {@link #_ID} and a {@link #LOOKUP_KEY} returned by this API can be passed to\n         * {@link ContactsContract.QuickContact#showQuickContact} even if a contact is from the\n         * corp profile.\n         * </p>\n         *\n         * <pre>\n         * Uri lookupUri = Uri.withAppendedPath(PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI,\n         *         Uri.encode(phoneNumber));\n         * </pre>\n         ",
    "links" : [ "#CONTENT_FILTER_URI", "#CONTENT_FILTER_URI", "#PHOTO_THUMBNAIL_URI", "#PHOTO_URI", "ContentResolver#openAssetFileDescriptor", "#PHOTO_ID", "#PHOTO_FILE_ID", "#_ID", "ContactsContract.Contacts#isEnterpriseContactId", "#LOOKUP_KEY", "ContactsContract.Contacts#getLookupUri", "#_ID", "#LOOKUP_KEY", "ContactsContract.QuickContact#showQuickContact" ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of {@link #CONTENT_FILTER_URI} providing a directory of phone lookup rows.\n         *\n         * @hide\n         ",
    "links" : [ "#CONTENT_FILTER_URI" ]
  }, {
    "name" : "QUERY_PARAMETER_SIP_ADDRESS",
    "type" : "String",
    "comment" : "\n         * If this boolean parameter is set to true, then the appended query is treated as a\n         * SIP address and the lookup will be performed against SIP addresses in the user's\n         * contacts.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "variableNames" : [ "CONTENT_FILTER_URI", "ENTERPRISE_CONTENT_FILTER_URI", "CONTENT_TYPE", "QUERY_PARAMETER_SIP_ADDRESS" ],
  "methodNames" : [ ]
}