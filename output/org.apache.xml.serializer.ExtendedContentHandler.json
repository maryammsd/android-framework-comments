{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ExtendedContentHandler.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ExtendedContentHandler",
  "comment" : "\n * This interface describes extensions to the SAX ContentHandler interface.\n * It is intended to be used by a serializer. The methods on this interface will\n * implement SAX- like behavior. This allows the gradual collection of\n * information rather than having it all up front. For example the call\n * <pre>\n * startElement(namespaceURI,localName,qName,atts)\n * </pre>\n * could be replaced with the calls\n * <pre>\n * startElement(namespaceURI,localName,qName)\n * addAttributes(atts)\n * </pre>\n * If there are no attributes the second call can be dropped. If attributes are\n * to be added one at a time with calls to\n * <pre>\n * addAttribute(namespaceURI, localName, qName, type, value)\n * </pre>\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_BAD_CHARS",
    "type" : "int",
    "comment" : " is greater than 126 or it is one of '<', '>', '&' or '\"'.",
    "links" : [ ]
  }, {
    "name" : "HTML_ATTREMPTY",
    "type" : "int",
    "comment" : " An HTML empty attribute (e.g. <OPTION selected>).",
    "links" : [ ]
  }, {
    "name" : "HTML_ATTRURL",
    "type" : "int",
    "comment" : " An HTML URL attribute",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add at attribute to the current element\n     * @param uri the namespace URI of the attribute name\n     * @param localName the local name of the attribute (without prefix)\n     * @param rawName the qualified name of the attribute\n     * @param type the attribute type typically character data (CDATA)\n     * @param value the value of the attribute\n     * @param XSLAttribute true if the added attribute is coming from an xsl:attribute element\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttributes(org.xml.sax.Attributes atts) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add attributes to the current element\n     * @param atts the attributes to add.\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String qName, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add an attribute to the current element. The namespace URI of the\n     * attribute will be calculated from the prefix of qName. The local name\n     * will be derived from qName and the type will be assumed to be \"CDATA\".\n     * @param qName\n     * @param value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(String chars) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify of a character event, but passing the data\n     * as a character String rather than the standard character array.\n     * @param chars the character data\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify of a character event, but passing the data\n     * as a DOM Node rather than the standard character array.\n     * @param node a DOM Node containing text.\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String elemName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify that an element has ended. Unlike the\n     * standard SAX method\n     * <pre>\n     * endElement(namespaceURI,localName,qName)\n     * </pre>\n     * only the last parameter is passed. If needed the serializer can derive\n     * the localName from the qualified name and derive the namespaceURI from\n     * its implementation.\n     * @param elemName the fully qualified element name.\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify that an element is starting.\n     * This method is just like the standard SAX method\n     * <pre>\n     * startElement(uri,localName,qname,atts)\n     * </pre>\n     * but without the attributes.\n     * @param uri the namespace URI of the element\n     * @param localName the local name (without prefix) of the element\n     * @param qName the qualified name of the element\n     * \n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify of the start of an element\n     * @param qName the fully qualified name of the element\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(String uri, String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify that a prefix mapping is to start, but\n     * after an element is started. The SAX method call\n     * <pre>\n     * startPrefixMapping(prefix,uri)\n     * </pre>\n     * is used just before an element starts and applies to the element to come,\n     * not to the current element.  This method applies to the current element.\n     * For example one could make the calls in this order:\n     * <pre>\n     * startElement(\"prfx8:elem9\")\n     * namespaceAfterStartElement(\"http://namespace8\",\"prfx8\")\n     * </pre>\n     * \n     * @param uri the namespace URI being declared\n     * @param prefix the prefix that maps to the given namespace\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException",
    "returnType" : "boolean",
    "comment" : "\n     * This method is used to notify that a prefix maping is to start, which can\n     * be for the current element, or for the one to come.\n     * @param prefix the prefix that maps to the given URI\n     * @param uri the namespace URI of the given prefix\n     * @param shouldFlush if true this call is like the SAX\n     * startPrefixMapping(prefix,uri) call and the mapping applies to the\n     * element to come.  If false the mapping applies to the current element.\n     * @return boolean false if the prefix mapping was already in effect (in\n     * other words we are just re-declaring), true if this is a new, never\n     * before seen mapping for the element.\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void entityReference(String entityName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Notify of an entity reference.\n     * @param entityName the name of the entity\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamespaceMappings getNamespaceMappings()",
    "returnType" : "NamespaceMappings",
    "comment" : "\n     * This method returns an object that has the current namespace mappings in\n     * effect.\n     * \n     * @return NamespaceMappings an object that has the current namespace\n     * mappings in effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix(String uri)",
    "returnType" : "String",
    "comment" : "\n     * This method returns the prefix that currently maps to the given namespace\n     * URI.\n     * @param uri the namespace URI\n     * @return String the prefix that currently maps to the given URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI(String name, boolean isElement)",
    "returnType" : "String",
    "comment" : "\n     * This method gets the prefix associated with a current element or\n     * attribute name.\n     * @param name the qualified name of an element, or attribute\n     * @param isElement true if it is an element name, false if it is an\n     * atttribute name\n     * @return String the namespace URI associated with the element or\n     * attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURIFromPrefix(String prefix)",
    "returnType" : "String",
    "comment" : "\n     * This method returns the namespace URI currently associated with the\n     * prefix.\n     * @param prefix a prefix of an element or attribute.\n     * @return String the namespace URI currently associated with the prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceLocator(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n     * This method is used to set the source locator, which might be used to\n     * generated an error message.\n     * @param locator the source locator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueAttribute(String qName, String value, int flags) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add a unique attribute to the current element.\n     * The attribute is guaranteed to be unique here. The serializer can write\n     * it out immediately without saving it in a table first. The integer\n     * flag contains information about the attribute, which helps the serializer\n     * to decide whether a particular processing is needed.\n     *\n     * @param qName the fully qualified attribute name.\n     * @param value the attribute value\n     * @param flags a bitwise flag\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addXSLAttribute(String qName, final String value, final String uri)",
    "returnType" : "void",
    "comment" : "\n     * Add an attribute from an xsl:attribute element.\n     * @param qName the qualified attribute name (prefix:localName)\n     * @param value the attributes value\n     * @param uri the uri that the prefix of the qName is mapped to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add at attribute to the current element, not from an xsl:attribute\n     * element.\n     * @param uri the namespace URI of the attribute name\n     * @param localName the local name of the attribute (without prefix)\n     * @param rawName the qualified name of the attribute\n     * @param type the attribute type typically character data (CDATA)\n     * @param value the value of the attribute\n     * @throws SAXException\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException", "public void addAttributes(org.xml.sax.Attributes atts) throws org.xml.sax.SAXException", "public void addAttribute(String qName, String value)", "public void characters(String chars) throws SAXException", "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException", "public void endElement(String elemName) throws SAXException", "public void startElement(String uri, String localName, String qName) throws org.xml.sax.SAXException", "public void startElement(String qName) throws SAXException", "public void namespaceAfterStartElement(String uri, String prefix) throws SAXException", "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException", "public void entityReference(String entityName) throws SAXException", "public NamespaceMappings getNamespaceMappings()", "public String getPrefix(String uri)", "public String getNamespaceURI(String name, boolean isElement)", "public String getNamespaceURIFromPrefix(String prefix)", "public void setSourceLocator(SourceLocator locator)", "public void addUniqueAttribute(String qName, String value, int flags) throws SAXException", "public void addXSLAttribute(String qName, final String value, final String uri)", "public void addAttribute(String uri, String localName, String rawName, String type, String value) throws SAXException" ],
  "variableNames" : [ "NO_BAD_CHARS", "HTML_ATTREMPTY", "HTML_ATTRURL" ]
}