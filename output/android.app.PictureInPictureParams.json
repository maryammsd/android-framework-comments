{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/PictureInPictureParams.java",
  "packageName" : "android.app",
  "className" : "PictureInPictureParams",
  "comment" : "\n * Represents a set of parameters used to initialize and update an Activity in picture-in-picture\n * mode.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAspectRatio",
    "type" : "Rational",
    "comment" : "\n     * The expected aspect ratio of the picture-in-picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExpandedAspectRatio",
    "type" : "Rational",
    "comment" : "\n     * The expected aspect ratio of the expanded picture-in-picture window.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserActions",
    "type" : "List<RemoteAction>",
    "comment" : "\n     * The set of actions that are associated with this activity when in picture-in-picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCloseAction",
    "type" : "RemoteAction",
    "comment" : "\n     * Action to replace the system close action.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSourceRectHint",
    "type" : "Rect",
    "comment" : "\n     * The source bounds hint used when entering picture-in-picture, relative to the window bounds.\n     * We can use this internally for the transition into picture-in-picture to ensure that a\n     * particular source rect is visible throughout the whole transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutoEnterEnabled",
    "type" : "Boolean",
    "comment" : "\n     * Whether the system is allowed to automatically put the activity in picture-in-picture mode.\n     * {@link #isAutoEnterEnabled()} defaults to {@code false} if this is not set.\n     ",
    "links" : [ "#isAutoEnterEnabled()" ]
  }, {
    "name" : "mSeamlessResizeEnabled",
    "type" : "Boolean",
    "comment" : "\n     * Whether system can seamlessly resize the window when activity is in picture-in-picture mode.\n     * {@link #isSeamlessResizeEnabled()} defaults to {@code true} if this is not set for\n     * backwards compatibility.\n     ",
    "links" : [ "#isSeamlessResizeEnabled()" ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "\n     * Title of the picture-in-picture window to be displayed to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubtitle",
    "type" : "CharSequence",
    "comment" : "\n     * Subtitle for the picture-in-picture window to be displayed to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsLaunchIntoPip",
    "type" : "Boolean",
    "comment" : "\n     * Whether this {@link PictureInPictureParams} represents a launch into\n     * picture-in-picture request.\n     * {@link #isLaunchIntoPip()} defaults to {@code false} is this is not set.\n     ",
    "links" : [ "#isLaunchIntoPip()", "android.app.PictureInPictureParams" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PictureInPictureParams>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void copyOnlySet(PictureInPictureParams otherArgs)",
    "returnType" : "void",
    "comment" : "\n     * Copies the set parameters from the other picture-in-picture args.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAspectRatioFloat()",
    "returnType" : "float",
    "comment" : "\n     * @return the aspect ratio. If none is set, return 0.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rational getAspectRatio()",
    "returnType" : "Rational",
    "comment" : "\n     * Returns the expected aspect ratio of the picture-in-picture window.\n     *\n     * @return aspect ratio as the desired width / height or {@code null} if not set.\n     * @see PictureInPictureParams.Builder#setAspectRatio(Rational)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSetAspectRatio()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the aspect ratio is set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getExpandedAspectRatioFloat()",
    "returnType" : "float",
    "comment" : "\n     * @return the expanded aspect ratio. If none is set, return 0.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rational getExpandedAspectRatio()",
    "returnType" : "Rational",
    "comment" : "\n     * Returns the desired aspect ratio of the expanded picture-in-picture window.\n     *\n     * @return aspect ratio as the desired width / height or {@code null} if not set.\n     * @see PictureInPictureParams.Builder#setExpandedAspectRatio(Rational)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSetExpandedAspectRatio()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the expanded aspect ratio is set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<RemoteAction> getActions()",
    "returnType" : "List<RemoteAction>",
    "comment" : "\n     * Returns the list of user actions that are associated with the activity when in\n     * picture-in-picture mode.\n     *\n     * @return the user actions in a new list.\n     * @see PictureInPictureParams.Builder#setActions(List)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSetActions()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the user actions are set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public RemoteAction getCloseAction()",
    "returnType" : "RemoteAction",
    "comment" : "\n     * Returns the action that is to replace the system close action.\n     *\n     * @return the close action or {@code null} if not set.\n     * @see PictureInPictureParams.Builder#setCloseAction(RemoteAction)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSetCloseAction()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the close action was set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void truncateActions(int size)",
    "returnType" : "void",
    "comment" : "\n     * Truncates the set of actions to the given {@param size}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getSourceRectHint()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the source rect hint.\n     *\n     * @return the source rect hint also known as launch bounds or {@code null} if not set.\n     * @see PictureInPictureParams.Builder#setSourceRectHint(Rect)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSourceBoundsHint()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether there are launch bounds set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoEnterEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether auto enter picture-in-picture is enabled.\n     *\n     * @return {@code true} if the system will automatically put the activity in\n     * picture-in-picture mode.\n     * @see PictureInPictureParams.Builder#setAutoEnterEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSeamlessResizeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether seamless resize is enabled.\n     *\n     * @return true if the system can seamlessly resize the window while activity is in\n     * picture-in-picture mode.\n     * @see PictureInPictureParams.Builder#setSeamlessResizeEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSetTitle()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether a title was set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the title of the picture-in-picture window that may be displayed to the user.\n     *\n     * @return title of the picture-in-picture window.\n     * @see PictureInPictureParams.Builder#setTitle(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSetSubtitle()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether a subtitle was set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the subtitle of the picture-in-picture window that may be displayed to the user.\n     *\n     * @return subtitle of the picture-in-picture window.\n     * @see PictureInPictureParams.Builder#setSubtitle(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLaunchIntoPip()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this {@link PictureInPictureParams} represents a launch into pip request.\n     * @hide\n     ",
    "links" : [ "android.app.PictureInPictureParams" ]
  }, {
    "name" : "public boolean empty()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if no parameters are set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeRationalToParcel(Rational rational, Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rational readRationalFromParcel(Parcel in)",
    "returnType" : "Rational",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void copyOnlySet(PictureInPictureParams otherArgs)", "public float getAspectRatioFloat()", "public Rational getAspectRatio()", "public boolean hasSetAspectRatio()", "public float getExpandedAspectRatioFloat()", "public Rational getExpandedAspectRatio()", "public boolean hasSetExpandedAspectRatio()", "public List<RemoteAction> getActions()", "public boolean hasSetActions()", "public RemoteAction getCloseAction()", "public boolean hasSetCloseAction()", "public void truncateActions(int size)", "public Rect getSourceRectHint()", "public boolean hasSourceBoundsHint()", "public boolean isAutoEnterEnabled()", "public boolean isSeamlessResizeEnabled()", "public boolean hasSetTitle()", "public CharSequence getTitle()", "public boolean hasSetSubtitle()", "public CharSequence getSubtitle()", "public boolean isLaunchIntoPip()", "public boolean empty()", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "private void writeRationalToParcel(Rational rational, Parcel out)", "private Rational readRationalFromParcel(Parcel in)", "public String toString()" ],
  "variableNames" : [ "mAspectRatio", "mExpandedAspectRatio", "mUserActions", "mCloseAction", "mSourceRectHint", "mAutoEnterEnabled", "mSeamlessResizeEnabled", "mTitle", "mSubtitle", "mIsLaunchIntoPip", "CREATOR" ]
}