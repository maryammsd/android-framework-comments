{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/DistanceMeasurementResult.java",
  "packageName" : "android.bluetooth.le",
  "className" : "DistanceMeasurementResult",
  "comment" : "\n * Result of distance measurement.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NADM_ATTACK_IS_EXTREMELY_UNLIKELY",
    "type" : "int",
    "comment" : "\n     * Attack is extremely unlikely.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_ATTACK_IS_VERY_UNLIKELY",
    "type" : "int",
    "comment" : "\n     * Attack is very unlikely.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_ATTACK_IS_UNLIKELY",
    "type" : "int",
    "comment" : "\n     * Attack is unlikely.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_ATTACK_IS_POSSIBLE",
    "type" : "int",
    "comment" : "\n     * Attack is possible.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_ATTACK_IS_LIKELY",
    "type" : "int",
    "comment" : "\n     * Attack is likely.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_ATTACK_IS_VERY_LIKELY",
    "type" : "int",
    "comment" : "\n     * Attack is very likely.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_ATTACK_IS_EXTREMELY_LIKELY",
    "type" : "int",
    "comment" : "\n     * Attack is extremely likely.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NADM_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown NADM, if a device is unable to determine a NADM value, then it shall report this.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAzimuthAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorAzimuthAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAltitudeAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorAltitudeAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelaySpreadMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfidenceLevel",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetectedAttackLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityMetersPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<DistanceMeasurementResult>",
    "comment" : " A {@link Parcelable.Creator} to create {@link DistanceMeasurementResult} from parcel. ",
    "links" : [ "android.bluetooth.le.DistanceMeasurementResult", "Parcelable.Creator" ]
  } ],
  "methods" : [ {
    "name" : "public double getResultMeters()",
    "returnType" : "double",
    "comment" : "\n     * Distance measurement in meters.\n     *\n     * @return distance in meters\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getErrorMeters()",
    "returnType" : "double",
    "comment" : "\n     * Error of distance measurement in meters.\n     *\n     * <p>Must be positive.\n     *\n     * @return error of distance measurement in meters\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAzimuthAngle()",
    "returnType" : "double",
    "comment" : "\n     * Azimuth Angle measurement in degrees.\n     *\n     * <p>Azimuth of remote device in horizontal coordinate system, this measured from azimuth north\n     * and increasing eastward. When the remote device in azimuth north, this angle is 0, whe the\n     * remote device in azimuth south, this angle is 180.\n     *\n     * <p>See: <a href=\"https://en.wikipedia.org/wiki/Horizontal_coordinate_system\">Horizontal\n     * coordinate system</a>for the details\n     *\n     * <p>On an Android device, azimuth north is defined as the angle perpendicular away from the\n     * back of the device when holding it in portrait mode upright.\n     *\n     * <p>The Azimuth north is defined as the direction in which the top edge of the device is\n     * facing when it is placed flat.\n     *\n     * @return azimuth angle in degrees or Double.NaN if not available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getErrorAzimuthAngle()",
    "returnType" : "double",
    "comment" : "\n     * Error of azimuth angle measurement in degrees.\n     *\n     * <p>Must be a positive value.\n     *\n     * @return azimuth angle measurement error in degrees or Double.NaN if not available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAltitudeAngle()",
    "returnType" : "double",
    "comment" : "\n     * Altitude Angle measurement in degrees.\n     *\n     * <p>Altitude of remote device in horizontal coordinate system, this is the angle between the\n     * remote device and the top edge of local device. When local device is placed flat, the angle\n     * of the zenith is 90, the angle of the nadir is -90.\n     *\n     * <p>See: https://en.wikipedia.org/wiki/Horizontal_coordinate_system\n     *\n     * @return altitude angle in degrees or Double.NaN if not available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getErrorAltitudeAngle()",
    "returnType" : "double",
    "comment" : "\n     * Error of altitude angle measurement in degrees.\n     *\n     * <p>Must be a positive value.\n     *\n     * @return altitude angle measurement error in degrees or Double.NaN if not available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDelaySpreadMeters()",
    "returnType" : "double",
    "comment" : "\n     * Get estimated delay spread in meters of the measured channel. This is a measure of multipath\n     * richness of the channel.\n     *\n     * @return delay spread in meters in degrees or Double.NaN if not available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getConfidenceLevel()",
    "returnType" : "double",
    "comment" : "\n     * Get a normalized value from 0.0 (low confidence) to 1.0 (high confidence) representing the\n     * confidence of estimated distance.\n     *\n     * @return confidence of estimated distance or Double.NaN if not available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDetectedAttackLevel()",
    "returnType" : "int",
    "comment" : "\n     * Get a value that represents the chance of being attacked for the measurement.\n     *\n     * @return Nadm that represents the chance of being attacked for the measurement.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getVelocityMetersPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Get estimated velocity, in the direction of line between two devices, of the moving object in\n     * meters/sec.\n     *\n     * @return Estimated velocity, in the direction of line between two devices, of the moving\n     *     object in meters/sec.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * @hide *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public double getResultMeters()", "public double getErrorMeters()", "public double getAzimuthAngle()", "public double getErrorAzimuthAngle()", "public double getAltitudeAngle()", "public double getErrorAltitudeAngle()", "public double getDelaySpreadMeters()", "public double getConfidenceLevel()", "public int getDetectedAttackLevel()", "public double getVelocityMetersPerSecond()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public String toString()" ],
  "variableNames" : [ "NADM_ATTACK_IS_EXTREMELY_UNLIKELY", "NADM_ATTACK_IS_VERY_UNLIKELY", "NADM_ATTACK_IS_UNLIKELY", "NADM_ATTACK_IS_POSSIBLE", "NADM_ATTACK_IS_LIKELY", "NADM_ATTACK_IS_VERY_LIKELY", "NADM_ATTACK_IS_EXTREMELY_LIKELY", "NADM_UNKNOWN", "mMeters", "mErrorMeters", "mAzimuthAngle", "mErrorAzimuthAngle", "mAltitudeAngle", "mErrorAltitudeAngle", "mDelaySpreadMeters", "mConfidenceLevel", "mDetectedAttackLevel", "mVelocityMetersPerSecond", "CREATOR" ]
}