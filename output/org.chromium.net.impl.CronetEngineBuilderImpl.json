{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/impl/CronetEngineBuilderImpl.java",
  "packageName" : "org.chromium.net.impl",
  "className" : "CronetEngineBuilderImpl",
  "comment" : " Implementation of {@link ICronetEngineBuilder}. ",
  "links" : [ "org.chromium.net.ICronetEngineBuilder" ],
  "variables" : [ {
    "name" : "INVALID_PKP_HOST_NAME",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_THREAD_PRIORITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplicationContext",
    "type" : "Context",
    "comment" : " See setters below for verbose descriptions.",
    "links" : [ ]
  }, {
    "name" : "mQuicHints",
    "type" : "List<QuicHint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPkps",
    "type" : "List<Pkp>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPublicKeyPinningBypassForLocalTrustAnchorsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAgent",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStoragePath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuicEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHttp2Enabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBrotiEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisableCache",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHttpCacheMode",
    "type" : "HttpCacheMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHttpCacheMaxSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExperimentalOptions",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMockCertVerifier",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkQualityEstimatorEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreadPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDefaultUserAgent()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl setUserAgent(String userAgent)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getUserAgent()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl setStoragePath(String value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String storagePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl setLibraryLoader(CronetEngine.Builder.LibraryLoader loader)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " VersionSafeCallbacks.LibraryLoader libraryLoader()",
    "returnType" : "VersionSafeCallbacks.LibraryLoader",
    "comment" : "\n     * Default implementation of the method that returns {@code null}.\n     *\n     * @return {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enableQuic(boolean value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean quicEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getDefaultQuicUserAgentId()",
    "returnType" : "String",
    "comment" : "\n     * Constructs default QUIC User Agent Id string including application name\n     * and Cronet version. Returns empty string if QUIC is not enabled.\n     *\n     * @return QUIC User Agent ID string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enableHttp2(boolean value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean http2Enabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enableSdch(boolean value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enableBrotli(boolean value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean brotliEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enableHttpCache(@HttpCacheSetting int cacheMode, long maxSize)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean cacheDisabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long httpCacheMaxSize()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int httpCacheMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int publicBuilderHttpCacheMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl addQuicHint(String host, int port, int alternatePort)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " List<QuicHint> quicHints()",
    "returnType" : "List<QuicHint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl addPublicKeyPins(String hostName, Set<byte[]> pinsSha256, boolean includeSubdomains, Date expirationDate)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " List<Pkp> publicKeyPins()",
    "returnType" : "List<Pkp>",
    "comment" : "\n     * Returns list of public key pins.\n     * @return list of public key pins.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enablePublicKeyPinningBypassForLocalTrustAnchors(boolean value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean publicKeyPinningBypassForLocalTrustAnchorsEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String validateHostNameForPinningAndConvert(String hostName) throws IllegalArgumentException",
    "returnType" : "String",
    "comment" : "\n     * Checks whether a given string represents a valid host name for PKP and converts it\n     * to ASCII Compatible Encoding representation according to RFC 1122, RFC 1123 and\n     * RFC 3490. This method is more restrictive than required by RFC 7469. Thus, a host\n     * that contains digits and the dot character only is considered invalid.\n     *\n     * Note: Currently Cronet doesn't have native implementation of host name validation that\n     *       can be used. There is code that parses a provided URL but doesn't ensure its\n     *       correctness. The implementation relies on {@code getaddrinfo} function.\n     *\n     * @param hostName host name to check and convert.\n     * @return true if the string is a valid host name.\n     * @throws IllegalArgumentException if the the given string does not represent a valid\n     *                                  hostname.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl setExperimentalOptions(String options)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String experimentalOptions()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl setMockCertVerifierForTesting(long mockCertVerifier)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "\n     * Sets a native MockCertVerifier for testing. See\n     * {@code MockCertVerifier.createMockCertVerifier} for a method that\n     * can be used to create a MockCertVerifier.\n     * @param mockCertVerifier pointer to native MockCertVerifier.\n     * @return the builder to facilitate chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : " long mockCertVerifier()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean networkQualityEstimatorEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the network quality estimator has been enabled for\n     * this builder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl enableNetworkQualityEstimator(boolean value)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CronetEngineBuilderImpl setThreadPriority(int priority)",
    "returnType" : "CronetEngineBuilderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int threadPriority(int defaultThreadPriority)",
    "returnType" : "int",
    "comment" : " @return thread priority provided by user, or {@code defaultThreadPriority} if none provided. ",
    "links" : [ ]
  }, {
    "name" : " Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Returns {@link Context} for builder.\n     *\n     * @return {@link Context} for builder.\n     ",
    "links" : [ "android.content.Context" ]
  } ],
  "methodNames" : [ "public String getDefaultUserAgent()", "public CronetEngineBuilderImpl setUserAgent(String userAgent)", "public String getUserAgent()", "public CronetEngineBuilderImpl setStoragePath(String value)", "public String storagePath()", "public CronetEngineBuilderImpl setLibraryLoader(CronetEngine.Builder.LibraryLoader loader)", " VersionSafeCallbacks.LibraryLoader libraryLoader()", "public CronetEngineBuilderImpl enableQuic(boolean value)", "public boolean quicEnabled()", " String getDefaultQuicUserAgentId()", "public CronetEngineBuilderImpl enableHttp2(boolean value)", "public boolean http2Enabled()", "public CronetEngineBuilderImpl enableSdch(boolean value)", "public CronetEngineBuilderImpl enableBrotli(boolean value)", "public boolean brotliEnabled()", "public CronetEngineBuilderImpl enableHttpCache(@HttpCacheSetting int cacheMode, long maxSize)", " boolean cacheDisabled()", " long httpCacheMaxSize()", "public int httpCacheMode()", "public int publicBuilderHttpCacheMode()", "public CronetEngineBuilderImpl addQuicHint(String host, int port, int alternatePort)", " List<QuicHint> quicHints()", "public CronetEngineBuilderImpl addPublicKeyPins(String hostName, Set<byte[]> pinsSha256, boolean includeSubdomains, Date expirationDate)", " List<Pkp> publicKeyPins()", "public CronetEngineBuilderImpl enablePublicKeyPinningBypassForLocalTrustAnchors(boolean value)", "public boolean publicKeyPinningBypassForLocalTrustAnchorsEnabled()", "private static String validateHostNameForPinningAndConvert(String hostName) throws IllegalArgumentException", "public CronetEngineBuilderImpl setExperimentalOptions(String options)", "public String experimentalOptions()", "public CronetEngineBuilderImpl setMockCertVerifierForTesting(long mockCertVerifier)", " long mockCertVerifier()", "public boolean networkQualityEstimatorEnabled()", "public CronetEngineBuilderImpl enableNetworkQualityEstimator(boolean value)", "public CronetEngineBuilderImpl setThreadPriority(int priority)", "public int threadPriority(int defaultThreadPriority)", " Context getContext()" ],
  "variableNames" : [ "INVALID_PKP_HOST_NAME", "INVALID_THREAD_PRIORITY", "mApplicationContext", "mQuicHints", "mPkps", "mPublicKeyPinningBypassForLocalTrustAnchorsEnabled", "mUserAgent", "mStoragePath", "mQuicEnabled", "mHttp2Enabled", "mBrotiEnabled", "mDisableCache", "mHttpCacheMode", "mHttpCacheMaxSize", "mExperimentalOptions", "mMockCertVerifier", "mNetworkQualityEstimatorEnabled", "mThreadPriority" ]
}