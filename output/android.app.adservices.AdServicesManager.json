{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/adservices/AdServicesManager.java",
  "packageName" : "android.app.adservices",
  "className" : "AdServicesManager",
  "comment" : " TODO(b/269798827): Enable for R.",
  "links" : [ ],
  "variables" : [ {
    "name" : "AD_SERVICES_SYSTEM_SERVICE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSingleton",
    "type" : "AdServicesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAdServicesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SINGLETON_LOCK",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEASUREMENT_DELETION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AdServicesManager getInstance(@NonNull Context context)",
    "returnType" : "AdServicesManager",
    "comment" : " Get the singleton of AdServicesManager. Only used on T+ ",
    "links" : [ ]
  }, {
    "name" : "public ConsentParcel getConsent(@ConsentParcel.ConsentApiType int consentApiType)",
    "returnType" : "ConsentParcel",
    "comment" : " Return the User Consent ",
    "links" : [ ]
  }, {
    "name" : "public void setConsent(@NonNull ConsentParcel consentParcel)",
    "returnType" : "void",
    "comment" : " Set the User Consent ",
    "links" : [ ]
  }, {
    "name" : "public void recordNotificationDisplayed(boolean wasNotificationDisplayed)",
    "returnType" : "void",
    "comment" : "\n     * Saves information to the storage that notification was displayed for the first time to the\n     * user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean wasNotificationDisplayed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns information whether Consent Notification was displayed or not.\n     *\n     * @return true if Consent Notification was displayed, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recordGaUxNotificationDisplayed(boolean wasNotificationDisplayed)",
    "returnType" : "void",
    "comment" : "\n     * Saves information to the storage that notification was displayed for the first time to the\n     * user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUserManualInteractionWithConsent()",
    "returnType" : "int",
    "comment" : "\n     * Returns information whether user interacted with consent manually.\n     *\n     * @return\n     *     <ul>\n     *       <li>-1 when no manual interaction was recorded\n     *       <li>0 when no data about interaction (similar to null)\n     *       <li>1 when manual interaction was recorded\n     *     </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recordUserManualInteractionWithConsent(int interaction)",
    "returnType" : "void",
    "comment" : " Saves information to the storage that user interacted with consent manually. ",
    "links" : [ ]
  }, {
    "name" : "public boolean wasGaUxNotificationDisplayed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns information whether Consent GA UX Notification was displayed or not.\n     *\n     * @return true if Consent GA UX Notification was displayed, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean wasPasNotificationDisplayed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns information whether Consent PAS Notification was displayed or not.\n     *\n     * @return true if PAS Notification was displayed, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recordPasNotificationDisplayed(boolean wasNotificationDisplayed)",
    "returnType" : "void",
    "comment" : "\n     * Saves information to the storage that PAS notification was displayed for the first time to\n     * the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean wasPasNotificationOpened()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns information whether Consent PAS Notification was opened or not.\n     *\n     * @return true if PAS Notification was opened, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recordPasNotificationOpened(boolean wasNotificationOpened)",
    "returnType" : "void",
    "comment" : " Saves information to the storage that PAS notification was opened. ",
    "links" : [ ]
  }, {
    "name" : "public void recordBlockedTopic(@NonNull List<TopicParcel> blockedTopicParcels)",
    "returnType" : "void",
    "comment" : "\n     * Record a blocked topic.\n     *\n     * @param blockedTopicParcels the blocked topic to record\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeBlockedTopic(@NonNull TopicParcel blockedTopicParcel)",
    "returnType" : "void",
    "comment" : "\n     * Remove a blocked topic.\n     *\n     * @param blockedTopicParcel the blocked topic to remove\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<TopicParcel> retrieveAllBlockedTopics()",
    "returnType" : "List<TopicParcel>",
    "comment" : "\n     * Get all blocked topics.\n     *\n     * @return a {@code List} of all blocked topics.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearAllBlockedTopics()",
    "returnType" : "void",
    "comment" : " Clear all Blocked Topics ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getKnownAppsWithConsent(List<String> installedPackages)",
    "returnType" : "List<String>",
    "comment" : " Returns the list of apps with consent. ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAppsWithRevokedConsent(List<String> installedPackages)",
    "returnType" : "List<String>",
    "comment" : " Returns the list of apps with revoked consent. ",
    "links" : [ ]
  }, {
    "name" : "public void setConsentForApp(String packageName, int packageUid, boolean isConsentRevoked)",
    "returnType" : "void",
    "comment" : " Set user consent for an app ",
    "links" : [ ]
  }, {
    "name" : "public void clearKnownAppsWithConsent()",
    "returnType" : "void",
    "comment" : " Reset all apps and blocked apps. ",
    "links" : [ ]
  }, {
    "name" : "public void clearAllAppConsentData()",
    "returnType" : "void",
    "comment" : " Reset all apps consent. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConsentRevokedForApp(String packageName, int packageUid)",
    "returnType" : "boolean",
    "comment" : "\n     * Get if user consent is revoked for a given app.\n     *\n     * @return {@code true} if the user consent was revoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConsentForAppIfNew(String packageName, int packageUid, boolean isConsentRevoked)",
    "returnType" : "boolean",
    "comment" : "\n     * Set user consent if the app first time request access and/or return consent value for the\n     * app.\n     *\n     * @return {@code true} if user consent was given.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearConsentForUninstalledApp(String packageName, int packageUid)",
    "returnType" : "void",
    "comment" : " Clear the app consent entry for uninstalled app. ",
    "links" : [ ]
  }, {
    "name" : "public void recordAdServicesDeletionOccurred(@DeletionApiType int deletionType)",
    "returnType" : "void",
    "comment" : " Saves information to the storage that a deletion of measurement data occurred. ",
    "links" : [ ]
  }, {
    "name" : "public void recordDefaultConsent(boolean defaultConsent)",
    "returnType" : "void",
    "comment" : " Saves the PP API default consent of a user. ",
    "links" : [ ]
  }, {
    "name" : "public void recordTopicsDefaultConsent(boolean defaultConsent)",
    "returnType" : "void",
    "comment" : " Saves the topics default consent of a user. ",
    "links" : [ ]
  }, {
    "name" : "public void recordFledgeDefaultConsent(boolean defaultConsent)",
    "returnType" : "void",
    "comment" : " Saves the FLEDGE default consent of a user. ",
    "links" : [ ]
  }, {
    "name" : "public void recordMeasurementDefaultConsent(boolean defaultConsent)",
    "returnType" : "void",
    "comment" : " Saves the measurement default consent of a user. ",
    "links" : [ ]
  }, {
    "name" : "public void recordDefaultAdIdState(boolean defaultAdIdState)",
    "returnType" : "void",
    "comment" : " Saves the default AdId state of a user. ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsToHandleRollbackReconciliation(@DeletionApiType int deletionType)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the AdServices module needs to handle data reconciliation after a rollback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDefaultConsent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the PP API default consent of a user.\n     *\n     * @return true if the PP API default consent is given, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getTopicsDefaultConsent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the topics default consent of a user.\n     *\n     * @return true if the topics default consent is given, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFledgeDefaultConsent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the FLEDGE default consent of a user.\n     *\n     * @return true if the FLEDGE default consent is given, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getMeasurementDefaultConsent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the measurement default consent of a user.\n     *\n     * @return true if the measurement default consent is given, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDefaultAdIdState()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the default AdId state of a user.\n     *\n     * @return true if the default AdId State is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentPrivacySandboxFeature()",
    "returnType" : "String",
    "comment" : " Returns the current privacy sandbox feature. ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPrivacySandboxFeature(String featureType)",
    "returnType" : "void",
    "comment" : " Set the current privacy sandbox feature. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAdIdEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the isAdIdEnabled bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setAdIdEnabled(boolean isAdIdEnabled)",
    "returnType" : "void",
    "comment" : " Saves the isAdIdEnabled bit. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isU18Account()",
    "returnType" : "boolean",
    "comment" : " Returns whether the isU18Account bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setU18Account(boolean isU18Account)",
    "returnType" : "void",
    "comment" : " Saves the isU18Account bit. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEntryPointEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the isEntryPointEnabled bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setEntryPointEnabled(boolean isEntryPointEnabled)",
    "returnType" : "void",
    "comment" : " Saves the isEntryPointEnabled bit. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAdultAccount()",
    "returnType" : "boolean",
    "comment" : " Returns whether the isAdultAccount bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setAdultAccount(boolean isAdultAccount)",
    "returnType" : "void",
    "comment" : " Saves the isAdultAccount bit. ",
    "links" : [ ]
  }, {
    "name" : "public boolean wasU18NotificationDisplayed()",
    "returnType" : "boolean",
    "comment" : " Returns whether the wasU18NotificationDisplayed bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setU18NotificationDisplayed(boolean wasU18NotificationDisplayed)",
    "returnType" : "void",
    "comment" : " Saves the wasU18NotificationDisplayed bit. ",
    "links" : [ ]
  }, {
    "name" : "public String getUx()",
    "returnType" : "String",
    "comment" : " Returns the current UX. ",
    "links" : [ ]
  }, {
    "name" : "public void setUx(String ux)",
    "returnType" : "void",
    "comment" : " Set the current UX. ",
    "links" : [ ]
  }, {
    "name" : "public String getEnrollmentChannel()",
    "returnType" : "String",
    "comment" : " Returns the current enrollment channel. ",
    "links" : [ ]
  }, {
    "name" : "public void setEnrollmentChannel(String enrollmentChannel)",
    "returnType" : "void",
    "comment" : " Set the current enrollment channel. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMeasurementDataReset()",
    "returnType" : "boolean",
    "comment" : " Returns whether the isMeasurementDataReset bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setMeasurementDataReset(boolean isMeasurementDataReset)",
    "returnType" : "void",
    "comment" : " Saves the isMeasurementDataReset bit. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPaDataReset()",
    "returnType" : "boolean",
    "comment" : " Returns whether the isPaDataReset bit is true. ",
    "links" : [ ]
  }, {
    "name" : "public void setPaDataReset(boolean isPaDataReset)",
    "returnType" : "void",
    "comment" : " Saves the isPaDataReset bit. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static AdServicesManager getInstance(@NonNull Context context)", "public ConsentParcel getConsent(@ConsentParcel.ConsentApiType int consentApiType)", "public void setConsent(@NonNull ConsentParcel consentParcel)", "public void recordNotificationDisplayed(boolean wasNotificationDisplayed)", "public boolean wasNotificationDisplayed()", "public void recordGaUxNotificationDisplayed(boolean wasNotificationDisplayed)", "public int getUserManualInteractionWithConsent()", "public void recordUserManualInteractionWithConsent(int interaction)", "public boolean wasGaUxNotificationDisplayed()", "public boolean wasPasNotificationDisplayed()", "public void recordPasNotificationDisplayed(boolean wasNotificationDisplayed)", "public boolean wasPasNotificationOpened()", "public void recordPasNotificationOpened(boolean wasNotificationOpened)", "public void recordBlockedTopic(@NonNull List<TopicParcel> blockedTopicParcels)", "public void removeBlockedTopic(@NonNull TopicParcel blockedTopicParcel)", "public List<TopicParcel> retrieveAllBlockedTopics()", "public void clearAllBlockedTopics()", "public List<String> getKnownAppsWithConsent(List<String> installedPackages)", "public List<String> getAppsWithRevokedConsent(List<String> installedPackages)", "public void setConsentForApp(String packageName, int packageUid, boolean isConsentRevoked)", "public void clearKnownAppsWithConsent()", "public void clearAllAppConsentData()", "public boolean isConsentRevokedForApp(String packageName, int packageUid)", "public boolean setConsentForAppIfNew(String packageName, int packageUid, boolean isConsentRevoked)", "public void clearConsentForUninstalledApp(String packageName, int packageUid)", "public void recordAdServicesDeletionOccurred(@DeletionApiType int deletionType)", "public void recordDefaultConsent(boolean defaultConsent)", "public void recordTopicsDefaultConsent(boolean defaultConsent)", "public void recordFledgeDefaultConsent(boolean defaultConsent)", "public void recordMeasurementDefaultConsent(boolean defaultConsent)", "public void recordDefaultAdIdState(boolean defaultAdIdState)", "public boolean needsToHandleRollbackReconciliation(@DeletionApiType int deletionType)", "public boolean getDefaultConsent()", "public boolean getTopicsDefaultConsent()", "public boolean getFledgeDefaultConsent()", "public boolean getMeasurementDefaultConsent()", "public boolean getDefaultAdIdState()", "public String getCurrentPrivacySandboxFeature()", "public void setCurrentPrivacySandboxFeature(String featureType)", "public boolean isAdIdEnabled()", "public void setAdIdEnabled(boolean isAdIdEnabled)", "public boolean isU18Account()", "public void setU18Account(boolean isU18Account)", "public boolean isEntryPointEnabled()", "public void setEntryPointEnabled(boolean isEntryPointEnabled)", "public boolean isAdultAccount()", "public void setAdultAccount(boolean isAdultAccount)", "public boolean wasU18NotificationDisplayed()", "public void setU18NotificationDisplayed(boolean wasU18NotificationDisplayed)", "public String getUx()", "public void setUx(String ux)", "public String getEnrollmentChannel()", "public void setEnrollmentChannel(String enrollmentChannel)", "public boolean isMeasurementDataReset()", "public void setMeasurementDataReset(boolean isMeasurementDataReset)", "public boolean isPaDataReset()", "public void setPaDataReset(boolean isPaDataReset)" ],
  "variableNames" : [ "AD_SERVICES_SYSTEM_SERVICE", "sSingleton", "mService", "SINGLETON_LOCK", "MEASUREMENT_DELETION" ]
}