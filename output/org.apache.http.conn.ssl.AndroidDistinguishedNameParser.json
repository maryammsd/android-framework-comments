{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/http/conn/ssl/AndroidDistinguishedNameParser.java",
  "packageName" : "org.apache.http.conn.ssl",
  "className" : "AndroidDistinguishedNameParser",
  "comment" : "\n * A distinguished name (DN) parser. This parser only supports extracting a\n * string value from a DN. It doesn't support values in the hex-string style.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "dn",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "beg",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "end",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cur",
    "type" : "int",
    "comment" : " tmp vars to store positions of the currently parsed item ",
    "links" : [ ]
  }, {
    "name" : "chars",
    "type" : "char[]",
    "comment" : " distinguished name chars ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private String nextAT()",
    "returnType" : "String",
    "comment" : " gets next attribute type: (ALPHA 1*keychar) / oid",
    "links" : [ ]
  }, {
    "name" : "private String quotedAV()",
    "returnType" : "String",
    "comment" : " gets quoted attribute value: QUOTATION *( quotechar / pair ) QUOTATION",
    "links" : [ ]
  }, {
    "name" : "private String hexAV()",
    "returnType" : "String",
    "comment" : " gets hex string attribute value: \"#\" hexstring",
    "links" : [ ]
  }, {
    "name" : "private String escapedAV()",
    "returnType" : "String",
    "comment" : " gets string attribute value: *( stringchar / pair )",
    "links" : [ ]
  }, {
    "name" : "private char getEscaped()",
    "returnType" : "char",
    "comment" : " returns escaped char",
    "links" : [ ]
  }, {
    "name" : "private char getUTF8()",
    "returnType" : "char",
    "comment" : " see http://www.unicode.org for UTF-8 bit distribution table",
    "links" : [ ]
  }, {
    "name" : "private int getByte(int position)",
    "returnType" : "int",
    "comment" : "                    / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\"",
    "links" : [ ]
  }, {
    "name" : "public String findMostSpecific(String attributeType)",
    "returnType" : "String",
    "comment" : "\n     * Parses the DN and returns the most significant attribute value\n     * for an attribute type, or null if none found.\n     *\n     * @param attributeType attribute type to look for (e.g. \"ca\")\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllMostSpecificFirst(String attributeType)",
    "returnType" : "List<String>",
    "comment" : "\n     * Parses the DN and returns all values for an attribute type, in\n     * the order of decreasing significance (most significant first).\n     *\n     * @param attributeType attribute type to look for (e.g. \"ca\")\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private String nextAT()", "private String quotedAV()", "private String hexAV()", "private String escapedAV()", "private char getEscaped()", "private char getUTF8()", "private int getByte(int position)", "public String findMostSpecific(String attributeType)", "public List<String> getAllMostSpecificFirst(String attributeType)" ],
  "variableNames" : [ "dn", "length", "pos", "beg", "end", "cur", "chars" ]
}