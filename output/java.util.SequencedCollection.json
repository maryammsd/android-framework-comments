{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/SequencedCollection.java",
  "packageName" : "java.util",
  "className" : "SequencedCollection",
  "comment" : "\n * A collection that has a well-defined encounter order, that supports operations at both ends,\n * and that is reversible. The elements of a sequenced collection have an <a id=\"encounter\">\n * <i>encounter order</i></a>, where conceptually the elements have a linear arrangement\n * from the first element to the last element. Given any two elements, one element is\n * either before (closer to the first element) or after (closer to the last element)\n * the other element.\n * <p>\n * (Note that this definition does not imply anything about physical positioning\n * of elements, such as their locations in a computer's memory.)\n * <p>\n * Several methods inherited from the {@link Collection} interface are required to operate\n * on elements according to this collection's encounter order. For instance, the\n * {@link Collection#iterator iterator} method provides elements starting from the first element,\n * proceeding through successive elements, until the last element. Other methods that are\n * required to operate on elements in encounter order include the following:\n * {@link Iterable#forEach forEach}, {@link Collection#parallelStream parallelStream},\n * {@link Collection#spliterator spliterator}, {@link Collection#stream stream},\n * and all overloads of the {@link Collection#toArray toArray} method.\n * <p>\n * This interface provides methods to add, retrieve, and remove elements at either end\n * of the collection.\n * <p>\n * This interface also defines the {@link #reversed reversed} method, which provides\n * a reverse-ordered <a href=\"Collection.html#view\">view</a> of this collection.\n * In the reverse-ordered view, the concepts of first and last are inverted, as are\n * the concepts of successor and predecessor. The first element of this collection is\n * the last element of the reverse-ordered view, and vice-versa. The successor of some\n * element in this collection is its predecessor in the reversed view, and vice-versa. All\n * methods that respect the encounter order of the collection operate as if the encounter order\n * is inverted. For instance, the {@link #iterator} method of the reversed view reports the\n * elements in order from the last element of this collection to the first. The availability of\n * the {@code reversed} method, and its impact on the ordering semantics of all applicable\n * methods, allow convenient iteration, searching, copying, and streaming of the elements of\n * this collection in either forward order or reverse order.\n * <p>\n * This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @apiNote\n * This interface does not impose any requirements on the {@code equals} and {@code hashCode}\n * methods, because requirements imposed by sub-interfaces {@link List} and {@link SequencedSet}\n * (which inherits requirements from {@link Set}) would be in conflict. See the specifications for\n * {@link Collection#equals Collection.equals} and {@link Collection#hashCode Collection.hashCode}\n * for further information.\n *\n * @param <E> the type of elements in this collection\n * @since 21\n ",
  "links" : [ "java.util.SequencedSet", "#iterator", "java.util.Collection", "java.util.Set", "java.util.Collection#iterator", "java.util.Collection#parallelStream", "java.util.Collection#stream", "java.util.Collection#hashCode", "#forEach", "#reversed", "java.util.List", "java.util.Collection#spliterator", "java.util.Collection#toArray", "java.util.Collection#equals" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " SequencedCollection<E> reversed()",
    "returnType" : "SequencedCollection<E>",
    "comment" : "\n     * Returns a reverse-ordered <a href=\"Collection.html#view\">view</a> of this collection.\n     * The encounter order of elements in the returned view is the inverse of the encounter\n     * order of elements in this collection. The reverse ordering affects all order-sensitive\n     * operations, including those on the view collections of the returned view. If the collection\n     * implementation permits modifications to this view, the modifications \"write through\" to the\n     * underlying collection. Changes to the underlying collection might or might not be visible\n     * in this reversed view, depending upon the implementation.\n     *\n     * @return a reverse-ordered view of this collection\n     ",
    "links" : [ ]
  }, {
    "name" : " void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Adds an element as the first element of this collection (optional operation).\n     * After this operation completes normally, the given element will be a member of\n     * this collection, and it will be the first element in encounter order.\n     *\n     * @implSpec\n     * The implementation in this interface always throws {@code UnsupportedOperationException}.\n     *\n     * @param e the element to be added\n     * @throws NullPointerException if the specified element is null and this\n     *         collection does not permit null elements\n     * @throws UnsupportedOperationException if this collection implementation\n     *         does not support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Adds an element as the last element of this collection (optional operation).\n     * After this operation completes normally, the given element will be a member of\n     * this collection, and it will be the last element in encounter order.\n     *\n     * @implSpec\n     * The implementation in this interface always throws {@code UnsupportedOperationException}.\n     *\n     * @param e the element to be added.\n     * @throws NullPointerException if the specified element is null and this\n     *         collection does not permit null elements\n     * @throws UnsupportedOperationException if this collection implementation\n     *         does not support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * Gets the first element of this collection.\n     *\n     * @implSpec\n     * The implementation in this interface obtains an iterator of this collection, and\n     * then it obtains an element by calling the iterator's {@code next} method. Any\n     * {@code NoSuchElementException} thrown is propagated. Otherwise, it returns\n     * the element.\n     *\n     * @return the retrieved element\n     * @throws NoSuchElementException if this collection is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E getLast()",
    "returnType" : "E",
    "comment" : "\n     * Gets the last element of this collection.\n     *\n     * @implSpec\n     * The implementation in this interface obtains an iterator of the reversed view\n     * of this collection, and then it obtains an element by calling the iterator's\n     * {@code next} method. Any {@code NoSuchElementException} thrown is propagated.\n     * Otherwise, it returns the element.\n     *\n     * @return the retrieved element\n     * @throws NoSuchElementException if this collection is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * Removes and returns the first element of this collection (optional operation).\n     *\n     * @implSpec\n     * The implementation in this interface obtains an iterator of this collection, and then\n     * it obtains an element by calling the iterator's {@code next} method. Any\n     * {@code NoSuchElementException} thrown is propagated. It then calls the iterator's\n     * {@code remove} method. Any {@code UnsupportedOperationException} thrown is propagated.\n     * Then, it returns the element.\n     *\n     * @return the removed element\n     * @throws NoSuchElementException if this collection is empty\n     * @throws UnsupportedOperationException if this collection implementation\n     *         does not support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * Removes and returns the last element of this collection (optional operation).\n     *\n     * @implSpec\n     * The implementation in this interface obtains an iterator of the reversed view of this\n     * collection, and then it obtains an element by calling the iterator's {@code next} method.\n     * Any {@code NoSuchElementException} thrown is propagated. It then calls the iterator's\n     * {@code remove} method. Any {@code UnsupportedOperationException} thrown is propagated.\n     * Then, it returns the element.\n     *\n     * @return the removed element\n     * @throws NoSuchElementException if this collection is empty\n     * @throws UnsupportedOperationException if this collection implementation\n     *         does not support this operation\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " SequencedCollection<E> reversed()", " void addFirst(E e)", " void addLast(E e)", " E getFirst()", " E getLast()", " E removeFirst()", " E removeLast()" ],
  "variableNames" : [ ]
}