{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BinderProxy.java",
  "packageName" : "android.os",
  "className" : "BinderProxy",
  "comment" : "\n * Java proxy for a native IBinder object.\n * Allocated and constructed by the native javaObjectforIBinder function. Never allocated\n * directly from Java code.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mWarnOnBlocking",
    "type" : "boolean",
    "comment" : " Assume the process-wide default value when created",
    "links" : [ ]
  }, {
    "name" : "sTransactListener",
    "type" : "Binder.ProxyTransactListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sProxyMap",
    "type" : "ProxyMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_ALLOCATION_SIZE",
    "type" : "int",
    "comment" : "\n     * Guestimate of native memory associated with a BinderProxy.\n     * This includes the underlying IBinder, associated DeathRecipientList, and KeyedVector\n     * that points back to us. We guess high since it includes a GlobalRef, which\n     * may be in short supply.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeathRecipients",
    "type" : "List<DeathRecipient>",
    "comment" : " This list is to hold strong reference to the death recipients that are waiting for the death\n     * of binder that this proxy references. Previously, the death recipients were strongy\n     * referenced from JNI, but that can cause memory leak (b/298374304) when the application has a\n     * strong reference from the death recipient to the proxy object. The JNI reference is now weak.\n     * And this strong reference is to keep death recipients at least until the proxy is GC'ed. ",
    "links" : [ ]
  }, {
    "name" : "mNativeData",
    "type" : "long",
    "comment" : "\n     * C++ pointer to BinderProxyNativeData. That consists of strong pointers to the\n     * native IBinder object, and a DeathRecipientList.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setTransactListener(@Nullable Binder.ProxyTransactListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see {@link Binder#setProxyTransactListener(listener)}.\n     ",
    "links" : [ "android.os.Binder#setProxyTransactListener(listener)" ]
  }, {
    "name" : "public static InterfaceCount[] getSortedInterfaceCounts(int num)",
    "returnType" : "InterfaceCount[]",
    "comment" : "\n     * Get a sorted array with entries mapping proxy interface names to the number\n     * of live proxies with those names.\n     *\n     * @param num maximum number of proxy interface counts to return. Use\n     *            Integer.MAX_VALUE to retrieve all\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getProxyCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of binder proxies held in this process.\n     * @return number of binder proxies in this process\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpProxyDebugInfo()",
    "returnType" : "void",
    "comment" : "\n     * Dump proxy debug information.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static BinderProxy getInstance(long nativeData, long iBinder)",
    "returnType" : "BinderProxy",
    "comment" : "\n     * Return a BinderProxy for IBinder.\n     * If we previously returned a BinderProxy bp for the same iBinder, and bp is still\n     * in use, then we return the same bp.\n     *\n     * @param nativeData C++ pointer to (possibly still empty) BinderProxyNativeData.\n     * Takes ownership of nativeData iff <result>.mNativeData == nativeData, or if\n     * we exit via an exception.  If neither applies, it's the callers responsibility to\n     * recycle nativeData.\n     * @param iBinder C++ pointer to IBinder. Does not take ownership of referenced object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean pingBinder()",
    "returnType" : "boolean",
    "comment" : "\n     * @return false if the hosting process is gone, otherwise whatever the remote returns\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean isBinderAlive()",
    "returnType" : "boolean",
    "comment" : "\n     * @return false if the hosting process is gone\n     ",
    "links" : [ ]
  }, {
    "name" : "public IInterface queryLocalInterface(String descriptor)",
    "returnType" : "IInterface",
    "comment" : "\n     * Retrieve a local interface - always null in case of a proxy\n     ",
    "links" : [ ]
  }, {
    "name" : "public native IBinder getExtension() throws RemoteException",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Perform a binder transaction on a proxy.\n     *\n     * @param code The action to perform.  This should\n     * be a number between {@link #FIRST_CALL_TRANSACTION} and\n     * {@link #LAST_CALL_TRANSACTION}.\n     * @param data Marshalled data to send to the target.  Must not be null.\n     * If you are not sending any data, you must create an empty Parcel\n     * that is given here.\n     * @param reply Marshalled data to be received from the target.  May be\n     * null if you are not interested in the return value.\n     * @param flags Additional operation flags.  Either 0 for a normal\n     * RPC, or {@link #FLAG_ONEWAY} for a one-way RPC.\n     *\n     * @return\n     * @throws RemoteException\n     ",
    "links" : [ "#FLAG_ONEWAY", "#FIRST_CALL_TRANSACTION", "#LAST_CALL_TRANSACTION" ]
  }, {
    "name" : "private static native long getNativeFinalizer()",
    "returnType" : "long",
    "comment" : " Returns the native free function ",
    "links" : [ ]
  }, {
    "name" : "public native String getInterfaceDescriptor() throws RemoteException",
    "returnType" : "String",
    "comment" : "\n     *  See {@link IBinder#getInterfaceDescriptor()}\n     ",
    "links" : [ "android.os.IBinder#getInterfaceDescriptor()" ]
  }, {
    "name" : "public native boolean transactNative(int code, Parcel data, Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Native implementation of transact() for proxies\n     ",
    "links" : [ ]
  }, {
    "name" : "public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * See {@link IBinder#linkToDeath(DeathRecipient, int)}\n     ",
    "links" : [ "android.os.IBinder#linkToDeath(DeathRecipient" ]
  }, {
    "name" : "public boolean unlinkToDeath(DeathRecipient recipient, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link IBinder#unlinkToDeath}\n     ",
    "links" : [ "android.os.IBinder#unlinkToDeath" ]
  }, {
    "name" : "private native void linkToDeathNative(DeathRecipient recipient, int flags) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean unlinkToDeathNative(DeathRecipient recipient, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(FileDescriptor fd, String[] args) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Perform a dump on the remote object\n     *\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param args additional arguments to the dump request.\n     * @throws RemoteException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Perform an asynchronous dump on the remote object\n     *\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param args additional arguments to the dump request.\n     * @throws RemoteException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * See {@link IBinder#shellCommand(FileDescriptor, FileDescriptor, FileDescriptor,\n     * String[], ShellCallback, ResultReceiver)}\n     *\n     * @param in The raw file descriptor that an input data stream can be read from.\n     * @param out The raw file descriptor that normal command messages should be written to.\n     * @param err The raw file descriptor that command error messages should be written to.\n     * @param args Command-line arguments.\n     * @param callback Optional callback to the caller's shell to perform operations in it.\n     * @param resultReceiver Called when the command has finished executing, with the result code.\n     * @throws RemoteException\n     ",
    "links" : [ "android.os.IBinder#shellCommand(FileDescriptor" ]
  }, {
    "name" : "private static void sendDeathNotice(DeathRecipient recipient, IBinder binderProxy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setTransactListener(@Nullable Binder.ProxyTransactListener listener)", "public static InterfaceCount[] getSortedInterfaceCounts(int num)", "public static int getProxyCount()", "public static void dumpProxyDebugInfo()", "private static BinderProxy getInstance(long nativeData, long iBinder)", "public native boolean pingBinder()", "public native boolean isBinderAlive()", "public IInterface queryLocalInterface(String descriptor)", "public native IBinder getExtension() throws RemoteException", "public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException", "private static native long getNativeFinalizer()", "public native String getInterfaceDescriptor() throws RemoteException", "public native boolean transactNative(int code, Parcel data, Parcel reply, int flags) throws RemoteException", "public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException", "public boolean unlinkToDeath(DeathRecipient recipient, int flags)", "private native void linkToDeathNative(DeathRecipient recipient, int flags) throws RemoteException", "private native boolean unlinkToDeathNative(DeathRecipient recipient, int flags)", "public void dump(FileDescriptor fd, String[] args) throws RemoteException", "public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException", "public void shellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) throws RemoteException", "private static void sendDeathNotice(DeathRecipient recipient, IBinder binderProxy)" ],
  "variableNames" : [ "mWarnOnBlocking", "sTransactListener", "sProxyMap", "NATIVE_ALLOCATION_SIZE", "mDeathRecipients", "mNativeData" ]
}