{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/usage/StorageStats.java",
  "packageName" : "android.app.usage",
  "className" : "StorageStats",
  "comment" : "\n * Storage statistics for a UID, package, or {@link UserHandle} on a single\n * storage volume.\n *\n * @see StorageStatsManager\n ",
  "links" : [ "android.os.UserHandle" ],
  "variables" : [ {
    "name" : "codeBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "dataBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "cacheBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "apkBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "libBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "dmBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "dexoptBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "curProfBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "refProfBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "externalCacheBytes",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "APP_DATA_TYPE_FILE_TYPE_DEXOPT_ARTIFACT",
    "type" : "int",
    "comment" : "\n     * Represents all nonstale dexopt and runtime artifacts of application.\n     * This includes AOT-compiled code and other data that can speed up app execution.\n     * For more detailed information, read the\n     * <a href=\"https://source.android.com/docs/core/runtime/jit-compiler#flow\">JIT compiler</a>\n     * guide.\n     *\n     * Dexopt artifacts become stale when one of their dependencies\n     * has changed. They may be cleaned up or replaced by ART Services at any time.\n     *\n     * For a preload app, this type includes dexopt artifacts on readonly partitions\n     * if they are up-to-date.\n     *\n     * Can be used as an input to {@link #getAppBytesByDataType(int)}\n     * to get the sum of sizes for files of this type. The sum might include the size of data\n     * that is part of appBytes, dataBytes or cacheBytes.\n     ",
    "links" : [ "#getAppBytesByDataType(int)" ]
  }, {
    "name" : "APP_DATA_TYPE_FILE_TYPE_REFERENCE_PROFILE",
    "type" : "int",
    "comment" : "\n     * Represents reference profile of application.\n     *\n     * Reference profiles are the ones used during the last profile-guided dexopt.\n     * If the last dexopt wasn't profile-guided, then these profiles were not used.\n     *\n     * Can be used as an input to {@link #getAppBytesByDataType(int)}\n     * to get the size of files of this type.\n     ",
    "links" : [ "#getAppBytesByDataType(int)" ]
  }, {
    "name" : "APP_DATA_TYPE_FILE_TYPE_CURRENT_PROFILE",
    "type" : "int",
    "comment" : "\n     * Represents current profile of application.\n     *\n     * Current profiles may or may not be used during the next profile-guided dexopt.\n     *\n     * Can be used as an input to {@link #getAppBytesByDataType(int)}\n     * to get the size of files of this type. This size fluctuates regularly,\n     * it goes up when the user uses more and more classes/methods and comes down when\n     * a deamon merges this into the ref profile and does profile-guided dexopt.\n     ",
    "links" : [ "#getAppBytesByDataType(int)" ]
  }, {
    "name" : "APP_DATA_TYPE_FILE_TYPE_APK",
    "type" : "int",
    "comment" : "\n     * Represents all .apk files in application code path.\n     * Can be used as an input to {@link #getAppBytesByDataType(int)}\n     * to get the sum of sizes for files of this type.\n     ",
    "links" : [ "#getAppBytesByDataType(int)" ]
  }, {
    "name" : "APP_DATA_TYPE_FILE_TYPE_DM",
    "type" : "int",
    "comment" : "\n     * Represents all .dm files in application code path.\n     * Can be used as an input to {@link #getAppBytesByDataType(int)}\n     * to get the sum of sizes for files of this type.\n     ",
    "links" : [ "#getAppBytesByDataType(int)" ]
  }, {
    "name" : "APP_DATA_TYPE_LIB",
    "type" : "int",
    "comment" : "\n     * Represents lib/ in application code path.\n     * Can be used as an input to {@link #getAppBytesByDataType(int)}\n     * to get the size of lib/ directory.\n     ",
    "links" : [ "#getAppBytesByDataType(int)" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<StorageStats>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getAppBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the size of app. This includes {@code APK} files, optimized\n     * compiler output, and unpacked native libraries.\n     * <p>\n     * If the primary external/shared storage is hosted on this storage device,\n     * then this includes files stored under {@link Context#getObbDir()}.\n     * <p>\n     * Code is shared between all users on a multiuser device.\n     ",
    "links" : [ "android.content.Context#getObbDir()" ]
  }, {
    "name" : "public long getAppBytesByDataType(@AppDataType int dataType)",
    "returnType" : "long",
    "comment" : "\n     * Return the size of the specified data type. This includes files stored under\n     * application code path.\n     * <p>\n     * If there is more than one package inside a uid, the return represents the aggregated\n     * stats when query StorageStat for package or uid.\n     * The data  is not collected and the return defaults to 0 when query StorageStats for user.\n     *\n     * <p>\n     * Data is isolated for each user on a multiuser device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDataBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the size of all data. This includes files stored under\n     * {@link Context#getDataDir()}, {@link Context#getCacheDir()},\n     * {@link Context#getCodeCacheDir()}.\n     * <p>\n     * If the primary external/shared storage is hosted on this storage device,\n     * then this includes files stored under\n     * {@link Context#getExternalFilesDir(String)},\n     * {@link Context#getExternalCacheDir()}, and\n     * {@link Context#getExternalMediaDirs()}.\n     * <p>\n     * Data is isolated for each user on a multiuser device.\n     ",
    "links" : [ "android.content.Context#getExternalCacheDir()", "android.content.Context#getCodeCacheDir()", "android.content.Context#getCacheDir()", "android.content.Context#getDataDir()", "android.content.Context#getExternalFilesDir(String)", "android.content.Context#getExternalMediaDirs()" ]
  }, {
    "name" : "public long getCacheBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the size of all cached data. This includes files stored under\n     * {@link Context#getCacheDir()} and {@link Context#getCodeCacheDir()}.\n     * <p>\n     * If the primary external/shared storage is hosted on this storage device,\n     * then this includes files stored under\n     * {@link Context#getExternalCacheDir()}.\n     * <p>\n     * Cached data is isolated for each user on a multiuser device.\n     ",
    "links" : [ "android.content.Context#getExternalCacheDir()", "android.content.Context#getCodeCacheDir()", "android.content.Context#getCacheDir()" ]
  }, {
    "name" : "public long getExternalCacheBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the size of all cached data in the primary external/shared storage.\n     * This includes files stored under\n     * {@link Context#getExternalCacheDir()}.\n     * <p>\n     * Cached data is isolated for each user on a multiuser device.\n     ",
    "links" : [ "android.content.Context#getExternalCacheDir()" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getAppBytes()", "public long getAppBytesByDataType(@AppDataType int dataType)", "public long getDataBytes()", "public long getCacheBytes()", "public long getExternalCacheBytes()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "codeBytes", "dataBytes", "cacheBytes", "apkBytes", "libBytes", "dmBytes", "dexoptBytes", "curProfBytes", "refProfBytes", "externalCacheBytes", "APP_DATA_TYPE_FILE_TYPE_DEXOPT_ARTIFACT", "APP_DATA_TYPE_FILE_TYPE_REFERENCE_PROFILE", "APP_DATA_TYPE_FILE_TYPE_CURRENT_PROFILE", "APP_DATA_TYPE_FILE_TYPE_APK", "APP_DATA_TYPE_FILE_TYPE_DM", "APP_DATA_TYPE_LIB", "CREATOR" ]
}