{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/acl/Acl.java",
  "packageName" : "java.security.acl",
  "className" : "Acl",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void setName(Principal caller, String name) throws NotOwnerException",
    "returnType" : "void",
    "comment" : "\n     * Sets the name of this ACL.\n     *\n     * @param caller the principal invoking this method. It must be an\n     * owner of this ACL.\n     *\n     * @param name the name to be given to this ACL.\n     *\n     * @exception NotOwnerException if the caller principal\n     * is not an owner of this ACL.\n     *\n     * @see #getName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this ACL.\n     *\n     * @return the name of this ACL.\n     *\n     * @see #setName\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an ACL entry to this ACL. An entry associates a principal\n     * (e.g., an individual or a group) with a set of\n     * permissions. Each principal can have at most one positive ACL\n     * entry (specifying permissions to be granted to the principal)\n     * and one negative ACL entry (specifying permissions to be\n     * denied). If there is already an ACL entry of the same type\n     * (negative or positive) already in the ACL, false is returned.\n     *\n     * @param caller the principal invoking this method. It must be an\n     * owner of this ACL.\n     *\n     * @param entry the ACL entry to be added to this ACL.\n     *\n     * @return true on success, false if an entry of the same type\n     * (positive or negative) for the same principal is already\n     * present in this ACL.\n     *\n     * @exception NotOwnerException if the caller principal\n     *  is not an owner of this ACL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeEntry(Principal caller, AclEntry entry) throws NotOwnerException",
    "returnType" : "boolean",
    "comment" : "\n     * Removes an ACL entry from this ACL.\n     *\n     * @param caller the principal invoking this method. It must be an\n     * owner of this ACL.\n     *\n     * @param entry the ACL entry to be removed from this ACL.\n     *\n     * @return true on success, false if the entry is not part of this ACL.\n     *\n     * @exception NotOwnerException if the caller principal is not\n     * an owner of this Acl.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<Permission> getPermissions(Principal user)",
    "returnType" : "Enumeration<Permission>",
    "comment" : "\n     * Returns an enumeration for the set of allowed permissions for the\n     * specified principal (representing an entity such as an individual or\n     * a group). This set of allowed permissions is calculated as\n     * follows:\n     *\n     * <ul>\n     *\n     * <li>If there is no entry in this Access Control List for the\n     * specified principal, an empty permission set is returned.\n     *\n     * <li>Otherwise, the principal's group permission sets are determined.\n     * (A principal can belong to one or more groups, where a group is a\n     * group of principals, represented by the Group interface.)\n     * The group positive permission set is the union of all\n     * the positive permissions of each group that the principal belongs to.\n     * The group negative permission set is the union of all\n     * the negative permissions of each group that the principal belongs to.\n     * If there is a specific permission that occurs in both\n     * the positive permission set and the negative permission set,\n     * it is removed from both.<p>\n     *\n     * The individual positive and negative permission sets are also\n     * determined. The positive permission set contains the permissions\n     * specified in the positive ACL entry (if any) for the principal.\n     * Similarly, the negative permission set contains the permissions\n     * specified in the negative ACL entry (if any) for the principal.\n     * The individual positive (or negative) permission set is considered\n     * to be null if there is not a positive (negative) ACL entry for the\n     * principal in this ACL.<p>\n     *\n     * The set of permissions granted to the principal is then calculated\n     * using the simple rule that individual permissions always override\n     * the group permissions. That is, the principal's individual negative\n     * permission set (specific denial of permissions) overrides the group\n     * positive permission set, and the principal's individual positive\n     * permission set overrides the group negative permission set.\n     *\n     * </ul>\n     *\n     * @param user the principal whose permission set is to be returned.\n     *\n     * @return the permission set specifying the permissions the principal\n     * is allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<AclEntry> entries()",
    "returnType" : "Enumeration<AclEntry>",
    "comment" : "\n     * Returns an enumeration of the entries in this ACL. Each element in\n     * the enumeration is of type AclEntry.\n     *\n     * @return an enumeration of the entries in this ACL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean checkPermission(Principal principal, Permission permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether or not the specified principal has the specified\n     * permission. If it does, true is returned, otherwise false is returned.\n     *\n     * More specifically, this method checks whether the passed permission\n     * is a member of the allowed permission set of the specified principal.\n     * The allowed permission set is determined by the same algorithm as is\n     * used by the {@code getPermissions} method.\n     *\n     * @param principal the principal, assumed to be a valid authenticated\n     * Principal.\n     *\n     * @param permission the permission to be checked for.\n     *\n     * @return true if the principal has the specified permission, false\n     * otherwise.\n     *\n     * @see #getPermissions\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the\n     * ACL contents.\n     *\n     * @return a string representation of the ACL contents.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setName(Principal caller, String name) throws NotOwnerException", "public String getName()", "public boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException", "public boolean removeEntry(Principal caller, AclEntry entry) throws NotOwnerException", "public Enumeration<Permission> getPermissions(Principal user)", "public Enumeration<AclEntry> entries()", "public boolean checkPermission(Principal principal, Permission permission)", "public String toString()" ],
  "variableNames" : [ ]
}