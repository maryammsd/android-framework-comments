{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/FeatureList.java",
  "packageName" : "org.chromium.base",
  "className" : "FeatureList",
  "comment" : " Provides shared capabilities for feature flag support. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sTestFeatures",
    "type" : "TestValues",
    "comment" : " Map that stores substitution feature flags for tests. ",
    "links" : [ ]
  }, {
    "name" : "sTestCanUseDefaults",
    "type" : "boolean",
    "comment" : " Access to default values of the native feature flag. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the native FeatureList has been initialized. If this method returns false,\n     *         none of the methods in this class that require native access should be called (except\n     *         in tests if test features have been set).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNativeInitialized()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the native FeatureList is initialized or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTestCanUseDefaultsForTesting()",
    "returnType" : "void",
    "comment" : "\n     * This is called explicitly for instrumentation tests via Features#applyForInstrumentation().\n     * Unit tests and Robolectric tests must not invoke this and should rely on the {@link Features}\n     * annotations to enable or disable any feature flags.\n     ",
    "links" : [ "org.chromium.base.Features" ]
  }, {
    "name" : "public static void resetTestCanUseDefaultsForTesting()",
    "returnType" : "void",
    "comment" : "\n     * We reset the value to false after the instrumentation test to avoid any unwanted\n     * persistence of the state. This is invoked by Features#reset().\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTestFeatures(Map<String, Boolean> testFeatures)",
    "returnType" : "void",
    "comment" : " Sets the feature flags to use in JUnit tests, since native calls are not available there. ",
    "links" : [ ]
  }, {
    "name" : "public static void setTestValues(TestValues testFeatures)",
    "returnType" : "void",
    "comment" : "\n     * Sets the feature flags and field trial parameters to use in JUnit tests, since native calls\n     * are not available there.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void mergeTestValues(@NonNull TestValues testValuesToMerge, boolean replace)",
    "returnType" : "void",
    "comment" : "\n     * Adds overrides to feature flags and field trial parameters in addition to existing ones.\n     *\n     * @param testValuesToMerge the TestValues to merge into existing ones\n     * @param replace if true, replaces existing values (e.g. from @EnableFeatures annotations)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasTestFeatures()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether test feature values have been configured.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasTestFeature(String featureName)",
    "returnType" : "boolean",
    "comment" : "\n     * @param featureName The name of the feature to query.\n     * @return Whether the feature has a test value configured.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Boolean getTestValueForFeature(String featureName)",
    "returnType" : "Boolean",
    "comment" : "\n     * Returns the test value of the feature with the given name.\n     *\n     * @param featureName The name of the feature to query.\n     * @return The test value set for the feature, or null if no test value has been set.\n     * @throws IllegalArgumentException if no test value was set and default values aren't allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getTestValueForFieldTrialParam(String featureName, String paramName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the test value of the field trial parameter.\n     *\n     * @param featureName The name of the feature to query.\n     * @param paramName The name of the field trial parameter to query.\n     * @return The test value set for the parameter, or null if no test value has been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, String> getTestValuesForAllFieldTrialParamsForFeature(String featureName)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Returns the test value of the all field trial parameters of a given feature.\n     *\n     * @param featureName The name of the feature to query all parameters.\n     * @return The test values set for the parameter, or null if no test values have been set (if\n     *      test values were set for other features, an empty Map will be returned, not null).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isInitialized()", "public static boolean isNativeInitialized()", "public static void setTestCanUseDefaultsForTesting()", "public static void resetTestCanUseDefaultsForTesting()", "public static void setTestFeatures(Map<String, Boolean> testFeatures)", "public static void setTestValues(TestValues testFeatures)", "public static void mergeTestValues(@NonNull TestValues testValuesToMerge, boolean replace)", "public static boolean hasTestFeatures()", "public static boolean hasTestFeature(String featureName)", "public static Boolean getTestValueForFeature(String featureName)", "public static String getTestValueForFieldTrialParam(String featureName, String paramName)", "public static Map<String, String> getTestValuesForAllFieldTrialParamsForFeature(String featureName)" ],
  "variableNames" : [ "sTestFeatures", "sTestCanUseDefaults" ]
}