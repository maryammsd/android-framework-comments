{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/NetworkStackClient.java",
  "packageName" : "android.net",
  "className" : "NetworkStackClient",
  "comment" : "\n * Service used to communicate with the network stack, which is running in a separate module.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORKSTACK_TIMEOUT_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "NetworkStackClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDependencies",
    "type" : "Dependencies",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingNetStackRequests",
    "type" : "ArrayList<NetworkStackCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnector",
    "type" : "INetworkStackConnector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLog",
    "type" : "SharedLog",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWasSystemServerInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized NetworkStackClient getInstance()",
    "returnType" : "NetworkStackClient",
    "comment" : "\n     * Get the NetworkStackClient singleton instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeDhcpServer(final String ifName, final DhcpServingParamsParcel params, final IDhcpServerCallbacks cb)",
    "returnType" : "void",
    "comment" : "\n     * Create a DHCP server according to the specified parameters.\n     *\n     * <p>The server will be returned asynchronously through the provided callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeIpClient(String ifName, IIpClientCallbacks cb)",
    "returnType" : "void",
    "comment" : "\n     * Create an IpClient on the specified interface.\n     *\n     * <p>The IpClient will be returned asynchronously through the provided callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeNetworkMonitor(Network network, String name, INetworkMonitorCallbacks cb)",
    "returnType" : "void",
    "comment" : "\n     * Create a NetworkMonitor.\n     *\n     * <p>The INetworkMonitor will be returned asynchronously through the provided callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fetchIpMemoryStore(IIpMemoryStoreCallbacks cb)",
    "returnType" : "void",
    "comment" : "\n     * Get an instance of the IpMemoryStore.\n     *\n     * <p>The IpMemoryStore will be returned asynchronously through the provided callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerNetworkStackService(@NonNull IBinder service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void init()",
    "returnType" : "void",
    "comment" : "\n     * Initialize the network stack. Should be called only once on device startup, before any\n     * client attempts to use the network stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Start the network stack. Should be called only once on device startup.\n     *\n     * <p>This method will start the network stack either in the network stack process, or inside\n     * the system server on devices that do not support the network stack module. The network stack\n     * connector will then be delivered asynchronously to clients that requested it before it was\n     * started.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void log(@NonNull String message)",
    "returnType" : "void",
    "comment" : "\n     * Log a message in the local log.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void logWtf(@NonNull String message, @Nullable Throwable e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loge(@NonNull String message, @Nullable Throwable e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logi(@NonNull String message)",
    "returnType" : "void",
    "comment" : "\n     * Log a message in the local and system logs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private INetworkStackConnector getRemoteConnector()",
    "returnType" : "INetworkStackConnector",
    "comment" : "\n     * For non-system server clients, get the connector registered by the system server.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void requestConnector(@NonNull NetworkStackCallback request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Dump NetworkStackClient logs to the specified {@link PrintWriter}.\n     ",
    "links" : [ "PrintWriter" ]
  } ],
  "variableNames" : [ "TAG", "NETWORKSTACK_TIMEOUT_MS", "sInstance", "mDependencies", "mPendingNetStackRequests", "mConnector", "mLog", "mWasSystemServerInitialized" ],
  "methodNames" : [ "public static synchronized NetworkStackClient getInstance()", "public void makeDhcpServer(final String ifName, final DhcpServingParamsParcel params, final IDhcpServerCallbacks cb)", "public void makeIpClient(String ifName, IIpClientCallbacks cb)", "public void makeNetworkMonitor(Network network, String name, INetworkMonitorCallbacks cb)", "public void fetchIpMemoryStore(IIpMemoryStoreCallbacks cb)", "private void registerNetworkStackService(@NonNull IBinder service)", "public void init()", "public void start()", "private void log(@NonNull String message)", "private void logWtf(@NonNull String message, @Nullable Throwable e)", "private void loge(@NonNull String message, @Nullable Throwable e)", "private void logi(@NonNull String message)", "private INetworkStackConnector getRemoteConnector()", "private void requestConnector(@NonNull NetworkStackCallback request)", "public void dump(PrintWriter pw)" ]
}