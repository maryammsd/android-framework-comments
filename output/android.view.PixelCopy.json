{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/PixelCopy.java",
  "packageName" : "android.view",
  "className" : "PixelCopy",
  "comment" : "\n * Provides a mechanisms to issue pixel copy requests to allow for copy\n * operations from {@link Surface} to {@link Bitmap}\n ",
  "variables" : [ {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : " The pixel copy request succeeded ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNKNOWN",
    "type" : "int",
    "comment" : " The pixel copy request failed with an unknown error. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * A timeout occurred while trying to acquire a buffer from the source to\n     * copy from.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SOURCE_NO_DATA",
    "type" : "int",
    "comment" : "\n     * The source has nothing to copy from. When the source is a {@link Surface}\n     * this means that no buffers have been queued yet. Wait for the source\n     * to produce a frame and try again.\n     ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "ERROR_SOURCE_INVALID",
    "type" : "int",
    "comment" : "\n     * It is not possible to copy from the source. This can happen if the source\n     * is hardware-protected or destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_DESTINATION_INVALID",
    "type" : "int",
    "comment" : "\n     * The destination isn't a valid copy target. If the destination is a bitmap\n     * this can occur if the bitmap is too large for the hardware to copy to.\n     * It can also occur if the destination has been destroyed.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void request(@NonNull SurfaceView source, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)",
    "returnType" : "void",
    "comment" : "\n     * Requests for the display content of a {@link SurfaceView} to be copied\n     * into a provided {@link Bitmap}.\n     *\n     * The contents of the source will be scaled to fit exactly inside the bitmap.\n     * The pixel format of the source buffer will be converted, as part of the copy,\n     * to fit the the bitmap's {@link Bitmap.Config}. The most recently queued buffer\n     * in the SurfaceView's Surface will be used as the source of the copy.\n     *\n     * @param source The source from which to copy\n     * @param dest The destination of the copy. The source will be scaled to\n     * match the width, height, and format of this bitmap.\n     * @param listener Callback for when the pixel copy request completes\n     * @param listenerThread The callback will be invoked on this Handler when\n     * the copy is finished.\n     ",
    "links" : [ "android.view.SurfaceView", "android.graphics.Bitmap", "Bitmap.Config" ]
  }, {
    "name" : "public static void request(@NonNull SurfaceView source, @Nullable Rect srcRect, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)",
    "returnType" : "void",
    "comment" : "\n     * Requests for the display content of a {@link SurfaceView} to be copied\n     * into a provided {@link Bitmap}.\n     *\n     * The contents of the source will be scaled to fit exactly inside the bitmap.\n     * The pixel format of the source buffer will be converted, as part of the copy,\n     * to fit the the bitmap's {@link Bitmap.Config}. The most recently queued buffer\n     * in the SurfaceView's Surface will be used as the source of the copy.\n     *\n     * @param source The source from which to copy\n     * @param srcRect The area of the source to copy from. If this is null\n     * the copy area will be the entire surface. The rect will be clamped to\n     * the bounds of the Surface.\n     * @param dest The destination of the copy. The source will be scaled to\n     * match the width, height, and format of this bitmap.\n     * @param listener Callback for when the pixel copy request completes\n     * @param listenerThread The callback will be invoked on this Handler when\n     * the copy is finished.\n     ",
    "links" : [ "android.view.SurfaceView", "android.graphics.Bitmap", "Bitmap.Config" ]
  }, {
    "name" : "public static void request(@NonNull Surface source, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)",
    "returnType" : "void",
    "comment" : "\n     * Requests a copy of the pixels from a {@link Surface} to be copied into\n     * a provided {@link Bitmap}.\n     *\n     * The contents of the source will be scaled to fit exactly inside the bitmap.\n     * The pixel format of the source buffer will be converted, as part of the copy,\n     * to fit the the bitmap's {@link Bitmap.Config}. The most recently queued buffer\n     * in the Surface will be used as the source of the copy.\n     *\n     * @param source The source from which to copy\n     * @param dest The destination of the copy. The source will be scaled to\n     * match the width, height, and format of this bitmap.\n     * @param listener Callback for when the pixel copy request completes\n     * @param listenerThread The callback will be invoked on this Handler when\n     * the copy is finished.\n     ",
    "links" : [ "android.view.Surface", "android.graphics.Bitmap", "Bitmap.Config" ]
  }, {
    "name" : "public static void request(@NonNull Surface source, @Nullable Rect srcRect, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)",
    "returnType" : "void",
    "comment" : "\n     * Requests a copy of the pixels at the provided {@link Rect} from\n     * a {@link Surface} to be copied into a provided {@link Bitmap}.\n     *\n     * The contents of the source rect will be scaled to fit exactly inside the bitmap.\n     * The pixel format of the source buffer will be converted, as part of the copy,\n     * to fit the the bitmap's {@link Bitmap.Config}. The most recently queued buffer\n     * in the Surface will be used as the source of the copy.\n     *\n     * @param source The source from which to copy\n     * @param srcRect The area of the source to copy from. If this is null\n     * the copy area will be the entire surface. The rect will be clamped to\n     * the bounds of the Surface.\n     * @param dest The destination of the copy. The source will be scaled to\n     * match the width, height, and format of this bitmap.\n     * @param listener Callback for when the pixel copy request completes\n     * @param listenerThread The callback will be invoked on this Handler when\n     * the copy is finished.\n     ",
    "links" : [ "android.graphics.Rect", "android.view.Surface", "android.graphics.Bitmap", "Bitmap.Config" ]
  }, {
    "name" : "public static void request(@NonNull Window source, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)",
    "returnType" : "void",
    "comment" : "\n     * Requests a copy of the pixels from a {@link Window} to be copied into\n     * a provided {@link Bitmap}.\n     *\n     * The contents of the source will be scaled to fit exactly inside the bitmap.\n     * The pixel format of the source buffer will be converted, as part of the copy,\n     * to fit the the bitmap's {@link Bitmap.Config}. The most recently queued buffer\n     * in the Window's Surface will be used as the source of the copy.\n     *\n     * Note: This is limited to being able to copy from Window's with a non-null\n     * DecorView. If {@link Window#peekDecorView()} is null this throws an\n     * {@link IllegalArgumentException}. It will similarly throw an exception\n     * if the DecorView has not yet acquired a backing surface. It is recommended\n     * that {@link OnDrawListener} is used to ensure that at least one draw\n     * has happened before trying to copy from the window, otherwise either\n     * an {@link IllegalArgumentException} will be thrown or an error will\n     * be returned to the {@link OnPixelCopyFinishedListener}.\n     *\n     * @param source The source from which to copy\n     * @param dest The destination of the copy. The source will be scaled to\n     * match the width, height, and format of this bitmap.\n     * @param listener Callback for when the pixel copy request completes\n     * @param listenerThread The callback will be invoked on this Handler when\n     * the copy is finished.\n     ",
    "links" : [ "OnPixelCopyFinishedListener", "android.view.Window#peekDecorView()", "android.view.ViewTreeObserver.OnDrawListener", "android.graphics.Bitmap", "android.view.Window", "Bitmap.Config", "IllegalArgumentException" ]
  }, {
    "name" : "public static void request(@NonNull Window source, @Nullable Rect srcRect, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)",
    "returnType" : "void",
    "comment" : "\n     * Requests a copy of the pixels at the provided {@link Rect} from\n     * a {@link Window} to be copied into a provided {@link Bitmap}.\n     *\n     * The contents of the source rect will be scaled to fit exactly inside the bitmap.\n     * The pixel format of the source buffer will be converted, as part of the copy,\n     * to fit the the bitmap's {@link Bitmap.Config}. The most recently queued buffer\n     * in the Window's Surface will be used as the source of the copy.\n     *\n     * Note: This is limited to being able to copy from Window's with a non-null\n     * DecorView. If {@link Window#peekDecorView()} is null this throws an\n     * {@link IllegalArgumentException}. It will similarly throw an exception\n     * if the DecorView has not yet acquired a backing surface. It is recommended\n     * that {@link OnDrawListener} is used to ensure that at least one draw\n     * has happened before trying to copy from the window, otherwise either\n     * an {@link IllegalArgumentException} will be thrown or an error will\n     * be returned to the {@link OnPixelCopyFinishedListener}.\n     *\n     * @param source The source from which to copy\n     * @param srcRect The area of the source to copy from. If this is null\n     * the copy area will be the entire surface. The rect will be clamped to\n     * the bounds of the Surface.\n     * @param dest The destination of the copy. The source will be scaled to\n     * match the width, height, and format of this bitmap.\n     * @param listener Callback for when the pixel copy request completes\n     * @param listenerThread The callback will be invoked on this Handler when\n     * the copy is finished.\n     ",
    "links" : [ "android.graphics.Rect", "OnPixelCopyFinishedListener", "android.view.Window#peekDecorView()", "android.view.ViewTreeObserver.OnDrawListener", "android.graphics.Bitmap", "android.view.Window", "Bitmap.Config", "IllegalArgumentException" ]
  }, {
    "name" : "private static void validateBitmapDest(Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SUCCESS", "ERROR_UNKNOWN", "ERROR_TIMEOUT", "ERROR_SOURCE_NO_DATA", "ERROR_SOURCE_INVALID", "ERROR_DESTINATION_INVALID" ],
  "methodNames" : [ "public static void request(@NonNull SurfaceView source, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)", "public static void request(@NonNull SurfaceView source, @Nullable Rect srcRect, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)", "public static void request(@NonNull Surface source, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)", "public static void request(@NonNull Surface source, @Nullable Rect srcRect, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)", "public static void request(@NonNull Window source, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)", "public static void request(@NonNull Window source, @Nullable Rect srcRect, @NonNull Bitmap dest, @NonNull OnPixelCopyFinishedListener listener, @NonNull Handler listenerThread)", "private static void validateBitmapDest(Bitmap bitmap)" ]
}