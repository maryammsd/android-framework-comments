{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/HotwordDetectionService.java",
  "packageName" : "android.service.voice",
  "className" : "HotwordDetectionService",
  "comment" : "\n * Implemented by an application that wants to offer detection for hotword. The service can be used\n * for both DSP and non-DSP detectors.\n *\n * The system will bind an application's {@link VoiceInteractionService} first. When {@link\n * VoiceInteractionService#createHotwordDetector(PersistableBundle, SharedMemory,\n * HotwordDetector.Callback)} or {@link VoiceInteractionService#createAlwaysOnHotwordDetector(\n * String, Locale, PersistableBundle, SharedMemory, AlwaysOnHotwordDetector.Callback)} is called,\n * the system will bind application's {@link HotwordDetectionService}. Either on a hardware\n * trigger or on request from the {@link VoiceInteractionService}, the system calls into the\n * {@link HotwordDetectionService} to request detection. The {@link HotwordDetectionService} then\n * uses {@link Callback#onDetected(HotwordDetectedResult)} to inform the system that a relevant\n * keyphrase was detected, or if applicable uses {@link Callback#onRejected(HotwordRejectedResult)}\n * to inform the system that a keyphrase was not detected. The system then relays this result to\n * the {@link VoiceInteractionService} through {@link HotwordDetector.Callback}.\n *\n * Note: Methods in this class may be called concurrently\n *\n * @hide\n ",
  "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.VoiceInteractionService", "android.service.voice.VoiceInteractionService#createAlwaysOnHotwordDetector(", "android.os.IRemoteCallback#onDetected(HotwordDetectedResult)", "HotwordDetector.Callback", "android.os.IRemoteCallback#onRejected(HotwordRejectedResult)", "android.service.voice.VoiceInteractionService#createHotwordDetector(PersistableBundle" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATE_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SYSTEM_WILL_CLOSE_AUDIO_STREAM_AFTER_CALLBACK",
    "type" : "String",
    "comment" : "\n     * The PersistableBundle options key used in {@link #onDetect(ParcelFileDescriptor, AudioFormat,\n     * PersistableBundle, Callback)} to indicate whether the system will close the audio stream\n     * after {@code Callback} is invoked.\n     ",
    "links" : [ "#onDetect(ParcelFileDescriptor" ]
  }, {
    "name" : "ENABLE_PROXIMITY_RESULT",
    "type" : "boolean",
    "comment" : "\n     * Feature flag for Attention Service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIALIZATION_STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Indicates that the updated status is successful.\n     *\n     * @deprecated Replaced with\n     * {@link SandboxedDetectionInitializer#INITIALIZATION_STATUS_SUCCESS}\n     ",
    "links" : [ "android.service.voice.SandboxedDetectionInitializer#INITIALIZATION_STATUS_SUCCESS" ]
  }, {
    "name" : "INITIALIZATION_STATUS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the callback wasnâ€™t invoked within the timeout.\n     * This is used by system.\n     *\n     * @deprecated Replaced with\n     * {@link SandboxedDetectionInitializer#INITIALIZATION_STATUS_UNKNOWN}\n     ",
    "links" : [ "android.service.voice.SandboxedDetectionInitializer#INITIALIZATION_STATUS_UNKNOWN" ]
  }, {
    "name" : "AUDIO_SOURCE_MICROPHONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_SOURCE_EXTERNAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_HOTWORD_DETECTION_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_HOTWORD_DETECTION_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "mContentCaptureManager",
    "type" : "ContentCaptureManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIRecognitionServiceManager",
    "type" : "IRecognitionServiceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ISandboxedDetectionService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getSystemService(@ServiceName @NonNull String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxCustomInitializationStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of initialization status for some application specific failed\n     * reasons.\n     *\n     * Note: The value 0 is reserved for success.\n     *\n     * @hide\n     * @deprecated Replaced with\n     * {@link SandboxedDetectionInitializer#getMaxCustomInitializationStatus()}\n     ",
    "links" : [ "android.service.voice.SandboxedDetectionInitializer#getMaxCustomInitializationStatus()" ]
  }, {
    "name" : "public void onDetect(@NonNull AlwaysOnHotwordDetector.EventPayload eventPayload, @DurationMillisLong long timeoutMillis, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Called when the device hardware (such as a DSP) detected the hotword, to request second stage\n     * validation before handing over the audio to the {@link AlwaysOnHotwordDetector}.\n     *\n     * <p>After {@code callback} is invoked or {@code timeoutMillis} has passed, and invokes the\n     * appropriate {@link AlwaysOnHotwordDetector.Callback callback}.\n     *\n     * <p>When responding to a detection event, the\n     * {@link HotwordDetectedResult#getHotwordPhraseId()} must match a keyphrase ID listed\n     * in the eventPayload's\n     * {@link AlwaysOnHotwordDetector.EventPayload#getKeyphraseRecognitionExtras()} list. This is\n     * forcing the intention of the {@link HotwordDetectionService} to validate an event from the\n     * voice engine and not augment its result.\n     *\n     * @param eventPayload Payload data for the hardware detection event. This may contain the\n     *             trigger audio, if requested when calling\n     *             {@link AlwaysOnHotwordDetector#startRecognition(int)}.\n     *             Each {@link AlwaysOnHotwordDetector} will be associated with at minimum a unique\n     *             keyphrase ID indicated by\n     *             {@link AlwaysOnHotwordDetector.EventPayload#getKeyphraseRecognitionExtras()}[0].\n     *             Any extra\n     *             {@link android.hardware.soundtrigger.SoundTrigger.KeyphraseRecognitionExtra}'s\n     *             in the eventPayload represent additional phrases detected by the voice engine.\n     * @param timeoutMillis Timeout in milliseconds for the operation to invoke the callback. If\n     *                      the application fails to abide by the timeout, system will close the\n     *                      microphone and cancel the operation.\n     * @param callback The callback to use for responding to the detection request.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.AlwaysOnHotwordDetector#startRecognition(int)", "AlwaysOnHotwordDetector.Callback", "AlwaysOnHotwordDetector.EventPayload#getKeyphraseRecognitionExtras()", "android.hardware.soundtrigger.SoundTrigger.KeyphraseRecognitionExtra", "android.service.voice.HotwordDetectedResult#getHotwordPhraseId()", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public void onUpdateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @DurationMillisLong long callbackTimeoutMillis, @Nullable IntConsumer statusCallback)",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link VoiceInteractionService#createAlwaysOnHotwordDetector(String, Locale,\n     * PersistableBundle, SharedMemory, AlwaysOnHotwordDetector.Callback)} or\n     * {@link AlwaysOnHotwordDetector#updateState(PersistableBundle, SharedMemory)} requests an\n     * update of the hotword detection parameters.\n     *\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector#updateState(PersistableBundle", "android.service.voice.VoiceInteractionService#createAlwaysOnHotwordDetector(String" ]
  }, {
    "name" : "public void onDetect(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link VoiceInteractionService} requests that this service\n     * {@link HotwordDetector#startRecognition() start} hotword recognition on audio coming directly\n     * from the device microphone.\n     * <p>\n     * On successful detection of a hotword, call\n     * {@link Callback#onDetected(HotwordDetectedResult)}.\n     *\n     * @param callback The callback to use for responding to the detection request.\n     * {@link Callback#onRejected(HotwordRejectedResult) callback.onRejected} cannot be used here.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.HotwordDetector#startRecognition()", "android.os.IRemoteCallback#onDetected(HotwordDetectedResult)", "android.os.IRemoteCallback#onRejected(HotwordRejectedResult)" ]
  }, {
    "name" : "public void onDetect(@NonNull ParcelFileDescriptor audioStream, @NonNull AudioFormat audioFormat, @Nullable PersistableBundle options, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link VoiceInteractionService} requests that this service\n     * {@link HotwordDetector#startRecognition(ParcelFileDescriptor, AudioFormat,\n     * PersistableBundle)} run} hotword recognition on audio coming from an external connected\n     * microphone.\n     *\n     * <p>Upon invoking the {@code callback}, the system will send the detection result to\n     * the {@link HotwordDetector}'s callback. If {@code\n     * options.getBoolean(KEY_SYSTEM_WILL_CLOSE_AUDIO_STREAM_AFTER_CALLBACK, true)} returns true,\n     * the system will also close the {@code audioStream} after {@code callback} is invoked.\n     *\n     * @param audioStream Stream containing audio bytes returned from a microphone\n     * @param audioFormat Format of the supplied audio\n     * @param options Options supporting detection, such as configuration specific to the source of\n     * the audio, provided through\n     * {@link HotwordDetector#startRecognition(ParcelFileDescriptor, AudioFormat,\n     * PersistableBundle)}.\n     * @param callback The callback to use for responding to the detection request.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.HotwordDetector#startRecognition(ParcelFileDescriptor", "android.service.voice.HotwordDetector" ]
  }, {
    "name" : "private void onUpdateStateInternal(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, IRemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStopDetection()",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link VoiceInteractionService}\n     * {@link HotwordDetector#stopRecognition() requests} that hotword recognition be stopped.\n     * <p>\n     * Any open {@link android.media.AudioRecord} should be closed here.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.HotwordDetector#stopRecognition()", "android.media.AudioRecord" ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "public Object getSystemService(@ServiceName @NonNull String name)", "public static int getMaxCustomInitializationStatus()", "public void onDetect(@NonNull AlwaysOnHotwordDetector.EventPayload eventPayload, @DurationMillisLong long timeoutMillis, @NonNull Callback callback)", "public void onUpdateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @DurationMillisLong long callbackTimeoutMillis, @Nullable IntConsumer statusCallback)", "public void onDetect(@NonNull Callback callback)", "public void onDetect(@NonNull ParcelFileDescriptor audioStream, @NonNull AudioFormat audioFormat, @Nullable PersistableBundle options, @NonNull Callback callback)", "private void onUpdateStateInternal(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, IRemoteCallback callback)", "public void onStopDetection()" ],
  "variableNames" : [ "TAG", "DBG", "UPDATE_TIMEOUT_MILLIS", "KEY_SYSTEM_WILL_CLOSE_AUDIO_STREAM_AFTER_CALLBACK", "ENABLE_PROXIMITY_RESULT", "INITIALIZATION_STATUS_SUCCESS", "INITIALIZATION_STATUS_UNKNOWN", "AUDIO_SOURCE_MICROPHONE", "AUDIO_SOURCE_EXTERNAL", "SERVICE_INTERFACE", "mContentCaptureManager", "mIRecognitionServiceManager", "mInterface" ]
}