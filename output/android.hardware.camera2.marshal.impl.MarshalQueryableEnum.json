{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/marshal/impl/MarshalQueryableEnum.java",
  "packageName" : "android.hardware.camera2.marshal.impl",
  "className" : "MarshalQueryableEnum",
  "comment" : "\n * Marshal any simple enum (0-arg constructors only) into/from either\n * {@code TYPE_BYTE} or {@code TYPE_INT32}.\n *\n * <p>Default values of the enum are mapped to its ordinal; this can be overridden\n * by providing a manual value with {@link #registerEnumValues}.</p>\n\n * @param <T> the type of {@code Enum}\n ",
  "links" : [ "#registerEnumValues" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT8_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT8_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UINT8_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEnumValues",
    "type" : "HashMap<Class<? extends Enum>, int[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Marshaler<T> createMarshaler(TypeReference<T> managedType, int nativeType)",
    "returnType" : "Marshaler<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isTypeMappingSupported(TypeReference<T> managedType, int nativeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void registerEnumValues(Class<T> enumType, int[] values)",
    "returnType" : "void",
    "comment" : "\n     * Register a non-sequential set of values to be used with the marshal/unmarshal functions.\n     *\n     * <p>This enables get/set to correctly marshal the enum into a value that is C-compatible.</p>\n     *\n     * @param enumType The class for an enum\n     * @param values A list of values mapping to the ordinals of the enum\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getEnumValue(T enumValue)",
    "returnType" : "int",
    "comment" : "\n     * Get the numeric value from an enum.\n     *\n     * <p>This is usually the same as the ordinal value for\n     * enums that have fully sequential values, although for C-style enums the range of values\n     * may not map 1:1.</p>\n     *\n     * @param enumValue Enum instance\n     * @return Int guaranteed to be ABI-compatible with the C enum equivalent\n     ",
    "links" : [ ]
  }, {
    "name" : "private static T getEnumFromValue(Class<T> enumType, int value)",
    "returnType" : "T",
    "comment" : "\n     * Finds the enum corresponding to it's numeric value. Opposite of {@link #getEnumValue} method.\n     *\n     * @param enumType Class of the enum we want to find\n     * @param value The numeric value of the enum\n     * @return An instance of the enum\n     ",
    "links" : [ "#getEnumValue" ]
  } ],
  "methodNames" : [ "public Marshaler<T> createMarshaler(TypeReference<T> managedType, int nativeType)", "public boolean isTypeMappingSupported(TypeReference<T> managedType, int nativeType)", "public static void registerEnumValues(Class<T> enumType, int[] values)", "private static int getEnumValue(T enumValue)", "private static T getEnumFromValue(Class<T> enumType, int value)" ],
  "variableNames" : [ "TAG", "DEBUG", "UINT8_MIN", "UINT8_MAX", "UINT8_MASK", "sEnumValues" ]
}