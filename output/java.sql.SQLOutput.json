{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/SQLOutput.java",
  "packageName" : "java.sql",
  "className" : "SQLOutput",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void writeString(String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeBoolean(boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java boolean.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeByte(byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java byte.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeShort(short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java short.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeInt(int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java int.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeLong(long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java long.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeFloat(float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java float.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeDouble(double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a Java double.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeBigDecimal(java.math.BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a java.math.BigDecimal object.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeBytes(byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as an array of bytes.\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeDate(java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a java.sql.Date object.\n   * Writes the next attribute to the stream as a <code>java.sql.Date</code> object\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeTime(java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a java.sql.Time object.\n   * Writes the next attribute to the stream as a <code>java.sql.Date</code> object\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeTimestamp(java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a java.sql.Timestamp object.\n   * Writes the next attribute to the stream as a <code>java.sql.Date</code> object\n   * in the Java programming language.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeCharacterStream(java.io.Reader x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a stream of Unicode characters.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeAsciiStream(java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a stream of ASCII characters.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeBinaryStream(java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a stream of uninterpreted\n   * bytes.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeObject(SQLData x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes to the stream the data contained in the given\n   * <code>SQLData</code> object.\n   * When the <code>SQLData</code> object is <code>null</code>, this\n   * method writes an SQL <code>NULL</code> to the stream.\n   * Otherwise, it calls the <code>SQLData.writeSQL</code>\n   * method of the given object, which\n   * writes the object's attributes to the stream.\n   * The implementation of the method <code>SQLData.writeSQ</code>\n   * calls the appropriate <code>SQLOutput</code> writer method(s)\n   * for writing each of the object's attributes in order.\n   * The attributes must be read from an <code>SQLInput</code>\n   * input stream and written to an <code>SQLOutput</code>\n   * output stream in the same order in which they were\n   * listed in the SQL definition of the user-defined type.\n   *\n   * @param x the object representing data of an SQL structured or\n   * distinct type\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeRef(Ref x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>REF</code> value to the stream.\n   *\n   * @param x a <code>Ref</code> object representing data of an SQL\n   * <code>REF</code> value\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeBlob(Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>BLOB</code> value to the stream.\n   *\n   * @param x a <code>Blob</code> object representing data of an SQL\n   * <code>BLOB</code> value\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeClob(Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>CLOB</code> value to the stream.\n   *\n   * @param x a <code>Clob</code> object representing data of an SQL\n   * <code>CLOB</code> value\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeStruct(Struct x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL structured type value to the stream.\n   *\n   * @param x a <code>Struct</code> object representing data of an SQL\n   * structured type\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeArray(Array x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>ARRAY</code> value to the stream.\n   *\n   * @param x an <code>Array</code> object representing data of an SQL\n   * <code>ARRAY</code> type\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeURL(java.net.URL x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n      * Writes a SQL <code>DATALINK</code> value to the stream.\n      *\n      * @param x a <code>java.net.URL</code> object representing the data\n      * of SQL DATALINK type\n      *\n      * @exception SQLException if a database access error occurs\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n      * this method\n      * @since 1.4\n      ",
    "links" : [ ]
  }, {
    "name" : " void writeNString(String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes the next attribute to the stream as a <code>String</code>\n   * in the Java programming language. The driver converts this to a\n   * SQL <code>NCHAR</code> or\n   * <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n   * (depending on the argument's\n   * size relative to the driver's limits on <code>NVARCHAR</code> values)\n   * when it sends it to the stream.\n   *\n   * @param x the value to pass to the database\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeNClob(NClob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>NCLOB</code> value to the stream.\n   *\n   * @param x a <code>NClob</code> object representing data of an SQL\n   * <code>NCLOB</code> value\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeRowId(RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>ROWID</code> value to the stream.\n   *\n   * @param x a <code>RowId</code> object representing data of an SQL\n   * <code>ROWID</code> value\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeSQLXML(SQLXML x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Writes an SQL <code>XML</code> value to the stream.\n   *\n   * @param x a <code>SQLXML</code> object representing data of an SQL\n   * <code>XML</code> value\n   *\n   * @throws SQLException if a database access error occurs,\n   * the <code>java.xml.transform.Result</code>,\n   *  <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object or\n   *  if there is an error processing the XML value.  The <code>getCause</code> method\n   *  of the exception may provide a more detailed exception, for example, if the\n   *  stream does not contain valid XML.\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.6\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void writeString(String x) throws SQLException", " void writeBoolean(boolean x) throws SQLException", " void writeByte(byte x) throws SQLException", " void writeShort(short x) throws SQLException", " void writeInt(int x) throws SQLException", " void writeLong(long x) throws SQLException", " void writeFloat(float x) throws SQLException", " void writeDouble(double x) throws SQLException", " void writeBigDecimal(java.math.BigDecimal x) throws SQLException", " void writeBytes(byte[] x) throws SQLException", " void writeDate(java.sql.Date x) throws SQLException", " void writeTime(java.sql.Time x) throws SQLException", " void writeTimestamp(java.sql.Timestamp x) throws SQLException", " void writeCharacterStream(java.io.Reader x) throws SQLException", " void writeAsciiStream(java.io.InputStream x) throws SQLException", " void writeBinaryStream(java.io.InputStream x) throws SQLException", " void writeObject(SQLData x) throws SQLException", " void writeRef(Ref x) throws SQLException", " void writeBlob(Blob x) throws SQLException", " void writeClob(Clob x) throws SQLException", " void writeStruct(Struct x) throws SQLException", " void writeArray(Array x) throws SQLException", " void writeURL(java.net.URL x) throws SQLException", " void writeNString(String x) throws SQLException", " void writeNClob(NClob x) throws SQLException", " void writeRowId(RowId x) throws SQLException", " void writeSQLXML(SQLXML x) throws SQLException" ],
  "variableNames" : [ ]
}