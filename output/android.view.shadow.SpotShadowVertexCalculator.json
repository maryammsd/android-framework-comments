{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/shadow/SpotShadowVertexCalculator.java",
  "packageName" : "android.view.shadow",
  "className" : "SpotShadowVertexCalculator",
  "comment" : "\n * Generates the vertices required for spot shadow and all other shadow-related rendering.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static float[] calculateLight(float radius, float x, float y, float height)",
    "returnType" : "float[]",
    "comment" : "\n     * Create evenly distributed circular light source points from x and y (on flat z plane).\n     * This is useful for ray tracing the shadow points later. Format : (x1,y1,z1,x2,y2,z2 ...)\n     *\n     * @param radius - radius of the light source\n     * @param x - center X of the light source\n     * @param y - center Y of the light source\n     * @param height - how high (z depth) the light should be\n     * @return float points (x,y,z) of light source points.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] getStripSizes(int polyLength)",
    "returnType" : "int[]",
    "comment" : "\n     * @param polyLength - length of the outline polygon\n     * @return size required for shadow vertices mData array based on # of vertices in the\n     * outline polygon\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void calculateShadow(float[] lightPoly, float[] poly, int polyLength, float strength, float[][] retstrips)",
    "returnType" : "void",
    "comment" : "\n     * Generate shadow vertices based on params. Format : (x1,y1,z1,x2,y2,z2 ...)\n     * Precondition : Light poly must be evenly distributed on a flat surface\n     * Precondition : Poly vertices must be a convex\n     * Precondition : Light height must be higher than any poly vertices\n     *\n     * @param lightPoly - Vertices of a light source.\n     * @param poly - Vertices of opaque object casting shadow\n     * @param polyLength - Size of the vertices\n     * @param strength - Strength of the shadow overall [0-1]\n     * @param retstrips - Arrays of triplets, each triplet represents a point, thus every array to\n     * be filled in format : {x1, y1, z1, x2, y2, z2, ...},\n     * every 3 consecutive triplets constitute a triangle to fill, namely [t1, t2, t3], [t2, t3,\n     * t4], ... If at some point [t(n-1), tn, t(n+1)] is no longer a desired a triangle and\n     * there are more triangles to draw one can start a new array, hence retstrips is a 2D array.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static float[] calculateLight(float radius, float x, float y, float height)", "public static int[] getStripSizes(int polyLength)", "public static void calculateShadow(float[] lightPoly, float[] poly, int polyLength, float strength, float[][] retstrips)" ]
}