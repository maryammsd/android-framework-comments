{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/ip/IpClientCallbacks.java",
  "packageName" : "android.net.ip",
  "className" : "IpClientCallbacks",
  "comment" : "\n * Callbacks for handling IpClient events.\n *\n * This is a convenience class to allow clients not to override all methods of IIpClientCallbacks,\n * and avoid unparceling arguments.\n * These methods are called asynchronously on a Binder thread, as IpClient lives in a different\n * process.\n * @hide\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onIpClientCreated(IIpClient ipClient)",
    "returnType" : "void",
    "comment" : "\n     * Callback called upon IpClient creation.\n     *\n     * @param ipClient The Binder token to communicate with IpClient.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPreDhcpAction()",
    "returnType" : "void",
    "comment" : "\n     * Callback called prior to DHCP discovery/renewal.\n     *\n     * <p>In order to receive onPreDhcpAction(), call #withPreDhcpAction() when constructing a\n     * ProvisioningConfiguration.\n     *\n     * <p>Implementations of onPreDhcpAction() must call IpClient#completedPreDhcpAction() to\n     * indicate that DHCP is clear to proceed.\n      ",
    "links" : [ ]
  }, {
    "name" : "public void onPostDhcpAction()",
    "returnType" : "void",
    "comment" : "\n     * Callback called after DHCP discovery/renewal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNewDhcpResults(DhcpResultsParcelable dhcpResults)",
    "returnType" : "void",
    "comment" : "\n     * Callback called when new DHCP results are available.\n     *\n     * <p>This is purely advisory and not an indication of provisioning success or failure.  This is\n     * only here for callers that want to expose DHCPv4 results to other APIs\n     * (e.g., WifiInfo#setInetAddress).\n     *\n     * <p>DHCPv4 or static IPv4 configuration failure or success can be determined by whether or not\n     * the passed-in DhcpResults object is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onProvisioningSuccess(LinkProperties newLp)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that provisioning was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onProvisioningFailure(LinkProperties newLp)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that provisioning failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onLinkPropertiesChange(LinkProperties newLp)",
    "returnType" : "void",
    "comment" : "\n     * Invoked on LinkProperties changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReachabilityLost(String logMsg)",
    "returnType" : "void",
    "comment" : "Called when the internal IpReachabilityMonitor (if enabled) has\n     * detected the loss of a critical number of required neighbors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onQuit()",
    "returnType" : "void",
    "comment" : "\n     * Called when the IpClient state machine terminates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void installPacketFilter(byte[] filter)",
    "returnType" : "void",
    "comment" : "\n     * Called to indicate that a new APF program must be installed to filter incoming packets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startReadPacketFilter()",
    "returnType" : "void",
    "comment" : "\n     * Called to indicate that the APF Program & data buffer must be read asynchronously from the\n     * wifi driver.\n     *\n     * <p>Due to Wifi HAL limitations, the current implementation only supports dumping the entire\n     * buffer. In response to this request, the driver returns the data buffer asynchronously\n     * by sending an IpClient#EVENT_READ_PACKET_FILTER_COMPLETE message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFallbackMulticastFilter(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * If multicast filtering cannot be accomplished with APF, this function will be called to\n     * actuate multicast filtering using another means.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNeighborDiscoveryOffload(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enabled/disable Neighbor Discover offload functionality. This is called, for example,\n     * whenever 464xlat is being started or stopped.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPreconnectionStart(List<Layer2PacketParcelable> packets)",
    "returnType" : "void",
    "comment" : "\n     * Invoked on starting preconnection process.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void onIpClientCreated(IIpClient ipClient)", "public void onPreDhcpAction()", "public void onPostDhcpAction()", "public void onNewDhcpResults(DhcpResultsParcelable dhcpResults)", "public void onProvisioningSuccess(LinkProperties newLp)", "public void onProvisioningFailure(LinkProperties newLp)", "public void onLinkPropertiesChange(LinkProperties newLp)", "public void onReachabilityLost(String logMsg)", "public void onQuit()", "public void installPacketFilter(byte[] filter)", "public void startReadPacketFilter()", "public void setFallbackMulticastFilter(boolean enabled)", "public void setNeighborDiscoveryOffload(boolean enable)", "public void onPreconnectionStart(List<Layer2PacketParcelable> packets)" ]
}