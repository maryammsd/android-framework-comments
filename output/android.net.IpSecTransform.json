{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/IpSecTransform.java",
  "packageName" : "android.net",
  "className" : "IpSecTransform",
  "comment" : "\n * This class represents a transform, which roughly corresponds to an IPsec Security Association.\n *\n * <p>Transforms are created using {@link IpSecTransform.Builder}. Each {@code IpSecTransform}\n * object encapsulates the properties and state of an IPsec security association. That includes,\n * but is not limited to, algorithm choice, key material, and allocated system resources.\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc4301\">RFC 4301, Security Architecture for the\n *     Internet Protocol</a>\n ",
  "links" : [ "IpSecTransform.Builder" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_TRANSPORT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_TUNNEL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ENCAP_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ENCAP_ESPINUDP_NON_IKE",
    "type" : "int",
    "comment" : "\n     * IPsec traffic will be encapsulated within UDP, but with 8 zero-value bytes between the UDP\n     * header and payload. This prevents traffic from being interpreted as ESP or IKEv2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCAP_ESPINUDP",
    "type" : "int",
    "comment" : "\n     * IPsec traffic will be encapsulated within UDP as per\n     * <a href=\"https://tools.ietf.org/html/rfc3948\">RFC 3498</a>.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mConfig",
    "type" : "IpSecConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceId",
    "type" : "int",
    "comment" : " Partly guarded by mLock to ensure basic safety, not correctness",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private IpSecManager getIpSecManager(Context context)",
    "returnType" : "IpSecManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkResultStatus(int status) throws IOException, IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException",
    "returnType" : "void",
    "comment" : "\n     * Checks the result status and throws an appropriate exception if the status is not Status.OK.\n     ",
    "links" : [ ]
  }, {
    "name" : "private IpSecTransform activate() throws IOException, IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException",
    "returnType" : "IpSecTransform",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Standard equals.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Deactivate this {@code IpSecTransform} and free allocated resources.\n     *\n     * <p>Deactivating a transform while it is still applied to a socket will result in errors on\n     * that socket. Make sure to remove transforms by calling {@link\n     * IpSecManager#removeTransportModeTransforms}. Note, removing an {@code IpSecTransform} from a\n     * socket will not deactivate it (because one transform may be applied to multiple sockets).\n     *\n     * <p>It is safe to call this method on a transform that has already been deactivated.\n     ",
    "links" : [ "android.net.IpSecManager#removeTransportModeTransforms" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " Check that the transform was closed properly. ",
    "links" : [ ]
  }, {
    "name" : " IpSecConfig getConfig()",
    "returnType" : "IpSecConfig",
    "comment" : " Package ",
    "links" : [ ]
  }, {
    "name" : "public int getResourceId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void requestIpSecTransformState(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<IpSecTransformState, RuntimeException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the current state of this IpSecTransform.\n     *\n     * @param executor The {@link Executor} on which to call the supplied callback.\n     * @param callback Callback that's called after the transform state is ready or when an error\n     *     occurs.\n     * @see IpSecTransformState\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private IpSecManager getIpSecManager(Context context)", "private void checkResultStatus(int status) throws IOException, IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException", "private IpSecTransform activate() throws IOException, IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException", "public boolean equals(@Nullable Object other)", "public void close()", "protected void finalize() throws Throwable", " IpSecConfig getConfig()", "public int getResourceId()", "public void requestIpSecTransformState(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<IpSecTransformState, RuntimeException> callback)", "public String toString()" ],
  "variableNames" : [ "TAG", "MODE_TRANSPORT", "MODE_TUNNEL", "ENCAP_NONE", "ENCAP_ESPINUDP_NON_IKE", "ENCAP_ESPINUDP", "mConfig", "mLock", "mResourceId", "mContext", "mCloseGuard" ]
}