{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/InflaterInputStream.java",
  "packageName" : "java.util.zip",
  "className" : "InflaterInputStream",
  "comment" : "\n * This class implements a stream filter for uncompressing data in the\n * \"deflate\" compression format. It is also used as the basis for other\n * decompression filters, such as GZIPInputStream.\n *\n * @see         Inflater\n * @author      David Connelly\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "inf",
    "type" : "Inflater",
    "comment" : "\n     * Decompressor for this stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * Input buffer for decompression.\n     ",
    "links" : [ ]
  }, {
    "name" : "len",
    "type" : "int",
    "comment" : "\n     * Length of input buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the {@link #close()} method has been called, internal use only.\n     *\n     * @deprecated This field will be removed from a future version of Android and should not be\n     * used. Subclasses that access this field need to be modified to keep track of their own\n     * closed state by overriding close().\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "reachEOF",
    "type" : "boolean",
    "comment" : " this flag is set to true after EOF has reached",
    "links" : [ ]
  }, {
    "name" : "ownsInflater",
    "type" : "boolean",
    "comment" : " is trickier.",
    "links" : [ ]
  }, {
    "name" : "singleByteBuf",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "b",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check to make sure that this stream has not been closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a byte of uncompressed data. This method will block until\n     * enough input is available for decompression.\n     * @return the byte read, or -1 if end of compressed input is reached\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads uncompressed data into an array of bytes. If {@code len} is not\n     * zero, the method will block until some input can be decompressed; otherwise,\n     * no bytes are read and {@code 0} is returned.\n     * @param b the buffer into which the data is read\n     * @param off the start offset in the destination array {@code b}\n     * @param len the maximum number of bytes read\n     * @return the actual number of bytes read, or -1 if the end of the\n     *         compressed input is reached or a preset dictionary is needed\n     * @throws     NullPointerException If {@code b} is {@code null}.\n     * @throws     IndexOutOfBoundsException If {@code off} is negative,\n     * {@code len} is negative, or {@code len} is greater than\n     * {@code b.length - off}\n     * @throws    ZipException if a ZIP format error has occurred\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns 0 after EOF has been reached, otherwise always return 1.\n     * <p>\n     * Programs should not count on this method to return the actual number\n     * of bytes that could be read without blocking.\n     *\n     * @return     1 before EOF and 0 after EOF.\n     * @throws     IOException  if an I/O error occurs.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips specified number of bytes of uncompressed data.\n     * @param n the number of bytes to skip\n     * @return the actual number of bytes skipped.\n     * @throws    IOException if an I/O error has occurred\n     * @throws    IllegalArgumentException if {@code n < 0}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources associated\n     * with the stream.\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fill() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Fills input buffer with more data to decompress.\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this input stream supports the {@code mark} and\n     * {@code reset} methods. The {@code markSupported}\n     * method of {@code InflaterInputStream} returns\n     * {@code false}.\n     *\n     * @return  a {@code boolean} indicating if this stream type supports\n     *          the {@code mark} and {@code reset} methods.\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.InputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void mark(int readlimit)",
    "returnType" : "void",
    "comment" : "\n     * Marks the current position in this input stream.\n     *\n     * <p> The {@code mark} method of {@code InflaterInputStream}\n     * does nothing.\n     *\n     * @param   readlimit   the maximum limit of bytes that can be read before\n     *                      the mark position becomes invalid.\n     * @see     java.io.InputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Repositions this stream to the position at the time the\n     * {@code mark} method was last called on this input stream.\n     *\n     * <p> The method {@code reset} for class\n     * {@code InflaterInputStream} does nothing except throw an\n     * {@code IOException}.\n     *\n     * @throws     IOException  if this method is invoked.\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.IOException\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public int available() throws IOException", "public long skip(long n) throws IOException", "public void close() throws IOException", "protected void fill() throws IOException", "public boolean markSupported()", "public synchronized void mark(int readlimit)", "public synchronized void reset() throws IOException" ],
  "variableNames" : [ "inf", "buf", "len", "closed", "reachEOF", "ownsInflater", "singleByteBuf", "b" ]
}