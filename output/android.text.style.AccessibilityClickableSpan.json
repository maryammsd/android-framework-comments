{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/style/AccessibilityClickableSpan.java",
  "packageName" : "android.text.style",
  "className" : "AccessibilityClickableSpan",
  "comment" : "\n * {@link ClickableSpan} cannot be parceled, but accessibility services need to be able to cause\n * their callback handlers to be called. This class serves as a parcelable placeholder for the\n * real spans.\n *\n * This span is also passed back to an app's process when an accessibility service tries to click\n * it. It contains enough information to track down the original clickable span so it can be\n * called.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mOriginalClickableSpanId",
    "type" : "int",
    "comment" : " The id of the span this one replaces",
    "links" : [ ]
  }, {
    "name" : "mWindowId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceNodeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AccessibilityClickableSpan>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSpanTypeId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanTypeIdInternal()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelInternal(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ClickableSpan findClickableSpan(CharSequence text)",
    "returnType" : "ClickableSpan",
    "comment" : "\n     * Find the ClickableSpan that matches the one used to create this object.\n     *\n     * @param text The text that contains the original ClickableSpan.\n     * @return The ClickableSpan that matches this object, or {@code null} if no such object\n     * can be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyConnectionDataFrom(AccessibilityNodeInfo accessibilityNodeInfo)",
    "returnType" : "void",
    "comment" : "\n     * Configure this object to perform clicks on the view that contains the original span.\n     *\n     * @param accessibilityNodeInfo The info corresponding to the view containing the original\n     *                              span.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onClick(View unused)",
    "returnType" : "void",
    "comment" : "\n     * Perform the click from an accessibility service. Will not work unless\n     * setAccessibilityNodeInfo is called with a properly initialized node.\n     *\n     * @param unused This argument is required by the superclass but is unused. The real view will\n     * be determined by the AccessibilityNodeInfo.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mOriginalClickableSpanId", "mWindowId", "mSourceNodeId", "mConnectionId", "CREATOR" ],
  "methodNames" : [ "public int getSpanTypeId()", "public int getSpanTypeIdInternal()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void writeToParcelInternal(Parcel dest, int flags)", "public ClickableSpan findClickableSpan(CharSequence text)", "public void copyConnectionDataFrom(AccessibilityNodeInfo accessibilityNodeInfo)", "public void onClick(View unused)" ]
}