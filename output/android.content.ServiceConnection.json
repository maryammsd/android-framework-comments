{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ServiceConnection.java",
  "packageName" : "android.content",
  "className" : "ServiceConnection",
  "comment" : "\n * Interface for monitoring the state of an application service.  See\n * {@link android.app.Service} and\n * {@link Context#bindService Context.bindService()} for more information.\n * <p>Like many callbacks from the system, the methods on this class are called\n * from the main thread of your process.\n ",
  "links" : [ "android.app.Service", "android.content.Context#bindService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onServiceConnected(ComponentName name, IBinder service)",
    "returnType" : "void",
    "comment" : "\n     * Called when a connection to the Service has been established, with\n     * the {@link android.os.IBinder} of the communication channel to the\n     * Service.\n     *\n     * <p class=\"note\"><b>Note:</b> If the system has started to bind your\n     * client app to a service, it's possible that your app will never receive\n     * this callback. Your app won't receive a callback if there's an issue with\n     * the service, such as the service crashing while being created.\n     *\n     * @param name The concrete component name of the service that has\n     * been connected.\n     *\n     * @param service The IBinder of the Service's communication channel,\n     * which you can now make calls on.\n     ",
    "links" : [ "android.os.IBinder" ]
  }, {
    "name" : " void onServiceDisconnected(ComponentName name)",
    "returnType" : "void",
    "comment" : "\n     * Called when a connection to the Service has been lost.  This typically\n     * happens when the process hosting the service has crashed or been killed.\n     * This does <em>not</em> remove the ServiceConnection itself -- this\n     * binding to the service will remain active, and you will receive a call\n     * to {@link #onServiceConnected} when the Service is next running.\n     *\n     * @param name The concrete component name of the service whose\n     * connection has been lost.\n     ",
    "links" : [ "#onServiceConnected" ]
  }, {
    "name" : " void onBindingDied(ComponentName name)",
    "returnType" : "void",
    "comment" : "\n     * Called when the binding to this connection is dead.  This means the\n     * interface will never receive another connection.  The application will\n     * need to unbind and rebind the connection to activate it again.  This may\n     * happen, for example, if the application hosting the service it is bound to\n     * has been updated.\n     *\n     * <p class=\"note\"><b>Note:</b> The app that requested the binding must call\n     * {@link Context#unbindService(ServiceConnection)} to release the tracking\n     * resources associated with this ServiceConnection even if this callback was\n     * invoked following {@link Context#bindService Context.bindService() bindService()}.\n     *\n     * @param name The concrete component name of the service whose connection is dead.\n     ",
    "links" : [ "android.content.Context#unbindService(ServiceConnection)", "android.content.Context#bindService" ]
  }, {
    "name" : " void onNullBinding(ComponentName name)",
    "returnType" : "void",
    "comment" : "\n     * Called when the service being bound has returned {@code null} from its\n     * {@link android.app.Service#onBind(Intent) onBind()} method.  This indicates\n     * that the attempted service binding represented by this ServiceConnection\n     * will never become usable.\n     *\n     * <p class=\"note\"><b>Note:</b> The app that requested the binding must still call\n     * {@link Context#unbindService(ServiceConnection)} to release the tracking\n     * resources associated with this ServiceConnection even if this callback was\n     * invoked following {@link Context#bindService Context.bindService() bindService()}.\n     *\n     * @param name The concrete component name of the service whose binding\n     *     has been rejected by the Service implementation.\n     ",
    "links" : [ "android.content.Context#unbindService(ServiceConnection)", "android.content.Context#bindService", "android.app.Service#onBind(Intent)" ]
  } ],
  "methodNames" : [ " void onServiceConnected(ComponentName name, IBinder service)", " void onServiceDisconnected(ComponentName name)", " void onBindingDied(ComponentName name)", " void onNullBinding(ComponentName name)" ],
  "variableNames" : [ ]
}