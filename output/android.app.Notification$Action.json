{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "Action",
  "comment" : "\n     * Structure to encapsulate a named action that can be shown as part of this notification.\n     * It must include an icon, a label, and a {@link PendingIntent} to be fired when the action is\n     * selected by the user.\n     * <p>\n     * Apps should use {@link Notification.Builder#addAction(int, CharSequence, PendingIntent)}\n     * or {@link Notification.Builder#addAction(Notification.Action)}\n     * to attach actions.\n     * <p>\n     * As of Android {@link android.os.Build.VERSION_CODES#S}, apps targeting API level {@link\n     * android.os.Build.VERSION_CODES#S} or higher won't be able to start activities while\n     * processing broadcast receivers or services in response to notification action clicks. To\n     * launch an activity in those cases, provide a {@link PendingIntent} for the activity itself.\n     ",
  "links" : [ "Notification.Builder#addAction(Notification.Action)", "android.os.Build.VERSION_CODES#S", "android.app.PendingIntent", "Notification.Builder#addAction(int" ],
  "variables" : [ {
    "name" : "EXTRA_DATA_ONLY_INPUTS",
    "type" : "String",
    "comment" : "\n         * {@link #extras} key: Keys to a {@link Parcelable} {@link ArrayList} of\n         * {@link RemoteInput}s.\n         *\n         * This is intended for {@link RemoteInput}s that only accept data, meaning\n         * {@link RemoteInput#getAllowFreeFormInput} is false, {@link RemoteInput#getChoices}\n         * is null or empty, and {@link RemoteInput#getAllowedDataTypes} is non-null and not\n         * empty. These {@link RemoteInput}s will be ignored by devices that do not\n         * support non-text-based {@link RemoteInput}s. See {@link Builder#build}.\n         *\n         * You can test if a RemoteInput matches these constraints using\n         * {@link RemoteInput#isDataOnly}.\n         ",
    "links" : [ "android.app.RemoteInput", "android.app.RemoteInput#getAllowFreeFormInput", "#extras", "android.os.Parcelable", "android.text.SpannableStringBuilder#build", "android.app.RemoteInput#getAllowedDataTypes", "android.app.RemoteInput#isDataOnly", "android.app.RemoteInput#getChoices", "java.util.ArrayList" ]
  }, {
    "name" : "SEMANTIC_ACTION_NONE",
    "type" : "int",
    "comment" : "\n         * No semantic action defined.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_REPLY",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Reply to a conversation, chat, group, or wherever replies\n         * may be appropriate.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_MARK_AS_READ",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mark content as read.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_MARK_AS_UNREAD",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mark content as unread.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_DELETE",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Delete the content associated with the notification. This\n         * could mean deleting an email, message, etc.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_ARCHIVE",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Archive the content associated with the notification. This\n         * could mean archiving an email, message, etc.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_MUTE",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mute the content associated with the notification. This could\n         * mean silencing a conversation or currently playing media.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_UNMUTE",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Unmute the content associated with the notification. This could\n         * mean un-silencing a conversation or currently playing media.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_THUMBS_UP",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mark content with a thumbs up.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_THUMBS_DOWN",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mark content with a thumbs down.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_CALL",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Call a contact, group, etc.\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_MARK_CONVERSATION_AS_PRIORITY",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mark the conversation associated with the notification as a\n         * priority. Note that this is only for use by the notification assistant services. The\n         * type will be ignored for actions an app adds to its own notifications.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEMANTIC_ACTION_CONVERSATION_IS_PHISHING",
    "type" : "int",
    "comment" : "\n         * {@code SemanticAction}: Mark content as a potential phishing attempt.\n         * Note that this is only for use by the notification assistant services. The type will\n         * be ignored for actions an app adds to its own notifications.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteInputs",
    "type" : "RemoteInput[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowGeneratedReplies",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSemanticAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsContextual",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "icon",
    "type" : "int",
    "comment" : "\n         * Small icon representing the action.\n         *\n         * @deprecated Use {@link Action#getIcon()} instead.\n         ",
    "links" : [ "#getIcon()" ]
  }, {
    "name" : "title",
    "type" : "CharSequence",
    "comment" : "\n         * Title of the action.\n         ",
    "links" : [ ]
  }, {
    "name" : "actionIntent",
    "type" : "PendingIntent",
    "comment" : "\n         * Intent to send when the user invokes this action. May be null, in which case the action\n         * may be rendered in a disabled presentation by the system UI.\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Action>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Icon getIcon()",
    "returnType" : "Icon",
    "comment" : "\n         * Return an icon representing the action.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n         * Get additional metadata carried around with this Action.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAllowGeneratedReplies()",
    "returnType" : "boolean",
    "comment" : "\n         * Return whether the platform should automatically generate possible replies for this\n         * {@link Action}\n         ",
    "links" : [ "Action" ]
  }, {
    "name" : "public RemoteInput[] getRemoteInputs()",
    "returnType" : "RemoteInput[]",
    "comment" : "\n         * Get the list of inputs to be collected from the user when this action is sent.\n         * May return null if no remote inputs were added. Only returns inputs which accept\n         * a text input. For inputs which only accept data use {@link #getDataOnlyRemoteInputs}.\n         ",
    "links" : [ "#getDataOnlyRemoteInputs" ]
  }, {
    "name" : "public int getSemanticAction()",
    "returnType" : "int",
    "comment" : "\n         * Returns the {@code SemanticAction} associated with this {@link Action}. A\n         * {@code SemanticAction} denotes what an {@link Action}'s {@link PendingIntent} will do\n         * (eg. reply, mark as read, delete, etc).\n         ",
    "links" : [ "Action", "android.app.PendingIntent" ]
  }, {
    "name" : "public boolean isContextual()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this is a contextual Action, i.e. whether the action is dependent on the\n         * notification message body. An example of a contextual action could be an action opening a\n         * map application with an address shown in the notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteInput[] getDataOnlyRemoteInputs()",
    "returnType" : "RemoteInput[]",
    "comment" : "\n         * Get the list of inputs to be collected from the user that ONLY accept data when this\n         * action is sent. These remote inputs are guaranteed to return true on a call to\n         * {@link RemoteInput#isDataOnly}.\n         *\n         * Returns null if there are no data-only remote inputs.\n         *\n         * This method exists so that legacy RemoteInput collectors that pre-date the addition\n         * of non-textual RemoteInputs do not access these remote inputs.\n         ",
    "links" : [ "android.app.RemoteInput#isDataOnly" ]
  }, {
    "name" : "public boolean isAuthenticationRequired()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the OS should only send this action's {@link PendingIntent} on an\n         * unlocked device.\n         *\n         * If the device is locked when the action is invoked, the OS should show the keyguard and\n         * require successful authentication before invoking the intent.\n         ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "private void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Action clone()",
    "returnType" : "Action",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Icon getIcon()", "public Bundle getExtras()", "public boolean getAllowGeneratedReplies()", "public RemoteInput[] getRemoteInputs()", "public int getSemanticAction()", "public boolean isContextual()", "public RemoteInput[] getDataOnlyRemoteInputs()", "public boolean isAuthenticationRequired()", "private void visitUris(@NonNull Consumer<Uri> visitor)", "public Action clone()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)" ],
  "variableNames" : [ "EXTRA_DATA_ONLY_INPUTS", "SEMANTIC_ACTION_NONE", "SEMANTIC_ACTION_REPLY", "SEMANTIC_ACTION_MARK_AS_READ", "SEMANTIC_ACTION_MARK_AS_UNREAD", "SEMANTIC_ACTION_DELETE", "SEMANTIC_ACTION_ARCHIVE", "SEMANTIC_ACTION_MUTE", "SEMANTIC_ACTION_UNMUTE", "SEMANTIC_ACTION_THUMBS_UP", "SEMANTIC_ACTION_THUMBS_DOWN", "SEMANTIC_ACTION_CALL", "SEMANTIC_ACTION_MARK_CONVERSATION_AS_PRIORITY", "SEMANTIC_ACTION_CONVERSATION_IS_PHISHING", "mExtras", "mIcon", "mRemoteInputs", "mAllowGeneratedReplies", "mSemanticAction", "mIsContextual", "mAuthenticationRequired", "icon", "title", "actionIntent", "CREATOR" ]
}