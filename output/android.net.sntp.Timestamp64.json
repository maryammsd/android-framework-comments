{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/sntp/Timestamp64.java",
  "packageName" : "android.net.sntp",
  "className" : "Timestamp64",
  "comment" : "\n * The 64-bit type (\"timestamp\") that NTP uses to represent a point in time. It only holds the\n * lowest 32-bits of the number of seconds since 1900-01-01 00:00:00. Consequently, to turn an\n * instance into an unambiguous point in time the era number must be known. Era zero runs from\n * 1900-01-01 00:00:00 to a date in 2036.\n *\n * It stores sub-second values using a 32-bit fixed point type, so it can resolve values smaller\n * than a nanosecond, but is imprecise (i.e. it truncates).\n *\n * See also <a href=https://www.eecis.udel.edu/~mills/y2k.html>NTP docs</a>.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ZERO",
    "type" : "Timestamp64",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUB_MILLIS_BITS_TO_RANDOMIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFFSET_1900_TO_1970",
    "type" : "long",
    "comment" : " 70 years plus 17 leap days",
    "links" : [ ]
  }, {
    "name" : "MAX_SECONDS_IN_ERA",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_IN_ERA",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANOS_PER_SECOND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEraSeconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFractionBits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Timestamp64 fromComponents(long eraSeconds, int fractionBits)",
    "returnType" : "Timestamp64",
    "comment" : " Creates a {@link Timestamp64} from the seconds and fraction components. ",
    "links" : [ "android.net.sntp.Timestamp64" ]
  }, {
    "name" : "public static Timestamp64 fromString(String string)",
    "returnType" : "Timestamp64",
    "comment" : " Creates a {@link Timestamp64} by decoding a string in the form \"e4dc720c.4d4fc9eb\". ",
    "links" : [ "android.net.sntp.Timestamp64" ]
  }, {
    "name" : "public static Timestamp64 fromInstant(Instant instant)",
    "returnType" : "Timestamp64",
    "comment" : "\n     * Converts an {@link Instant} into a {@link Timestamp64}. This is lossy: Timestamp64 only\n     * contains the number of seconds in a given era, but the era is not stored. Also, sub-second\n     * values are not stored precisely.\n     ",
    "links" : [ "android.net.sntp.Timestamp64", "java.time.Instant" ]
  }, {
    "name" : "public long getEraSeconds()",
    "returnType" : "long",
    "comment" : " Returns the number of seconds in the NTP era. ",
    "links" : [ ]
  }, {
    "name" : "public int getFractionBits()",
    "returnType" : "int",
    "comment" : " Returns the fraction of a second as 32-bit, unsigned fixed-point bits. ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Instant toInstant(int ntpEra)",
    "returnType" : "Instant",
    "comment" : " Returns the instant represented by this value in the specified NTP era. ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int fractionBitsToNanos(int fractionBits)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nanosToFractionBits(long nanos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Timestamp64 randomizeSubMillis(Random random)",
    "returnType" : "Timestamp64",
    "comment" : "\n     * Randomizes the fraction bits that represent sub-millisecond values. i.e. the randomization\n     * won't change the number of milliseconds represented after truncation. This is used to\n     * implement the part of the NTP spec that calls for clients with millisecond accuracy clocks\n     * to send randomized LSB values rather than zeros.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int randomizeLowestBits(Random random, int value, int bitsToRandomize)",
    "returnType" : "int",
    "comment" : "\n     * Randomizes the specified number of LSBs in {@code value} by using replacement bits from\n     * {@code Random.getNextInt()}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Timestamp64 fromComponents(long eraSeconds, int fractionBits)", "public static Timestamp64 fromString(String string)", "public static Timestamp64 fromInstant(Instant instant)", "public long getEraSeconds()", "public int getFractionBits()", "public String toString()", "public Instant toInstant(int ntpEra)", "public boolean equals(Object o)", "public int hashCode()", " static int fractionBitsToNanos(int fractionBits)", " static int nanosToFractionBits(long nanos)", "public Timestamp64 randomizeSubMillis(Random random)", "public static int randomizeLowestBits(Random random, int value, int bitsToRandomize)" ],
  "variableNames" : [ "ZERO", "SUB_MILLIS_BITS_TO_RANDOMIZE", "OFFSET_1900_TO_1970", "MAX_SECONDS_IN_ERA", "SECONDS_IN_ERA", "NANOS_PER_SECOND", "mEraSeconds", "mFractionBits" ]
}