{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/MeasureUnit.java",
  "packageName" : "android.icu.util",
  "className" : "MeasureUnit",
  "comment" : "\n * A unit such as length, mass, volume, currency, etc.  A unit is\n * coupled with a numeric amount to produce a Measure. MeasureUnit objects are immutable.\n * All subclasses must guarantee that. (However, subclassing is discouraged.)\n *\n * @see android.icu.util.Measure\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "Map<String, Map<String, MeasureUnit>>",
    "comment" : " i.e. from synchronized static methods. Beware of non-static methods.",
    "links" : [ ]
  }, {
    "name" : "cacheIsPopulated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "String",
    "comment" : "\n     * If type set to null, measureUnitImpl is in use instead of type and subType.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "subType",
    "type" : "String",
    "comment" : "\n     * If subType set to null, measureUnitImpl is in use instead of type and subType.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "measureUnitImpl",
    "type" : "MeasureUnitImpl",
    "comment" : "\n     * Used by new draft APIs in ICU 68.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ASCII",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ASCII_HYPHEN_DIGITS",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNIT_FACTORY",
    "type" : "Factory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURRENCY_FACTORY",
    "type" : "Factory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEUNIT_FACTORY",
    "type" : "Factory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "G_FORCE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of acceleration: g-force\n     ",
    "links" : [ ]
  }, {
    "name" : "METER_PER_SECOND_SQUARED",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of acceleration: meter-per-square-second\n     ",
    "links" : [ ]
  }, {
    "name" : "ARC_MINUTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of angle: arc-minute\n     ",
    "links" : [ ]
  }, {
    "name" : "ARC_SECOND",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of angle: arc-second\n     ",
    "links" : [ ]
  }, {
    "name" : "DEGREE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of angle: degree\n     ",
    "links" : [ ]
  }, {
    "name" : "RADIAN",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of angle: radian\n     ",
    "links" : [ ]
  }, {
    "name" : "REVOLUTION_ANGLE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of angle: revolution\n     ",
    "links" : [ ]
  }, {
    "name" : "ACRE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: acre\n     ",
    "links" : [ ]
  }, {
    "name" : "DUNAM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: dunam\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "HECTARE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: hectare\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_CENTIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-centimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_FOOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-foot\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_INCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-inch\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_KILOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-kilometer\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_METER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-meter\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_MILE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-mile\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_YARD",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of area: square-yard\n     ",
    "links" : [ ]
  }, {
    "name" : "ITEM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: item\n     ",
    "links" : [ ]
  }, {
    "name" : "KARAT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: karat\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIGRAM_OFGLUCOSE_PER_DECILITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: milligram-ofglucose-per-deciliter\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIGRAM_PER_DECILITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: milligram-per-deciliter\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIMOLE_PER_LITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: millimole-per-liter\n     ",
    "links" : [ ]
  }, {
    "name" : "MOLE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: mole\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "PERCENT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: percent\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMILLE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: permille\n     ",
    "links" : [ ]
  }, {
    "name" : "PART_PER_MILLION",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: permillion\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMYRIAD",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of concentr: permyriad\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "LITER_PER_100KILOMETERS",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of consumption: liter-per-100-kilometer\n     ",
    "links" : [ ]
  }, {
    "name" : "LITER_PER_KILOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of consumption: liter-per-kilometer\n     ",
    "links" : [ ]
  }, {
    "name" : "MILE_PER_GALLON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of consumption: mile-per-gallon\n     ",
    "links" : [ ]
  }, {
    "name" : "MILE_PER_GALLON_IMPERIAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of consumption: mile-per-gallon-imperial\n     ",
    "links" : [ ]
  }, {
    "name" : "BIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: bit\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: byte\n     ",
    "links" : [ ]
  }, {
    "name" : "GIGABIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: gigabit\n     ",
    "links" : [ ]
  }, {
    "name" : "GIGABYTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: gigabyte\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOBIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: kilobit\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOBYTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: kilobyte\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGABIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: megabit\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGABYTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: megabyte\n     ",
    "links" : [ ]
  }, {
    "name" : "PETABYTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: petabyte\n     ",
    "links" : [ ]
  }, {
    "name" : "TERABIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: terabit\n     ",
    "links" : [ ]
  }, {
    "name" : "TERABYTE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of digital: terabyte\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTURY",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: century\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: day\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_PERSON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: day-person\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DECADE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: decade\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: hour\n     ",
    "links" : [ ]
  }, {
    "name" : "MICROSECOND",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: microsecond\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLISECOND",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: millisecond\n     ",
    "links" : [ ]
  }, {
    "name" : "MINUTE",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: minute\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTH",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: month\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTH_PERSON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: month-person\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "NANOSECOND",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: nanosecond\n     ",
    "links" : [ ]
  }, {
    "name" : "QUARTER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: quarter\n     ",
    "links" : [ ]
  }, {
    "name" : "SECOND",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: second\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: week\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK_PERSON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: week-person\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "YEAR",
    "type" : "TimeUnit",
    "comment" : "\n     * Constant for unit of duration: year\n     ",
    "links" : [ ]
  }, {
    "name" : "YEAR_PERSON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of duration: year-person\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "AMPERE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of electric: ampere\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIAMPERE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of electric: milliampere\n     ",
    "links" : [ ]
  }, {
    "name" : "OHM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of electric: ohm\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of electric: volt\n     ",
    "links" : [ ]
  }, {
    "name" : "BRITISH_THERMAL_UNIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: british-thermal-unit\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "CALORIE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: calorie\n     ",
    "links" : [ ]
  }, {
    "name" : "ELECTRONVOLT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: electronvolt\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "FOODCALORIE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: foodcalorie\n     ",
    "links" : [ ]
  }, {
    "name" : "JOULE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: joule\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOCALORIE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: kilocalorie\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOJOULE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: kilojoule\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOWATT_HOUR",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: kilowatt-hour\n     ",
    "links" : [ ]
  }, {
    "name" : "THERM_US",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of energy: therm-us\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOWATT_HOUR_PER_100_KILOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of force: kilowatt-hour-per-100-kilometer\n     ",
    "links" : [ ]
  }, {
    "name" : "NEWTON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of force: newton\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "POUND_FORCE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of force: pound-force\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "GIGAHERTZ",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of frequency: gigahertz\n     ",
    "links" : [ ]
  }, {
    "name" : "HERTZ",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of frequency: hertz\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOHERTZ",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of frequency: kilohertz\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGAHERTZ",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of frequency: megahertz\n     ",
    "links" : [ ]
  }, {
    "name" : "DOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: dot\n     ",
    "links" : [ ]
  }, {
    "name" : "DOT_PER_CENTIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: dot-per-centimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "DOT_PER_INCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: dot-per-inch\n     ",
    "links" : [ ]
  }, {
    "name" : "EM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: em\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGAPIXEL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: megapixel\n     ",
    "links" : [ ]
  }, {
    "name" : "PIXEL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: pixel\n     ",
    "links" : [ ]
  }, {
    "name" : "PIXEL_PER_CENTIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: pixel-per-centimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "PIXEL_PER_INCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of graphics: pixel-per-inch\n     ",
    "links" : [ ]
  }, {
    "name" : "ASTRONOMICAL_UNIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: astronomical-unit\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: centimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "DECIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: decimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "EARTH_RADIUS",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: earth-radius\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "FATHOM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: fathom\n     ",
    "links" : [ ]
  }, {
    "name" : "FOOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: foot\n     ",
    "links" : [ ]
  }, {
    "name" : "FURLONG",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: furlong\n     ",
    "links" : [ ]
  }, {
    "name" : "INCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: inch\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: kilometer\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_YEAR",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: light-year\n     ",
    "links" : [ ]
  }, {
    "name" : "METER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: meter\n     ",
    "links" : [ ]
  }, {
    "name" : "MICROMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: micrometer\n     ",
    "links" : [ ]
  }, {
    "name" : "MILE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: mile\n     ",
    "links" : [ ]
  }, {
    "name" : "MILE_SCANDINAVIAN",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: mile-scandinavian\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: millimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "NANOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: nanometer\n     ",
    "links" : [ ]
  }, {
    "name" : "NAUTICAL_MILE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: nautical-mile\n     ",
    "links" : [ ]
  }, {
    "name" : "PARSEC",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: parsec\n     ",
    "links" : [ ]
  }, {
    "name" : "PICOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: picometer\n     ",
    "links" : [ ]
  }, {
    "name" : "POINT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: point\n     ",
    "links" : [ ]
  }, {
    "name" : "SOLAR_RADIUS",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: solar-radius\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "YARD",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of length: yard\n     ",
    "links" : [ ]
  }, {
    "name" : "CANDELA",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of light: candela\n     ",
    "links" : [ ]
  }, {
    "name" : "LUMEN",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of light: lumen\n     ",
    "links" : [ ]
  }, {
    "name" : "LUX",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of light: lux\n     ",
    "links" : [ ]
  }, {
    "name" : "SOLAR_LUMINOSITY",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of light: solar-luminosity\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "CARAT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: carat\n     ",
    "links" : [ ]
  }, {
    "name" : "DALTON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: dalton\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "EARTH_MASS",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: earth-mass\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAIN",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: grain\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: gram\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOGRAM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: kilogram\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_TON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: metric-ton (renamed to tonne in CLDR 42 / ICU 72).\n     * Note: In ICU 74 this will be deprecated in favor of TONNE, which is currently\n     * draft but will become stable in ICU 74, and which uses the preferred naming.\n     ",
    "links" : [ ]
  }, {
    "name" : "MICROGRAM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: microgram\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIGRAM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: milligram\n     ",
    "links" : [ ]
  }, {
    "name" : "OUNCE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: ounce\n     ",
    "links" : [ ]
  }, {
    "name" : "OUNCE_TROY",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: ounce-troy\n     ",
    "links" : [ ]
  }, {
    "name" : "POUND",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: pound\n     ",
    "links" : [ ]
  }, {
    "name" : "SOLAR_MASS",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: solar-mass\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "STONE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: stone\n     ",
    "links" : [ ]
  }, {
    "name" : "TON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: ton\n     ",
    "links" : [ ]
  }, {
    "name" : "TONNE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of mass: tonne\n     ",
    "links" : [ ]
  }, {
    "name" : "GIGAWATT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of power: gigawatt\n     ",
    "links" : [ ]
  }, {
    "name" : "HORSEPOWER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of power: horsepower\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOWATT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of power: kilowatt\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGAWATT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of power: megawatt\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIWATT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of power: milliwatt\n     ",
    "links" : [ ]
  }, {
    "name" : "WATT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of power: watt\n     ",
    "links" : [ ]
  }, {
    "name" : "ATMOSPHERE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: atmosphere\n     ",
    "links" : [ ]
  }, {
    "name" : "BAR",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: bar\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "GASOLINE_ENERGY_DENSITY",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: gasoline-energy-density\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "HECTOPASCAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: hectopascal\n     ",
    "links" : [ ]
  }, {
    "name" : "INCH_HG",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: inch-ofhg\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOPASCAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: kilopascal\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGAPASCAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: megapascal\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIBAR",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: millibar\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIMETER_OF_MERCURY",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: millimeter-ofhg\n     ",
    "links" : [ ]
  }, {
    "name" : "PASCAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: pascal\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "POUND_PER_SQUARE_INCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of pressure: pound-force-per-square-inch\n     ",
    "links" : [ ]
  }, {
    "name" : "BEAUFORT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of speed: beaufort\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "KILOMETER_PER_HOUR",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of speed: kilometer-per-hour\n     ",
    "links" : [ ]
  }, {
    "name" : "KNOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of speed: knot\n     ",
    "links" : [ ]
  }, {
    "name" : "METER_PER_SECOND",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of speed: meter-per-second\n     ",
    "links" : [ ]
  }, {
    "name" : "MILE_PER_HOUR",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of speed: mile-per-hour\n     ",
    "links" : [ ]
  }, {
    "name" : "CELSIUS",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of temperature: celsius\n     ",
    "links" : [ ]
  }, {
    "name" : "FAHRENHEIT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of temperature: fahrenheit\n     ",
    "links" : [ ]
  }, {
    "name" : "GENERIC_TEMPERATURE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of temperature: generic\n     ",
    "links" : [ ]
  }, {
    "name" : "KELVIN",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of temperature: kelvin\n     ",
    "links" : [ ]
  }, {
    "name" : "NEWTON_METER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of torque: newton-meter\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "POUND_FOOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of torque: pound-force-foot\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ACRE_FOOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: acre-foot\n     ",
    "links" : [ ]
  }, {
    "name" : "BARREL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: barrel\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "BUSHEL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: bushel\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTILITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: centiliter\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_CENTIMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-centimeter\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_FOOT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-foot\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_INCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-inch\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_KILOMETER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-kilometer\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_METER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-meter\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_MILE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-mile\n     ",
    "links" : [ ]
  }, {
    "name" : "CUBIC_YARD",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cubic-yard\n     ",
    "links" : [ ]
  }, {
    "name" : "CUP",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cup\n     ",
    "links" : [ ]
  }, {
    "name" : "CUP_METRIC",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: cup-metric\n     ",
    "links" : [ ]
  }, {
    "name" : "DECILITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: deciliter\n     ",
    "links" : [ ]
  }, {
    "name" : "DESSERT_SPOON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: dessert-spoon\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DESSERT_SPOON_IMPERIAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: dessert-spoon-imperial\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DRAM",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: dram\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DROP",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: drop\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "FLUID_OUNCE",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: fluid-ounce\n     ",
    "links" : [ ]
  }, {
    "name" : "FLUID_OUNCE_IMPERIAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: fluid-ounce-imperial\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "GALLON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: gallon\n     ",
    "links" : [ ]
  }, {
    "name" : "GALLON_IMPERIAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: gallon-imperial\n     ",
    "links" : [ ]
  }, {
    "name" : "HECTOLITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: hectoliter\n     ",
    "links" : [ ]
  }, {
    "name" : "JIGGER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: jigger\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "LITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: liter\n     ",
    "links" : [ ]
  }, {
    "name" : "MEGALITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: megaliter\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLILITER",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: milliliter\n     ",
    "links" : [ ]
  }, {
    "name" : "PINCH",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: pinch\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "PINT",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: pint\n     ",
    "links" : [ ]
  }, {
    "name" : "PINT_METRIC",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: pint-metric\n     ",
    "links" : [ ]
  }, {
    "name" : "QUART",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: quart\n     ",
    "links" : [ ]
  }, {
    "name" : "QUART_IMPERIAL",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: quart-imperial\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "TABLESPOON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: tablespoon\n     ",
    "links" : [ ]
  }, {
    "name" : "TEASPOON",
    "type" : "MeasureUnit",
    "comment" : "\n     * Constant for unit of volume: teaspoon\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MeasureUnit forIdentifier(String identifier)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Construct a MeasureUnit from a CLDR Core Unit Identifier, defined in UTS\n     * 35. (Core unit identifiers and mixed unit identifiers are supported, long\n     * unit identifiers are not.) Validates and canonicalizes the identifier.\n     *\n     * Note: dimensionless <code>MeasureUnit</code> is <code>null</code>\n     *\n     * <pre>\n     * MeasureUnit example = MeasureUnit::forIdentifier(\"furlong-per-nanosecond\")\n     * </pre>\n     *\n     * @param identifier CLDR Unit Identifier\n     * @throws IllegalArgumentException if the identifier is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureUnit fromMeasureUnitImpl(MeasureUnitImpl measureUnitImpl)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * @deprecated Internal API for ICU use only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * Get the type, such as \"length\". May return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSubtype()",
    "returnType" : "String",
    "comment" : "\n     * Get the subType, such as “foot”. May return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getIdentifier()",
    "returnType" : "String",
    "comment" : "\n     * Get CLDR Unit Identifier for this MeasureUnit, as defined in UTS 35.\n     *\n     * @return The string form of this unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Complexity getComplexity()",
    "returnType" : "Complexity",
    "comment" : "\n     * Compute the complexity of the unit. See Complexity for more information.\n     *\n     * @return The unit complexity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnit withPrefix(MeasurePrefix prefix)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Creates a MeasureUnit which is this SINGLE unit augmented with the specified prefix.\n     * For example, MeasurePrefix.KILO for \"kilo\", or MeasurePrefix.KIBI for \"kibi\".\n     * May return {@code this} if this unit already has that prefix.\n     * <p>\n     * There is sufficient locale data to format all standard prefixes.\n     * <p>\n     * NOTE: Only works on SINGLE units. If this is a COMPOUND or MIXED unit, an error will\n     * occur. For more information, {@link Complexity}.\n     *\n     * @param prefix The prefix, from MeasurePrefix.\n     * @return A new SINGLE unit.\n     * @throws UnsupportedOperationException if this unit is a COMPOUND or MIXED unit.\n     ",
    "links" : [ "Complexity" ]
  }, {
    "name" : "public MeasurePrefix getPrefix()",
    "returnType" : "MeasurePrefix",
    "comment" : "\n     * Returns the current SI or binary prefix of this SINGLE unit. For example,\n     * if the unit has the prefix \"kilo\", then MeasurePrefix.KILO is returned.\n     * <p>\n     * NOTE: Only works on SINGLE units. If this is a COMPOUND or MIXED unit, an\n     * error will occur. For more information, {@link Complexity}.\n     *\n     * @return The prefix of this SINGLE unit, from MeasurePrefix.\n     * @throws UnsupportedOperationException if the unit is COMPOUND or MIXED.\n     ",
    "links" : [ "Complexity" ]
  }, {
    "name" : "public int getDimensionality()",
    "returnType" : "int",
    "comment" : "\n     * Returns the dimensionality (power) of this MeasureUnit. For example, if the unit is square,\n     * then 2 is returned.\n     * <p>\n     * NOTE: Only works on SINGLE units. If this is a COMPOUND or MIXED unit, an exception will be thrown.\n     * For more information, {@link Complexity}.\n     *\n     * @return The dimensionality (power) of this simple unit.\n     * @throws UnsupportedOperationException if the unit is COMPOUND or MIXED.\n     ",
    "links" : [ "Complexity" ]
  }, {
    "name" : "public MeasureUnit withDimensionality(int dimensionality)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Creates a MeasureUnit which is this SINGLE unit augmented with the specified dimensionality\n     * (power). For example, if dimensionality is 2, the unit will be squared.\n     * <p>\n     * NOTE: Only works on SINGLE units. If this is a COMPOUND or MIXED unit, an exception is thrown.\n     * For more information, {@link Complexity}.\n     *\n     * @param dimensionality The dimensionality (power).\n     * @return A new SINGLE unit.\n     * @throws UnsupportedOperationException if the unit is COMPOUND or MIXED.\n     ",
    "links" : [ "Complexity" ]
  }, {
    "name" : "public MeasureUnit reciprocal()",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Computes the reciprocal of this MeasureUnit, with the numerator and denominator flipped.\n     * <p>\n     * For example, if the receiver is \"meter-per-second\", the unit \"second-per-meter\" is returned.\n     * <p>\n     * NOTE: Only works on SINGLE and COMPOUND units. If this is a MIXED unit, an error will\n     * occur. For more information, {@link Complexity}.\n     *\n     * @return The reciprocal of the target unit.\n     * @throws UnsupportedOperationException if the unit is MIXED.\n     ",
    "links" : [ "Complexity" ]
  }, {
    "name" : "public MeasureUnit product(MeasureUnit other)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Computes the product of this unit with another unit. This is a way to build units from\n     * constituent parts.\n     * <p>\n     * The numerator and denominator are preserved through this operation.\n     * <p>\n     * For example, if the receiver is \"kilowatt\" and the argument is \"hour-per-day\", then the\n     * unit \"kilowatt-hour-per-day\" is returned.\n     * <p>\n     * NOTE: Only works on SINGLE and COMPOUND units. If either unit (receivee and argument) is a\n     * MIXED unit, an error will occur. For more information, {@link Complexity}.\n     *\n     * @param other The MeasureUnit to multiply with the target.\n     * @return The product of the target unit with the provided unit.\n     * @throws UnsupportedOperationException if the unit is MIXED.\n     ",
    "links" : [ "Complexity" ]
  }, {
    "name" : "public List<MeasureUnit> splitToSingleUnits()",
    "returnType" : "List<MeasureUnit>",
    "comment" : "\n     * Returns the list of SINGLE units contained within a sequence of COMPOUND units.\n     * <p>\n     * Examples:\n     * - Given \"meter-kilogram-per-second\", three units will be returned: \"meter\",\n     * \"kilogram\", and \"per-second\".\n     * - Given \"hour+minute+second\", three units will be returned: \"hour\", \"minute\",\n     * and \"second\".\n     * <p>\n     * If this is a SINGLE unit, a list of length 1 will be returned.\n     *\n     * @return An unmodifiable list of single units\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object rhs)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getAvailableTypes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get all of the available units' types. Returned set is unmodifiable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<MeasureUnit> getAvailable(String type)",
    "returnType" : "Set<MeasureUnit>",
    "comment" : "\n     * For the given type, return the available units.\n     * @param type the type\n     * @return the available units for type. Returned set is unmodifiable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized Set<MeasureUnit> getAvailable()",
    "returnType" : "Set<MeasureUnit>",
    "comment" : "\n     * Get all of the available units. Returned set is unmodifiable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureUnit internalGetInstance(String type, String subType)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Creates a MeasureUnit instance (creates a singleton instance) or returns one from the cache.\n     * <p>\n     * Normally this method should not be used, since there will be no formatting data\n     * available for it, and it may not be returned by getAvailable().\n     * However, for special purposes (such as CLDR tooling), it is available.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureUnit findBySubType(String subType)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized void populateCache()",
    "returnType" : "void",
    "comment" : "\n     * Populate the MeasureUnit cache with all types from the data.\n     * Population is done lazily, in response to MeasureUnit.getAvailable()\n     * or other API that expects to see all of the MeasureUnits.\n     *\n     * <p>At static initialization time the MeasureUnits cache is populated\n     * with public static instances (G_FORCE, METER_PER_SECOND_SQUARED, etc.) only.\n     * Adding of others is deferred until later to avoid circular static init\n     * dependencies with classes Currency and TimeUnit.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static synchronized MeasureUnit addUnit(String type, String unitName, Factory factory)",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SingleUnitImpl getSingleUnitImpl()",
    "returnType" : "SingleUnitImpl",
    "comment" : " In ICU4C, this is SingleUnitImpl::forMeasureUnit().",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnitImpl getCopyOfMeasureUnitImpl()",
    "returnType" : "MeasureUnitImpl",
    "comment" : "\n     *\n     * @return this object in a MeasureUnitImpl form.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private MeasureUnitImpl getMaybeReferenceOfMeasureUnitImpl()",
    "returnType" : "MeasureUnitImpl",
    "comment" : "\n     *\n     * @return this object in a MeasureUnitImpl form.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MeasureUnit forIdentifier(String identifier)", "public static MeasureUnit fromMeasureUnitImpl(MeasureUnitImpl measureUnitImpl)", "public String getType()", "public String getSubtype()", "public String getIdentifier()", "public Complexity getComplexity()", "public MeasureUnit withPrefix(MeasurePrefix prefix)", "public MeasurePrefix getPrefix()", "public int getDimensionality()", "public MeasureUnit withDimensionality(int dimensionality)", "public MeasureUnit reciprocal()", "public MeasureUnit product(MeasureUnit other)", "public List<MeasureUnit> splitToSingleUnits()", "public int hashCode()", "public boolean equals(Object rhs)", "public String toString()", "public static Set<String> getAvailableTypes()", "public static Set<MeasureUnit> getAvailable(String type)", "public static synchronized Set<MeasureUnit> getAvailable()", "public static MeasureUnit internalGetInstance(String type, String subType)", "public static MeasureUnit findBySubType(String subType)", "private static synchronized void populateCache()", "protected static synchronized MeasureUnit addUnit(String type, String unitName, Factory factory)", "private Object writeReplace() throws ObjectStreamException", "private SingleUnitImpl getSingleUnitImpl()", "public MeasureUnitImpl getCopyOfMeasureUnitImpl()", "private MeasureUnitImpl getMaybeReferenceOfMeasureUnitImpl()" ],
  "variableNames" : [ "serialVersionUID", "cache", "cacheIsPopulated", "type", "subType", "measureUnitImpl", "ASCII", "ASCII_HYPHEN_DIGITS", "UNIT_FACTORY", "CURRENCY_FACTORY", "TIMEUNIT_FACTORY", "G_FORCE", "METER_PER_SECOND_SQUARED", "ARC_MINUTE", "ARC_SECOND", "DEGREE", "RADIAN", "REVOLUTION_ANGLE", "ACRE", "DUNAM", "HECTARE", "SQUARE_CENTIMETER", "SQUARE_FOOT", "SQUARE_INCH", "SQUARE_KILOMETER", "SQUARE_METER", "SQUARE_MILE", "SQUARE_YARD", "ITEM", "KARAT", "MILLIGRAM_OFGLUCOSE_PER_DECILITER", "MILLIGRAM_PER_DECILITER", "MILLIMOLE_PER_LITER", "MOLE", "PERCENT", "PERMILLE", "PART_PER_MILLION", "PERMYRIAD", "LITER_PER_100KILOMETERS", "LITER_PER_KILOMETER", "MILE_PER_GALLON", "MILE_PER_GALLON_IMPERIAL", "BIT", "BYTE", "GIGABIT", "GIGABYTE", "KILOBIT", "KILOBYTE", "MEGABIT", "MEGABYTE", "PETABYTE", "TERABIT", "TERABYTE", "CENTURY", "DAY", "DAY_PERSON", "DECADE", "HOUR", "MICROSECOND", "MILLISECOND", "MINUTE", "MONTH", "MONTH_PERSON", "NANOSECOND", "QUARTER", "SECOND", "WEEK", "WEEK_PERSON", "YEAR", "YEAR_PERSON", "AMPERE", "MILLIAMPERE", "OHM", "VOLT", "BRITISH_THERMAL_UNIT", "CALORIE", "ELECTRONVOLT", "FOODCALORIE", "JOULE", "KILOCALORIE", "KILOJOULE", "KILOWATT_HOUR", "THERM_US", "KILOWATT_HOUR_PER_100_KILOMETER", "NEWTON", "POUND_FORCE", "GIGAHERTZ", "HERTZ", "KILOHERTZ", "MEGAHERTZ", "DOT", "DOT_PER_CENTIMETER", "DOT_PER_INCH", "EM", "MEGAPIXEL", "PIXEL", "PIXEL_PER_CENTIMETER", "PIXEL_PER_INCH", "ASTRONOMICAL_UNIT", "CENTIMETER", "DECIMETER", "EARTH_RADIUS", "FATHOM", "FOOT", "FURLONG", "INCH", "KILOMETER", "LIGHT_YEAR", "METER", "MICROMETER", "MILE", "MILE_SCANDINAVIAN", "MILLIMETER", "NANOMETER", "NAUTICAL_MILE", "PARSEC", "PICOMETER", "POINT", "SOLAR_RADIUS", "YARD", "CANDELA", "LUMEN", "LUX", "SOLAR_LUMINOSITY", "CARAT", "DALTON", "EARTH_MASS", "GRAIN", "GRAM", "KILOGRAM", "METRIC_TON", "MICROGRAM", "MILLIGRAM", "OUNCE", "OUNCE_TROY", "POUND", "SOLAR_MASS", "STONE", "TON", "TONNE", "GIGAWATT", "HORSEPOWER", "KILOWATT", "MEGAWATT", "MILLIWATT", "WATT", "ATMOSPHERE", "BAR", "GASOLINE_ENERGY_DENSITY", "HECTOPASCAL", "INCH_HG", "KILOPASCAL", "MEGAPASCAL", "MILLIBAR", "MILLIMETER_OF_MERCURY", "PASCAL", "POUND_PER_SQUARE_INCH", "BEAUFORT", "KILOMETER_PER_HOUR", "KNOT", "METER_PER_SECOND", "MILE_PER_HOUR", "CELSIUS", "FAHRENHEIT", "GENERIC_TEMPERATURE", "KELVIN", "NEWTON_METER", "POUND_FOOT", "ACRE_FOOT", "BARREL", "BUSHEL", "CENTILITER", "CUBIC_CENTIMETER", "CUBIC_FOOT", "CUBIC_INCH", "CUBIC_KILOMETER", "CUBIC_METER", "CUBIC_MILE", "CUBIC_YARD", "CUP", "CUP_METRIC", "DECILITER", "DESSERT_SPOON", "DESSERT_SPOON_IMPERIAL", "DRAM", "DROP", "FLUID_OUNCE", "FLUID_OUNCE_IMPERIAL", "GALLON", "GALLON_IMPERIAL", "HECTOLITER", "JIGGER", "LITER", "MEGALITER", "MILLILITER", "PINCH", "PINT", "PINT_METRIC", "QUART", "QUART_IMPERIAL", "TABLESPOON", "TEASPOON" ]
}