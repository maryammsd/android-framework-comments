{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ApplicationExitInfo.java",
  "packageName" : "android.app",
  "className" : "ApplicationExitInfo",
  "comment" : "\n * Describes the information of an application process's death.\n *\n * <p>\n * Application process could die for many reasons, for example {@link #REASON_LOW_MEMORY}\n * when it was killed by the ystem because it was running low on memory. Reason\n * of the death can be retrieved via {@link #getReason}. Besides the reason, there are a few other\n * auxiliary APIs like {@link #getStatus} and {@link #getImportance} to help the caller with\n * additional diagnostic information.\n * </p>\n *\n ",
  "variables" : [ {
    "name" : "REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Application process died due to unknown reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_EXIT_SELF",
    "type" : "int",
    "comment" : "\n     * Application process exit normally by itself, for example,\n     * via {@link java.lang.System#exit}; {@link #getStatus} will specify the exit code.\n     *\n     * <p>Applications should normally not do this, as the system has a better knowledge\n     * in terms of process management.</p>\n     ",
    "links" : [ "java.lang.System#exit", "#getStatus" ]
  }, {
    "name" : "REASON_SIGNALED",
    "type" : "int",
    "comment" : "\n     * Application process died due to the result of an OS signal; for example,\n     * {@link android.system.OsConstants#SIGKILL}; {@link #getStatus} will specify the signal\n     * number.\n     ",
    "links" : [ "android.system.OsConstants#SIGKILL", "#getStatus" ]
  }, {
    "name" : "REASON_LOW_MEMORY",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the system low memory killer, meaning the system was\n     * under memory pressure at the time of kill.\n     *\n     * <p class=\"note\">\n     * Not all devices support reporting {@link #REASON_LOW_MEMORY}; on a device with no such\n     * support, when a process is killed due to memory pressure, the {@link #getReason} will return\n     * {@link #REASON_SIGNALED} and {@link #getStatus} will return\n     * the value {@link android.system.OsConstants#SIGKILL}.\n     *\n     * Application should use {@link android.app.ActivityManager#isLowMemoryKillReportSupported()\n     * ActivityManager.isLowMemoryKillReportSupported()} to check\n     * if the device supports reporting {@link #REASON_LOW_MEMORY} or not.\n     * </p>\n     ",
    "links" : [ "#getReason", "android.app.ActivityManager#isLowMemoryKillReportSupported()", "android.system.OsConstants#SIGKILL", "#getStatus", "#REASON_LOW_MEMORY", "#REASON_SIGNALED" ]
  }, {
    "name" : "REASON_CRASH",
    "type" : "int",
    "comment" : "\n     * Application process died because of an unhandled exception in Java code.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_CRASH_NATIVE",
    "type" : "int",
    "comment" : "\n     * Application process died because of a native code crash.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_ANR",
    "type" : "int",
    "comment" : "\n     * Application process was killed due to being unresponsive (ANR).\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_INITIALIZATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Application process was killed because of initialization failure,\n     * for example, it took too long to attach to the system during the start,\n     * or there was an error during initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PERMISSION_CHANGE",
    "type" : "int",
    "comment" : "\n     * Application process was killed due to a runtime permission change.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_EXCESSIVE_RESOURCE_USAGE",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the system due to excessive resource usage.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_USER_REQUESTED",
    "type" : "int",
    "comment" : "\n     * Application process was killed because of the user request, for example,\n     * user clicked the \"Force stop\" button of the application in the Settings,\n     * or removed the application away from Recents.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_USER_STOPPED",
    "type" : "int",
    "comment" : "\n     * Application process was killed, because the user it is running as on devices\n     * with mutlple users, was stopped.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_DEPENDENCY_DIED",
    "type" : "int",
    "comment" : "\n     * Application process was killed because its dependency was going away, for example,\n     * a stable content provider connection's client will be killed if the provider is killed.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_OTHER",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the system for various other reasons which are\n     * not by problems in apps and not actionable by apps, for example, the system just\n     * finished updates; {@link #getDescription} will specify the cause given by the system.\n     ",
    "links" : [ "#getDescription" ]
  }, {
    "name" : "SUBREASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Application process kills subreason is unknown.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBREASON_WAIT_FOR_DEBUGGER",
    "type" : "int",
    "comment" : "\n     * Application process was killed because user quit it on the \"wait for debugger\" dialog;\n     * this would be set when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_TOO_MANY_CACHED",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the activity manager because there were too many cached\n     * processes; this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_TOO_MANY_EMPTY",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the activity manager because there were too many empty\n     * processes; this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_TRIM_EMPTY",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the activity manager because there were too many cached\n     * processes and this process had been in empty state for a long time;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_LARGE_CACHED",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the activity manager because system was on memory pressure\n     * and this process took large amount of cached memory;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_MEMORY_PRESSURE",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the activity manager because the system was on low memory\n     * pressure for a significant amount of time since last idle;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_EXCESSIVE_CPU",
    "type" : "int",
    "comment" : "\n     * Application process was killed by the activity manager due to excessive CPU usage;\n     * this would be set only when the reason is {@link #REASON_EXCESSIVE_RESOURCE_USAGE}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_EXCESSIVE_RESOURCE_USAGE" ]
  }, {
    "name" : "SUBREASON_SYSTEM_UPDATE_DONE",
    "type" : "int",
    "comment" : "\n     * System update has done (so the system update process should be killed);\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_KILL_ALL_FG",
    "type" : "int",
    "comment" : "\n     * Kill all foreground services, for now it only occurs when enabling the quiet\n     * mode for the managed profile;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_KILL_ALL_BG_EXCEPT",
    "type" : "int",
    "comment" : "\n     * All background processes except certain ones were killed, for now it only occurs\n     * when the density of the default display is changed;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_KILL_UID",
    "type" : "int",
    "comment" : "\n     * The process associated with the UID was explicitly killed, for example,\n     * it could be because of platform compatibility overrides;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_KILL_PID",
    "type" : "int",
    "comment" : "\n     * The process was explicitly killed with its PID, typically because of\n     * the low memory for surfaces;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_INVALID_START",
    "type" : "int",
    "comment" : "\n     * The start of the process was invalid;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_INVALID_STATE",
    "type" : "int",
    "comment" : "\n     * The process was killed because it's in an invalid state, typically\n     * it's triggered from SHELL;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_IMPERCEPTIBLE",
    "type" : "int",
    "comment" : "\n     * The process was killed when it's imperceptible to user, because it was\n     * in a bad state;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_REMOVE_LRU",
    "type" : "int",
    "comment" : "\n     * The process was killed because it's being moved out from LRU list;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "SUBREASON_ISOLATED_NOT_NEEDED",
    "type" : "int",
    "comment" : "\n     * The process was killed because it's isolated and was in a cached state;\n     * this would be set only when the reason is {@link #REASON_OTHER}.\n     *\n     * For internal use only.\n     * @hide\n     ",
    "links" : [ "#REASON_OTHER" ]
  }, {
    "name" : "mPid",
    "type" : "int",
    "comment" : "\n     * @see #getPid\n     ",
    "links" : [ ]
  }, {
    "name" : "mRealUid",
    "type" : "int",
    "comment" : "\n     * @see #getRealUid\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageUid",
    "type" : "int",
    "comment" : "\n     * @see #getPackageUid\n     ",
    "links" : [ ]
  }, {
    "name" : "mDefiningUid",
    "type" : "int",
    "comment" : "\n     * @see #getDefiningUid\n     ",
    "links" : [ ]
  }, {
    "name" : "mProcessName",
    "type" : "String",
    "comment" : "\n     * @see #getProcessName\n     ",
    "links" : [ ]
  }, {
    "name" : "mReason",
    "type" : "int",
    "comment" : "\n     * @see #getReason\n     ",
    "links" : [ ]
  }, {
    "name" : "mStatus",
    "type" : "int",
    "comment" : "\n     * @see #getStatus\n     ",
    "links" : [ ]
  }, {
    "name" : "mImportance",
    "type" : "int",
    "comment" : "\n     * @see #getImportance\n     ",
    "links" : [ ]
  }, {
    "name" : "mPss",
    "type" : "long",
    "comment" : "\n     * @see #getPss\n     ",
    "links" : [ ]
  }, {
    "name" : "mRss",
    "type" : "long",
    "comment" : "\n     * @see #getRss\n     ",
    "links" : [ ]
  }, {
    "name" : "mTimestamp",
    "type" : "long",
    "comment" : "\n     * @see #getTimestamp\n     ",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "\n     * @see #getDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubReason",
    "type" : "int",
    "comment" : "\n     * @see #getSubReason\n     ",
    "links" : [ ]
  }, {
    "name" : "mConnectionGroup",
    "type" : "int",
    "comment" : "\n     * @see #getConnectionGroup\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "\n     * @see #getPackageName\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageList",
    "type" : "String[]",
    "comment" : "\n     * @see #getPackageList\n     ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "byte[]",
    "comment" : "\n     * @see #getProcessStateSummary\n     ",
    "links" : [ ]
  }, {
    "name" : "mTraceFile",
    "type" : "File",
    "comment" : "\n     * The file to the trace file in the storage;\n     *\n     * for system internal use only, will not retain across processes.\n     *\n     * @see #getTraceInputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "mAppTraceRetriever",
    "type" : "IAppTraceRetriever",
    "comment" : "\n     * The Binder interface to retrieve the file descriptor to\n     * the trace file from the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ApplicationExitInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPid()",
    "returnType" : "int",
    "comment" : "\n     * The process id of the process that died.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRealUid()",
    "returnType" : "int",
    "comment" : "\n     * The kernel user identifier of the process, most of the time the system uses this\n     * to do access control checks. It's typically the uid of the package where the component is\n     * running from, except the case of isolated process, where this field identifies the kernel\n     * user identifier that this process is actually running with, while the {@link #getPackageUid}\n     * identifies the kernel user identifier that is assigned at the package installation time.\n     ",
    "links" : [ "#getPackageUid" ]
  }, {
    "name" : "public int getPackageUid()",
    "returnType" : "int",
    "comment" : "\n     * Similar to {@link #getRealUid}, it's the kernel user identifier that is assigned at the\n     * package installation time.\n     ",
    "links" : [ "#getRealUid" ]
  }, {
    "name" : "public int getDefiningUid()",
    "returnType" : "int",
    "comment" : "\n     * Return the defining kernel user identifier, maybe different from {@link #getRealUid} and\n     * {@link #getPackageUid}, if an external service has the\n     * {@link android.R.styleable#AndroidManifestService_useAppZygote android:useAppZygote} set\n     * to <code>true</code> and was bound with the flag\n     * {@link android.content.Context#BIND_EXTERNAL_SERVICE} - in this case, this field here will\n     * be the kernel user identifier of the external service provider.\n     ",
    "links" : [ "#getRealUid", "android.content.Context#BIND_EXTERNAL_SERVICE", "android.R.styleable#AndroidManifestService_useAppZygote", "#getPackageUid" ]
  }, {
    "name" : "public String getProcessName()",
    "returnType" : "String",
    "comment" : "\n     * The actual process name it was running with.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReason()",
    "returnType" : "int",
    "comment" : "\n     * The reason code of the process's death.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatus()",
    "returnType" : "int",
    "comment" : "\n     * The exit status argument of exit() if the application calls it, or the signal\n     * number if the application is signaled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getImportance()",
    "returnType" : "int",
    "comment" : "\n     * The importance of the process that it used to have before the death.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getPss()",
    "returnType" : "long",
    "comment" : "\n     * Last proportional set size of the memory that the process had used in kB.\n     *\n     * <p class=\"note\">Note: This is the value from last sampling on the process,\n     * it's NOT the exact memory information prior to its death; and it'll be zero\n     * if the process died before system had a chance to take the sample. </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getRss()",
    "returnType" : "long",
    "comment" : "\n     * Last resident set size of the memory that the process had used in kB.\n     *\n     * <p class=\"note\">Note: This is the value from last sampling on the process,\n     * it's NOT the exact memory information prior to its death; and it'll be zero\n     * if the process died before system had a chance to take the sample. </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * The timestamp of the process's death, in milliseconds since the epoch,\n     * as returned by {@link java.lang.System#currentTimeMillis() System.currentTimeMillis()}.\n     ",
    "links" : [ "java.lang.System#currentTimeMillis()" ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * The human readable description of the process's death, given by the system; could be null.\n     *\n     * <p class=\"note\">Note: only intended to be human-readable and the system provides no\n     * guarantees that the format is stable across devices or Android releases.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "\n     * Return the user id of the record on a multi-user system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getProcessStateSummary()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the state data set by calling\n     * {@link android.app.ActivityManager#setProcessStateSummary(byte[])\n     * ActivityManager.setProcessStateSummary(byte[])} from the process before its death.\n     *\n     * @return The process-customized data\n     * @see ActivityManager#setProcessStateSummary(byte[])\n     ",
    "links" : [ "android.app.ActivityManager#setProcessStateSummary(byte" ]
  }, {
    "name" : "public InputStream getTraceInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Return the InputStream to the traces that was taken by the system\n     * prior to the death of the process; typically it'll be available when\n     * the reason is {@link #REASON_ANR}, though if the process gets an ANR\n     * but recovers, and dies for another reason later, this trace will be included\n     * in the record of {@link ApplicationExitInfo} still.\n     *\n     * @return The input stream to the traces that was taken by the system\n     *         prior to the death of the process.\n     ",
    "links" : [ "android.app.ApplicationExitInfo", "#REASON_ANR" ]
  }, {
    "name" : "public File getTraceFile()",
    "returnType" : "File",
    "comment" : "\n     * Similar to {@link #getTraceInputStream} but return the File object.\n     *\n     * For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ "#getTraceInputStream" ]
  }, {
    "name" : "public int getSubReason()",
    "returnType" : "int",
    "comment" : "\n     * A subtype reason in conjunction with {@link #mReason}.\n     *\n     * For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ "#mReason" ]
  }, {
    "name" : "public int getConnectionGroup()",
    "returnType" : "int",
    "comment" : "\n     * The connection group this process belongs to, if there is any.\n     * @see android.content.Context#updateServiceGroup\n     *\n     * For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Name of first package running in this process;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getPackageList()",
    "returnType" : "String[]",
    "comment" : "\n     * List of packages running in this process;\n     *\n     * For system internal use only, will not retain across processes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPid(final int pid)",
    "returnType" : "void",
    "comment" : "\n     * @see #getPid\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRealUid(final int uid)",
    "returnType" : "void",
    "comment" : "\n     * @see #getRealUid\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPackageUid(final int uid)",
    "returnType" : "void",
    "comment" : "\n     * @see #getPackageUid\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefiningUid(final int uid)",
    "returnType" : "void",
    "comment" : "\n     * @see #getDefiningUid\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProcessName(final String processName)",
    "returnType" : "void",
    "comment" : "\n     * @see #getProcessName\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReason(@Reason final int reason)",
    "returnType" : "void",
    "comment" : "\n     * @see #getReason\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStatus(final int status)",
    "returnType" : "void",
    "comment" : "\n     * @see #getStatus\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImportance(@Importance final int importance)",
    "returnType" : "void",
    "comment" : "\n     * @see #getImportance\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPss(final long pss)",
    "returnType" : "void",
    "comment" : "\n     * @see #getPss\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRss(final long rss)",
    "returnType" : "void",
    "comment" : "\n     * @see #getRss\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimestamp(@CurrentTimeMillisLong final long timestamp)",
    "returnType" : "void",
    "comment" : "\n     * @see #getTimestamp\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDescription(final String description)",
    "returnType" : "void",
    "comment" : "\n     * @see #getDescription\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubReason(@SubReason final int subReason)",
    "returnType" : "void",
    "comment" : "\n     * @see #getSubReason\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectionGroup(final int connectionGroup)",
    "returnType" : "void",
    "comment" : "\n     * @see #getConnectionGroup\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPackageName(final String packageName)",
    "returnType" : "void",
    "comment" : "\n     * @see #getPackageName\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPackageList(final String[] packageList)",
    "returnType" : "void",
    "comment" : "\n     * @see #getPackageList\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProcessStateSummary(final byte[] state)",
    "returnType" : "void",
    "comment" : "\n     * @see #getProcessStateSummary\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTraceFile(final File traceFile)",
    "returnType" : "void",
    "comment" : "\n     * @see #getTraceFile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAppTraceRetriever(final IAppTraceRetriever retriever)",
    "returnType" : "void",
    "comment" : "\n     * @see #mAppTraceRetriever\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull PrintWriter pw, @Nullable String prefix, @Nullable String seqSuffix, @NonNull SimpleDateFormat sdf)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String reasonCodeToString(@Reason int reason)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String subreasonToString(@SubReason int subreason)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToProto(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.app.ApplicationExitInfoProto}\n     *\n     * @param proto    Stream to write the ApplicationExitInfo object to.\n     * @param fieldId  Field Id of the ApplicationExitInfo as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.app.ApplicationExitInfoProto" ]
  }, {
    "name" : "public void readFromProto(ProtoInputStream proto, long fieldId) throws IOException, WireTypeMismatchException",
    "returnType" : "void",
    "comment" : "\n     * Read from a protocol buffer input stream.\n     * Protocol buffer message definition at {@link android.app.ApplicationExitInfoProto}\n     *\n     * @param proto   Stream to read the ApplicationExitInfo object from.\n     * @param fieldId Field Id of the ApplicationExitInfo as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.app.ApplicationExitInfoProto" ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "REASON_UNKNOWN", "REASON_EXIT_SELF", "REASON_SIGNALED", "REASON_LOW_MEMORY", "REASON_CRASH", "REASON_CRASH_NATIVE", "REASON_ANR", "REASON_INITIALIZATION_FAILURE", "REASON_PERMISSION_CHANGE", "REASON_EXCESSIVE_RESOURCE_USAGE", "REASON_USER_REQUESTED", "REASON_USER_STOPPED", "REASON_DEPENDENCY_DIED", "REASON_OTHER", "SUBREASON_UNKNOWN", "SUBREASON_WAIT_FOR_DEBUGGER", "SUBREASON_TOO_MANY_CACHED", "SUBREASON_TOO_MANY_EMPTY", "SUBREASON_TRIM_EMPTY", "SUBREASON_LARGE_CACHED", "SUBREASON_MEMORY_PRESSURE", "SUBREASON_EXCESSIVE_CPU", "SUBREASON_SYSTEM_UPDATE_DONE", "SUBREASON_KILL_ALL_FG", "SUBREASON_KILL_ALL_BG_EXCEPT", "SUBREASON_KILL_UID", "SUBREASON_KILL_PID", "SUBREASON_INVALID_START", "SUBREASON_INVALID_STATE", "SUBREASON_IMPERCEPTIBLE", "SUBREASON_REMOVE_LRU", "SUBREASON_ISOLATED_NOT_NEEDED", "mPid", "mRealUid", "mPackageUid", "mDefiningUid", "mProcessName", "mReason", "mStatus", "mImportance", "mPss", "mRss", "mTimestamp", "mDescription", "mSubReason", "mConnectionGroup", "mPackageName", "mPackageList", "mState", "mTraceFile", "mAppTraceRetriever", "CREATOR" ],
  "methodNames" : [ "public int getPid()", "public int getRealUid()", "public int getPackageUid()", "public int getDefiningUid()", "public String getProcessName()", "public int getReason()", "public int getStatus()", "public int getImportance()", "public long getPss()", "public long getRss()", "public long getTimestamp()", "public String getDescription()", "public UserHandle getUserHandle()", "public byte[] getProcessStateSummary()", "public InputStream getTraceInputStream() throws IOException", "public File getTraceFile()", "public int getSubReason()", "public int getConnectionGroup()", "public String getPackageName()", "public String[] getPackageList()", "public void setPid(final int pid)", "public void setRealUid(final int uid)", "public void setPackageUid(final int uid)", "public void setDefiningUid(final int uid)", "public void setProcessName(final String processName)", "public void setReason(@Reason final int reason)", "public void setStatus(final int status)", "public void setImportance(@Importance final int importance)", "public void setPss(final long pss)", "public void setRss(final long rss)", "public void setTimestamp(@CurrentTimeMillisLong final long timestamp)", "public void setDescription(final String description)", "public void setSubReason(@SubReason final int subReason)", "public void setConnectionGroup(final int connectionGroup)", "public void setPackageName(final String packageName)", "public void setPackageList(final String[] packageList)", "public void setProcessStateSummary(final byte[] state)", "public void setTraceFile(final File traceFile)", "public void setAppTraceRetriever(final IAppTraceRetriever retriever)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public void dump(@NonNull PrintWriter pw, @Nullable String prefix, @Nullable String seqSuffix, @NonNull SimpleDateFormat sdf)", "public String toString()", "private static String reasonCodeToString(@Reason int reason)", "public static String subreasonToString(@SubReason int subreason)", "public void writeToProto(ProtoOutputStream proto, long fieldId)", "public void readFromProto(ProtoInputStream proto, long fieldId) throws IOException, WireTypeMismatchException", "public boolean equals(Object other)", "public int hashCode()" ]
}