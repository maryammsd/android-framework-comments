{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ViewStructure.java",
  "packageName" : "android.view",
  "className" : "ViewStructure",
  "comment" : "\n * <p><code>ViewStructure</code> is a container for storing additional\n * per-view data generated by {@link View#onProvideStructure\n * View.onProvideStructure} and {@link View#onProvideAutofillStructure\n * View.onProvideAutofillStructure}.\n *\n * <p>To learn more about using Autofill in your app, read the\n * <a href=\"/guide/topics/text/autofill\">Autofill Framework</a> guides.\n *\n ",
  "links" : [ "android.view.View#onProvideAutofillStructureView.onProvideAutofillStructure", "android.view.View#onProvideStructureView.onProvideStructure" ],
  "variables" : [ {
    "name" : "EXTRA_ACTIVE_CHILDREN_IDS",
    "type" : "String",
    "comment" : "\n     * Key used for writing active child view information to the content capture bundle.\n     *\n     * The value stored under this key will be an ordered list of Autofill IDs of child views.\n     *\n     * TODO(b/241498401): Add @TestApi in Android U\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FIRST_ACTIVE_POSITION",
    "type" : "String",
    "comment" : "\n     * Key used for writing the first active child's position to the content capture bundle.\n     *\n     * When active child view information is provided under the\n     * {@link #EXTRA_ACTIVE_CHILDREN_IDS}, the value stored under this key will be the\n     * 0-based position of the first child view in the list relative to the positions of child views\n     * in the containing View's dataset.\n     *\n     * TODO(b/241498401): Add @TestApi in Android U\n     * @hide ",
    "links" : [ "#EXTRA_ACTIVE_CHILDREN_IDS" ]
  }, {
    "name" : "EXTRA_VIRTUAL_STRUCTURE_TYPE",
    "type" : "String",
    "comment" : "\n     * Key used for writing the type of the view that generated the virtual structure of its\n     * children.\n     *\n     * For example, if the virtual structure is generated by a webview, the value would be\n     * \"WebView\". If the virtual structure is generated by a compose view, then the value would be\n     * \"ComposeView\". The value is of type String.\n     *\n     * This value is added to mainly help with debugging purpose.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void setId(int id, String packageName, String typeName, String entryName)",
    "returnType" : "void",
    "comment" : "\n     * Set the identifier for this view.\n     *\n     * @param id The view's identifier, as per {@link View#getId View.getId()}.\n     * @param packageName The package name of the view's identifier, or null if there is none.\n     * @param typeName The type name of the view's identifier, or null if there is none.\n     * @param entryName The entry name of the view's identifier, or null if there is none.\n     ",
    "links" : [ "android.view.View#getId" ]
  }, {
    "name" : "public abstract void setDimens(int left, int top, int scrollX, int scrollY, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Set the basic dimensions of this view.\n     *\n     * @param left The view's left position, in pixels relative to its parent's left edge.\n     * @param top The view's top position, in pixels relative to its parent's top edge.\n     * @param scrollX How much the view's x coordinate space has been scrolled, in pixels.\n     * @param scrollY How much the view's y coordinate space has been scrolled, in pixels.\n     * @param width The view's visible width, in pixels.  This is the width visible on screen,\n     * not the total data width of a scrollable view.\n     * @param height The view's visible height, in pixels.  This is the height visible on\n     * screen, not the total data height of a scrollable view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTransformation(Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Set the transformation matrix associated with this view, as per\n     * {@link View#getMatrix View.getMatrix()}, or null if there is none.\n     ",
    "links" : [ "android.view.View#getMatrix" ]
  }, {
    "name" : "public abstract void setElevation(float elevation)",
    "returnType" : "void",
    "comment" : "\n     * Set the visual elevation (shadow) of the view, as per\n     * {@link View#getZ View.getZ()}.  Note this is <em>not</em> related\n     * to the physical Z-ordering of this view relative to its other siblings (that is how\n     * they overlap when drawing), it is only the visual representation for shadowing.\n     ",
    "links" : [ "android.view.View#getZ" ]
  }, {
    "name" : "public abstract void setAlpha(float alpha)",
    "returnType" : "void",
    "comment" : "\n     * Set an alpha transformation that is applied to this view, as per\n     * {@link View#getAlpha View.getAlpha()}.  Value ranges from 0\n     * (completely transparent) to 1 (completely opaque); the default is 1, which means\n     * no transformation.\n     ",
    "links" : [ "android.view.View#getAlpha" ]
  }, {
    "name" : "public abstract void setVisibility(int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Set the visibility state of this view, as per\n     * {@link View#getVisibility View.getVisibility()}.\n     ",
    "links" : [ "android.view.View#getVisibility" ]
  }, {
    "name" : "public abstract void setAssistBlocked(boolean state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnabled(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the enabled state of this view, as per {@link View#isEnabled View.isEnabled()}.\n     ",
    "links" : [ "android.view.View#isEnabled" ]
  }, {
    "name" : "public abstract void setClickable(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the clickable state of this view, as per {@link View#isClickable View.isClickable()}.\n     ",
    "links" : [ "android.view.View#isClickable" ]
  }, {
    "name" : "public abstract void setLongClickable(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the long clickable state of this view, as per\n     * {@link View#isLongClickable View.isLongClickable()}.\n     ",
    "links" : [ "android.view.View#isLongClickable" ]
  }, {
    "name" : "public abstract void setContextClickable(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the context clickable state of this view, as per\n     * {@link View#isContextClickable View.isContextClickable()}.\n     ",
    "links" : [ "android.view.View#isContextClickable" ]
  }, {
    "name" : "public abstract void setFocusable(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the focusable state of this view, as per {@link View#isFocusable View.isFocusable()}.\n     ",
    "links" : [ "android.view.View#isFocusable" ]
  }, {
    "name" : "public abstract void setFocused(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the focused state of this view, as per {@link View#isFocused View.isFocused()}.\n     ",
    "links" : [ "android.view.View#isFocused" ]
  }, {
    "name" : "public abstract void setAccessibilityFocused(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the accessibility focused state of this view, as per\n     * {@link View#isAccessibilityFocused View.isAccessibilityFocused()}.\n     ",
    "links" : [ "android.view.View#isAccessibilityFocused" ]
  }, {
    "name" : "public abstract void setCheckable(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the checkable state of this view, such as whether it implements the\n     * {@link android.widget.Checkable} interface.\n     ",
    "links" : [ "android.widget.Checkable" ]
  }, {
    "name" : "public abstract void setChecked(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the checked state of this view, such as\n     * {@link android.widget.Checkable#isChecked Checkable.isChecked()}.\n     ",
    "links" : [ "android.widget.Checkable#isChecked" ]
  }, {
    "name" : "public abstract void setSelected(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the selected state of this view, as per {@link View#isSelected View.isSelected()}.\n     ",
    "links" : [ "android.view.View#isSelected" ]
  }, {
    "name" : "public abstract void setActivated(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Set the activated state of this view, as per {@link View#isActivated View.isActivated()}.\n     ",
    "links" : [ "android.view.View#isActivated" ]
  }, {
    "name" : "public abstract void setOpaque(boolean opaque)",
    "returnType" : "void",
    "comment" : "\n     * Set the opaque state of this view, as per {@link View#isOpaque View.isOpaque()}.\n     ",
    "links" : [ "android.view.View#isOpaque" ]
  }, {
    "name" : "public abstract void setClassName(String className)",
    "returnType" : "void",
    "comment" : "\n     * Set the class name of the view, as per\n     * {@link View#getAccessibilityClassName View.getAccessibilityClassName()}.\n     ",
    "links" : [ "android.view.View#getAccessibilityClassName" ]
  }, {
    "name" : "public abstract void setContentDescription(CharSequence contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Set the content description of the view, as per\n     * {@link View#getContentDescription View.getContentDescription()}.\n     ",
    "links" : [ "android.view.View#getContentDescription" ]
  }, {
    "name" : "public abstract void setText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * Set the text that is associated with this view.  There is no selection\n     * associated with the text.  The text may have style spans to supply additional\n     * display and semantic information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setText(CharSequence text, int selectionStart, int selectionEnd)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #setText(CharSequence)} but with an active selection\n     * extending from <var>selectionStart</var> through <var>selectionEnd</var>.\n     ",
    "links" : [ "#setText(CharSequence)" ]
  }, {
    "name" : "public abstract void setTextStyle(float size, int fgColor, int bgColor, int style)",
    "returnType" : "void",
    "comment" : "\n     * Explicitly set default global style information for text that was previously set with\n     * {@link #setText}.\n     *\n     * @param size The size, in pixels, of the text.\n     * @param fgColor The foreground color, packed as 0xAARRGGBB.\n     * @param bgColor The background color, packed as 0xAARRGGBB.\n     * @param style Style flags, as defined by {@link android.app.assist.AssistStructure.ViewNode}.\n     ",
    "links" : [ "android.app.assist.AssistStructure.ViewNode", "#setText" ]
  }, {
    "name" : "public abstract void setTextLines(int[] charOffsets, int[] baselines)",
    "returnType" : "void",
    "comment" : "\n     * Set line information for test that was previously supplied through\n     * {@link #setText(CharSequence)}.  This provides the line breaking of the text as it\n     * is shown on screen.  This function takes ownership of the provided arrays; you should\n     * not make further modification to them.\n     *\n     * @param charOffsets The offset in to {@link #setText} where a line starts.\n     * @param baselines The baseline where the line is drawn on screen.\n     ",
    "links" : [ "#setText(CharSequence)", "#setText" ]
  }, {
    "name" : "public void setTextIdEntry(@NonNull String entryName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the identifier used to set the text associated with this view.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for Assist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setHint(CharSequence hint)",
    "returnType" : "void",
    "comment" : "\n     * Set optional hint text associated with this view; this is for example the text that is\n     * shown by an EditText when it is empty to indicate to the user the kind of text to input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHintIdEntry(@NonNull String entryName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the identifier used to set the hint associated with this view.\n     *\n     * <p>Used as metadata for fingerprinting view nodes/structures.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for Assist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the last {@link #setText(CharSequence)}.\n     ",
    "links" : [ "#setText(CharSequence)" ]
  }, {
    "name" : "public abstract int getTextSelectionStart()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the last selection start set by {@link #setText(CharSequence, int, int)}.\n     ",
    "links" : [ "#setText(CharSequence" ]
  }, {
    "name" : "public abstract int getTextSelectionEnd()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the last selection end set by {@link #setText(CharSequence, int, int)}.\n     ",
    "links" : [ "#setText(CharSequence" ]
  }, {
    "name" : "public abstract CharSequence getHint()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the last hint set by {@link #setHint}.\n     ",
    "links" : [ "#setHint" ]
  }, {
    "name" : "public abstract Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Get extra data associated with this view structure; the returned Bundle is mutable,\n     * allowing you to view and modify its contents.  Keys placed in the Bundle should use\n     * an appropriate namespace prefix (such as com.google.MY_KEY) to avoid conflicts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasExtras()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getExtras} has been used to create extra content.\n     ",
    "links" : [ "#getExtras" ]
  }, {
    "name" : "public abstract void setChildCount(int num)",
    "returnType" : "void",
    "comment" : "\n     * Set the number of children of this view, which defines the range of indices you can\n     * use with {@link #newChild} and {@link #asyncNewChild}.  Calling this method again\n     * resets all of the child state of the view, removing any children that had previously\n     * been added.\n     ",
    "links" : [ "#asyncNewChild", "#newChild" ]
  }, {
    "name" : "public abstract int addChildCount(int num)",
    "returnType" : "int",
    "comment" : "\n     * Add to this view's child count.  This increases the current child count by\n     * <var>num</var> children beyond what was last set by {@link #setChildCount}\n     * or {@link #addChildCount}.  The index at which the new\n     * child starts in the child\n     * array is returned.\n     *\n     * @param num The number of new children to add.\n     * @return Returns the index in the child array at which the new children start.\n     ",
    "links" : [ "#setChildCount", "#addChildCount" ]
  }, {
    "name" : "public abstract int getChildCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the child count as set by {@link #setChildCount}.\n     ",
    "links" : [ "#setChildCount" ]
  }, {
    "name" : "public abstract ViewStructure newChild(int index)",
    "returnType" : "ViewStructure",
    "comment" : "\n     * Create a new child {@link ViewStructure} in this view, putting into the list of\n     * children at <var>index</var>.\n     *\n     * <p><b>NOTE: </b>you must pre-allocate space for the child first, by calling either\n     * {@link #addChildCount(int)} or {@link #setChildCount(int)}.\n     *\n     * @return Returns an fresh {@link ViewStructure} ready to be filled in.\n     ",
    "links" : [ "android.view.ViewStructure", "#addChildCount(int)", "#setChildCount(int)" ]
  }, {
    "name" : "public abstract ViewStructure asyncNewChild(int index)",
    "returnType" : "ViewStructure",
    "comment" : "\n     * Like {@link #newChild}, but allows the caller to asynchronously populate the returned\n     * child.  It can transfer the returned {@link ViewStructure} to another thread for it\n     * to build its content (and children etc).  Once done, some thread must call\n     * {@link #asyncCommit} to tell the containing {@link ViewStructure} that the async\n     * population is done.\n     *\n     * <p><b>NOTE: </b>you must pre-allocate space for the child first, by calling either\n     * {@link #addChildCount(int)} or {@link #setChildCount(int)}.\n     *\n     * @return Returns an fresh {@link ViewStructure} ready to be filled in.\n     ",
    "links" : [ "android.view.ViewStructure", "#asyncCommit", "#addChildCount(int)", "#newChild", "#setChildCount(int)" ]
  }, {
    "name" : "public GetCredentialRequest getPendingCredentialRequest()",
    "returnType" : "GetCredentialRequest",
    "comment" : "\n     * Gets the {@link GetCredentialRequest} associated with this node.\n     *\n     * <p> If null, no request is associated with this node, and hence no\n     * {@link android.credentials.CredentialManager} request will be fired when this\n     * node is focused.\n     * <p> For details on how a request and callback can be set, see\n     * {@link ViewStructure#setPendingCredentialRequest(GetCredentialRequest, OutcomeReceiver)}\n     ",
    "links" : [ "android.credentials.CredentialManager", "android.credentials.GetCredentialRequest", "android.view.ViewStructure#setPendingCredentialRequest(GetCredentialRequest" ]
  }, {
    "name" : "public OutcomeReceiver<GetCredentialResponse, GetCredentialException> getPendingCredentialCallback()",
    "returnType" : "OutcomeReceiver<GetCredentialResponse, GetCredentialException>",
    "comment" : "\n     * Gets the {@code callback} associated with this node.\n     *\n     * <p> If null, no callback or request is associated with this node, and hence no\n     * {@link android.credentials.CredentialManager} request will be fired when this\n     * node is focused.\n     * <p> For details on how a request and callback can be set, see\n     * {@link ViewStructure#setPendingCredentialRequest(GetCredentialRequest, OutcomeReceiver)}\n     ",
    "links" : [ "android.credentials.CredentialManager", "android.view.ViewStructure#setPendingCredentialRequest(GetCredentialRequest" ]
  }, {
    "name" : "public abstract AutofillId getAutofillId()",
    "returnType" : "AutofillId",
    "comment" : "\n     * Gets the {@link AutofillId} associated with this node.\n     ",
    "links" : [ "android.view.autofill.AutofillId" ]
  }, {
    "name" : "public abstract void setAutofillId(@NonNull AutofillId id)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AutofillId} associated with this node.\n     ",
    "links" : [ "android.view.autofill.AutofillId" ]
  }, {
    "name" : "public abstract void setAutofillId(@NonNull AutofillId parentId, int virtualId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AutofillId} for this virtual node.\n     *\n     * @param parentId id of the parent node.\n     * @param virtualId an opaque ID to the Android System; it's the same id used on\n     *            {@link View#autofill(android.util.SparseArray)}.\n     ",
    "links" : [ "android.view.autofill.AutofillId", "android.view.View#autofill(android.util.SparseArray)" ]
  }, {
    "name" : "public abstract void setAutofillType(@View.AutofillType int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link View#getAutofillType()} that can be used to autofill this node.\n     ",
    "links" : [ "android.view.View#getAutofillType()" ]
  }, {
    "name" : "public abstract void setAutofillHints(@Nullable String[] hint)",
    "returnType" : "void",
    "comment" : "\n     * Sets the a hints that helps the autofill service to select the appropriate data to fill the\n     * view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAutofillValue(AutofillValue value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AutofillValue} representing the current value of this node.\n     ",
    "links" : [ "android.view.autofill.AutofillValue" ]
  }, {
    "name" : "public abstract void setAutofillOptions(CharSequence[] options)",
    "returnType" : "void",
    "comment" : "\n     * Sets the options that can be used to autofill this node.\n     *\n     * <p>Typically used by nodes whose {@link View#getAutofillType()} is a list to indicate the\n     * meaning of each possible value in the list.\n     ",
    "links" : [ "android.view.View#getAutofillType()" ]
  }, {
    "name" : "public void setImportantForAutofill(@AutofillImportance int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link View#setImportantForAutofill(int) importantForAutofill mode} of the\n     * view associated with this node.\n     ",
    "links" : [ "android.view.View#setImportantForAutofill(int)" ]
  }, {
    "name" : "public void setIsCredential(boolean isCredential)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node is a credential. See {@link View#isCredential}.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.View#isCredential" ]
  }, {
    "name" : "public void setReceiveContentMimeTypes(@SuppressLint(\"NullableCollection\") @Nullable String[] mimeTypes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the MIME types accepted by this view. See {@link View#getReceiveContentMimeTypes()}.\n     *\n     * <p>Should only be set when the node is used for Autofill or Content Capture purposes - it\n     * will be ignored when used for Assist.\n     ",
    "links" : [ "android.view.View#getReceiveContentMimeTypes()" ]
  }, {
    "name" : "public abstract void setInputType(int inputType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link android.text.InputType} bits of this node.\n     *\n     * @param inputType inputType bits as defined by {@link android.text.InputType}.\n     ",
    "links" : [ "android.text.InputType" ]
  }, {
    "name" : "public abstract void setDataIsSensitive(boolean sensitive)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the data on this node is sensitive; if it is, then its content (text, autofill\n     * value, etc..) is striped before calls to {@link\n     * android.service.autofill.AutofillService#onFillRequest(android.service.autofill.FillRequest,\n     * android.os.CancellationSignal, android.service.autofill.FillCallback)}.\n     *\n     * <p>By default, all nodes are assumed to be sensitive, and only nodes that does not have PII\n     * (Personally Identifiable Information - sensitive data such as email addresses, credit card\n     * numbers, passwords, etc...) should be marked as non-sensitive; a good rule of thumb is to\n     * mark as non-sensitive nodes whose value were statically set from resources.\n     *\n     * <p>Notice that the content of even sensitive nodes are sent to the service (through the\n     * {@link\n     * android.service.autofill.AutofillService#onSaveRequest(android.service.autofill.SaveRequest,\n     * android.service.autofill.SaveCallback)} call) when the user consented to save\n     * thedata, so it is important to set the content of sensitive nodes as well, but mark them as\n     * sensitive.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for Assist.\n     ",
    "links" : [ "android.service.autofill.AutofillService#onSaveRequest(android.service.autofill.SaveRequest", "android.service.autofill.AutofillService#onFillRequest(android.service.autofill.FillRequest" ]
  }, {
    "name" : "public void setMinTextEms(@SuppressWarnings(\"unused\") int minEms)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum width in ems of the text associated with this view, when supported.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for Assist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxTextEms(@SuppressWarnings(\"unused\") int maxEms)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum width in ems of the text associated with this view, when supported.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for Assist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxTextLength(@SuppressWarnings(\"unused\") int maxLength)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum length of the text associated with this view, when supported.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for Assist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void asyncCommit()",
    "returnType" : "void",
    "comment" : "\n     * Call when done populating a {@link ViewStructure} returned by\n     * {@link #asyncNewChild}.\n     ",
    "links" : [ "android.view.ViewStructure", "#asyncNewChild" ]
  }, {
    "name" : "public abstract Rect getTempRect()",
    "returnType" : "Rect",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setWebDomain(@Nullable String domain)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Web domain represented by this node.\n     *\n     * <p>Typically used when the view is a container for an HTML document.\n     *\n     * @param domain RFC 2396-compliant URI representing the domain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLocaleList(LocaleList localeList)",
    "returnType" : "void",
    "comment" : "\n     * Sets the the list of locales associated with this node.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract HtmlInfo.Builder newHtmlInfoBuilder(@NonNull String tagName)",
    "returnType" : "HtmlInfo.Builder",
    "comment" : "\n     * Creates a new {@link HtmlInfo.Builder} for the given HTML tag.\n     *\n     * @param tagName name of the HTML tag.\n     * @return a new builder.\n     ",
    "links" : [ "HtmlInfo.Builder" ]
  }, {
    "name" : "public abstract void setHtmlInfo(@NonNull HtmlInfo htmlInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sets the HTML properties of this node when it represents an HTML element.\n     *\n     * <p>Should only be set when the node is used for autofill purposes - it will be ignored\n     * when used for assist.\n     *\n     * @param htmlInfo HTML properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPendingCredentialRequest(@NonNull GetCredentialRequest request, @NonNull OutcomeReceiver<GetCredentialResponse, GetCredentialException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a credential request to be fired to {@link android.credentials.CredentialManager}\n     * when this node is focused\n     *\n     * @param request the request to be fired\n     * @param callback the callback where the response or exception, is returned\n     ",
    "links" : [ "android.credentials.CredentialManager" ]
  }, {
    "name" : "public void clearCredentialManagerRequest()",
    "returnType" : "void",
    "comment" : "\n     * Clears the credential request previously set through\n     * {@link ViewStructure#setPendingCredentialRequest(GetCredentialRequest, OutcomeReceiver)}\n     ",
    "links" : [ "android.view.ViewStructure#setPendingCredentialRequest(GetCredentialRequest" ]
  } ],
  "methodNames" : [ "public abstract void setId(int id, String packageName, String typeName, String entryName)", "public abstract void setDimens(int left, int top, int scrollX, int scrollY, int width, int height)", "public abstract void setTransformation(Matrix matrix)", "public abstract void setElevation(float elevation)", "public abstract void setAlpha(float alpha)", "public abstract void setVisibility(int visibility)", "public abstract void setAssistBlocked(boolean state)", "public abstract void setEnabled(boolean state)", "public abstract void setClickable(boolean state)", "public abstract void setLongClickable(boolean state)", "public abstract void setContextClickable(boolean state)", "public abstract void setFocusable(boolean state)", "public abstract void setFocused(boolean state)", "public abstract void setAccessibilityFocused(boolean state)", "public abstract void setCheckable(boolean state)", "public abstract void setChecked(boolean state)", "public abstract void setSelected(boolean state)", "public abstract void setActivated(boolean state)", "public abstract void setOpaque(boolean opaque)", "public abstract void setClassName(String className)", "public abstract void setContentDescription(CharSequence contentDescription)", "public abstract void setText(CharSequence text)", "public abstract void setText(CharSequence text, int selectionStart, int selectionEnd)", "public abstract void setTextStyle(float size, int fgColor, int bgColor, int style)", "public abstract void setTextLines(int[] charOffsets, int[] baselines)", "public void setTextIdEntry(@NonNull String entryName)", "public abstract void setHint(CharSequence hint)", "public void setHintIdEntry(@NonNull String entryName)", "public abstract CharSequence getText()", "public abstract int getTextSelectionStart()", "public abstract int getTextSelectionEnd()", "public abstract CharSequence getHint()", "public abstract Bundle getExtras()", "public abstract boolean hasExtras()", "public abstract void setChildCount(int num)", "public abstract int addChildCount(int num)", "public abstract int getChildCount()", "public abstract ViewStructure newChild(int index)", "public abstract ViewStructure asyncNewChild(int index)", "public GetCredentialRequest getPendingCredentialRequest()", "public OutcomeReceiver<GetCredentialResponse, GetCredentialException> getPendingCredentialCallback()", "public abstract AutofillId getAutofillId()", "public abstract void setAutofillId(@NonNull AutofillId id)", "public abstract void setAutofillId(@NonNull AutofillId parentId, int virtualId)", "public abstract void setAutofillType(@View.AutofillType int type)", "public abstract void setAutofillHints(@Nullable String[] hint)", "public abstract void setAutofillValue(AutofillValue value)", "public abstract void setAutofillOptions(CharSequence[] options)", "public void setImportantForAutofill(@AutofillImportance int mode)", "public void setIsCredential(boolean isCredential)", "public void setReceiveContentMimeTypes(@SuppressLint(\"NullableCollection\") @Nullable String[] mimeTypes)", "public abstract void setInputType(int inputType)", "public abstract void setDataIsSensitive(boolean sensitive)", "public void setMinTextEms(@SuppressWarnings(\"unused\") int minEms)", "public void setMaxTextEms(@SuppressWarnings(\"unused\") int maxEms)", "public void setMaxTextLength(@SuppressWarnings(\"unused\") int maxLength)", "public abstract void asyncCommit()", "public abstract Rect getTempRect()", "public abstract void setWebDomain(@Nullable String domain)", "public abstract void setLocaleList(LocaleList localeList)", "public abstract HtmlInfo.Builder newHtmlInfoBuilder(@NonNull String tagName)", "public abstract void setHtmlInfo(@NonNull HtmlInfo htmlInfo)", "public void setPendingCredentialRequest(@NonNull GetCredentialRequest request, @NonNull OutcomeReceiver<GetCredentialResponse, GetCredentialException> callback)", "public void clearCredentialManagerRequest()" ],
  "variableNames" : [ "EXTRA_ACTIVE_CHILDREN_IDS", "EXTRA_FIRST_ACTIVE_POSITION", "EXTRA_VIRTUAL_STRUCTURE_TYPE" ]
}