{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/nl80211/PnoNetwork.java",
  "packageName" : "android.net.wifi.nl80211",
  "className" : "PnoNetwork",
  "comment" : "\n * Configuration for a PNO (preferred network offload) network used in {@link PnoSettings}. A PNO\n * network allows configuration of a specific network to search for.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mIsHidden",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSsid",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrequencies",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PnoNetwork>",
    "comment" : " implement Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isHidden()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the PNO network configuration is for a hidden SSID - i.e. a network which\n     * does not broadcast its SSID and must be queried explicitly.\n     *\n     * @return True if the configuration is for a hidden network, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHidden(boolean isHidden)",
    "returnType" : "void",
    "comment" : "\n     * Configure whether the PNO network configuration is for a hidden SSID - i.e. a network which\n     * does not broadcast its SSID and must be queried explicitly.\n     *\n     * @param isHidden True if the configuration is for a hidden network, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSsid()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the raw bytes for the SSID of the PNO network being scanned for.\n     *\n     * @return A byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSsid(@NonNull byte[] ssid)",
    "returnType" : "void",
    "comment" : "\n     * Set the raw bytes for the SSID of the PNO network being scanned for.\n     *\n     * @param ssid A byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getFrequenciesMhz()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the frequencies (in MHz) on which to PNO scan for the current network is being searched\n     * for. A null return (i.e. no frequencies configured) indicates that the network is search for\n     * on all supported frequencies.\n     *\n     * @return A array of frequencies (in MHz), a null indicates no configured frequencies.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFrequenciesMhz(@NonNull int[] frequenciesMhz)",
    "returnType" : "void",
    "comment" : "\n     * Set the frequencies (in MHz) on which to PNO scan for the current network is being searched\n     * for. A null configuration (i.e. no frequencies configured) indicates that the network is\n     * search for on all supported frequencies.\n     *\n     * @param frequenciesMhz an array of frequencies (in MHz), null indicating no configured\n     *                       frequencies.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object rhs)",
    "returnType" : "boolean",
    "comment" : " override comparator ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " override hash code ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " implement Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * implement Parcelable interface\n     * |flag| is ignored.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mIsHidden", "mSsid", "mFrequencies", "CREATOR" ],
  "methodNames" : [ "public boolean isHidden()", "public void setHidden(boolean isHidden)", "public byte[] getSsid()", "public void setSsid(@NonNull byte[] ssid)", "public int[] getFrequenciesMhz()", "public void setFrequenciesMhz(@NonNull int[] frequenciesMhz)", "public boolean equals(Object rhs)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)" ]
}