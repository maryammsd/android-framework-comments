{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/FileSystem.java",
  "packageName" : "java.io",
  "className" : "FileSystem",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "BA_EXISTS",
    "type" : "int",
    "comment" : " Constants for simple boolean attributes ",
    "links" : [ ]
  }, {
    "name" : "BA_REGULAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BA_DIRECTORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BA_HIDDEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCESS_READ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCESS_WRITE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCESS_EXECUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCESS_OK",
    "type" : "int",
    "comment" : " Android-added: b/25878034, to support File.exists() reimplementation.",
    "links" : [ ]
  }, {
    "name" : "SPACE_TOTAL",
    "type" : "int",
    "comment" : " -- Disk usage -- ",
    "links" : [ ]
  }, {
    "name" : "SPACE_FREE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPACE_USABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "useCanonCaches",
    "type" : "boolean",
    "comment" : "static boolean useCanonPrefixCache = true;",
    "links" : [ ]
  }, {
    "name" : "useCanonPrefixCache",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract char getSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Return the local filesystem's name-separator character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract char getPathSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Return the local filesystem's path-separator character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String normalize(String path)",
    "returnType" : "String",
    "comment" : "\n     * Convert the given pathname string to normal form.  If the string is\n     * already in normal form then it is simply returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int prefixLength(String path)",
    "returnType" : "int",
    "comment" : "\n     * Compute the length of this pathname string's prefix.  The pathname\n     * string must be in normal form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String resolve(String parent, String child)",
    "returnType" : "String",
    "comment" : "\n     * Resolve the child pathname string against the parent.\n     * Both strings must be in normal form, and the result\n     * will be in normal form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getDefaultParent()",
    "returnType" : "String",
    "comment" : "\n     * Return the parent pathname string to be used when the parent-directory\n     * argument in one of the two-argument File constructors is the empty\n     * pathname.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String fromURIPath(String path)",
    "returnType" : "String",
    "comment" : "\n     * Post-process the given URI path string if necessary.  This is used on\n     * win32, e.g., to transform \"/c:/foo\" into \"c:/foo\".  The path string\n     * still has slash separators; code in the File class will translate them\n     * after this method returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAbsolute(File f)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell whether or not the given abstract pathname is absolute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String resolve(File f)",
    "returnType" : "String",
    "comment" : "\n     * Resolve the given abstract pathname into absolute form.  Invoked by the\n     * getAbsolutePath and getCanonicalPath methods in the File class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String canonicalize(String path) throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getBooleanAttributes(File f)",
    "returnType" : "int",
    "comment" : "\n     * Return the simple boolean attributes for the file or directory denoted\n     * by the given abstract pathname, or zero if it does not exist or some\n     * other I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean checkAccess(File f, int access)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the file or directory denoted by the given abstract\n     * pathname may be accessed by this process.  The second argument specifies\n     * which access, ACCESS_READ, ACCESS_WRITE or ACCESS_EXECUTE, to check.\n     * Return false if access is denied or an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setPermission(File f, int access, boolean enable, boolean owneronly)",
    "returnType" : "boolean",
    "comment" : "\n     * Set on or off the access permission (to owner only or to all) to the file\n     * or directory denoted by the given abstract pathname, based on the parameters\n     * enable, access and oweronly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getLastModifiedTime(File f)",
    "returnType" : "long",
    "comment" : "\n     * Return the time at which the file or directory denoted by the given\n     * abstract pathname was last modified, or zero if it does not exist or\n     * some other I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getLength(File f)",
    "returnType" : "long",
    "comment" : "\n     * Return the length in bytes of the file denoted by the given abstract\n     * pathname, or zero if it does not exist, is a directory, or some other\n     * I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean createFileExclusively(String pathname) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Create a new empty file with the given pathname.  Return\n     * <code>true</code> if the file was created and <code>false</code> if a\n     * file or directory with the given pathname already exists.  Throw an\n     * IOException if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean delete(File f)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete the file or directory denoted by the given abstract pathname,\n     * returning <code>true</code> if and only if the operation succeeds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] list(File f)",
    "returnType" : "String[]",
    "comment" : "\n     * List the elements of the directory denoted by the given abstract\n     * pathname.  Return an array of strings naming the elements of the\n     * directory if successful; otherwise, return <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean createDirectory(File f)",
    "returnType" : "boolean",
    "comment" : "\n     * Create a new directory denoted by the given abstract pathname,\n     * returning <code>true</code> if and only if the operation succeeds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean rename(File f1, File f2)",
    "returnType" : "boolean",
    "comment" : "\n     * Rename the file or directory denoted by the first abstract pathname to\n     * the second abstract pathname, returning <code>true</code> if and only if\n     * the operation succeeds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setLastModifiedTime(File f, long time)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the last-modified time of the file or directory denoted by the\n     * given abstract pathname, returning <code>true</code> if and only if the\n     * operation succeeds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setReadOnly(File f)",
    "returnType" : "boolean",
    "comment" : "\n     * Mark the file or directory denoted by the given abstract pathname as\n     * read-only, returning <code>true</code> if and only if the operation\n     * succeeds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract File[] listRoots()",
    "returnType" : "File[]",
    "comment" : "\n     * List the available filesystem roots.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getSpace(File f, int t)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getNameMax(String path)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the maximum length of a component of a file path.\n     *\n     * @return The maximum length of a file path component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int compare(File f1, File f2)",
    "returnType" : "int",
    "comment" : "\n     * Compare two abstract pathnames lexicographically.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int hashCode(File f)",
    "returnType" : "int",
    "comment" : "\n     * Compute the hash code of an abstract pathname.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean getBooleanProperty(String prop, boolean defaultVal)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract char getSeparator()", "public abstract char getPathSeparator()", "public abstract String normalize(String path)", "public abstract int prefixLength(String path)", "public abstract String resolve(String parent, String child)", "public abstract String getDefaultParent()", "public abstract String fromURIPath(String path)", "public abstract boolean isAbsolute(File f)", "public abstract String resolve(File f)", "public abstract String canonicalize(String path) throws IOException", "public abstract int getBooleanAttributes(File f)", "public abstract boolean checkAccess(File f, int access)", "public abstract boolean setPermission(File f, int access, boolean enable, boolean owneronly)", "public abstract long getLastModifiedTime(File f)", "public abstract long getLength(File f)", "public abstract boolean createFileExclusively(String pathname) throws IOException", "public abstract boolean delete(File f)", "public abstract String[] list(File f)", "public abstract boolean createDirectory(File f)", "public abstract boolean rename(File f1, File f2)", "public abstract boolean setLastModifiedTime(File f, long time)", "public abstract boolean setReadOnly(File f)", "public abstract File[] listRoots()", "public abstract long getSpace(File f, int t)", "public abstract int getNameMax(String path)", "public abstract int compare(File f1, File f2)", "public abstract int hashCode(File f)", "private static boolean getBooleanProperty(String prop, boolean defaultVal)" ],
  "variableNames" : [ "BA_EXISTS", "BA_REGULAR", "BA_DIRECTORY", "BA_HIDDEN", "ACCESS_READ", "ACCESS_WRITE", "ACCESS_EXECUTE", "ACCESS_OK", "SPACE_TOTAL", "SPACE_FREE", "SPACE_USABLE", "useCanonCaches", "useCanonPrefixCache" ]
}