{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/textclassifier/TextClassifier.java",
  "packageName" : "android.view.textclassifier",
  "className" : "Utils",
  "comment" : "\n     * Utility functions for TextClassifier methods.\n     *\n     * <ul>\n     *  <li>Provides validation of input parameters to TextClassifier methods\n     * </ul>\n     *\n     * Intended to be used only for TextClassifier purposes.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "WORD_ITERATOR",
    "type" : "BreakIterator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void checkArgument(@NonNull CharSequence text, int startIndex, int endIndex)",
    "returnType" : "void",
    "comment" : "\n         * @throws IllegalArgumentException if text is null; startIndex is negative;\n         *      endIndex is greater than text.length() or is not greater than startIndex;\n         *      options is null\n         ",
    "links" : [ ]
  }, {
    "name" : " static boolean checkTextLength(CharSequence text, int maxLength)",
    "returnType" : "boolean",
    "comment" : " Returns if the length of the text is within the range. ",
    "links" : [ ]
  }, {
    "name" : "public static String getSubString(String text, int start, int end, int minimumLength)",
    "returnType" : "String",
    "comment" : "\n         * Returns the substring of {@code text} that contains at least text from index\n         * {@code start} <i>(inclusive)</i> to index {@code end} <i><(exclusive)/i> with the goal of\n         * returning text that is at least {@code minimumLength}. If {@code text} is not long\n         * enough, this will return {@code text}. This method returns text at word boundaries.\n         *\n         * @param text the source text\n         * @param start the start index of text that must be included\n         * @param end the end index of text that must be included\n         * @param minimumLength minimum length of text to return if {@code text} is long enough\n         ",
    "links" : [ ]
  }, {
    "name" : "public static TextLinks generateLegacyLinks(@NonNull TextLinks.Request request)",
    "returnType" : "TextLinks",
    "comment" : "\n         * Generates links using legacy {@link Linkify}.\n         ",
    "links" : [ "android.text.util.Linkify" ]
  }, {
    "name" : "private static void addLinks(TextLinks.Builder links, String string, @EntityType String entityType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int linkMask(@EntityType String entityType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, Float> entityScores(@EntityType String entityType)",
    "returnType" : "Map<String, Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void checkMainThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static void checkArgument(@NonNull CharSequence text, int startIndex, int endIndex)", " static boolean checkTextLength(CharSequence text, int maxLength)", "public static String getSubString(String text, int start, int end, int minimumLength)", "public static TextLinks generateLegacyLinks(@NonNull TextLinks.Request request)", "private static void addLinks(TextLinks.Builder links, String string, @EntityType String entityType)", "private static int linkMask(@EntityType String entityType)", "private static Map<String, Float> entityScores(@EntityType String entityType)", " static void checkMainThread()" ],
  "variableNames" : [ "WORD_ITERATOR" ]
}