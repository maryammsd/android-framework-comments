{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/maintenance/IKeystoreMaintenance.java",
  "packageName" : "android.security.maintenance",
  "className" : "IKeystoreMaintenance",
  "comment" : "\n * IKeystoreMaintenance interface exposes the methods for adding/removing users and changing the\n * user's password.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DESCRIPTOR",
    "type" : "java.lang.String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onUserAdded(int userId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Allows LockSettingsService to inform keystore about adding a new user.\n   * Callers require 'ChangeUser' permission.\n   * \n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - if the callers do not have the 'ChangeUser' permission.\n   * `ResponseCode::SYSTEM_ERROR` - if failed to delete the keys of an existing user with the same\n   * user id.\n   * \n   * @param userId - Android user id\n   ",
    "links" : [ ]
  }, {
    "name" : "public void initUserSuperKeys(int userId, byte[] password, boolean allowExisting) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Allows LockSettingsService to tell Keystore to create a user's superencryption keys and store\n   * them encrypted by the given secret.  Requires 'ChangeUser' permission.\n   * \n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - if caller does not have the 'ChangeUser' permission\n   * `ResponseCode::SYSTEM_ERROR` - if failed to initialize the user's super keys\n   * \n   * @param userId - Android user id\n   * @param password - a secret derived from the synthetic password of the user\n   * @param allowExisting - if true, then the keys already existing is not considered an error\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onUserRemoved(int userId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Allows LockSettingsService to inform keystore about removing a user.\n   * Callers require 'ChangeUser' permission.\n   * \n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - if the callers do not have the 'ChangeUser' permission.\n   * `ResponseCode::SYSTEM_ERROR` - if failed to delete the keys of the user being deleted.\n   * \n   * @param userId - Android user id\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onUserLskfRemoved(int userId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Allows LockSettingsService to tell Keystore that a user's LSKF is being removed, ie the\n   * user's lock screen is changing to Swipe or None.  Requires 'ChangePassword' permission.\n   * \n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - if caller does not have the 'ChangePassword' permission\n   * `ResponseCode::SYSTEM_ERROR` - if failed to delete the user's auth-bound keys\n   * \n   * @param userId - Android user id\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onUserPasswordChanged(int userId, byte[] password) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Allows LockSettingsService to inform keystore about password change of a user.\n   * Callers require 'ChangePassword' permission.\n   * \n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - if the callers does not have the 'ChangePassword'\n   *                                     permission.\n   * `ResponseCode::SYSTEM_ERROR` - if failed to delete the super encrypted keys of the user.\n   * `ResponseCode::Locked' -  if the keystore is locked for the given user.\n   * \n   * @param userId - Android user id\n   * @param password - a secret derived from the synthetic password of the user\n   ",
    "links" : [ ]
  }, {
    "name" : "public void clearNamespace(int domain, long nspace) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This function deletes all keys within a namespace. It mainly gets called when an app gets\n   * removed and all resources of this app need to be cleaned up.\n   * \n   * @param domain - One of Domain.APP or Domain.SELINUX.\n   * @param nspace - The UID of the app that is to be cleared if domain is Domain.APP or\n   *                 the SEPolicy namespace if domain is Domain.SELINUX.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void earlyBootEnded() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This function notifies the Keymint device of the specified securityLevel that\n   * early boot has ended, so that they no longer allow early boot keys to be used.\n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - if the caller does not have the 'EarlyBootEnded'\n   *                                     permission.\n   * A KeyMint ErrorCode may be returned indicating a backend diagnosed error.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void migrateKeyNamespace(android.system.keystore2.KeyDescriptor source, android.system.keystore2.KeyDescriptor destination) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Migrate a key from one namespace to another. The caller must have use, grant, and delete\n   * permissions on the source namespace and rebind permissions on the destination namespace.\n   * The source may be specified by Domain::APP, Domain::SELINUX, or Domain::KEY_ID. The target\n   * may be specified by Domain::APP or Domain::SELINUX.\n   * \n   * ## Error conditions:\n   * `ResponseCode::PERMISSION_DENIED` - If the caller lacks any of the required permissions.\n   * `ResponseCode::KEY_NOT_FOUND` - If the source did not exist.\n   * `ResponseCode::INVALID_ARGUMENT` - If the target exists or if any of the above mentioned\n   *                                    requirements for the domain parameter are not met.\n   * `ResponseCode::SYSTEM_ERROR` - An unexpected system error occurred.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void deleteAllKeys() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Deletes all keys in all hardware keystores.  Used when keystore is reset completely.  After\n   * this function is called all keys with Tag::ROLLBACK_RESISTANCE in their hardware-enforced\n   * authorization lists must be rendered permanently unusable.  Keys without\n   * Tag::ROLLBACK_RESISTANCE may or may not be rendered unusable.\n   ",
    "links" : [ ]
  }, {
    "name" : "public long[] getAppUidsAffectedBySid(int userId, long sid) throws android.os.RemoteException",
    "returnType" : "long[]",
    "comment" : "\n   * Returns a list of App UIDs that have keys associated with the given SID, under the\n   * given user ID.\n   * When a given user's LSKF is removed or biometric authentication methods are changed\n   * (addition of a fingerprint, for example), authentication-bound keys may be invalidated.\n   * This method allows the platform to find out which apps would be affected (for a given user)\n   * when a given user secure ID is removed.\n   * Callers require the `android.permission.MANAGE_USERS` Android permission\n   * (not SELinux policy).\n   * \n   * @param userId The affected user.\n   * @param sid The user secure ID - identifier of the authentication method.\n   * \n   * @return A list of APP UIDs, in the form of (AID + userId*AID_USER_OFFSET), that have\n   *         keys auth-bound to the given SID. These values can be passed into the\n   *         PackageManager for resolution.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onUserAdded(int userId) throws android.os.RemoteException", "public void initUserSuperKeys(int userId, byte[] password, boolean allowExisting) throws android.os.RemoteException", "public void onUserRemoved(int userId) throws android.os.RemoteException", "public void onUserLskfRemoved(int userId) throws android.os.RemoteException", "public void onUserPasswordChanged(int userId, byte[] password) throws android.os.RemoteException", "public void clearNamespace(int domain, long nspace) throws android.os.RemoteException", "public void earlyBootEnded() throws android.os.RemoteException", "public void migrateKeyNamespace(android.system.keystore2.KeyDescriptor source, android.system.keystore2.KeyDescriptor destination) throws android.os.RemoteException", "public void deleteAllKeys() throws android.os.RemoteException", "public long[] getAppUidsAffectedBySid(int userId, long sid) throws android.os.RemoteException" ],
  "variableNames" : [ "DESCRIPTOR" ]
}