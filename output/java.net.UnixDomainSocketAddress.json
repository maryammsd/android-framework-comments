{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/UnixDomainSocketAddress.java",
  "packageName" : "java.net",
  "className" : "UnixDomainSocketAddress",
  "comment" : "\n * A Unix domain socket address.\n * A Unix domain socket address encapsulates a file-system path that Unix domain sockets\n * bind or connect to.\n *\n * <p> An <a id=\"unnamed\"></a><i>unnamed</i> {@code UnixDomainSocketAddress} has\n * an empty path. The local address of a {@link SocketChannel} to a Unix domain socket\n * that is <i>automatically</i> or <i>implicitly</i> bound will be unnamed.\n *\n * <p> {@link Path} objects used to create instances of this class must be obtained\n * from the {@linkplain FileSystems#getDefault system-default} file system.\n *\n * @see java.nio.channels.SocketChannel\n * @see java.nio.channels.ServerSocketChannel\n * @since 16\n * @hide\n ",
  "links" : [ "java.nio.channels.SocketChannel", "java.nio.file.Path" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Object writeReplace() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "\n     * Returns a\n     * <a href=\"{@docRoot}/serialized-form.html#java.net.UnixDomainSocketAddress.Ser\">\n     * Ser</a> containing the path name of this instance.\n     *\n     * @return a {@link Ser} representing the path name of this instance\n     *\n     * @throws ObjectStreamException if an error occurs\n     ",
    "links" : [ "Ser" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Throws InvalidObjectException, always.\n     * @param s the stream\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObjectNoData() throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Throws InvalidObjectException, always.\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UnixDomainSocketAddress of(String pathname)",
    "returnType" : "UnixDomainSocketAddress",
    "comment" : "\n     * Creates a UnixDomainSocketAddress from the given path string.\n     *\n     * @param  pathname\n     *         The path string, which can be empty\n     *\n     * @return A UnixDomainSocketAddress\n     *\n     * @throws InvalidPathException\n     *         If the path cannot be converted to a Path\n     *\n     * @throws NullPointerException if pathname is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UnixDomainSocketAddress of(Path path)",
    "returnType" : "UnixDomainSocketAddress",
    "comment" : "\n     * Creates a UnixDomainSocketAddress for the given path.\n     *\n     * @param  path\n     *         The path to the socket, which can be empty\n     *\n     * @return A UnixDomainSocketAddress\n     *\n     * @throws IllegalArgumentException\n     *         If the path is not associated with the default file system\n     *\n     * @throws NullPointerException if path is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Path getPath()",
    "returnType" : "Path",
    "comment" : "\n     * Returns this address's path.\n     *\n     * @return this address's path\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code of this {@code UnixDomainSocketAddress}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this address with another object.\n     *\n     * @return true if the path fields are equal\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this {@code UnixDomainSocketAddress}.\n     *\n     * @return this address's path which may be empty for an unnamed address\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private Object writeReplace() throws ObjectStreamException", "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException", "private void readObjectNoData() throws java.io.InvalidObjectException", "public static UnixDomainSocketAddress of(String pathname)", "public static UnixDomainSocketAddress of(Path path)", "public Path getPath()", "public int hashCode()", "public boolean equals(Object o)", "public String toString()" ],
  "variableNames" : [ "serialVersionUID", "path" ]
}