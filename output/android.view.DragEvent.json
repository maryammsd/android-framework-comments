{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/DragEvent.java",
  "packageName" : "android.view",
  "className" : "DragEvent",
  "comment" : "\n * Represents an event that is sent out by the system at various times during a drag and drop\n * operation. It is a data structure that contains several important pieces of data about\n * the operation and the underlying data.\n * <p>\n *  View objects that receive a DragEvent call {@link #getAction()}, which returns\n *  an action type that indicates the state of the drag and drop operation. This allows a View\n *  object to react to a change in state by changing its appearance or performing other actions.\n *  For example, a View can react to the {@link #ACTION_DRAG_ENTERED} action type by\n *  by changing one or more colors in its displayed image.\n * </p>\n * <p>\n *  During a drag and drop operation, the system displays an image that the user drags. This image\n *  is called a drag shadow. Several action types reflect the position of the drag shadow relative\n *  to the View receiving the event.\n * </p>\n * <p>\n *  Most methods return valid data only for certain event actions. This is summarized in the\n *  following table. Each possible {@link #getAction()} value is listed in the first column. The\n *  other columns indicate which method or methods return valid data for that getAction() value:\n * </p>\n * <table>\n *  <tr>\n *      <th scope=\"col\">getAction() Value</th>\n *      <th scope=\"col\">getClipDescription()</th>\n *      <th scope=\"col\">getLocalState()</th>\n *      <th scope=\"col\">getX()</th>\n *      <th scope=\"col\">getY()</th>\n *      <th scope=\"col\">getClipData()</th>\n *      <th scope=\"col\">getResult()</th>\n *  </tr>\n *  <tr>\n *      <td>ACTION_DRAG_STARTED</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *  </tr>\n *  <tr>\n *      <td>ACTION_DRAG_ENTERED</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *  </tr>\n *  <tr>\n *      <td>ACTION_DRAG_LOCATION</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *  </tr>\n *  <tr>\n *      <td>ACTION_DRAG_EXITED</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *  </tr>\n *  <tr>\n *      <td>ACTION_DROP</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *  </tr>\n *  <tr>\n *      <td>ACTION_DRAG_ENDED</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">X</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">&nbsp;</td>\n *      <td style=\"text-align: center;\">X</td>\n *  </tr>\n * </table>\n * <p>\n *  The {@link android.view.DragEvent#getAction()},\n *  {@link android.view.DragEvent#getLocalState()}\n *  {@link android.view.DragEvent#describeContents()},\n *  {@link android.view.DragEvent#writeToParcel(Parcel,int)}, and\n *  {@link android.view.DragEvent#toString()} methods always return valid data.\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For a guide to implementing drag and drop features, read the\n * <a href=\"{@docRoot}guide/topics/ui/drag-drop.html\">Drag and Drop</a> developer guide.</p>\n * </div>\n ",
  "links" : [ "android.view.DragEvent#describeContents()", "android.view.DragEvent#writeToParcel(Parcel", "#getAction()", "android.view.DragEvent#toString()", "#ACTION_DRAG_ENTERED", "android.view.DragEvent#getAction()", "android.view.DragEvent#getLocalState()" ],
  "variables" : [ {
    "name" : "TRACK_RECYCLED_LOCATION",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipDescription",
    "type" : "ClipDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDragAndDropPermissions",
    "type" : "IDragAndDropPermissions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalState",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDragResult",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventHandlerWasCalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDragSurface",
    "type" : "SurfaceControl",
    "comment" : "\n     * The drag surface containing the object being dragged. Only provided if the target window\n     * has the {@link WindowManager.LayoutParams#PRIVATE_FLAG_INTERCEPT_GLOBAL_DRAG_AND_DROP} flag\n     * and is only sent with {@link #ACTION_DROP}.\n     ",
    "links" : [ "WindowManager.LayoutParams#PRIVATE_FLAG_INTERCEPT_GLOBAL_DRAG_AND_DROP", "#ACTION_DROP" ]
  }, {
    "name" : "mOffsetX",
    "type" : "float",
    "comment" : "\n     * The offsets from the touch that the surface is adjusted by as the surface is moved around the\n     * screen. Necessary for the target using the drag surface to animate it properly once it takes\n     * ownership of the drag surface after the drop.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOffsetY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNext",
    "type" : "DragEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycledLocation",
    "type" : "RuntimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_RECYCLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerUsed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerTop",
    "type" : "DragEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_DRAG_STARTED",
    "type" : "int",
    "comment" : "\n     * Action constant returned by {@link #getAction()}: Signals the start of a\n     * drag and drop operation. The View should return {@code true} from its\n     * {@link View#onDragEvent(DragEvent) onDragEvent()} handler method or\n     * {@link View.OnDragListener#onDrag(View,DragEvent) OnDragListener.onDrag()} listener\n     * if it can accept a drop. The onDragEvent() or onDrag() methods usually inspect the metadata\n     * from {@link #getClipDescription()} to determine if they can accept the data contained in\n     * this drag. For an operation that doesn't represent data transfer, these methods may\n     * perform other actions to determine whether or not the View should accept the data.\n     * If the View wants to indicate that it is a valid drop target, it can also react by\n     * changing its appearance.\n     * <p>\n     *  Views added or becoming visible for the first time during a drag operation receive this\n     *  event when they are added or becoming visible.\n     * </p>\n     * <p>\n     *  A View only receives further drag events for the drag operation if it returns {@code true}\n     *  in response to ACTION_DRAG_STARTED.\n     * </p>\n     * @see #ACTION_DRAG_ENDED\n     * @see #getX()\n     * @see #getY()\n     ",
    "links" : [ "#getAction()", "android.view.View#onDragEvent(DragEvent)", "#getClipDescription()", "View.OnDragListener#onDrag(View" ]
  }, {
    "name" : "ACTION_DRAG_LOCATION",
    "type" : "int",
    "comment" : "\n     * Action constant returned by {@link #getAction()}: Sent to a View after\n     * {@link #ACTION_DRAG_ENTERED} while the drag shadow is still within the View object's bounding\n     * box, but not within a descendant view that can accept the data. The {@link #getX()} and\n     * {@link #getY()} methods supply\n     * the X and Y position of the drag point within the View object's bounding box.\n     * <p>\n     * A View receives an {@link #ACTION_DRAG_ENTERED} event before receiving any\n     * ACTION_DRAG_LOCATION events.\n     * </p>\n     * <p>\n     * The system stops sending ACTION_DRAG_LOCATION events to a View once the user moves the\n     * drag shadow out of the View object's bounding box or into a descendant view that can accept\n     * the data. If the user moves the drag shadow back into the View object's bounding box or out\n     * of a descendant view that can accept the data, the View receives an ACTION_DRAG_ENTERED again\n     * before receiving any more ACTION_DRAG_LOCATION events.\n     * </p>\n     * @see #ACTION_DRAG_ENTERED\n     * @see #getX()\n     * @see #getY()\n     ",
    "links" : [ "#getX()", "#getY()", "#getAction()", "#ACTION_DRAG_ENTERED" ]
  }, {
    "name" : "ACTION_DROP",
    "type" : "int",
    "comment" : "\n     * Action constant returned by {@link #getAction()}: Signals to a View that the user\n     * has released the drag shadow, and the drag point is within the bounding box of the View and\n     * not within a descendant view that can accept the data.\n     * The View should retrieve the data from the DragEvent by calling {@link #getClipData()}.\n     * The methods {@link #getX()} and {@link #getY()} return the X and Y position of the drop point\n     * within the View object's bounding box.\n     * <p>\n     * The View should return {@code true} from its {@link View#onDragEvent(DragEvent)}\n     * handler or {@link View.OnDragListener#onDrag(View,DragEvent) OnDragListener.onDrag()}\n     * listener if it accepted the drop, and {@code false} if it ignored the drop.\n     * </p>\n     * <p>\n     * The View can also react to this action by changing its appearance.\n     * </p>\n     * @see #getClipData()\n     * @see #getX()\n     * @see #getY()\n     ",
    "links" : [ "#getX()", "#getY()", "#getAction()", "android.view.View#onDragEvent(DragEvent)", "#getClipData()", "View.OnDragListener#onDrag(View" ]
  }, {
    "name" : "ACTION_DRAG_ENDED",
    "type" : "int",
    "comment" : "\n     * Action constant returned by {@link #getAction()}:  Signals to a View that the drag and drop\n     * operation has concluded.  A View that changed its appearance during the operation should\n     * return to its usual drawing state in response to this event.\n     * <p>\n     *  All views with listeners that returned boolean <code>true</code> for the ACTION_DRAG_STARTED\n     *  event will receive the ACTION_DRAG_ENDED event even if they are not currently visible when\n     *  the drag ends. Views removed during the drag operation won't receive the ACTION_DRAG_ENDED\n     *  event.\n     * </p>\n     * <p>\n     *  The View object can call {@link #getResult()} to see the result of the operation.\n     *  If a View returned {@code true} in response to {@link #ACTION_DROP}, then\n     *  getResult() returns {@code true}, otherwise it returns {@code false}.\n     * </p>\n     * @see #ACTION_DRAG_STARTED\n     * @see #getResult()\n     ",
    "links" : [ "#getResult()", "#getAction()", "#ACTION_DROP" ]
  }, {
    "name" : "ACTION_DRAG_ENTERED",
    "type" : "int",
    "comment" : "\n     * Action constant returned by {@link #getAction()}: Signals to a View that the drag point has\n     * entered the bounding box of the View.\n     * <p>\n     *  If the View can accept a drop, it can react to ACTION_DRAG_ENTERED\n     *  by changing its appearance in a way that tells the user that the View is the current\n     *  drop target.\n     * </p>\n     * The system stops sending ACTION_DRAG_LOCATION events to a View once the user moves the\n     * drag shadow out of the View object's bounding box or into a descendant view that can accept\n     * the data. If the user moves the drag shadow back into the View object's bounding box or out\n     * of a descendant view that can accept the data, the View receives an ACTION_DRAG_ENTERED again\n     * before receiving any more ACTION_DRAG_LOCATION events.\n     * </p>\n     * @see #ACTION_DRAG_ENTERED\n     * @see #ACTION_DRAG_LOCATION\n     ",
    "links" : [ "#getAction()" ]
  }, {
    "name" : "ACTION_DRAG_EXITED",
    "type" : "int",
    "comment" : "\n     * Action constant returned by {@link #getAction()}: Signals that the user has moved the\n     * drag shadow out of the bounding box of the View or into a descendant view that can accept\n     * the data.\n     * The View can react by changing its appearance in a way that tells the user that\n     * View is no longer the immediate drop target.\n     * <p>\n     *  After the system sends an ACTION_DRAG_EXITED event to the View, the View receives no more\n     *  ACTION_DRAG_LOCATION events until the user drags the drag shadow back over the View.\n     * </p>\n     *\n     ",
    "links" : [ "#getAction()" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<DragEvent>",
    "comment" : "\n     * A container for creating a DragEvent from a Parcel.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(int action, float x, float y, float offsetX, float offsetY, ClipDescription description, ClipData data, SurfaceControl dragSurface, IDragAndDropPermissions dragAndDropPermissions, Object localState, boolean result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static DragEvent obtain()",
    "returnType" : "DragEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static DragEvent obtain(int action, float x, float y, float offsetX, float offsetY, Object localState, ClipDescription description, ClipData data, SurfaceControl dragSurface, IDragAndDropPermissions dragAndDropPermissions, boolean result)",
    "returnType" : "DragEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static DragEvent obtain(DragEvent source)",
    "returnType" : "DragEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getAction()",
    "returnType" : "int",
    "comment" : "\n     * Inspect the action value of this event.\n     * @return One of the following action constants, in the order in which they usually occur\n     * during a drag and drop operation:\n     * <ul>\n     *  <li>{@link #ACTION_DRAG_STARTED}</li>\n     *  <li>{@link #ACTION_DRAG_ENTERED}</li>\n     *  <li>{@link #ACTION_DRAG_LOCATION}</li>\n     *  <li>{@link #ACTION_DROP}</li>\n     *  <li>{@link #ACTION_DRAG_EXITED}</li>\n     *  <li>{@link #ACTION_DRAG_ENDED}</li>\n     * </ul>\n     ",
    "links" : [ "#ACTION_DRAG_EXITED", "#ACTION_DRAG_ENDED", "#ACTION_DRAG_ENTERED", "#ACTION_DRAG_STARTED", "#ACTION_DRAG_LOCATION", "#ACTION_DROP" ]
  }, {
    "name" : "public float getX()",
    "returnType" : "float",
    "comment" : "\n     * Gets the X coordinate of the drag point. The value is only valid if the event action is\n     * {@link #ACTION_DRAG_STARTED}, {@link #ACTION_DRAG_LOCATION} or {@link #ACTION_DROP}.\n     * @return The current drag point's X coordinate\n     ",
    "links" : [ "#ACTION_DRAG_STARTED", "#ACTION_DRAG_LOCATION", "#ACTION_DROP" ]
  }, {
    "name" : "public float getY()",
    "returnType" : "float",
    "comment" : "\n     * Gets the Y coordinate of the drag point. The value is only valid if the event action is\n     * {@link #ACTION_DRAG_STARTED}, {@link #ACTION_DRAG_LOCATION} or {@link #ACTION_DROP}.\n     * @return The current drag point's Y coordinate\n     ",
    "links" : [ "#ACTION_DRAG_STARTED", "#ACTION_DRAG_LOCATION", "#ACTION_DROP" ]
  }, {
    "name" : "public float getOffsetX()",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public float getOffsetY()",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ClipData getClipData()",
    "returnType" : "ClipData",
    "comment" : "\n     * Returns the {@link android.content.ClipData} object sent to the system as part of the call\n     * to\n     * {@link android.view.View#startDragAndDrop(ClipData,View.DragShadowBuilder,Object,int)\n     * startDragAndDrop()}.\n     * This method only returns valid data if the event action is {@link #ACTION_DROP}.\n     * @return The ClipData sent to the system by startDragAndDrop().\n     ",
    "links" : [ "android.content.ClipData", "#ACTION_DROP", "android.view.View#startDragAndDrop(ClipData" ]
  }, {
    "name" : "public ClipDescription getClipDescription()",
    "returnType" : "ClipDescription",
    "comment" : "\n     * Returns the {@link android.content.ClipDescription} object contained in the\n     * {@link android.content.ClipData} object sent to the system as part of the call to\n     * {@link android.view.View#startDragAndDrop(ClipData,View.DragShadowBuilder,Object,int)\n     * startDragAndDrop()}.\n     * The drag handler or listener for a View can use the metadata in this object to decide if the\n     * View can accept the dragged View object's data.\n     * <p>\n     * This method returns valid data for all event actions except for {@link #ACTION_DRAG_ENDED}.\n     * @return The ClipDescription that was part of the ClipData sent to the system by\n     *     startDragAndDrop().\n     ",
    "links" : [ "android.content.ClipData", "#ACTION_DRAG_ENDED", "android.content.ClipDescription", "android.view.View#startDragAndDrop(ClipData" ]
  }, {
    "name" : "public SurfaceControl getDragSurface()",
    "returnType" : "SurfaceControl",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IDragAndDropPermissions getDragAndDropPermissions()",
    "returnType" : "IDragAndDropPermissions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Object getLocalState()",
    "returnType" : "Object",
    "comment" : "\n     * Returns the local state object sent to the system as part of the call to\n     * {@link android.view.View#startDragAndDrop(ClipData,View.DragShadowBuilder,Object,int)\n     * startDragAndDrop()}.\n     * The object is intended to provide local information about the drag and drop operation. For\n     * example, it can indicate whether the drag and drop operation is a copy or a move.\n     * <p>\n     * The local state is available only to views in the activity which has started the drag\n     * operation. In all other activities this method will return null\n     * </p>\n     * <p>\n     *  This method returns valid data for all event actions.\n     * </p>\n     * @return The local state object sent to the system by startDragAndDrop().\n     ",
    "links" : [ "android.view.View#startDragAndDrop(ClipData" ]
  }, {
    "name" : "public boolean getResult()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>\n     * Returns an indication of the result of the drag and drop operation.\n     * This method only returns valid data if the action type is {@link #ACTION_DRAG_ENDED}.\n     * The return value depends on what happens after the user releases the drag shadow.\n     * </p>\n     * <p>\n     * If the user releases the drag shadow on a View that can accept a drop, the system sends an\n     * {@link #ACTION_DROP} event to the View object's drag event listener. If the listener\n     * returns {@code true}, then getResult() will return {@code true}.\n     * If the listener returns {@code false}, then getResult() returns {@code false}.\n     * </p>\n     * <p>\n     * Notice that getResult() also returns {@code false} if no {@link #ACTION_DROP} is sent. This\n     * happens, for example, when the user releases the drag shadow over an area outside of the\n     * application. In this case, the system sends out {@link #ACTION_DRAG_ENDED} for the current\n     * operation, but never sends out {@link #ACTION_DROP}.\n     * </p>\n     * @return {@code true} if a drag event listener returned {@code true} in response to\n     * {@link #ACTION_DROP}. If the system did not send {@link #ACTION_DROP} before\n     * {@link #ACTION_DRAG_ENDED}, or if the listener returned {@code false} in response to\n     * {@link #ACTION_DROP}, then {@code false} is returned.\n     ",
    "links" : [ "#ACTION_DRAG_ENDED", "#ACTION_DROP" ]
  }, {
    "name" : "public final void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycle the DragEvent, to be re-used by a later caller.  After calling\n     * this function you must never touch the event again.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String actionToString(int action)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified unmasked action\n     * such as \"ACTION_DRAG_START\", \"ACTION_DRAG_END\" or an equivalent numeric constant\n     * such as \"35\" if unknown.\n     *\n     * @param action The action.\n     * @return The symbolic name of the specified action.\n     * @see #getAction()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string containing a concise, human-readable representation of this DragEvent\n     * object.\n     * @return A string representation of the DragEvent object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Returns information about the {@link android.os.Parcel} representation of this DragEvent\n     * object.\n     * @return Information about the {@link android.os.Parcel} representation.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Creates a {@link android.os.Parcel} object from this DragEvent object.\n     * @param dest A {@link android.os.Parcel} object in which to put the DragEvent object.\n     * @param flags Flags to store in the Parcel.\n     ",
    "links" : [ "android.os.Parcel" ]
  } ],
  "methodNames" : [ "private void init(int action, float x, float y, float offsetX, float offsetY, ClipDescription description, ClipData data, SurfaceControl dragSurface, IDragAndDropPermissions dragAndDropPermissions, Object localState, boolean result)", " static DragEvent obtain()", "public static DragEvent obtain(int action, float x, float y, float offsetX, float offsetY, Object localState, ClipDescription description, ClipData data, SurfaceControl dragSurface, IDragAndDropPermissions dragAndDropPermissions, boolean result)", "public static DragEvent obtain(DragEvent source)", "public int getAction()", "public float getX()", "public float getY()", "public float getOffsetX()", "public float getOffsetY()", "public ClipData getClipData()", "public ClipDescription getClipDescription()", "public SurfaceControl getDragSurface()", "public IDragAndDropPermissions getDragAndDropPermissions()", "public Object getLocalState()", "public boolean getResult()", "public final void recycle()", "public static String actionToString(int action)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TRACK_RECYCLED_LOCATION", "mAction", "mX", "mY", "mClipDescription", "mClipData", "mDragAndDropPermissions", "mLocalState", "mDragResult", "mEventHandlerWasCalled", "mDragSurface", "mOffsetX", "mOffsetY", "mNext", "mRecycledLocation", "mRecycled", "MAX_RECYCLED", "gRecyclerLock", "gRecyclerUsed", "gRecyclerTop", "ACTION_DRAG_STARTED", "ACTION_DRAG_LOCATION", "ACTION_DROP", "ACTION_DRAG_ENDED", "ACTION_DRAG_ENTERED", "ACTION_DRAG_EXITED", "CREATOR" ]
}