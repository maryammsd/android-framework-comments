{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/Contacts.java",
  "packageName" : "android.provider",
  "className" : "People",
  "comment" : "\n     * This table contains people.\n     * @deprecated see {@link android.provider.ContactsContract}\n     ",
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for this table\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for filtering people by name. The filter\n         * argument should be passed as an additional path segment after this URI.\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "DELETED_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for the table that holds the deleted\n         * contacts.\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "WITH_EMAIL_OR_IM_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for filtering people that have a specific\n         * E-mail or IM address. The filter argument should be passed as an\n         * additional path segment after this URI. This matches any people with\n         * at least one E-mail or IM {@link ContactMethods} that match the\n         * filter.\n         *\n         * Not exposed because we expect significant changes in the contacts\n         * schema and do not want to have to support this.\n         * @hide\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "ContactMethods", "android.provider.ContactsContract" ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of {@link #CONTENT_URI} providing a directory of\n         * people.\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "#CONTENT_URI", "android.provider.ContactsContract" ]
  }, {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single\n         * person.\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "#CONTENT_URI", "android.provider.ContactsContract" ]
  }, {
    "name" : "DEFAULT_SORT_ORDER",
    "type" : "String",
    "comment" : "\n         * The default sort order for this table\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "PRIMARY_PHONE_ID",
    "type" : "String",
    "comment" : "\n         * The ID of the persons preferred phone number.\n         * <P>Type: INTEGER (foreign key to phones table on the _ID field)</P>\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "PRIMARY_EMAIL_ID",
    "type" : "String",
    "comment" : "\n         * The ID of the persons preferred email.\n         * <P>Type: INTEGER (foreign key to contact_methods table on the\n         * _ID field)</P>\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "PRIMARY_ORGANIZATION_ID",
    "type" : "String",
    "comment" : "\n         * The ID of the persons preferred organization.\n         * <P>Type: INTEGER (foreign key to organizations table on the\n         * _ID field)</P>\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "GROUPS_PROJECTION",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void markAsContacted(ContentResolver resolver, long personId)",
    "returnType" : "void",
    "comment" : "\n         * This API is no longer supported as of O.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static long tryGetMyContactsGroupId(ContentResolver resolver)",
    "returnType" : "long",
    "comment" : "\n         * @hide Used in vCard parser code.\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static Uri addToMyContactsGroup(ContentResolver resolver, long personId)",
    "returnType" : "Uri",
    "comment" : "\n         * Adds a person to the My Contacts group.\n         *\n         * @param resolver the resolver to use\n         * @param personId the person to add to the group\n         * @return the URI of the group membership row\n         * @throws IllegalStateException if the My Contacts group can't be found\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static Uri addToGroup(ContentResolver resolver, long personId, String groupName)",
    "returnType" : "Uri",
    "comment" : "\n         * Adds a person to a group referred to by name.\n         *\n         * @param resolver the resolver to use\n         * @param personId the person to add to the group\n         * @param groupName the name of the group to add the contact to\n         * @return the URI of the group membership row\n         * @throws IllegalStateException if the group can't be found\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static Uri addToGroup(ContentResolver resolver, long personId, long groupId)",
    "returnType" : "Uri",
    "comment" : "\n         * Adds a person to a group.\n         *\n         * @param resolver the resolver to use\n         * @param personId the person to add to the group\n         * @param groupId the group to add the person to\n         * @return the URI of the group membership row\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static Uri createPersonInMyContactsGroup(ContentResolver resolver, ContentValues values)",
    "returnType" : "Uri",
    "comment" : "\n         * Creates a new contacts and adds it to the \"My Contacts\" group.\n         *\n         * @param resolver the ContentResolver to use\n         * @param values the values to use when creating the contact\n         * @return the URI of the contact, or null if the operation fails\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static Cursor queryGroups(ContentResolver resolver, long person)",
    "returnType" : "Cursor",
    "comment" : "\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static void setPhotoData(ContentResolver cr, Uri person, byte[] data)",
    "returnType" : "void",
    "comment" : "\n         * Set the photo for this person. data may be null\n         * @param cr the ContentResolver to use\n         * @param person the Uri of the person whose photo is to be updated\n         * @param data the byte[] that represents the photo\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static InputStream openContactPhotoInputStream(ContentResolver cr, Uri person)",
    "returnType" : "InputStream",
    "comment" : "\n         * Opens an InputStream for the person's photo and returns the photo as a Bitmap.\n         * If the person's photo isn't present returns the placeholderImageResource instead.\n         * @param person the person whose photo should be used\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "public static Bitmap loadContactPhoto(Context context, Uri person, int placeholderImageResource, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "\n         * Opens an InputStream for the person's photo and returns the photo as a Bitmap.\n         * If the person's photo isn't present returns the placeholderImageResource instead.\n         * @param context the Context\n         * @param person the person whose photo should be used\n         * @param placeholderImageResource the image resource to use if the person doesn't\n         *   have a photo\n         * @param options the decoding options, can be set to null\n         * @deprecated see {@link android.provider.ContactsContract}\n         ",
    "links" : [ "android.provider.ContactsContract" ]
  }, {
    "name" : "private static Bitmap loadPlaceholderPhoto(int placeholderImageResource, Context context, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "CONTENT_URI", "CONTENT_FILTER_URI", "DELETED_CONTENT_URI", "WITH_EMAIL_OR_IM_FILTER_URI", "CONTENT_TYPE", "CONTENT_ITEM_TYPE", "DEFAULT_SORT_ORDER", "PRIMARY_PHONE_ID", "PRIMARY_EMAIL_ID", "PRIMARY_ORGANIZATION_ID", "GROUPS_PROJECTION" ],
  "methodNames" : [ "public static void markAsContacted(ContentResolver resolver, long personId)", "public static long tryGetMyContactsGroupId(ContentResolver resolver)", "public static Uri addToMyContactsGroup(ContentResolver resolver, long personId)", "public static Uri addToGroup(ContentResolver resolver, long personId, String groupName)", "public static Uri addToGroup(ContentResolver resolver, long personId, long groupId)", "public static Uri createPersonInMyContactsGroup(ContentResolver resolver, ContentValues values)", "public static Cursor queryGroups(ContentResolver resolver, long person)", "public static void setPhotoData(ContentResolver cr, Uri person, byte[] data)", "public static InputStream openContactPhotoInputStream(ContentResolver cr, Uri person)", "public static Bitmap loadContactPhoto(Context context, Uri person, int placeholderImageResource, BitmapFactory.Options options)", "private static Bitmap loadPlaceholderPhoto(int placeholderImageResource, Context context, BitmapFactory.Options options)" ]
}