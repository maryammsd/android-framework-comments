{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/sdksandbox/SdkSandboxLocalSingleton.java",
  "packageName" : "android.app.sdksandbox",
  "className" : "SdkSandboxLocalSingleton",
  "comment" : "\n * Singleton for a privacy sandbox, which is initialised when the sandbox is created.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "SdkSandboxLocalSingleton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSdkToServiceCallback",
    "type" : "ISdkToServiceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSdkSandboxClientImportanceListeners",
    "type" : "ArrayList<SdkSandboxClientImportanceListenerProxy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized void initInstance(@NonNull IBinder sdkToServiceBinder)",
    "returnType" : "void",
    "comment" : "\n     * Returns a singleton instance of this class. TODO(b/247313241): Fix parameter once aidl issues\n     * are fixed.\n     *\n     * @param sdkToServiceBinder callback to support communication with the {@link\n     *     com.android.server.sdksandbox.SdkSandboxManagerService}\n     * @throws IllegalStateException if singleton is already initialised\n     * @throws UnsupportedOperationException if the interface passed is not of type {@link\n     *     ISdkToServiceCallback}\n     ",
    "links" : [ "com.android.server.sdksandbox.SdkSandboxManagerService", "ISdkToServiceCallback" ]
  }, {
    "name" : "public static SdkSandboxLocalSingleton getExistingInstance()",
    "returnType" : "SdkSandboxLocalSingleton",
    "comment" : " Returns an already initialised singleton instance of this class. ",
    "links" : [ ]
  }, {
    "name" : "public static void destroySingleton()",
    "returnType" : "void",
    "comment" : " To reset the singleton. Only for Testing. ",
    "links" : [ ]
  }, {
    "name" : "public ISdkToServiceCallback getSdkToServiceCallback()",
    "returnType" : "ISdkToServiceCallback",
    "comment" : " Gets the callback to the {@link com.android.server.sdksandbox.SdkSandboxManagerService} ",
    "links" : [ "com.android.server.sdksandbox.SdkSandboxManagerService" ]
  }, {
    "name" : "public void registerSdkSandboxClientImportanceListener(@NonNull SdkSandboxClientImportanceListenerProxy listener)",
    "returnType" : "void",
    "comment" : " Registers a listener to listen to client app foreground state change. ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSdkSandboxClientImportanceListener(@NonNull SdkSandboxClientImportanceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener previously registered using {@link\n     * SdkSandboxLocalSingleton#registerSdkSandboxClientImportanceListener(\n     * SdkSandboxClientImportanceListenerProxy)}.\n     ",
    "links" : [ "android.app.sdksandbox.SdkSandboxLocalSingleton#registerSdkSandboxClientImportanceListener(" ]
  }, {
    "name" : "public void notifySdkSandboxClientImportanceChange(boolean isForeground)",
    "returnType" : "void",
    "comment" : "\n     * Notifies all listeners registered using {@link\n     * SdkSandboxLocalSingleton#registerSdkSandboxClientImportanceListener(\n     * SdkSandboxClientImportanceListenerProxy)} about a client's foreground state change.\n     ",
    "links" : [ "android.app.sdksandbox.SdkSandboxLocalSingleton#registerSdkSandboxClientImportanceListener(" ]
  } ],
  "methodNames" : [ "public static synchronized void initInstance(@NonNull IBinder sdkToServiceBinder)", "public static SdkSandboxLocalSingleton getExistingInstance()", "public static void destroySingleton()", "public ISdkToServiceCallback getSdkToServiceCallback()", "public void registerSdkSandboxClientImportanceListener(@NonNull SdkSandboxClientImportanceListenerProxy listener)", "public void unregisterSdkSandboxClientImportanceListener(@NonNull SdkSandboxClientImportanceListener listener)", "public void notifySdkSandboxClientImportanceChange(boolean isForeground)" ],
  "variableNames" : [ "TAG", "sInstance", "mSdkToServiceCallback", "mLock", "mSdkSandboxClientImportanceListeners" ]
}