{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/WindowInsetsAnimation.java",
  "packageName" : "android.view",
  "className" : "WindowInsetsAnimation",
  "comment" : "\n * Class representing an animation of a set of windows that cause insets.\n ",
  "variables" : [ {
    "name" : "mTypeMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFraction",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getTypeMask()",
    "returnType" : "int",
    "comment" : "\n     * @return The bitmask of {@link WindowInsets.Type.InsetsType}s that are animating.\n     ",
    "links" : [ "WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "public float getFraction()",
    "returnType" : "float",
    "comment" : "\n     * Returns the raw fractional progress of this animation between\n     * start state of the animation and the end state of the animation. Note\n     * that this progress is the global progress of the animation, whereas\n     * {@link Callback#onProgress} will only dispatch the insets that may\n     * be inset with {@link WindowInsets#inset} by parents of views in the hierarchy.\n     * Progress per insets animation is global for the entire animation. One animation animates\n     * all things together (in, out, ...). If they don't animate together, we'd have\n     * multiple animations.\n     * <p>\n     * Note: In case the application is controlling the animation, the valued returned here will\n     * be the same as the application passed into\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)}.\n     * </p>\n     * @return The current progress of this animation.\n     ",
    "links" : [ "Callback#onProgress", "WindowInsets#inset", "WindowInsetsAnimationController#setInsetsAndAlpha" ]
  }, {
    "name" : "public float getInterpolatedFraction()",
    "returnType" : "float",
    "comment" : "\n     * Returns the interpolated fractional progress of this animation between\n     * start state of the animation and the end state of the animation. Note\n     * that this progress is the global progress of the animation, whereas\n     * {@link Callback#onProgress} will only dispatch the insets that may\n     * be inset with {@link WindowInsets#inset} by parents of views in the hierarchy.\n     * Progress per insets animation is global for the entire animation. One animation animates\n     * all things together (in, out, ...). If they don't animate together, we'd have\n     * multiple animations.\n     * <p>\n     * Note: In case the application is controlling the animation, the valued returned here will\n     * be the same as the application passed into\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)},\n     * interpolated with the interpolator passed into\n     * {@link WindowInsetsController#controlWindowInsetsAnimation}.\n     * </p>\n     * <p>\n     * Note: For system-initiated animations, this will always return a valid value between 0\n     * and 1.\n     * </p>\n     * @see #getFraction() for raw fraction.\n     * @return The current interpolated progress of this animation.\n     ",
    "links" : [ "Callback#onProgress", "WindowInsets#inset", "WindowInsetsAnimationController#setInsetsAndAlpha", "WindowInsetsController#controlWindowInsetsAnimation" ]
  }, {
    "name" : "public Interpolator getInterpolator()",
    "returnType" : "Interpolator",
    "comment" : "\n     * Retrieves the interpolator used for this animation, or {@code null} if this animation\n     * doesn't follow an interpolation curved. For system-initiated animations, this will never\n     * return {@code null}.\n     *\n     * @return The interpolator used for this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDurationMillis()",
    "returnType" : "long",
    "comment" : "\n     * @return duration of animation in {@link java.util.concurrent.TimeUnit#MILLISECONDS}, or\n     *         -1 if the animation doesn't have a fixed duration.\n     ",
    "links" : [ "java.util.concurrent.TimeUnit#MILLISECONDS" ]
  }, {
    "name" : "public void setFraction(@FloatRange(from = 0f, to = 1f) float fraction)",
    "returnType" : "void",
    "comment" : "\n     * Set fraction of the progress if {@link WindowInsets.Type.InsetsType} animation is\n     * controlled by the app.\n     * <p>\n     * Note: This should only be used for testing, as the system fills in the fraction for the\n     * application or the fraction that was passed into\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)} is being\n     * used.\n     * </p>\n     * @param fraction fractional progress between 0 and 1 where 0 represents hidden and\n     *                zero progress and 1 represent fully shown final state.\n     * @see #getFraction()\n     ",
    "links" : [ "WindowInsets.Type.InsetsType", "WindowInsetsAnimationController#setInsetsAndAlpha" ]
  }, {
    "name" : "public float getAlpha()",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the translucency of the windows that are animating.\n     *\n     * @return Alpha of windows that cause insets of type {@link WindowInsets.Type.InsetsType}.\n     ",
    "links" : [ "WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "public void setAlpha(@FloatRange(from = 0f, to = 1f) float alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the translucency of the windows that are animating.\n     * <p>\n     * Note: This should only be used for testing, as the system fills in the alpha for the\n     * application or the alpha that was passed into\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)} is being\n     * used.\n     * </p>\n     * @param alpha Alpha of windows that cause insets of type\n     *              {@link WindowInsets.Type.InsetsType}.\n     * @see #getAlpha()\n     ",
    "links" : [ "WindowInsetsAnimationController#setInsetsAndAlpha", "WindowInsets.Type.InsetsType" ]
  } ],
  "variableNames" : [ "mTypeMask", "mFraction", "mInterpolator", "mDurationMillis", "mAlpha" ],
  "methodNames" : [ "public int getTypeMask()", "public float getFraction()", "public float getInterpolatedFraction()", "public Interpolator getInterpolator()", "public long getDurationMillis()", "public void setFraction(@FloatRange(from = 0f, to = 1f) float fraction)", "public float getAlpha()", "public void setAlpha(@FloatRange(from = 0f, to = 1f) float alpha)" ]
}