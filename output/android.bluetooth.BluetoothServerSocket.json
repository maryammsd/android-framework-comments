{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothServerSocket.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothServerSocket",
  "comment" : "\n * A listening Bluetooth socket.\n *\n * <p>The interface for Bluetooth Sockets is similar to that of TCP sockets: {@link java.net.Socket}\n * and {@link java.net.ServerSocket}. On the server side, use a {@link BluetoothServerSocket} to\n * create a listening server socket. When a connection is accepted by the {@link\n * BluetoothServerSocket}, it will return a new {@link BluetoothSocket} to manage the connection. On\n * the client side, use a single {@link BluetoothSocket} to both initiate an outgoing connection and\n * to manage the connection.\n *\n * <p>For Bluetooth BR/EDR, the most common type of socket is RFCOMM, which is the type supported by\n * the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth BR/EDR. It\n * is also known as the Serial Port Profile (SPP). To create a listening {@link\n * BluetoothServerSocket} that's ready for incoming Bluetooth BR/EDR connections, use {@link\n * BluetoothAdapter#listenUsingRfcommWithServiceRecord\n * BluetoothAdapter.listenUsingRfcommWithServiceRecord()}.\n *\n * <p>For Bluetooth LE, the socket uses LE Connection-oriented Channel (CoC). LE CoC is a\n * connection-oriented, streaming transport over Bluetooth LE and has a credit-based flow control.\n * Correspondingly, use {@link BluetoothAdapter#listenUsingL2capChannel\n * BluetoothAdapter.listenUsingL2capChannel()} to create a listening {@link BluetoothServerSocket}\n * that's ready for incoming Bluetooth LE CoC connections. For LE CoC, you can use {@link #getPsm()}\n * to get the protocol/service multiplexer (PSM) value that the peer needs to use to connect to your\n * socket.\n *\n * <p>After the listening {@link BluetoothServerSocket} is created, call {@link #accept()} to listen\n * for incoming connection requests. This call will block until a connection is established, at\n * which point, it will return a {@link BluetoothSocket} to manage the connection. Once the {@link\n * BluetoothSocket} is acquired, it's a good idea to call {@link #close()} on the {@link\n * BluetoothServerSocket} when it's no longer needed for accepting connections. Closing the {@link\n * BluetoothServerSocket} will <em>not</em> close the returned {@link BluetoothSocket}.\n *\n * <p>{@link BluetoothServerSocket} is thread safe. In particular, {@link #close} will always\n * immediately abort ongoing operations and close the server socket.\n *\n * <p><div class=\"special reference\">\n *\n * <h3>Developer Guides</h3>\n *\n * <p>For more information about using Bluetooth, read the <a\n * href=\"{@docRoot}guide/topics/connectivity/bluetooth.html\">Bluetooth</a> developer guide. </div>\n *\n * @see BluetoothSocket\n ",
  "links" : [ "java.net.ServerSocket", "android.bluetooth.BluetoothServerSocket", "android.bluetooth.BluetoothSocket", "#getPsm()", "java.net.Socket", "android.bluetooth.BluetoothAdapter#listenUsingL2capChannelBluetoothAdapter.listenUsingL2capChannel()", "#accept()", "#close()", "#close", "android.bluetooth.BluetoothAdapter#listenUsingRfcommWithServiceRecordBluetoothAdapter.listenUsingRfcommWithServiceRecord()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocket",
    "type" : "BluetoothSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketCreationTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketCreationLatencyMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : " Therefore a new variable need to be maintained here.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BluetoothSocket accept() throws IOException",
    "returnType" : "BluetoothSocket",
    "comment" : "\n     * Block until a connection is established.\n     *\n     * <p>Returns a connected {@link BluetoothSocket} on successful connection.\n     *\n     * <p>Once this call returns, it can be called again to accept subsequent incoming connections.\n     *\n     * <p>{@link #close} can be used to abort this call from another thread.\n     *\n     * @return a connected {@link BluetoothSocket}\n     * @throws IOException on error, for example this call was aborted, or timeout\n     ",
    "links" : [ "android.bluetooth.BluetoothSocket", "#close" ]
  }, {
    "name" : "public BluetoothSocket accept(int timeout) throws IOException",
    "returnType" : "BluetoothSocket",
    "comment" : "\n     * Block until a connection is established, with timeout.\n     *\n     * <p>Returns a connected {@link BluetoothSocket} on successful connection.\n     *\n     * <p>Once this call returns, it can be called again to accept subsequent incoming connections.\n     *\n     * <p>{@link #close} can be used to abort this call from another thread.\n     *\n     * @return a connected {@link BluetoothSocket}\n     * @throws IOException on error, for example this call was aborted, or timeout\n     ",
    "links" : [ "android.bluetooth.BluetoothSocket", "#close" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Immediately close this socket, and release all associated resources.\n     *\n     * <p>Causes blocked calls on this socket in other threads to immediately throw an IOException.\n     *\n     * <p>Closing the {@link BluetoothServerSocket} will <em>not</em> close any {@link\n     * BluetoothSocket} received from {@link #accept()}.\n     ",
    "links" : [ "android.bluetooth.BluetoothServerSocket", "android.bluetooth.BluetoothSocket", "#accept()" ]
  }, {
    "name" : " synchronized void setCloseHandler(Handler handler, int message)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void setServiceName(String serviceName)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public int getChannel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the channel on which this socket is bound.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPsm()",
    "returnType" : "int",
    "comment" : "\n     * Returns the assigned dynamic protocol/service multiplexer (PSM) value for the listening L2CAP\n     * Connection-oriented Channel (CoC) server socket. This server socket must be returned by the\n     * {@link BluetoothAdapter#listenUsingL2capChannel()} or {@link\n     * BluetoothAdapter#listenUsingInsecureL2capChannel()}. The returned value is undefined if this\n     * method is called on non-L2CAP server sockets.\n     *\n     * @return the assigned PSM or LE_PSM value depending on transport\n     ",
    "links" : [ "android.bluetooth.BluetoothAdapter#listenUsingInsecureL2capChannel()", "android.bluetooth.BluetoothAdapter#listenUsingL2capChannel()" ]
  }, {
    "name" : " void setChannel(int newChannel)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public BluetoothSocket accept() throws IOException", "public BluetoothSocket accept(int timeout) throws IOException", "public void close() throws IOException", " synchronized void setCloseHandler(Handler handler, int message)", " void setServiceName(String serviceName)", "public int getChannel()", "public int getPsm()", " void setChannel(int newChannel)", "public String toString()" ],
  "variableNames" : [ "TAG", "DBG", "mSocket", "mHandler", "mMessage", "mChannel", "mSocketCreationTimeMillis", "mSocketCreationLatencyMillis", "mType" ]
}