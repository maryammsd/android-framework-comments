{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/RouteInfo.java",
  "packageName" : "android.net",
  "className" : "RouteInfo",
  "comment" : "\n * Represents a network route.\n * <p>\n * This is used both to describe static network configuration and live network\n * configuration information.\n *\n * A route contains three pieces of information:\n * <ul>\n * <li>a destination {@link IpPrefix} specifying the network destinations covered by this route.\n *     If this is {@code null} it indicates a default route of the address family (IPv4 or IPv6)\n *     implied by the gateway IP address.\n * <li>a gateway {@link InetAddress} indicating the next hop to use.  If this is {@code null} it\n *     indicates a directly-connected route.\n * <li>an interface (which may be unspecified).\n * </ul>\n * Either the destination or the gateway may be {@code null}, but not both.  If the\n * destination and gateway are both specified, they must be of the same address family\n * (IPv4 or IPv6).\n ",
  "variables" : [ {
    "name" : "mDestination",
    "type" : "IpPrefix",
    "comment" : "\n     * The IP destination address for this route.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGateway",
    "type" : "InetAddress",
    "comment" : "\n     * The gateway address for this route.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "String",
    "comment" : "\n     * The interface for this route.\n     ",
    "links" : [ ]
  }, {
    "name" : "RTN_UNICAST",
    "type" : "int",
    "comment" : " Unicast route. @hide ",
    "links" : [ ]
  }, {
    "name" : "RTN_UNREACHABLE",
    "type" : "int",
    "comment" : " Unreachable route. @hide ",
    "links" : [ ]
  }, {
    "name" : "RTN_THROW",
    "type" : "int",
    "comment" : " Throw route. @hide ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "\n     * The type of this route; one of the RTN_xxx constants above.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMtu",
    "type" : "int",
    "comment" : "\n     * The maximum transmission unit size for this route.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsHost",
    "type" : "boolean",
    "comment" : " TODO: remove these.",
    "links" : [ ]
  }, {
    "name" : "mHasGateway",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RouteInfo>",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RouteInfo makeHostRoute(@NonNull InetAddress host, @Nullable String iface)",
    "returnType" : "RouteInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RouteInfo makeHostRoute(@Nullable InetAddress host, @Nullable InetAddress gateway, @Nullable String iface)",
    "returnType" : "RouteInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isHost()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IpPrefix getDestination()",
    "returnType" : "IpPrefix",
    "comment" : "\n     * Retrieves the destination address and prefix length in the form of an {@link IpPrefix}.\n     *\n     * @return {@link IpPrefix} specifying the destination.  This is never {@code null}.\n     ",
    "links" : [ "IpPrefix", "IpPrefix" ]
  }, {
    "name" : "public LinkAddress getDestinationLinkAddress()",
    "returnType" : "LinkAddress",
    "comment" : "\n     * TODO: Convert callers to use IpPrefix and then remove.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getGateway()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Retrieves the gateway or next hop {@link InetAddress} for this route.\n     *\n     * @return {@link InetAddress} specifying the gateway or next hop.  This may be\n     *                             {@code null} for a directly-connected route.\"\n     ",
    "links" : [ "InetAddress", "InetAddress" ]
  }, {
    "name" : "public String getInterface()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the interface used for this route if specified, else {@code null}.\n     *\n     * @return The name of the interface used for this route.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the type of this route.\n     *\n     * @return The type of this route; one of the {@code RTN_xxx} constants defined in this class.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMtu()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the MTU size for this route.\n     *\n     * @return The MTU size, or 0 if it has not been set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is a default route (ie, has no destination specified).\n     *\n     * @return {@code true} if the destination has a prefix length of 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isUnreachableDefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is an unreachable default route.\n     *\n     * @return {@code true} if it's an unreachable route with prefix length of 0.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv4Default()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is an IPv4 default route.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv4UnreachableDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is an IPv4 unreachable default route.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv6Default()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is an IPv6 default route.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv6UnreachableDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is an IPv6 unreachable default route.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHostRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route is a host route (ie, matches only a single host address).\n     *\n     * @return {@code true} if the destination has a prefix length of 32 or 128 for IPv4 or IPv6,\n     * respectively.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasGateway()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this route has a next hop ({@code true}) or is directly-connected\n     * ({@code false}).\n     *\n     * @return {@code true} if a gateway is specified\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(InetAddress destination)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the destination and prefix of this route includes the specified\n     * address.\n     *\n     * @param destination A {@link InetAddress} to test to see if it would match this route.\n     * @return {@code true} if the destination and prefix length cover the given address.\n     ",
    "links" : [ "InetAddress" ]
  }, {
    "name" : "public static RouteInfo selectBestRoute(Collection<RouteInfo> routes, InetAddress dest)",
    "returnType" : "RouteInfo",
    "comment" : "\n     * Find the route from a Collection of routes that best matches a given address.\n     * May return null if no routes are applicable.\n     * @param routes a Collection of RouteInfos to chose from\n     * @param dest the InetAddress your trying to get to\n     * @return the RouteInfo from the Collection that best fits the given address\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a human-readable description of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this RouteInfo object against the specified object and indicates if they are equal.\n     * @return {@code true} if the objects are equal, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RouteKey getRouteKey()",
    "returnType" : "RouteKey",
    "comment" : "\n     * Get {@code RouteKey} of this {@code RouteInfo}.\n     * @return a {@code RouteKey} object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     *  Returns a hashcode for this <code>RouteInfo</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Implement the Parcelable interface\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Implement the Parcelable interface\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDestination", "mGateway", "mInterface", "RTN_UNICAST", "RTN_UNREACHABLE", "RTN_THROW", "mType", "mMtu", "mIsHost", "mHasGateway", "CREATOR" ],
  "methodNames" : [ "public static RouteInfo makeHostRoute(@NonNull InetAddress host, @Nullable String iface)", "public static RouteInfo makeHostRoute(@Nullable InetAddress host, @Nullable InetAddress gateway, @Nullable String iface)", "private boolean isHost()", "public IpPrefix getDestination()", "public LinkAddress getDestinationLinkAddress()", "public InetAddress getGateway()", "public String getInterface()", "public int getType()", "public int getMtu()", "public boolean isDefaultRoute()", "private boolean isUnreachableDefaultRoute()", "public boolean isIPv4Default()", "public boolean isIPv4UnreachableDefault()", "public boolean isIPv6Default()", "public boolean isIPv6UnreachableDefault()", "public boolean isHostRoute()", "public boolean hasGateway()", "public boolean matches(InetAddress destination)", "public static RouteInfo selectBestRoute(Collection<RouteInfo> routes, InetAddress dest)", "public String toString()", "public boolean equals(Object obj)", "public RouteKey getRouteKey()", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}