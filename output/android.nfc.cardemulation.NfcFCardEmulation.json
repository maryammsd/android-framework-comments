{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/cardemulation/NfcFCardEmulation.java",
  "packageName" : "android.nfc.cardemulation",
  "className" : "NfcFCardEmulation",
  "comment" : "\n * This class can be used to query the state of\n * NFC-F card emulation services.\n *\n * For a general introduction into NFC card emulation,\n * please read the <a href=\"{@docRoot}guide/topics/connectivity/nfc/hce.html\">\n * NFC card emulation developer guide</a>.</p>\n *\n * <p class=\"note\">Use of this class requires the\n * {@link PackageManager#FEATURE_NFC_HOST_CARD_EMULATION_NFCF}\n * to be present on the device.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIsInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCardEmus",
    "type" : "HashMap<Context, NfcFCardEmulation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "INfcFCardEmulation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized NfcFCardEmulation getInstance(NfcAdapter adapter)",
    "returnType" : "NfcFCardEmulation",
    "comment" : "\n     * Helper to get an instance of this class.\n     *\n     * @param adapter A reference to an NfcAdapter object.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemCodeForService(ComponentName service) throws RuntimeException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the current System Code for the specified service.\n     *\n     * <p>Before calling {@link #registerSystemCodeForService(ComponentName, String)},\n     * the System Code contained in the Manifest file is returned. After calling\n     * {@link #registerSystemCodeForService(ComponentName, String)}, the System Code\n     * registered there is returned. After calling\n     * {@link #unregisterSystemCodeForService(ComponentName)}, \"null\" is returned.\n     *\n     * @param service The component name of the service\n     * @return the current System Code\n     ",
    "links" : [ "#registerSystemCodeForService(ComponentName", "#unregisterSystemCodeForService(ComponentName)" ]
  }, {
    "name" : "public boolean registerSystemCodeForService(ComponentName service, String systemCode) throws RuntimeException",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a System Code for the specified service.\n     *\n     * <p>The System Code must be in range from \"4000\" to \"4FFF\" (excluding \"4*FF\").\n     *\n     * <p>If a System Code was previously registered for this service\n     * (either statically through the manifest, or dynamically by using this API),\n     * it will be replaced with this one.\n     *\n     * <p>Even if the same System Code is already registered for another service,\n     * this method succeeds in registering the System Code.\n     *\n     * <p>Note that you can only register a System Code for a service that\n     * is running under the same UID as the caller of this API. Typically\n     * this means you need to call this from the same\n     * package as the service itself, though UIDs can also\n     * be shared between packages using shared UIDs.\n     *\n     * @param service The component name of the service\n     * @param systemCode The System Code to be registered\n     * @return whether the registration was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterSystemCodeForService(ComponentName service) throws RuntimeException",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a registered System Code for the specified service.\n     *\n     * @param service The component name of the service\n     * @return whether the System Code was successfully removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNfcid2ForService(ComponentName service) throws RuntimeException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the current NFCID2 for the specified service.\n     *\n     * <p>Before calling {@link #setNfcid2ForService(ComponentName, String)},\n     * the NFCID2 contained in the Manifest file is returned. If \"random\" is specified\n     * in the Manifest file, a random number assigned by the system at installation time\n     * is returned. After setting an NFCID2\n     * with {@link #setNfcid2ForService(ComponentName, String)}, this NFCID2 is returned.\n     *\n     * @param service The component name of the service\n     * @return the current NFCID2\n     ",
    "links" : [ "#setNfcid2ForService(ComponentName" ]
  }, {
    "name" : "public boolean setNfcid2ForService(ComponentName service, String nfcid2) throws RuntimeException",
    "returnType" : "boolean",
    "comment" : "\n     * Set a NFCID2 for the specified service.\n     *\n     * <p>The NFCID2 must be in range from \"02FE000000000000\" to \"02FEFFFFFFFFFFFF\".\n     *\n     * <p>If a NFCID2 was previously set for this service\n     * (either statically through the manifest, or dynamically by using this API),\n     * it will be replaced.\n     *\n     * <p>Note that you can only set the NFCID2 for a service that\n     * is running under the same UID as the caller of this API. Typically\n     * this means you need to call this from the same\n     * package as the service itself, though UIDs can also\n     * be shared between packages using shared UIDs.\n     *\n     * @param service The component name of the service\n     * @param nfcid2 The NFCID2 to be registered\n     * @return whether the setting was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean enableService(Activity activity, ComponentName service) throws RuntimeException",
    "returnType" : "boolean",
    "comment" : "\n     * Allows a foreground application to specify which card emulation service\n     * should be enabled while a specific Activity is in the foreground.\n     *\n     * <p>The specified HCE-F service is only enabled when the corresponding application is\n     * in the foreground and this method has been called. When the application is moved to\n     * the background, {@link #disableService(Activity)} is called, or\n     * NFCID2 or System Code is replaced, the HCE-F service is disabled.\n     *\n     * <p>The specified Activity must currently be in resumed state. A good\n     * paradigm is to call this method in your {@link Activity#onResume}, and to call\n     * {@link #disableService(Activity)} in your {@link Activity#onPause}.\n     *\n     * <p>Note that this preference is not persisted by the OS, and hence must be\n     * called every time the Activity is resumed.\n     *\n     * @param activity The activity which prefers this service to be invoked\n     * @param service The service to be preferred while this activity is in the foreground\n     * @return whether the registration was successful\n     ",
    "links" : [ "#disableService(Activity)", "android.app.Activity#onPause", "android.app.Activity#onResume" ]
  }, {
    "name" : "public boolean disableService(Activity activity) throws RuntimeException",
    "returnType" : "boolean",
    "comment" : "\n     * Disables the service for the specified Activity.\n     *\n     * <p>Note that the specified Activity must still be in resumed\n     * state at the time of this call. A good place to call this method\n     * is in your {@link Activity#onPause} implementation.\n     *\n     * @param activity The activity which the service was registered for\n     * @return true when successful\n     ",
    "links" : [ "android.app.Activity#onPause" ]
  }, {
    "name" : "public List<NfcFServiceInfo> getNfcFServices()",
    "returnType" : "List<NfcFServiceInfo>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxNumOfRegisterableSystemCodes()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidSystemCode(String systemCode)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidNfcid2(String nfcid2)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void recoverService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sIsInitialized", "sCardEmus", "sService", "mContext" ],
  "methodNames" : [ "public static synchronized NfcFCardEmulation getInstance(NfcAdapter adapter)", "public String getSystemCodeForService(ComponentName service) throws RuntimeException", "public boolean registerSystemCodeForService(ComponentName service, String systemCode) throws RuntimeException", "public boolean unregisterSystemCodeForService(ComponentName service) throws RuntimeException", "public String getNfcid2ForService(ComponentName service) throws RuntimeException", "public boolean setNfcid2ForService(ComponentName service, String nfcid2) throws RuntimeException", "public boolean enableService(Activity activity, ComponentName service) throws RuntimeException", "public boolean disableService(Activity activity) throws RuntimeException", "public List<NfcFServiceInfo> getNfcFServices()", "public int getMaxNumOfRegisterableSystemCodes()", "public static boolean isValidSystemCode(String systemCode)", "public static boolean isValidNfcid2(String nfcid2)", " void recoverService()" ]
}