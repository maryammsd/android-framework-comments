{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/WorkSource.java",
  "packageName" : "android.os",
  "className" : "WorkSource",
  "comment" : "\n * Describes the source of some work that may be done by someone else.\n * Currently the public representation of what a work source is not\n * defined; this is an opaque container.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNum",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUids",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChains",
    "type" : "ArrayList<WorkChain>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTmpWorkSource",
    "type" : "WorkSource",
    "comment" : "\n     * Internal statics to avoid object allocations in some operations.\n     * The WorkSource object itself is not thread safe, but we need to\n     * hold sTmpWorkSource lock while working with these statics.\n     ",
    "links" : [ ]
  }, {
    "name" : "sNewbWork",
    "type" : "WorkSource",
    "comment" : "\n     * For returning newbie work from a modification operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "sGoneWork",
    "type" : "WorkSource",
    "comment" : "\n     * For returning gone work from a modification operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<WorkSource>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isChainedBatteryAttributionEnabled(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether system services should create {@code WorkChains} (wherever possible) in the place\n     * of flat UID lists.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of uids in this work source.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int get(int index)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated use {{@link #getUid(int)}} instead.\n     * @hide\n     ",
    "links" : [ "#getUid" ]
  }, {
    "name" : "public int getUid(int index)",
    "returnType" : "int",
    "comment" : "\n     * Get the uid at the given index.\n     * If {@code index} < 0 or {@code index} >= {@link #size() N}, then the behavior is undefined.\n     * @hide\n     ",
    "links" : [ "#size" ]
  }, {
    "name" : "public int getAttributionUid()",
    "returnType" : "int",
    "comment" : "\n     * Return the UID to which this WorkSource should be attributed to, i.e, the UID that\n     * initiated the work and not the UID performing it. If the WorkSource has no UIDs, returns -1\n     * instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(int index)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated use {{@link #getPackageName(int)}} instead.\n     * @hide\n     ",
    "links" : [ "#getPackageName" ]
  }, {
    "name" : "public String getPackageName(int index)",
    "returnType" : "String",
    "comment" : "\n     * Get the package name at the given index.\n     * If {@code index} < 0 or {@code index} >= {@link #size() N}, then the behavior is undefined.\n     * @hide\n     ",
    "links" : [ "#size" ]
  }, {
    "name" : "private void clearNames()",
    "returnType" : "void",
    "comment" : "\n     * Clear names from this WorkSource. Uids are left intact. WorkChains if any, are left\n     * intact.\n     *\n     * <p>Useful when combining with another WorkSource that doesn't have names.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear this WorkSource to be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean diff(WorkSource other)",
    "returnType" : "boolean",
    "comment" : " we keep its semantics the same and ignore any differences in WorkChains (if any).",
    "links" : [ ]
  }, {
    "name" : "public void set(WorkSource other)",
    "returnType" : "void",
    "comment" : "\n     * Replace the current contents of this work source with the given\n     * work source.  If {@code other} is null, the current work source\n     * will be made empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(int uid)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void set(int uid, String name)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public WorkSource[] setReturningDiffs(WorkSource other)",
    "returnType" : "WorkSource[]",
    "comment" : "\n     * Legacy API, DO NOT USE: Only deals with flat UIDs and tags. No chains are transferred, and no\n     * differences in chains are returned. This will be removed once its callers have been\n     * rewritten.\n     *\n     * NOTE: This is currently only used in GnssLocationProvider.\n     *\n     * @hide\n     * @deprecated for internal use only. WorkSources are opaque and no external callers should need\n     *     to be aware of internal differences.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(WorkSource other)",
    "returnType" : "boolean",
    "comment" : "\n     * Merge the contents of <var>other</var> WorkSource in to this one.\n     *\n     * @param other The other WorkSource whose contents are to be merged.\n     * @return Returns true if any new sources were added.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WorkSource withoutNames()",
    "returnType" : "WorkSource",
    "comment" : "\n     * Returns a copy of this work source without any package names.\n     * If any {@link WorkChain WorkChains} are present, they are left intact.\n     *\n     * @return a {@link WorkSource} without any package names.\n     * @hide\n     ",
    "links" : [ "WorkChain", "WorkSource" ]
  }, {
    "name" : "public WorkSource addReturningNewbs(WorkSource other)",
    "returnType" : "WorkSource",
    "comment" : "\n     * Legacy API: DO NOT USE. Only in use from unit tests.\n     *\n     * @hide\n     * @deprecated meant for unit testing use only. Will be removed in a future API revision.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(int uid)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(int uid, String name)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(WorkSource other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WorkChain createWorkChain()",
    "returnType" : "WorkChain",
    "comment" : "\n     * Create a new {@code WorkChain} associated with this WorkSource and return it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} iff. this work source contains zero UIDs and zero WorkChains to\n     * attribute usage to.\n     *\n     * @hide for internal use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<WorkChain> getWorkChains()",
    "returnType" : "List<WorkChain>",
    "comment" : "\n     * @return the list of {@code WorkChains} associated with this {@code WorkSource}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transferWorkChains(WorkSource other)",
    "returnType" : "void",
    "comment" : "\n     * DO NOT USE: Hacky API provided solely for {@code GnssLocationProvider}. See\n     * {@code setReturningDiffs} as well.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean removeUids(WorkSource other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean removeUidsAndNames(WorkSource other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean updateLocked(WorkSource other, boolean set, boolean returnNewbs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static WorkSource addWork(WorkSource cur, int newUid)",
    "returnType" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean updateUidsLocked(WorkSource other, boolean set, boolean returnNewbs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int compare(WorkSource other, int i1, int i2)",
    "returnType" : "int",
    "comment" : "\n     * Returns 0 if equal, negative if 'this' is before 'other', positive if 'this' is after 'other'.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static WorkSource addWork(WorkSource cur, int newUid, String newName)",
    "returnType" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean updateUidsAndNamesLocked(WorkSource other, boolean set, boolean returnNewbs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void insert(int index, int uid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void insert(int index, int uid, String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ArrayList<WorkChain>[] diffChains(WorkSource oldWs, WorkSource newWs)",
    "returnType" : "ArrayList<WorkChain>[]",
    "comment" : "\n     * Computes the differences in WorkChains contained between {@code oldWs} and {@code newWs}.\n     *\n     * Returns {@code null} if no differences exist, otherwise returns a two element array. The\n     * first element is a list of \"new\" chains, i.e WorkChains present in {@code newWs} but not in\n     * {@code oldWs}. The second element is a list of \"gone\" chains, i.e WorkChains present in\n     * {@code oldWs} but not in {@code newWs}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mNum", "mUids", "mNames", "mChains", "sTmpWorkSource", "sNewbWork", "sGoneWork", "CREATOR" ],
  "methodNames" : [ "public static boolean isChainedBatteryAttributionEnabled(Context context)", "public int size()", "public int get(int index)", "public int getUid(int index)", "public int getAttributionUid()", "public String getName(int index)", "public String getPackageName(int index)", "private void clearNames()", "public void clear()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public boolean diff(WorkSource other)", "public void set(WorkSource other)", "public void set(int uid)", "public void set(int uid, String name)", "public WorkSource[] setReturningDiffs(WorkSource other)", "public boolean add(WorkSource other)", "public WorkSource withoutNames()", "public WorkSource addReturningNewbs(WorkSource other)", "public boolean add(int uid)", "public boolean add(int uid, String name)", "public boolean remove(WorkSource other)", "public WorkChain createWorkChain()", "public boolean isEmpty()", "public List<WorkChain> getWorkChains()", "public void transferWorkChains(WorkSource other)", "private boolean removeUids(WorkSource other)", "private boolean removeUidsAndNames(WorkSource other)", "private boolean updateLocked(WorkSource other, boolean set, boolean returnNewbs)", "private static WorkSource addWork(WorkSource cur, int newUid)", "private boolean updateUidsLocked(WorkSource other, boolean set, boolean returnNewbs)", "private int compare(WorkSource other, int i1, int i2)", "private static WorkSource addWork(WorkSource cur, int newUid, String newName)", "private boolean updateUidsAndNamesLocked(WorkSource other, boolean set, boolean returnNewbs)", "private void insert(int index, int uid)", "private void insert(int index, int uid, String name)", "public static ArrayList<WorkChain>[] diffChains(WorkSource oldWs, WorkSource newWs)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)" ]
}