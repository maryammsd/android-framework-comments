{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/RecoverableSecurityException.java",
  "packageName" : "android.app",
  "className" : "RecoverableSecurityException",
  "comment" : "\n * Specialization of {@link SecurityException} that contains additional\n * information about how to involve the end user to recover from the exception.\n * <p>\n * This exception is only appropriate where there is a concrete action the user\n * can take to recover and make forward progress, such as confirming or entering\n * authentication credentials, or granting access.\n * <p>\n * If the receiving app is actively involved with the user, it should present\n * the contained recovery details to help the user make forward progress.\n * <p class=\"note\">\n * Note: legacy code that receives this exception may treat it as a general\n * {@link SecurityException}, and thus there is no guarantee that the messages\n * contained will be shown to the end user.\n ",
  "links" : [ "SecurityException" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserMessage",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAction",
    "type" : "RemoteAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RecoverableSecurityException>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getUserMessage()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return short message describing the issue for end user audiences, which\n     * may be shown in a notification or dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RemoteAction getUserAction()",
    "returnType" : "RemoteAction",
    "comment" : "\n     * Return primary action that will initiate the recovery.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showAsNotification(Context context, String channelId)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method that will show a very simple notification populated\n     * with the details from this exception.\n     * <p>\n     * If you want more flexibility over retrying your original operation once\n     * the user action has finished, consider presenting your own UI that uses\n     * {@link Activity#startIntentSenderForResult} to launch the\n     * {@link PendingIntent#getIntentSender()} from {@link #getUserAction()}\n     * when requested. If the result of that activity is\n     * {@link Activity#RESULT_OK}, you should consider retrying.\n     * <p>\n     * This method will only display the most recent exception from any single\n     * remote UID; notifications from older exceptions will always be replaced.\n     *\n     * @param channelId the {@link NotificationChannel} to use, which must have\n     *            been already created using\n     *            {@link NotificationManager#createNotificationChannel}.\n     * @hide\n     ",
    "links" : [ "android.app.Activity#startIntentSenderForResult", "#getUserAction()", "android.app.Activity#RESULT_OK", "android.app.PendingIntent#getIntentSender()", "android.app.NotificationChannel", "android.app.NotificationManager#createNotificationChannel" ]
  }, {
    "name" : "public void showAsDialog(Activity activity)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method that will show a very simple dialog populated with the\n     * details from this exception.\n     * <p>\n     * If you want more flexibility over retrying your original operation once\n     * the user action has finished, consider presenting your own UI that uses\n     * {@link Activity#startIntentSenderForResult} to launch the\n     * {@link PendingIntent#getIntentSender()} from {@link #getUserAction()}\n     * when requested. If the result of that activity is\n     * {@link Activity#RESULT_OK}, you should consider retrying.\n     * <p>\n     * This method will only display the most recent exception from any single\n     * remote UID; dialogs from older exceptions will always be replaced.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.Activity#startIntentSenderForResult", "#getUserAction()", "android.app.Activity#RESULT_OK", "android.app.PendingIntent#getIntentSender()" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CharSequence getUserMessage()", "public RemoteAction getUserAction()", "public void showAsNotification(Context context, String channelId)", "public void showAsDialog(Activity activity)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "mUserMessage", "mUserAction", "CREATOR" ]
}