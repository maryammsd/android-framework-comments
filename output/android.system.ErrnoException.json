{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/system/ErrnoException.java",
  "packageName" : "android.system",
  "className" : "ErrnoException",
  "comment" : "\n * A checked exception thrown when {@link Os} methods fail. This exception contains the native\n * errno value, for comparison against the constants in {@link OsConstants}, should sophisticated\n * callers need to adjust their behavior based on the exact failure.\n ",
  "variables" : [ {
    "name" : "functionName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errno",
    "type" : "int",
    "comment" : "\n     * The errno value, for comparison with the {@code E} constants in {@link OsConstants}.\n     ",
    "links" : [ "android.system.OsConstants" ]
  } ],
  "methods" : [ {
    "name" : "public String getMessage()",
    "returnType" : "String",
    "comment" : "\n     * Converts the stashed function name and errno value to a human-readable string.\n     * We do this here rather than in the constructor so that callers only pay for\n     * this if they need it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IOException rethrowAsIOException() throws IOException",
    "returnType" : "IOException",
    "comment" : "\n     * Throws an {@link IOException} with a message based on {@link #getMessage()} and with this\n     * instance as the cause.\n     *\n     * <p>This method always terminates by throwing the exception. Callers can write\n     * {@code throw e.rethrowAsIOException()} to make that clear to the compiler.\n     ",
    "links" : [ "#getMessage()", "java.io.IOException" ]
  }, {
    "name" : "public SocketException rethrowAsSocketException() throws SocketException",
    "returnType" : "SocketException",
    "comment" : "\n     * Throws a {@link SocketException} with a message based on {@link #getMessage()} and with this\n     * instance as the cause.\n     *\n     * <p>This method always terminates by throwing the exception. Callers can write\n     * {@code throw e.rethrowAsIOException()} to make that clear to the compiler.\n     ",
    "links" : [ "java.net.SocketException", "#getMessage()" ]
  } ],
  "variableNames" : [ "functionName", "errno" ],
  "methodNames" : [ "public String getMessage()", "public IOException rethrowAsIOException() throws IOException", "public SocketException rethrowAsSocketException() throws SocketException" ]
}