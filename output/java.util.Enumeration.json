{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Enumeration.java",
  "packageName" : "java.util",
  "className" : "Enumeration",
  "comment" : "\n * An object that implements the Enumeration interface generates a\n * series of elements, one at a time. Successive calls to the\n * {@code nextElement} method return successive elements of the\n * series.\n * <p>\n * For example, to print all elements of a {@code Vector<E>} <i>v</i>:\n * <pre>\n *   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)\n *       System.out.println(e.nextElement());</pre>\n * <p>\n * Methods are provided to enumerate through the elements of a\n * vector, the keys of a hashtable, and the values in a hashtable.\n * Enumerations are also used to specify the input streams to a\n * {@code SequenceInputStream}.\n *\n * @apiNote\n * The functionality of this interface is duplicated by the {@link Iterator}\n * interface.  In addition, {@code Iterator} adds an optional remove operation,\n * and has shorter method names.  New implementations should consider using\n * {@code Iterator} in preference to {@code Enumeration}. It is possible to\n * adapt an {@code Enumeration} to an {@code Iterator} by using the\n * {@link #asIterator} method.\n *\n * @see     java.util.Iterator\n * @see     java.io.SequenceInputStream\n * @see     java.util.Enumeration#nextElement()\n * @see     java.util.Hashtable\n * @see     java.util.Hashtable#elements()\n * @see     java.util.Hashtable#keys()\n * @see     java.util.Vector\n * @see     java.util.Vector#elements()\n *\n * @author  Lee Boynton\n * @since   1.0\n ",
  "links" : [ "java.util.Iterator", "#asIterator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean hasMoreElements()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this enumeration contains more elements.\n     *\n     * @return  {@code true} if and only if this enumeration object\n     *           contains at least one more element to provide;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " E nextElement()",
    "returnType" : "E",
    "comment" : "\n     * Returns the next element of this enumeration if this enumeration\n     * object has at least one more element to provide.\n     *\n     * @return     the next element of this enumeration.\n     * @throws     NoSuchElementException  if no more elements exist.\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> asIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an {@link Iterator} that traverses the remaining elements\n     * covered by this enumeration. Traversal is undefined if any methods\n     * are called on this enumeration after the call to {@code asIterator}.\n     *\n     * @apiNote\n     * This method is intended to help adapt code that produces\n     * {@code Enumeration} instances to code that consumes {@code Iterator}\n     * instances. For example, the {@link java.util.jar.JarFile#entries()\n     * JarFile.entries()} method returns an {@code Enumeration<JarEntry>}.\n     * This can be turned into an {@code Iterator}, and then the\n     * {@code forEachRemaining()} method can be used:\n     *\n     * <pre>{@code\n     *     JarFile jarFile = ... ;\n     *     jarFile.entries().asIterator().forEachRemaining(entry -> { ... });\n     * }</pre>\n     *\n     * (Note that there is also a {@link java.util.jar.JarFile#stream()\n     * JarFile.stream()} method that returns a {@code Stream} of entries,\n     * which may be more convenient in some cases.)\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator} whose\n     * {@link Iterator#hasNext hasNext} method calls this Enumeration's\n     * {@code hasMoreElements} method, whose {@link Iterator#next next}\n     * method calls this Enumeration's {@code nextElement} method, and\n     * whose {@link Iterator#remove remove} method throws\n     * {@code UnsupportedOperationException}.\n     *\n     * @return an Iterator representing the remaining elements of this Enumeration\n     *\n     * @since 9\n     ",
    "links" : [ "java.util.Iterator#next", "java.util.Iterator", "java.util.jar.JarFile#entries()", "java.util.jar.JarFile#stream()", "java.util.Iterator#remove", "java.util.Iterator#hasNext" ]
  } ],
  "methodNames" : [ " boolean hasMoreElements()", " E nextElement()", " Iterator<E> asIterator()" ],
  "variableNames" : [ ]
}