{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/IpSecTransform.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : " This class is used to build {@link IpSecTransform} objects. ",
  "links" : [ "android.net.IpSecTransform" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfig",
    "type" : "IpSecConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IpSecTransform.Builder setEncryption(@NonNull IpSecAlgorithm algo)",
    "returnType" : "IpSecTransform.Builder",
    "comment" : "\n         * Set the encryption algorithm.\n         *\n         * <p>Encryption is mutually exclusive with authenticated encryption.\n         *\n         * @param algo {@link IpSecAlgorithm} specifying the encryption to be applied.\n         ",
    "links" : [ "android.net.IpSecAlgorithm" ]
  }, {
    "name" : "public IpSecTransform.Builder setAuthentication(@NonNull IpSecAlgorithm algo)",
    "returnType" : "IpSecTransform.Builder",
    "comment" : "\n         * Set the authentication (integrity) algorithm.\n         *\n         * <p>Authentication is mutually exclusive with authenticated encryption.\n         *\n         * @param algo {@link IpSecAlgorithm} specifying the authentication to be applied.\n         ",
    "links" : [ "android.net.IpSecAlgorithm" ]
  }, {
    "name" : "public IpSecTransform.Builder setAuthenticatedEncryption(@NonNull IpSecAlgorithm algo)",
    "returnType" : "IpSecTransform.Builder",
    "comment" : "\n         * Set the authenticated encryption algorithm.\n         *\n         * <p>The Authenticated Encryption (AE) class of algorithms are also known as\n         * Authenticated Encryption with Associated Data (AEAD) algorithms, or Combined mode\n         * algorithms (as referred to in\n         * <a href=\"https://tools.ietf.org/html/rfc4301\">RFC 4301</a>).\n         *\n         * <p>Authenticated encryption is mutually exclusive with encryption and authentication.\n         *\n         * @param algo {@link IpSecAlgorithm} specifying the authenticated encryption algorithm to\n         *     be applied.\n         ",
    "links" : [ "android.net.IpSecAlgorithm" ]
  }, {
    "name" : "public IpSecTransform.Builder setIpv4Encapsulation(@NonNull IpSecManager.UdpEncapsulationSocket localSocket, int remotePort)",
    "returnType" : "IpSecTransform.Builder",
    "comment" : "\n         * Add UDP encapsulation to an IPv4 transform.\n         *\n         * <p>This allows IPsec traffic to pass through a NAT.\n         *\n         * @see <a href=\"https://tools.ietf.org/html/rfc3948\">RFC 3948, UDP Encapsulation of IPsec\n         *     ESP Packets</a>\n         * @see <a href=\"https://tools.ietf.org/html/rfc7296#section-2.23\">RFC 7296 section 2.23,\n         *     NAT Traversal of IKEv2</a>\n         * @param localSocket a socket for sending and receiving encapsulated traffic\n         * @param remotePort the UDP port number of the remote host that will send and receive\n         *     encapsulated traffic. In the case of IKEv2, this should be port 4500.\n         ",
    "links" : [ ]
  }, {
    "name" : "public IpSecTransform buildTransportModeTransform(@NonNull InetAddress sourceAddress, @NonNull IpSecManager.SecurityParameterIndex spi) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, IOException",
    "returnType" : "IpSecTransform",
    "comment" : "\n         * Build a transport mode {@link IpSecTransform}.\n         *\n         * <p>This builds and activates a transport mode transform. Note that an active transform\n         * will not affect any network traffic until it has been applied to one or more sockets.\n         *\n         * @see IpSecManager#applyTransportModeTransform\n         * @param sourceAddress the source {@code InetAddress} of traffic on sockets that will use\n         *     this transform; this address must belong to the Network used by all sockets that\n         *     utilize this transform; if provided, then only traffic originating from the\n         *     specified source address will be processed.\n         * @param spi a unique {@link IpSecManager.SecurityParameterIndex} to identify transformed\n         *     traffic\n         * @throws IllegalArgumentException indicating that a particular combination of transform\n         *     properties is invalid\n         * @throws IpSecManager.ResourceUnavailableException indicating that too many transforms\n         *     are active\n         * @throws IpSecManager.SpiUnavailableException indicating the rare case where an SPI\n         *     collides with an existing transform\n         * @throws IOException indicating other errors\n         ",
    "links" : [ "IpSecManager.SecurityParameterIndex", "android.net.IpSecTransform" ]
  }, {
    "name" : "public IpSecTransform buildTunnelModeTransform(@NonNull InetAddress sourceAddress, @NonNull IpSecManager.SecurityParameterIndex spi) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, IOException",
    "returnType" : "IpSecTransform",
    "comment" : "\n         * Build and return an {@link IpSecTransform} object as a Tunnel Mode Transform. Some\n         * parameters have interdependencies that are checked at build time.\n         *\n         * @param sourceAddress the {@link InetAddress} that provides the source address for this\n         *     IPsec tunnel. This is almost certainly an address belonging to the {@link Network}\n         *     that will originate the traffic, which is set as the {@link #setUnderlyingNetwork}.\n         * @param spi a unique {@link IpSecManager.SecurityParameterIndex} to identify transformed\n         *     traffic\n         * @throws IllegalArgumentException indicating that a particular combination of transform\n         *     properties is invalid.\n         * @throws IpSecManager.ResourceUnavailableException indicating that too many transforms\n         *     are active\n         * @throws IpSecManager.SpiUnavailableException indicating the rare case where an SPI\n         *     collides with an existing transform\n         * @throws IOException indicating other errors\n         * @hide\n         ",
    "links" : [ "java.net.InetAddress", "#setUnderlyingNetwork", "IpSecManager.SecurityParameterIndex", "android.net.IpSecTransform", "android.net.Network" ]
  } ],
  "methodNames" : [ "public IpSecTransform.Builder setEncryption(@NonNull IpSecAlgorithm algo)", "public IpSecTransform.Builder setAuthentication(@NonNull IpSecAlgorithm algo)", "public IpSecTransform.Builder setAuthenticatedEncryption(@NonNull IpSecAlgorithm algo)", "public IpSecTransform.Builder setIpv4Encapsulation(@NonNull IpSecManager.UdpEncapsulationSocket localSocket, int remotePort)", "public IpSecTransform buildTransportModeTransform(@NonNull InetAddress sourceAddress, @NonNull IpSecManager.SecurityParameterIndex spi) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, IOException", "public IpSecTransform buildTunnelModeTransform(@NonNull InetAddress sourceAddress, @NonNull IpSecManager.SecurityParameterIndex spi) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, IOException" ],
  "variableNames" : [ "mContext", "mConfig" ]
}