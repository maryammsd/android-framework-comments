{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/hdmi/HdmiTvClient.java",
  "packageName" : "android.hardware.hdmi",
  "className" : "HdmiTvClient",
  "comment" : "\n * HdmiTvClient represents HDMI-CEC logical device of type TV in the Android system\n * which acts as TV/Display.\n *\n * <p>HdmiTvClient provides methods that manage, interact with other devices on the CEC bus.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VENDOR_DATA_SIZE",
    "type" : "int",
    "comment" : "\n     * Size of MHL register for vendor command\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static HdmiTvClient create(IHdmiControlService service)",
    "returnType" : "HdmiTvClient",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deviceSelect(int logicalAddress, @NonNull SelectCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Selects a CEC logical device to be a new active source.\n     *\n     * @param logicalAddress logical address of the device to select\n     * @param callback callback to get the result with\n     * @throws {@link IllegalArgumentException} if the {@code callback} is null\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "private static IHdmiControlCallback getCallbackWrapper(final SelectCallback callback)",
    "returnType" : "IHdmiControlCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void portSelect(int portId, @NonNull SelectCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Selects a HDMI port to be a new route path.\n     *\n     * @param portId HDMI port to select\n     * @param callback callback to get the result with\n     * @throws {@link IllegalArgumentException} if the {@code callback} is null\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public void setInputChangeListener(InputChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener used to get informed of the input change event.\n     *\n     * @param listener listener object\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IHdmiInputChangeListener getListenerWrapper(final InputChangeListener listener)",
    "returnType" : "IHdmiInputChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<HdmiDeviceInfo> getDeviceList()",
    "returnType" : "List<HdmiDeviceInfo>",
    "comment" : "\n     * Returns all the CEC devices connected to TV.\n     *\n     * @return list of {@link HdmiDeviceInfo} for connected CEC devices.\n     *         Empty list is returned if there is none.\n     ",
    "links" : [ "HdmiDeviceInfo" ]
  }, {
    "name" : "public void setSystemAudioMode(boolean enabled, SelectCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets system audio mode.\n     *\n     * @param enabled set to {@code true} to enable the mode; otherwise {@code false}\n     * @param callback callback to get the result with\n     * @throws {@link IllegalArgumentException} if the {@code callback} is null\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public void setSystemAudioVolume(int oldIndex, int newIndex, int maxIndex)",
    "returnType" : "void",
    "comment" : "\n     * Sets system audio volume.\n     *\n     * @param oldIndex current volume index\n     * @param newIndex volume index to be set\n     * @param maxIndex maximum volume index\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAudioMute(boolean mute)",
    "returnType" : "void",
    "comment" : "\n     * Sets system audio mute status.\n     *\n     * @param mute {@code true} if muted; otherwise, {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRecordListener(@NonNull HdmiRecordListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets record listener.\n     *\n     * @param listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendStandby(int deviceId)",
    "returnType" : "void",
    "comment" : "\n     * Sends a &lt;Standby&gt; command to other device.\n     *\n     * @param deviceId device id to send the command to\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IHdmiRecordListener getListenerWrapper(final HdmiRecordListener callback)",
    "returnType" : "IHdmiRecordListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startOneTouchRecord(int recorderAddress, @NonNull RecordSource source)",
    "returnType" : "void",
    "comment" : "\n     * Starts one touch recording with the given recorder address and recorder source.\n     * <p>\n     * Usage\n     * <pre>\n     * HdmiTvClient tvClient = ....;\n     * // for own source.\n     * OwnSource ownSource = HdmiRecordSources.ofOwnSource();\n     * tvClient.startOneTouchRecord(recorderAddress, ownSource);\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopOneTouchRecord(int recorderAddress)",
    "returnType" : "void",
    "comment" : "\n     * Stops one touch record.\n     *\n     * @param recorderAddress recorder address where recoding will be stopped\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startTimerRecording(int recorderAddress, int sourceType, TimerRecordSource source)",
    "returnType" : "void",
    "comment" : "\n     * Starts timer recording with the given recoder address and recorder source.\n     * <p>\n     * Usage\n     * <pre>\n     * HdmiTvClient tvClient = ....;\n     * // create timer info\n     * TimerInfo timerInfo = HdmiTimerRecourdSources.timerInfoOf(...);\n     * // for digital source.\n     * DigitalServiceSource recordSource = HdmiRecordSources.ofDigitalService(...);\n     * // create timer recording source.\n     * TimerRecordSource source = HdmiTimerRecourdSources.ofDigitalSource(timerInfo, recordSource);\n     * tvClient.startTimerRecording(recorderAddress, source);\n     * </pre>\n     *\n     * @param recorderAddress target recorder address\n     * @param sourceType type of record source. It should be one of\n     *          {@link HdmiControlManager#TIMER_RECORDING_TYPE_DIGITAL},\n     *          {@link HdmiControlManager#TIMER_RECORDING_TYPE_ANALOGUE},\n     *          {@link HdmiControlManager#TIMER_RECORDING_TYPE_EXTERNAL}.\n     * @param source record source to be used\n     ",
    "links" : [ "HdmiControlManager#TIMER_RECORDING_TYPE_DIGITAL", "HdmiControlManager#TIMER_RECORDING_TYPE_ANALOGUE", "HdmiControlManager#TIMER_RECORDING_TYPE_EXTERNAL" ]
  }, {
    "name" : "private void checkTimerRecordingSourceType(int sourceType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearTimerRecording(int recorderAddress, int sourceType, TimerRecordSource source)",
    "returnType" : "void",
    "comment" : "\n     * Clears timer recording with the given recorder address and recording source.\n     * For more details, please refer {@link #startTimerRecording(int, int, TimerRecordSource)}.\n     ",
    "links" : [ "#startTimerRecording" ]
  }, {
    "name" : "public void setHdmiMhlVendorCommandListener(HdmiMhlVendorCommandListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@link HdmiMhlVendorCommandListener} to get incoming MHL vendor command.\n     *\n     * @param listener to receive incoming MHL vendor command\n     ",
    "links" : [ "HdmiMhlVendorCommandListener" ]
  }, {
    "name" : "private IHdmiMhlVendorCommandListener getListenerWrapper(final HdmiMhlVendorCommandListener listener)",
    "returnType" : "IHdmiMhlVendorCommandListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendMhlVendorCommand(int portId, int offset, int length, byte[] data)",
    "returnType" : "void",
    "comment" : "\n     * Sends MHL vendor command to the device connected to a port of the given portId.\n     *\n     * @param portId id of port to send MHL vendor command\n     * @param offset offset in the in given data\n     * @param length length of data. offset + length should be bound to length of data.\n     * @param data container for vendor command data. It should be 16 bytes.\n     * @throws IllegalArgumentException if the given parameters are invalid\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "VENDOR_DATA_SIZE" ],
  "methodNames" : [ " static HdmiTvClient create(IHdmiControlService service)", "public int getDeviceType()", "public void deviceSelect(int logicalAddress, @NonNull SelectCallback callback)", "private static IHdmiControlCallback getCallbackWrapper(final SelectCallback callback)", "public void portSelect(int portId, @NonNull SelectCallback callback)", "public void setInputChangeListener(InputChangeListener listener)", "private static IHdmiInputChangeListener getListenerWrapper(final InputChangeListener listener)", "public List<HdmiDeviceInfo> getDeviceList()", "public void setSystemAudioMode(boolean enabled, SelectCallback callback)", "public void setSystemAudioVolume(int oldIndex, int newIndex, int maxIndex)", "public void setSystemAudioMute(boolean mute)", "public void setRecordListener(@NonNull HdmiRecordListener listener)", "public void sendStandby(int deviceId)", "private static IHdmiRecordListener getListenerWrapper(final HdmiRecordListener callback)", "public void startOneTouchRecord(int recorderAddress, @NonNull RecordSource source)", "public void stopOneTouchRecord(int recorderAddress)", "public void startTimerRecording(int recorderAddress, int sourceType, TimerRecordSource source)", "private void checkTimerRecordingSourceType(int sourceType)", "public void clearTimerRecording(int recorderAddress, int sourceType, TimerRecordSource source)", "public void setHdmiMhlVendorCommandListener(HdmiMhlVendorCommandListener listener)", "private IHdmiMhlVendorCommandListener getListenerWrapper(final HdmiMhlVendorCommandListener listener)", "public void sendMhlVendorCommand(int portId, int offset, int length, byte[] data)" ]
}