{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/ObservableSupplier.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "ObservableSupplier",
  "comment" : "\n * ObservableSupplier wraps an asynchronously provided object E, notifying observers when the\n * dependency is available. This allows classes dependent on E to be provided with a\n * ObservableSupplier during construction and register a Callback<E> to be notified when the needed\n * dependency is available.\n *\n * This class must only be accessed from a single thread.\n *\n * For classes owning the ObservableSupplier and providing it as a dependency to others, see\n * {@link ObservableSupplierImpl}.\n *\n * For classes using a ObservableSupplier to receive a dependency:\n *   - To be notified when the object is available, call {@link #addObserver(Callback)} with a\n *     Callback to be notified when the object is available.\n *   - If the object is already available, the Callback will be called immediately.\n *   - The Callback may be called multiple times if the object wrapped by the ObservableSupplier\n *     changes.\n *\n * @param <E> The type of the wrapped object.\n ",
  "links" : [ "#addObserver(Callback)", "org.chromium.base.supplier.ObservableSupplierImpl" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " E addObserver(Callback<E> obs)",
    "returnType" : "E",
    "comment" : "\n     * @param obs An observer to be notified when the object owned by this supplier is available.\n     *       If the object is already available, the callback will be notified at the end of the\n     *       current message loop (so long as the object hasn't changed).\n     * @return The current object or null if it hasn't been set yet.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeObserver(Callback<E> obs)",
    "returnType" : "void",
    "comment" : "\n     * @param obs The observer to remove.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " E addObserver(Callback<E> obs)", " void removeObserver(Callback<E> obs)" ],
  "variableNames" : [ ]
}