{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ThreadUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "ThreadUtils",
  "comment" : " Helper methods to deal with threading related tasks. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWillOverride",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUiThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThreadAssertsDisabledForTesting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setWillOverrideUiThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clearUiThreadForTesting()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setUiThread(Looper looper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Handler getUiThreadHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void runOnUiThreadBlocking(final Runnable r)",
    "returnType" : "void",
    "comment" : "\n     * Run the supplied Runnable on the main thread. The method will block until the Runnable\n     * completes.\n     *\n     * Note that non-test usage of this function is heavily discouraged. For non-tests, use\n     * callbacks rather than blocking threads.\n     *\n     * @param r The Runnable to run.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T runOnUiThreadBlockingNoException(Callable<T> c)",
    "returnType" : "T",
    "comment" : "\n     * Run the supplied Callable on the main thread, wrapping any exceptions in a RuntimeException.\n     * The method will block until the Callable completes.\n     *\n     * Note that non-test usage of this function is heavily discouraged. For non-tests, use\n     * callbacks rather than blocking threads.\n     *\n     * @param c The Callable to run\n     * @return The result of the callable\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T runOnUiThreadBlocking(Callable<T> c) throws ExecutionException",
    "returnType" : "T",
    "comment" : "\n     * Run the supplied Callable on the main thread, The method will block until the Callable\n     * completes.\n     *\n     * Note that non-test usage of this function is heavily discouraged. For non-tests, use\n     * callbacks rather than blocking threads.\n     *\n     * @param c The Callable to run\n     * @return The result of the callable\n     * @throws ExecutionException c's exception\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FutureTask<T> runOnUiThread(FutureTask<T> task)",
    "returnType" : "FutureTask<T>",
    "comment" : "\n     * Run the supplied FutureTask on the main thread. The method will block only if the current\n     * thread is the main thread.\n     *\n     * @param task The FutureTask to run\n     * @return The queried task (to aid inline construction)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FutureTask<T> runOnUiThread(Callable<T> c)",
    "returnType" : "FutureTask<T>",
    "comment" : "\n     * Run the supplied Callable on the main thread. The method will block only if the current\n     * thread is the main thread.\n     *\n     * @param c The Callable to run\n     * @return A FutureTask wrapping the callable to retrieve results\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void runOnUiThread(Runnable r)",
    "returnType" : "void",
    "comment" : "\n     * Run the supplied Runnable on the main thread. The method will block only if the current\n     * thread is the main thread.\n     *\n     * @param r The Runnable to run\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FutureTask<T> postOnUiThread(FutureTask<T> task)",
    "returnType" : "FutureTask<T>",
    "comment" : "\n     * Post the supplied FutureTask to run on the main thread. The method will not block, even if\n     * called on the UI thread.\n     *\n     * @param task The FutureTask to run\n     * @return The queried task (to aid inline construction)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void postOnUiThread(Runnable r)",
    "returnType" : "void",
    "comment" : "\n     * Post the supplied Runnable to run on the main thread. The method will not block, even if\n     * called on the UI thread.\n     *\n     * @param r The Runnable to run\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void postOnUiThreadDelayed(Runnable r, long delayMillis)",
    "returnType" : "void",
    "comment" : "\n     * Post the supplied Runnable to run on the main thread after the given amount of time. The\n     * method will not block, even if called on the UI thread.\n     *\n     * @param r The Runnable to run\n     * @param delayMillis The delay in milliseconds until the Runnable will be run\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertOnUiThread()",
    "returnType" : "void",
    "comment" : "\n     * Throw an exception (when DCHECKs are enabled) if currently not running on the UI thread.\n     *\n     * Can be disabled by setThreadAssertsDisabledForTesting(true).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void checkUiThread()",
    "returnType" : "void",
    "comment" : "\n     * Throw an exception (regardless of build) if currently not running on the UI thread.\n     *\n     * Can be disabled by setThreadAssertsEnabledForTesting(false).\n     *\n     * @see #assertOnUiThread()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertOnBackgroundThread()",
    "returnType" : "void",
    "comment" : "\n     * Throw an exception (when DCHECKs are enabled) if currently running on the UI thread.\n     *\n     * Can be disabled by setThreadAssertsDisabledForTesting(true).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setThreadAssertsDisabledForTesting(boolean disabled)",
    "returnType" : "void",
    "comment" : "\n     * Disables thread asserts.\n     *\n     * Can be used by tests where code that normally runs multi-threaded is going to run\n     * single-threaded for the test (otherwise asserts that are valid in production would fail in\n     * those tests).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean runningOnUiThread()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true iff the current thread is the main (UI) thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Looper getUiThreadLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setThreadPriorityAudio(int tid)",
    "returnType" : "void",
    "comment" : " Set thread priority to audio. ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isThreadPriorityAudio(int tid)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether Thread priority is THREAD_PRIORITY_AUDIO or not.\n     * @param tid Thread id.\n     * @return true for THREAD_PRIORITY_AUDIO and false otherwise.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setWillOverrideUiThread()", "public static void clearUiThreadForTesting()", "public static void setUiThread(Looper looper)", "public static Handler getUiThreadHandler()", "public static void runOnUiThreadBlocking(final Runnable r)", "public static T runOnUiThreadBlockingNoException(Callable<T> c)", "public static T runOnUiThreadBlocking(Callable<T> c) throws ExecutionException", "public static FutureTask<T> runOnUiThread(FutureTask<T> task)", "public static FutureTask<T> runOnUiThread(Callable<T> c)", "public static void runOnUiThread(Runnable r)", "public static FutureTask<T> postOnUiThread(FutureTask<T> task)", "public static void postOnUiThread(Runnable r)", "public static void postOnUiThreadDelayed(Runnable r, long delayMillis)", "public static void assertOnUiThread()", "public static void checkUiThread()", "public static void assertOnBackgroundThread()", "public static void setThreadAssertsDisabledForTesting(boolean disabled)", "public static boolean runningOnUiThread()", "public static Looper getUiThreadLooper()", "public static void setThreadPriorityAudio(int tid)", "private static boolean isThreadPriorityAudio(int tid)" ],
  "variableNames" : [ "sLock", "sWillOverride", "sUiThreadHandler", "sThreadAssertsDisabledForTesting" ]
}