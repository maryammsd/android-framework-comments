{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/usage/UsageStats.java",
  "packageName" : "android.app.usage",
  "className" : "UsageStats",
  "comment" : "\n * Contains usage statistics for an app package for a specific\n * time range.\n ",
  "variables" : [ {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageToken",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mBeginTimeStamp",
    "type" : "long",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mEndTimeStamp",
    "type" : "long",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastTimeUsed",
    "type" : "long",
    "comment" : "\n     * Last time an activity is at foreground (have focus), this is corresponding to\n     * {@link android.app.usage.UsageEvents.Event#ACTIVITY_RESUMED} event.\n     * {@hide}\n     ",
    "links" : [ "android.app.usage.UsageEvents.Event#ACTIVITY_RESUMED" ]
  }, {
    "name" : "mLastTimeVisible",
    "type" : "long",
    "comment" : "\n     * Last time an activity is visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mTotalTimeInForeground",
    "type" : "long",
    "comment" : "\n     * Total time this package's activity is in foreground.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mTotalTimeVisible",
    "type" : "long",
    "comment" : "\n     * Total time this package's activity is visible.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastTimeForegroundServiceUsed",
    "type" : "long",
    "comment" : "\n     * Last time foreground service is started.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mTotalTimeForegroundServiceUsed",
    "type" : "long",
    "comment" : "\n     * Total time this package's foreground service is started.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mLaunchCount",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mAppLaunchCount",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastEvent",
    "type" : "int",
    "comment" : " Last activity ACTIVITY_RESUMED or ACTIVITY_PAUSED event.\n     * {@hide}\n     * @deprecated use {@link #mActivities} instead.\n     ",
    "links" : [ "#mActivities" ]
  }, {
    "name" : "mActivities",
    "type" : "SparseIntArray",
    "comment" : "\n     * Key is instanceId of the activity (ActivityRecode appToken hashCode)..\n     * Value is this activity's last event, one of ACTIVITY_RESUMED, ACTIVITY_PAUSED or\n     * ACTIVITY_STOPPED.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mForegroundServices",
    "type" : "ArrayMap<String, Integer>",
    "comment" : "\n     * If a foreground service is started, it has one entry in this map.\n     * When a foreground service is stopped, it is removed from this set.\n     * Key is foreground service class name.\n     * Value is the foreground service's last event, it is FOREGROUND_SERVICE_START.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mChooserCounts",
    "type" : "ArrayMap<String, ArrayMap<String, Integer>>",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mChooserCountsObfuscated",
    "type" : "SparseArray<SparseIntArray>",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<UsageStats>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public UsageStats getObfuscatedForInstantApp()",
    "returnType" : "UsageStats",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getFirstTimeStamp()",
    "returnType" : "long",
    "comment" : "\n     * Get the beginning of the time range this {@link android.app.usage.UsageStats} represents,\n     * measured in milliseconds since the epoch.\n     * <p/>\n     * See {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "#currentTimeMillis()", "android.app.usage.UsageStats" ]
  }, {
    "name" : "public long getLastTimeStamp()",
    "returnType" : "long",
    "comment" : "\n     * Get the end of the time range this {@link android.app.usage.UsageStats} represents,\n     * measured in milliseconds since the epoch.\n     * <p/>\n     * See {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "#currentTimeMillis()", "android.app.usage.UsageStats" ]
  }, {
    "name" : "public long getLastTimeUsed()",
    "returnType" : "long",
    "comment" : "\n     * Get the last time this package's activity was used, measured in milliseconds since the epoch.\n     * <p/>\n     * See {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "#currentTimeMillis()" ]
  }, {
    "name" : "public long getLastTimeVisible()",
    "returnType" : "long",
    "comment" : "\n     * Get the last time this package's activity is visible in the UI, measured in milliseconds\n     * since the epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTimeInForeground()",
    "returnType" : "long",
    "comment" : "\n     * Get the total time this package spent in the foreground, measured in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalTimeVisible()",
    "returnType" : "long",
    "comment" : "\n     * Get the total time this package's activity is visible in the UI, measured in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastTimeForegroundServiceUsed()",
    "returnType" : "long",
    "comment" : "\n     * Get the last time this package's foreground service was used, measured in milliseconds since\n     * the epoch.\n     * <p/>\n     * See {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "#currentTimeMillis()" ]
  }, {
    "name" : "public long getTotalTimeForegroundServiceUsed()",
    "returnType" : "long",
    "comment" : "\n     * Get the total time this package's foreground services are started, measured in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAppLaunchCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times the app was launched as an activity from outside of the app.\n     * Excludes intra-app activity transitions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void mergeEventMap(SparseIntArray left, SparseIntArray right)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void mergeEventMap(ArrayMap<String, Integer> left, ArrayMap<String, Integer> right)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void add(UsageStats right)",
    "returnType" : "void",
    "comment" : "\n     * Add the statistics from the right {@link UsageStats} to the left. The package name for\n     * both {@link UsageStats} objects must be the same.\n     * @param right The {@link UsageStats} object to merge into this one.\n     * @throws java.lang.IllegalArgumentException if the package names of the two\n     *         {@link UsageStats} objects are different.\n     ",
    "links" : [ "android.app.usage.UsageStats" ]
  }, {
    "name" : "private boolean hasForegroundActivity()",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if any activity is in foreground.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasVisibleActivity()",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if any activity is visible.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean anyForegroundServiceStarted()",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if any foreground service is started.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incrementTimeUsed(long timeStamp)",
    "returnType" : "void",
    "comment" : "\n     * Increment total time in foreground and update last time in foreground.\n     * @param timeStamp current timestamp.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incrementTimeVisible(long timeStamp)",
    "returnType" : "void",
    "comment" : "\n     * Increment total time visible and update last time visible.\n     * @param timeStamp current timestmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incrementServiceTimeUsed(long timeStamp)",
    "returnType" : "void",
    "comment" : "\n     * Increment total time foreground service is used and update last time foreground service is\n     * used.\n     * @param timeStamp current timestamp.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateActivity(String className, long timeStamp, int eventType, int instanceId)",
    "returnType" : "void",
    "comment" : "\n     * Update by an event of an activity.\n     * @param className className of the activity.\n     * @param timeStamp timeStamp of the event.\n     * @param eventType type of the event.\n     * @param instanceId hashCode of the ActivityRecord's appToken.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateForegroundService(String className, long timeStamp, int eventType)",
    "returnType" : "void",
    "comment" : "\n     * Update by an event of an foreground service.\n     * @param className className of the foreground service.\n     * @param timeStamp timeStamp of the event.\n     * @param eventType type of the event.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(String className, long timeStamp, int eventType, int instanceId)",
    "returnType" : "void",
    "comment" : "\n     * Update the UsageStats by a activity or foreground service event.\n     * @param className class name of a activity or foreground service, could be null to if this\n     *                  is sent to all activities/services in this package.\n     * @param timeStamp Epoch timestamp in milliseconds.\n     * @param eventType event type as in {@link UsageEvents.Event}\n     * @param instanceId if className is an activity, the hashCode of ActivityRecord's appToken.\n     *                 if className is not an activity, instanceId is not used.\n     * @hide\n     ",
    "links" : [ "UsageEvents.Event" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeSparseIntArray(Parcel dest, SparseIntArray arr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle eventMapToBundle(ArrayMap<String, Integer> eventMap)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPackageName", "mPackageToken", "mBeginTimeStamp", "mEndTimeStamp", "mLastTimeUsed", "mLastTimeVisible", "mTotalTimeInForeground", "mTotalTimeVisible", "mLastTimeForegroundServiceUsed", "mTotalTimeForegroundServiceUsed", "mLaunchCount", "mAppLaunchCount", "mLastEvent", "mActivities", "mForegroundServices", "mChooserCounts", "mChooserCountsObfuscated", "CREATOR" ],
  "methodNames" : [ "public UsageStats getObfuscatedForInstantApp()", "public String getPackageName()", "public long getFirstTimeStamp()", "public long getLastTimeStamp()", "public long getLastTimeUsed()", "public long getLastTimeVisible()", "public long getTotalTimeInForeground()", "public long getTotalTimeVisible()", "public long getLastTimeForegroundServiceUsed()", "public long getTotalTimeForegroundServiceUsed()", "public int getAppLaunchCount()", "private void mergeEventMap(SparseIntArray left, SparseIntArray right)", "private void mergeEventMap(ArrayMap<String, Integer> left, ArrayMap<String, Integer> right)", "public void add(UsageStats right)", "private boolean hasForegroundActivity()", "private boolean hasVisibleActivity()", "private boolean anyForegroundServiceStarted()", "private void incrementTimeUsed(long timeStamp)", "private void incrementTimeVisible(long timeStamp)", "private void incrementServiceTimeUsed(long timeStamp)", "private void updateActivity(String className, long timeStamp, int eventType, int instanceId)", "private void updateForegroundService(String className, long timeStamp, int eventType)", "public void update(String className, long timeStamp, int eventType, int instanceId)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private void writeSparseIntArray(Parcel dest, SparseIntArray arr)", "private Bundle eventMapToBundle(ArrayMap<String, Integer> eventMap)" ]
}