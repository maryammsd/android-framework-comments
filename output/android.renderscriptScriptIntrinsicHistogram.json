{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/ScriptIntrinsicHistogram.java",
  "packageName" : "android.renderscript",
  "className" : "ScriptIntrinsicHistogram",
  "comment" : "\n * Intrinsic Histogram filter.\n *\n *\n *",
  "variables" : [ {
    "name" : "mOut",
    "type" : "Allocation",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ScriptIntrinsicHistogram create(RenderScript rs, Element e)",
    "returnType" : "ScriptIntrinsicHistogram",
    "comment" : "\n     * Create an intrinsic for calculating the histogram of an uchar\n     * or uchar4 image.\n     *\n     * Supported elements types are\n     * {@link Element#U8_4}, {@link Element#U8_3},\n     * {@link Element#U8_2}, {@link Element#U8}\n     *\n     * @param rs The RenderScript context\n     * @param e Element type for inputs\n     *\n     * @return ScriptIntrinsicHistogram\n     ",
    "links" : [ "Element#U8_4", "Element#U8_3", "Element#U8_2", "Element#U8" ]
  }, {
    "name" : "public void forEach(Allocation ain)",
    "returnType" : "void",
    "comment" : "\n     * Process an input buffer and place the histogram into the\n     * output allocation. The output allocation may be a narrower\n     * vector size than the input. In this case the vector size of\n     * the output is used to determine how many of the input\n     * channels are used in the computation. This is useful if you\n     * have an RGBA input buffer but only want the histogram for\n     * RGB.\n     *\n     * 1D and 2D input allocations are supported.\n     *\n     * @param ain The input image\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Allocation ain, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Process an input buffer and place the histogram into the\n     * output allocation. The output allocation may be a narrower\n     * vector size than the input. In this case the vector size of\n     * the output is used to determine how many of the input\n     * channels are used in the computation. This is useful if you\n     * have an RGBA input buffer but only want the histogram for\n     * RGB.\n     *\n     * 1D and 2D input allocations are supported.\n     *\n     * @param ain The input image\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDotCoefficients(float r, float g, float b, float a)",
    "returnType" : "void",
    "comment" : "\n     * Set the coefficients used for the RGBA to Luminocity\n     * calculation. The default is {0.299f, 0.587f, 0.114f, 0.f}.\n     *\n     * Coefficients must be >= 0 and sum to 1.0 or less.\n     *\n     * @param r Red coefficient\n     * @param g Green coefficient\n     * @param b Blue coefficient\n     * @param a Alpha coefficient\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutput(Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Set the output of the histogram.  32 bit integer types are\n     * supported.\n     *\n     * @param aout The output allocation\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach_Dot(Allocation ain)",
    "returnType" : "void",
    "comment" : "\n     * Process an input buffer and place the histogram into the\n     * output allocation. The dot product of the input channel and\n     * the coefficients from 'setDotCoefficients' are used to\n     * calculate the output values.\n     *\n     * 1D and 2D input allocations are supported.\n     *\n     * @param ain The input image\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach_Dot(Allocation ain, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Process an input buffer and place the histogram into the\n     * output allocation. The dot product of the input channel and\n     * the coefficients from 'setDotCoefficients' are used to\n     * calculate the output values.\n     *\n     * 1D and 2D input allocations are supported.\n     *\n     * @param ain The input image\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelID_Separate()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for this intrinsic kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.FieldID getFieldID_Input()",
    "returnType" : "Script.FieldID",
    "comment" : "\n     * Get a FieldID for the input field of this intrinsic.\n     *\n     * @return Script.FieldID The FieldID object.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mOut" ],
  "methodNames" : [ "public static ScriptIntrinsicHistogram create(RenderScript rs, Element e)", "public void forEach(Allocation ain)", "public void forEach(Allocation ain, Script.LaunchOptions opt)", "public void setDotCoefficients(float r, float g, float b, float a)", "public void setOutput(Allocation aout)", "public void forEach_Dot(Allocation ain)", "public void forEach_Dot(Allocation ain, Script.LaunchOptions opt)", "public Script.KernelID getKernelID_Separate()", "public Script.FieldID getFieldID_Input()" ]
}