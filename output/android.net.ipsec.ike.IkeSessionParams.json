{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/IkeSessionParams.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "IkeSessionParams",
  "comment" : "\n * IkeSessionParams contains all user provided configurations for negotiating an {@link IkeSession}.\n *\n * <p>Note that all negotiated configurations will be reused during rekey including SA Proposal and\n * lifetime.\n ",
  "links" : [ "android.net.ipsec.ike.IkeSession" ],
  "variables" : [ {
    "name" : "IKE_AUTH_METHOD_PSK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_AUTH_METHOD_PUB_KEY_SIGNATURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_AUTH_METHOD_EAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUTH_DIRECTION_LOCAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUTH_DIRECTION_REMOTE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUTH_DIRECTION_BOTH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_OPTION_ACCEPT_ANY_REMOTE_ID",
    "type" : "int",
    "comment" : "\n     * If set, the IKE library will accept any remote (server) identity, even if it does not match\n     * the configured remote identity\n     *\n     * <p>See {@link Builder#setRemoteIdentification(IkeIdentification)}\n     ",
    "links" : [ "#setRemoteIdentification(IkeIdentification)" ]
  }, {
    "name" : "IKE_OPTION_EAP_ONLY_AUTH",
    "type" : "int",
    "comment" : "\n     * If set, and EAP has been configured as the authentication method, the IKE library will\n     * request that the remote (also) use an EAP-only authentication flow.\n     *\n     * <p>@see {@link Builder#setAuthEap(X509Certificate, EapSessionConfig)}\n     ",
    "links" : [ "#setAuthEap(X509Certificate" ]
  }, {
    "name" : "IKE_OPTION_MOBIKE",
    "type" : "int",
    "comment" : "\n     * If set, the IKE Session will attempt to handle IP address changes using RFC4555 MOBIKE.\n     *\n     * <p>Upon IP address changes (including Network changes), the IKE session will initiate an RFC\n     * 4555 MOBIKE procedure, migrating both this IKE Session and associated IPsec Transforms to the\n     * new local and remote address pair.\n     *\n     * <p>The IKE library will first attempt to enable MOBIKE to handle the changes of underlying\n     * network and addresses. For callers targeting SDK {@link android.os.Build.VERSION_CODES#S_V2}\n     * and earlier, this option will implicitly enable the support for rekey-based mobility, and\n     * thus if the server does not support MOBIKE, the IKE Session will try migration by rekeying\n     * all associated IPsec SAs. This rekey-based mobility feature is not best-practice and has\n     * technical issues; accordingly, it will no longer be enabled for callers targeting SDK {@link\n     * android.os.Build.VERSION_CODES#TIRAMISU} and above.\n     *\n     * <p>Checking whether or not MOBIKE is supported by both the IKE library and the server in an\n     * IKE Session is done via {@link IkeSessionConfiguration#isIkeExtensionEnabled(int)}.\n     *\n     * <p>It is recommended that IKE_OPTION_MOBIKE be enabled unless precluded for compatibility\n     * reasons.\n     *\n     * <p>If this option is set for an IKE Session, Transport-mode SAs will not be allowed in that\n     * Session.\n     *\n     * <p>Callers that need to perform migration of IPsec transforms and tunnels MUST implement\n     * migration specific methods in {@link IkeSessionCallback} and {@link ChildSessionCallback}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.net.ipsec.ike.IkeSessionCallback", "android.net.ipsec.ike.IkeSessionConfiguration#isIkeExtensionEnabled(int)", "android.net.ipsec.ike.ChildSessionCallback", "android.os.Build.VERSION_CODES#S_V2" ]
  }, {
    "name" : "IKE_OPTION_FORCE_PORT_4500",
    "type" : "int",
    "comment" : "\n     * Configures the IKE session to always send to port 4500.\n     *\n     * <p>If set, the IKE Session will be initiated and maintained exclusively using\n     * destination port 4500, regardless of the presence of NAT. Otherwise, the IKE Session will\n     * be initiated on destination port 500; then, if either a NAT is detected or both MOBIKE\n     * and NAT-T are supported by the peer, it will proceed on port 4500.\n     ",
    "links" : [ ]
  }, {
    "name" : "IKE_OPTION_INITIAL_CONTACT",
    "type" : "int",
    "comment" : "\n     * If set, the IKE library will send INITIAL_CONTACT notification to the peers.\n     *\n     * <p>If this option is set, the INITIAL_CONTACT notification payload is sent in IKE_AUTH. The\n     * client can use this option to assert to the peer that this IKE SA is the only IKE SA\n     * currently active between the authenticated identities.\n     *\n     * <p>@see \"https://tools.ietf.org/html/rfc7296#section-2.4\" RFC 7296, Internet Key Exchange\n     * Protocol Version 2 (IKEv2)\n     *\n     * <p>@see {@link Builder#addIkeOption(int)}\n     ",
    "links" : [ "#addIkeOption(int)" ]
  }, {
    "name" : "IKE_OPTION_REKEY_MOBILITY",
    "type" : "int",
    "comment" : "\n     * If set, the IKE Session will attempt to handle IP address changes by rekeying with new\n     * addresses.\n     *\n     * <p>Upon IP address changes (including Network changes), the IKE session will initiate a\n     * standard rekey Child procedure using the new local address to replace the existing associated\n     * IPsec transforms with new transforms tied to the new addresses. At the same time the IKE\n     * library will notify the remote of the address change and implicitly migrate itself to the new\n     * address.\n     *\n     * <p>This capability is NOT negotiated; it is the responsibility of the caller to ensure that\n     * the remote supports rekey-based mobility. Failure to do so may lead to increased disruption\n     * during mobility events.\n     *\n     * <p>This option may be set together with {@link #IKE_OPTION_MOBIKE} as a fallback. If both\n     * {@link #IKE_OPTION_MOBIKE} and {@link #IKE_OPTION_REKEY_MOBILITY} are set:\n     *\n     * <ul>\n     *   <li>If the server has indicated MOBIKE support, MOBIKE will be used for mobility\n     *   <li>Otherwise, Rekey will be used for mobility\n     * </ul>\n     *\n     * <p>For callers targeting SDK {@link android.os.Build.VERSION_CODES#S_V2} or earlier, setting\n     * {@link #IKE_OPTION_MOBIKE} will implicitly set {@link #IKE_OPTION_REKEY_MOBILITY}.\n     *\n     * <p>If this option is set for an IKE Session, Transport-mode SAs will not be allowed in that\n     * Session.\n     *\n     * <p>Callers that need to perform migration of IPsec transforms and tunnels MUST implement\n     * migration specific methods in {@link IkeSessionCallback} and {@link ChildSessionCallback}.\n     *\n     * @see {@link IKE_OPTION_MOBIKE}\n     * @see {@link IkeSession#setNetwork(Network)}\n     * @hide\n     ",
    "links" : [ "#IKE_OPTION_REKEY_MOBILITY", "android.net.ipsec.ike.IkeSessionCallback", "IKE_OPTION_MOBIKE", "android.net.ipsec.ike.ChildSessionCallback", "#IKE_OPTION_MOBIKE", "android.net.ipsec.ike.IkeSession#setNetwork(Network)", "android.os.Build.VERSION_CODES#S_V2" ]
  }, {
    "name" : "IKE_OPTION_AUTOMATIC_ADDRESS_FAMILY_SELECTION",
    "type" : "int",
    "comment" : "\n     * If set, IKE Session will automatically select address families.\n     *\n     * <p>IP address families often have different performance characteristics on any given network.\n     * For example, IPv6 ESP may not be hardware-accelerated by middleboxes, or completely\n     * black-holed. This option allows the IKE session to automatically select based on the IP\n     * address family it perceives as the most likely to work well.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IKE_OPTION_AUTOMATIC_NATT_KEEPALIVES",
    "type" : "int",
    "comment" : "\n     * If set, the IKE session will select the NATT keepalive timers automatically.\n     *\n     * <p>NATT keepalive timers will be selected and adjusted based on the underlying network\n     * configurations, and updated as underlying network configurations change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IKE_OPTION_AUTOMATIC_KEEPALIVE_ON_OFF",
    "type" : "int",
    "comment" : "  option.",
    "links" : [ ]
  }, {
    "name" : "MIN_IKE_OPTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_IKE_OPTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ESP_IP_VERSION_AUTO",
    "type" : "int",
    "comment" : "\n     * Automatically choose the IP version for ESP packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ESP_IP_VERSION_IPV4",
    "type" : "int",
    "comment" : "\n     * Use IPv4 for ESP packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ESP_IP_VERSION_IPV6",
    "type" : "int",
    "comment" : "\n     * Use IPv6 for ESP packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ESP_ENCAP_TYPE_AUTO",
    "type" : "int",
    "comment" : "\n     * Automatically choose the encapsulation type for ESP packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ESP_ENCAP_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Do not encapsulate ESP packets in transport layer protocol.\n     *\n     * Under this encapsulation type, the IKE Session will send NAT detection only when it is\n     * performing mobility update from an environment with a NAT, as an attempt to stop using\n     * UDP encapsulation for the ESP packets. If IKE Session still detects a NAT in this case,\n     * the IKE Session will be terminated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ESP_ENCAP_TYPE_UDP",
    "type" : "int",
    "comment" : "\n     * Encapsulate ESP packets in UDP.\n     *\n     * Under this encapsulation type, the IKE Session will send NAT detection and fake a local\n     * NAT. In this case the IKE Session will always encapsulate ESP packets in UDP as long as\n     * the server also supports NAT traversal.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NATT_KEEPALIVE_INTERVAL_AUTO",
    "type" : "int",
    "comment" : "\n     * Automatically choose the keepalive interval.\n     *\n     * This constant can be passed to\n     * {@link com.android.internal.net.ipsec.ike.IkeSessionStateMachine#setNetwork} to signify\n     * that the keepalive delay should be deduced automatically from the underlying network.\n     *\n     * @see #getNattKeepAliveDelaySeconds\n     * @hide\n     ",
    "links" : [ "com.android.internal.net.ipsec.ike.IkeSessionStateMachine#setNetwork" ]
  }, {
    "name" : "IKE_DPD_DELAY_SEC_DISABLED",
    "type" : "int",
    "comment" : "\n     * Setting timer to this value will disable the Dead Peer Detection(DPD).\n     *\n     * <p>@see {@link Builder#setDpdDelaySeconds}\n     ",
    "links" : [ "#setDpdDelaySeconds" ]
  }, {
    "name" : "IP_VERSION_TO_STR",
    "type" : "SparseArray<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ENCAP_TYPE_TO_STR",
    "type" : "SparseArray<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_HARD_LIFETIME_SEC_MINIMUM",
    "type" : "int",
    "comment" : " 5 minutes",
    "links" : [ ]
  }, {
    "name" : "IKE_HARD_LIFETIME_SEC_MAXIMUM",
    "type" : "int",
    "comment" : " 24 hours",
    "links" : [ ]
  }, {
    "name" : "IKE_HARD_LIFETIME_SEC_DEFAULT",
    "type" : "int",
    "comment" : " 4 hours",
    "links" : [ ]
  }, {
    "name" : "IKE_SOFT_LIFETIME_SEC_MINIMUM",
    "type" : "int",
    "comment" : " 2 minutes",
    "links" : [ ]
  }, {
    "name" : "IKE_SOFT_LIFETIME_SEC_DEFAULT",
    "type" : "int",
    "comment" : " 2 hours",
    "links" : [ ]
  }, {
    "name" : "IKE_LIFETIME_MARGIN_SEC_MINIMUM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_DPD_DELAY_SEC_MIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_DPD_DELAY_SEC_MAX",
    "type" : "int",
    "comment" : " 30 minutes",
    "links" : [ ]
  }, {
    "name" : "IKE_DPD_DELAY_SEC_DEFAULT",
    "type" : "int",
    "comment" : " 2 minutes",
    "links" : [ ]
  }, {
    "name" : "IKE_NATT_KEEPALIVE_DELAY_SEC_MIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_NATT_KEEPALIVE_DELAY_SEC_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_NATT_KEEPALIVE_DELAY_SEC_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DSCP_MIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DSCP_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DSCP_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_RETRANS_TIMEOUT_MS_MIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_RETRANS_TIMEOUT_MS_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_RETRANS_MAX_ATTEMPTS_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IKE_RETRANS_TIMEOUT_MS_LIST_DEFAULT",
    "type" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_RETRANS_TIMEOUT_MS_MIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_RETRANS_TIMEOUT_MS_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_RETRANS_TIMEOUT_MS_TOTAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_RETRANS_MAX_ATTEMPTS_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_RETRANS_TIMEOUT_MS_LIST_DEFAULT",
    "type" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SERVER_HOST_NAME_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SA_PROPOSALS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_ID_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_ID_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_AUTH_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_AUTH_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_ATTRIBUTES_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RETRANS_TIMEOUTS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_RETRANS_TIMEOUTS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IKE_OPTIONS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HARD_LIFETIME_SEC_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOFT_LIFETIME_SEC_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DPD_DELAY_SEC_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATT_KEEPALIVE_DELAY_SEC_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DSCP_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_IKE_FRAGMENT_SUPPORTED_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IP_VERSION_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCAP_TYPE_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerHostname",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultOrConfiguredNetwork",
    "type" : "Network",
    "comment" : " if this object equals to another object does not make sense.",
    "links" : [ ]
  }, {
    "name" : "mCallerConfiguredNetwork",
    "type" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSaProposals",
    "type" : "IkeSaProposal[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalIdentification",
    "type" : "IkeIdentification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteIdentification",
    "type" : "IkeIdentification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalAuthConfig",
    "type" : "IkeAuthConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteAuthConfig",
    "type" : "IkeAuthConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigRequests",
    "type" : "IkeConfigAttribute[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetransTimeoutMsList",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLivenessRetransTimeoutMsList",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIke3gppExtension",
    "type" : "Ike3gppExtension",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIkeOptions",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardLifetimeSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoftLifetimeSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDpdDelaySec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNattKeepaliveDelaySec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDscp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIpVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncapType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsIkeFragmentationSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void validateIkeOptionOrThrow(@IkeOption int ikeOption)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getOptionBitValue(int ikeOption)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IkeSessionParams fromPersistableBundle(@NonNull PersistableBundle in)",
    "returnType" : "IkeSessionParams",
    "comment" : "\n     * Constructs this object by deserializing a PersistableBundle\n     *\n     * <p>Constructed IkeSessionParams is guaranteed to be valid, as checked by the\n     * IkeSessionParams.Builder\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle toPersistableBundle()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Serializes this object to a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServerHostname()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the configured server hostname\n     *\n     * <p>The configured server hostname will be resolved during IKE Session creation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Network getConfiguredNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * Retrieves the configured {@link Network}, or null if was not set\n     *\n     * <p>This getter is for internal use. Not matter {@link Builder#Builder(Context)} or {@link\n     * Builder#Builder()} is used, this method will always return null if no Network was set by the\n     * caller.\n     *\n     * @hide\n     ",
    "links" : [ "#Builder(Context)", "#Builder()", "android.net.Network" ]
  }, {
    "name" : "public Network getNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * Retrieves the configured {@link Network}, or null if was not set.\n     *\n     * <p>@see {@link Builder#setNetwork(Network)}\n     ",
    "links" : [ "#setNetwork(Network)", "android.net.Network" ]
  }, {
    "name" : "public List<IkeSaProposal> getSaProposals()",
    "returnType" : "List<IkeSaProposal>",
    "comment" : "\n     * Retrieves all IkeSaProposals configured\n     *\n     * @deprecated Callers should use {@link #getIkeSaProposals()}. This method is deprecated\n     *     because its name does not match the return type.\n     * @hide\n     ",
    "links" : [ "#getIkeSaProposals()" ]
  }, {
    "name" : "public List<IkeSaProposal> getIkeSaProposals()",
    "returnType" : "List<IkeSaProposal>",
    "comment" : " Retrieves all IkeSaProposals configured ",
    "links" : [ ]
  }, {
    "name" : "public IkeSaProposal[] getSaProposalsInternal()",
    "returnType" : "IkeSaProposal[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IkeIdentification getLocalIdentification()",
    "returnType" : "IkeIdentification",
    "comment" : " Retrieves the local (client) identity ",
    "links" : [ ]
  }, {
    "name" : "public IkeIdentification getRemoteIdentification()",
    "returnType" : "IkeIdentification",
    "comment" : " Retrieves the required remote (server) identity ",
    "links" : [ ]
  }, {
    "name" : "public IkeAuthConfig getLocalAuthConfig()",
    "returnType" : "IkeAuthConfig",
    "comment" : " Retrieves the local (client) authentication configuration ",
    "links" : [ ]
  }, {
    "name" : "public IkeAuthConfig getRemoteAuthConfig()",
    "returnType" : "IkeAuthConfig",
    "comment" : " Retrieves the remote (server) authentication configuration ",
    "links" : [ ]
  }, {
    "name" : "public int getHardLifetimeSeconds()",
    "returnType" : "int",
    "comment" : " Use \"second\" because smaller unit won't make sense to describe a rekey interval.",
    "links" : [ ]
  }, {
    "name" : "public int getSoftLifetimeSeconds()",
    "returnType" : "int",
    "comment" : " Use \"second\" because smaller unit does not make sense to a rekey interval.",
    "links" : [ ]
  }, {
    "name" : "public int getDpdDelaySeconds()",
    "returnType" : "int",
    "comment" : " Use \"second\" because smaller unit does not make sense to a DPD delay.",
    "links" : [ ]
  }, {
    "name" : "public int getNattKeepAliveDelaySeconds()",
    "returnType" : "int",
    "comment" : " Use \"second\" because smaller unit does not make sense for a NATT Keepalive delay.",
    "links" : [ ]
  }, {
    "name" : "public int getDscp()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the DSCP field of IKE packets.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIpVersion()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the IP version.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEncapType()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the encap type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getRetransmissionTimeoutsMillis()",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves the relative retransmission timeout list in milliseconds\n     *\n     * <p>@see {@link Builder#setRetransmissionTimeoutsMillis(int[])}\n     ",
    "links" : [ "#setRetransmissionTimeoutsMillis(int" ]
  }, {
    "name" : "public int[] getLivenessRetransmissionTimeoutsMillis()",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves the relative retransmission timeout list for configuring on-demand liveness checks\n     * in milliseconds.\n     *\n     * <p>The on-demand liveness check uses the returned list of liveness retransmission timeouts\n     * set from {@link Builder#setLivenessRetransmissionTimeoutsMillis} or uses the default value of\n     * {0.5s, 1s, 2s, 4s, 8s} if no override is defined.\n     *\n     * <p>@see {@link Builder#setLivenessRetransmissionTimeoutsMillis} for more information about\n     * how the list is structured.\n     *\n     * @hide\n     ",
    "links" : [ "#setLivenessRetransmissionTimeoutsMillis" ]
  }, {
    "name" : "public Ike3gppExtension getIke3gppExtension()",
    "returnType" : "Ike3gppExtension",
    "comment" : "\n     * Retrieves the configured Ike3gppExtension, or null if it was not set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasIkeOption(long ikeOptionsRecord, @IkeOption int ikeOption)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIkeOption(@IkeOption int ikeOption)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given IKE Session negotiation option is set\n     *\n     * @param ikeOption the option to check.\n     * @throws IllegalArgumentException if the provided option is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> getIkeOptions()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Return all the enabled IKE Options\n     *\n     * @return A Set of enabled IKE options that have been added using {@link\n     *     Builder#addIkeOption(int)}\n     ",
    "links" : [ "#addIkeOption(int)" ]
  }, {
    "name" : "public long getHardLifetimeMsInternal()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getSoftLifetimeMsInternal()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIkeFragmentationSupported()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IkeConfigAttribute[] getConfigurationAttributesInternal()",
    "returnType" : "IkeConfigAttribute[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<IkeConfigRequest> getConfigurationRequests()",
    "returnType" : "List<IkeConfigRequest>",
    "comment" : "\n     * Retrieves the list of Configuration Requests\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the state of {@link IkeSessionParams}\n     *\n     * @param pw {@link PrintWriter} to write the state of the object.\n     * @param prefix prefix for indentation\n     * @hide\n     ",
    "links" : [ "java.io.PrintWriter", "android.net.ipsec.ike.IkeSessionParams" ]
  } ],
  "methodNames" : [ "private static void validateIkeOptionOrThrow(@IkeOption int ikeOption)", "private static long getOptionBitValue(int ikeOption)", "public static IkeSessionParams fromPersistableBundle(@NonNull PersistableBundle in)", "public PersistableBundle toPersistableBundle()", "public String getServerHostname()", "public Network getConfiguredNetwork()", "public Network getNetwork()", "public List<IkeSaProposal> getSaProposals()", "public List<IkeSaProposal> getIkeSaProposals()", "public IkeSaProposal[] getSaProposalsInternal()", "public IkeIdentification getLocalIdentification()", "public IkeIdentification getRemoteIdentification()", "public IkeAuthConfig getLocalAuthConfig()", "public IkeAuthConfig getRemoteAuthConfig()", "public int getHardLifetimeSeconds()", "public int getSoftLifetimeSeconds()", "public int getDpdDelaySeconds()", "public int getNattKeepAliveDelaySeconds()", "public int getDscp()", "public int getIpVersion()", "public int getEncapType()", "public int[] getRetransmissionTimeoutsMillis()", "public int[] getLivenessRetransmissionTimeoutsMillis()", "public Ike3gppExtension getIke3gppExtension()", "private static boolean hasIkeOption(long ikeOptionsRecord, @IkeOption int ikeOption)", "public boolean hasIkeOption(@IkeOption int ikeOption)", "public Set<Integer> getIkeOptions()", "public long getHardLifetimeMsInternal()", "public long getSoftLifetimeMsInternal()", "public boolean isIkeFragmentationSupported()", "public IkeConfigAttribute[] getConfigurationAttributesInternal()", "public List<IkeConfigRequest> getConfigurationRequests()", "public int hashCode()", "public boolean equals(Object o)", "public void dump(PrintWriter pw, String prefix)" ],
  "variableNames" : [ "IKE_AUTH_METHOD_PSK", "IKE_AUTH_METHOD_PUB_KEY_SIGNATURE", "IKE_AUTH_METHOD_EAP", "AUTH_DIRECTION_LOCAL", "AUTH_DIRECTION_REMOTE", "AUTH_DIRECTION_BOTH", "IKE_OPTION_ACCEPT_ANY_REMOTE_ID", "IKE_OPTION_EAP_ONLY_AUTH", "IKE_OPTION_MOBIKE", "IKE_OPTION_FORCE_PORT_4500", "IKE_OPTION_INITIAL_CONTACT", "IKE_OPTION_REKEY_MOBILITY", "IKE_OPTION_AUTOMATIC_ADDRESS_FAMILY_SELECTION", "IKE_OPTION_AUTOMATIC_NATT_KEEPALIVES", "IKE_OPTION_AUTOMATIC_KEEPALIVE_ON_OFF", "MIN_IKE_OPTION", "MAX_IKE_OPTION", "ESP_IP_VERSION_AUTO", "ESP_IP_VERSION_IPV4", "ESP_IP_VERSION_IPV6", "ESP_ENCAP_TYPE_AUTO", "ESP_ENCAP_TYPE_NONE", "ESP_ENCAP_TYPE_UDP", "NATT_KEEPALIVE_INTERVAL_AUTO", "IKE_DPD_DELAY_SEC_DISABLED", "IP_VERSION_TO_STR", "ENCAP_TYPE_TO_STR", "IKE_HARD_LIFETIME_SEC_MINIMUM", "IKE_HARD_LIFETIME_SEC_MAXIMUM", "IKE_HARD_LIFETIME_SEC_DEFAULT", "IKE_SOFT_LIFETIME_SEC_MINIMUM", "IKE_SOFT_LIFETIME_SEC_DEFAULT", "IKE_LIFETIME_MARGIN_SEC_MINIMUM", "IKE_DPD_DELAY_SEC_MIN", "IKE_DPD_DELAY_SEC_MAX", "IKE_DPD_DELAY_SEC_DEFAULT", "IKE_NATT_KEEPALIVE_DELAY_SEC_MIN", "IKE_NATT_KEEPALIVE_DELAY_SEC_MAX", "IKE_NATT_KEEPALIVE_DELAY_SEC_DEFAULT", "DSCP_MIN", "DSCP_MAX", "DSCP_DEFAULT", "IKE_RETRANS_TIMEOUT_MS_MIN", "IKE_RETRANS_TIMEOUT_MS_MAX", "IKE_RETRANS_MAX_ATTEMPTS_MAX", "IKE_RETRANS_TIMEOUT_MS_LIST_DEFAULT", "LIVENESS_RETRANS_TIMEOUT_MS_MIN", "LIVENESS_RETRANS_TIMEOUT_MS_MAX", "LIVENESS_RETRANS_TIMEOUT_MS_TOTAL", "LIVENESS_RETRANS_MAX_ATTEMPTS_MAX", "LIVENESS_RETRANS_TIMEOUT_MS_LIST_DEFAULT", "SERVER_HOST_NAME_KEY", "SA_PROPOSALS_KEY", "LOCAL_ID_KEY", "REMOTE_ID_KEY", "LOCAL_AUTH_KEY", "REMOTE_AUTH_KEY", "CONFIG_ATTRIBUTES_KEY", "RETRANS_TIMEOUTS_KEY", "LIVENESS_RETRANS_TIMEOUTS_KEY", "IKE_OPTIONS_KEY", "HARD_LIFETIME_SEC_KEY", "SOFT_LIFETIME_SEC_KEY", "DPD_DELAY_SEC_KEY", "NATT_KEEPALIVE_DELAY_SEC_KEY", "DSCP_KEY", "IS_IKE_FRAGMENT_SUPPORTED_KEY", "IP_VERSION_KEY", "ENCAP_TYPE_KEY", "mServerHostname", "mDefaultOrConfiguredNetwork", "mCallerConfiguredNetwork", "mSaProposals", "mLocalIdentification", "mRemoteIdentification", "mLocalAuthConfig", "mRemoteAuthConfig", "mConfigRequests", "mRetransTimeoutMsList", "mLivenessRetransTimeoutMsList", "mIke3gppExtension", "mIkeOptions", "mHardLifetimeSec", "mSoftLifetimeSec", "mDpdDelaySec", "mNattKeepaliveDelaySec", "mDscp", "mIpVersion", "mEncapType", "mIsIkeFragmentationSupported" ]
}