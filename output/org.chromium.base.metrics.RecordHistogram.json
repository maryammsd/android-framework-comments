{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/metrics/RecordHistogram.java",
  "packageName" : "org.chromium.base.metrics",
  "className" : "RecordHistogram",
  "comment" : "\n * Java API for recording UMA histograms.\n * ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void recordBooleanHistogram(String name, boolean sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a boolean UMA histogram of the given name. Boolean histogram has two\n     * buckets, corresponding to success (true) and failure (false). This is the Java equivalent of\n     * the UMA_HISTOGRAM_BOOLEAN C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, either true or false\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordEnumeratedHistogram(String name, int sample, int max)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in an enumerated histogram of the given name and boundary. Note that\n     * {@code max} identifies the histogram - it should be the same at every invocation. This is the\n     * Java equivalent of the UMA_HISTOGRAM_ENUMERATION C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, at least 0 and at most {@code max-1}\n     * @param max upper bound for legal sample values - all sample values have to be strictly\n     *            lower than {@code max}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordCount1MHistogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a count histogram. This is the Java equivalent of the\n     * UMA_HISTOGRAM_COUNTS_1M C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, at least 1 and at most 999999\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordCount100Histogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a count histogram. This is the Java equivalent of the\n     * UMA_HISTOGRAM_COUNTS_100 C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, at least 1 and at most 99\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordCount1000Histogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a count histogram. This is the Java equivalent of the\n     * UMA_HISTOGRAM_COUNTS_1000 C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, at least 1 and at most 999\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordCount100000Histogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a count histogram. This is the Java equivalent of the\n     * UMA_HISTOGRAM_COUNTS_100000 C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, at least 1 and at most 99999\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordCustomCountHistogram(String name, int sample, int min, int max, int numBuckets)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a count histogram. This is the Java equivalent of the\n     * UMA_HISTOGRAM_CUSTOM_COUNTS C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, expected to fall in range {@code [min, max)}\n     * @param min the smallest expected sample value; at least 1\n     * @param max the smallest sample value that will be recorded in overflow bucket\n     * @param numBuckets the number of buckets including underflow ({@code [0, min)}) and overflow\n     *                   ({@code [max, inf)}) buckets; at most 100\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordLinearCountHistogram(String name, int sample, int min, int max, int numBuckets)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a linear histogram. This is the Java equivalent for using\n     * {@code base::LinearHistogram}.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, expected to fall in range {@code [min, max)}\n     * @param min the smallest expected sample value; at least 1\n     * @param max the smallest sample value that will be recorded in overflow bucket\n     * @param numBuckets the number of buckets including underflow ({@code [0, min)}) and overflow\n     *                   ({@code [max, inf)}) buckets; at most 100\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordPercentageHistogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a percentage histogram. This is the Java equivalent of the\n     * UMA_HISTOGRAM_PERCENTAGE C++ macro.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, at least 0 and at most 100\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordSparseHistogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a sparse histogram. This is the Java equivalent of {@code base::UmaHistogramSparse}.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded: All values of {@code sample} are valid, including\n     *               negative values. Keep the number of distinct values across all users\n     *               {@code <= 100} ideally, definitely {@code <= 1000}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordTimesHistogram(String name, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of times. Useful for recording short durations. This is the\n     * Java equivalent of the UMA_HISTOGRAM_TIMES C++ macro.\n     * <p>\n     * Note that histogram samples will always be converted to milliseconds when logged.\n     *\n     * @param name name of the histogram\n     * @param durationMs duration to be recorded in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordMediumTimesHistogram(String name, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of times. Useful for recording medium durations. This is the\n     * Java equivalent of the UMA_HISTOGRAM_MEDIUM_TIMES C++ macro.\n     * <p>\n     * Note that histogram samples will always be converted to milliseconds when logged.\n     *\n     * @param name name of the histogram\n     * @param durationMs duration to be recorded in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordLongTimesHistogram(String name, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of times. Useful for recording long durations. This is the\n     * Java equivalent of the UMA_HISTOGRAM_LONG_TIMES C++ macro.\n     * <p>\n     * Note that histogram samples will always be converted to milliseconds when logged.\n     *\n     * @param name name of the histogram\n     * @param durationMs duration to be recorded in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordLongTimesHistogram100(String name, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of times. Useful for recording long durations. This is the\n     * Java equivalent of the UMA_HISTOGRAM_LONG_TIMES_100 C++ macro.\n     * <p>\n     * Note that histogram samples will always be converted to milliseconds when logged.\n     *\n     * @param name name of the histogram\n     * @param durationMs duration to be recorded in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordCustomTimesHistogram(String name, long durationMs, long min, long max, int numBuckets)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of times with custom buckets. This is the Java equivalent of\n     * the UMA_HISTOGRAM_CUSTOM_TIMES C++ macro.\n     * <p>\n     * Note that histogram samples will always be converted to milliseconds when logged.\n     *\n     * @param name name of the histogram\n     * @param durationMs duration to be recorded in milliseconds; expected to fall in range\n     *                   {@code [min, max)}\n     * @param min the smallest expected sample value; at least 1\n     * @param max the smallest sample value that will be recorded in overflow bucket\n     * @param numBuckets the number of buckets including underflow ({@code [0, min)}) and overflow\n     *                   ({@code [max, inf)}) buckets; at most 100\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordMemoryKBHistogram(String name, int sizeInKB)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of sizes in KB. This is the Java equivalent of the\n     * UMA_HISTOGRAM_MEMORY_KB C++ macro.\n     * <p>\n     * Good for sizes up to about 500MB.\n     *\n     * @param name name of the histogram\n     * @param sizeInkB Sample to record in KB\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordMemoryMediumMBHistogram(String name, int sizeInMB)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a histogram of sizes in MB. This is the Java equivalent of the\n     * UMA_HISTOGRAM_MEMORY_MEDIUM_MB C++ macro.\n     * <p>\n     * Good for sizes up to about 4000MB.\n     *\n     * @param name name of the histogram\n     * @param sizeInMB Sample to record in MB\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void recordExactLinearHistogram(String name, int sample, int max)",
    "returnType" : "void",
    "comment" : "\n     * Records a sample in a linear histogram where each bucket in range {@code [0, max)} counts\n     * exactly a single value.\n     *\n     * @param name name of the histogram\n     * @param sample sample to be recorded, expected to fall in range {@code [0, max)}\n     * @param max the smallest value counted in the overflow bucket, shouldn't be larger than 100\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int clampToInt(long value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void recordCustomTimesHistogramMilliseconds(String name, long duration, long min, long max, int numBuckets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getHistogramValueCountForTesting(String name, int sample)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of samples recorded in the given bucket of the given histogram.\n     *\n     * @deprecated Raw counts are easy to misuse. Does not reset between batched tests. Use\n     * {@link org.chromium.base.test.util.HistogramWatcher} instead.\n     *\n     * @param name name of the histogram to look up\n     * @param sample the bucket containing this sample value will be looked up\n     ",
    "links" : [ "org.chromium.base.test.util.HistogramWatcher" ]
  }, {
    "name" : "public static int getHistogramTotalCountForTesting(String name)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of samples recorded for the given histogram.\n     *\n     * @deprecated Raw counts are easy to misuse. Does not reset between batched tests. Use\n     * {@link org.chromium.base.test.util.HistogramWatcher} instead.\n     *\n     * @param name name of the histogram to look up\n     ",
    "links" : [ "org.chromium.base.test.util.HistogramWatcher" ]
  }, {
    "name" : "public static List<HistogramBucket> getHistogramSamplesForTesting(String name)",
    "returnType" : "List<HistogramBucket>",
    "comment" : "\n     * Returns the buckets of samples recorded for the given histogram.\n     *\n     * Use {@link org.chromium.base.test.util.HistogramWatcher} instead of using this directly.\n     *\n     * @param name name of the histogram to look up\n     ",
    "links" : [ "org.chromium.base.test.util.HistogramWatcher" ]
  } ],
  "methodNames" : [ "public static void recordBooleanHistogram(String name, boolean sample)", "public static void recordEnumeratedHistogram(String name, int sample, int max)", "public static void recordCount1MHistogram(String name, int sample)", "public static void recordCount100Histogram(String name, int sample)", "public static void recordCount1000Histogram(String name, int sample)", "public static void recordCount100000Histogram(String name, int sample)", "public static void recordCustomCountHistogram(String name, int sample, int min, int max, int numBuckets)", "public static void recordLinearCountHistogram(String name, int sample, int min, int max, int numBuckets)", "public static void recordPercentageHistogram(String name, int sample)", "public static void recordSparseHistogram(String name, int sample)", "public static void recordTimesHistogram(String name, long durationMs)", "public static void recordMediumTimesHistogram(String name, long durationMs)", "public static void recordLongTimesHistogram(String name, long durationMs)", "public static void recordLongTimesHistogram100(String name, long durationMs)", "public static void recordCustomTimesHistogram(String name, long durationMs, long min, long max, int numBuckets)", "public static void recordMemoryKBHistogram(String name, int sizeInKB)", "public static void recordMemoryMediumMBHistogram(String name, int sizeInMB)", "public static void recordExactLinearHistogram(String name, int sample, int max)", "private static int clampToInt(long value)", "private static void recordCustomTimesHistogramMilliseconds(String name, long duration, long min, long max, int numBuckets)", "public static int getHistogramValueCountForTesting(String name, int sample)", "public static int getHistogramTotalCountForTesting(String name)", "public static List<HistogramBucket> getHistogramSamplesForTesting(String name)" ],
  "variableNames" : [ ]
}