{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/mbms/vendor/VendorUtils.java",
  "packageName" : "android.telephony.mbms.vendor",
  "className" : "VendorUtils",
  "comment" : "\n * Contains constants and utility methods for MBMS Download middleware apps to communicate with\n * frontend apps.\n * @hide\n ",
  "variables" : [ {
    "name" : "ACTION_DOWNLOAD_RESULT_INTERNAL",
    "type" : "String",
    "comment" : "\n     * The MBMS middleware should send this when a download of single file has completed or\n     * failed. The only mandatory extra is\n     * {@link MbmsDownloadSession#EXTRA_MBMS_DOWNLOAD_RESULT}\n     * and the following are required when the download has completed:\n     * {@link MbmsDownloadSession#EXTRA_MBMS_FILE_INFO}\n     * {@link MbmsDownloadSession#EXTRA_MBMS_DOWNLOAD_REQUEST}\n     * {@link #EXTRA_TEMP_LIST}\n     * {@link #EXTRA_FINAL_URI}\n     ",
    "links" : [ "MbmsDownloadSession#EXTRA_MBMS_DOWNLOAD_RESULT", "MbmsDownloadSession#EXTRA_MBMS_FILE_INFO", "MbmsDownloadSession#EXTRA_MBMS_DOWNLOAD_REQUEST", "#EXTRA_TEMP_LIST", "#EXTRA_FINAL_URI" ]
  }, {
    "name" : "ACTION_FILE_DESCRIPTOR_REQUEST",
    "type" : "String",
    "comment" : "\n     * The MBMS middleware should send this when it wishes to request {@code content://} URIs to\n     * serve as temp files for downloads or when it wishes to resume paused downloads. Mandatory\n     * extras are\n     * {@link #EXTRA_SERVICE_ID}\n     *\n     * Optional extras are\n     * {@link #EXTRA_FD_COUNT} (0 if not present)\n     * {@link #EXTRA_PAUSED_LIST} (empty if not present)\n     ",
    "links" : [ "#EXTRA_SERVICE_ID", "#EXTRA_FD_COUNT", "#EXTRA_PAUSED_LIST" ]
  }, {
    "name" : "ACTION_CLEANUP",
    "type" : "String",
    "comment" : "\n     * The MBMS middleware should send this when it wishes to clean up temp  files in the app's\n     * filesystem. Mandatory extras are:\n     * {@link #EXTRA_TEMP_FILES_IN_USE}\n     ",
    "links" : [ "#EXTRA_TEMP_FILES_IN_USE" ]
  }, {
    "name" : "EXTRA_TEMP_LIST",
    "type" : "String",
    "comment" : "\n     * Extra containing a {@link List} of {@link Uri}s that were used as temp files for this\n     * completed file. These {@link Uri}s should have scheme {@code file://}, and the temp\n     * files will be deleted upon receipt of the intent.\n     * May be null.\n     ",
    "links" : [ "List", "Uri", "Uri" ]
  }, {
    "name" : "EXTRA_FD_COUNT",
    "type" : "String",
    "comment" : "\n     * Extra containing an integer indicating the number of temp files requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PAUSED_LIST",
    "type" : "String",
    "comment" : "\n     * Extra containing a list of {@link Uri}s that the middleware is requesting access to via\n     * {@link #ACTION_FILE_DESCRIPTOR_REQUEST} in order to resume downloading. These {@link Uri}s\n     * should have scheme {@code file://}.\n     ",
    "links" : [ "Uri", "#ACTION_FILE_DESCRIPTOR_REQUEST", "Uri" ]
  }, {
    "name" : "EXTRA_FREE_URI_LIST",
    "type" : "String",
    "comment" : "\n     * Extra containing a list of {@link android.telephony.mbms.UriPathPair}s, used in the\n     * response to {@link #ACTION_FILE_DESCRIPTOR_REQUEST}. These are temp files that are meant\n     * to be used for new file downloads.\n     ",
    "links" : [ "android.telephony.mbms.UriPathPair", "#ACTION_FILE_DESCRIPTOR_REQUEST" ]
  }, {
    "name" : "EXTRA_PAUSED_URI_LIST",
    "type" : "String",
    "comment" : "\n     * Extra containing a list of {@link android.telephony.mbms.UriPathPair}s, used in the\n     * response to {@link #ACTION_FILE_DESCRIPTOR_REQUEST}. These\n     * {@link android.telephony.mbms.UriPathPair}s contain {@code content://} URIs that provide\n     * access to previously paused downloads.\n     ",
    "links" : [ "android.telephony.mbms.UriPathPair", "#ACTION_FILE_DESCRIPTOR_REQUEST", "android.telephony.mbms.UriPathPair" ]
  }, {
    "name" : "EXTRA_TEMP_FILE_ROOT",
    "type" : "String",
    "comment" : "\n     * Extra containing a string that points to the middleware's knowledge of where the temp file\n     * root for the app is. The path should be a canonical path as returned by\n     * {@link File#getCanonicalPath()}\n     ",
    "links" : [ "File#getCanonicalPath" ]
  }, {
    "name" : "EXTRA_TEMP_FILES_IN_USE",
    "type" : "String",
    "comment" : "\n     * Extra containing a list of {@link Uri}s indicating temp files which the middleware is\n     * still using.\n     ",
    "links" : [ "Uri" ]
  }, {
    "name" : "EXTRA_FINAL_URI",
    "type" : "String",
    "comment" : "\n     * Extra containing a single {@link Uri} indicating the path to the temp file in which the\n     * decoded downloaded file resides. Must not be null.\n     ",
    "links" : [ "Uri" ]
  }, {
    "name" : "EXTRA_SERVICE_ID",
    "type" : "String",
    "comment" : "\n     * Extra containing a String representing a service ID, used by\n     * file-descriptor requests and cleanup requests to specify which service they want to\n     * request temp files or clean up temp files for, respectively.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ComponentName getAppReceiverFromPackageName(Context context, String packageName)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Retrieves the {@link ComponentName} for the {@link android.content.BroadcastReceiver} that\n     * the various intents from the middleware should be targeted towards.\n     * @param packageName The package name of the app.\n     * @return The component name of the receiver that the middleware should send its intents to,\n     * or null if the app didn't declare it in the manifest.\n     ",
    "links" : [ "ComponentName", "android.content.BroadcastReceiver" ]
  } ],
  "variableNames" : [ "ACTION_DOWNLOAD_RESULT_INTERNAL", "ACTION_FILE_DESCRIPTOR_REQUEST", "ACTION_CLEANUP", "EXTRA_TEMP_LIST", "EXTRA_FD_COUNT", "EXTRA_PAUSED_LIST", "EXTRA_FREE_URI_LIST", "EXTRA_PAUSED_URI_LIST", "EXTRA_TEMP_FILE_ROOT", "EXTRA_TEMP_FILES_IN_USE", "EXTRA_FINAL_URI", "EXTRA_SERVICE_ID" ],
  "methodNames" : [ "public static ComponentName getAppReceiverFromPackageName(Context context, String packageName)" ]
}