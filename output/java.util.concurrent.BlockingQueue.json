{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/BlockingQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "BlockingQueue",
  "comment" : "\n * A {@link Queue} that additionally supports operations that wait for\n * the queue to become non-empty when retrieving an element, and wait\n * for space to become available in the queue when storing an element.\n *\n * <p>{@code BlockingQueue} methods come in four forms, with different ways\n * of handling operations that cannot be satisfied immediately, but may be\n * satisfied at some point in the future:\n * one throws an exception, the second returns a special value (either\n * {@code null} or {@code false}, depending on the operation), the third\n * blocks the current thread indefinitely until the operation can succeed,\n * and the fourth blocks for only a given maximum time limit before giving\n * up.  These methods are summarized in the following table:\n *\n * <table class=\"plain\">\n * <caption>Summary of BlockingQueue methods</caption>\n *  <tr>\n *    <td></td>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Throws exception</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Special value</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Blocks</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Times out</th>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\" style=\"text-align:left\">Insert</th>\n *    <td>{@link #add(Object) add(e)}</td>\n *    <td>{@link #offer(Object) offer(e)}</td>\n *    <td>{@link #put(Object) put(e)}</td>\n *    <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\" style=\"text-align:left\">Remove</th>\n *    <td>{@link #remove() remove()}</td>\n *    <td>{@link #poll() poll()}</td>\n *    <td>{@link #take() take()}</td>\n *    <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\" style=\"text-align:left\">Examine</th>\n *    <td>{@link #element() element()}</td>\n *    <td>{@link #peek() peek()}</td>\n *    <td style=\"font-style: italic\">not applicable</td>\n *    <td style=\"font-style: italic\">not applicable</td>\n *  </tr>\n * </table>\n *\n * <p>A {@code BlockingQueue} does not accept {@code null} elements.\n * Implementations throw {@code NullPointerException} on attempts\n * to {@code add}, {@code put} or {@code offer} a {@code null}.  A\n * {@code null} is used as a sentinel value to indicate failure of\n * {@code poll} operations.\n *\n * <p>A {@code BlockingQueue} may be capacity bounded. At any given\n * time it may have a {@code remainingCapacity} beyond which no\n * additional elements can be {@code put} without blocking.\n * A {@code BlockingQueue} without any intrinsic capacity constraints always\n * reports a remaining capacity of {@code Integer.MAX_VALUE}.\n *\n * <p>{@code BlockingQueue} implementations are designed to be used\n * primarily for producer-consumer queues, but additionally support\n * the {@link Collection} interface.  So, for example, it is\n * possible to remove an arbitrary element from a queue using\n * {@code remove(x)}. However, such operations are in general\n * <em>not</em> performed very efficiently, and are intended for only\n * occasional use, such as when a queued message is cancelled.\n *\n * <p>{@code BlockingQueue} implementations are thread-safe.  All\n * queuing methods achieve their effects atomically using internal\n * locks or other forms of concurrency control. However, the\n * <em>bulk</em> Collection operations {@code addAll},\n * {@code containsAll}, {@code retainAll} and {@code removeAll} are\n * <em>not</em> necessarily performed atomically unless specified\n * otherwise in an implementation. So it is possible, for example, for\n * {@code addAll(c)} to fail (throwing an exception) after adding\n * only some of the elements in {@code c}.\n *\n * <p>A {@code BlockingQueue} does <em>not</em> intrinsically support\n * any kind of &quot;close&quot; or &quot;shutdown&quot; operation to\n * indicate that no more items will be added.  The needs and usage of\n * such features tend to be implementation-dependent. For example, a\n * common tactic is for producers to insert special\n * <em>end-of-stream</em> or <em>poison</em> objects, that are\n * interpreted accordingly when taken by consumers.\n *\n * <p>\n * Usage example, based on a typical producer-consumer scenario.\n * Note that a {@code BlockingQueue} can safely be used with multiple\n * producers and multiple consumers.\n * <pre> {@code\n * class Producer implements Runnable {\n *   private final BlockingQueue queue;\n *   Producer(BlockingQueue q) { queue = q; }\n *   public void run() {\n *     try {\n *       while (true) { queue.put(produce()); }\n *     } catch (InterruptedException ex) { ... handle ...}\n *   }\n *   Object produce() { ... }\n * }\n *\n * class Consumer implements Runnable {\n *   private final BlockingQueue queue;\n *   Consumer(BlockingQueue q) { queue = q; }\n *   public void run() {\n *     try {\n *       while (true) { consume(queue.take()); }\n *     } catch (InterruptedException ex) { ... handle ...}\n *   }\n *   void consume(Object x) { ... }\n * }\n *\n * class Setup {\n *   void main() {\n *     BlockingQueue q = new SomeQueueImplementation();\n *     Producer p = new Producer(q);\n *     Consumer c1 = new Consumer(q);\n *     Consumer c2 = new Consumer(q);\n *     new Thread(p).start();\n *     new Thread(c1).start();\n *     new Thread(c2).start();\n *   }\n * }}</pre>\n *\n * <p>Memory consistency effects: As with other concurrent\n * collections, actions in a thread prior to placing an object into a\n * {@code BlockingQueue}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions subsequent to the access or removal of that element from\n * the {@code BlockingQueue} in another thread.\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "#remove()", "#poll(long", "#poll()", "java.util.Collection", "#add(Object)", "#put(Object)", "#peek()", "#offer(Object", "java.util.Queue", "#element()", "#offer(Object)", "#take()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue if it is possible to do\n     * so immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     * When using a capacity-restricted queue, it is generally preferable to\n     * use {@link #offer(Object) offer}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this queue\n     ",
    "links" : [ "#offer(Object)", "java.util.Collection#add" ]
  }, {
    "name" : " boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue if it is possible to do\n     * so immediately without violating capacity restrictions, returning\n     * {@code true} upon success and {@code false} if no space is currently\n     * available.  When using a capacity-restricted queue, this method is\n     * generally preferable to {@link #add}, which can fail to insert an\n     * element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this queue, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this queue\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : " void put(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element into this queue, waiting if necessary\n     * for space to become available.\n     *\n     * @param e the element to add\n     * @throws InterruptedException if interrupted while waiting\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this queue\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue, waiting up to the\n     * specified wait time if necessary for space to become available.\n     *\n     * @param e the element to add\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return {@code true} if successful, or {@code false} if\n     *         the specified waiting time elapses before space is available\n     * @throws InterruptedException if interrupted while waiting\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this queue\n     ",
    "links" : [ ]
  }, {
    "name" : " E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, waiting if necessary\n     * until an element becomes available.\n     *\n     * @return the head of this queue\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, waiting up to the\n     * specified wait time if necessary for an element to become available.\n     *\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return the head of this queue, or {@code null} if the\n     *         specified waiting time elapses before an element is available\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of additional elements that this queue can ideally\n     * (in the absence of memory or resource constraints) accept without\n     * blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic\n     * limit.\n     *\n     * <p>Note that you <em>cannot</em> always tell if an attempt to insert\n     * an element will succeed by inspecting {@code remainingCapacity}\n     * because it may be the case that another thread is about to\n     * insert or remove an element.\n     *\n     * @return the remaining capacity\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this queue,\n     * if it is present.  More formally, removes an element {@code e} such\n     * that {@code o.equals(e)}, if this queue contains one or more such\n     * elements.\n     * Returns {@code true} if this queue contained the specified element\n     * (or equivalently, if this queue changed as a result of the call).\n     *\n     * @param o element to be removed from this queue, if present\n     * @return {@code true} if this queue changed as a result of the call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this queue\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this queue contains the specified element.\n     * More formally, returns {@code true} if and only if this queue contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this queue\n     * @return {@code true} if this queue contains the specified element\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this queue\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * Removes all available elements from this queue and adds them\n     * to the given collection.  This operation may be more\n     * efficient than repeatedly polling this queue.  A failure\n     * encountered while attempting to add elements to\n     * collection {@code c} may result in elements being in neither,\n     * either or both collections when the associated exception is\n     * thrown.  Attempts to drain a queue to itself result in\n     * {@code IllegalArgumentException}. Further, the behavior of\n     * this operation is undefined if the specified collection is\n     * modified while the operation is in progress.\n     *\n     * @param c the collection to transfer elements into\n     * @return the number of elements transferred\n     * @throws UnsupportedOperationException if addition of elements\n     *         is not supported by the specified collection\n     * @throws ClassCastException if the class of an element of this queue\n     *         prevents it from being added to the specified collection\n     * @throws NullPointerException if the specified collection is null\n     * @throws IllegalArgumentException if the specified collection is this\n     *         queue, or some property of an element of this queue prevents\n     *         it from being added to the specified collection\n     ",
    "links" : [ ]
  }, {
    "name" : " int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * Removes at most the given number of available elements from\n     * this queue and adds them to the given collection.  A failure\n     * encountered while attempting to add elements to\n     * collection {@code c} may result in elements being in neither,\n     * either or both collections when the associated exception is\n     * thrown.  Attempts to drain a queue to itself result in\n     * {@code IllegalArgumentException}. Further, the behavior of\n     * this operation is undefined if the specified collection is\n     * modified while the operation is in progress.\n     *\n     * @param c the collection to transfer elements into\n     * @param maxElements the maximum number of elements to transfer\n     * @return the number of elements transferred\n     * @throws UnsupportedOperationException if addition of elements\n     *         is not supported by the specified collection\n     * @throws ClassCastException if the class of an element of this queue\n     *         prevents it from being added to the specified collection\n     * @throws NullPointerException if the specified collection is null\n     * @throws IllegalArgumentException if the specified collection is this\n     *         queue, or some property of an element of this queue prevents\n     *         it from being added to the specified collection\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean add(E e)", " boolean offer(E e)", " void put(E e) throws InterruptedException", " boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException", " E take() throws InterruptedException", " E poll(long timeout, TimeUnit unit) throws InterruptedException", " int remainingCapacity()", " boolean remove(Object o)", " boolean contains(Object o)", " int drainTo(Collection<? super E> c)", " int drainTo(Collection<? super E> c, int maxElements)" ],
  "variableNames" : [ ]
}