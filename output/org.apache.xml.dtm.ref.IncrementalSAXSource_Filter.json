{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/IncrementalSAXSource_Filter.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "IncrementalSAXSource_Filter",
  "comment" : " <p>IncrementalSAXSource_Filter implements IncrementalSAXSource, using a\n * standard SAX2 event source as its input and parcelling out those\n * events gradually in reponse to deliverMoreNodes() requests.  Output from the\n * filter will be passed along to a SAX handler registered as our\n * listener, but those callbacks will pass through a counting stage\n * which periodically yields control back to the controller coroutine.\n * </p>\n *\n * <p>%REVIEW%: This filter is not currenly intended to be reusable\n * for parsing additional streams/documents. We may want to consider\n * making it resettable at some point in the future. But it's a \n * small object, so that'd be mostly a convenience issue; the cost\n * of allocating each time is trivial compared to the cost of processing\n * any nontrival stream.</p>\n *\n * <p>For a brief usage example, see the unit-test main() method.</p>\n *\n * <p>This is a simplification of the old CoroutineSAXParser, focusing\n * specifically on filtering. The resulting controller protocol is _far_\n * simpler and less error-prone; the only controller operation is deliverMoreNodes(),\n * and the only requirement is that deliverMoreNodes(false) be called if you want to\n * discard the rest of the stream and the previous deliverMoreNodes() didn't return\n * false.\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "Internal status report",
    "links" : [ ]
  }, {
    "name" : "fCoroutineManager",
    "type" : "CoroutineManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fControllerCoroutineID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fSourceCoroutineID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clientContentHandler",
    "type" : "ContentHandler",
    "comment" : " %REVIEW% support multiple?",
    "links" : [ ]
  }, {
    "name" : "clientLexicalHandler",
    "type" : "LexicalHandler",
    "comment" : " %REVIEW% support multiple?",
    "links" : [ ]
  }, {
    "name" : "clientDTDHandler",
    "type" : "DTDHandler",
    "comment" : " %REVIEW% support multiple?",
    "links" : [ ]
  }, {
    "name" : "clientErrorHandler",
    "type" : "ErrorHandler",
    "comment" : " %REVIEW% support multiple?",
    "links" : [ ]
  }, {
    "name" : "eventcounter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fNoMoreEvents",
    "type" : "boolean",
    "comment" : " the user requested an early stop via deliverMoreNodes(false).",
    "links" : [ ]
  }, {
    "name" : "fXMLReader",
    "type" : "XMLReader",
    "comment" : " Support for startParse()",
    "links" : [ ]
  }, {
    "name" : "fXMLReaderInputSource",
    "type" : "InputSource",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static IncrementalSAXSource createIncrementalSAXSource(CoroutineManager co, int controllerCoroutineID)",
    "returnType" : "IncrementalSAXSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void init(CoroutineManager co, int controllerCoroutineID, int sourceCoroutineID)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXMLReader(XMLReader eventsource)",
    "returnType" : "void",
    "comment" : " Bind our input streams to an XMLReader.\n   *\n   * Just a convenience routine; obviously you can explicitly register\n   * this as a listener with the same effect.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler handler)",
    "returnType" : "void",
    "comment" : " Register a content handler for us to output to",
    "links" : [ ]
  }, {
    "name" : "public void setDTDHandler(DTDHandler handler)",
    "returnType" : "void",
    "comment" : " Register a DTD handler for us to output to",
    "links" : [ ]
  }, {
    "name" : "public void setLexicalHandler(LexicalHandler handler)",
    "returnType" : "void",
    "comment" : " NOTE NAME -- subclassing issue in the Xerces version",
    "links" : [ ]
  }, {
    "name" : "public void setErrHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : " NOTE NAME -- subclassing issue in the Xerces version",
    "links" : [ ]
  }, {
    "name" : "public void setReturnFrequency(int events)",
    "returnType" : "void",
    "comment" : " Immediately resets number of events before _next_ resume as well.",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endElement(java.lang.String namespaceURI, java.lang.String localName, java.lang.String qName) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(java.lang.String prefix) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(java.lang.String target, java.lang.String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(java.lang.String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startElement(java.lang.String namespaceURI, java.lang.String localName, java.lang.String qName, Attributes atts) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(java.lang.String prefix, java.lang.String uri) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endEntity(java.lang.String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(java.lang.String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(String a, String b, String c) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(String a, String b, String c, String d) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSourceCoroutineID()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getControllerCoroutineID()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CoroutineManager getCoroutineManager()",
    "returnType" : "CoroutineManager",
    "comment" : " @return the CoroutineManager this CoroutineFilter object is bound to.\n   * If you're using the do...() methods, applications should only\n   * need to talk to the CoroutineManager once, to obtain the\n   * application's Coroutine ID.\n   * ",
    "links" : [ ]
  }, {
    "name" : "protected void count_and_yield(boolean moreExpected) throws SAXException",
    "returnType" : "void",
    "comment" : " <p>In the SAX delegation code, I've inlined the count-down in\n   * the hope of encouraging compilers to deliver better\n   * performance. However, if we subclass (eg to directly connect the\n   * output to a DTM builder), that would require calling super in\n   * order to run that logic... which seems inelegant.  Hence this\n   * routine for the convenience of subclasses: every [frequency]\n   * invocations, issue a co_yield.</p>\n   *\n   * @param moreExepected Should always be true unless this is being called\n   * at the end of endDocument() handling.\n   * ",
    "links" : [ ]
  }, {
    "name" : "private void co_entry_pause() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * co_entry_pause is called in startDocument() before anything else\n   * happens. It causes the filter to wait for a \"go ahead\" request\n   * from the controller before delivering any events. Note that\n   * the very first thing the controller tells us may be \"I don't\n   * need events after all\"!\n   ",
    "links" : [ ]
  }, {
    "name" : "private void co_yield(boolean moreRemains) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Co_Yield handles coroutine interactions while a parse is in progress.\n   *\n   * When moreRemains==true, we are pausing after delivering events, to\n   * ask if more are needed. We will resume the controller thread with \n   *   co_resume(Boolean.TRUE, ...)\n   * When control is passed back it may indicate\n   *      Boolean.TRUE    indication to continue delivering events\n   *      Boolean.FALSE   indication to discontinue events and shut down.\n   * \n   * When moreRemains==false, we shut down immediately without asking the\n   * controller's permission. Normally this means end of document has been\n   * reached.\n   *\n   * Shutting down a IncrementalSAXSource_Filter requires terminating the incoming\n   * SAX event stream. If we are in control of that stream (if it came\n   * from an XMLReader passed to our startReader() method), we can do so\n   * very quickly by throwing a reserved exception to it. If the stream is\n   * coming from another source, we can't do that because its caller may\n   * not be prepared for this \"normal abnormal exit\", and instead we put\n   * ourselves in a \"spin\" mode where events are discarded.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startParse(InputSource source) throws SAXException",
    "returnType" : "void",
    "comment" : " Launch a thread that will run an XMLReader's parse() operation within\n   *  a thread, feeding events to this IncrementalSAXSource_Filter. Mostly a convenience\n   *  routine, but has the advantage that -- since we invoked parse() --\n   *  we can halt parsing quickly via a StopException rather than waiting\n   *  for the SAX stream to end by itself.\n   *\n   * @throws SAXException is parse thread is already in progress\n   * or parsing can not be started.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : " Thread logic to support startParseThread()\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object deliverMoreNodes(boolean parsemore)",
    "returnType" : "Object",
    "comment" : " deliverMoreNodes() is a simple API which tells the coroutine\n   * parser that we need more nodes.  This is intended to be called\n   * from one of our partner routines, and serves to encapsulate the\n   * details of how incremental parsing has been achieved.\n   *\n   * @param parsemore If true, tells the incremental filter to generate\n   * another chunk of output. If false, tells the filter that we're\n   * satisfied and it can terminate parsing of this document.\n   *\n   * @return Boolean.TRUE if there may be more events available by invoking\n   * deliverMoreNodes() again. Boolean.FALSE if parsing has run to completion (or been\n   * terminated by deliverMoreNodes(false). Or an exception object if something\n   * malfunctioned. %REVIEW% We _could_ actually throw the exception, but\n   * that would require runinng deliverMoreNodes() in a try/catch... and for many\n   * applications, exception will be simply be treated as \"not TRUE\" in\n   * any case.\n   * ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static IncrementalSAXSource createIncrementalSAXSource(CoroutineManager co, int controllerCoroutineID)", "public void init(CoroutineManager co, int controllerCoroutineID, int sourceCoroutineID)", "public void setXMLReader(XMLReader eventsource)", "public void setContentHandler(ContentHandler handler)", "public void setDTDHandler(DTDHandler handler)", "public void setLexicalHandler(LexicalHandler handler)", "public void setErrHandler(ErrorHandler handler)", "public void setReturnFrequency(int events)", "public void characters(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void endDocument() throws org.xml.sax.SAXException", "public void endElement(java.lang.String namespaceURI, java.lang.String localName, java.lang.String qName) throws org.xml.sax.SAXException", "public void endPrefixMapping(java.lang.String prefix) throws org.xml.sax.SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void processingInstruction(java.lang.String target, java.lang.String data) throws org.xml.sax.SAXException", "public void setDocumentLocator(Locator locator)", "public void skippedEntity(java.lang.String name) throws org.xml.sax.SAXException", "public void startDocument() throws org.xml.sax.SAXException", "public void startElement(java.lang.String namespaceURI, java.lang.String localName, java.lang.String qName, Attributes atts) throws org.xml.sax.SAXException", "public void startPrefixMapping(java.lang.String prefix, java.lang.String uri) throws org.xml.sax.SAXException", "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void endCDATA() throws org.xml.sax.SAXException", "public void endDTD() throws org.xml.sax.SAXException", "public void endEntity(java.lang.String name) throws org.xml.sax.SAXException", "public void startCDATA() throws org.xml.sax.SAXException", "public void startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) throws org.xml.sax.SAXException", "public void startEntity(java.lang.String name) throws org.xml.sax.SAXException", "public void notationDecl(String a, String b, String c) throws SAXException", "public void unparsedEntityDecl(String a, String b, String c, String d) throws SAXException", "public void error(SAXParseException exception) throws SAXException", "public void fatalError(SAXParseException exception) throws SAXException", "public void warning(SAXParseException exception) throws SAXException", "public int getSourceCoroutineID()", "public int getControllerCoroutineID()", "public CoroutineManager getCoroutineManager()", "protected void count_and_yield(boolean moreExpected) throws SAXException", "private void co_entry_pause() throws SAXException", "private void co_yield(boolean moreRemains) throws SAXException", "public void startParse(InputSource source) throws SAXException", "public void run()", "public Object deliverMoreNodes(boolean parsemore)" ],
  "variableNames" : [ "DEBUG", "fCoroutineManager", "fControllerCoroutineID", "fSourceCoroutineID", "clientContentHandler", "clientLexicalHandler", "clientDTDHandler", "clientErrorHandler", "eventcounter", "frequency", "fNoMoreEvents", "fXMLReader", "fXMLReaderInputSource" ]
}