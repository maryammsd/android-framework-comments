{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/mbms/vendor/MbmsDownloadServiceBase.java",
  "packageName" : "android.telephony.mbms.vendor",
  "className" : "MbmsDownloadServiceBase",
  "comment" : "\n * Base class for MbmsDownloadService. The middleware should return an instance of this object from\n * its {@link android.app.Service#onBind(Intent)} method.\n * @hide\n ",
  "variables" : [ {
    "name" : "mDownloadStatusListenerBinderMap",
    "type" : "Map<IBinder, DownloadStatusListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownloadProgressListenerBinderMap",
    "type" : "Map<IBinder, DownloadProgressListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownloadCallbackDeathRecipients",
    "type" : "Map<IBinder, DeathRecipient>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int initialize(int subscriptionId, MbmsDownloadSessionCallback callback) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Initialize the download service for this app and subId, registering the listener.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}, which\n     * will be intercepted and passed to the app as\n     * {@link MbmsErrors.InitializationErrors#ERROR_UNABLE_TO_INITIALIZE}\n     *\n     * May return any value from {@link MbmsErrors.InitializationErrors}\n     * or {@link MbmsErrors#SUCCESS}. Non-successful error codes will be passed to the app via\n     * {@link IMbmsDownloadSessionCallback#onError(int, String)}.\n     *\n     * @param callback The callback to use to communicate with the app.\n     * @param subscriptionId The subscription ID to use.\n     ",
    "links" : [ "IllegalStateException", "MbmsErrors.InitializationErrors#ERROR_UNABLE_TO_INITIALIZE", "MbmsErrors.InitializationErrors", "android.telephony.mbms.IMbmsDownloadSessionCallback#onError(int", "android.telephony.mbms.MbmsErrors#SUCCESS", "IllegalArgumentException" ]
  }, {
    "name" : "public final int initialize(final int subscriptionId, final IMbmsDownloadSessionCallback callback) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation -- hides the callback AIDL from the API.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int requestUpdateFileServices(int subscriptionId, List<String> serviceClasses) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Registers serviceClasses of interest with the appName/subId key.\n     * Starts async fetching data on streaming services of matching classes to be reported\n     * later via {@link IMbmsDownloadSessionCallback#onFileServicesUpdated(List)}\n     *\n     * Note that subsequent calls with the same uid and subId will replace\n     * the service class list.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param serviceClasses The service classes that the app wishes to get info on. The strings\n     *                       may contain arbitrary data as negotiated between the app and the\n     *                       carrier.\n     * @return One of {@link MbmsErrors#SUCCESS} or\n     *         {@link MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY},\n     ",
    "links" : [ "IllegalStateException", "android.telephony.mbms.IMbmsDownloadSessionCallback#onFileServicesUpdated(List)", "android.telephony.mbms.MbmsErrors#SUCCESS", "MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY", "IllegalArgumentException" ]
  }, {
    "name" : "public int setTempFileRootDirectory(int subscriptionId, String rootDirectoryPath) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Sets the temp file root directory for this app/subscriptionId combination. The middleware\n     * should persist {@code rootDirectoryPath} and send it back when sending intents to the\n     * app's {@link android.telephony.mbms.MbmsDownloadReceiver}.\n     *\n     * If the calling app (as identified by the calling UID) currently has any pending download\n     * requests that have not been canceled, the middleware must return\n     * {@link MbmsErrors.DownloadErrors#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT} here.\n     *\n     * @param subscriptionId The subscription id the download is operating under.\n     * @param rootDirectoryPath The path to the app's temp file root directory.\n     * @return {@link MbmsErrors#SUCCESS},\n     *         {@link MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY} or\n     *         {@link MbmsErrors.DownloadErrors#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT}\n     ",
    "links" : [ "android.telephony.mbms.MbmsDownloadReceiver", "android.telephony.mbms.MbmsErrors#SUCCESS", "MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY", "MbmsErrors.DownloadErrors#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT" ]
  }, {
    "name" : "public int download(DownloadRequest downloadRequest) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Issues a request to download a set of files.\n     *\n     * The middleware should expect that {@link #setTempFileRootDirectory(int, String)} has been\n     * called for this app between when the app was installed and when this method is called. If\n     * this is not the case, an {@link IllegalStateException} may be thrown.\n     *\n     * @param downloadRequest An object describing the set of files to be downloaded.\n     * @return Any error from {@link MbmsErrors.GeneralErrors}\n     *         or {@link MbmsErrors#SUCCESS}\n     ",
    "links" : [ "IllegalStateException", "MbmsErrors.GeneralErrors", "#setTempFileRootDirectory(int", "android.telephony.mbms.MbmsErrors#SUCCESS" ]
  }, {
    "name" : "public int addStatusListener(DownloadRequest downloadRequest, DownloadStatusListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Registers a download status listener for the provided {@link DownloadRequest}.\n     *\n     * This method is called by the app when it wants to request updates on the status of\n     * the download.\n     *\n     * If the middleware is not aware of a download having been requested with the provided\n     * {@link DownloadRequest} in the past,\n     * {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST}\n     * must be returned.\n     *\n     * @param downloadRequest The {@link DownloadRequest} that was used to initiate the download\n     *                        for which progress updates are being requested.\n     * @param listener The listener object to use.\n     ",
    "links" : [ "android.telephony.mbms.DownloadRequest", "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST" ]
  }, {
    "name" : "public final int addStatusListener(final DownloadRequest downloadRequest, final IDownloadStatusListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation -- hides the listener AIDL from the API.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int removeStatusListener(DownloadRequest downloadRequest, DownloadStatusListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Un-registers a download status listener for the provided {@link DownloadRequest}.\n     *\n     * This method is called by the app when it no longer wants to request status updates on the\n     * download.\n     *\n     * If the middleware is not aware of a download having been requested with the provided\n     * {@link DownloadRequest} in the past,\n     * {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST}\n     * must be returned.\n     *\n     * @param downloadRequest The {@link DownloadRequest} that was used to register the callback\n     * @param listener The callback object that\n     *                 {@link #addStatusListener(DownloadRequest, DownloadStatusListener)}\n     *                 was called with.\n     ",
    "links" : [ "android.telephony.mbms.DownloadRequest", "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST", "#addStatusListener(DownloadRequest" ]
  }, {
    "name" : "public final int removeStatusListener(final DownloadRequest downloadRequest, final IDownloadStatusListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation -- hides the listener AIDL from the API.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addProgressListener(DownloadRequest downloadRequest, DownloadProgressListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Registers a download progress listener for the provided {@link DownloadRequest}.\n     *\n     * This method is called by the app when it wants to request updates on the progress of\n     * the download.\n     *\n     * If the middleware is not aware of a download having been requested with the provided\n     * {@link DownloadRequest} in the past,\n     * {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST}\n     * must be returned.\n     *\n     * @param downloadRequest The {@link DownloadRequest} that was used to initiate the download\n     *                        for which progress updates are being requested.\n     * @param listener The listener object to use.\n     ",
    "links" : [ "android.telephony.mbms.DownloadRequest", "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST" ]
  }, {
    "name" : "public final int addProgressListener(final DownloadRequest downloadRequest, final IDownloadProgressListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation -- hides the listener AIDL from the API.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int removeProgressListener(DownloadRequest downloadRequest, DownloadProgressListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Un-registers a download progress listener for the provided {@link DownloadRequest}.\n     *\n     * This method is called by the app when it no longer wants to request progress updates on the\n     * download.\n     *\n     * If the middleware is not aware of a download having been requested with the provided\n     * {@link DownloadRequest} in the past,\n     * {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST}\n     * must be returned.\n     *\n     * @param downloadRequest The {@link DownloadRequest} that was used to register the callback\n     * @param listener The callback object that\n     *                 {@link #addProgressListener(DownloadRequest, DownloadProgressListener)}\n     *                 was called with.\n     ",
    "links" : [ "android.telephony.mbms.DownloadRequest", "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST", "#addProgressListener(DownloadRequest" ]
  }, {
    "name" : "public final int removeProgressListener(final DownloadRequest downloadRequest, final IDownloadProgressListener listener) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation -- hides the listener AIDL from the API.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<DownloadRequest> listPendingDownloads(int subscriptionId) throws RemoteException",
    "returnType" : "List<DownloadRequest>",
    "comment" : "\n     * Returns a list of pending {@link DownloadRequest}s that originated from the calling\n     * application, identified by its uid. A pending request is one that was issued via\n     * {@link #download(DownloadRequest)} but not cancelled through\n     * {@link #cancelDownload(DownloadRequest)}.\n     * The middleware must return a non-null result synchronously or throw an exception\n     * inheriting from {@link RuntimeException}.\n     * @return A list, possibly empty, of {@link DownloadRequest}s\n     ",
    "links" : [ "RuntimeException", "#download(DownloadRequest)", "android.telephony.mbms.DownloadRequest", "#cancelDownload(DownloadRequest)" ]
  }, {
    "name" : "public int cancelDownload(DownloadRequest downloadRequest) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Issues a request to cancel the specified download request.\n     *\n     * If the middleware is unable to cancel the request for whatever reason, it should return\n     * synchronously with an error. If this method returns {@link MbmsErrors#SUCCESS}, the app\n     * will no longer be expecting any more file-completed intents from the middleware for this\n     * {@link DownloadRequest}.\n     * @param downloadRequest The request to cancel\n     * @return {@link MbmsErrors#SUCCESS},\n     *         {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST},\n     *         {@link MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY}\n     ",
    "links" : [ "android.telephony.mbms.MbmsErrors#SUCCESS", "MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY", "android.telephony.mbms.DownloadRequest", "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST" ]
  }, {
    "name" : "public int requestDownloadState(DownloadRequest downloadRequest, FileInfo fileInfo) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Requests information about the state of a file pending download.\n     *\n     * If the middleware has no records of the\n     * file indicated by {@code fileInfo} being associated with {@code downloadRequest},\n     * {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_FILE_INFO} must be returned.\n     *\n     * @param downloadRequest The download request to query.\n     * @param fileInfo The particular file within the request to get information on.\n     * @return {@link MbmsErrors#SUCCESS} if the request was successful, an error code otherwise.\n     ",
    "links" : [ "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_FILE_INFO", "android.telephony.mbms.MbmsErrors#SUCCESS" ]
  }, {
    "name" : "public int resetDownloadKnowledge(DownloadRequest downloadRequest) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Resets the middleware's knowledge of previously-downloaded files in this download request.\n     *\n     * When this method is called, the middleware must attempt to re-download all the files\n     * specified by the {@link DownloadRequest}, even if the files have not changed on the server.\n     * In addition, current in-progress downloads must not be interrupted.\n     *\n     * If the middleware is not aware of the specified download request, return\n     * {@link MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST}.\n     *\n     * @param downloadRequest The request to re-download files for.\n     ",
    "links" : [ "android.telephony.mbms.DownloadRequest", "MbmsErrors.DownloadErrors#ERROR_UNKNOWN_DOWNLOAD_REQUEST" ]
  }, {
    "name" : "public void dispose(int subscriptionId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Signals that the app wishes to dispose of the session identified by the\n     * {@code subscriptionId} argument and the caller's uid. No notification back to the\n     * app is required for this operation, and the corresponding callback provided via\n     * {@link #initialize(int, IMbmsDownloadSessionCallback)} should no longer be used\n     * after this method has been called by the app.\n     *\n     * Any download requests issued by the app should remain in effect until the app calls\n     * {@link #cancelDownload(DownloadRequest)} on another session.\n     *\n     * May throw an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     ",
    "links" : [ "IllegalStateException", "#initialize(int", "#cancelDownload(DownloadRequest)" ]
  }, {
    "name" : "public void onAppCallbackDied(int uid, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the app identified by the given UID and subscription ID has died.\n     * @param uid the UID of the app, as returned by {@link Binder#getCallingUid()}.\n     * @param subscriptionId The subscription ID the app is using.\n     ",
    "links" : [ "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDownloadStatusListenerBinderMap", "mDownloadProgressListenerBinderMap", "mDownloadCallbackDeathRecipients" ],
  "methodNames" : [ "public int initialize(int subscriptionId, MbmsDownloadSessionCallback callback) throws RemoteException", "public final int initialize(final int subscriptionId, final IMbmsDownloadSessionCallback callback) throws RemoteException", "public int requestUpdateFileServices(int subscriptionId, List<String> serviceClasses) throws RemoteException", "public int setTempFileRootDirectory(int subscriptionId, String rootDirectoryPath) throws RemoteException", "public int download(DownloadRequest downloadRequest) throws RemoteException", "public int addStatusListener(DownloadRequest downloadRequest, DownloadStatusListener listener) throws RemoteException", "public final int addStatusListener(final DownloadRequest downloadRequest, final IDownloadStatusListener listener) throws RemoteException", "public int removeStatusListener(DownloadRequest downloadRequest, DownloadStatusListener listener) throws RemoteException", "public final int removeStatusListener(final DownloadRequest downloadRequest, final IDownloadStatusListener listener) throws RemoteException", "public int addProgressListener(DownloadRequest downloadRequest, DownloadProgressListener listener) throws RemoteException", "public final int addProgressListener(final DownloadRequest downloadRequest, final IDownloadProgressListener listener) throws RemoteException", "public int removeProgressListener(DownloadRequest downloadRequest, DownloadProgressListener listener) throws RemoteException", "public final int removeProgressListener(final DownloadRequest downloadRequest, final IDownloadProgressListener listener) throws RemoteException", "public List<DownloadRequest> listPendingDownloads(int subscriptionId) throws RemoteException", "public int cancelDownload(DownloadRequest downloadRequest) throws RemoteException", "public int requestDownloadState(DownloadRequest downloadRequest, FileInfo fileInfo) throws RemoteException", "public int resetDownloadKnowledge(DownloadRequest downloadRequest) throws RemoteException", "public void dispose(int subscriptionId) throws RemoteException", "public void onAppCallbackDied(int uid, int subscriptionId)", "public android.os.IBinder asBinder()", "public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws RemoteException" ]
}