{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/ImsMmTelManager.java",
  "packageName" : "android.telephony.ims",
  "className" : "ImsMmTelManager",
  "comment" : "\n * A manager for the MmTel (Multimedia Telephony) feature of an IMS network, given an associated\n * subscription.\n *\n * Allows a user to query the IMS MmTel feature information for a subscription, register for\n * registration and MmTel capability status callbacks, as well as query/modify user settings for the\n * associated subscription.\n *\n * Use {@link android.telephony.ims.ImsManager#getImsMmTelManager(int)} to get an instance of this\n * manager.\n ",
  "links" : [ "android.telephony.ims.ImsManager#getImsMmTelManager(int)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_MODE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Wifi calling mode is unknown. This is for initialization only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_MODE_WIFI_ONLY",
    "type" : "int",
    "comment" : "\n     * Register for IMS over IWLAN if WiFi signal quality is high enough. Do not hand over to LTE\n     * registration if signal quality degrades.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_MODE_CELLULAR_PREFERRED",
    "type" : "int",
    "comment" : "\n     * Prefer registering for IMS over LTE if LTE signal quality is high enough.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_MODE_WIFI_PREFERRED",
    "type" : "int",
    "comment" : "\n     * Prefer registering for IMS over IWLAN if possible if WiFi signal quality is high enough.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinderCache",
    "type" : "BinderCacheManager<ITelephony>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTelephonyCache",
    "type" : "BinderCacheManager<ITelephony>",
    "comment" : " Cache Telephony Binder interfaces, one cache per process.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ImsMmTelManager createForSubscriptionId(int subId)",
    "returnType" : "ImsMmTelManager",
    "comment" : "\n     * Create an instance of {@link ImsMmTelManager} for the subscription id specified.\n     *\n     * @param subId The ID of the subscription that this ImsMmTelManager will use.\n     * @see android.telephony.SubscriptionManager#getActiveSubscriptionInfoList()\n     *\n     * <p>Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @throws IllegalArgumentException if the subscription is invalid.\n     * @deprecated Use {@link android.telephony.ims.ImsManager#getImsMmTelManager(int)} to get an\n     * instance of this class.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "android.telephony.ims.ImsManager#getImsMmTelManager(int)", "android.telephony.ims.ImsMmTelManager", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link RegistrationCallback} with the system, which will provide registration\n     * updates for the subscription specified in {@link ImsManager#getImsMmTelManager(int)}. Use\n     * {@link SubscriptionManager.OnSubscriptionsChangedListener} to listen to Subscription changed\n     * events and call {@link #unregisterImsRegistrationCallback(RegistrationCallback)} to clean up.\n     *\n     * When the callback is registered, it will initiate the callback c to be called with the\n     * current registration state.\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param c The {@link RegistrationCallback} to be added.\n     * @see #unregisterImsRegistrationCallback(RegistrationCallback)\n     * @throws IllegalArgumentException if the subscription associated with this callback is not\n     * active (SIM is not inserted, ESIM inactive) or invalid, or a null {@link Executor} or\n     * {@link CapabilityCallback} callback.\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@link ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     * @deprecated Use {@link RegistrationManager#registerImsRegistrationCallback(Executor,\n     * RegistrationManager.RegistrationCallback)} instead.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.RegistrationManager#registerImsRegistrationCallback(Executor", "android.telephony.ims.aidl.IImsCapabilityCallback", "android.telephony.ims.ImsManager#getImsMmTelManager(int)", "RegistrationCallback", "SubscriptionManager.OnSubscriptionsChangedListener", "#unregisterImsRegistrationCallback(RegistrationCallback)", "android.annotation.CallbackExecutor", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     *\n     * <p>Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * {@inheritDoc}\n     *\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void unregisterImsRegistrationCallback(@NonNull RegistrationCallback c)",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing {@link RegistrationCallback}.\n     *\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be removed. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     *\n     * @param c The {@link RegistrationCallback} to be removed.\n     * @see SubscriptionManager.OnSubscriptionsChangedListener\n     * @see #registerImsRegistrationCallback(Executor, RegistrationCallback)\n     * @deprecated Use {@link #unregisterImsRegistrationCallback(\n     * RegistrationManager.RegistrationCallback)}.\n     * @hide\n     ",
    "links" : [ "#unregisterImsRegistrationCallback(", "RegistrationCallback" ]
  }, {
    "name" : "public void unregisterImsRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)",
    "returnType" : "void",
    "comment" : "\n     *\n     * <p>Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     *{@inheritDoc}\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void registerImsEmergencyRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link RegistrationCallback} with the system, which will provide IMS emergency\n     * registration updates for the subscription specified in\n     * {@link ImsManager#getImsMmTelManager(int)}. Use\n     * {@link SubscriptionManager.OnSubscriptionsChangedListener} to listen to Subscription changed\n     * events and call {@link #unregisterImsRegistrationCallback(RegistrationCallback)} to clean up.\n     *\n     * When the callback is registered, it will initiate the callback c to be called with the\n     * current emergency registration state.\n     * Emergency registration callback is available when there is valid SIM card.\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param c The {@link RegistrationCallback} to be added.\n     * @see #unregisterImsEmergencyRegistrationCallback\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@link ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsManager#getImsMmTelManager(int)", "RegistrationCallback", "SubscriptionManager.OnSubscriptionsChangedListener", "#unregisterImsRegistrationCallback(RegistrationCallback)", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public void unregisterImsEmergencyRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing {@link RegistrationCallback} for Emergency IMS registration.\n     *\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be removed. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @param c The {@link RegistrationCallback} to be removed.\n     * @see android.telephony.SubscriptionManager.OnSubscriptionsChangedListener\n     * @see #registerImsEmergencyRegistrationCallback(Executor,\n     *                                 RegistrationManager.RegistrationCallback)\n     * @hide\n     ",
    "links" : [ "RegistrationCallback", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @ImsRegistrationState Consumer<Integer> stateCallback)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)",
    "returnType" : "void",
    "comment" : "\n     * <p>Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     *{@inheritDoc}\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void registerMmTelCapabilityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull CapabilityCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link CapabilityCallback} with the system, which will provide MmTel service\n     * availability updates for the subscription specified in\n     * {@link ImsManager#getImsMmTelManager(int)}.\n     *\n     * Use {@link SubscriptionManager.OnSubscriptionsChangedListener} to listen to\n     * subscription changed events and call\n     * {@link #unregisterMmTelCapabilityCallback(CapabilityCallback)} to clean up.\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * When the callback is registered, it will initiate the callback c to be called with the\n     * current capabilities.\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param c The MmTel {@link CapabilityCallback} to be registered.\n     * @see #unregisterMmTelCapabilityCallback(CapabilityCallback)\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@code ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsCapabilityCallback", "android.telephony.ims.ImsManager#getImsMmTelManager(int)", "SubscriptionManager.OnSubscriptionsChangedListener", "#unregisterMmTelCapabilityCallback(CapabilityCallback)", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void unregisterMmTelCapabilityCallback(@NonNull CapabilityCallback c)",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing MmTel {@link CapabilityCallback}.\n     *\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be removed. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @param c The MmTel {@link CapabilityCallback} to be removed.\n     * @see #registerMmTelCapabilityCallback(Executor, CapabilityCallback)\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsCapabilityCallback", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public boolean isAdvancedCallingSettingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Query the user’s setting for “Advanced Calling” or \"Enhanced 4G LTE\", which is used to\n     * enable MmTel IMS features, depending on the carrier configuration for the current\n     * subscription. If this setting is enabled, IMS voice and video telephony over IWLAN/LTE will\n     * be enabled as long as the carrier has provisioned these services for the specified\n     * subscription. Other IMS services (SMS/UT) are not affected by this user setting and depend on\n     * carrier requirements.\n     * <p>\n     * Note: If the carrier configuration for advanced calling is not editable or hidden, this\n     * method will always return the default value.\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_EDITABLE_ENHANCED_4G_LTE_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_HIDE_ENHANCED_4G_LTE_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VOLTE_AVAILABLE_BOOL\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @return true if the user's setting for advanced calling is enabled, false otherwise.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void setAdvancedCallingSettingEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Modify the user’s setting for “Advanced Calling” or \"Enhanced 4G LTE\", which is used to\n     * enable MmTel IMS features, depending on the carrier configuration for the current\n     * subscription. If this setting is enabled, IMS voice and video telephony over IWLAN/LTE will\n     * be enabled as long as the carrier has provisioned these services for the specified\n     * subscription. Other IMS services (SMS/UT) are not affected by this user setting and depend on\n     * carrier requirements.\n     *\n     * Modifying this value may also trigger an IMS registration or deregistration, depending on\n     * whether or not the new value is enabled or disabled.\n     *\n     * Note: If the carrier configuration for advanced calling is not editable or hidden, this\n     * method will do nothing and will instead always use the default value.\n     *\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_EDITABLE_ENHANCED_4G_LTE_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_HIDE_ENHANCED_4G_LTE_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VOLTE_AVAILABLE_BOOL\n     * @see #isAdvancedCallingSettingEnabled()\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS" ]
  }, {
    "name" : "public boolean isCapable(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int imsRegTech)",
    "returnType" : "boolean",
    "comment" : "\n     * Query the IMS MmTel capability for a given registration technology. This does not\n     * necessarily mean that we are registered and the capability is available, but rather the\n     * subscription is capable of this service over IMS.\n     *\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VOLTE_AVAILABLE_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VT_AVAILABLE_BOOL\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_IMS_GBA_REQUIRED_BOOL\n     * @see #isAvailable(int, int)\n     *\n     * @param imsRegTech The IMS registration technology.\n     * @param capability The IMS MmTel capability to query.\n     * @return {@code true} if the MmTel IMS capability is capable for this subscription, false\n     *         otherwise.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS" ]
  }, {
    "name" : "public boolean isAvailable(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int imsRegTech)",
    "returnType" : "boolean",
    "comment" : "\n     * Query the availability of an IMS MmTel capability for a given registration technology. If\n     * a capability is available, IMS is registered and the service is currently available over IMS.\n     *\n     * @see #isCapable(int, int)\n     *\n     * @param imsRegTech The IMS registration technology.\n     * @param capability The IMS MmTel capability to query.\n     * @return {@code true} if the MmTel IMS capability is available for this subscription, false\n     *         otherwise.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS" ]
  }, {
    "name" : "public void isSupported(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @AccessNetworkConstants.TransportType int transportType, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Query whether or not the requested MmTel capability is supported by the carrier on the\n     * specified network transport.\n     * <p>\n     * This is a configuration option and does not change. The only time this may change is if a\n     * new IMS configuration is loaded when there is a\n     * {@link CarrierConfigManager#ACTION_CARRIER_CONFIG_CHANGED} broadcast for this subscription.\n     * @param capability The capability that is being queried for support on the carrier network.\n     * @param transportType The transport type of the capability to check support for.\n     * @param executor The executor that the callback will be called with.\n     * @param callback A consumer containing a Boolean result specifying whether or not the\n     *                 capability is supported on this carrier network for the transport specified.\n     * @throws ImsException if the subscription is no longer valid or the IMS service is not\n     * available.\n     * @hide\n     ",
    "links" : [ "android.telephony.CarrierConfigManager#ACTION_CARRIER_CONFIG_CHANGED" ]
  }, {
    "name" : "public boolean isVtSettingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * The user's setting for whether or not they have enabled the \"Video Calling\" setting.\n     *\n     * <p>\n     * Note: If the carrier configuration for advanced calling is not editable or hidden, this\n     * method will always return the default value.\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @return true if the user’s “Video Calling” setting is currently enabled.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void setVtSettingEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Change the user's setting for Video Telephony and enable the Video Telephony capability.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see #isVtSettingEnabled()\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS" ]
  }, {
    "name" : "public boolean isVoWiFiSettingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the user's setting for Voice over WiFi is enabled and false if it is not.\n     *\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void setVoWiFiSettingEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user's setting for whether or not Voice over WiFi is enabled.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @param isEnabled true if the user's setting for Voice over WiFi is enabled, false otherwise=\n     * @see #isVoWiFiSettingEnabled()\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS" ]
  }, {
    "name" : "public boolean isCrossSimCallingEnabled() throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * This configuration is meaningful only on dual sim device.\n     * If enabled, this will result in the device setting up IMS of all other\n     * active subscriptions over the INTERNET APN of the primary default data subscription\n     * when any of those subscriptions are roaming or out of service and if wifi is not available\n     * for VoWifi. This feature will be disabled if\n     * {@link CarrierConfigManager#KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL} is set to false.\n     * <p>Following are the conditions in which system will try to register IMS over\n     * cross sim\n     * <ul>\n     *     <li>Wifi is not available, one SIM is roaming and the default data\n     *     SIM is in home network. Then roaming SIM IMS will be registered over INTERNET APN of the\n     *     default data subscription </li>\n     *     <li>Wifi is not available, one SIM is out of service and the default data\n     *     SIM is in home network. Then out of service SIM IMS will be registered over INTERNET\n     *     APN of the default data subscription </li>\n     * </ul>\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @throws ImsException if the IMS service associated with this subscription is not available or\n     * the IMS service is not available.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @return true if the user's setting for Voice over Cross SIM is enabled and false if it is not\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.CarrierConfigManager#KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void setCrossSimCallingEnabled(boolean isEnabled) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Sets the user's setting for whether or not Voice over Cross SIM is enabled.\n     * If enabled, this will result in the device setting up IMS of all other\n     * active subscriptions over the INTERNET APN of the primary default data subscription\n     * when any of those subscriptions are roaming or out of service and if wifi is not available\n     * for VoWifi. This feature will be disabled if\n     * {@link CarrierConfigManager#KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL} is set to false.\n     *\n     * <p>Following are the conditions in which system will try to register IMS over\n     * cross sim\n     * <ul>\n     *     <li>Wifi is not available, one SIM is roaming and the default data\n     *     SIM is in home network. Then roaming SIM IMS will be registered over INTERNET APN of the\n     *     default data subscription </li>\n     *     <li>Wifi is not available, one SIM is out of service and the default data\n     *     SIM is in home network. Then out of service SIM IMS will be registered over INTERNET\n     *     APN of the default data subscription </li>\n     * </ul>\n     * @throws ImsException if the IMS service associated with this subscription is not available or\n     * the IMS service is not available.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @param isEnabled true if the user's setting for Voice over Cross SIM is enabled,\n     *                 false otherwise\n     * @see #isCrossSimCallingEnabled()\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.CarrierConfigManager#KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL" ]
  }, {
    "name" : "public boolean isVoWiFiRoamingSettingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the user's voice over WiFi roaming setting associated with the current subscription.\n     *\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @return true if the user's setting for Voice over WiFi while roaming is enabled, false\n     * if disabled.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void setVoWiFiRoamingSettingEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Change the user's setting for Voice over WiFi while roaming.\n     *\n     * @param isEnabled true if the user's setting for Voice over WiFi while roaming is enabled,\n     *     false otherwise.\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see #isVoWiFiRoamingSettingEnabled()\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS" ]
  }, {
    "name" : "public void setVoWiFiNonPersistent(boolean isCapable, int mode)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the Voice over WiFi capability to true for IMS, but do not persist the setting.\n     * Typically used during the Voice over WiFi registration process for some carriers.\n     *\n     * @param isCapable true if the IMS stack should try to register for IMS over IWLAN, false\n     *     otherwise.\n     * @param mode the Voice over WiFi mode preference to set, which can be one of the following:\n     * - {@link #WIFI_MODE_WIFI_ONLY}\n     * - {@link #WIFI_MODE_CELLULAR_PREFERRED}\n     * - {@link #WIFI_MODE_WIFI_PREFERRED}\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see #setVoWiFiSettingEnabled(boolean)\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "#WIFI_MODE_CELLULAR_PREFERRED", "#WIFI_MODE_WIFI_ONLY", "#WIFI_MODE_WIFI_PREFERRED" ]
  }, {
    "name" : "public int getVoWiFiModeSetting()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user's voice over WiFi Roaming mode setting associated with the device.\n     *\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @return The Voice over WiFi Mode preference set by the user, which can be one of the\n     * following:\n     * - {@link #WIFI_MODE_WIFI_ONLY}\n     * - {@link #WIFI_MODE_CELLULAR_PREFERRED}\n     * - {@link #WIFI_MODE_WIFI_PREFERRED}\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.TelephonyManager#hasCarrierPrivileges", "#WIFI_MODE_CELLULAR_PREFERRED", "Manifest.permission#READ_PRECISE_PHONE_STATE", "#WIFI_MODE_WIFI_ONLY", "#WIFI_MODE_WIFI_PREFERRED" ]
  }, {
    "name" : "public void setVoWiFiModeSetting(@WiFiCallingMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set the user's preference for Voice over WiFi calling mode.\n     * @param mode The user's preference for the technology to register for IMS over, can be one of\n     *    the following:\n     * - {@link #WIFI_MODE_WIFI_ONLY}\n     * - {@link #WIFI_MODE_CELLULAR_PREFERRED}\n     * - {@link #WIFI_MODE_WIFI_PREFERRED}\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see #getVoWiFiModeSetting()\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "#WIFI_MODE_CELLULAR_PREFERRED", "#WIFI_MODE_WIFI_ONLY", "#WIFI_MODE_WIFI_PREFERRED" ]
  }, {
    "name" : "public int getVoWiFiRoamingModeSetting()",
    "returnType" : "int",
    "comment" : "\n     * Set the user's preference for Voice over WiFi calling mode while the device is roaming on\n     * another network.\n     *\n     * @return The user's preference for the technology to register for IMS over when roaming on\n     *     another network, can be one of the following:\n     *     - {@link #WIFI_MODE_WIFI_ONLY}\n     *     - {@link #WIFI_MODE_CELLULAR_PREFERRED}\n     *     - {@link #WIFI_MODE_WIFI_PREFERRED}\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see #setVoWiFiRoamingSettingEnabled(boolean)\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "#WIFI_MODE_CELLULAR_PREFERRED", "#WIFI_MODE_WIFI_ONLY", "#WIFI_MODE_WIFI_PREFERRED" ]
  }, {
    "name" : "public void setVoWiFiRoamingModeSetting(@WiFiCallingMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set the user's preference for Voice over WiFi mode while the device is roaming on another\n     * network.\n     *\n     * @param mode The user's preference for the technology to register for IMS over when roaming on\n     *     another network, can be one of the following:\n     *     - {@link #WIFI_MODE_WIFI_ONLY}\n     *     - {@link #WIFI_MODE_CELLULAR_PREFERRED}\n     *     - {@link #WIFI_MODE_WIFI_PREFERRED}\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see #getVoWiFiRoamingModeSetting()\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "#WIFI_MODE_CELLULAR_PREFERRED", "#WIFI_MODE_WIFI_ONLY", "#WIFI_MODE_WIFI_PREFERRED" ]
  }, {
    "name" : "public void setRttCapabilitySetting(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the capability of RTT for IMS calls placed on this subscription.\n     *\n     * Note: This does not affect the value of\n     * {@link android.provider.Settings.Secure#RTT_CALLING_MODE}, which is the global user setting\n     * for RTT. That value is enabled/disabled separately by the user through the Accessibility\n     * settings.\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @param isEnabled if true RTT should be enabled during calls made on this subscription.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.provider.Settings.Secure#RTT_CALLING_MODE" ]
  }, {
    "name" : "public boolean isTtyOverVolteEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if TTY over VoLTE is supported\n     *\n     * <p>This API requires one of the following:\n     * <ul>\n     *     <li>The caller holds the READ_PRECISE_PHONE_STATE permission.</li>\n     *     <li>If the caller is the device or profile owner, the caller holds the\n     *     {@link Manifest.permission#READ_PRECISE_PHONE_STATE} permission.</li>\n     *     <li>The caller has carrier privileges (see\n     *     {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on any\n     *     active subscription.</li>\n     * </ul>\n     * <p>The profile owner is an app that owns a managed profile on the device; for more details\n     * see <a href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>.\n     * Access by profile owners is deprecated and will be removed in a future release.\n     *\n     * @throws IllegalArgumentException if the subscription associated with this operation is not\n     * active (SIM is not inserted, ESIM inactive) or invalid.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @see android.telephony.CarrierConfigManager#KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "public void getFeatureState(@NonNull @CallbackExecutor Executor executor, @NonNull @ImsFeature.ImsState Consumer<Integer> callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Get the status of the MmTel Feature registered on this subscription.\n     * @param executor The executor that will be used to call the callback.\n     * @param callback A callback containing an Integer describing the current state of the\n     *                 MmTel feature, Which will be one of the following:\n     *                 {@link ImsFeature#STATE_UNAVAILABLE},\n     *                {@link ImsFeature#STATE_INITIALIZING},\n     *                {@link ImsFeature#STATE_READY}. Will be called using the executor\n     *                 specified when the service state has been retrieved from the IMS service.\n     * @throws ImsException if the IMS service associated with this subscription is not available or\n     * the IMS service is not available.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.feature.ImsFeature#STATE_UNAVAILABLE", "android.telephony.ims.feature.ImsFeature#STATE_READY", "android.telephony.ims.feature.ImsFeature#STATE_INITIALIZING" ]
  }, {
    "name" : "public void registerImsStateCallback(@NonNull Executor executor, @NonNull ImsStateCallback callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Register a new callback, which is used to notify the registrant of changes to\n     * the state of the underlying IMS service that is attached to telephony to\n     * implement IMS functionality. If the manager is created for\n     * the {@link SubscriptionManager#DEFAULT_SUBSCRIPTION_ID},\n     * this throws an {@link ImsException}.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE READ_PRECISE_PHONE_STATE}\n     * or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param executor the Executor that will be used to call the {@link ImsStateCallback}.\n     * @param callback The callback instance being registered.\n     * @throws ImsException in the case that the callback can not be registered.\n     * See {@link ImsException#getCode} for more information on when this is called.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.ims.ImsException", "android.telephony.SubscriptionManager#DEFAULT_SUBSCRIPTION_ID", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.ImsException#getCode", "android.telephony.ims.ImsStateCallback" ]
  }, {
    "name" : "public void unregisterImsStateCallback(@NonNull ImsStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered callback.\n     *\n     * @param callback The callback instance to be unregistered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getOpPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ITelephony getITelephony()",
    "returnType" : "ITelephony",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ITelephony getITelephonyInterface()",
    "returnType" : "ITelephony",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String wifiCallingModeToString(@ImsMmTelManager.WiFiCallingMode int mode)",
    "returnType" : "String",
    "comment" : "\n     * Convert Wi-Fi calling mode to string.\n     *\n     * @param mode Wi-Fi calling mode.\n     * @return The Wi-Fi calling mode in string format.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ImsMmTelManager createForSubscriptionId(int subId)", "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationCallback c) throws ImsException", "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException", "public void unregisterImsRegistrationCallback(@NonNull RegistrationCallback c)", "public void unregisterImsRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)", "public void registerImsEmergencyRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException", "public void unregisterImsEmergencyRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)", "public void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @ImsRegistrationState Consumer<Integer> stateCallback)", "public void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)", "public void registerMmTelCapabilityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull CapabilityCallback c) throws ImsException", "public void unregisterMmTelCapabilityCallback(@NonNull CapabilityCallback c)", "public boolean isAdvancedCallingSettingEnabled()", "public void setAdvancedCallingSettingEnabled(boolean isEnabled)", "public boolean isCapable(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int imsRegTech)", "public boolean isAvailable(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int imsRegTech)", "public void isSupported(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @AccessNetworkConstants.TransportType int transportType, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback) throws ImsException", "public boolean isVtSettingEnabled()", "public void setVtSettingEnabled(boolean isEnabled)", "public boolean isVoWiFiSettingEnabled()", "public void setVoWiFiSettingEnabled(boolean isEnabled)", "public boolean isCrossSimCallingEnabled() throws ImsException", "public void setCrossSimCallingEnabled(boolean isEnabled) throws ImsException", "public boolean isVoWiFiRoamingSettingEnabled()", "public void setVoWiFiRoamingSettingEnabled(boolean isEnabled)", "public void setVoWiFiNonPersistent(boolean isCapable, int mode)", "public int getVoWiFiModeSetting()", "public void setVoWiFiModeSetting(@WiFiCallingMode int mode)", "public int getVoWiFiRoamingModeSetting()", "public void setVoWiFiRoamingModeSetting(@WiFiCallingMode int mode)", "public void setRttCapabilitySetting(boolean isEnabled)", "public boolean isTtyOverVolteEnabled()", "public void getFeatureState(@NonNull @CallbackExecutor Executor executor, @NonNull @ImsFeature.ImsState Consumer<Integer> callback) throws ImsException", "public void registerImsStateCallback(@NonNull Executor executor, @NonNull ImsStateCallback callback) throws ImsException", "public void unregisterImsStateCallback(@NonNull ImsStateCallback callback)", "private String getOpPackageName()", "private ITelephony getITelephony()", "private static ITelephony getITelephonyInterface()", "public static String wifiCallingModeToString(@ImsMmTelManager.WiFiCallingMode int mode)" ],
  "variableNames" : [ "TAG", "WIFI_MODE_UNKNOWN", "WIFI_MODE_WIFI_ONLY", "WIFI_MODE_CELLULAR_PREFERRED", "WIFI_MODE_WIFI_PREFERRED", "mContext", "mSubId", "mBinderCache", "sTelephonyCache" ]
}