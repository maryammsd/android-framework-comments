{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceHolder.java",
  "packageName" : "android.view",
  "className" : "Callback",
  "comment" : "\n     * A client may implement this interface to receive information about\n     * changes to the surface.  When used with a {@link SurfaceView}, the\n     * Surface being held is only available between calls to\n     * {@link #surfaceCreated(SurfaceHolder)} and\n     * {@link #surfaceDestroyed(SurfaceHolder)}.  The Callback is set with\n     * {@link SurfaceHolder#addCallback SurfaceHolder.addCallback} method.\n     ",
  "links" : [ "#surfaceCreated(SurfaceHolder)", "android.view.SurfaceView", "#surfaceDestroyed(SurfaceHolder)", "android.view.SurfaceHolder#addCallback" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void surfaceCreated(@NonNull SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n         * This is called immediately after the surface is first created.\n         * Implementations of this should start up whatever rendering code\n         * they desire.  Note that only one thread can ever draw into\n         * a {@link Surface}, so you should not draw into the Surface here\n         * if your normal rendering will be in another thread.\n         *\n         * @param holder The SurfaceHolder whose surface is being created.\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : " void surfaceChanged(@NonNull SurfaceHolder holder, @PixelFormat.Format int format, @IntRange(from = 0) int width, @IntRange(from = 0) int height)",
    "returnType" : "void",
    "comment" : "\n         * This is called immediately after any structural changes (format or\n         * size) have been made to the surface.  You should at this point update\n         * the imagery in the surface.  This method is always called at least\n         * once, after {@link #surfaceCreated}.\n         *\n         * @param holder The SurfaceHolder whose surface has changed.\n         * @param format The new {@link PixelFormat} of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#surfaceCreated", "android.graphics.PixelFormat" ]
  }, {
    "name" : " void surfaceDestroyed(@NonNull SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n         * This is called immediately before a surface is being destroyed. After\n         * returning from this call, you should no longer try to access this\n         * surface.  If you have a rendering thread that directly accesses\n         * the surface, you must ensure that thread is no longer touching the\n         * Surface before returning from this function.\n         *\n         * @param holder The SurfaceHolder whose surface is being destroyed.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void surfaceCreated(@NonNull SurfaceHolder holder)", " void surfaceChanged(@NonNull SurfaceHolder holder, @PixelFormat.Format int format, @IntRange(from = 0) int width, @IntRange(from = 0) int height)", " void surfaceDestroyed(@NonNull SurfaceHolder holder)" ],
  "variableNames" : [ ]
}