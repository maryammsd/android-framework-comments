{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/restrictions/RestrictionsReceiver.java",
  "packageName" : "android.service.restrictions",
  "className" : "RestrictionsReceiver",
  "comment" : "\n * Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a\n * Restrictions Provider, extend from this class and implement the abstract methods.\n * Export this receiver in the manifest. A profile owner device admin can then register this\n * component as a Restrictions Provider using\n * {@link DevicePolicyManager#setRestrictionsProvider(ComponentName, ComponentName)}.\n * <p>\n * The function of a Restrictions Provider is to transport permission requests from apps on this\n * device to an administrator (most likely on a remote device or computer) and deliver back\n * responses. The response should be sent back to the app via\n * {@link RestrictionsManager#notifyPermissionResponse(String, PersistableBundle)}.\n *\n * @see RestrictionsManager\n ",
  "links" : [ "android.content.RestrictionsManager#notifyPermissionResponse(String", "android.app.admin.DevicePolicyManager#setRestrictionsProvider(ComponentName" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onRequestPermission(Context context, String packageName, String requestType, String requestId, PersistableBundle request)",
    "returnType" : "void",
    "comment" : "\n     * An asynchronous permission request made by an application for an operation that requires\n     * authorization by a local or remote administrator other than the user. The Restrictions\n     * Provider should transfer the request to the administrator and deliver back a response, when\n     * available. The calling application is aware that the response could take an indefinite\n     * amount of time.\n     * <p>\n     * If the request bundle contains the key {@link RestrictionsManager#REQUEST_KEY_NEW_REQUEST},\n     * then a new request must be sent. Otherwise the provider can look up any previous response\n     * to the same requestId and return the cached response.\n     *\n     * @param packageName the application requesting permission.\n     * @param requestType the type of request, which determines the content and presentation of\n     * the request data.\n     * @param request the request data bundle containing at a minimum a request id.\n     *\n     * @see RestrictionsManager#REQUEST_TYPE_APPROVAL\n     * @see RestrictionsManager#REQUEST_KEY_ID\n     ",
    "links" : [ "android.content.RestrictionsManager#REQUEST_KEY_NEW_REQUEST" ]
  }, {
    "name" : "public void onReceive(Context context, Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Intercept standard Restrictions Provider broadcasts.  Implementations\n     * should not override this method; it is better to implement the\n     * convenience callbacks for each action.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onRequestPermission(Context context, String packageName, String requestType, String requestId, PersistableBundle request)", "public void onReceive(Context context, Intent intent)" ],
  "variableNames" : [ "TAG" ]
}