{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/text/LineBreaker.java",
  "packageName" : "android.graphics.text",
  "className" : "LineBreaker",
  "comment" : "\n * Provides automatic line breaking for a <em>single</em> paragraph.\n *\n * <p>\n * <pre>\n * <code>\n * Paint paint = new Paint();\n * Paint bigPaint = new Paint();\n * bigPaint.setTextSize(paint.getTextSize() * 2.0);\n * String text = \"Hello, Android.\";\n *\n * // Prepare the measured text\n * MeasuredText mt = new MeasuredText.Builder(text.toCharArray())\n *     .appendStyleRun(paint, 7, false)  // Use paint for \"Hello, \"\n *     .appednStyleRun(bigPaint, 8, false)  // Use bigPaint for \"Hello, \"\n *     .build();\n *\n * LineBreaker lb = new LineBreaker.Builder()\n *     // Use simple line breaker\n *     .setBreakStrategy(LineBreaker.BREAK_STRATEGY_SIMPLE)\n *     // Do not add hyphenation.\n *     .setHyphenationFrequency(LineBreaker.HYPHENATION_FREQUENCY_NONE)\n *     // Build the LineBreaker\n *     .build();\n *\n * ParagraphConstraints c = new ParagraphConstraints();\n * c.setWidth(240);  // Set the line wieth as 1024px\n *\n * // Do the line breaking\n * Result r = lb.computeLineBreaks(mt, c, 0);\n *\n * // Compute the total height of the text.\n * float totalHeight = 0;\n * for (int i = 0; i < r.getLineCount(); ++i) {  // iterate over the lines\n *    totalHeight += r.getLineDescent(i) - r.getLineAscent(i);\n * }\n *\n * // Draw text to the canvas\n * Bitmap bmp = Bitmap.createBitmap(240, totalHeight, Bitmap.Config.ARGB_8888);\n * Canvas c = new Canvas(bmp);\n * float yOffset = 0f;\n * int prevOffset = 0;\n * for (int i = 0; i < r.getLineCount(); ++i) {  // iterate over the lines\n *     int nextOffset = r.getLineBreakOffset(i);\n *     c.drawText(text, prevOffset, nextOffset, 0f, yOffset, paint);\n *\n *     prevOffset = nextOffset;\n *     yOffset += r.getLineDescent(i) - r.getLineAscent(i);\n * }\n * </code>\n * </pre>\n * </p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "BREAK_STRATEGY_SIMPLE",
    "type" : "int",
    "comment" : "\n     * Value for break strategy indicating simple line breaking.\n     *\n     * The line breaker puts words to the line as much as possible and breaks line if no more words\n     * can fit into the same line. Automatic hyphens are only added when a line has a single word\n     * and that word is longer than line width. This is the fastest break strategy and ideal for\n     * editor.\n     ",
    "links" : [ ]
  }, {
    "name" : "BREAK_STRATEGY_HIGH_QUALITY",
    "type" : "int",
    "comment" : "\n     * Value for break strategy indicating high quality line breaking.\n     *\n     * With this option line breaker does whole-paragraph optimization for more readable text, and\n     * also applies automatic hyphenation when required.\n     ",
    "links" : [ ]
  }, {
    "name" : "BREAK_STRATEGY_BALANCED",
    "type" : "int",
    "comment" : "\n     * Value for break strategy indicating balanced line breaking.\n     *\n     * The line breaker does whole-paragraph optimization for making all lines similar length, and\n     * also applies automatic hyphenation when required. This break strategy is good for small\n     * screen devices such as watch screens.\n     ",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_FREQUENCY_NONE",
    "type" : "int",
    "comment" : "\n     * Value for hyphenation frequency indicating no automatic hyphenation.\n     *\n     * Using this option disables auto hyphenation which results in better text layout performance.\n     * A word may be broken without hyphens when a line has a single word and that word is longer\n     * than line width. Soft hyphens are ignored and will not be used as suggestions for potential\n     * line breaks.\n     ",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_FREQUENCY_NORMAL",
    "type" : "int",
    "comment" : "\n     * Value for hyphenation frequency indicating a light amount of automatic hyphenation.\n     *\n     * This hyphenation frequency is useful for informal cases, such as short sentences or chat\n     * messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_FREQUENCY_FULL",
    "type" : "int",
    "comment" : "\n     * Value for hyphenation frequency indicating the full amount of automatic hyphenation.\n     *\n     * This hyphenation frequency is useful for running text and where it's important to put the\n     * maximum amount of text in a screen with limited space.\n     ",
    "links" : [ ]
  }, {
    "name" : "JUSTIFICATION_MODE_NONE",
    "type" : "int",
    "comment" : "\n     * Value for justification mode indicating no justification.\n     ",
    "links" : [ ]
  }, {
    "name" : "JUSTIFICATION_MODE_INTER_WORD",
    "type" : "int",
    "comment" : "\n     * Value for justification mode indicating the text is justified by stretching word spacing.\n     ",
    "links" : [ ]
  }, {
    "name" : "JUSTIFICATION_MODE_INTER_CHARACTER",
    "type" : "int",
    "comment" : "\n     * Value for justification mode indicating the text is justified by stretching letter spacing.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Result computeLineBreaks(@NonNull MeasuredText measuredPara, @NonNull ParagraphConstraints constraints, @IntRange(from = 0) int lineNumber)",
    "returnType" : "Result",
    "comment" : "\n     * Break paragraph into lines.\n     *\n     * The result is filled to out param.\n     *\n     * @param measuredPara a result of the text measurement\n     * @param constraints for a single paragraph\n     * @param lineNumber a line number of this paragraph\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nInit(@BreakStrategy int breakStrategy, @HyphenationFrequency int hyphenationFrequency, boolean isJustified, @Nullable int[] indents, boolean useBoundsForWidth)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetReleaseFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nComputeLineBreaks(long nativePtr, @NonNull char[] text, long measuredTextPtr, @IntRange(from = 0) int length, @FloatRange(from = 0.0f) float firstWidth, @IntRange(from = 0) int firstWidthLineCount, @FloatRange(from = 0.0f) float restWidth, @Nullable float[] variableTabStops, float defaultTabStop, @IntRange(from = 0) int indentsOffset)",
    "returnType" : "long",
    "comment" : " charWidths must be at least the length of the text.",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetLineCount(long ptr)",
    "returnType" : "int",
    "comment" : " Result accessors",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetLineBreakOffset(long ptr, int idx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetLineWidth(long ptr, int idx)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetLineAscent(long ptr, int idx)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetLineDescent(long ptr, int idx)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetLineFlag(long ptr, int idx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetReleaseResultFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Result computeLineBreaks(@NonNull MeasuredText measuredPara, @NonNull ParagraphConstraints constraints, @IntRange(from = 0) int lineNumber)", "private static native long nInit(@BreakStrategy int breakStrategy, @HyphenationFrequency int hyphenationFrequency, boolean isJustified, @Nullable int[] indents, boolean useBoundsForWidth)", "private static native long nGetReleaseFunc()", "private static native long nComputeLineBreaks(long nativePtr, @NonNull char[] text, long measuredTextPtr, @IntRange(from = 0) int length, @FloatRange(from = 0.0f) float firstWidth, @IntRange(from = 0) int firstWidthLineCount, @FloatRange(from = 0.0f) float restWidth, @Nullable float[] variableTabStops, float defaultTabStop, @IntRange(from = 0) int indentsOffset)", "private static native int nGetLineCount(long ptr)", "private static native int nGetLineBreakOffset(long ptr, int idx)", "private static native float nGetLineWidth(long ptr, int idx)", "private static native float nGetLineAscent(long ptr, int idx)", "private static native float nGetLineDescent(long ptr, int idx)", "private static native int nGetLineFlag(long ptr, int idx)", "private static native long nGetReleaseResultFunc()" ],
  "variableNames" : [ "BREAK_STRATEGY_SIMPLE", "BREAK_STRATEGY_HIGH_QUALITY", "BREAK_STRATEGY_BALANCED", "HYPHENATION_FREQUENCY_NONE", "HYPHENATION_FREQUENCY_NORMAL", "HYPHENATION_FREQUENCY_FULL", "JUSTIFICATION_MODE_NONE", "JUSTIFICATION_MODE_INTER_WORD", "JUSTIFICATION_MODE_INTER_CHARACTER", "mNativePtr" ]
}