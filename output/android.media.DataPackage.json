{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioMetadata.java",
  "packageName" : "android.media",
  "className" : "DataPackage",
  "comment" : "\n     * @hide\n     * Describes a unpacking/packing contract of type {@code T} out of a {@link ByteBuffer}\n     *\n     * @param <T> the type being unpack\n     ",
  "links" : [ "java.nio.ByteBuffer" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " T unpack(ByteBuffer buffer)",
    "returnType" : "T",
    "comment" : "\n         * Read an item from a {@link ByteBuffer}.\n         *\n         * The parceling format is assumed the same as the one described in\n         * audio_utils::Metadata.h. Copied here as a reference.\n         * All values are native endian order.\n         *\n         * Datum = { (type_size_t)  Type (the type index from type_as_value<T>.)\n         *           (datum_size_t) Size (size of datum, including the size field)\n         *           (byte string)  Payload<Type>\n         *         }\n         *\n         * Primitive types:\n         * Payload<Type> = { bytes in native endian order }\n         *\n         * Vector, Map, Container types:\n         * Payload<Type> = { (index_size_t) number of elements\n         *                   (byte string)  Payload<Element_Type> * number\n         *                 }\n         *\n         * Pair container types:\n         * Payload<Type> = { (byte string) Payload<first>,\n         *                   (byte string) Payload<second>\n         *                 }\n         *\n         * @param buffer the byte buffer to read from\n         * @return an object, which types is given type for {@link DataPackage}\n         * @throws BufferUnderflowException when there is no enough data remaining\n         *      in the buffer for unpacking.\n         ",
    "links" : [ "DataPackage", "java.nio.ByteBuffer" ]
  }, {
    "name" : " boolean pack(AutoGrowByteBuffer output, T obj)",
    "returnType" : "boolean",
    "comment" : "\n         * Pack the item into a byte array. This is the reversed way of unpacking.\n         *\n         * @param output is the stream to which to write the data\n         * @param obj the item to pack\n         * @return true if packing successfully. Otherwise, return false.\n         ",
    "links" : [ ]
  }, {
    "name" : " Class getMyType()",
    "returnType" : "Class",
    "comment" : "\n         * Return what kind of data is contained in the package.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " T unpack(ByteBuffer buffer)", " boolean pack(AutoGrowByteBuffer output, T obj)", " Class getMyType()" ],
  "variableNames" : [ ]
}