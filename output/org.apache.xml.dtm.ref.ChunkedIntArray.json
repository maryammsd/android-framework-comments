{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/ChunkedIntArray.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "ChunkedIntArray",
  "comment" : "\n * <code>ChunkedIntArray</code> is an extensible array of blocks of integers.\n * (I'd consider Vector, but it's unable to handle integers except by\n * turning them into Objects.)\n\n * <p>Making this a separate class means some call-and-return overhead. But\n * doing it all inline tends to be fragile and expensive in coder time,\n * not to mention driving up code size. If you want to inline it, feel free.\n * The Java text suggest that private and Final methods may be inlined, \n * and one can argue that this beast need not be made subclassable...</p>\n *\n * <p>%REVIEW% This has strong conceptual overlap with the IntVector class.\n * It would probably be a good thing to merge the two, when time permits.<p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "slotsize",
    "type" : "int",
    "comment" : " Locked, MUST be power of two in current code",
    "links" : [ ]
  }, {
    "name" : "lowbits",
    "type" : "int",
    "comment" : " How many bits address within chunks",
    "links" : [ ]
  }, {
    "name" : "chunkalloc",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lowmask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "chunks",
    "type" : "ChunksVector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fastArray",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastUsed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int appendSlot(int w0, int w1, int w2, int w3)",
    "returnType" : "int",
    "comment" : "\n   * Append a 4-integer record to the CIA, starting with record 1. (Since\n   * arrays are initialized to all-0, 0 has been reserved as the \"unknown\"\n   * value in DTM.)\n   * @return the index at which this record was inserted.\n   ",
    "links" : [ ]
  }, {
    "name" : " int readEntry(int position, int offset) throws ArrayIndexOutOfBoundsException",
    "returnType" : "int",
    "comment" : "\n   * Retrieve an integer from the CIA by record number and column within\n   * the record, both 0-based (though position 0 is reserved for special\n   * purposes).\n   * @param position int Record number\n   * @param slotpos int Column number\n   ",
    "links" : [ ]
  }, {
    "name" : " int specialFind(int startPos, int position)",
    "returnType" : "int",
    "comment" : " This test supports DTM.getNextPreceding.",
    "links" : [ ]
  }, {
    "name" : " int slotsUsed()",
    "returnType" : "int",
    "comment" : "\n   * @return int index of highest-numbered record currently in use\n   ",
    "links" : [ ]
  }, {
    "name" : " void discardLast()",
    "returnType" : "void",
    "comment" : " Disard the highest-numbered record. This is used in the string-buffer\n   CIA; when only a single characters() chunk has been recieved, its index\n   is moved into the Text node rather than being referenced by indirection\n   into the text accumulator.\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeEntry(int position, int offset, int value) throws ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : "\n   * Overwrite the integer found at a specific record and column.\n   * Used to back-patch existing records, most often changing their\n   * \"next sibling\" reference from 0 (unknown) to something meaningful\n   * @param position int Record number\n   * @param offset int Column number\n   * @param value int New contents\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeSlot(int position, int w0, int w1, int w2, int w3)",
    "returnType" : "void",
    "comment" : "\n   * Overwrite an entire (4-integer) record at the specified index.\n   * Mostly used to create record 0, the Document node.\n   * @param position integer Record number\n   * @param w0 int \n   * @param w1 int\n   * @param w2 int\n   * @param w3 int\n   ",
    "links" : [ ]
  }, {
    "name" : " void readSlot(int position, int[] buffer)",
    "returnType" : "void",
    "comment" : "\n   * Retrieve the contents of a record into a user-supplied buffer array.\n   * Used to reduce addressing overhead when code will access several\n   * columns of the record.\n   * @param position int Record number\n   * @param buffer int[] Integer array provided by user, must be large enough\n   * to hold a complete record.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int appendSlot(int w0, int w1, int w2, int w3)", " int readEntry(int position, int offset) throws ArrayIndexOutOfBoundsException", " int specialFind(int startPos, int position)", " int slotsUsed()", " void discardLast()", " void writeEntry(int position, int offset, int value) throws ArrayIndexOutOfBoundsException", " void writeSlot(int position, int w0, int w1, int w2, int w3)", " void readSlot(int position, int[] buffer)" ],
  "variableNames" : [ "slotsize", "lowbits", "chunkalloc", "lowmask", "chunks", "fastArray", "lastUsed" ]
}