{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/MultiResolutionStreamConfigurationMap.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "MultiResolutionStreamConfigurationMap",
  "comment" : "\n * Immutable class to store the information of the multi-resolution streams supported by\n * the camera device.\n *\n * <p>For a {@link\n * android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA\n * logical multi-camera} or an ultra high resolution sensor camera, the maximum resolution of images\n * produced by the camera device may be variable. For example, for a logical multi-camera, depending\n * on factors such as current zoom ratio, the camera device may be backed by different physical\n * cameras. If the physical cameras are of different resolutions, the application may intend to\n * consume the variable full resolution images from the physical cameras. For an ultra high\n * resolution sensor camera, the same use case exists where depending on lighting conditions, the\n * camera device may deem it better to run in default mode and maximum resolution mode.\n * </p>\n *\n * <p>For the use cases described above, multi-resolution output streams can be used by\n * {@link android.hardware.camera2.MultiResolutionImageReader} to allow the\n * camera device to output variable size maximum-resolution images.</p>\n *\n * <p>Similarly, multi-resolution input streams can be used for reprocessing of variable size\n * images. In order to reprocess input images of different sizes, the {@link InputConfiguration}\n * used for creating reprocessable session can be initialized using the group of input stream\n * configurations returned by {@link #getInputInfo}.</p>\n ",
  "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAlogical", "#getInputInfo", "android.hardware.camera2.MultiResolutionImageReader", "android.hardware.camera2.params.InputConfiguration" ],
  "variables" : [ {
    "name" : "mConfigurations",
    "type" : "Map<String, StreamConfiguration[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMultiResolutionOutputConfigs",
    "type" : "Map<Integer, List<MultiResolutionStreamInfo>>",
    "comment" : " Format -> list of MultiResolutionStreamInfo used to create MultiResolutionImageReader ",
    "links" : [ ]
  }, {
    "name" : "mMultiResolutionInputConfigs",
    "type" : "Map<Integer, List<MultiResolutionStreamInfo>>",
    "comment" : " Format -> list of MultiResolutionStreamInfo used for multi-resolution reprocessing ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int[] getOutputFormats()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the output formats in this multi-resolution stream configuration.\n     *\n     * <p>A logical multi-camera or an ultra high resolution sensor camera may support\n     * {@link android.hardware.camera2.MultiResolutionImageReader} to dynamically output maximum\n     * resolutions of different sizes (when switching between physical cameras, or between different\n     * modes of an ultra high resolution sensor camera). This function returns the formats\n     * supported for such case.</p>\n     *\n     * <p>All image formats returned by this function will be defined in either {@link ImageFormat}\n     * or in {@link PixelFormat} (and there is no possibility of collision).</p>\n     *\n     * @return an array of integer format, or empty array if multi-resolution output is not\n     *         supported\n     *\n     * @see ImageFormat\n     * @see PixelFormat\n     * @see android.hardware.camera2.MultiResolutionImageReader\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.hardware.camera2.MultiResolutionImageReader", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public int[] getInputFormats()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the input formats in this multi-resolution stream configuration.\n     *\n     * <p>A logical multi-camera or ultra high resolution sensor camera may support reprocessing\n     * images of different resolutions when switching between physical cameras, or between\n     * different modes of the ultra high resolution sensor camera. This function returns the\n     * formats supported for such case.</p>\n     *\n     * <p>The supported output format for an input format can be queried by calling the camera\n     * device's {@link StreamConfigurationMap#getValidOutputFormatsForInput}.</p>\n     *\n     * <p>All image formats returned by this function will be defined in either {@link ImageFormat}\n     * or in {@link PixelFormat} (and there is no possibility of collision).</p>\n     *\n     * @return an array of integer format, or empty array if no multi-resolution reprocessing is\n     *         supported\n     *\n     * @see ImageFormat\n     * @see PixelFormat\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.hardware.camera2.params.StreamConfigurationMap#getValidOutputFormatsForInput", "android.graphics.PixelFormat" ]
  }, {
    "name" : "private int[] getPublicImageFormats(boolean output)",
    "returnType" : "int[]",
    "comment" : " Get the list of publicly visible multi-resolution input/output stream formats",
    "links" : [ ]
  }, {
    "name" : "public Collection<MultiResolutionStreamInfo> getOutputInfo(@Format int format)",
    "returnType" : "Collection<MultiResolutionStreamInfo>",
    "comment" : "\n     * Get a group of {@code MultiResolutionStreamInfo} with the requested output image\n     * {@code format}\n     *\n     * <p>The {@code format} should be a supported format (one of the formats returned by\n     * {@link #getOutputFormats}).</p>\n     *\n     * @param format an image format from {@link ImageFormat} or {@link PixelFormat}\n     * @return\n     *          a group of supported {@link MultiResolutionStreamInfo}. If the {@code format} is not\n     *          a supported multi-resolution output, an empty group is returned.\n     *\n     * @see ImageFormat\n     * @see PixelFormat\n     * @see #getOutputFormats\n     ",
    "links" : [ "android.graphics.ImageFormat", "#getOutputFormats", "android.hardware.camera2.params.MultiResolutionStreamInfo", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Collection<MultiResolutionStreamInfo> getInputInfo(@Format int format)",
    "returnType" : "Collection<MultiResolutionStreamInfo>",
    "comment" : "\n     * Get a group of {@code MultiResolutionStreamInfo} with the requested input image {@code format}\n     *\n     * <p>The {@code format} should be a supported format (one of the formats returned by\n     * {@link #getInputFormats}).</p>\n     *\n     * @param format an image format from {@link ImageFormat} or {@link PixelFormat}\n     * @return\n     *          a group of supported {@link MultiResolutionStreamInfo}. If the {@code format} is not\n     *          a supported multi-resolution input, an empty group is returned.\n     *\n     * @see ImageFormat\n     * @see PixelFormat\n     * @see #getInputFormats\n     ",
    "links" : [ "android.graphics.ImageFormat", "#getInputFormats", "android.hardware.camera2.params.MultiResolutionStreamInfo", "android.graphics.PixelFormat" ]
  }, {
    "name" : "private Collection<MultiResolutionStreamInfo> getInfo(int format, boolean output)",
    "returnType" : "Collection<MultiResolutionStreamInfo>",
    "comment" : " Get multi-resolution stream info for a particular format",
    "links" : [ ]
  }, {
    "name" : "private void appendConfigurationsString(StringBuilder sb, boolean output)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link MultiResolutionStreamConfigurationMap} is equal to another\n     * {@link MultiResolutionStreamConfigurationMap}.\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "android.hardware.camera2.params.MultiResolutionStreamConfigurationMap" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return this {@link MultiResolutionStreamConfigurationMap} as a string representation.\n     *\n     * <p>{@code \"MultiResolutionStreamConfigurationMap(Outputs([format1: [w:%d, h:%d, id:%s], ...\n     * ... [w:%d, h:%d, id:%s]), [format2: [w:%d, h:%d, id:%s], ... [w:%d, h:%d, id:%s]], ...),\n     * Inputs([format1: [w:%d, h:%d, id:%s], ... [w:%d, h:%d, id:%s], ...).</p>\n     *\n     * @return string representation of {@link MultiResolutionStreamConfigurationMap}\n     ",
    "links" : [ "android.hardware.camera2.params.MultiResolutionStreamConfigurationMap" ]
  } ],
  "methodNames" : [ "public int[] getOutputFormats()", "public int[] getInputFormats()", "private int[] getPublicImageFormats(boolean output)", "public Collection<MultiResolutionStreamInfo> getOutputInfo(@Format int format)", "public Collection<MultiResolutionStreamInfo> getInputInfo(@Format int format)", "private Collection<MultiResolutionStreamInfo> getInfo(int format, boolean output)", "private void appendConfigurationsString(StringBuilder sb, boolean output)", "public boolean equals(final Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "mConfigurations", "mMultiResolutionOutputConfigs", "mMultiResolutionInputConfigs" ]
}