{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebView.java",
  "packageName" : "android.webkit",
  "className" : "WebView",
  "comment" : " only delegated where a specific need exists for them to do so.",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOGTAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEnforceThreadChecking",
    "type" : "boolean",
    "comment" : " set in the WebView constructor.",
    "links" : [ ]
  }, {
    "name" : "SCHEME_TEL",
    "type" : "String",
    "comment" : "\n     * URI scheme for telephone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHEME_MAILTO",
    "type" : "String",
    "comment" : "\n     * URI scheme for email address.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHEME_GEO",
    "type" : "String",
    "comment" : "\n     * URI scheme for map address.\n     ",
    "links" : [ ]
  }, {
    "name" : "RENDERER_PRIORITY_WAIVED",
    "type" : "int",
    "comment" : "\n     * The renderer associated with this WebView is bound with\n     * {@link Context#BIND_WAIVE_PRIORITY}. At this priority level\n     * {@link WebView} renderers will be strong targets for out of memory\n     * killing.\n     *\n     * Use with {@link #setRendererPriorityPolicy}.\n     ",
    "links" : [ "#setRendererPriorityPolicy", "android.content.Context#BIND_WAIVE_PRIORITY", "android.webkit.WebView" ]
  }, {
    "name" : "RENDERER_PRIORITY_BOUND",
    "type" : "int",
    "comment" : "\n     * The renderer associated with this WebView is bound with\n     * the default priority for services.\n     *\n     * Use with {@link #setRendererPriorityPolicy}.\n     ",
    "links" : [ "#setRendererPriorityPolicy" ]
  }, {
    "name" : "RENDERER_PRIORITY_IMPORTANT",
    "type" : "int",
    "comment" : "\n     * The renderer associated with this WebView is bound with\n     * {@link Context#BIND_IMPORTANT}.\n     *\n     * Use with {@link #setRendererPriorityPolicy}.\n     ",
    "links" : [ "#setRendererPriorityPolicy", "android.content.Context#BIND_IMPORTANT" ]
  }, {
    "name" : "mProvider",
    "type" : "WebViewProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFindListener",
    "type" : "FindListenerDistributor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWebViewThread",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setHorizontalScrollbarOverlay(boolean overlay)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the horizontal scrollbar has overlay style.\n     *\n     * @deprecated This method has no effect.\n     * @param overlay {@code true} if horizontal scrollbar should have overlay style\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalScrollbarOverlay(boolean overlay)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the vertical scrollbar has overlay style.\n     *\n     * @deprecated This method has no effect.\n     * @param overlay {@code true} if vertical scrollbar should have overlay style\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean overlayHorizontalScrollbar()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether horizontal scrollbar has overlay style.\n     *\n     * @deprecated This method is now obsolete.\n     * @return {@code true}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean overlayVerticalScrollbar()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether vertical scrollbar has overlay style.\n     *\n     * @deprecated This method is now obsolete.\n     * @return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVisibleTitleHeight()",
    "returnType" : "int",
    "comment" : "\n     * Gets the visible height (in pixels) of the embedded title bar (if any).\n     *\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public SslCertificate getCertificate()",
    "returnType" : "SslCertificate",
    "comment" : "\n     * Gets the SSL certificate for the main top-level page or {@code null} if there is\n     * no certificate (the site is not secure).\n     *\n     * @return the SSL certificate for the main top-level page\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCertificate(SslCertificate certificate)",
    "returnType" : "void",
    "comment" : "\n     * Sets the SSL certificate for the main top-level page.\n     *\n     * @deprecated Calling this function has no useful effect, and will be\n     * ignored in future releases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void savePassword(String host, String username, String password)",
    "returnType" : "void",
    "comment" : "\n     * Sets a username and password pair for the specified host. This data is\n     * used by the WebView to autocomplete username and password fields in web\n     * forms. Note that this is unrelated to the credentials used for HTTP\n     * authentication.\n     *\n     * @param host the host that required the credentials\n     * @param username the username for the given host\n     * @param password the password for the given host\n     * @see WebViewDatabase#clearUsernamePassword\n     * @see WebViewDatabase#hasUsernamePassword\n     * @deprecated Saving passwords in WebView will not be supported in future versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHttpAuthUsernamePassword(String host, String realm, String username, String password)",
    "returnType" : "void",
    "comment" : "\n     * Stores HTTP authentication credentials for a given host and realm to the {@link WebViewDatabase}\n     * instance.\n     *\n     * @param host the host to which the credentials apply\n     * @param realm the realm to which the credentials apply\n     * @param username the username\n     * @param password the password\n     * @deprecated Use {@link WebViewDatabase#setHttpAuthUsernamePassword} instead\n     ",
    "links" : [ "android.webkit.WebViewDatabase", "android.webkit.WebViewDatabase#setHttpAuthUsernamePassword" ]
  }, {
    "name" : "public String[] getHttpAuthUsernamePassword(String host, String realm)",
    "returnType" : "String[]",
    "comment" : "\n     * Retrieves HTTP authentication credentials for a given host and realm from the {@link\n     * WebViewDatabase} instance.\n     * @param host the host to which the credentials apply\n     * @param realm the realm to which the credentials apply\n     * @return the credentials as a String array, if found. The first element\n     *         is the username and the second element is the password. {@code null} if\n     *         no credentials are found.\n     * @deprecated Use {@link WebViewDatabase#getHttpAuthUsernamePassword} instead\n     ",
    "links" : [ "android.webkit.WebViewDatabase", "android.webkit.WebViewDatabase#getHttpAuthUsernamePassword" ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the internal state of this WebView. This method should be called\n     * after this WebView has been removed from the view system. No other\n     * methods may be called on this WebView after destroy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enablePlatformNotifications()",
    "returnType" : "void",
    "comment" : "\n     * Enables platform notifications of data state and proxy changes.\n     * Notifications are enabled by default.\n     *\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public static void disablePlatformNotifications()",
    "returnType" : "void",
    "comment" : "\n     * Disables platform notifications of data state and proxy changes.\n     * Notifications are enabled by default.\n     *\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public static void freeMemoryForTests()",
    "returnType" : "void",
    "comment" : "\n     * Used only by internal tests to free up memory.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkAvailable(boolean networkUp)",
    "returnType" : "void",
    "comment" : "\n     * Informs WebView of the network state. This is used to set\n     * the JavaScript property window.navigator.isOnline and\n     * generates the online/offline event as specified in HTML5, sec. 5.7.7\n     *\n     * @param networkUp a boolean indicating if network is available\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebBackForwardList saveState(@NonNull Bundle outState)",
    "returnType" : "WebBackForwardList",
    "comment" : "\n     * Saves the state of this WebView used in\n     * {@link android.app.Activity#onSaveInstanceState}. Please note that this\n     * method no longer stores the display data for this WebView. The previous\n     * behavior could potentially leak files if {@link #restoreState} was never\n     * called.\n     *\n     * @param outState the Bundle to store this WebView's state\n     * @return the same copy of the back/forward list used to save the state, {@code null} if the\n     *         method fails.\n     ",
    "links" : [ "android.app.Activity#onSaveInstanceState", "#restoreState" ]
  }, {
    "name" : "public boolean savePicture(Bundle b, final File dest)",
    "returnType" : "boolean",
    "comment" : "\n     * Saves the current display data to the Bundle given. Used in conjunction\n     * with {@link #saveState}.\n     * @param b a Bundle to store the display data\n     * @param dest the file to store the serialized picture data. Will be\n     *             overwritten with this WebView's picture data.\n     * @return {@code true} if the picture was successfully saved\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#saveState" ]
  }, {
    "name" : "public boolean restorePicture(Bundle b, File src)",
    "returnType" : "boolean",
    "comment" : "\n     * Restores the display data that was saved in {@link #savePicture}. Used in\n     * conjunction with {@link #restoreState}. Note that this will not work if\n     * this WebView is hardware accelerated.\n     *\n     * @param b a Bundle containing the saved display data\n     * @param src the file where the picture data was stored\n     * @return {@code true} if the picture was successfully restored\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#savePicture", "#restoreState" ]
  }, {
    "name" : "public WebBackForwardList restoreState(@NonNull Bundle inState)",
    "returnType" : "WebBackForwardList",
    "comment" : "\n     * Restores the state of this WebView from the given Bundle. This method is\n     * intended for use in {@link android.app.Activity#onRestoreInstanceState}\n     * and should be called to restore the state of this WebView. If\n     * it is called after this WebView has had a chance to build state (load\n     * pages, create a back/forward list, etc.) there may be undesirable\n     * side-effects. Please note that this method no longer restores the\n     * display data for this WebView.\n     *\n     * @param inState the incoming Bundle of state\n     * @return the restored back/forward list or {@code null} if restoreState failed\n     ",
    "links" : [ "android.app.Activity#onRestoreInstanceState" ]
  }, {
    "name" : "public void loadUrl(@NonNull String url, @NonNull Map<String, String> additionalHttpHeaders)",
    "returnType" : "void",
    "comment" : "\n     * Loads the given URL with additional HTTP headers, specified as a map from\n     * name to value. Note that if this map contains any of the headers that are\n     * set by default by this WebView, such as those controlling caching, accept\n     * types or the User-Agent, their values may be overridden by this WebView's\n     * defaults.\n     * <p>\n     * Some older WebView implementations require {@code additionalHttpHeaders}\n     * to be mutable.\n     * <p>\n     * Also see compatibility note on {@link #evaluateJavascript}.\n     *\n     * @param url the URL of the resource to load\n     * @param additionalHttpHeaders map with additional headers\n     ",
    "links" : [ "#evaluateJavascript" ]
  }, {
    "name" : "public void loadUrl(@NonNull String url)",
    "returnType" : "void",
    "comment" : "\n     * Loads the given URL.\n     * <p>\n     * Also see compatibility note on {@link #evaluateJavascript}.\n     *\n     * @param url the URL of the resource to load\n     ",
    "links" : [ "#evaluateJavascript" ]
  }, {
    "name" : "public void postUrl(@NonNull String url, @NonNull byte[] postData)",
    "returnType" : "void",
    "comment" : "\n     * Loads the URL with postData using \"POST\" method into this WebView. If url\n     * is not a network URL, it will be loaded with {@link #loadUrl(String)}\n     * instead, ignoring the postData param.\n     *\n     * @param url the URL of the resource to load\n     * @param postData the data will be passed to \"POST\" request, which must be\n     *     be \"application/x-www-form-urlencoded\" encoded.\n     ",
    "links" : [ "#loadUrl(String)" ]
  }, {
    "name" : "public void loadData(@NonNull String data, @Nullable String mimeType, @Nullable String encoding)",
    "returnType" : "void",
    "comment" : "\n     * Loads the given data into this WebView using a 'data' scheme URL.\n     * <p>\n     * Note that JavaScript's same origin policy means that script running in a\n     * page loaded using this method will be unable to access content loaded\n     * using any scheme other than 'data', including 'http(s)'. To avoid this\n     * restriction, use {@link\n     * #loadDataWithBaseURL(String,String,String,String,String)\n     * loadDataWithBaseURL()} with an appropriate base URL.\n     * <p>\n     * The {@code encoding} parameter specifies whether the data is base64 or URL\n     * encoded. If the data is base64 encoded, the value of the encoding\n     * parameter must be {@code \"base64\"}. HTML can be encoded with {@link\n     * android.util.Base64#encodeToString(byte[],int)} like so:\n     * <pre class=\"prettyprint\">\n     * String unencodedHtml =\n     *     \"&lt;html&gt;&lt;body&gt;'%28' is the code for '('&lt;/body&gt;&lt;/html&gt;\";\n     * String encodedHtml = Base64.encodeToString(unencodedHtml.getBytes(), Base64.NO_PADDING);\n     * webView.loadData(encodedHtml, \"text/html\", \"base64\");\n     * </pre>\n     * <p class=\"note\">\n     * For all other values of {@code encoding} (including {@code null}) it is assumed that the\n     * data uses ASCII encoding for octets inside the range of safe URL characters and use the\n     * standard %xx hex encoding of URLs for octets outside that range. See <a\n     * href=\"https://tools.ietf.org/html/rfc3986#section-2.2\">RFC 3986</a> for more information.\n     * Applications targeting {@link android.os.Build.VERSION_CODES#Q} or later must either use\n     * base64 or encode any {@code #} characters in the content as {@code %23}, otherwise they\n     * will be treated as the end of the content and the remaining text used as a document\n     * fragment identifier.\n     * <p>\n     * The {@code mimeType} parameter specifies the format of the data.\n     * If WebView can't handle the specified MIME type, it will download the data.\n     * If {@code null}, defaults to 'text/html'.\n     * <p>\n     * The 'data' scheme URL formed by this method uses the default US-ASCII\n     * charset. If you need to set a different charset, you should form a\n     * 'data' scheme URL which explicitly specifies a charset parameter in the\n     * mediatype portion of the URL and call {@link #loadUrl(String)} instead.\n     * Note that the charset obtained from the mediatype portion of a data URL\n     * always overrides that specified in the HTML or XML document itself.\n     * <p>\n     * Content loaded using this method will have a {@code window.origin} value\n     * of {@code \"null\"}. This must not be considered to be a trusted origin\n     * by the application or by any JavaScript code running inside the WebView\n     * (for example, event sources in DOM event handlers or web messages),\n     * because malicious content can also create frames with a null origin. If\n     * you need to identify the main frame's origin in a trustworthy way, you\n     * should use {@link #loadDataWithBaseURL(String,String,String,String,String)\n     * loadDataWithBaseURL()} with a valid HTTP or HTTPS base URL to set the\n     * origin.\n     *\n     * @param data a String of data in the given encoding\n     * @param mimeType the MIME type of the data, e.g. 'text/html'.\n     * @param encoding the encoding of the data\n     ",
    "links" : [ "#loadUrl(String)", "android.util.Base64#encodeToString(byte", "android.os.Build.VERSION_CODES#Q", "#loadDataWithBaseURL(String" ]
  }, {
    "name" : "public void loadDataWithBaseURL(@Nullable String baseUrl, @NonNull String data, @Nullable String mimeType, @Nullable String encoding, @Nullable String historyUrl)",
    "returnType" : "void",
    "comment" : "\n     * Loads the given data into this WebView, using baseUrl as the base URL for\n     * the content. The base URL is used both to resolve relative URLs and when\n     * applying JavaScript's same origin policy. The historyUrl is used for the\n     * history entry.\n     * <p>\n     * The {@code mimeType} parameter specifies the format of the data.\n     * If WebView can't handle the specified MIME type, it will download the data.\n     * If {@code null}, defaults to 'text/html'.\n     * <p>\n     * Note that content specified in this way can access local device files\n     * (via 'file' scheme URLs) only if baseUrl specifies a scheme other than\n     * 'http', 'https', 'ftp', 'ftps', 'about' or 'javascript'.\n     * <p>\n     * If the base URL uses the data scheme, this method is equivalent to\n     * calling {@link #loadData(String,String,String) loadData()} and the\n     * historyUrl is ignored, and the data will be treated as part of a data: URL,\n     * including the requirement that the content be URL-encoded or base64 encoded.\n     * If the base URL uses any other scheme, then the data will be loaded into\n     * the WebView as a plain string (i.e. not part of a data URL) and any URL-encoded\n     * entities in the string will not be decoded.\n     * <p>\n     * Note that the baseUrl is sent in the 'Referer' HTTP header when\n     * requesting subresources (images, etc.) of the page loaded using this method.\n     * <p>\n     * If a valid HTTP or HTTPS base URL is not specified in {@code baseUrl}, then\n     * content loaded using this method will have a {@code window.origin} value\n     * of {@code \"null\"}. This must not be considered to be a trusted origin\n     * by the application or by any JavaScript code running inside the WebView\n     * (for example, event sources in DOM event handlers or web messages),\n     * because malicious content can also create frames with a null origin. If\n     * you need to identify the main frame's origin in a trustworthy way, you\n     * should use a valid HTTP or HTTPS base URL to set the origin.\n     *\n     * @param baseUrl the URL to use as the page's base URL. If {@code null} defaults to\n     *                'about:blank'.\n     * @param data a String of data in the given encoding\n     * @param mimeType the MIME type of the data, e.g. 'text/html'.\n     * @param encoding the encoding of the data\n     * @param historyUrl the URL to use as the history entry. If {@code null} defaults\n     *                   to 'about:blank'. If non-null, this must be a valid URL.\n     ",
    "links" : [ "#loadData(String" ]
  }, {
    "name" : "public void evaluateJavascript(@NonNull String script, @Nullable ValueCallback<String> resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously evaluates JavaScript in the context of the currently displayed page.\n     * If non-null, {@code resultCallback} will be invoked with any result returned from that\n     * execution. This method must be called on the UI thread and the callback will\n     * be made on the UI thread.\n     * <p>\n     * Compatibility note. Applications targeting {@link android.os.Build.VERSION_CODES#N} or\n     * later, JavaScript state from an empty WebView is no longer persisted across navigations like\n     * {@link #loadUrl(String)}. For example, global variables and functions defined before calling\n     * {@link #loadUrl(String)} will not exist in the loaded page. Applications should use\n     * {@link #addJavascriptInterface} instead to persist JavaScript objects across navigations.\n     *\n     * @param script the JavaScript to execute.\n     * @param resultCallback A callback to be invoked when the script execution\n     *                       completes with the result of the execution (if any).\n     *                       May be {@code null} if no notification of the result is required.\n     ",
    "links" : [ "#loadUrl(String)", "#addJavascriptInterface", "android.os.Build.VERSION_CODES#N" ]
  }, {
    "name" : "public void saveWebArchive(@NonNull String filename)",
    "returnType" : "void",
    "comment" : "\n     * Saves the current view as a web archive.\n     *\n     * @param filename the filename where the archive should be placed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void saveWebArchive(@NonNull String basename, boolean autoname, @Nullable ValueCallback<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Saves the current view as a web archive.\n     *\n     * @param basename the filename where the archive should be placed\n     * @param autoname if {@code false}, takes basename to be a file. If {@code true}, basename\n     *                 is assumed to be a directory in which a filename will be\n     *                 chosen according to the URL of the current page.\n     * @param callback called after the web archive has been saved. The\n     *                 parameter for onReceiveValue will either be the filename\n     *                 under which the file was saved, or {@code null} if saving the\n     *                 file failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopLoading()",
    "returnType" : "void",
    "comment" : "\n     * Stops the current load.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reload()",
    "returnType" : "void",
    "comment" : "\n     * Reloads the current URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canGoBack()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView has a back history item.\n     *\n     * @return {@code true} if this WebView has a back history item\n     ",
    "links" : [ ]
  }, {
    "name" : "public void goBack()",
    "returnType" : "void",
    "comment" : "\n     * Goes back in the history of this WebView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canGoForward()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView has a forward history item.\n     *\n     * @return {@code true} if this WebView has a forward history item\n     ",
    "links" : [ ]
  }, {
    "name" : "public void goForward()",
    "returnType" : "void",
    "comment" : "\n     * Goes forward in the history of this WebView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canGoBackOrForward(int steps)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the page can go back or forward the given\n     * number of steps.\n     *\n     * @param steps the negative or positive number of steps to move the\n     *              history\n     ",
    "links" : [ ]
  }, {
    "name" : "public void goBackOrForward(int steps)",
    "returnType" : "void",
    "comment" : "\n     * Goes to the history item that is the number of steps away from\n     * the current item. Steps is negative if backward and positive\n     * if forward.\n     *\n     * @param steps the number of steps to take back or forward in the back\n     *              forward list\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrivateBrowsingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether private browsing is enabled in this WebView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pageUp(boolean top)",
    "returnType" : "boolean",
    "comment" : "\n     * Scrolls the contents of this WebView up by half the view size.\n     *\n     * @param top {@code true} to jump to the top of the page\n     * @return {@code true} if the page was scrolled\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pageDown(boolean bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Scrolls the contents of this WebView down by half the page size.\n     *\n     * @param bottom {@code true} to jump to bottom of page\n     * @return {@code true} if the page was scrolled\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postVisualStateCallback(long requestId, @NonNull VisualStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Posts a {@link VisualStateCallback}, which will be called when\n     * the current state of the WebView is ready to be drawn.\n     *\n     * <p>Because updates to the DOM are processed asynchronously, updates to the DOM may not\n     * immediately be reflected visually by subsequent {@link WebView#onDraw} invocations. The\n     * {@link VisualStateCallback} provides a mechanism to notify the caller when the contents of\n     * the DOM at the current time are ready to be drawn the next time the {@link WebView}\n     * draws.\n     *\n     * <p>The next draw after the callback completes is guaranteed to reflect all the updates to the\n     * DOM up to the point at which the {@link VisualStateCallback} was posted, but it may also\n     * contain updates applied after the callback was posted.\n     *\n     * <p>The state of the DOM covered by this API includes the following:\n     * <ul>\n     * <li>primitive HTML elements (div, img, span, etc..)</li>\n     * <li>images</li>\n     * <li>CSS animations</li>\n     * <li>WebGL</li>\n     * <li>canvas</li>\n     * </ul>\n     * It does not include the state of:\n     * <ul>\n     * <li>the video tag</li>\n     * </ul>\n     *\n     * <p>To guarantee that the {@link WebView} will successfully render the first frame\n     * after the {@link VisualStateCallback#onComplete} method has been called a set of conditions\n     * must be met:\n     * <ul>\n     * <li>If the {@link WebView}'s visibility is set to {@link View#VISIBLE VISIBLE} then\n     * the {@link WebView} must be attached to the view hierarchy.</li>\n     * <li>If the {@link WebView}'s visibility is set to {@link View#INVISIBLE INVISIBLE}\n     * then the {@link WebView} must be attached to the view hierarchy and must be made\n     * {@link View#VISIBLE VISIBLE} from the {@link VisualStateCallback#onComplete} method.</li>\n     * <li>If the {@link WebView}'s visibility is set to {@link View#GONE GONE} then the\n     * {@link WebView} must be attached to the view hierarchy and its\n     * {@link AbsoluteLayout.LayoutParams LayoutParams}'s width and height need to be set to fixed\n     * values and must be made {@link View#VISIBLE VISIBLE} from the\n     * {@link VisualStateCallback#onComplete} method.</li>\n     * </ul>\n     *\n     * <p>When using this API it is also recommended to enable pre-rasterization if the {@link\n     * WebView} is off screen to avoid flickering. See {@link WebSettings#setOffscreenPreRaster} for\n     * more details and do consider its caveats.\n     *\n     * @param requestId An id that will be returned in the callback to allow callers to match\n     *                  requests with callbacks.\n     * @param callback  The callback to be invoked.\n     ",
    "links" : [ "android.webkit.WebSettings#setOffscreenPreRaster", "android.view.View#VISIBLE", "#onComplete", "VisualStateCallback", "AbsoluteLayout.LayoutParams", "android.webkit.WebView#onDraw", "android.view.View#INVISIBLE", "android.webkit.WebView", "android.view.View#GONE" ]
  }, {
    "name" : "public void clearView()",
    "returnType" : "void",
    "comment" : "\n     * Clears this WebView so that onDraw() will draw nothing but white background,\n     * and onMeasure() will return 0 if MeasureSpec is not MeasureSpec.EXACTLY.\n     * @deprecated Use WebView.loadUrl(\"about:blank\") to reliably reset the view state\n     *             and release page resources (including any running JavaScript).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Picture capturePicture()",
    "returnType" : "Picture",
    "comment" : "\n     * Gets a new picture that captures the current contents of this WebView.\n     * The picture is of the entire document being displayed, and is not\n     * limited to the area currently displayed by this WebView. Also, the\n     * picture is a static copy and is unaffected by later changes to the\n     * content being displayed.\n     * <p>\n     * Note that due to internal changes, for API levels between\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB} and\n     * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH} inclusive, the\n     * picture does not include fixed position elements or scrollable divs.\n     * <p>\n     * Note that from {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1} the returned picture\n     * should only be drawn into bitmap-backed Canvas - using any other type of Canvas will involve\n     * additional conversion at a cost in memory and performance.\n     *\n     * @deprecated Use {@link #onDraw} to obtain a bitmap snapshot of the WebView, or\n     * {@link #saveWebArchive} to save the content to a file.\n     *\n     * @return a picture that captures the current contents of this WebView\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#saveWebArchive", "#onDraw", "android.os.Build.VERSION_CODES#HONEYCOMB", "android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH" ]
  }, {
    "name" : "public PrintDocumentAdapter createPrintDocumentAdapter()",
    "returnType" : "PrintDocumentAdapter",
    "comment" : "\n     * @deprecated Use {@link #createPrintDocumentAdapter(String)} which requires user\n     *             to provide a print document name.\n     ",
    "links" : [ "#createPrintDocumentAdapter(String)" ]
  }, {
    "name" : "public PrintDocumentAdapter createPrintDocumentAdapter(@NonNull String documentName)",
    "returnType" : "PrintDocumentAdapter",
    "comment" : "\n     * Creates a PrintDocumentAdapter that provides the content of this WebView for printing.\n     *\n     * The adapter works by converting the WebView contents to a PDF stream. The WebView cannot\n     * be drawn during the conversion process - any such draws are undefined. It is recommended\n     * to use a dedicated off screen WebView for the printing. If necessary, an application may\n     * temporarily hide a visible WebView by using a custom PrintDocumentAdapter instance\n     * wrapped around the object returned and observing the onStart and onFinish methods. See\n     * {@link android.print.PrintDocumentAdapter} for more information.\n     *\n     * @param documentName  The user-facing name of the printed document. See\n     *                      {@link android.print.PrintDocumentInfo}\n     ",
    "links" : [ "android.print.PrintDocumentAdapter", "android.print.PrintDocumentInfo" ]
  }, {
    "name" : "public float getScale()",
    "returnType" : "float",
    "comment" : "\n     * Gets the current scale of this WebView.\n     *\n     * @return the current scale\n     *\n     * @deprecated This method is prone to inaccuracy due to race conditions\n     * between the web rendering and UI threads; prefer\n     * {@link WebViewClient#onScaleChanged}.\n     ",
    "links" : [ "android.webkit.WebViewClient#onScaleChanged" ]
  }, {
    "name" : "public void setInitialScale(int scaleInPercent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the initial scale for this WebView. 0 means default.\n     * The behavior for the default scale depends on the state of\n     * {@link WebSettings#getUseWideViewPort()} and\n     * {@link WebSettings#getLoadWithOverviewMode()}.\n     * If the content fits into the WebView control by width, then\n     * the zoom is set to 100%. For wide content, the behavior\n     * depends on the state of {@link WebSettings#getLoadWithOverviewMode()}.\n     * If its value is {@code true}, the content will be zoomed out to be fit\n     * by width into the WebView control, otherwise not.\n     *\n     * If initial scale is greater than 0, WebView starts with this value\n     * as initial scale.\n     * Please note that unlike the scale properties in the viewport meta tag,\n     * this method doesn't take the screen density into account.\n     *\n     * @param scaleInPercent the initial scale in percent\n     ",
    "links" : [ "android.webkit.WebSettings#getUseWideViewPort()", "android.webkit.WebSettings#getLoadWithOverviewMode()" ]
  }, {
    "name" : "public void invokeZoomPicker()",
    "returnType" : "void",
    "comment" : "\n     * Invokes the graphical zoom picker widget for this WebView. This will\n     * result in the zoom widget appearing on the screen to control the zoom\n     * level of this WebView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public HitTestResult getHitTestResult()",
    "returnType" : "HitTestResult",
    "comment" : "\n     * Gets a HitTestResult based on the current cursor node. If a HTML::a\n     * tag is found and the anchor has a non-JavaScript URL, the HitTestResult\n     * type is set to SRC_ANCHOR_TYPE and the URL is set in the \"extra\" field.\n     * If the anchor does not have a URL or if it is a JavaScript URL, the type\n     * will be UNKNOWN_TYPE and the URL has to be retrieved through\n     * {@link #requestFocusNodeHref} asynchronously. If a HTML::img tag is\n     * found, the HitTestResult type is set to IMAGE_TYPE and the URL is set in\n     * the \"extra\" field. A type of\n     * SRC_IMAGE_ANCHOR_TYPE indicates an anchor with a URL that has an image as\n     * a child node. If a phone number is found, the HitTestResult type is set\n     * to PHONE_TYPE and the phone number is set in the \"extra\" field of\n     * HitTestResult. If a map address is found, the HitTestResult type is set\n     * to GEO_TYPE and the address is set in the \"extra\" field of HitTestResult.\n     * If an email address is found, the HitTestResult type is set to EMAIL_TYPE\n     * and the email is set in the \"extra\" field of HitTestResult. Otherwise,\n     * HitTestResult type is set to UNKNOWN_TYPE.\n     ",
    "links" : [ "#requestFocusNodeHref" ]
  }, {
    "name" : "public void requestFocusNodeHref(@Nullable Message hrefMsg)",
    "returnType" : "void",
    "comment" : "\n     * Requests the anchor or image element URL at the last tapped point.\n     * If hrefMsg is {@code null}, this method returns immediately and does not\n     * dispatch hrefMsg to its target. If the tapped point hits an image,\n     * an anchor, or an image in an anchor, the message associates\n     * strings in named keys in its data. The value paired with the key\n     * may be an empty string.\n     *\n     * @param hrefMsg the message to be dispatched with the result of the\n     *                request. The message data contains three keys. \"url\"\n     *                returns the anchor's href attribute. \"title\" returns the\n     *                anchor's text. \"src\" returns the image's src attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestImageRef(@NonNull Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Requests the URL of the image last touched by the user. msg will be sent\n     * to its target with a String representing the URL as its object.\n     *\n     * @param msg the message to be dispatched with the result of the request\n     *            as the data member with \"url\" as key. The result can be {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUrl()",
    "returnType" : "String",
    "comment" : "\n     * Gets the URL for the current page. This is not always the same as the URL\n     * passed to WebViewClient.onPageStarted because although the load for\n     * that URL has begun, the current page may not have changed.\n     *\n     * @return the URL for the current page or {@code null} if no page has been loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginalUrl()",
    "returnType" : "String",
    "comment" : "\n     * Gets the original URL for the current page. This is not always the same\n     * as the URL passed to WebViewClient.onPageStarted because although the\n     * load for that URL has begun, the current page may not have changed.\n     * Also, there may have been redirects resulting in a different URL to that\n     * originally requested.\n     *\n     * @return the URL that was originally requested for the current page or\n     * {@code null} if no page has been loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTitle()",
    "returnType" : "String",
    "comment" : "\n     * Gets the title for the current page. This is the title of the current page\n     * until WebViewClient.onReceivedTitle is called.\n     *\n     * @return the title for the current page or {@code null} if no page has been loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getFavicon()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Gets the favicon for the current page. This is the favicon of the current\n     * page until WebViewClient.onReceivedIcon is called.\n     *\n     * @return the favicon for the current page or {@code null} if the page doesn't\n     * have one or if no page has been loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTouchIconUrl()",
    "returnType" : "String",
    "comment" : "\n     * Gets the touch icon URL for the apple-touch-icon <link> element, or\n     * a URL on this site's server pointing to the standard location of a\n     * touch icon.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProgress()",
    "returnType" : "int",
    "comment" : "\n     * Gets the progress for the current page.\n     *\n     * @return the progress for the current page between 0 and 100\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentHeight()",
    "returnType" : "int",
    "comment" : "\n     * Gets the height of the HTML content.\n     *\n     * @return the height of the HTML content\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentWidth()",
    "returnType" : "int",
    "comment" : "\n     * Gets the width of the HTML content.\n     *\n     * @return the width of the HTML content\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pauseTimers()",
    "returnType" : "void",
    "comment" : "\n     * Pauses all layout, parsing, and JavaScript timers for all WebViews. This\n     * is a global requests, not restricted to just this WebView. This can be\n     * useful if the application has been paused.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resumeTimers()",
    "returnType" : "void",
    "comment" : "\n     * Resumes all layout, parsing, and JavaScript timers for all WebViews.\n     * This will resume dispatching all timers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPause()",
    "returnType" : "void",
    "comment" : "\n     * Does a best-effort attempt to pause any processing that can be paused\n     * safely, such as animations and geolocation. Note that this call\n     * does not pause JavaScript. To pause JavaScript globally, use\n     * {@link #pauseTimers}.\n     *\n     * To resume WebView, call {@link #onResume}.\n     ",
    "links" : [ "#pauseTimers", "#onResume" ]
  }, {
    "name" : "public void onResume()",
    "returnType" : "void",
    "comment" : "\n     * Resumes a WebView after a previous call to {@link #onPause}.\n     ",
    "links" : [ "#onPause" ]
  }, {
    "name" : "public boolean isPaused()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView is paused, meaning onPause() was called.\n     * Calling onResume() sets the paused state back to {@code false}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void freeMemory()",
    "returnType" : "void",
    "comment" : "\n     * Informs this WebView that memory is low so that it can free any available\n     * memory.\n     * @deprecated Memory caches are automatically dropped when no longer needed, and in response\n     *             to system memory pressure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearCache(boolean includeDiskFiles)",
    "returnType" : "void",
    "comment" : "\n     * Clears the resource cache. Note that the cache is per-application, so\n     * this will clear the cache for all WebViews used.\n     *\n     * @param includeDiskFiles if {@code false}, only the RAM cache is cleared\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearFormData()",
    "returnType" : "void",
    "comment" : "\n     * Removes the autocomplete popup from the currently focused form field, if\n     * present. Note this only affects the display of the autocomplete popup,\n     * it does not remove any saved form data from this WebView's store. To do\n     * that, use {@link WebViewDatabase#clearFormData}.\n     ",
    "links" : [ "android.webkit.WebViewDatabase#clearFormData" ]
  }, {
    "name" : "public void clearHistory()",
    "returnType" : "void",
    "comment" : "\n     * Tells this WebView to clear its internal back/forward list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearSslPreferences()",
    "returnType" : "void",
    "comment" : "\n     * Clears the SSL preferences table stored in response to proceeding with\n     * SSL certificate errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearClientCertPreferences(@Nullable Runnable onCleared)",
    "returnType" : "void",
    "comment" : "\n     * Clears the client certificate preferences stored in response\n     * to proceeding/cancelling client cert requests. Note that WebView\n     * automatically clears these preferences when the system keychain is updated.\n     * The preferences are shared by all the WebViews that are created by the embedder application.\n     *\n     * @param onCleared  A runnable to be invoked when client certs are cleared.\n     *                   The runnable will be called in UI thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void startSafeBrowsing(@NonNull Context context, @Nullable ValueCallback<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Starts Safe Browsing initialization.\n     * <p>\n     * URL loads are not guaranteed to be protected by Safe Browsing until after {@code callback} is\n     * invoked with {@code true}. Safe Browsing is not fully supported on all devices. For those\n     * devices {@code callback} will receive {@code false}.\n     * <p>\n     * This should not be called if Safe Browsing has been disabled by manifest tag or {@link\n     * WebSettings#setSafeBrowsingEnabled}. This prepares resources used for Safe Browsing.\n     * <p>\n     * This should be called with the Application Context (and will always use the Application\n     * context to do its work regardless).\n     *\n     * @param context Application Context.\n     * @param callback will be called on the UI thread with {@code true} if initialization is\n     * successful, {@code false} otherwise.\n     ",
    "links" : [ "android.webkit.WebSettings#setSafeBrowsingEnabled" ]
  }, {
    "name" : "public static void setSafeBrowsingWhitelist(@NonNull List<String> hosts, @Nullable ValueCallback<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the list of hosts (domain names/IP addresses) that are exempt from SafeBrowsing checks.\n     * The list is global for all the WebViews.\n     * <p>\n     * Each rule should take one of these:\n     * <table>\n     * <tr><th> Rule </th> <th> Example </th> <th> Matches Subdomain</th> </tr>\n     * <tr><td> HOSTNAME </td> <td> example.com </td> <td> Yes </td> </tr>\n     * <tr><td> .HOSTNAME </td> <td> .example.com </td> <td> No </td> </tr>\n     * <tr><td> IPV4_LITERAL </td> <td> 192.168.1.1 </td> <td> No </td></tr>\n     * <tr><td> IPV6_LITERAL_WITH_BRACKETS </td><td>[10:20:30:40:50:60:70:80]</td><td>No</td></tr>\n     * </table>\n     * <p>\n     * All other rules, including wildcards, are invalid.\n     * <p>\n     * The correct syntax for hosts is defined by <a\n     * href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">RFC 3986</a>.\n     *\n     * @param hosts the list of hosts\n     * @param callback will be called with {@code true} if hosts are successfully added to the\n     * allowlist. It will be called with {@code false} if any hosts are malformed. The callback\n     * will be run on the UI thread\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri getSafeBrowsingPrivacyPolicyUrl()",
    "returnType" : "Uri",
    "comment" : "\n     * Returns a URL pointing to the privacy policy for Safe Browsing reporting.\n     *\n     * @return the url pointing to a privacy policy document which can be displayed to users.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebBackForwardList copyBackForwardList()",
    "returnType" : "WebBackForwardList",
    "comment" : "\n     * Gets the WebBackForwardList for this WebView. This contains the\n     * back/forward list for use in querying each item in the history stack.\n     * This is a copy of the private WebBackForwardList so it contains only a\n     * snapshot of the current state. Multiple calls to this method may return\n     * different objects. The object returned from this method will not be\n     * updated to reflect any new state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFindListener(@Nullable FindListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers the listener to be notified as find-on-page operations\n     * progress. This will replace the current listener.\n     *\n     * @param listener an implementation of {@link FindListener}\n     ",
    "links" : [ "FindListener" ]
  }, {
    "name" : "public void findNext(boolean forward)",
    "returnType" : "void",
    "comment" : "\n     * Highlights and scrolls to the next match found by\n     * {@link #findAllAsync}, wrapping around page boundaries as necessary.\n     * Notifies any registered {@link FindListener}. If {@link #findAllAsync(String)}\n     * has not been called yet, or if {@link #clearMatches} has been called since the\n     * last find operation, this function does nothing.\n     *\n     * @param forward the direction to search\n     * @see #setFindListener\n     ",
    "links" : [ "#clearMatches", "#findAllAsync", "FindListener", "#findAllAsync(String)" ]
  }, {
    "name" : "public int findAll(String find)",
    "returnType" : "int",
    "comment" : "\n     * Finds all instances of find on the page and highlights them.\n     * Notifies any registered {@link FindListener}.\n     *\n     * @param find the string to find\n     * @return the number of occurrences of the String \"find\" that were found\n     * @deprecated {@link #findAllAsync} is preferred.\n     * @see #setFindListener\n     ",
    "links" : [ "FindListener", "#findAllAsync" ]
  }, {
    "name" : "public void findAllAsync(@NonNull String find)",
    "returnType" : "void",
    "comment" : "\n     * Finds all instances of find on the page and highlights them,\n     * asynchronously. Notifies any registered {@link FindListener}.\n     * Successive calls to this will cancel any pending searches.\n     *\n     * @param find the string to find.\n     * @see #setFindListener\n     ",
    "links" : [ "FindListener" ]
  }, {
    "name" : "public boolean showFindDialog(@Nullable String text, boolean showIme)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts an ActionMode for finding text in this WebView.  Only works if this\n     * WebView is attached to the view system.\n     *\n     * @param text if non-null, will be the initial text to search for.\n     *             Otherwise, the last String searched for in this WebView will\n     *             be used to start.\n     * @param showIme if {@code true}, show the IME, assuming the user will begin typing.\n     *                If {@code false} and text is non-null, perform a find all.\n     * @return {@code true} if the find dialog is shown, {@code false} otherwise\n     * @deprecated This method does not work reliably on all Android versions;\n     *             implementing a custom find dialog using WebView.findAllAsync()\n     *             provides a more robust solution.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String findAddress(String addr)",
    "returnType" : "String",
    "comment" : "\n     * Gets the first substring which appears to be the address of a physical\n     * location. Only addresses in the United States can be detected, which\n     * must consist of:\n     * <ul>\n     *   <li>a house number</li>\n     *   <li>a street name</li>\n     *   <li>a street type (Road, Circle, etc), either spelled out or\n     *       abbreviated</li>\n     *   <li>a city name</li>\n     *   <li>a state or territory, either spelled out or two-letter abbr</li>\n     *   <li>an optional 5 digit or 9 digit zip code</li>\n     * </ul>\n     * All names must be correctly capitalized, and the zip code, if present,\n     * must be valid for the state. The street type must be a standard USPS\n     * spelling or abbreviation. The state or territory must also be spelled\n     * or abbreviated using USPS standards. The house number may not exceed\n     * five digits.\n     *\n     * <p class=\"note\"><b>Note:</b> This function is deprecated and should be\n     * avoided on all API levels, as it cannot detect addresses outside of the\n     * United States and has a high rate of false positives. On API level\n     * {@link android.os.Build.VERSION_CODES#O_MR1} and earlier, it also causes\n     * the entire WebView implementation to be loaded and initialized, which\n     * can throw {@link android.util.AndroidRuntimeException} or other exceptions\n     * if the WebView implementation is currently being updated.\n     *\n     * @param addr the string to search for addresses\n     * @return the address, or if no address is found, {@code null}\n     * @deprecated This method is superseded by {@link TextClassifier#generateLinks(\n     * android.view.textclassifier.TextLinks.Request)}. Avoid using this method even when targeting\n     * API levels where no alternative is available.\n     ",
    "links" : [ "android.util.AndroidRuntimeException", "android.os.Build.VERSION_CODES#O_MR1", "android.view.textclassifier.TextClassifier#generateLinks(" ]
  }, {
    "name" : "public static void enableSlowWholeDocumentDraw()",
    "returnType" : "void",
    "comment" : "\n     * For apps targeting the L release, WebView has a new default behavior that reduces\n     * memory footprint and increases performance by intelligently choosing\n     * the portion of the HTML document that needs to be drawn. These\n     * optimizations are transparent to the developers. However, under certain\n     * circumstances, an App developer may want to disable them:\n     * <ol>\n     *   <li>When an app uses {@link #onDraw} to do own drawing and accesses portions\n     *       of the page that is way outside the visible portion of the page.</li>\n     *   <li>When an app uses {@link #capturePicture} to capture a very large HTML document.\n     *       Note that capturePicture is a deprecated API.</li>\n     * </ol>\n     * Enabling drawing the entire HTML document has a significant performance\n     * cost. This method should be called before any WebViews are created.\n     ",
    "links" : [ "#onDraw", "#capturePicture" ]
  }, {
    "name" : "public void clearMatches()",
    "returnType" : "void",
    "comment" : "\n     * Clears the highlighting surrounding text matches created by\n     * {@link #findAllAsync}.\n     ",
    "links" : [ "#findAllAsync" ]
  }, {
    "name" : "public void documentHasImages(@NonNull Message response)",
    "returnType" : "void",
    "comment" : "\n     * Queries the document to see if it contains any image references. The\n     * message object will be dispatched with arg1 being set to 1 if images\n     * were found and 0 if the document does not reference any images.\n     *\n     * @param response the message that will be dispatched with the result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWebViewClient(@NonNull WebViewClient client)",
    "returnType" : "void",
    "comment" : "\n     * Sets the WebViewClient that will receive various notifications and\n     * requests. This will replace the current handler.\n     *\n     * @param client an implementation of WebViewClient\n     * @see #getWebViewClient\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebViewClient getWebViewClient()",
    "returnType" : "WebViewClient",
    "comment" : "\n     * Gets the WebViewClient.\n     *\n     * @return the WebViewClient, or a default client if not yet set\n     * @see #setWebViewClient\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebViewRenderProcess getWebViewRenderProcess()",
    "returnType" : "WebViewRenderProcess",
    "comment" : "\n     * Gets a handle to the WebView renderer process associated with this WebView.\n     *\n     * <p>In {@link android.os.Build.VERSION_CODES#O} and above, WebView may\n     * run in \"multiprocess\" mode. In multiprocess mode, rendering of web\n     * content is performed by a sandboxed renderer process separate to the\n     * application process.  This renderer process may be shared with other\n     * WebViews in the application, but is not shared with other application\n     * processes.\n     *\n     * <p>If WebView is running in multiprocess mode, this method returns a\n     * handle to the renderer process associated with the WebView, which can\n     * be used to control the renderer process.\n     *\n     * @return the {@link WebViewRenderProcess} renderer handle associated\n     *         with this {@link WebView}, or {@code null} if\n     *         WebView is not runing in multiprocess mode.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "android.webkit.WebViewRenderProcess", "android.webkit.WebView" ]
  }, {
    "name" : "public void setWebViewRenderProcessClient(@NonNull @CallbackExecutor Executor executor, @NonNull WebViewRenderProcessClient webViewRenderProcessClient)",
    "returnType" : "void",
    "comment" : "\n     * Sets the renderer client object associated with this WebView.\n     *\n     * <p>The renderer client encapsulates callbacks relevant to WebView renderer\n     * state. See {@link WebViewRenderProcessClient} for details.\n     *\n     * <p>Although many WebView instances may share a single underlying\n     * renderer, and renderers may live either in the application\n     * process, or in a sandboxed process that is isolated from the\n     * application process, instances of {@link WebViewRenderProcessClient}\n     * are set per-WebView.  Callbacks represent renderer events from\n     * the perspective of this WebView, and may or may not be correlated\n     * with renderer events affecting other WebViews.\n     *\n     * @param executor the Executor on which {@link WebViewRenderProcessClient}\n     *                 callbacks will execute.\n     * @param webViewRenderProcessClient the {@link WebViewRenderProcessClient}\n     *                                   object.\n     ",
    "links" : [ "android.webkit.WebViewRenderProcessClient" ]
  }, {
    "name" : "public void setWebViewRenderProcessClient(@Nullable WebViewRenderProcessClient webViewRenderProcessClient)",
    "returnType" : "void",
    "comment" : "\n     * Sets the renderer client object associated with this WebView.\n     *\n     * See {@link #setWebViewRenderProcessClient(Executor,WebViewRenderProcessClient)} for details.\n     *\n     * <p> {@link WebViewRenderProcessClient} callbacks will run on the thread that this WebView was\n     * initialized on.\n     *\n     * @param webViewRenderProcessClient the {@link WebViewRenderProcessClient} object.\n     ",
    "links" : [ "#setWebViewRenderProcessClient(Executor", "android.webkit.WebViewRenderProcessClient" ]
  }, {
    "name" : "public WebViewRenderProcessClient getWebViewRenderProcessClient()",
    "returnType" : "WebViewRenderProcessClient",
    "comment" : "\n     * Gets the renderer client object associated with this WebView.\n     *\n     * @return the {@link WebViewRenderProcessClient} object associated with this WebView, if one\n     *         has been set via {@link #setWebViewRenderProcessClient(WebViewRenderProcessClient)}\n     *         or {@code null} otherwise.\n     ",
    "links" : [ "android.webkit.WebViewRenderProcessClient", "#setWebViewRenderProcessClient(WebViewRenderProcessClient)" ]
  }, {
    "name" : "public void setDownloadListener(@Nullable DownloadListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers the interface to be used when content can not be handled by\n     * the rendering engine, and should be downloaded instead. This will replace\n     * the current handler.\n     *\n     * @param listener an implementation of DownloadListener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWebChromeClient(@Nullable WebChromeClient client)",
    "returnType" : "void",
    "comment" : "\n     * Sets the chrome handler. This is an implementation of WebChromeClient for\n     * use in handling JavaScript dialogs, favicons, titles, and the progress.\n     * This will replace the current handler.\n     *\n     * @param client an implementation of WebChromeClient\n     * @see #getWebChromeClient\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebChromeClient getWebChromeClient()",
    "returnType" : "WebChromeClient",
    "comment" : "\n     * Gets the chrome handler.\n     *\n     * @return the WebChromeClient, or {@code null} if not yet set\n     * @see #setWebChromeClient\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPictureListener(PictureListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Picture listener. This is an interface used to receive\n     * notifications of a new Picture.\n     *\n     * @param listener an implementation of WebView.PictureListener\n     * @deprecated This method is now obsolete.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addJavascriptInterface(@NonNull Object object, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Injects the supplied Java object into this WebView. The object is\n     * injected into all frames of the web page, including all the iframes,\n     * using the supplied name. This allows the Java object's methods to be\n     * accessed from JavaScript. For applications targeted to API\n     * level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     * and above, only public methods that are annotated with\n     * {@link android.webkit.JavascriptInterface} can be accessed from JavaScript.\n     * For applications targeted to API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN} or below,\n     * all public methods (including the inherited ones) can be accessed, see the\n     * important security note below for implications.\n     * <p> Note that injected objects will not appear in JavaScript until the page is next\n     * (re)loaded. JavaScript should be enabled before injecting the object. For example:\n     * <pre class=\"prettyprint\">\n     * class JsObject {\n     *    {@literal @}JavascriptInterface\n     *    public String toString() { return \"injectedObject\"; }\n     * }\n     * webview.getSettings().setJavaScriptEnabled(true);\n     * webView.addJavascriptInterface(new JsObject(), \"injectedObject\");\n     * webView.loadData(\"<!DOCTYPE html><title></title>\", \"text/html\", null);\n     * webView.loadUrl(\"javascript:alert(injectedObject.toString())\");</pre>\n     * <p>\n     * <strong>IMPORTANT:</strong>\n     * <ul>\n     * <li> This method can be used to allow JavaScript to control the host\n     * application. This is a powerful feature, but also presents a security\n     * risk for apps targeting {@link android.os.Build.VERSION_CODES#JELLY_BEAN} or earlier.\n     * Apps that target a version later than {@link android.os.Build.VERSION_CODES#JELLY_BEAN}\n     * are still vulnerable if the app runs on a device running Android earlier than 4.2.\n     * The most secure way to use this method is to target {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     * and to ensure the method is called only when running on Android 4.2 or later.\n     * With these older versions, JavaScript could use reflection to access an\n     * injected object's public fields. Use of this method in a WebView\n     * containing untrusted content could allow an attacker to manipulate the\n     * host application in unintended ways, executing Java code with the\n     * permissions of the host application. Use extreme care when using this\n     * method in a WebView which could contain untrusted content.</li>\n     * <li> JavaScript interacts with Java object on a private, background\n     * thread of this WebView. Care is therefore required to maintain thread\n     * safety.\n     * </li>\n     * <li> Because the object is exposed to all the frames, any frame could\n     * obtain the object name and call methods on it. There is no way to tell the\n     * calling frame's origin from the app side, so the app must not assume that\n     * the caller is trustworthy unless the app can guarantee that no third party\n     * content is ever loaded into the WebView even inside an iframe.</li>\n     * <li> The Java object's fields are not accessible.</li>\n     * <li> For applications targeted to API level {@link android.os.Build.VERSION_CODES#LOLLIPOP}\n     * and above, methods of injected Java objects are enumerable from\n     * JavaScript.</li>\n     * </ul>\n     *\n     * @param object the Java object to inject into this WebView's JavaScript\n     *               context. {@code null} values are ignored.\n     * @param name the name used to expose the object in JavaScript\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "android.webkit.JavascriptInterface", "android.os.Build.VERSION_CODES#LOLLIPOP", "android.os.Build.VERSION_CODES#JELLY_BEAN" ]
  }, {
    "name" : "public void removeJavascriptInterface(@NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously injected Java object from this WebView. Note that\n     * the removal will not be reflected in JavaScript until the page is next\n     * (re)loaded. See {@link #addJavascriptInterface}.\n     *\n     * @param name the name used to expose the object in JavaScript\n     ",
    "links" : [ "#addJavascriptInterface" ]
  }, {
    "name" : "public WebMessagePort[] createWebMessageChannel()",
    "returnType" : "WebMessagePort[]",
    "comment" : "\n     * Creates a message channel to communicate with JS and returns the message\n     * ports that represent the endpoints of this message channel. The HTML5 message\n     * channel functionality is described\n     * <a href=\"https://html.spec.whatwg.org/multipage/comms.html#messagechannel\">here\n     * </a>\n     *\n     * <p>The returned message channels are entangled and already in started state.\n     *\n     * @return the two message ports that form the message channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postWebMessage(@NonNull WebMessage message, @NonNull Uri targetOrigin)",
    "returnType" : "void",
    "comment" : "\n     * Post a message to main frame. The embedded application can restrict the\n     * messages to a certain target origin. See\n     * <a href=\"https://html.spec.whatwg.org/multipage/comms.html#posting-messages\">\n     * HTML5 spec</a> for how target origin can be used.\n     * <p>\n     * A target origin can be set as a wildcard (\"*\"). However this is not recommended.\n     * See the page above for security issues.\n     * <p>\n     * Content loaded via {@link #loadData(String,String,String)} will not have a\n     * valid origin, and thus cannot be sent messages securely. If you need to send\n     * messages using this function, you should use\n     * {@link #loadDataWithBaseURL(String,String,String,String,String)} with a valid\n     * HTTP or HTTPS {@code baseUrl} to define a valid origin that can be used for\n     * messaging.\n     *\n     * @param message the WebMessage\n     * @param targetOrigin the target origin.\n     ",
    "links" : [ "#loadData(String", "#loadDataWithBaseURL(String" ]
  }, {
    "name" : "public WebSettings getSettings()",
    "returnType" : "WebSettings",
    "comment" : "\n     * Gets the WebSettings object used to control the settings for this\n     * WebView.\n     *\n     * @return a WebSettings object that can be used to control this WebView's\n     *         settings\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setWebContentsDebuggingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables debugging of web contents (HTML / CSS / JavaScript)\n     * loaded into any WebViews of this application. This flag can be enabled\n     * in order to facilitate debugging of web layouts and JavaScript\n     * code running inside WebViews. Please refer to WebView documentation\n     * for the debugging guide.\n     * <p>\n     * In WebView 113.0.5656.0 and later, this is enabled automatically if the\n     * app is declared as\n     * <a href=\"https://developer.android.com/guide/topics/manifest/application-element#debug\">\n     * {@code android:debuggable=\"true\"}</a> in its manifest; otherwise, the\n     * default is {@code false}.\n     * <p>\n     * Enabling web contents debugging allows the state of any WebView in the\n     * app to be inspected and modified by the user via adb. This is a security\n     * liability and should not be enabled in production builds of apps unless\n     * this is an explicitly intended use of the app. More info on\n     * <a href=\"https://developer.android.com/topic/security/risks/android-debuggable\">\n     * secure debug settings</a>.\n     *\n     * @param enabled whether to enable web contents debugging\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized PluginList getPluginList()",
    "returnType" : "PluginList",
    "comment" : "\n     * Gets the list of currently loaded plugins.\n     *\n     * @return the list of currently loaded plugins\n     * @deprecated This was used for Gears, which has been deprecated.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDataDirectorySuffix(@NonNull String suffix)",
    "returnType" : "void",
    "comment" : "\n     * Define the directory used to store WebView data for the current process.\n     * The provided suffix will be used when constructing data and cache\n     * directory paths. If this API is not called, no suffix will be used.\n     * Each directory can be used by only one process in the application. If more\n     * than one process in an app wishes to use WebView, only one process can use\n     * the default directory, and other processes must call this API to define\n     * a unique suffix.\n     * <p>\n     * This means that different processes in the same application cannot directly\n     * share WebView-related data, since the data directories must be distinct.\n     * Applications that use this API may have to explicitly pass data between\n     * processes. For example, login cookies may have to be copied from one\n     * process's cookie jar to the other using {@link CookieManager} if both\n     * processes' WebViews are intended to be logged in.\n     * <p>\n     * Most applications should simply ensure that all components of the app\n     * that rely on WebView are in the same process, to avoid needing multiple\n     * data directories. The {@link #disableWebView} method can be used to ensure\n     * that the other processes do not use WebView by accident in this case.\n     * <p>\n     * This API must be called before any instances of WebView are created in\n     * this process and before any other methods in the android.webkit package\n     * are called by this process.\n     *\n     * @param suffix The directory name suffix to be used for the current\n     *               process. Must not contain a path separator.\n     * @throws IllegalStateException if WebView has already been initialized\n     *                               in the current process.\n     * @throws IllegalArgumentException if the suffix contains a path separator.\n     ",
    "links" : [ "android.webkit.CookieManager", "#disableWebView" ]
  }, {
    "name" : "public static void disableWebView()",
    "returnType" : "void",
    "comment" : "\n     * Indicate that the current process does not intend to use WebView, and\n     * that an exception should be thrown if a WebView is created or any other\n     * methods in the android.webkit package are used.\n     * <p>\n     * Applications with multiple processes may wish to call this in processes\n     * that are not intended to use WebView to avoid accidentally incurring\n     * the memory usage of initializing WebView in long-lived processes that\n     * have no need for it, and to prevent potential data directory conflicts\n     * (see {@link #setDataDirectorySuffix}).\n     * <p>\n     * For example, an audio player application with one process for its\n     * activities and another process for its playback service may wish to call\n     * this method in the playback service's {@link android.app.Service#onCreate}.\n     *\n     * @throws IllegalStateException if WebView has already been initialized\n     *                               in the current process.\n     ",
    "links" : [ "android.app.Service#onCreate", "#setDataDirectorySuffix" ]
  }, {
    "name" : "public void refreshPlugins(boolean reloadOpenPages)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This was used for Gears, which has been deprecated.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void emulateShiftHeld()",
    "returnType" : "void",
    "comment" : "\n     * Puts this WebView into text selection mode. Do not rely on this\n     * functionality; it will be deprecated in the future.\n     *\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public void onChildViewAdded(View parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated WebView no longer needs to implement\n     * ViewGroup.OnHierarchyChangeListener.  This method does nothing now.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChildViewRemoved(View p, View child)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated WebView no longer needs to implement\n     * ViewGroup.OnHierarchyChangeListener.  This method does nothing now.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGlobalFocusChanged(View oldFocus, View newFocus)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated WebView should not have implemented\n     * ViewTreeObserver.OnGlobalFocusChangeListener. This method does nothing now.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMapTrackballToArrowKeys(boolean setMap)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Only the default case, {@code true}, will be supported in a future version.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flingScroll(int vx, int vy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getZoomControls()",
    "returnType" : "View",
    "comment" : "\n     * Gets the zoom controls for this WebView, as a separate View. The caller\n     * is responsible for inserting this View into the layout hierarchy.\n     * <p/>\n     * API level {@link android.os.Build.VERSION_CODES#CUPCAKE} introduced\n     * built-in zoom mechanisms for the WebView, as opposed to these separate\n     * zoom controls. The built-in mechanisms are preferred and can be enabled\n     * using {@link WebSettings#setBuiltInZoomControls}.\n     *\n     * @deprecated the built-in zoom mechanisms are preferred\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN}\n     ",
    "links" : [ "android.webkit.WebSettings#setBuiltInZoomControls", "android.os.Build.VERSION_CODES#JELLY_BEAN", "android.os.Build.VERSION_CODES#CUPCAKE" ]
  }, {
    "name" : "public boolean canZoomIn()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView can be zoomed in.\n     *\n     * @return {@code true} if this WebView can be zoomed in\n     *\n     * @deprecated This method is prone to inaccuracy due to race conditions\n     * between the web rendering and UI threads; prefer\n     * {@link WebViewClient#onScaleChanged}.\n     ",
    "links" : [ "android.webkit.WebViewClient#onScaleChanged" ]
  }, {
    "name" : "public boolean canZoomOut()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView can be zoomed out.\n     *\n     * @return {@code true} if this WebView can be zoomed out\n     *\n     * @deprecated This method is prone to inaccuracy due to race conditions\n     * between the web rendering and UI threads; prefer\n     * {@link WebViewClient#onScaleChanged}.\n     ",
    "links" : [ "android.webkit.WebViewClient#onScaleChanged" ]
  }, {
    "name" : "public void zoomBy(float zoomFactor)",
    "returnType" : "void",
    "comment" : "\n     * Performs a zoom operation in this WebView.\n     *\n     * @param zoomFactor the zoom factor to apply. The zoom factor will be clamped to the WebView's\n     * zoom limits. This value must be in the range 0.01 to 100.0 inclusive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean zoomIn()",
    "returnType" : "boolean",
    "comment" : "\n     * Performs zoom in in this WebView.\n     *\n     * @return {@code true} if zoom in succeeds, {@code false} if no zoom changes\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean zoomOut()",
    "returnType" : "boolean",
    "comment" : "\n     * Performs zoom out in this WebView.\n     *\n     * @return {@code true} if zoom out succeeds, {@code false} if no zoom changes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void debugDump()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public void dumpViewHierarchyWithProperties(BufferedWriter out, int level)",
    "returnType" : "void",
    "comment" : "\n     * See {@link ViewDebug.HierarchyHandler#dumpViewHierarchyWithProperties(BufferedWriter, int)}\n     * @hide\n     ",
    "links" : [ "ViewDebug.HierarchyHandler#dumpViewHierarchyWithProperties(BufferedWriter" ]
  }, {
    "name" : "public View findHierarchyView(String className, int hashCode)",
    "returnType" : "View",
    "comment" : "\n     * See {@link ViewDebug.HierarchyHandler#findHierarchyView(String, int)}\n     * @hide\n     ",
    "links" : [ "ViewDebug.HierarchyHandler#findHierarchyView(String" ]
  }, {
    "name" : "public void setRendererPriorityPolicy(@RendererPriority int rendererRequestedPriority, boolean waivedWhenNotVisible)",
    "returnType" : "void",
    "comment" : "\n     * Set the renderer priority policy for this {@link WebView}. The\n     * priority policy will be used to determine whether an out of\n     * process renderer should be considered to be a target for OOM\n     * killing.\n     *\n     * Because a renderer can be associated with more than one\n     * WebView, the final priority it is computed as the maximum of\n     * any attached WebViews. When a WebView is destroyed it will\n     * cease to be considerered when calculating the renderer\n     * priority. Once no WebViews remain associated with the renderer,\n     * the priority of the renderer will be reduced to\n     * {@link #RENDERER_PRIORITY_WAIVED}.\n     *\n     * The default policy is to set the priority to\n     * {@link #RENDERER_PRIORITY_IMPORTANT} regardless of visibility,\n     * and this should not be changed unless the caller also handles\n     * renderer crashes with\n     * {@link WebViewClient#onRenderProcessGone}. Any other setting\n     * will result in WebView renderers being killed by the system\n     * more aggressively than the application.\n     *\n     * @param rendererRequestedPriority the minimum priority at which\n     *        this WebView desires the renderer process to be bound.\n     * @param waivedWhenNotVisible if {@code true}, this flag specifies that\n     *        when this WebView is not visible, it will be treated as\n     *        if it had requested a priority of\n     *        {@link #RENDERER_PRIORITY_WAIVED}.\n     ",
    "links" : [ "#RENDERER_PRIORITY_WAIVED", "android.webkit.WebViewClient#onRenderProcessGone", "android.webkit.WebView", "#RENDERER_PRIORITY_IMPORTANT" ]
  }, {
    "name" : "public int getRendererRequestedPriority()",
    "returnType" : "int",
    "comment" : "\n     * Get the requested renderer priority for this WebView.\n     *\n     * @return the requested renderer priority policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getRendererPriorityWaivedWhenNotVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this WebView requests a priority of\n     * {@link #RENDERER_PRIORITY_WAIVED} when not visible.\n     *\n     * @return whether this WebView requests a priority of\n     * {@link #RENDERER_PRIORITY_WAIVED} when not visible.\n     ",
    "links" : [ "#RENDERER_PRIORITY_WAIVED" ]
  }, {
    "name" : "public void setTextClassifier(@Nullable TextClassifier textClassifier)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link TextClassifier} for this WebView.\n     ",
    "links" : [ "android.view.textclassifier.TextClassifier" ]
  }, {
    "name" : "public TextClassifier getTextClassifier()",
    "returnType" : "TextClassifier",
    "comment" : "\n     * Returns the {@link TextClassifier} used by this WebView.\n     * If no TextClassifier has been set, this WebView uses the default set by the system.\n     ",
    "links" : [ "android.view.textclassifier.TextClassifier" ]
  }, {
    "name" : "public static ClassLoader getWebViewClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Returns the {@link ClassLoader} used to load internal WebView classes.\n     * This method is meant for use by the WebView Support Library, there is no reason to use this\n     * method otherwise.\n     ",
    "links" : [ "ClassLoader" ]
  }, {
    "name" : "public Looper getWebViewLooper()",
    "returnType" : "Looper",
    "comment" : "\n     * Returns the {@link Looper} corresponding to the thread on which WebView calls must be made.\n     ",
    "links" : [ "android.os.Looper" ]
  }, {
    "name" : "public WebViewProvider getWebViewProvider()",
    "returnType" : "WebViewProvider",
    "comment" : "\n     * Gets the WebViewProvider. Used by providers to obtain the underlying\n     * implementation, e.g. when the application responds to\n     * WebViewClient.onCreateWindow() request.\n     *\n     * @hide WebViewProvider is not public API.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFindDialogFindListener(FindListener listener)",
    "returnType" : "void",
    "comment" : " Only used by android.webkit.FindActionModeCallback.",
    "links" : [ ]
  }, {
    "name" : " void notifyFindDialogDismissed()",
    "returnType" : "void",
    "comment" : " Only used by android.webkit.FindActionModeCallback.",
    "links" : [ ]
  }, {
    "name" : "private void setupFindListenerIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureProviderCreated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static WebViewFactoryProvider getFactory()",
    "returnType" : "WebViewFactoryProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindowInternal()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onMovedToDisplay(int displayId, Configuration config)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLayoutParams(ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOverScrollMode(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScrollBarStyle(int style)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollExtent()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void computeScroll()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeProvider getAccessibilityNodeProvider()",
    "returnType" : "AccessibilityNodeProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDelayChildPressedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onProvideVirtualStructure(ViewStructure structure)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>The {@link ViewStructure} traditionally represents a {@link View}, while for web pages\n     * it represent HTML nodes. Hence, it's necessary to \"map\" the HTML properties in a way that is\n     * understood by the {@link android.service.autofill.AutofillService} implementations:\n     *\n     * <ol>\n     *   <li>Only the HTML nodes inside a {@code FORM} are generated.\n     *   <li>The source of the HTML is set using {@link ViewStructure#setWebDomain(String)} in the\n     *   node representing the WebView.\n     *   <li>If a web page has multiple {@code FORM}s, only the data for the current form is\n     *   represented&mdash;if the user taps a field from another form, then the current autofill\n     *   context is canceled (by calling {@link android.view.autofill.AutofillManager#cancel()} and\n     *   a new context is created for that {@code FORM}.\n     *   <li>Similarly, if the page has {@code IFRAME} nodes, they are not initially represented in\n     *   the view structure until the user taps a field from a {@code FORM} inside the\n     *   {@code IFRAME}, in which case it would be treated the same way as multiple forms described\n     *   above, except that the {@link ViewStructure#setWebDomain(String) web domain} of the\n     *   {@code FORM} contains the {@code src} attribute from the {@code IFRAME} node.\n     *   <li>The W3C autofill field ({@code autocomplete} tag attribute) maps to\n     *   {@link ViewStructure#setAutofillHints(String[])}.\n     *   <li>If the view is editable, the {@link ViewStructure#setAutofillType(int)} and\n     *   {@link ViewStructure#setAutofillValue(AutofillValue)} must be set.\n     *   <li>The {@code placeholder} attribute maps to {@link ViewStructure#setHint(CharSequence)}.\n     *   <li>Other HTML attributes can be represented through\n     *   {@link ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)}.\n     * </ol>\n     *\n     * <p>If the WebView implementation can determine that the value of a field was set statically\n     * (for example, not through Javascript), it should also call\n     * {@code structure.setDataIsSensitive(false)}.\n     *\n     * <p>For example, an HTML form with 2 fields for username and password:\n     *\n     * <pre class=\"prettyprint\">\n     *    &lt;label&gt;Username:&lt;/label&gt;\n     *    &lt;input type=\"text\" name=\"username\" id=\"user\" value=\"Type your username\" autocomplete=\"username\" placeholder=\"Email or username\"&gt;\n     *    &lt;label&gt;Password:&lt;/label&gt;\n     *    &lt;input type=\"password\" name=\"password\" id=\"pass\" autocomplete=\"current-password\" placeholder=\"Password\"&gt;\n     * </pre>\n     *\n     * <p>Would map to:\n     *\n     * <pre class=\"prettyprint\">\n     *     int index = structure.addChildCount(2);\n     *     ViewStructure username = structure.newChild(index);\n     *     username.setAutofillId(structure.getAutofillId(), 1); // id 1 - first child\n     *     username.setAutofillHints(\"username\");\n     *     username.setHtmlInfo(username.newHtmlInfoBuilder(\"input\")\n     *         .addAttribute(\"type\", \"text\")\n     *         .addAttribute(\"name\", \"username\")\n     *         .addAttribute(\"label\", \"Username:\")\n     *         .build());\n     *     username.setHint(\"Email or username\");\n     *     username.setAutofillType(View.AUTOFILL_TYPE_TEXT);\n     *     username.setAutofillValue(AutofillValue.forText(\"Type your username\"));\n     *     // Value of the field is not sensitive because it was created statically and not changed.\n     *     username.setDataIsSensitive(false);\n     *\n     *     ViewStructure password = structure.newChild(index + 1);\n     *     username.setAutofillId(structure, 2); // id 2 - second child\n     *     password.setAutofillHints(\"current-password\");\n     *     password.setHtmlInfo(password.newHtmlInfoBuilder(\"input\")\n     *         .addAttribute(\"type\", \"password\")\n     *         .addAttribute(\"name\", \"password\")\n     *         .addAttribute(\"label\", \"Password:\")\n     *         .build());\n     *     password.setHint(\"Password\");\n     *     password.setAutofillType(View.AUTOFILL_TYPE_TEXT);\n     * </pre>\n     ",
    "links" : [ "android.view.autofill.AutofillManager#cancel()", "android.view.ViewStructure#setAutofillValue(AutofillValue)", "android.view.ViewStructure", "android.view.ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo)", "android.view.ViewStructure#setHint(CharSequence)", "android.view.ViewStructure#setWebDomain(String)", "android.view.View", "android.service.autofill.AutofillService", "android.view.ViewStructure#setAutofillType(int)", "android.view.ViewStructure#setAutofillHints(String" ]
  }, {
    "name" : "public void onProvideContentCaptureStructure(@NonNull ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void autofill(SparseArray<AutofillValue> values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisibleToUserForAutofill(int virtualId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreateVirtualViewTranslationRequests(@NonNull long[] virtualIds, @NonNull @DataFormat int[] supportedFormats, @NonNull Consumer<ViewTranslationRequest> requestsCollector)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCreateViewTranslationRequest(@NonNull Map<AutofillId, long[]> viewIds, @NonNull @DataFormat int[] supportedFormats, @Nullable TranslationCapability capability, @NonNull List<ViewTranslationRequest> requests)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onVirtualViewTranslationResponses(@NonNull LongSparseArray<ViewTranslationResponse> response)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void onDrawVerticalScrollBar(Canvas canvas, Drawable scrollBar, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onWindowVisibilityChanged(int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performLongClick()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InputConnection onCreateInputConnection(EditorInfo outAttrs)",
    "returnType" : "InputConnection",
    "comment" : "\n     * Creates a new InputConnection for an InputMethod to interact with the WebView.\n     * This is similar to {@link View#onCreateInputConnection} but note that WebView\n     * calls InputConnection methods on a thread other than the UI thread.\n     * If these methods are overridden, then the overriding methods should respect\n     * thread restrictions when calling View methods or accessing data.\n     ",
    "links" : [ "android.view.View#onCreateInputConnection" ]
  }, {
    "name" : "public boolean onDragEvent(DragEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onVisibilityChanged(View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean setFrame(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int ow, int oh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onScrollChanged(int l, int t, int oldl, int oldt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean requestFocus(int direction, Rect previouslyFocusedRect)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLayerType(int layerType, Paint paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStartTemporaryDetach()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFinishTemporaryDetach()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View findFocus()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo getCurrentWebViewPackage()",
    "returnType" : "PackageInfo",
    "comment" : "\n     * If WebView has already been loaded into the current process this method will return the\n     * package that was used to load it. Otherwise, the package that would be used if the WebView\n     * was loaded right now will be returned; this does not cause WebView to be loaded, so this\n     * information may become outdated at any time.\n     * The WebView package changes either when the current WebView package is updated, disabled, or\n     * uninstalled. It can also be changed through a Developer Setting.\n     * If the WebView package changes, any app process that has loaded WebView will be killed. The\n     * next time the app starts and loads WebView it will use the new WebView package instead.\n     * @return the current WebView package, or {@code null} if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActivityResult(int requestCode, int resultCode, Intent data)",
    "returnType" : "void",
    "comment" : "\n     * Receive the result from a previous call to {@link #startActivityForResult(Intent, int)}.\n     *\n     * @param requestCode The integer request code originally supplied to\n     *                    startActivityForResult(), allowing you to identify who this\n     *                    result came from.\n     * @param resultCode The integer result code returned by the child activity\n     *                   through its setResult().\n     * @param data An Intent, which can return result data to the caller\n     *               (various data can be attached to Intent \"extras\").\n     * @hide\n     ",
    "links" : [ "#startActivityForResult(Intent" ]
  }, {
    "name" : "public boolean onCheckIsTextEditor()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets onApplyWindowInsets(WindowInsets insets)",
    "returnType" : "WindowInsets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(@NonNull MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setHorizontalScrollbarOverlay(boolean overlay)", "public void setVerticalScrollbarOverlay(boolean overlay)", "public boolean overlayHorizontalScrollbar()", "public boolean overlayVerticalScrollbar()", "public int getVisibleTitleHeight()", "public SslCertificate getCertificate()", "public void setCertificate(SslCertificate certificate)", "public void savePassword(String host, String username, String password)", "public void setHttpAuthUsernamePassword(String host, String realm, String username, String password)", "public String[] getHttpAuthUsernamePassword(String host, String realm)", "public void destroy()", "public static void enablePlatformNotifications()", "public static void disablePlatformNotifications()", "public static void freeMemoryForTests()", "public void setNetworkAvailable(boolean networkUp)", "public WebBackForwardList saveState(@NonNull Bundle outState)", "public boolean savePicture(Bundle b, final File dest)", "public boolean restorePicture(Bundle b, File src)", "public WebBackForwardList restoreState(@NonNull Bundle inState)", "public void loadUrl(@NonNull String url, @NonNull Map<String, String> additionalHttpHeaders)", "public void loadUrl(@NonNull String url)", "public void postUrl(@NonNull String url, @NonNull byte[] postData)", "public void loadData(@NonNull String data, @Nullable String mimeType, @Nullable String encoding)", "public void loadDataWithBaseURL(@Nullable String baseUrl, @NonNull String data, @Nullable String mimeType, @Nullable String encoding, @Nullable String historyUrl)", "public void evaluateJavascript(@NonNull String script, @Nullable ValueCallback<String> resultCallback)", "public void saveWebArchive(@NonNull String filename)", "public void saveWebArchive(@NonNull String basename, boolean autoname, @Nullable ValueCallback<String> callback)", "public void stopLoading()", "public void reload()", "public boolean canGoBack()", "public void goBack()", "public boolean canGoForward()", "public void goForward()", "public boolean canGoBackOrForward(int steps)", "public void goBackOrForward(int steps)", "public boolean isPrivateBrowsingEnabled()", "public boolean pageUp(boolean top)", "public boolean pageDown(boolean bottom)", "public void postVisualStateCallback(long requestId, @NonNull VisualStateCallback callback)", "public void clearView()", "public Picture capturePicture()", "public PrintDocumentAdapter createPrintDocumentAdapter()", "public PrintDocumentAdapter createPrintDocumentAdapter(@NonNull String documentName)", "public float getScale()", "public void setInitialScale(int scaleInPercent)", "public void invokeZoomPicker()", "public HitTestResult getHitTestResult()", "public void requestFocusNodeHref(@Nullable Message hrefMsg)", "public void requestImageRef(@NonNull Message msg)", "public String getUrl()", "public String getOriginalUrl()", "public String getTitle()", "public Bitmap getFavicon()", "public String getTouchIconUrl()", "public int getProgress()", "public int getContentHeight()", "public int getContentWidth()", "public void pauseTimers()", "public void resumeTimers()", "public void onPause()", "public void onResume()", "public boolean isPaused()", "public void freeMemory()", "public void clearCache(boolean includeDiskFiles)", "public void clearFormData()", "public void clearHistory()", "public void clearSslPreferences()", "public static void clearClientCertPreferences(@Nullable Runnable onCleared)", "public static void startSafeBrowsing(@NonNull Context context, @Nullable ValueCallback<Boolean> callback)", "public static void setSafeBrowsingWhitelist(@NonNull List<String> hosts, @Nullable ValueCallback<Boolean> callback)", "public static Uri getSafeBrowsingPrivacyPolicyUrl()", "public WebBackForwardList copyBackForwardList()", "public void setFindListener(@Nullable FindListener listener)", "public void findNext(boolean forward)", "public int findAll(String find)", "public void findAllAsync(@NonNull String find)", "public boolean showFindDialog(@Nullable String text, boolean showIme)", "public static String findAddress(String addr)", "public static void enableSlowWholeDocumentDraw()", "public void clearMatches()", "public void documentHasImages(@NonNull Message response)", "public void setWebViewClient(@NonNull WebViewClient client)", "public WebViewClient getWebViewClient()", "public WebViewRenderProcess getWebViewRenderProcess()", "public void setWebViewRenderProcessClient(@NonNull @CallbackExecutor Executor executor, @NonNull WebViewRenderProcessClient webViewRenderProcessClient)", "public void setWebViewRenderProcessClient(@Nullable WebViewRenderProcessClient webViewRenderProcessClient)", "public WebViewRenderProcessClient getWebViewRenderProcessClient()", "public void setDownloadListener(@Nullable DownloadListener listener)", "public void setWebChromeClient(@Nullable WebChromeClient client)", "public WebChromeClient getWebChromeClient()", "public void setPictureListener(PictureListener listener)", "public void addJavascriptInterface(@NonNull Object object, @NonNull String name)", "public void removeJavascriptInterface(@NonNull String name)", "public WebMessagePort[] createWebMessageChannel()", "public void postWebMessage(@NonNull WebMessage message, @NonNull Uri targetOrigin)", "public WebSettings getSettings()", "public static void setWebContentsDebuggingEnabled(boolean enabled)", "public static synchronized PluginList getPluginList()", "public static void setDataDirectorySuffix(@NonNull String suffix)", "public static void disableWebView()", "public void refreshPlugins(boolean reloadOpenPages)", "public void emulateShiftHeld()", "public void onChildViewAdded(View parent, View child)", "public void onChildViewRemoved(View p, View child)", "public void onGlobalFocusChanged(View oldFocus, View newFocus)", "public void setMapTrackballToArrowKeys(boolean setMap)", "public void flingScroll(int vx, int vy)", "public View getZoomControls()", "public boolean canZoomIn()", "public boolean canZoomOut()", "public void zoomBy(float zoomFactor)", "public boolean zoomIn()", "public boolean zoomOut()", "public void debugDump()", "public void dumpViewHierarchyWithProperties(BufferedWriter out, int level)", "public View findHierarchyView(String className, int hashCode)", "public void setRendererPriorityPolicy(@RendererPriority int rendererRequestedPriority, boolean waivedWhenNotVisible)", "public int getRendererRequestedPriority()", "public boolean getRendererPriorityWaivedWhenNotVisible()", "public void setTextClassifier(@Nullable TextClassifier textClassifier)", "public TextClassifier getTextClassifier()", "public static ClassLoader getWebViewClassLoader()", "public Looper getWebViewLooper()", "public WebViewProvider getWebViewProvider()", " void setFindDialogFindListener(FindListener listener)", " void notifyFindDialogDismissed()", "private void setupFindListenerIfNeeded()", "private void ensureProviderCreated()", "private static WebViewFactoryProvider getFactory()", "private void checkThread()", "protected void onAttachedToWindow()", "protected void onDetachedFromWindowInternal()", "public void onMovedToDisplay(int displayId, Configuration config)", "public void setLayoutParams(ViewGroup.LayoutParams params)", "public void setOverScrollMode(int mode)", "public void setScrollBarStyle(int style)", "protected int computeHorizontalScrollRange()", "protected int computeHorizontalScrollOffset()", "protected int computeVerticalScrollRange()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollExtent()", "public void computeScroll()", "public boolean onHoverEvent(MotionEvent event)", "public boolean onTouchEvent(MotionEvent event)", "public boolean onGenericMotionEvent(MotionEvent event)", "public boolean onTrackballEvent(MotionEvent event)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)", "public AccessibilityNodeProvider getAccessibilityNodeProvider()", "public boolean shouldDelayChildPressedState()", "public CharSequence getAccessibilityClassName()", "public void onProvideVirtualStructure(ViewStructure structure)", "public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)", "public void onProvideContentCaptureStructure(@NonNull ViewStructure structure, int flags)", "public void autofill(SparseArray<AutofillValue> values)", "public boolean isVisibleToUserForAutofill(int virtualId)", "public void onCreateVirtualViewTranslationRequests(@NonNull long[] virtualIds, @NonNull @DataFormat int[] supportedFormats, @NonNull Consumer<ViewTranslationRequest> requestsCollector)", "public void dispatchCreateViewTranslationRequest(@NonNull Map<AutofillId, long[]> viewIds, @NonNull @DataFormat int[] supportedFormats, @Nullable TranslationCapability capability, @NonNull List<ViewTranslationRequest> requests)", "public void onVirtualViewTranslationResponses(@NonNull LongSparseArray<ViewTranslationResponse> response)", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)", "protected void onDrawVerticalScrollBar(Canvas canvas, Drawable scrollBar, int l, int t, int r, int b)", "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)", "protected void onWindowVisibilityChanged(int visibility)", "protected void onDraw(Canvas canvas)", "public boolean performLongClick()", "protected void onConfigurationChanged(Configuration newConfig)", "public InputConnection onCreateInputConnection(EditorInfo outAttrs)", "public boolean onDragEvent(DragEvent event)", "protected void onVisibilityChanged(View changedView, int visibility)", "public void onWindowFocusChanged(boolean hasWindowFocus)", "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)", "protected boolean setFrame(int left, int top, int right, int bottom)", "protected void onSizeChanged(int w, int h, int ow, int oh)", "protected void onScrollChanged(int l, int t, int oldl, int oldt)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean requestFocus(int direction, Rect previouslyFocusedRect)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate)", "public void setBackgroundColor(int color)", "public void setLayerType(int layerType, Paint paint)", "protected void dispatchDraw(Canvas canvas)", "public void onStartTemporaryDetach()", "public void onFinishTemporaryDetach()", "public Handler getHandler()", "public View findFocus()", "public static PackageInfo getCurrentWebViewPackage()", "public void onActivityResult(int requestCode, int resultCode, Intent data)", "public boolean onCheckIsTextEditor()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)", "public WindowInsets onApplyWindowInsets(WindowInsets insets)", "public PointerIcon onResolvePointerIcon(@NonNull MotionEvent event, int pointerIndex)" ],
  "variableNames" : [ "LOGTAG", "sEnforceThreadChecking", "SCHEME_TEL", "SCHEME_MAILTO", "SCHEME_GEO", "RENDERER_PRIORITY_WAIVED", "RENDERER_PRIORITY_BOUND", "RENDERER_PRIORITY_IMPORTANT", "mProvider", "mFindListener", "mWebViewThread" ]
}