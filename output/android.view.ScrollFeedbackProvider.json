{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ScrollFeedbackProvider.java",
  "packageName" : "android.view",
  "className" : "ScrollFeedbackProvider",
  "comment" : "\n * Provides feedback to the user for scroll events on a {@link View}. The type of feedback provided\n * to the user may depend on the {@link InputDevice} that generated the scroll events.\n *\n * <p>An example of the type of feedback that this interface may provide is haptic feedback (that\n * is, tactile feedback that provide the user physical feedback for their scroll).\n *\n * <p>The interface provides methods for the client to report different scroll events. The client\n * should report all scroll events that they want to be considered for scroll feedback using the\n * respective methods. The interface will process these events and provide scroll feedback based on\n * its specific feedback implementation.\n *\n * <h3>Obtaining the correct arguments for methods in this interface</h3>\n *\n * <p>Methods in this interface rely on the provision of valid {@link InputDevice} ID and source, as\n * well as the {@link MotionEvent} axis that generated a specific scroll event. The\n * {@link InputDevice} represented by the provided ID must have a {@link InputDevice.MotionRange}\n * with the provided source and axis. See below for more details on obtaining the right arguments\n * for your method call.\n *\n * <ul>\n *\n * <li><p><b>inputDeviceId</b>: should always be the ID of the {@link InputDevice} that generated\n * the scroll event. If calling this method in response to a {@link MotionEvent}, use the device ID\n * that is reported by the event, which can be obtained using {@link MotionEvent#getDeviceId()}.\n * Otherwise, use a valid ID that is obtained from {@link InputDevice#getId()}, or from an\n * {@link android.hardware.input.InputManager} instance\n * ({@link android.hardware.input.InputManager#getInputDeviceIds()} gives all the valid input\n * device IDs).\n *\n * <li><p><b>source</b>: should always be the {@link InputDevice} source that generated the scroll\n * event. Use {@link MotionEvent#getSource()} if calling this method in response to a\n * {@link MotionEvent}. Otherwise, use a valid source for the {@link InputDevice}. You can use\n * {@link InputDevice#getMotionRanges()} to get all the {@link InputDevice.MotionRange}s for the\n * {@link InputDevice}, from which you can derive all the valid sources for the device.\n *\n * <li><p><b>axis</b>: should always be the axis whose axis value produced the scroll event.\n * A {@link MotionEvent} may report data for multiple axes, and each axis may have multiple data\n * points for different pointers. Use the axis whose movement produced the specific scroll event.\n * The motion value for an axis can be obtained using {@link MotionEvent#getAxisValue(int)}.\n * You can use {@link InputDevice#getMotionRanges()} to get all the {@link InputDevice.MotionRange}s\n * for the {@link InputDevice}, from which you can derive all the valid axes for the device.\n *\n * </ul>\n *\n * <b>Note</b> that not all valid input device source and motion axis inputs are necessarily\n * supported for scroll feedback; the implementation may choose to provide no feedback for some\n * valid input device source and motion axis arguments.\n ",
  "links" : [ "android.view.MotionEvent#getSource()", "android.view.InputDevice", "InputDevice.MotionRange", "android.view.MotionEvent#getDeviceId()", "android.hardware.input.InputManager#getInputDeviceIds()", "android.view.MotionEvent", "android.view.InputDevice#getMotionRanges()", "android.view.InputDevice#getId()", "android.view.View", "android.hardware.input.InputManager", "android.view.MotionEvent#getAxisValue(int)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static ScrollFeedbackProvider createProvider(@NonNull View view)",
    "returnType" : "ScrollFeedbackProvider",
    "comment" : "\n     * Creates a {@link ScrollFeedbackProvider} implementation for this device.\n     *\n     * <p>Use a feedback provider created by this method, unless you intend to use your custom\n     * scroll feedback providing logic. This allows your use cases to generate scroll feedback that\n     * is consistent with the rest of the use cases on the device.\n     *\n     * @param view the {@link View} for which to provide scroll feedback.\n     * @return the default {@link ScrollFeedbackProvider} implementation for the device.\n     ",
    "links" : [ "android.view.ScrollFeedbackProvider", "android.view.View" ]
  }, {
    "name" : " void onSnapToItem(int inputDeviceId, int source, int axis)",
    "returnType" : "void",
    "comment" : "\n     * Call this when the view has snapped to an item.\n     *\n     * @param inputDeviceId the ID of the {@link InputDevice} that generated the motion triggering\n     *          the snap.\n     * @param source the input source of the motion causing the snap.\n     * @param axis the axis of {@code event} that caused the item to snap.\n     ",
    "links" : [ "android.view.InputDevice" ]
  }, {
    "name" : " void onScrollLimit(int inputDeviceId, int source, int axis, boolean isStart)",
    "returnType" : "void",
    "comment" : "\n     * Call this when the view has reached the scroll limit.\n     *\n     * <p>Note that a feedback may not be provided on every call to this method. This interface, for\n     * instance, may provide feedback on every `N`th scroll limit event. For the interface to\n     * properly provide feedback when needed, call this method for each scroll limit event that you\n     * want to be accounted to scroll limit feedback.\n     *\n     * @param inputDeviceId the ID of the {@link InputDevice} that caused scrolling to hit limit.\n     * @param source the input source of the motion that caused scrolling to hit the limit.\n     * @param axis the axis of {@code event} that caused scrolling to hit the limit.\n     * @param isStart {@code true} if scrolling hit limit at the start of the scrolling list, and\n     *                {@code false} if the scrolling hit limit at the end of the scrolling list.\n     *                <i>start</i> and <i>end<i> in this context are not geometrical references.\n     *                Instead, they refer to the start and end of a scrolling experience. As such,\n     *                \"start\" for some views may be at the bottom of a scrolling list, while it may\n     *                be at the top of scrolling list for others.\n     ",
    "links" : [ "android.view.InputDevice" ]
  }, {
    "name" : " void onScrollProgress(int inputDeviceId, int source, int axis, int deltaInPixels)",
    "returnType" : "void",
    "comment" : "\n     * Call this when the view has scrolled.\n     *\n     * <p>Different axes have different ways to map their raw axis values to pixels for scrolling.\n     * When calling this method, use the scroll values in pixels by which the view was scrolled; do\n     * not use the raw axis values. That is, use whatever value is passed to one of View's scrolling\n     * methods (example: {@link View#scrollBy(int, int)}). For example, for vertical scrolling on\n     * {@link MotionEvent#AXIS_SCROLL}, convert the raw axis value to the equivalent pixels by using\n     * {@link ViewConfiguration#getScaledVerticalScrollFactor()}, and use that value for this method\n     * call.\n     *\n     * <p>Note that a feedback may not be provided on every call to this method. This interface, for\n     * instance, may provide feedback for every `x` pixels scrolled. For the interface to properly\n     * track scroll progress and provide feedback when needed, call this method for each scroll\n     * event that you want to be accounted to scroll feedback.\n     *\n     * @param inputDeviceId the ID of the {@link InputDevice} that caused scroll progress.\n     * @param source the input source of the motion that caused scroll progress.\n     * @param axis the axis of {@code event} that caused scroll progress.\n     * @param deltaInPixels the amount of scroll progress, in pixels.\n     ",
    "links" : [ "android.view.MotionEvent#AXIS_SCROLL", "android.view.InputDevice", "android.view.View#scrollBy(int", "android.view.ViewConfiguration#getScaledVerticalScrollFactor()" ]
  } ],
  "methodNames" : [ " static ScrollFeedbackProvider createProvider(@NonNull View view)", " void onSnapToItem(int inputDeviceId, int source, int axis)", " void onScrollLimit(int inputDeviceId, int source, int axis, boolean isStart)", " void onScrollProgress(int inputDeviceId, int source, int axis, int deltaInPixels)" ],
  "variableNames" : [ ]
}