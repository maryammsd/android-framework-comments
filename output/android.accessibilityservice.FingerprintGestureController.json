{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/accessibilityservice/FingerprintGestureController.java",
  "packageName" : "android.accessibilityservice",
  "className" : "FingerprintGestureController",
  "comment" : "\n * An {@link AccessibilityService} can capture gestures performed on a device's fingerprint\n * sensor, as long as the device has a sensor capable of detecting gestures.\n * <p>\n * This capability must be declared by the service as\n * {@link AccessibilityServiceInfo#CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES}. It also requires\n * the permission {@link android.Manifest.permission#USE_FINGERPRINT}.\n * <p>\n * Because capturing fingerprint gestures may have side effects, services with the capability only\n * capture gestures when {@link AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES} is set.\n * <p>\n * <strong>Note: </strong>The fingerprint sensor is used for authentication in critical use cases,\n * so services must carefully design their user's experience when performing gestures on the sensor.\n * When the sensor is in use by an app, for example, when authenticating or enrolling a user,\n * the sensor will not detect gestures. Services need to ensure that users understand when the\n * sensor is in-use for authentication to prevent users from authenticating unintentionally when\n * trying to interact with the service. They can use\n * {@link FingerprintGestureCallback#onGestureDetectionAvailabilityChanged(boolean)} to learn when\n * gesture detection becomes unavailable.\n * <p>\n * Multiple accessibility services may listen for fingerprint gestures simultaneously, so services\n * should provide a way for the user to disable the use of this feature so multiple services don't\n * conflict with each other.\n * <p>\n * {@see android.hardware.fingerprint.FingerprintManager#isHardwareDetected}\n ",
  "variables" : [ {
    "name" : "FINGERPRINT_GESTURE_SWIPE_RIGHT",
    "type" : "int",
    "comment" : " Identifier for a swipe right on the fingerprint sensor ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_GESTURE_SWIPE_LEFT",
    "type" : "int",
    "comment" : " Identifier for a swipe left on the fingerprint sensor ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_GESTURE_SWIPE_UP",
    "type" : "int",
    "comment" : " Identifier for a swipe up on the fingerprint sensor ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_GESTURE_SWIPE_DOWN",
    "type" : "int",
    "comment" : " Identifier for a swipe down on the fingerprint sensor ",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityServiceConnection",
    "type" : "IAccessibilityServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackHandlerMap",
    "type" : "ArrayMap<FingerprintGestureCallback, Handler>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isGestureDetectionAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the fingerprint sensor's gesture detection is available.\n     *\n     * @return {@code true} if the sensor's gesture detection is available. {@code false} if it is\n     * not currently detecting gestures (for example, if it is enrolling a finger).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerFingerprintGestureCallback(@NonNull FingerprintGestureCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be informed of fingerprint sensor gesture events.\n     *\n     * @param callback The listener to be added.\n     * @param handler The handler to use for the callback. If {@code null}, callbacks will happen\n     * on the service's main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterFingerprintGestureCallback(FingerprintGestureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a listener added with {@link #registerFingerprintGestureCallback}.\n     *\n     * @param callback The callback to remove. Removing a callback that was never added has no\n     * effect.\n     ",
    "links" : [ "#registerFingerprintGestureCallback" ]
  }, {
    "name" : "public void onGestureDetectionActiveChanged(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Called when gesture detection becomes active or inactive\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGesture(int gesture)",
    "returnType" : "void",
    "comment" : "\n     * Called when gesture is detected.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FINGERPRINT_GESTURE_SWIPE_RIGHT", "FINGERPRINT_GESTURE_SWIPE_LEFT", "FINGERPRINT_GESTURE_SWIPE_UP", "FINGERPRINT_GESTURE_SWIPE_DOWN", "LOG_TAG", "mLock", "mAccessibilityServiceConnection", "mCallbackHandlerMap" ],
  "methodNames" : [ "public boolean isGestureDetectionAvailable()", "public void registerFingerprintGestureCallback(@NonNull FingerprintGestureCallback callback, @Nullable Handler handler)", "public void unregisterFingerprintGestureCallback(FingerprintGestureCallback callback)", "public void onGestureDetectionActiveChanged(boolean active)", "public void onGesture(int gesture)" ]
}