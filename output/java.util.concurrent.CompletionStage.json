{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/CompletionStage.java",
  "packageName" : "java.util.concurrent",
  "className" : "CompletionStage",
  "comment" : "\n * A stage of a possibly asynchronous computation, that performs an\n * action or computes a value when another CompletionStage completes.\n * A stage completes upon termination of its computation, but this may\n * in turn trigger other dependent stages.  The functionality defined\n * in this interface takes only a few basic forms, which expand out to\n * a larger set of methods to capture a range of usage styles:\n *\n * <ul>\n *\n * <li>The computation performed by a stage may be expressed as a\n * Function, Consumer, or Runnable (using methods with names including\n * <em>apply</em>, <em>accept</em>, or <em>run</em>, respectively)\n * depending on whether it requires arguments and/or produces results.\n * For example:\n * <pre> {@code\n * stage.thenApply(x -> square(x))\n *      .thenAccept(x -> System.out.print(x))\n *      .thenRun(() -> System.out.println());}</pre>\n *\n * An additional form (<em>compose</em>) allows the construction of\n * computation pipelines from functions returning completion stages.\n *\n * <p>Any argument to a stage's computation is the outcome of a\n * triggering stage's computation.\n *\n * <li>One stage's execution may be triggered by completion of a\n * single stage, or both of two stages, or either of two stages.\n * Dependencies on a single stage are arranged using methods with\n * prefix <em>then</em>. Those triggered by completion of\n * <em>both</em> of two stages may <em>combine</em> their results or\n * effects, using correspondingly named methods. Those triggered by\n * <em>either</em> of two stages make no guarantees about which of the\n * results or effects are used for the dependent stage's computation.\n *\n * <li>Dependencies among stages control the triggering of\n * computations, but do not otherwise guarantee any particular\n * ordering. Additionally, execution of a new stage's computations may\n * be arranged in any of three ways: default execution, default\n * asynchronous execution (using methods with suffix <em>async</em>\n * that employ the stage's default asynchronous execution facility),\n * or custom (via a supplied {@link Executor}).  The execution\n * properties of default and async modes are specified by\n * CompletionStage implementations, not this interface. Methods with\n * explicit Executor arguments may have arbitrary execution\n * properties, and might not even support concurrent execution, but\n * are arranged for processing in a way that accommodates asynchrony.\n *\n * <li>Two method forms ({@link #handle handle} and {@link\n * #whenComplete whenComplete}) support unconditional computation\n * whether the triggering stage completed normally or exceptionally.\n * Method {@link #exceptionally exceptionally} supports computation\n * only when the triggering stage completes exceptionally, computing a\n * replacement result, similarly to the java {@code catch} keyword.\n * In all other cases, if a stage's computation terminates abruptly\n * with an (unchecked) exception or error, then all dependent stages\n * requiring its completion complete exceptionally as well, with a\n * {@link CompletionException} holding the exception as its cause.  If\n * a stage is dependent on <em>both</em> of two stages, and both\n * complete exceptionally, then the CompletionException may correspond\n * to either one of these exceptions.  If a stage is dependent on\n * <em>either</em> of two others, and only one of them completes\n * exceptionally, no guarantees are made about whether the dependent\n * stage completes normally or exceptionally. In the case of method\n * {@code whenComplete}, when the supplied action itself encounters an\n * exception, then the stage completes exceptionally with this\n * exception unless the source stage also completed exceptionally, in\n * which case the exceptional completion from the source stage is\n * given preference and propagated to the dependent stage.\n *\n * </ul>\n *\n * <p>All methods adhere to the above triggering, execution, and\n * exceptional completion specifications (which are not repeated in\n * individual method specifications). Additionally, while arguments\n * used to pass a completion result (that is, for parameters of type\n * {@code T}) for methods accepting them may be null, passing a null\n * value for any other parameter will result in a {@link\n * NullPointerException} being thrown.\n *\n * <p>Method form {@link #handle handle} is the most general way of\n * creating a continuation stage, unconditionally performing a\n * computation that is given both the result and exception (if any) of\n * the triggering CompletionStage, and computing an arbitrary result.\n * Method {@link #whenComplete whenComplete} is similar, but preserves\n * the result of the triggering stage instead of computing a new one.\n * Because a stage's normal result may be {@code null}, both methods\n * should have a computation structured thus:\n *\n * <pre>{@code (result, exception) -> {\n *   if (exception == null) {\n *     // triggering stage completed normally\n *   } else {\n *     // triggering stage completed exceptionally\n *   }\n * }}</pre>\n *\n * <p>This interface does not define methods for initially creating,\n * forcibly completing normally or exceptionally, probing completion\n * status or results, or awaiting completion of a stage.\n * Implementations of CompletionStage may provide means of achieving\n * such effects, as appropriate.  Method {@link #toCompletableFuture}\n * enables interoperability among different implementations of this\n * interface by providing a common conversion type.\n *\n * @author Doug Lea\n * @since 1.8\n ",
  "links" : [ "#whenComplete", "java.util.concurrent.Executor", "#exceptionally", "NullPointerException", "#handle", "java.util.concurrent.CompletionException", "#toCompletableFuture" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public CompletionStage<U> thenApply(Function<? super T, ? extends U> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, is executed with this stage's result as the argument\n     * to the supplied function.\n     *\n     * <p>This method is analogous to\n     * {@link java.util.Optional#map Optional.map} and\n     * {@link java.util.stream.Stream#map Stream.map}.\n     *\n     * <p>See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.stream.Stream#map", "java.util.Optional#map", "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> thenApplyAsync(Function<? super T, ? extends U> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, is executed using this stage's default asynchronous\n     * execution facility, with this stage's result as the argument to\n     * the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> thenApplyAsync(Function<? super T, ? extends U> fn, Executor executor)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, is executed using the supplied Executor, with this\n     * stage's result as the argument to the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenAccept(Consumer<? super T> action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, is executed with this stage's result as the argument\n     * to the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, is executed using this stage's default asynchronous\n     * execution facility, with this stage's result as the argument to\n     * the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, is executed using the supplied Executor, with this\n     * stage's result as the argument to the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenRun(Runnable action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, executes the given action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenRunAsync(Runnable action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, executes the given action using this stage's default\n     * asynchronous execution facility.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenRunAsync(Runnable action, Executor executor)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * normally, executes the given action using the supplied Executor.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)",
    "returnType" : "CompletionStage<V>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, is executed with the two\n     * results as arguments to the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the type of the other CompletionStage's result\n     * @param <V> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)",
    "returnType" : "CompletionStage<V>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, is executed using this\n     * stage's default asynchronous execution facility, with the two\n     * results as arguments to the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the type of the other CompletionStage's result\n     * @param <V> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)",
    "returnType" : "CompletionStage<V>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, is executed using the\n     * supplied executor, with the two results as arguments to the\n     * supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the type of the other CompletionStage's result\n     * @param <V> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, is executed with the two\n     * results as arguments to the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param <U> the type of the other CompletionStage's result\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, is executed using this\n     * stage's default asynchronous execution facility, with the two\n     * results as arguments to the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param <U> the type of the other CompletionStage's result\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, is executed using the\n     * supplied executor, with the two results as arguments to the\n     * supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the type of the other CompletionStage's result\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> runAfterBoth(CompletionStage<?> other, Runnable action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, executes the given action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, executes the given action\n     * using this stage's default asynchronous execution facility.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when this and the other\n     * given stage both complete normally, executes the given action\n     * using the supplied executor.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> applyToEither(CompletionStage<? extends T> other, Function<? super T, U> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, is executed with the\n     * corresponding result as argument to the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, is executed using this\n     * stage's default asynchronous execution facility, with the\n     * corresponding result as argument to the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, is executed using the\n     * supplied executor, with the corresponding result as argument to\n     * the supplied function.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, is executed with the\n     * corresponding result as argument to the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, is executed using this\n     * stage's default asynchronous execution facility, with the\n     * corresponding result as argument to the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, is executed using the\n     * supplied executor, with the corresponding result as argument to\n     * the supplied action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> runAfterEither(CompletionStage<?> other, Runnable action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, executes the given action.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, executes the given action\n     * using this stage's default asynchronous execution facility.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor)",
    "returnType" : "CompletionStage<Void>",
    "comment" : "\n     * Returns a new CompletionStage that, when either this or the\n     * other given stage complete normally, executes the given action\n     * using the supplied executor.\n     *\n     * See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param other the other CompletionStage\n     * @param action the action to perform before completing the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that is completed with the same\n     * value as the CompletionStage returned by the given function.\n     *\n     * <p>When this stage completes normally, the given function is\n     * invoked with this stage's result as the argument, returning\n     * another CompletionStage.  When that stage completes normally,\n     * the CompletionStage returned by this method is completed with\n     * the same value.\n     *\n     * <p>To ensure progress, the supplied function must arrange\n     * eventual completion of its result.\n     *\n     * <p>This method is analogous to\n     * {@link java.util.Optional#flatMap Optional.flatMap} and\n     * {@link java.util.stream.Stream#flatMap Stream.flatMap}.\n     *\n     * <p>See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param fn the function to use to compute another CompletionStage\n     * @param <U> the type of the returned CompletionStage's result\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage", "java.util.stream.Stream#flatMap", "java.util.Optional#flatMap" ]
  }, {
    "name" : "public CompletionStage<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that is completed with the same\n     * value as the CompletionStage returned by the given function,\n     * executed using this stage's default asynchronous execution\n     * facility.\n     *\n     * <p>When this stage completes normally, the given function is\n     * invoked with this stage's result as the argument, returning\n     * another CompletionStage.  When that stage completes normally,\n     * the CompletionStage returned by this method is completed with\n     * the same value.\n     *\n     * <p>To ensure progress, the supplied function must arrange\n     * eventual completion of its result.\n     *\n     * <p>See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param fn the function to use to compute another CompletionStage\n     * @param <U> the type of the returned CompletionStage's result\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that is completed with the same\n     * value as the CompletionStage returned by the given function,\n     * executed using the supplied Executor.\n     *\n     * <p>When this stage completes normally, the given function is\n     * invoked with this stage's result as the argument, returning\n     * another CompletionStage.  When that stage completes normally,\n     * the CompletionStage returned by this method is completed with\n     * the same value.\n     *\n     * <p>To ensure progress, the supplied function must arrange\n     * eventual completion of its result.\n     *\n     * <p>See the {@link CompletionStage} documentation for rules\n     * covering exceptional completion.\n     *\n     * @param fn the function to use to compute another CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the type of the returned CompletionStage's result\n     * @return the new CompletionStage\n     ",
    "links" : [ "java.util.concurrent.CompletionStage" ]
  }, {
    "name" : "public CompletionStage<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * either normally or exceptionally, is executed with this stage's\n     * result and exception as arguments to the supplied function.\n     *\n     * <p>When this stage is complete, the given function is invoked\n     * with the result (or {@code null} if none) and the exception (or\n     * {@code null} if none) of this stage as arguments, and the\n     * function's result is used to complete the returned stage.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * either normally or exceptionally, is executed using this stage's\n     * default asynchronous execution facility, with this stage's\n     * result and exception as arguments to the supplied function.\n     *\n     * <p>When this stage is complete, the given function is invoked\n     * with the result (or {@code null} if none) and the exception (or\n     * {@code null} if none) of this stage as arguments, and the\n     * function's result is used to complete the returned stage.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor)",
    "returnType" : "CompletionStage<U>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * either normally or exceptionally, is executed using the\n     * supplied executor, with this stage's result and exception as\n     * arguments to the supplied function.\n     *\n     * <p>When this stage is complete, the given function is invoked\n     * with the result (or {@code null} if none) and the exception (or\n     * {@code null} if none) of this stage as arguments, and the\n     * function's result is used to complete the returned stage.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the function's return type\n     * @return the new CompletionStage\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompletionStage<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage with the same result or exception as\n     * this stage, that executes the given action when this stage completes.\n     *\n     * <p>When this stage is complete, the given action is invoked\n     * with the result (or {@code null} if none) and the exception (or\n     * {@code null} if none) of this stage as arguments.  The returned\n     * stage is completed when the action returns.\n     *\n     * <p>Unlike method {@link #handle handle},\n     * this method is not designed to translate completion outcomes,\n     * so the supplied action should not throw an exception. However,\n     * if it does, the following rules apply: if this stage completed\n     * normally but the supplied action throws an exception, then the\n     * returned stage completes exceptionally with the supplied\n     * action's exception. Or, if this stage completed exceptionally\n     * and the supplied action throws an exception, then the returned\n     * stage completes exceptionally with this stage's exception.\n     *\n     * @param action the action to perform\n     * @return the new CompletionStage\n     ",
    "links" : [ "#handle" ]
  }, {
    "name" : "public CompletionStage<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage with the same result or exception as\n     * this stage, that executes the given action using this stage's\n     * default asynchronous execution facility when this stage completes.\n     *\n     * <p>When this stage is complete, the given action is invoked with the\n     * result (or {@code null} if none) and the exception (or {@code null}\n     * if none) of this stage as arguments.  The returned stage is completed\n     * when the action returns.\n     *\n     * <p>Unlike method {@link #handleAsync(BiFunction) handleAsync},\n     * this method is not designed to translate completion outcomes,\n     * so the supplied action should not throw an exception. However,\n     * if it does, the following rules apply: If this stage completed\n     * normally but the supplied action throws an exception, then the\n     * returned stage completes exceptionally with the supplied\n     * action's exception. Or, if this stage completed exceptionally\n     * and the supplied action throws an exception, then the returned\n     * stage completes exceptionally with this stage's exception.\n     *\n     * @param action the action to perform\n     * @return the new CompletionStage\n     ",
    "links" : [ "#handleAsync(BiFunction)" ]
  }, {
    "name" : "public CompletionStage<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage with the same result or exception as\n     * this stage, that executes the given action using the supplied\n     * Executor when this stage completes.\n     *\n     * <p>When this stage is complete, the given action is invoked with the\n     * result (or {@code null} if none) and the exception (or {@code null}\n     * if none) of this stage as arguments.  The returned stage is completed\n     * when the action returns.\n     *\n     * <p>Unlike method {@link #handleAsync(BiFunction,Executor) handleAsync},\n     * this method is not designed to translate completion outcomes,\n     * so the supplied action should not throw an exception. However,\n     * if it does, the following rules apply: If this stage completed\n     * normally but the supplied action throws an exception, then the\n     * returned stage completes exceptionally with the supplied\n     * action's exception. Or, if this stage completed exceptionally\n     * and the supplied action throws an exception, then the returned\n     * stage completes exceptionally with this stage's exception.\n     *\n     * @param action the action to perform\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     ",
    "links" : [ "#handleAsync(BiFunction" ]
  }, {
    "name" : "public CompletionStage<T> exceptionally(Function<Throwable, ? extends T> fn)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * exceptionally, is executed with this stage's exception as the\n     * argument to the supplied function.  Otherwise, if this stage\n     * completes normally, then the returned stage also completes\n     * normally with the same value.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage if this CompletionStage completed\n     * exceptionally\n     * @return the new CompletionStage\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompletionStage<T> exceptionallyAsync(Function<Throwable, ? extends T> fn)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * exceptionally, is executed with this stage's exception as the\n     * argument to the supplied function, using this stage's default\n     * asynchronous execution facility.  Otherwise, if this stage\n     * completes normally, then the returned stage also completes\n     * normally with the same value.\n     *\n     * @implSpec The default implementation invokes {@link #handle},\n     * relaying to {@link #handleAsync} on exception, then {@link\n     * #thenCompose} for result.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage if this CompletionStage completed\n     * exceptionally\n     * @return the new CompletionStage\n     * @since 12\n     ",
    "links" : [ "#thenCompose", "#handleAsync", "#handle" ]
  }, {
    "name" : "public CompletionStage<T> exceptionallyAsync(Function<Throwable, ? extends T> fn, Executor executor)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * exceptionally, is executed with this stage's exception as the\n     * argument to the supplied function, using the supplied Executor.\n     * Otherwise, if this stage completes normally, then the returned\n     * stage also completes normally with the same value.\n     *\n     * @implSpec The default implementation invokes {@link #handle},\n     * relaying to {@link #handleAsync} on exception, then {@link\n     * #thenCompose} for result.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletionStage if this CompletionStage completed\n     * exceptionally\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     * @since 12\n     ",
    "links" : [ "#thenCompose", "#handleAsync", "#handle" ]
  }, {
    "name" : "public CompletionStage<T> exceptionallyCompose(Function<Throwable, ? extends CompletionStage<T>> fn)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * exceptionally, is composed using the results of the supplied\n     * function applied to this stage's exception.\n     *\n     * @implSpec The default implementation invokes {@link #handle},\n     * invoking the given function on exception, then {@link\n     * #thenCompose} for result.\n     *\n     * @param fn the function to use to compute the returned\n     * CompletionStage if this CompletionStage completed exceptionally\n     * @return the new CompletionStage\n     * @since 12\n     ",
    "links" : [ "#thenCompose", "#handle" ]
  }, {
    "name" : "public CompletionStage<T> exceptionallyComposeAsync(Function<Throwable, ? extends CompletionStage<T>> fn)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * exceptionally, is composed using the results of the supplied\n     * function applied to this stage's exception, using this stage's\n     * default asynchronous execution facility.\n     *\n     * @implSpec The default implementation invokes {@link #handle},\n     * relaying to {@link #handleAsync} on exception, then {@link\n     * #thenCompose} for result.\n     *\n     * @param fn the function to use to compute the returned\n     * CompletionStage if this CompletionStage completed exceptionally\n     * @return the new CompletionStage\n     * @since 12\n     ",
    "links" : [ "#thenCompose", "#handleAsync", "#handle" ]
  }, {
    "name" : "public CompletionStage<T> exceptionallyComposeAsync(Function<Throwable, ? extends CompletionStage<T>> fn, Executor executor)",
    "returnType" : "CompletionStage<T>",
    "comment" : "\n     * Returns a new CompletionStage that, when this stage completes\n     * exceptionally, is composed using the results of the supplied\n     * function applied to this stage's exception, using the\n     * supplied Executor.\n     *\n     * @implSpec The default implementation invokes {@link #handle},\n     * relaying to {@link #handleAsync} on exception, then {@link\n     * #thenCompose} for result.\n     *\n     * @param fn the function to use to compute the returned\n     * CompletionStage if this CompletionStage completed exceptionally\n     * @param executor the executor to use for asynchronous execution\n     * @return the new CompletionStage\n     * @since 12\n     ",
    "links" : [ "#thenCompose", "#handleAsync", "#handle" ]
  }, {
    "name" : "public CompletableFuture<T> toCompletableFuture()",
    "returnType" : "CompletableFuture<T>",
    "comment" : "\n     * Returns a {@link CompletableFuture} maintaining the same\n     * completion properties as this stage. If this stage is already a\n     * CompletableFuture, this method may return this stage itself.\n     * Otherwise, invocation of this method may be equivalent in\n     * effect to {@code thenApply(x -> x)}, but returning an instance\n     * of type {@code CompletableFuture}.\n     *\n     * @return the CompletableFuture\n     ",
    "links" : [ "java.util.concurrent.CompletableFuture" ]
  } ],
  "methodNames" : [ "public CompletionStage<U> thenApply(Function<? super T, ? extends U> fn)", "public CompletionStage<U> thenApplyAsync(Function<? super T, ? extends U> fn)", "public CompletionStage<U> thenApplyAsync(Function<? super T, ? extends U> fn, Executor executor)", "public CompletionStage<Void> thenAccept(Consumer<? super T> action)", "public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action)", "public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor)", "public CompletionStage<Void> thenRun(Runnable action)", "public CompletionStage<Void> thenRunAsync(Runnable action)", "public CompletionStage<Void> thenRunAsync(Runnable action, Executor executor)", "public CompletionStage<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)", "public CompletionStage<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)", "public CompletionStage<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)", "public CompletionStage<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)", "public CompletionStage<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)", "public CompletionStage<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor)", "public CompletionStage<Void> runAfterBoth(CompletionStage<?> other, Runnable action)", "public CompletionStage<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action)", "public CompletionStage<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor)", "public CompletionStage<U> applyToEither(CompletionStage<? extends T> other, Function<? super T, U> fn)", "public CompletionStage<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn)", "public CompletionStage<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor)", "public CompletionStage<Void> acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)", "public CompletionStage<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)", "public CompletionStage<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)", "public CompletionStage<Void> runAfterEither(CompletionStage<?> other, Runnable action)", "public CompletionStage<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action)", "public CompletionStage<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor)", "public CompletionStage<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn)", "public CompletionStage<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn)", "public CompletionStage<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor)", "public CompletionStage<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)", "public CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn)", "public CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor)", "public CompletionStage<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)", "public CompletionStage<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action)", "public CompletionStage<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor)", "public CompletionStage<T> exceptionally(Function<Throwable, ? extends T> fn)", "public CompletionStage<T> exceptionallyAsync(Function<Throwable, ? extends T> fn)", "public CompletionStage<T> exceptionallyAsync(Function<Throwable, ? extends T> fn, Executor executor)", "public CompletionStage<T> exceptionallyCompose(Function<Throwable, ? extends CompletionStage<T>> fn)", "public CompletionStage<T> exceptionallyComposeAsync(Function<Throwable, ? extends CompletionStage<T>> fn)", "public CompletionStage<T> exceptionallyComposeAsync(Function<Throwable, ? extends CompletionStage<T>> fn, Executor executor)", "public CompletableFuture<T> toCompletableFuture()" ],
  "variableNames" : [ ]
}