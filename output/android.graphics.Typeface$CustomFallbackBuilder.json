{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/Typeface.java",
  "packageName" : "android.graphics",
  "className" : "CustomFallbackBuilder",
  "comment" : "\n     * A builder class for creating new Typeface instance.\n     *\n     * There are two font fallback mechanisms, custom font fallback and system font fallback.\n     * The custom font fallback is a simple ordered list. The text renderer tries to see if it can\n     * render a character with the first font and if that font does not support the character, try\n     * next one and so on. It will keep trying until end of the custom fallback chain. The maximum\n     * length of the custom fallback chain is 64.\n     * The system font fallback is a system pre-defined fallback chain. The system fallback is\n     * processed only when no matching font is found in the custom font fallback.\n     *\n     * <p>\n     * Examples,\n     * 1) Create Typeface from single ttf file.\n     * <pre>\n     * <code>\n     * Font font = new Font.Builder(\"your_font_file.ttf\").build();\n     * FontFamily family = new FontFamily.Builder(font).build();\n     * Typeface typeface = new Typeface.CustomFallbackBuilder(family).build();\n     * </code>\n     * </pre>\n     *\n     * 2) Create Typeface from multiple font files and select bold style by default.\n     * <pre>\n     * <code>\n     * Font regularFont = new Font.Builder(\"regular.ttf\").build();\n     * Font boldFont = new Font.Builder(\"bold.ttf\").build();\n     * FontFamily family = new FontFamily.Builder(regularFont)\n     *     .addFont(boldFont).build();\n     * Typeface typeface = new Typeface.CustomFallbackBuilder(family)\n     *     .setWeight(Font.FONT_WEIGHT_BOLD)  // Set bold style as the default style.\n     *                                        // If the font family doesn't have bold style font,\n     *                                        // system will select the closest font.\n     *     .build();\n     * </code>\n     * </pre>\n     *\n     * 3) Create Typeface from single ttf file and if that font does not have glyph for the\n     * characters, use \"serif\" font family instead.\n     * <pre>\n     * <code>\n     * Font font = new Font.Builder(\"your_font_file.ttf\").build();\n     * FontFamily family = new FontFamily.Builder(font).build();\n     * Typeface typeface = new Typeface.CustomFallbackBuilder(family)\n     *     .setSystemFallback(\"serif\")  // Set serif font family as the fallback.\n     *     .build();\n     * </code>\n     * </pre>\n     * 4) Create Typeface from single ttf file and set another ttf file for the fallback.\n     * <pre>\n     * <code>\n     * Font font = new Font.Builder(\"English.ttf\").build();\n     * FontFamily family = new FontFamily.Builder(font).build();\n     *\n     * Font fallbackFont = new Font.Builder(\"Arabic.ttf\").build();\n     * FontFamily fallbackFamily = new FontFamily.Builder(fallbackFont).build();\n     * Typeface typeface = new Typeface.CustomFallbackBuilder(family)\n     *     .addCustomFallback(fallbackFamily)  // Specify fallback family.\n     *     .setSystemFallback(\"serif\")  // Set serif font family as the fallback.\n     *     .build();\n     * </code>\n     * </pre>\n     * </p>\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_CUSTOM_FALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFamilies",
    "type" : "ArrayList<FontFamily>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStyle",
    "type" : "FontStyle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getMaxCustomFallbackCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum capacity of custom fallback families.\n         *\n         * This includes the first font family passed to the constructor.\n         * It is guaranteed that the value will be greater than or equal to 64.\n         *\n         * @return the maximum number of font families for the custom fallback\n         ",
    "links" : [ ]
  }, {
    "name" : "public CustomFallbackBuilder setSystemFallback(@NonNull String familyName)",
    "returnType" : "CustomFallbackBuilder",
    "comment" : "\n         * Sets a system fallback by name.\n         *\n         * You can specify generic font family names or OEM specific family names. If the system\n         * don't have a specified fallback, the default fallback is used instead.\n         * For more information about generic font families, see <a\n         * href=\"https://www.w3.org/TR/css-fonts-4/#generic-font-families\">CSS specification</a>\n         *\n         * For more information about fallback, see class description.\n         *\n         * @param familyName a family name to be used for fallback if the provided fonts can not be\n         *                   used\n         ",
    "links" : [ ]
  }, {
    "name" : "public CustomFallbackBuilder setStyle(@NonNull FontStyle style)",
    "returnType" : "CustomFallbackBuilder",
    "comment" : "\n         * Sets a font style of the Typeface.\n         *\n         * If the font family doesn't have a font of given style, system will select the closest\n         * font from font family. For example, if a font family has fonts of 300 weight and 700\n         * weight then setWeight(400) is called, system will select the font of 300 weight.\n         *\n         * @param style a font style\n         ",
    "links" : [ ]
  }, {
    "name" : "public CustomFallbackBuilder addCustomFallback(@NonNull FontFamily family)",
    "returnType" : "CustomFallbackBuilder",
    "comment" : "\n         * Append a font family to the end of the custom font fallback.\n         *\n         * You can set up to 64 custom fallback families including the first font family you passed\n         * to the constructor.\n         * For more information about fallback, see class description.\n         *\n         * @param family a fallback family\n         * @throws IllegalArgumentException if you give more than 64 custom fallback families\n         ",
    "links" : [ ]
  }, {
    "name" : "public Typeface build()",
    "returnType" : "Typeface",
    "comment" : "\n         * Create the Typeface based on the configured values.\n         *\n         * @return the Typeface object\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getMaxCustomFallbackCount()", "public CustomFallbackBuilder setSystemFallback(@NonNull String familyName)", "public CustomFallbackBuilder setStyle(@NonNull FontStyle style)", "public CustomFallbackBuilder addCustomFallback(@NonNull FontFamily family)", "public Typeface build()" ],
  "variableNames" : [ "MAX_CUSTOM_FALLBACK", "mFamilies", "mFallbackName", "mStyle" ]
}