{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/QosSocketFilter.java",
  "packageName" : "android.net",
  "className" : "QosSocketFilter",
  "comment" : "\n * Filters a {@link QosSession} according to the binding on the provided {@link Socket}.\n *\n * @hide\n ",
  "links" : [ "java.net.Socket", "android.net.QosSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQosSocketInfo",
    "type" : "QosSocketInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public QosSocketInfo getQosSocketInfo()",
    "returnType" : "QosSocketInfo",
    "comment" : "\n     * Gets the parcelable qos socket info that was used to create the filter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int validate()",
    "returnType" : "int",
    "comment" : "\n     * Performs two validations:\n     * 1. If the socket is not bound, then return\n     *    {@link QosCallbackException.EX_TYPE_FILTER_SOCKET_NOT_BOUND}. This is detected\n     *    by checking the local address on the filter which becomes null when the socket is no\n     *    longer bound.\n     * 2. In the scenario that the socket is now bound to a different local address, which can\n     *    happen in the case of UDP, then\n     *    {@link QosCallbackException.EX_TYPE_FILTER_SOCKET_LOCAL_ADDRESS_CHANGED} is returned.\n     * 3. In the scenario that the UDP socket changed remote address, then\n     *    {@link QosCallbackException.EX_TYPE_FILTER_SOCKET_REMOTE_ADDRESS_CHANGED} is returned.\n     *\n     * @return validation error code\n     ",
    "links" : [ "QosCallbackException.EX_TYPE_FILTER_SOCKET_REMOTE_ADDRESS_CHANGED", "QosCallbackException.EX_TYPE_FILTER_SOCKET_LOCAL_ADDRESS_CHANGED", "QosCallbackException.EX_TYPE_FILTER_SOCKET_NOT_BOUND" ]
  }, {
    "name" : "private InetSocketAddress getLocalAddressFromFileDescriptor()",
    "returnType" : "InetSocketAddress",
    "comment" : "\n     * The local address of the socket's binding.\n     *\n     * Note: If the socket is no longer bound, null is returned.\n     *\n     * @return the local address\n     ",
    "links" : [ ]
  }, {
    "name" : "private InetSocketAddress getRemoteAddressFromFileDescriptor()",
    "returnType" : "InetSocketAddress",
    "comment" : "\n     * The remote address of the socket's connected.\n     *\n     * <p>Note: If the socket is no longer connected, null is returned.\n     *\n     * @return the remote address\n     ",
    "links" : [ ]
  }, {
    "name" : "public Network getNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * The network used with this filter.\n     *\n     * @return the registered {@link Network}\n     ",
    "links" : [ "android.net.Network" ]
  }, {
    "name" : "public boolean matchesLocalAddress(@NonNull final InetAddress address, final int startPort, final int endPort)",
    "returnType" : "boolean",
    "comment" : "\n     * @inheritDoc\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesRemoteAddress(@NonNull final InetAddress address, final int startPort, final int endPort)",
    "returnType" : "boolean",
    "comment" : "\n     * @inheritDoc\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesProtocol(final int protocol)",
    "returnType" : "boolean",
    "comment" : "\n     * @inheritDoc\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean matchesAddress(@NonNull final InetSocketAddress filterSocketAddress, @NonNull final InetAddress address, final int startPort, final int endPort)",
    "returnType" : "boolean",
    "comment" : "\n     * Called from {@link QosSocketFilter#matchesLocalAddress(InetAddress, int, int)}\n     * and {@link QosSocketFilter#matchesRemoteAddress(InetAddress, int, int)} with the\n     * filterSocketAddress coming from {@link QosSocketInfo#getLocalSocketAddress()}.\n     * <p>\n     * This method exists for testing purposes since {@link QosSocketInfo} couldn't be mocked\n     * due to being final.\n     *\n     * @param filterSocketAddress the socket address of the filter\n     * @param address the address to compare the filterSocketAddressWith\n     * @param startPort the start of the port range to check\n     * @param endPort the end of the port range to check\n     ",
    "links" : [ "android.net.QosSocketInfo", "android.net.QosSocketFilter#matchesLocalAddress(InetAddress", "android.net.QosSocketFilter#matchesRemoteAddress(InetAddress", "android.net.QosSocketInfo#getLocalSocketAddress()" ]
  } ],
  "methodNames" : [ "public QosSocketInfo getQosSocketInfo()", "public int validate()", "private InetSocketAddress getLocalAddressFromFileDescriptor()", "private InetSocketAddress getRemoteAddressFromFileDescriptor()", "public Network getNetwork()", "public boolean matchesLocalAddress(@NonNull final InetAddress address, final int startPort, final int endPort)", "public boolean matchesRemoteAddress(@NonNull final InetAddress address, final int startPort, final int endPort)", "public boolean matchesProtocol(final int protocol)", "public static boolean matchesAddress(@NonNull final InetSocketAddress filterSocketAddress, @NonNull final InetAddress address, final int startPort, final int endPort)" ],
  "variableNames" : [ "TAG", "mQosSocketInfo" ]
}