{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/Icon.java",
  "packageName" : "android.graphics.drawable",
  "className" : "Icon",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_BITMAP",
    "type" : "int",
    "comment" : "\n     * An icon that was created using {@link Icon#createWithBitmap(Bitmap)}.\n     * @see #getType\n     ",
    "links" : [ "Icon#createWithBitmap" ]
  }, {
    "name" : "TYPE_RESOURCE",
    "type" : "int",
    "comment" : "\n     * An icon that was created using {@link Icon#createWithResource}.\n     * @see #getType\n     ",
    "links" : [ "Icon#createWithResource" ]
  }, {
    "name" : "TYPE_DATA",
    "type" : "int",
    "comment" : "\n     * An icon that was created using {@link Icon#createWithData(byte[], int, int)}.\n     * @see #getType\n     ",
    "links" : [ "Icon#createWithData" ]
  }, {
    "name" : "TYPE_URI",
    "type" : "int",
    "comment" : "\n     * An icon that was created using {@link Icon#createWithContentUri}\n     * or {@link Icon#createWithFilePath(String)}.\n     * @see #getType\n     ",
    "links" : [ "Icon#createWithContentUri", "Icon#createWithFilePath" ]
  }, {
    "name" : "TYPE_ADAPTIVE_BITMAP",
    "type" : "int",
    "comment" : "\n     * An icon that was created using {@link Icon#createWithAdaptiveBitmap}.\n     * @see #getType\n     ",
    "links" : [ "Icon#createWithAdaptiveBitmap" ]
  }, {
    "name" : "TYPE_URI_ADAPTIVE_BITMAP",
    "type" : "int",
    "comment" : "\n     * An icon that was created using {@link Icon#createWithAdaptiveBitmapContentUri}.\n     * @see #getType\n     ",
    "links" : [ "Icon#createWithAdaptiveBitmapContentUri" ]
  }, {
    "name" : "VERSION_STREAM_SERIALIZER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BLEND_MODE",
    "type" : "BlendMode",
    "comment" : " SRC_IN",
    "links" : [ ]
  }, {
    "name" : "mBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObj1",
    "type" : "Object",
    "comment" : " TYPE_DATA: DataBytes",
    "links" : [ ]
  }, {
    "name" : "mString1",
    "type" : "String",
    "comment" : " TYPE_URI_ADAPTIVE_BITMAP: uri string",
    "links" : [ ]
  }, {
    "name" : "mInt1",
    "type" : "int",
    "comment" : " TYPE_DATA: data length",
    "links" : [ ]
  }, {
    "name" : "mInt2",
    "type" : "int",
    "comment" : " TYPE_DATA: data offset",
    "links" : [ ]
  }, {
    "name" : "MIN_ASHMEM_ICON_SIZE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Icon>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of the icon provided.\n     * <p>\n     * Note that new types may be added later, so callers should guard against other\n     * types being returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * @return The {@link android.graphics.Bitmap} held by this {@link #TYPE_BITMAP} or\n     * {@link #TYPE_ADAPTIVE_BITMAP} Icon.\n     * @hide\n     ",
    "links" : [ "android.graphics.Bitmap", "#TYPE_BITMAP", "#TYPE_ADAPTIVE_BITMAP" ]
  }, {
    "name" : "private void setBitmap(Bitmap b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDataLength()",
    "returnType" : "int",
    "comment" : "\n     * @return The length of the compressed bitmap byte array held by this {@link #TYPE_DATA} Icon.\n     * @hide\n     ",
    "links" : [ "#TYPE_DATA" ]
  }, {
    "name" : "public int getDataOffset()",
    "returnType" : "int",
    "comment" : "\n     * @return The offset into the byte array held by this {@link #TYPE_DATA} Icon at which\n     * valid compressed bitmap data is found.\n     * @hide\n     ",
    "links" : [ "#TYPE_DATA" ]
  }, {
    "name" : "public byte[] getDataBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return The byte array held by this {@link #TYPE_DATA} Icon ctonaining compressed\n     * bitmap data.\n     * @hide\n     ",
    "links" : [ "#TYPE_DATA" ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "\n     * @return The {@link android.content.res.Resources} for this {@link #TYPE_RESOURCE} Icon.\n     * @hide\n     ",
    "links" : [ "android.content.res.Resources", "#TYPE_RESOURCE" ]
  }, {
    "name" : "public String getResPackage()",
    "returnType" : "String",
    "comment" : "\n     * Gets the package used to create this icon.\n     * <p>\n     * Only valid for icons of type {@link #TYPE_RESOURCE}.\n     * Note: This package may not be available if referenced in the future, and it is\n     * up to the caller to ensure safety if this package is re-used and/or persisted.\n     ",
    "links" : [ "#TYPE_RESOURCE" ]
  }, {
    "name" : "public int getResId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the resource used to create this icon.\n     * <p>\n     * Only valid for icons of type {@link #TYPE_RESOURCE}.\n     * Note: This resource may not be available if the application changes at all, and it is\n     * up to the caller to ensure safety if this resource is re-used and/or persisted.\n     ",
    "links" : [ "#TYPE_RESOURCE" ]
  }, {
    "name" : "public String getUriString()",
    "returnType" : "String",
    "comment" : "\n     * @return The URI (as a String) for this {@link #TYPE_URI} or {@link #TYPE_URI_ADAPTIVE_BITMAP}\n     * Icon.\n     * @hide\n     ",
    "links" : [ "#TYPE_URI", "#TYPE_URI_ADAPTIVE_BITMAP" ]
  }, {
    "name" : "public Uri getUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Gets the uri used to create this icon.\n     * <p>\n     * Only valid for icons of type {@link #TYPE_URI} and {@link #TYPE_URI_ADAPTIVE_BITMAP}.\n     * Note: This uri may not be available in the future, and it is\n     * up to the caller to ensure safety if this uri is re-used and/or persisted.\n     ",
    "links" : [ "#TYPE_URI", "#TYPE_URI_ADAPTIVE_BITMAP" ]
  }, {
    "name" : "private static final String typeToString(int x)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void loadDrawableAsync(Context context, Message andThen)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link #loadDrawable(Context)} on the given {@link android.os.Handler Handler}\n     * and then sends <code>andThen</code> to the same Handler when finished.\n     *\n     * @param context {@link android.content.Context Context} in which to load the drawable; see\n     *                {@link #loadDrawable(Context)}\n     * @param andThen {@link android.os.Message} to send to its target once the drawable\n     *                is available. The {@link android.os.Message#obj obj}\n     *                property is populated with the Drawable.\n     ",
    "links" : [ "#loadDrawable", "android.os.Handler", "android.content.Context", "#loadDrawable", "android.os.Message", "android.os.Message#obj" ]
  }, {
    "name" : "public void loadDrawableAsync(Context context, final OnDrawableLoadedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link #loadDrawable(Context)} on a background thread and notifies the <code>\n     * {@link OnDrawableLoadedListener#onDrawableLoaded listener} </code> on the {@code handler}\n     * when finished.\n     *\n     * @param context {@link Context Context} in which to load the drawable; see\n     *                {@link #loadDrawable(Context)}\n     * @param listener to be {@link OnDrawableLoadedListener#onDrawableLoaded notified} when\n     *                 {@link #loadDrawable(Context)} finished\n     * @param handler {@link Handler} on which to notify the {@code listener}\n     ",
    "links" : [ "#loadDrawable", "OnDrawableLoadedListener#onDrawableLoaded", "Context", "#loadDrawable", "OnDrawableLoadedListener#onDrawableLoaded", "#loadDrawable", "Handler" ]
  }, {
    "name" : "public Drawable loadDrawable(Context context)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns a Drawable that can be used to draw the image inside this Icon, constructing it\n     * if necessary. Depending on the type of image, this may not be something you want to do on\n     * the UI thread, so consider using\n     * {@link #loadDrawableAsync(Context, Message) loadDrawableAsync} instead.\n     *\n     * @param context {@link android.content.Context Context} in which to load the drawable; used\n     *                to access {@link android.content.res.Resources Resources}, for example.\n     * @return A fresh instance of a drawable for this image, yours to keep.\n     ",
    "links" : [ "#loadDrawableAsync", "android.content.Context", "android.content.res.Resources" ]
  }, {
    "name" : "private Drawable loadDrawableInner(Context context)",
    "returnType" : "Drawable",
    "comment" : "\n     * Do the heavy lifting of loading the drawable, but stop short of applying any tint.\n     ",
    "links" : [ ]
  }, {
    "name" : "private InputStream getUriInputStream(Context context)",
    "returnType" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadDrawableAsUser(Context context, int userId)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load the requested resources under the given userId, if the system allows it,\n     * before actually loading the drawable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void convertToAshmem()",
    "returnType" : "void",
    "comment" : "\n     * Puts the memory used by this instance into Ashmem memory, if possible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToStream(OutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a serialized version of an Icon to the specified stream.\n     *\n     * @param stream The stream on which to serialize the Icon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createFromStream(InputStream stream) throws IOException",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon from the specified stream.\n     *\n     * @param stream The input stream from which to reconstruct the Icon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameAs(Icon otherIcon)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares if this icon is constructed from the same resources as another icon.\n     * Note that this is an inexpensive operation and doesn't do deep Bitmap equality comparisons.\n     *\n     * @param otherIcon the other icon\n     * @return whether this icon is the same as the another one\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithResource(Context context, @DrawableRes int resId)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to a drawable resource.\n     * @param context The context for the application whose resources should be used to resolve the\n     *                given resource ID.\n     * @param resId ID of the drawable resource\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithResource(Resources res, @DrawableRes int resId)",
    "returnType" : "Icon",
    "comment" : "\n     * Version of createWithResource that takes Resources. Do not use.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithResource(String resPackage, @DrawableRes int resId)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to a drawable resource.\n     * @param resPackage Name of the package containing the resource in question\n     * @param resId ID of the drawable resource\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithBitmap(Bitmap bits)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to a bitmap in memory.\n     * @param bits A valid {@link android.graphics.Bitmap} object\n     ",
    "links" : [ "android.graphics.Bitmap" ]
  }, {
    "name" : "public static Icon createWithAdaptiveBitmap(Bitmap bits)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to a bitmap in memory that follows the icon design guideline defined\n     * by {@link AdaptiveIconDrawable}.\n     * @param bits A valid {@link android.graphics.Bitmap} object\n     ",
    "links" : [ "AdaptiveIconDrawable", "android.graphics.Bitmap" ]
  }, {
    "name" : "public static Icon createWithData(byte[] data, int offset, int length)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to a compressed bitmap stored in a byte array.\n     * @param data Byte array storing compressed bitmap data of a type that\n     *             {@link android.graphics.BitmapFactory}\n     *             can decode (see {@link android.graphics.Bitmap.CompressFormat}).\n     * @param offset Offset into <code>data</code> at which the bitmap data starts\n     * @param length Length of the bitmap data\n     ",
    "links" : [ "android.graphics.BitmapFactory", "android.graphics.Bitmap.CompressFormat" ]
  }, {
    "name" : "public static Icon createWithContentUri(String uri)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to an image file specified by URI.\n     *\n     * @param uri A uri referring to local content:// or file:// image data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithContentUri(Uri uri)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to an image file specified by URI.\n     *\n     * @param uri A uri referring to local content:// or file:// image data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithAdaptiveBitmapContentUri(@NonNull String uri)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to an image file specified by URI. Image file should follow the icon\n     * design guideline defined by {@link AdaptiveIconDrawable}.\n     *\n     * @param uri A uri referring to local content:// or file:// image data.\n     ",
    "links" : [ "AdaptiveIconDrawable" ]
  }, {
    "name" : "public static Icon createWithAdaptiveBitmapContentUri(@NonNull Uri uri)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to an image file specified by URI. Image file should follow the icon\n     * design guideline defined by {@link AdaptiveIconDrawable}.\n     *\n     * @param uri A uri referring to local content:// or file:// image data.\n     ",
    "links" : [ "AdaptiveIconDrawable" ]
  }, {
    "name" : "public Icon setTint(@ColorInt int tint)",
    "returnType" : "Icon",
    "comment" : "\n     * Store a color to use whenever this Icon is drawn.\n     *\n     * @param tint a color, as in {@link Drawable#setTint(int)}\n     * @return this same object, for use in chained construction\n     ",
    "links" : [ "Drawable#setTint" ]
  }, {
    "name" : "public Icon setTintList(ColorStateList tintList)",
    "returnType" : "Icon",
    "comment" : "\n     * Store a color to use whenever this Icon is drawn.\n     *\n     * @param tintList as in {@link Drawable#setTintList(ColorStateList)}, null to remove tint\n     * @return this same object, for use in chained construction\n     ",
    "links" : [ "Drawable#setTintList" ]
  }, {
    "name" : "public Icon setTintMode(@NonNull PorterDuff.Mode mode)",
    "returnType" : "Icon",
    "comment" : "\n     * Store a blending mode to use whenever this Icon is drawn.\n     *\n     * @param mode a blending mode, as in {@link Drawable#setTintMode(PorterDuff.Mode)}, may be null\n     * @return this same object, for use in chained construction\n     ",
    "links" : [ "Drawable#setTintMode" ]
  }, {
    "name" : "public Icon setTintBlendMode(@NonNull BlendMode mode)",
    "returnType" : "Icon",
    "comment" : "\n     * Store a blending mode to use whenever this Icon is drawn.\n     *\n     * @param mode a blending mode, as in {@link Drawable#setTintMode(PorterDuff.Mode)}, may be null\n     * @return this same object, for use in chained construction\n     ",
    "links" : [ "Drawable#setTintMode" ]
  }, {
    "name" : "public boolean hasTint()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Icon createWithFilePath(String path)",
    "returnType" : "Icon",
    "comment" : "\n     * Create an Icon pointing to an image file specified by path.\n     *\n     * @param path A path to a file that contains compressed bitmap data of\n     *           a type that {@link android.graphics.BitmapFactory} can decode.\n     ",
    "links" : [ "android.graphics.BitmapFactory" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Parcelable interface\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap scaleDownIfNecessary(Bitmap bitmap, int maxWidth, int maxHeight)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Scale down a bitmap to a given max width and max height. The scaling will be done in a uniform way\n     * @param bitmap the bitmap to scale down\n     * @param maxWidth the maximum width allowed\n     * @param maxHeight the maximum height allowed\n     *\n     * @return the scaled bitmap if necessary or the original bitmap if no scaling was needed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scaleDownIfNecessary(int maxWidth, int maxHeight)",
    "returnType" : "void",
    "comment" : "\n     * Scale down this icon to a given max width and max height.\n     * The scaling will be done in a uniform way and currently only bitmaps are supported.\n     * @param maxWidth the maximum width allowed\n     * @param maxHeight the maximum height allowed\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TYPE_BITMAP", "TYPE_RESOURCE", "TYPE_DATA", "TYPE_URI", "TYPE_ADAPTIVE_BITMAP", "TYPE_URI_ADAPTIVE_BITMAP", "VERSION_STREAM_SERIALIZER", "mType", "mTintList", "DEFAULT_BLEND_MODE", "mBlendMode", "mObj1", "mString1", "mInt1", "mInt2", "MIN_ASHMEM_ICON_SIZE", "CREATOR" ],
  "methodNames" : [ "public int getType()", "public Bitmap getBitmap()", "private void setBitmap(Bitmap b)", "public int getDataLength()", "public int getDataOffset()", "public byte[] getDataBytes()", "public Resources getResources()", "public String getResPackage()", "public int getResId()", "public String getUriString()", "public Uri getUri()", "private static final String typeToString(int x)", "public void loadDrawableAsync(Context context, Message andThen)", "public void loadDrawableAsync(Context context, final OnDrawableLoadedListener listener, Handler handler)", "public Drawable loadDrawable(Context context)", "private Drawable loadDrawableInner(Context context)", "private InputStream getUriInputStream(Context context)", "public Drawable loadDrawableAsUser(Context context, int userId)", "public void convertToAshmem()", "public void writeToStream(OutputStream stream) throws IOException", "public static Icon createFromStream(InputStream stream) throws IOException", "public boolean sameAs(Icon otherIcon)", "public static Icon createWithResource(Context context, @DrawableRes int resId)", "public static Icon createWithResource(Resources res, @DrawableRes int resId)", "public static Icon createWithResource(String resPackage, @DrawableRes int resId)", "public static Icon createWithBitmap(Bitmap bits)", "public static Icon createWithAdaptiveBitmap(Bitmap bits)", "public static Icon createWithData(byte[] data, int offset, int length)", "public static Icon createWithContentUri(String uri)", "public static Icon createWithContentUri(Uri uri)", "public static Icon createWithAdaptiveBitmapContentUri(@NonNull String uri)", "public static Icon createWithAdaptiveBitmapContentUri(@NonNull Uri uri)", "public Icon setTint(@ColorInt int tint)", "public Icon setTintList(ColorStateList tintList)", "public Icon setTintMode(@NonNull PorterDuff.Mode mode)", "public Icon setTintBlendMode(@NonNull BlendMode mode)", "public boolean hasTint()", "public static Icon createWithFilePath(String path)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public static Bitmap scaleDownIfNecessary(Bitmap bitmap, int maxWidth, int maxHeight)", "public void scaleDownIfNecessary(int maxWidth, int maxHeight)" ]
}