{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/contextualsearch/CallbackToken.java",
  "packageName" : "android.app.contextualsearch",
  "className" : "CallbackToken",
  "comment" : "\n * Used to share a single use token with the contextual search handling activity via the launch\n * extras bundle.\n * The caller can then use this token to get {@link ContextualSearchState} by calling\n * {@link #getContextualSearchState}.\n *\n * @hide\n ",
  "links" : [ "android.app.contextualsearch.ContextualSearchState", "#getContextualSearchState" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTokenUsed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<CallbackToken>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void getContextualSearchState(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ContextualSearchState, Throwable> callback)",
    "returnType" : "void",
    "comment" : "\n     * Returns the {@link ContextualSearchState} to the handler via the provided callback. The\n     * method can only be invoked to provide the {@link OutcomeReceiver} once and all subsequent\n     * invocations of this method will result in {@link OutcomeReceiver#onError} being called with\n     * an {@link IllegalAccessException}.\n     *\n     * Note that the callback could be invoked multiple times, e.g. in the case of split screen.\n     *\n     * @param executor The executor which will be used to invoke the callback.\n     * @param callback The callback which will be used to return {@link ContextualSearchState}\n     *                 if/when it is available via {@link OutcomeReceiver#onResult}. It will also be\n     *                 used to return errors via {@link OutcomeReceiver#onError}.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult", "android.app.contextualsearch.ContextualSearchState", "android.os.OutcomeReceiver#onError", "android.os.OutcomeReceiver", "IllegalAccessException" ]
  }, {
    "name" : "private boolean markUsedLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Return the token necessary for validating the caller of {@link #getContextualSearchState}.\n     *\n     * @hide\n     ",
    "links" : [ "#getContextualSearchState" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void getContextualSearchState(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ContextualSearchState, Throwable> callback)", "private boolean markUsedLocked()", "public IBinder getToken()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "DEBUG", "TAG", "mToken", "mLock", "mTokenUsed", "CREATOR" ]
}