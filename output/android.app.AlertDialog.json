{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/AlertDialog.java",
  "packageName" : "android.app",
  "className" : "AlertDialog",
  "comment" : "\n * A subclass of Dialog that can display one, two or three buttons. If you only want to\n * display a String in this dialog box, use the setMessage() method.  If you\n * want to display a more complex view, look up the FrameLayout called \"custom\"\n * and add your view to it:\n *\n * <pre>\n * FrameLayout fl = findViewById(android.R.id.custom);\n * fl.addView(myView, new LayoutParams(MATCH_PARENT, WRAP_CONTENT));\n * </pre>\n *\n * <p>The AlertDialog class takes care of automatically setting\n * {@link android.view.WindowManager.LayoutParams#FLAG_ALT_FOCUSABLE_IM\n * WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM} for you based on whether\n * any views in the dialog return true from {@link View#onCheckIsTextEditor()\n * View.onCheckIsTextEditor()}.  Generally you want this set for a Dialog\n * without text editors, so that it will be placed on top of the current\n * input method UI.  You can modify this behavior by forcing the flag to your\n * desired mode after calling {@link #onCreate}.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating dialogs, read the\n * <a href=\"{@docRoot}guide/topics/ui/dialogs.html\">Dialogs</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "mAlert",
    "type" : "AlertController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THEME_TRADITIONAL",
    "type" : "int",
    "comment" : "\n     * Special theme constant for {@link #AlertDialog(Context, int)}: use\n     * the traditional (pre-Holo) alert dialog theme.\n     *\n     * @deprecated Use {@link android.R.style#Theme_Material_Dialog_Alert}.\n     ",
    "links" : [ "android.R.style#Theme_Material_Dialog_Alert", "#AlertDialog(Context" ]
  }, {
    "name" : "THEME_HOLO_DARK",
    "type" : "int",
    "comment" : "\n     * Special theme constant for {@link #AlertDialog(Context, int)}: use\n     * the holographic alert theme with a dark background.\n     *\n     * @deprecated Use {@link android.R.style#Theme_Material_Dialog_Alert}.\n     ",
    "links" : [ "android.R.style#Theme_Material_Dialog_Alert", "#AlertDialog(Context" ]
  }, {
    "name" : "THEME_HOLO_LIGHT",
    "type" : "int",
    "comment" : "\n     * Special theme constant for {@link #AlertDialog(Context, int)}: use\n     * the holographic alert theme with a light background.\n     *\n     * @deprecated Use {@link android.R.style#Theme_Material_Light_Dialog_Alert}.\n     ",
    "links" : [ "android.R.style#Theme_Material_Light_Dialog_Alert", "#AlertDialog(Context" ]
  }, {
    "name" : "THEME_DEVICE_DEFAULT_DARK",
    "type" : "int",
    "comment" : "\n     * Special theme constant for {@link #AlertDialog(Context, int)}: use\n     * the device's default alert theme with a dark background.\n     *\n     * @deprecated Use {@link android.R.style#Theme_DeviceDefault_Dialog_Alert}.\n     ",
    "links" : [ "android.R.style#Theme_DeviceDefault_Dialog_Alert", "#AlertDialog(Context" ]
  }, {
    "name" : "THEME_DEVICE_DEFAULT_LIGHT",
    "type" : "int",
    "comment" : "\n     * Special theme constant for {@link #AlertDialog(Context, int)}: use\n     * the device's default alert theme with a light background.\n     *\n     * @deprecated Use {@link android.R.style#Theme_DeviceDefault_Light_Dialog_Alert}.\n     ",
    "links" : [ "#AlertDialog(Context", "android.R.style#Theme_DeviceDefault_Light_Dialog_Alert" ]
  }, {
    "name" : "LAYOUT_HINT_NONE",
    "type" : "int",
    "comment" : "\n     * No layout hint.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_HINT_SIDE",
    "type" : "int",
    "comment" : "\n     * Hint layout to the side.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int resolveDialogTheme(Context context, @StyleRes int themeResId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Button getButton(int whichButton)",
    "returnType" : "Button",
    "comment" : "\n     * Gets one of the buttons used in the dialog. Returns null if the specified\n     * button does not exist or the dialog has not yet been fully created (for\n     * example, via {@link #show()} or {@link #create()}).\n     *\n     * @param whichButton The identifier of the button that should be returned.\n     *            For example, this can be\n     *            {@link DialogInterface#BUTTON_POSITIVE}.\n     * @return The button from the dialog, or null if a button does not exist.\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_POSITIVE", "#show()", "#create()" ]
  }, {
    "name" : "public ListView getListView()",
    "returnType" : "ListView",
    "comment" : "\n     * Gets the list view used in the dialog.\n     *\n     * @return The {@link ListView} from the dialog.\n     ",
    "links" : [ "android.widget.ListView" ]
  }, {
    "name" : "public void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCustomTitle(View customTitleView)",
    "returnType" : "void",
    "comment" : "\n     * @see Builder#setCustomTitle(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMessage(CharSequence message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMessageMovementMethod(MovementMethod movementMethod)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setMessageHyphenationFrequency(@Layout.HyphenationFrequency int hyphenationFrequency)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Set the view to display in that dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setView(View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)",
    "returnType" : "void",
    "comment" : "\n     * Set the view to display in that dialog, specifying the spacing to appear around that\n     * view.\n     *\n     * @param view The view to show in the content area of the dialog\n     * @param viewSpacingLeft Extra space to appear to the left of {@code view}\n     * @param viewSpacingTop Extra space to appear above {@code view}\n     * @param viewSpacingRight Extra space to appear to the right of {@code view}\n     * @param viewSpacingBottom Extra space to appear below {@code view}\n     ",
    "links" : [ ]
  }, {
    "name" : " void setButtonPanelLayoutHint(int layoutHint)",
    "returnType" : "void",
    "comment" : "\n     * Internal api to allow hinting for the best button panel layout.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setButton(int whichButton, CharSequence text, Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Set a message to be sent when a button is pressed.\n     *\n     * @param whichButton Which button to set the message for, can be one of\n     *            {@link DialogInterface#BUTTON_POSITIVE},\n     *            {@link DialogInterface#BUTTON_NEGATIVE}, or\n     *            {@link DialogInterface#BUTTON_NEUTRAL}\n     * @param text The text to display in positive button.\n     * @param msg The {@link Message} to be sent when clicked.\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_POSITIVE", "android.content.DialogInterface#BUTTON_NEUTRAL", "android.os.Message", "android.content.DialogInterface#BUTTON_NEGATIVE" ]
  }, {
    "name" : "public void setButton(int whichButton, CharSequence text, OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be invoked when the positive button of the dialog is pressed.\n     *\n     * @param whichButton Which button to set the listener on, can be one of\n     *            {@link DialogInterface#BUTTON_POSITIVE},\n     *            {@link DialogInterface#BUTTON_NEGATIVE}, or\n     *            {@link DialogInterface#BUTTON_NEUTRAL}\n     * @param text The text to display in positive button.\n     * @param listener The {@link DialogInterface.OnClickListener} to use.\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_POSITIVE", "DialogInterface.OnClickListener", "android.content.DialogInterface#BUTTON_NEUTRAL", "android.content.DialogInterface#BUTTON_NEGATIVE" ]
  }, {
    "name" : "public void setButton(CharSequence text, Message msg)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #setButton(int, CharSequence, Message)} with\n     *             {@link DialogInterface#BUTTON_POSITIVE}.\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_POSITIVE", "#setButton(int" ]
  }, {
    "name" : "public void setButton2(CharSequence text, Message msg)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #setButton(int, CharSequence, Message)} with\n     *             {@link DialogInterface#BUTTON_NEGATIVE}.\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_NEGATIVE", "#setButton(int" ]
  }, {
    "name" : "public void setButton3(CharSequence text, Message msg)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #setButton(int, CharSequence, Message)} with\n     *             {@link DialogInterface#BUTTON_NEUTRAL}.\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_NEUTRAL", "#setButton(int" ]
  }, {
    "name" : "public void setButton(CharSequence text, final OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be invoked when button 1 of the dialog is pressed.\n     *\n     * @param text The text to display in button 1.\n     * @param listener The {@link DialogInterface.OnClickListener} to use.\n     * @deprecated Use\n     *             {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}\n     *             with {@link DialogInterface#BUTTON_POSITIVE}\n     ",
    "links" : [ "android.content.DialogInterface#BUTTON_POSITIVE", "DialogInterface.OnClickListener", "#setButton(int" ]
  }, {
    "name" : "public void setButton2(CharSequence text, final OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be invoked when button 2 of the dialog is pressed.\n     * @param text The text to display in button 2.\n     * @param listener The {@link DialogInterface.OnClickListener} to use.\n     * @deprecated Use\n     *             {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}\n     *             with {@link DialogInterface#BUTTON_NEGATIVE}\n     ",
    "links" : [ "DialogInterface.OnClickListener", "android.content.DialogInterface#BUTTON_NEGATIVE", "#setButton(int" ]
  }, {
    "name" : "public void setButton3(CharSequence text, final OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be invoked when button 3 of the dialog is pressed.\n     * @param text The text to display in button 3.\n     * @param listener The {@link DialogInterface.OnClickListener} to use.\n     * @deprecated Use\n     *             {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}\n     *             with {@link DialogInterface#BUTTON_NEUTRAL}\n     ",
    "links" : [ "DialogInterface.OnClickListener", "android.content.DialogInterface#BUTTON_NEUTRAL", "#setButton(int" ]
  }, {
    "name" : "public void setIcon(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set resId to 0 if you don't want an icon.\n     * @param resId the resourceId of the drawable to use as the icon or 0\n     * if you don't want an icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIcon(Drawable icon)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIconAttribute(@AttrRes int attrId)",
    "returnType" : "void",
    "comment" : "\n     * Set an icon as supplied by a theme attribute. e.g. android.R.attr.alertDialogIcon\n     *\n     * @param attrId ID of a theme attribute that points to a drawable resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInverseBackgroundForced(boolean forceInverseBackground)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mAlert", "THEME_TRADITIONAL", "THEME_HOLO_DARK", "THEME_HOLO_LIGHT", "THEME_DEVICE_DEFAULT_DARK", "THEME_DEVICE_DEFAULT_LIGHT", "LAYOUT_HINT_NONE", "LAYOUT_HINT_SIDE" ],
  "methodNames" : [ " static int resolveDialogTheme(Context context, @StyleRes int themeResId)", "public Button getButton(int whichButton)", "public ListView getListView()", "public void setTitle(CharSequence title)", "public void setCustomTitle(View customTitleView)", "public void setMessage(CharSequence message)", "public void setMessageMovementMethod(MovementMethod movementMethod)", "public void setMessageHyphenationFrequency(@Layout.HyphenationFrequency int hyphenationFrequency)", "public void setView(View view)", "public void setView(View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)", " void setButtonPanelLayoutHint(int layoutHint)", "public void setButton(int whichButton, CharSequence text, Message msg)", "public void setButton(int whichButton, CharSequence text, OnClickListener listener)", "public void setButton(CharSequence text, Message msg)", "public void setButton2(CharSequence text, Message msg)", "public void setButton3(CharSequence text, Message msg)", "public void setButton(CharSequence text, final OnClickListener listener)", "public void setButton2(CharSequence text, final OnClickListener listener)", "public void setButton3(CharSequence text, final OnClickListener listener)", "public void setIcon(@DrawableRes int resId)", "public void setIcon(Drawable icon)", "public void setIconAttribute(@AttrRes int attrId)", "public void setInverseBackgroundForced(boolean forceInverseBackground)", "protected void onCreate(Bundle savedInstanceState)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)" ]
}