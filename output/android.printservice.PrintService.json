{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/printservice/PrintService.java",
  "packageName" : "android.printservice",
  "className" : "PrintService",
  "comment" : "\n * <p>\n * This is the base class for implementing print services. A print service knows\n * how to discover and interact one or more printers via one or more protocols.\n * </p>\n * <h3>Printer discovery</h3>\n * <p>\n * A print service is responsible for discovering printers, adding discovered printers,\n * removing added printers, and updating added printers. When the system is interested\n * in printers managed by your service it will call {@link\n * #onCreatePrinterDiscoverySession()} from which you must return a new {@link\n * PrinterDiscoverySession} instance. The returned session encapsulates the interaction\n * between the system and your service during printer discovery. For description of this\n * interaction refer to the documentation for {@link PrinterDiscoverySession}.\n * </p>\n * <p>\n * For every printer discovery session all printers have to be added since system does\n * not retain printers across sessions. Hence, each printer known to this print service\n * should be added only once during a discovery session. Only an already added printer\n * can be removed or updated. Removed printers can be added again.\n * </p>\n * <h3>Print jobs</h3>\n * <p>\n * When a new print job targeted to a printer managed by this print service is is queued,\n * i.e. ready for processing by the print service, you will receive a call to {@link\n * #onPrintJobQueued(PrintJob)}. The print service may handle the print job immediately\n * or schedule that for an appropriate time in the future. The list of all active print\n * jobs for this service is obtained by calling {@link #getActivePrintJobs()}. Active\n * print jobs are ones that are queued or started.\n * </p>\n * <p>\n * A print service is responsible for setting a print job's state as appropriate\n * while processing it. Initially, a print job is queued, i.e. {@link PrintJob#isQueued()\n * PrintJob.isQueued()} returns true, which means that the document to be printed is\n * spooled by the system and the print service can begin processing it. You can obtain\n * the printed document by calling {@link PrintJob#getDocument() PrintJob.getDocument()}\n * whose data is accessed via {@link PrintDocument#getData() PrintDocument.getData()}.\n * After the print service starts printing the data it should set the print job's\n * state to started by calling {@link PrintJob#start()} after which\n * {@link PrintJob#isStarted() PrintJob.isStarted()} would return true. Upon successful\n * completion, the print job should be marked as completed by calling {@link\n * PrintJob#complete() PrintJob.complete()} after which {@link PrintJob#isCompleted()\n * PrintJob.isCompleted()} would return true. In case of a failure, the print job should\n * be marked as failed by calling {@link PrintJob#fail(String) PrintJob.fail(\n * String)} after which {@link PrintJob#isFailed() PrintJob.isFailed()} would\n * return true.\n * </p>\n * <p>\n * If a print job is queued or started and the user requests to cancel it, the print\n * service will receive a call to {@link #onRequestCancelPrintJob(PrintJob)} which\n * requests from the service to do best effort in canceling the job. In case the job\n * is successfully canceled, its state has to be marked as cancelled by calling {@link\n * PrintJob#cancel() PrintJob.cancel()} after which {@link PrintJob#isCancelled()\n * PrintJob.isCacnelled()} would return true.\n * </p>\n * <h3>Lifecycle</h3>\n * <p>\n * The lifecycle of a print service is managed exclusively by the system and follows\n * the established service lifecycle. Additionally, starting or stopping a print service\n * is triggered exclusively by an explicit user action through enabling or disabling it\n * in the device settings. After the system binds to a print service, it calls {@link\n * #onConnected()}. This method can be overriden by clients to perform post binding setup.\n * Also after the system unbinds from a print service, it calls {@link #onDisconnected()}.\n * This method can be overriden by clients to perform post unbinding cleanup. Your should\n * not do any work after the system disconnected from your print service since the\n * service can be killed at any time to reclaim memory. The system will not disconnect\n * from a print service if there are active print jobs for the printers managed by it.\n * </p>\n * <h3>Declaration</h3>\n * <p>\n * A print service is declared as any other service in an AndroidManifest.xml but it must\n * also specify that it handles the {@link android.content.Intent} with action {@link\n * #SERVICE_INTERFACE android.printservice.PrintService}. Failure to declare this intent\n * will cause the system to ignore the print service. Additionally, a print service must\n * request the {@link android.Manifest.permission#BIND_PRINT_SERVICE\n * android.permission.BIND_PRINT_SERVICE} permission to ensure that only the system can\n * bind to it. Failure to declare this intent will cause the system to ignore the print\n * service. Following is an example declaration:\n * </p>\n * <pre>\n * &lt;service android:name=\".MyPrintService\"\n *         android:permission=\"android.permission.BIND_PRINT_SERVICE\"&gt;\n *     &lt;intent-filter&gt;\n *         &lt;action android:name=\"android.printservice.PrintService\" /&gt;\n *     &lt;/intent-filter&gt;\n *     . . .\n * &lt;/service&gt;\n * </pre>\n * <h3>Configuration</h3>\n * <p>\n * A print service can be configured by specifying an optional settings activity which\n * exposes service specific settings, an optional add printers activity which is used for\n * manual addition of printers, vendor name ,etc. It is a responsibility of the system\n * to launch the settings and add printers activities when appropriate.\n * </p>\n * <p>\n * A print service is configured by providing a {@link #SERVICE_META_DATA meta-data}\n * entry in the manifest when declaring the service. A service declaration with a meta-data\n * tag is presented below:\n * <pre> &lt;service android:name=\".MyPrintService\"\n *         android:permission=\"android.permission.BIND_PRINT_SERVICE\"&gt;\n *     &lt;intent-filter&gt;\n *         &lt;action android:name=\"android.printservice.PrintService\" /&gt;\n *     &lt;/intent-filter&gt;\n *     &lt;meta-data android:name=\"android.printservice\" android:resource=\"@xml/printservice\" /&gt;\n * &lt;/service&gt;</pre>\n * </p>\n * <p>\n * For more details for how to configure your print service via the meta-data refer to\n * {@link #SERVICE_META_DATA} and <code>&lt;{@link android.R.styleable#PrintService\n * print-service}&gt;</code>.\n * </p>\n * <p>\n * <strong>Note: </strong> All callbacks in this class are executed on the main\n * application thread. You should also invoke any method of this class on the main\n * application thread.\n * </p>\n ",
  "links" : [ "#onDisconnected()", "#SERVICE_META_DATA", "#SERVICE_INTERFACE", "#onConnected()", "android.printservice.PrintJob#isStarted()", "android.Manifest.permission#BIND_PRINT_SERVICEandroid.permission.BIND_PRINT_SERVICE", "android.printservice.PrintJob#getDocument()", "android.printservice.PrintJob#start()", "android.printservice.PrintJob#complete()", "android.content.Intent", "#onPrintJobQueued(PrintJob)", "#getActivePrintJobs()", "#onCreatePrinterDiscoverySession()", "android.printservice.PrintJob#fail(String)", "android.printservice.PrintJob#isCompleted()", "#onRequestCancelPrintJob(PrintJob)", "android.printservice.PrintJob#isCancelled()", "android.R.styleable#PrintServiceprint", "android.printservice.PrintJob#isQueued()", "android.printservice.PrintDocument#getData()", "android.printservice.PrinterDiscoverySession", "android.printservice.PrintJob#cancel()", "android.printservice.PrintJob#isFailed()" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} action that must be declared as handled by a service\n     * in its manifest for the system to recognize it as a print service.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a {@link PrintService} component publishes additional information\n     * about itself. This meta-data must reference a XML resource containing a <code>\n     * &lt;{@link android.R.styleable#PrintService print-service}&gt;</code> tag. This is\n     * a sample XML file configuring a print service:\n     * <pre> &lt;print-service\n     *     android:vendor=\"SomeVendor\"\n     *     android:settingsActivity=\"foo.bar.MySettingsActivity\"\n     *     android:addPrintersActivity=\"foo.bar.MyAddPrintersActivity.\"\n     *     . . .\n     * /&gt;</pre>\n     * <p>\n     * For detailed configuration options that can be specified via the meta-data\n     * refer to {@link android.R.styleable#PrintService android.R.styleable.PrintService}.\n     * </p>\n     * <p>\n     * If you declare a settings or add a printers activity, they have to be exported,\n     * by setting the {@link android.R.attr#exported} activity attribute to <code>true\n     * </code>. Also in case you want only the system to be able to start any of these\n     * activities you can specify that they request the android.permission\n     * .START_PRINT_SERVICE_CONFIG_ACTIVITY permission by setting the\n     * {@link android.R.attr#permission} activity attribute.\n     * </p>\n     ",
    "links" : [ "android.R.attr#permission", "android.R.styleable#PrintService", "android.R.attr#exported", "android.printservice.PrintService" ]
  }, {
    "name" : "EXTRA_PRINT_JOB_INFO",
    "type" : "String",
    "comment" : "\n     * If you declared an optional activity with advanced print options via the\n     * {@link android.R.attr#advancedPrintOptionsActivity advancedPrintOptionsActivity} attribute,\n     * this extra is used to pass in the currently constructed {@link PrintJobInfo} to your activity\n     * allowing you to modify it. After you are done, you must return the modified\n     * {@link PrintJobInfo} via the same extra.\n     * <p>\n     * You cannot modify the passed in {@link PrintJobInfo} directly, rather you should build\n     * another one using the {@link android.print.PrintJobInfo.Builder PrintJobInfo.Builder} class.\n     * You can specify any standard properties and add advanced, printer specific, ones via\n     * {@link android.print.PrintJobInfo.Builder#putAdvancedOption(String, String)\n     * PrintJobInfo.Builder.putAdvancedOption(String, String)} and\n     * {@link android.print.PrintJobInfo.Builder#putAdvancedOption(String, int)\n     * PrintJobInfo.Builder.putAdvancedOption(String, int)}. The advanced options are not\n     * interpreted by the system, they will not be visible to applications, and can only be accessed\n     * by your print service via {@link PrintJob#getAdvancedStringOption(String)\n     * PrintJob.getAdvancedStringOption(String)} and {@link PrintJob#getAdvancedIntOption(String)\n     * PrintJob.getAdvancedIntOption(String)}.\n     * </p>\n     * <p>\n     * If the advanced print options activity offers changes to the standard print options, you can\n     * get the current {@link android.print.PrinterInfo PrinterInfo} using the\n     * {@link #EXTRA_PRINTER_INFO} extra which will allow you to present the user with UI options\n     * supported by the current printer. For example, if the current printer does not support a\n     * given media size, you should not offer it in the advanced print options UI.\n     * </p>\n     *\n     * @see #EXTRA_PRINTER_INFO\n     ",
    "links" : [ "#EXTRA_PRINTER_INFO", "android.printservice.PrintJob#getAdvancedIntOption(String)", "android.print.PrinterInfo", "android.printservice.PrintJob#getAdvancedStringOption(String)", "android.print.PrintJobInfo.Builder#putAdvancedOption(String", "android.R.attr#advancedPrintOptionsActivity", "android.print.PrintJobInfo", "android.print.PrintJobInfo.Builder" ]
  }, {
    "name" : "EXTRA_PRINTER_INFO",
    "type" : "String",
    "comment" : "\n     * If you declared an optional activity with advanced print options via the\n     * {@link android.R.attr#advancedPrintOptionsActivity advancedPrintOptionsActivity}\n     * attribute, this extra is used to pass in the currently selected printer's\n     * {@link android.print.PrinterInfo} to your activity allowing you to inspect it.\n     *\n     * @see #EXTRA_PRINT_JOB_INFO\n     ",
    "links" : [ "android.print.PrinterInfo", "android.R.attr#advancedPrintOptionsActivity" ]
  }, {
    "name" : "EXTRA_PRINT_DOCUMENT_INFO",
    "type" : "String",
    "comment" : "\n     * If you declared an optional activity with advanced print options via the\n     * {@link android.R.attr#advancedPrintOptionsActivity advancedPrintOptionsActivity}\n     * attribute, this extra is used to pass in the meta-data for the currently printed\n     * document as a {@link android.print.PrintDocumentInfo} to your activity allowing\n     * you to inspect it.\n     *\n     * @see #EXTRA_PRINT_JOB_INFO\n     * @see #EXTRA_PRINTER_INFO\n     ",
    "links" : [ "android.print.PrintDocumentInfo", "android.R.attr#advancedPrintOptionsActivity" ]
  }, {
    "name" : "EXTRA_CAN_SELECT_PRINTER",
    "type" : "String",
    "comment" : "\n     * When the {@link PendingIntent} declared via\n     * {@link PrinterInfo.Builder#setInfoIntent(PendingIntent)} is called this boolean extra\n     * will be filled in if the activity can select the printer.\n     *\n     * @see #EXTRA_SELECT_PRINTER\n     ",
    "links" : [ "PrinterInfo.Builder#setInfoIntent(PendingIntent)", "android.app.PendingIntent" ]
  }, {
    "name" : "EXTRA_SELECT_PRINTER",
    "type" : "String",
    "comment" : "\n     * If this boolean extra is set to {@code true} in the {@link Activity#setResult(int, Intent)\n     * result data} from the activity specified in\n     * {@link PrinterInfo.Builder#setInfoIntent(PendingIntent)} the printer will be selected.\n     *\n     * @see #EXTRA_CAN_SELECT_PRINTER\n     ",
    "links" : [ "PrinterInfo.Builder#setInfoIntent(PendingIntent)", "android.app.Activity#setResult(int" ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IPrintServiceClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDiscoverySession",
    "type" : "PrinterDiscoverySession",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected final void attachBaseContext(Context base)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * The system has connected to this service.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * The system has disconnected from this service.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract PrinterDiscoverySession onCreatePrinterDiscoverySession()",
    "returnType" : "PrinterDiscoverySession",
    "comment" : "\n     * Callback asking you to create a new {@link PrinterDiscoverySession}.\n     *\n     * @return The created session.\n     * @see PrinterDiscoverySession\n     ",
    "links" : [ "android.printservice.PrinterDiscoverySession" ]
  }, {
    "name" : "protected abstract void onRequestCancelPrintJob(PrintJob printJob)",
    "returnType" : "void",
    "comment" : "\n     * Called when cancellation of a print job is requested. The service\n     * should do best effort to fulfill the request. After the cancellation\n     * is performed, the print job should be marked as cancelled state by\n     * calling {@link PrintJob#cancel()}.\n     *\n     * @param printJob The print job to cancel.\n     *\n     * @see PrintJob#cancel() PrintJob.cancel()\n     * @see PrintJob#isCancelled() PrintJob.isCancelled()\n     ",
    "links" : [ "android.printservice.PrintJob#cancel()" ]
  }, {
    "name" : "protected abstract void onPrintJobQueued(PrintJob printJob)",
    "returnType" : "void",
    "comment" : "\n     * Called when there is a queued print job for one of the printers\n     * managed by this print service.\n     *\n     * @param printJob The new queued print job.\n     *\n     * @see PrintJob#isQueued() PrintJob.isQueued()\n     * @see #getActivePrintJobs()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final List<PrintJob> getActivePrintJobs()",
    "returnType" : "List<PrintJob>",
    "comment" : "\n     * Gets the active print jobs for the printers managed by this service.\n     * Active print jobs are ones that are not in a final state, i.e. whose\n     * state is queued or started.\n     *\n     * @return The active print jobs.\n     *\n     * @see PrintJob#isQueued() PrintJob.isQueued()\n     * @see PrintJob#isStarted() PrintJob.isStarted()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final PrinterId generatePrinterId(String localId)",
    "returnType" : "PrinterId",
    "comment" : "\n     * Generates a global printer id given the printer's locally unique one.\n     *\n     * @param localId A locally unique id in the context of your print service.\n     * @return Global printer id.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void throwIfNotCalledOnMainThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected final void attachBaseContext(Context base)", "protected void onConnected()", "protected void onDisconnected()", "protected abstract PrinterDiscoverySession onCreatePrinterDiscoverySession()", "protected abstract void onRequestCancelPrintJob(PrintJob printJob)", "protected abstract void onPrintJobQueued(PrintJob printJob)", "public final List<PrintJob> getActivePrintJobs()", "public final PrinterId generatePrinterId(String localId)", " static void throwIfNotCalledOnMainThread()", "public final IBinder onBind(Intent intent)" ],
  "variableNames" : [ "LOG_TAG", "DEBUG", "SERVICE_INTERFACE", "SERVICE_META_DATA", "EXTRA_PRINT_JOB_INFO", "EXTRA_PRINTER_INFO", "EXTRA_PRINT_DOCUMENT_INFO", "EXTRA_CAN_SELECT_PRINTER", "EXTRA_SELECT_PRINTER", "mHandler", "mClient", "mLastSessionId", "mDiscoverySession" ]
}