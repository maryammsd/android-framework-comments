{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Struct.java",
  "packageName" : "java.sql",
  "className" : "Struct",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String getSQLTypeName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n   * Retrieves the SQL type name of the SQL structured type\n   * that this <code>Struct</code> object represents.\n   *\n   * @return the fully-qualified type name of the SQL structured\n   *          type for which this <code>Struct</code> object\n   *          is the generic representation\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " Object[] getAttributes() throws SQLException",
    "returnType" : "Object[]",
    "comment" : "\n   * Produces the ordered values of the attributes of the SQL\n   * structured type that this <code>Struct</code> object represents.\n   * As individual attributes are processed, this method uses the type map\n   * associated with the\n   * connection for customizations of the type mappings.\n   * If there is no\n   * entry in the connection's type map that matches the structured\n   * type that an attribute represents,\n   * the driver uses the standard mapping.\n   * <p>\n   * Conceptually, this method calls the method\n   * <code>getObject</code> on each attribute\n   * of the structured type and returns a Java array containing\n   * the result.\n   *\n   * @return an array containing the ordered attribute values\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " Object[] getAttributes(java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object[]",
    "comment" : "\n   * Produces the ordered values of the attributes of the SQL\n   * structured type that this <code>Struct</code> object represents.\n   *  As individual attrbutes are proccessed, this method uses the given type map\n   * for customizations of the type mappings.\n   * If there is no\n   * entry in the given type map that matches the structured\n   * type that an attribute represents,\n   * the driver uses the standard mapping. This method never\n   * uses the type map associated with the connection.\n   * <p>\n   * Conceptually, this method calls the method\n   * <code>getObject</code> on each attribute\n   * of the structured type and returns a Java array containing\n   * the result.\n   *\n   * @param map a mapping of SQL type names to Java classes\n   * @return an array containing the ordered attribute values\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getSQLTypeName() throws SQLException", " Object[] getAttributes() throws SQLException", " Object[] getAttributes(java.util.Map<String, Class<?>> map) throws SQLException" ],
  "variableNames" : [ ]
}