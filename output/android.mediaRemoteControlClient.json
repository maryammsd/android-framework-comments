{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/RemoteControlClient.java",
  "packageName" : "android.media",
  "className" : "RemoteControlClient",
  "comment" : "\n * RemoteControlClient enables exposing information meant to be consumed by remote controls\n * capable of displaying metadata, artwork and media transport control buttons.\n *\n * <p>A remote control client object is associated with a media button event receiver. This\n * event receiver must have been previously registered with\n * {@link AudioManager#registerMediaButtonEventReceiver(ComponentName)} before the\n * RemoteControlClient can be registered through\n * {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}.\n *\n * <p>Here is an example of creating a RemoteControlClient instance after registering a media\n * button event receiver:\n * <pre>ComponentName myEventReceiver = new ComponentName(getPackageName(), MyRemoteControlEventReceiver.class.getName());\n * AudioManager myAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\n * myAudioManager.registerMediaButtonEventReceiver(myEventReceiver);\n * // build the PendingIntent for the remote control client\n * Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);\n * mediaButtonIntent.setComponent(myEventReceiver);\n * PendingIntent mediaPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, mediaButtonIntent, 0);\n * // create and register the remote control client\n * RemoteControlClient myRemoteControlClient = new RemoteControlClient(mediaPendingIntent);\n * myAudioManager.registerRemoteControlClient(myRemoteControlClient);</pre>\n *\n * @deprecated Use {@link MediaSession} instead.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_STOPPED",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is stopped.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_PAUSED",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is paused.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_PLAYING",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is playing media.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_FAST_FORWARDING",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is fast forwarding in the media\n     *    it is currently playing.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_REWINDING",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is fast rewinding in the media\n     *    it is currently playing.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_SKIPPING_FORWARDS",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is skipping to the next\n     *    logical chapter (such as a song in a playlist) in the media it is currently playing.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_SKIPPING_BACKWARDS",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is skipping back to the previous\n     *    logical chapter (such as a song in a playlist) in the media it is currently playing.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_BUFFERING",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which is buffering data to play before it can\n     *    start or resume playback.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_ERROR",
    "type" : "int",
    "comment" : "\n     * Playback state of a RemoteControlClient which cannot perform any playback related\n     *    operation because of an internal error. Examples of such situations are no network\n     *    connectivity when attempting to stream data from a server, or expired user credentials\n     *    when trying to play subscription-based content.\n     *\n     * @see #setPlaybackState(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYSTATE_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The value of a playback state when none has been declared.\n     * Intentionally hidden as an application shouldn't set such a playback state value.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_LOCAL",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The default playback type, \"local\", indicating the presentation of the media is happening on\n     * the same device (e.g. a phone, a tablet) as where it is controlled from.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_REMOTE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A playback type indicating the presentation of the media is happening on\n     * a different device (i.e. the remote device) than where it is controlled from.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_VOLUME_FIXED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information indicating the playback volume is fixed, i.e. it cannot be controlled\n     * from this object. An example of fixed playback volume is a remote player, playing over HDMI\n     * where the user prefer to control the volume on the HDMI sink, rather than attenuate at the\n     * source.\n     * @see #PLAYBACKINFO_VOLUME_HANDLING.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_VOLUME_VARIABLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information indicating the playback volume is variable and can be controlled from\n     * this object.\n     * @see #PLAYBACKINFO_VOLUME_HANDLING.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACKINFO_INVALID_VALUE",
    "type" : "int",
    "comment" : "\n     * @hide (to be un-hidden)\n     * The playback information value indicating the value of a given information type is invalid.\n     * @see #PLAYBACKINFO_VOLUME_HANDLING.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_POSITION_INVALID",
    "type" : "long",
    "comment" : "\n     * @hide\n     * An unknown or invalid playback position value.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_POSITION_ALWAYS_UNKNOWN",
    "type" : "long",
    "comment" : "\n     * @hide\n     * An invalid playback position value associated with the use of {@link #setPlaybackState(int)}\n     * used to indicate that playback position will remain unknown.\n     ",
    "links" : [ "#setPlaybackState" ]
  }, {
    "name" : "PLAYBACK_SPEED_1X",
    "type" : "float",
    "comment" : "\n     * @hide\n     * The default playback speed, 1x.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACKINFO_PLAYBACK_TYPE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information that defines the type of playback associated with this\n     * RemoteControlClient. See {@link #PLAYBACK_TYPE_LOCAL} and {@link #PLAYBACK_TYPE_REMOTE}.\n     ",
    "links" : [ "#PLAYBACK_TYPE_LOCAL", "#PLAYBACK_TYPE_REMOTE" ]
  }, {
    "name" : "PLAYBACKINFO_VOLUME",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information that defines at what volume the playback associated with this\n     * RemoteControlClient is performed. This information is only used when the playback type is not\n     * local (see {@link #PLAYBACKINFO_PLAYBACK_TYPE}).\n     ",
    "links" : [ "#PLAYBACKINFO_PLAYBACK_TYPE" ]
  }, {
    "name" : "PLAYBACKINFO_VOLUME_MAX",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information that defines the maximum volume volume value that is supported\n     * by the playback associated with this RemoteControlClient. This information is only used\n     * when the playback type is not local (see {@link #PLAYBACKINFO_PLAYBACK_TYPE}).\n     ",
    "links" : [ "#PLAYBACKINFO_PLAYBACK_TYPE" ]
  }, {
    "name" : "PLAYBACKINFO_VOLUME_HANDLING",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information that defines how volume is handled for the presentation of the media.\n     * @see #PLAYBACK_VOLUME_FIXED\n     * @see #PLAYBACK_VOLUME_VARIABLE\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACKINFO_USES_STREAM",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Playback information that defines over what stream type the media is presented.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_PREVIOUS",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"previous\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_PREVIOUS\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_REWIND",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"rewind\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_REWIND\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_PLAY",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"play\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_PLAY_PAUSE",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"play/pause\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_PAUSE",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"pause\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_PAUSE\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_STOP",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"stop\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_STOP\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_FAST_FORWARD",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"fast forward\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_FAST_FORWARD\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_NEXT",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient makes use of the \"next\" media key.\n     *\n     * @see #setTransportControlFlags(int)\n     * @see android.view.KeyEvent#KEYCODE_MEDIA_NEXT\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_MEDIA_POSITION_UPDATE",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient can receive changes in the media playback position\n     * through the {@link OnPlaybackPositionUpdateListener} interface. This flag must be set\n     * in order for components that display the RemoteControlClient information, to display and\n     * let the user control media playback position.\n     * @see #setTransportControlFlags(int)\n     * @see #setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener)\n     * @see #setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener)\n     ",
    "links" : [ "OnPlaybackPositionUpdateListener" ]
  }, {
    "name" : "FLAG_KEY_MEDIA_RATING",
    "type" : "int",
    "comment" : "\n     * Flag indicating a RemoteControlClient supports ratings.\n     * This flag must be set in order for components that display the RemoteControlClient\n     * information, to display ratings information, and, if ratings are declared editable\n     * (by calling {@link MediaMetadataEditor#addEditableKey(int)} with the\n     * {@link MediaMetadataEditor#RATING_KEY_BY_USER} key), it will enable the user to rate\n     * the media, with values being received through the interface set with\n     * {@link #setMetadataUpdateListener(OnMetadataUpdateListener)}.\n     * @see #setTransportControlFlags(int)\n     ",
    "links" : [ "MediaMetadataEditor#addEditableKey", "MediaMetadataEditor#RATING_KEY_BY_USER", "#setMetadataUpdateListener" ]
  }, {
    "name" : "FLAGS_KEY_MEDIA_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The flags for when no media keys are declared supported.\n     * Intentionally hidden as an application shouldn't set the transport control flags\n     *     to this value.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_INFORMATION_REQUEST_METADATA",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used to signal some type of metadata exposed by the RemoteControlClient is requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_INFORMATION_REQUEST_KEY_MEDIA",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used to signal that the transport control buttons supported by the\n     *     RemoteControlClient are requested.\n     * This can for instance happen when playback is at the end of a playlist, and the \"next\"\n     * operation is not supported anymore.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_INFORMATION_REQUEST_PLAYSTATE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used to signal that the playback state of the RemoteControlClient is requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_INFORMATION_REQUEST_ALBUM_ART",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag used to signal that the album art for the RemoteControlClient is requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "MediaSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIA_POSITION_READABLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag to reflect that the application controlling this RemoteControlClient sends playback\n     * position updates. The playback position being \"readable\" is considered from the application's\n     * point of view.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_POSITION_WRITABLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag to reflect that the application controlling this RemoteControlClient can receive\n     * playback position updates. The playback position being \"writable\"\n     * is considered from the application's point of view.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PLAYBACK_VOLUME_HANDLING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PLAYBACK_VOLUME",
    "type" : "int",
    "comment" : " hard-coded to the same number of steps as AudioService.MAX_STREAM_VOLUME[STREAM_MUSIC]",
    "links" : [ ]
  }, {
    "name" : "mCacheLock",
    "type" : "Object",
    "comment" : "\n     * Lock for all cached data\n     ",
    "links" : [ ]
  }, {
    "name" : "mPlaybackState",
    "type" : "int",
    "comment" : "\n     * Cache for the playback state.\n     * Access synchronized on mCacheLock\n     ",
    "links" : [ ]
  }, {
    "name" : "mPlaybackStateChangeTimeMs",
    "type" : "long",
    "comment" : "\n     * Time of last play state change\n     * Access synchronized on mCacheLock\n     ",
    "links" : [ ]
  }, {
    "name" : "mPlaybackPositionMs",
    "type" : "long",
    "comment" : "\n     * Last playback position in ms reported by the user\n     ",
    "links" : [ ]
  }, {
    "name" : "mPlaybackSpeed",
    "type" : "float",
    "comment" : "\n     * Last playback speed reported by the user\n     ",
    "links" : [ ]
  }, {
    "name" : "mOriginalArtwork",
    "type" : "Bitmap",
    "comment" : "\n     * Cache for the artwork bitmap.\n     * Access synchronized on mCacheLock\n     * Artwork and metadata are not kept in one Bundle because the bitmap sometimes needs to be\n     * accessed to be resized, in which case a copy will be made. This would add overhead in\n     * Bundle operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransportControlFlags",
    "type" : "int",
    "comment" : "\n     * Cache for the transport control mask.\n     * Access synchronized on mCacheLock\n     ",
    "links" : [ ]
  }, {
    "name" : "mMetadata",
    "type" : "Bundle",
    "comment" : "\n     * Cache for the metadata strings.\n     * Access synchronized on mCacheLock\n     * This is re-initialized in apply() and so cannot be final.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPositionUpdateListener",
    "type" : "OnPlaybackPositionUpdateListener",
    "comment" : "\n     * Listener registered by user of RemoteControlClient to receive requests for playback position\n     * update requests.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPositionProvider",
    "type" : "OnGetPlaybackPositionListener",
    "comment" : "\n     * Provider registered by user of RemoteControlClient to provide the current playback position.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMetadataUpdateListener",
    "type" : "OnMetadataUpdateListener",
    "comment" : "\n     * Listener registered by user of RemoteControlClient to receive edit changes to metadata\n     * it exposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentClientGenId",
    "type" : "int",
    "comment" : "\n     * The current remote control client generation ID across the system, as known by this object\n     ",
    "links" : [ ]
  }, {
    "name" : "mRcMediaIntent",
    "type" : "PendingIntent",
    "comment" : "\n     * The media button intent description associated with this remote control client\n     * (can / should include target component for intent handling, used when persisting media\n     *    button event receiver across reboots).\n     ",
    "links" : [ ]
  }, {
    "name" : "mNeedsPositionSync",
    "type" : "boolean",
    "comment" : " TODO consider using a ref count for IRemoteControlDisplay requiring sync instead",
    "links" : [ ]
  }, {
    "name" : "mSessionPlaybackState",
    "type" : "PlaybackState",
    "comment" : "\n     * Cache for the current playback state using Session APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMediaMetadata",
    "type" : "MediaMetadata",
    "comment" : "\n     * Cache for metadata using Session APIs. This is re-initialized in apply().\n     ",
    "links" : [ ]
  }, {
    "name" : "RCSE_ID_UNREGISTERED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Default value for the unique identifier\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransportListener",
    "type" : "MediaSession.Callback",
    "comment" : " USE_SESSIONS",
    "links" : [ ]
  }, {
    "name" : "POSITION_REFRESH_PERIOD_PLAYING_MS",
    "type" : "long",
    "comment" : "\n     * Period for playback position drift checks, 15s when playing at 1x or slower.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_REFRESH_PERIOD_MIN_MS",
    "type" : "long",
    "comment" : "\n     * Minimum period for playback position drift checks, never more often when every 2s, when\n     * fast forwarding or rewinding.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_DRIFT_MAX_MS",
    "type" : "long",
    "comment" : "\n     * The value above which the difference between client-reported playback position and\n     * estimated position is considered a drift.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerWithSession(MediaSessionLegacyHelper helper)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterWithSession(MediaSessionLegacyHelper helper)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaSession getMediaSession()",
    "returnType" : "MediaSession",
    "comment" : "\n     * Get a {@link MediaSession} associated with this RCC. It will only have a\n     * session while it is registered with\n     * {@link AudioManager#registerRemoteControlClient}. The session returned\n     * should not be modified directly by the application but may be used with\n     * other APIs that require a session.\n     *\n     * @return A media session object or null.\n     ",
    "links" : [ "MediaSession", "AudioManager#registerRemoteControlClient" ]
  }, {
    "name" : "public MetadataEditor editMetadata(boolean startEmpty)",
    "returnType" : "MetadataEditor",
    "comment" : "\n     * Creates a {@link MetadataEditor}.\n     * @param startEmpty Set to false if you want the MetadataEditor to contain the metadata that\n     *     was previously applied to the RemoteControlClient, or true if it is to be created empty.\n     * @return a new MetadataEditor instance.\n     ",
    "links" : [ "MetadataEditor" ]
  }, {
    "name" : "public void setPlaybackState(int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current playback state.\n     * @param state The current playback state, one of the following values:\n     *       {@link #PLAYSTATE_STOPPED},\n     *       {@link #PLAYSTATE_PAUSED},\n     *       {@link #PLAYSTATE_PLAYING},\n     *       {@link #PLAYSTATE_FAST_FORWARDING},\n     *       {@link #PLAYSTATE_REWINDING},\n     *       {@link #PLAYSTATE_SKIPPING_FORWARDS},\n     *       {@link #PLAYSTATE_SKIPPING_BACKWARDS},\n     *       {@link #PLAYSTATE_BUFFERING},\n     *       {@link #PLAYSTATE_ERROR}.\n     ",
    "links" : [ "#PLAYSTATE_STOPPED", "#PLAYSTATE_PAUSED", "#PLAYSTATE_PLAYING", "#PLAYSTATE_FAST_FORWARDING", "#PLAYSTATE_REWINDING", "#PLAYSTATE_SKIPPING_FORWARDS", "#PLAYSTATE_SKIPPING_BACKWARDS", "#PLAYSTATE_BUFFERING", "#PLAYSTATE_ERROR" ]
  }, {
    "name" : "public void setPlaybackState(int state, long timeInMs, float playbackSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current playback state and the matching media position for the current playback\n     *   speed.\n     * @param state The current playback state, one of the following values:\n     *       {@link #PLAYSTATE_STOPPED},\n     *       {@link #PLAYSTATE_PAUSED},\n     *       {@link #PLAYSTATE_PLAYING},\n     *       {@link #PLAYSTATE_FAST_FORWARDING},\n     *       {@link #PLAYSTATE_REWINDING},\n     *       {@link #PLAYSTATE_SKIPPING_FORWARDS},\n     *       {@link #PLAYSTATE_SKIPPING_BACKWARDS},\n     *       {@link #PLAYSTATE_BUFFERING},\n     *       {@link #PLAYSTATE_ERROR}.\n     * @param timeInMs a 0 or positive value for the current media position expressed in ms\n     *    (same unit as for when sending the media duration, if applicable, with\n     *    {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} in the\n     *    {@link RemoteControlClient.MetadataEditor}). Negative values imply that position is not\n     *    known (e.g. listening to a live stream of a radio) or not applicable (e.g. when state\n     *    is {@link #PLAYSTATE_BUFFERING} and nothing had played yet).\n     * @param playbackSpeed a value expressed as a ratio of 1x playback: 1.0f is normal playback,\n     *    2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is\n     *    playing (e.g. when state is {@link #PLAYSTATE_ERROR}).\n     ",
    "links" : [ "#PLAYSTATE_STOPPED", "#PLAYSTATE_PAUSED", "#PLAYSTATE_PLAYING", "#PLAYSTATE_FAST_FORWARDING", "#PLAYSTATE_REWINDING", "#PLAYSTATE_SKIPPING_FORWARDS", "#PLAYSTATE_SKIPPING_BACKWARDS", "#PLAYSTATE_BUFFERING", "#PLAYSTATE_ERROR", "android.media.MediaMetadataRetriever#METADATA_KEY_DURATION", "RemoteControlClient.MetadataEditor", "#PLAYSTATE_BUFFERING", "#PLAYSTATE_ERROR" ]
  }, {
    "name" : "private void setPlaybackStateInt(int state, long timeInMs, float playbackSpeed, boolean hasPosition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTransportControlFlags(int transportControlFlags)",
    "returnType" : "void",
    "comment" : "\n     * Sets the flags for the media transport control buttons that this client supports.\n     * @param transportControlFlags A combination of the following flags:\n     *      {@link #FLAG_KEY_MEDIA_PREVIOUS},\n     *      {@link #FLAG_KEY_MEDIA_REWIND},\n     *      {@link #FLAG_KEY_MEDIA_PLAY},\n     *      {@link #FLAG_KEY_MEDIA_PLAY_PAUSE},\n     *      {@link #FLAG_KEY_MEDIA_PAUSE},\n     *      {@link #FLAG_KEY_MEDIA_STOP},\n     *      {@link #FLAG_KEY_MEDIA_FAST_FORWARD},\n     *      {@link #FLAG_KEY_MEDIA_NEXT},\n     *      {@link #FLAG_KEY_MEDIA_POSITION_UPDATE},\n     *      {@link #FLAG_KEY_MEDIA_RATING}.\n     ",
    "links" : [ "#FLAG_KEY_MEDIA_PREVIOUS", "#FLAG_KEY_MEDIA_REWIND", "#FLAG_KEY_MEDIA_PLAY", "#FLAG_KEY_MEDIA_PLAY_PAUSE", "#FLAG_KEY_MEDIA_PAUSE", "#FLAG_KEY_MEDIA_STOP", "#FLAG_KEY_MEDIA_FAST_FORWARD", "#FLAG_KEY_MEDIA_NEXT", "#FLAG_KEY_MEDIA_POSITION_UPDATE", "#FLAG_KEY_MEDIA_RATING" ]
  }, {
    "name" : "public void setMetadataUpdateListener(OnMetadataUpdateListener l)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be called whenever the metadata is updated.\n     * New metadata values will be received in the same thread as the one in which\n     * RemoteControlClient was created.\n     * @param l the metadata update listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener l)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be called whenever the media playback position is requested\n     * to be updated.\n     * Notifications will be received in the same thread as the one in which RemoteControlClient\n     * was created.\n     * @param l the position update listener to be called\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener l)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be called whenever the media current playback position is needed.\n     * Queries will be received in the same thread as the one in which RemoteControlClient\n     * was created.\n     * @param l the listener to be called to retrieve the playback position\n     ",
    "links" : [ ]
  }, {
    "name" : "public PendingIntent getRcMediaIntent()",
    "returnType" : "PendingIntent",
    "comment" : "\n     * @hide\n     * Accessor to media button intent description (includes target component)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onSeekTo(int generationId, long timeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onUpdateMetadata(int generationId, int key, Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean playbackPositionShouldMove(int playstate)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether, for the given playback state, the playback position is expected to\n     * be changing.\n     * @param playstate the playback state to evaluate\n     * @return true during any form of playback, false if it's not playing anything while in this\n     *     playback state\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long getCheckPeriodFromSpeed(float speed)",
    "returnType" : "long",
    "comment" : "\n     * Compute the period at which the estimated playback position should be compared against the\n     * actual playback position. Is a funciton of playback speed.\n     * @param speed 1.0f is normal playback speed\n     * @return the period in ms\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getStateFromRccState(int rccState)",
    "returnType" : "int",
    "comment" : "\n     * Get the {@link PlaybackState} state for the given\n     * {@link RemoteControlClient} state.\n     *\n     * @param rccState The state used by {@link RemoteControlClient}.\n     * @return The equivalent state used by {@link PlaybackState}.\n     ",
    "links" : [ "PlaybackState", "RemoteControlClient", "RemoteControlClient", "PlaybackState" ]
  }, {
    "name" : " static int getRccStateFromState(int state)",
    "returnType" : "int",
    "comment" : "\n     * Get the {@link RemoteControlClient} state for the given\n     * {@link PlaybackState} state.\n     *\n     * @param state The state used by {@link PlaybackState}.\n     * @return The equivalent state used by {@link RemoteControlClient}.\n     ",
    "links" : [ "RemoteControlClient", "PlaybackState", "PlaybackState", "RemoteControlClient" ]
  }, {
    "name" : "private static long getActionsFromRccControlFlags(int rccFlags)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getRccControlFlagsFromActions(long actions)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getActionForRccFlag(int flag)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getRccFlagForAction(long action)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "PLAYSTATE_STOPPED", "PLAYSTATE_PAUSED", "PLAYSTATE_PLAYING", "PLAYSTATE_FAST_FORWARDING", "PLAYSTATE_REWINDING", "PLAYSTATE_SKIPPING_FORWARDS", "PLAYSTATE_SKIPPING_BACKWARDS", "PLAYSTATE_BUFFERING", "PLAYSTATE_ERROR", "PLAYSTATE_NONE", "PLAYBACK_TYPE_LOCAL", "PLAYBACK_TYPE_REMOTE", "PLAYBACK_TYPE_MIN", "PLAYBACK_TYPE_MAX", "PLAYBACK_VOLUME_FIXED", "PLAYBACK_VOLUME_VARIABLE", "PLAYBACKINFO_INVALID_VALUE", "PLAYBACK_POSITION_INVALID", "PLAYBACK_POSITION_ALWAYS_UNKNOWN", "PLAYBACK_SPEED_1X", "PLAYBACKINFO_PLAYBACK_TYPE", "PLAYBACKINFO_VOLUME", "PLAYBACKINFO_VOLUME_MAX", "PLAYBACKINFO_VOLUME_HANDLING", "PLAYBACKINFO_USES_STREAM", "FLAG_KEY_MEDIA_PREVIOUS", "FLAG_KEY_MEDIA_REWIND", "FLAG_KEY_MEDIA_PLAY", "FLAG_KEY_MEDIA_PLAY_PAUSE", "FLAG_KEY_MEDIA_PAUSE", "FLAG_KEY_MEDIA_STOP", "FLAG_KEY_MEDIA_FAST_FORWARD", "FLAG_KEY_MEDIA_NEXT", "FLAG_KEY_MEDIA_POSITION_UPDATE", "FLAG_KEY_MEDIA_RATING", "FLAGS_KEY_MEDIA_NONE", "FLAG_INFORMATION_REQUEST_METADATA", "FLAG_INFORMATION_REQUEST_KEY_MEDIA", "FLAG_INFORMATION_REQUEST_PLAYSTATE", "FLAG_INFORMATION_REQUEST_ALBUM_ART", "mSession", "MEDIA_POSITION_READABLE", "MEDIA_POSITION_WRITABLE", "DEFAULT_PLAYBACK_VOLUME_HANDLING", "DEFAULT_PLAYBACK_VOLUME", "mCacheLock", "mPlaybackState", "mPlaybackStateChangeTimeMs", "mPlaybackPositionMs", "mPlaybackSpeed", "mOriginalArtwork", "mTransportControlFlags", "mMetadata", "mPositionUpdateListener", "mPositionProvider", "mMetadataUpdateListener", "mCurrentClientGenId", "mRcMediaIntent", "mNeedsPositionSync", "mSessionPlaybackState", "mMediaMetadata", "RCSE_ID_UNREGISTERED", "mTransportListener", "POSITION_REFRESH_PERIOD_PLAYING_MS", "POSITION_REFRESH_PERIOD_MIN_MS", "POSITION_DRIFT_MAX_MS" ],
  "methodNames" : [ "public void registerWithSession(MediaSessionLegacyHelper helper)", "public void unregisterWithSession(MediaSessionLegacyHelper helper)", "public MediaSession getMediaSession()", "public MetadataEditor editMetadata(boolean startEmpty)", "public void setPlaybackState(int state)", "public void setPlaybackState(int state, long timeInMs, float playbackSpeed)", "private void setPlaybackStateInt(int state, long timeInMs, float playbackSpeed, boolean hasPosition)", "public void setTransportControlFlags(int transportControlFlags)", "public void setMetadataUpdateListener(OnMetadataUpdateListener l)", "public void setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener l)", "public void setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener l)", "public PendingIntent getRcMediaIntent()", "private void onSeekTo(int generationId, long timeMs)", "private void onUpdateMetadata(int generationId, int key, Object value)", " static boolean playbackPositionShouldMove(int playstate)", "private static long getCheckPeriodFromSpeed(float speed)", "private static int getStateFromRccState(int rccState)", " static int getRccStateFromState(int state)", "private static long getActionsFromRccControlFlags(int rccFlags)", " static int getRccControlFlagsFromActions(long actions)", "private static long getActionForRccFlag(int flag)", "private static int getRccFlagForAction(long action)" ]
}