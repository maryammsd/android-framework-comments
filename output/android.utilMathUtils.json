{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/MathUtils.java",
  "packageName" : "android.util",
  "className" : "MathUtils",
  "comment" : "\n * A class that contains utility methods related to numbers.\n *\n * @hide Pending API council approval\n ",
  "variables" : [ {
    "name" : "DEG_TO_RAD",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAD_TO_DEG",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static float abs(float v)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int constrain(int amount, int low, int high)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long constrain(long amount, long low, long high)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float constrain(float amount, float low, float high)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float log(float a)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float exp(float a)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float pow(float a, float b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float sqrt(float a)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float max(float a, float b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float max(int a, int b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float max(float a, float b, float c)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float max(int a, int b, int c)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float min(float a, float b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float min(int a, int b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float min(float a, float b, float c)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float min(int a, int b, int c)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float dist(float x1, float y1, float x2, float y2)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float dist(float x1, float y1, float z1, float x2, float y2, float z2)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float mag(float a, float b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float mag(float a, float b, float c)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float sq(float v)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float dot(float v1x, float v1y, float v2x, float v2y)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float cross(float v1x, float v1y, float v2x, float v2y)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float radians(float degrees)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float degrees(float radians)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float acos(float value)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float asin(float value)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float atan(float value)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float atan2(float a, float b)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float tan(float angle)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float lerp(float start, float stop, float amount)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float lerpInv(float a, float b, float value)",
    "returnType" : "float",
    "comment" : "\n     * Returns the interpolation scalar (s) that satisfies the equation: {@code value = }{@link\n     * #lerp}{@code (a, b, s)}\n     *\n     * <p>If {@code a == b}, then this function will return 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float saturate(float value)",
    "returnType" : "float",
    "comment" : " Returns the single argument constrained between [0.0, 1.0]. ",
    "links" : [ ]
  }, {
    "name" : "public static float lerpInvSat(float a, float b, float value)",
    "returnType" : "float",
    "comment" : " Returns the saturated (constrained between [0, 1]) result of {@link #lerpInv}. ",
    "links" : [ "#lerpInv" ]
  }, {
    "name" : "public static float lerpDeg(float start, float end, float amount)",
    "returnType" : "float",
    "comment" : "\n     * Returns an interpolated angle in degrees between a set of start and end\n     * angles.\n     * <p>\n     * Unlike {@link #lerp(float, float, float)}, the direction and distance of\n     * travel is determined by the shortest angle between the start and end\n     * angles. For example, if the starting angle is 0 and the ending angle is\n     * 350, then the interpolated angle will be in the range [0,-10] rather\n     * than [0,350].\n     *\n     * @param start the starting angle in degrees\n     * @param end the ending angle in degrees\n     * @param amount the position between start and end in the range [0,1]\n     *               where 0 is the starting angle and 1 is the ending angle\n     * @return the interpolated angle in degrees\n     ",
    "links" : [ "#lerp" ]
  }, {
    "name" : "public static float norm(float start, float stop, float value)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float map(float minStart, float minStop, float maxStart, float maxStop, float value)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float constrainedMap(float rangeMin, float rangeMax, float valueMin, float valueMax, float value)",
    "returnType" : "float",
    "comment" : "\n     * Calculates a value in [rangeMin, rangeMax] that maps value in [valueMin, valueMax] to\n     * returnVal in [rangeMin, rangeMax].\n     * <p>\n     * Always returns a constrained value in the range [rangeMin, rangeMax], even if value is\n     * outside [valueMin, valueMax].\n     * <p>\n     * Eg:\n     *    constrainedMap(0f, 100f, 0f, 1f, 0.5f) = 50f\n     *    constrainedMap(20f, 200f, 10f, 20f, 20f) = 200f\n     *    constrainedMap(20f, 200f, 10f, 20f, 50f) = 200f\n     *    constrainedMap(10f, 50f, 10f, 20f, 5f) = 10f\n     *\n     * @param rangeMin minimum of the range that should be returned.\n     * @param rangeMax maximum of the range that should be returned.\n     * @param valueMin minimum of range to map {@code value} to.\n     * @param valueMax maximum of range to map {@code value} to.\n     * @param value to map to the range [{@code valueMin}, {@code valueMax}]. Note, can be outside\n     *              this range, resulting in a clamped value.\n     * @return the mapped value, constrained to [{@code rangeMin}, {@code rangeMax}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float smoothStep(float start, float end, float x)",
    "returnType" : "float",
    "comment" : "\n     * Perform Hermite interpolation between two values.\n     * Eg:\n     *   smoothStep(0, 0.5f, 0.5f) = 1f\n     *   smoothStep(0, 0.5f, 0.25f) = 0.5f\n     *\n     * @param start Left edge.\n     * @param end Right edge.\n     * @param x A value between {@code start} and {@code end}.\n     * @return A number between 0 and 1 representing where {@code x} is in the interpolation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int addOrThrow(int a, int b) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "\n     * Returns the sum of the two parameters, or throws an exception if the resulting sum would\n     * cause an overflow or underflow.\n     * @throws IllegalArgumentException when overflow or underflow would occur.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void fitRect(Rect outToResize, int largestSide)",
    "returnType" : "void",
    "comment" : "\n     * Resize a {@link Rect} so one size would be {@param largestSide}.\n     *\n     * @param outToResize Rectangle that will be resized.\n     * @param largestSide Size of the largest side.\n     ",
    "links" : [ "Rect" ]
  } ],
  "variableNames" : [ "DEG_TO_RAD", "RAD_TO_DEG" ],
  "methodNames" : [ "public static float abs(float v)", "public static int constrain(int amount, int low, int high)", "public static long constrain(long amount, long low, long high)", "public static float constrain(float amount, float low, float high)", "public static float log(float a)", "public static float exp(float a)", "public static float pow(float a, float b)", "public static float sqrt(float a)", "public static float max(float a, float b)", "public static float max(int a, int b)", "public static float max(float a, float b, float c)", "public static float max(int a, int b, int c)", "public static float min(float a, float b)", "public static float min(int a, int b)", "public static float min(float a, float b, float c)", "public static float min(int a, int b, int c)", "public static float dist(float x1, float y1, float x2, float y2)", "public static float dist(float x1, float y1, float z1, float x2, float y2, float z2)", "public static float mag(float a, float b)", "public static float mag(float a, float b, float c)", "public static float sq(float v)", "public static float dot(float v1x, float v1y, float v2x, float v2y)", "public static float cross(float v1x, float v1y, float v2x, float v2y)", "public static float radians(float degrees)", "public static float degrees(float radians)", "public static float acos(float value)", "public static float asin(float value)", "public static float atan(float value)", "public static float atan2(float a, float b)", "public static float tan(float angle)", "public static float lerp(float start, float stop, float amount)", "public static float lerpInv(float a, float b, float value)", "public static float saturate(float value)", "public static float lerpInvSat(float a, float b, float value)", "public static float lerpDeg(float start, float end, float amount)", "public static float norm(float start, float stop, float value)", "public static float map(float minStart, float minStop, float maxStart, float maxStop, float value)", "public static float constrainedMap(float rangeMin, float rangeMax, float valueMin, float valueMax, float value)", "public static float smoothStep(float start, float end, float x)", "public static int addOrThrow(int a, int b) throws IllegalArgumentException", "public static void fitRect(Rect outToResize, int largestSide)" ]
}