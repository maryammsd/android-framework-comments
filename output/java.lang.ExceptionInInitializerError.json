{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ExceptionInInitializerError.java",
  "packageName" : "java.lang",
  "className" : "ExceptionInInitializerError",
  "comment" : "\n * Signals that an unexpected exception has occurred in a static initializer.\n * An {@code ExceptionInInitializerError} is thrown to indicate that an\n * exception occurred during evaluation of a static initializer or the\n * initializer for a static variable.\n *\n * @author  Frank Yellin\n * @since   1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Use serialVersionUID from JDK 1.1.X for interoperability\n     ",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * Serializable fields for ExceptionInInitializerError.\n     *\n     * @serialField exception Throwable the exception\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Throwable getException()",
    "returnType" : "Throwable",
    "comment" : "\n     * Returns the exception that occurred during a static initialization that\n     * caused this error to be created.\n     *\n     * @apiNote\n     * This method predates the general-purpose exception chaining facility.\n     * The {@link Throwable#getCause()} method is now the preferred means of\n     * obtaining this information.\n     *\n     * @return the saved throwable object of this\n     *         {@code ExceptionInInitializerError}, or {@code null}\n     *         if this {@code ExceptionInInitializerError} has no saved\n     *         throwable object.\n     ",
    "links" : [ "java.lang.Throwable#getCause()" ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes the ExceptionInInitializerError instance from a stream\n     * and initialize the cause properly when deserializing from an older\n     * version.\n     *\n     * The getException and getCause method returns the private \"exception\"\n     * field in the older implementation and ExceptionInInitializerError::cause\n     * was set to null.\n     *\n     * @param  s the {@code ObjectInputStream} from which data is read\n     * @throws IOException if an I/O error occurs\n     * @throws ClassNotFoundException if a serialized class cannot be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * To maintain compatibility with older implementation, write a serial\n     * \"exception\" field with the cause as the value.\n     *\n     * @param  out the {@code ObjectOutputStream} to which data is written\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Throwable getException()", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "private void writeObject(ObjectOutputStream out) throws IOException" ],
  "variableNames" : [ "serialVersionUID", "serialPersistentFields" ]
}