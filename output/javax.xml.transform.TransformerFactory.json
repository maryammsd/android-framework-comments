{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/transform/TransformerFactory.java",
  "packageName" : "javax.xml.transform",
  "className" : "TransformerFactory",
  "comment" : "\n * <p>A TransformerFactory instance can be used to create\n * {@link javax.xml.transform.Transformer} and\n * {@link javax.xml.transform.Templates} objects.</p>\n *\n * <p>The system property that determines which Factory implementation\n * to create is named <code>\"javax.xml.transform.TransformerFactory\"</code>.\n * This property names a concrete subclass of the\n * <code>TransformerFactory</code> abstract class. If the property is not\n * defined, a platform default is be used.</p>\n *\n * @author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n ",
  "links" : [ "javax.xml.transform.Transformer", "javax.xml.transform.Templates" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static TransformerFactory newInstance() throws TransformerFactoryConfigurationError",
    "returnType" : "TransformerFactory",
    "comment" : "\n     * Returns Android's implementation of {@code TransformerFactory}. Unlike\n     * other Java implementations, this method does not consult system\n     * properties, properties files, or the services API.\n     *\n     * @throws TransformerFactoryConfigurationError never. Included for API\n     *     compatibility with other Java implementations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TransformerFactory newInstance(String factoryClassName, ClassLoader classLoader) throws TransformerFactoryConfigurationError",
    "returnType" : "TransformerFactory",
    "comment" : "\n     * Returns an instance of the named implementation of {@code TransformerFactory}.\n     *\n     * @throws TransformerFactoryConfigurationError if {@code factoryClassName} is not available or\n     *     cannot be instantiated.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Transformer newTransformer(Source source) throws TransformerConfigurationException",
    "returnType" : "Transformer",
    "comment" : "\n     * <p>Process the <code>Source</code> into a <code>Transformer</code>\n     * <code>Object</code>.  The <code>Source</code> is an XSLT document that\n     * conforms to <a href=\"http://www.w3.org/TR/xslt\">\n     * XSL Transformations (XSLT) Version 1.0</a>.  Care must\n     * be taken not to use this <code>Transformer</code> in multiple\n     * <code>Thread</code>s running concurrently.\n     * Different <code>TransformerFactories</code> can be used concurrently by\n     * different <code>Thread</code>s.</p>\n     *\n     * @param source <code>Source </code> of XSLT document used to create\n     *   <code>Transformer</code>.\n     *   Examples of XML <code>Source</code>s include\n     *   {@link javax.xml.transform.stream.StreamSource StreamSource},\n     *   {@link javax.xml.transform.sax.SAXSource SAXSource} and\n     *   {@link javax.xml.transform.dom.DOMSource DOMSource}.\n     *\n     * @return A <code>Transformer</code> object that may be used to perform\n     *   a transformation in a single <code>Thread</code>, never\n     *   <code>null</code>.\n     *\n     * @throws TransformerConfigurationException Thrown if there are errors when\n     *    parsing the <code>Source</code> or it is not possible to create a\n     *   <code>Transformer</code> instance.\n     *\n     * @see <a href=\"http://www.w3.org/TR/xslt\">\n     *   XSL Transformations (XSLT) Version 1.0</a>\n     ",
    "links" : [ "javax.xml.transform.dom.DOMSource", "javax.xml.transform.sax.SAXSource", "javax.xml.transform.stream.StreamSource" ]
  }, {
    "name" : "public abstract Transformer newTransformer() throws TransformerConfigurationException",
    "returnType" : "Transformer",
    "comment" : "\n     * <p>Create a new <code>Transformer</code> that performs a copy\n     * of the <code>Source</code> to the <code>Result</code>.\n     * i.e. the \"<em>identity transform</em>\".</p>\n     *\n     * @return A Transformer object that may be used to perform a transformation\n     * in a single thread, never null.\n     *\n     * @exception TransformerConfigurationException Thrown if it is not\n     *   possible to create a <code>Transformer</code> instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Templates newTemplates(Source source) throws TransformerConfigurationException",
    "returnType" : "Templates",
    "comment" : "\n     * Process the Source into a Templates object, which is a\n     * a compiled representation of the source. This Templates object\n     * may then be used concurrently across multiple threads.  Creating\n     * a Templates object allows the TransformerFactory to do detailed\n     * performance optimization of transformation instructions, without\n     * penalizing runtime transformation.\n     *\n     * @param source An object that holds a URL, input stream, etc.\n     *\n     * @return A Templates object capable of being used for transformation\n     * purposes, never null.\n     *\n     * @exception TransformerConfigurationException May throw this during the\n     * parse when it is constructing the Templates object and fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Source getAssociatedStylesheet(Source source, String media, String title, String charset) throws TransformerConfigurationException",
    "returnType" : "Source",
    "comment" : "\n     * <p>Get the stylesheet specification(s) associated with the\n     * XML <code>Source</code> document via the\n     * <a href=\"http://www.w3.org/TR/xml-stylesheet/\">\n     * xml-stylesheet processing instruction</a> that match the given criteria.\n     * Note that it is possible to return several stylesheets, in which case\n     * they are applied as if they were a list of imports or cascades in a\n     * single stylesheet.</p>\n     *\n     * @param source The XML source document.\n     * @param media The media attribute to be matched.  May be null, in which\n     *      case the preferred templates will be used (i.e. alternate = no).\n     * @param title The value of the title attribute to match.  May be null.\n     * @param charset The value of the charset attribute to match.  May be null.\n     *\n     * @return A <code>Source</code> <code>Object</code> suitable for passing\n     *   to the <code>TransformerFactory</code>.\n     *\n     * @throws TransformerConfigurationException An <code>Exception</code>\n     *   is thrown if an error occurs during parsing of the\n     *   <code>source</code>.\n     *\n     * @see <a href=\"http://www.w3.org/TR/xml-stylesheet/\">\n     *   Associating Style Sheets with XML documents Version 1.0</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setURIResolver(URIResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Set an object that is used by default during the transformation\n     * to resolve URIs used in document(), xsl:import, or xsl:include.\n     *\n     * @param resolver An object that implements the URIResolver interface,\n     * or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract URIResolver getURIResolver()",
    "returnType" : "URIResolver",
    "comment" : "\n     * Get the object that is used by default during the transformation\n     * to resolve URIs used in document(), xsl:import, or xsl:include.\n     *\n     * @return The URIResolver that was set with setURIResolver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFeature(String name, boolean value) throws TransformerConfigurationException",
    "returnType" : "void",
    "comment" : "\n     * <p>Set a feature for this <code>TransformerFactory</code> and <code>Transformer</code>s\n     * or <code>Template</code>s created by this factory.</p>\n     *\n     * <p>\n     * Feature names are fully qualified {@link java.net.URI}s.\n     * Implementations may define their own features.\n     * An {@link TransformerConfigurationException} is thrown if this <code>TransformerFactory</code> or the\n     * <code>Transformer</code>s or <code>Template</code>s it creates cannot support the feature.\n     * It is possible for an <code>TransformerFactory</code> to expose a feature value but be unable to change its state.\n     * </p>\n     *\n     * <p>All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.\n     * When the feature is:</p>\n     * <ul>\n     *   <li>\n     *     <code>true</code>: the implementation will limit XML processing to conform to implementation limits\n     *     and behave in a secure fashion as defined by the implementation.\n     *     Examples include resolving user defined style sheets and functions.\n     *     If XML processing is limited for security reasons, it will be reported via a call to the registered\n     *     {@link ErrorListener#fatalError(TransformerException exception)}.\n     *     See {@link  #setErrorListener(ErrorListener listener)}.\n     *   </li>\n     *   <li>\n     *     <code>false</code>: the implementation will processing XML according to the XML specifications without\n     *     regard to possible implementation limits.\n     *   </li>\n     * </ul>\n     *\n     * @param name Feature name.\n     * @param value Is feature state <code>true</code> or <code>false</code>.\n     *\n     * @throws TransformerConfigurationException if this <code>TransformerFactory</code>\n     *   or the <code>Transformer</code>s or <code>Template</code>s it creates cannot support this feature.\n     * @throws NullPointerException If the <code>name</code> parameter is null.\n     ",
    "links" : [ "javax.xml.transform.ErrorListener#fatalError(TransformerException", "#setErrorListener(ErrorListener", "javax.xml.transform.TransformerConfigurationException", "java.net.URI", "javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING" ]
  }, {
    "name" : "public abstract boolean getFeature(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Look up the value of a feature.\n     *\n     * <p>\n     * Feature names are fully qualified {@link java.net.URI}s.\n     * Implementations may define their own features.\n     * <code>false</code> is returned if this <code>TransformerFactory</code> or the\n     * <code>Transformer</code>s or <code>Template</code>s it creates cannot support the feature.\n     * It is possible for an <code>TransformerFactory</code> to expose a feature value but be unable to change its state.\n     * </p>\n     *\n     * @param name Feature name.\n     *\n     * @return The current state of the feature, <code>true</code> or <code>false</code>.\n     *\n     * @throws NullPointerException If the <code>name</code> parameter is null.\n     ",
    "links" : [ "java.net.URI" ]
  }, {
    "name" : "public abstract void setAttribute(String name, Object value)",
    "returnType" : "void",
    "comment" : "\n     * Allows the user to set specific attributes on the underlying\n     * implementation.  An attribute in this context is defined to\n     * be an option that the implementation provides.\n     * An <code>IllegalArgumentException</code> is thrown if the underlying\n     * implementation doesn't recognize the attribute.\n     *\n     * @param name The name of the attribute.\n     * @param value The value of the attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object getAttribute(String name)",
    "returnType" : "Object",
    "comment" : "\n     * Allows the user to retrieve specific attributes on the underlying\n     * implementation.\n     * An <code>IllegalArgumentException</code> is thrown if the underlying\n     * implementation doesn't recognize the attribute.\n     *\n     * @param name The name of the attribute.\n     * @return value The value of the attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setErrorListener(ErrorListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set the error event listener for the TransformerFactory, which\n     * is used for the processing of transformation instructions,\n     * and not for the transformation itself.\n     * An <code>IllegalArgumentException</code> is thrown if the\n     * <code>ErrorListener</code> listener is <code>null</code>.\n     *\n     * @param listener The new error listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ErrorListener getErrorListener()",
    "returnType" : "ErrorListener",
    "comment" : "\n     * Get the error event handler for the TransformerFactory.\n     *\n     * @return The current error handler, which should never be null.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TransformerFactory newInstance() throws TransformerFactoryConfigurationError", "public static TransformerFactory newInstance(String factoryClassName, ClassLoader classLoader) throws TransformerFactoryConfigurationError", "public abstract Transformer newTransformer(Source source) throws TransformerConfigurationException", "public abstract Transformer newTransformer() throws TransformerConfigurationException", "public abstract Templates newTemplates(Source source) throws TransformerConfigurationException", "public abstract Source getAssociatedStylesheet(Source source, String media, String title, String charset) throws TransformerConfigurationException", "public abstract void setURIResolver(URIResolver resolver)", "public abstract URIResolver getURIResolver()", "public abstract void setFeature(String name, boolean value) throws TransformerConfigurationException", "public abstract boolean getFeature(String name)", "public abstract void setAttribute(String name, Object value)", "public abstract Object getAttribute(String name)", "public abstract void setErrorListener(ErrorListener listener)", "public abstract ErrorListener getErrorListener()" ],
  "variableNames" : [ ]
}