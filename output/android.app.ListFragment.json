{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ListFragment.java",
  "packageName" : "android.app",
  "className" : "ListFragment",
  "comment" : "\n * A fragment that displays a list of items by binding to a data source such as\n * an array or Cursor, and exposes event handlers when the user selects an item.\n * <p>\n * ListFragment hosts a {@link android.widget.ListView ListView} object that can\n * be bound to different data sources, typically either an array or a Cursor\n * holding query results. Binding, screen layout, and row layout are discussed\n * in the following sections.\n * <p>\n * <strong>Screen Layout</strong>\n * </p>\n * <p>\n * ListFragment has a default layout that consists of a single list view.\n * However, if you desire, you can customize the fragment layout by returning\n * your own view hierarchy from {@link #onCreateView}.\n * To do this, your view hierarchy <em>must</em> contain a ListView object with the\n * id \"@android:id/list\" (or {@link android.R.id#list} if it's in code)\n * <p>\n * Optionally, your view hierarchy can contain another view object of any type to\n * display when the list view is empty. This \"empty list\" notifier must have an\n * id \"android:empty\". Note that when an empty view is present, the list view\n * will be hidden when there is no data to display.\n * <p>\n * The following code demonstrates an (ugly) custom list layout. It has a list\n * with a green background, and an alternate red \"no data\" message.\n * </p>\n *\n * <pre>\n * &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n * &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *         android:orientation=&quot;vertical&quot;\n *         android:layout_width=&quot;match_parent&quot;\n *         android:layout_height=&quot;match_parent&quot;\n *         android:paddingLeft=&quot;8dp&quot;\n *         android:paddingRight=&quot;8dp&quot;&gt;\n *\n *     &lt;ListView android:id=&quot;@id/android:list&quot;\n *               android:layout_width=&quot;match_parent&quot;\n *               android:layout_height=&quot;match_parent&quot;\n *               android:background=&quot;#00FF00&quot;\n *               android:layout_weight=&quot;1&quot;\n *               android:drawSelectorOnTop=&quot;false&quot;/&gt;\n *\n *     &lt;TextView android:id=&quot;@id/android:empty&quot;\n *               android:layout_width=&quot;match_parent&quot;\n *               android:layout_height=&quot;match_parent&quot;\n *               android:background=&quot;#FF0000&quot;\n *               android:text=&quot;No data&quot;/&gt;\n * &lt;/LinearLayout&gt;\n * </pre>\n *\n * <p>\n * <strong>Row Layout</strong>\n * </p>\n * <p>\n * You can specify the layout of individual rows in the list. You do this by\n * specifying a layout resource in the ListAdapter object hosted by the fragment\n * (the ListAdapter binds the ListView to the data; more on this later).\n * <p>\n * A ListAdapter constructor takes a parameter that specifies a layout resource\n * for each row. It also has two additional parameters that let you specify\n * which data field to associate with which object in the row layout resource.\n * These two parameters are typically parallel arrays.\n * </p>\n * <p>\n * Android provides some standard row layout resources. These are in the\n * {@link android.R.layout} class, and have names such as simple_list_item_1,\n * simple_list_item_2, and two_line_list_item. The following layout XML is the\n * source for the resource two_line_list_item, which displays two data\n * fields,one above the other, for each list row.\n * </p>\n *\n * <pre>\n * &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n * &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *     android:layout_width=&quot;match_parent&quot;\n *     android:layout_height=&quot;wrap_content&quot;\n *     android:orientation=&quot;vertical&quot;&gt;\n *\n *     &lt;TextView android:id=&quot;@+id/text1&quot;\n *         android:textSize=&quot;16sp&quot;\n *         android:textStyle=&quot;bold&quot;\n *         android:layout_width=&quot;match_parent&quot;\n *         android:layout_height=&quot;wrap_content&quot;/&gt;\n *\n *     &lt;TextView android:id=&quot;@+id/text2&quot;\n *         android:textSize=&quot;16sp&quot;\n *         android:layout_width=&quot;match_parent&quot;\n *         android:layout_height=&quot;wrap_content&quot;/&gt;\n * &lt;/LinearLayout&gt;\n * </pre>\n *\n * <p>\n * You must identify the data bound to each TextView object in this layout. The\n * syntax for this is discussed in the next section.\n * </p>\n * <p>\n * <strong>Binding to Data</strong>\n * </p>\n * <p>\n * You bind the ListFragment's ListView object to data using a class that\n * implements the {@link android.widget.ListAdapter ListAdapter} interface.\n * Android provides two standard list adapters:\n * {@link android.widget.SimpleAdapter SimpleAdapter} for static data (Maps),\n * and {@link android.widget.SimpleCursorAdapter SimpleCursorAdapter} for Cursor\n * query results.\n * </p>\n * <p>\n * You <b>must</b> use\n * {@link #setListAdapter(ListAdapter) ListFragment.setListAdapter()} to\n * associate the list with an adapter.  Do not directly call\n * {@link ListView#setAdapter(ListAdapter) ListView.setAdapter()} or else\n * important initialization will be skipped.\n * </p>\n *\n * @see #setListAdapter\n * @see android.widget.ListView\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.fragment.app.ListFragment} for consistent behavior across all devices\n *      and access to <a href=\"{@docRoot}topic/libraries/architecture/lifecycle.html\">Lifecycle</a>.\n ",
  "links" : [ "#setListAdapter(ListAdapter)", "android.widget.SimpleAdapter", "android.widget.ListView#setAdapter(ListAdapter)", "android.widget.ListAdapter", "#onCreateView", "android.R.id#list", "android.R.layout", "androidx.fragment.app.ListFragment", "android.widget.SimpleCursorAdapter", "android.widget.ListView" ],
  "variables" : [ {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestFocus",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnClickListener",
    "type" : "AdapterView.OnItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "ListAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mList",
    "type" : "ListView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEmptyView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStandardEmptyView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressContainer",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListContainer",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEmptyText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListShown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)",
    "returnType" : "View",
    "comment" : "\n     * Provide default implementation to return a simple list view.  Subclasses\n     * can override to replace with their own layout.  If doing so, the\n     * returned view hierarchy <em>must</em> have a ListView whose id\n     * is {@link android.R.id#list android.R.id.list} and can optionally\n     * have a sibling view id {@link android.R.id#empty android.R.id.empty}\n     * that is to be shown when the list is empty.\n     * \n     * <p>If you are overriding this method with your own custom content,\n     * consider including the standard layout {@link android.R.layout#list_content}\n     * in your layout file, so that you continue to retain all of the standard\n     * behavior of ListFragment.  In particular, this is currently the only\n     * way to have the built-in indeterminant progress state be shown.\n     ",
    "links" : [ "android.R.id#empty", "android.R.id#list", "android.R.layout#list_content" ]
  }, {
    "name" : "public void onViewCreated(View view, Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "\n     * Attach to list view once the view hierarchy has been created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroyView()",
    "returnType" : "void",
    "comment" : "\n     * Detach from list view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onListItemClick(ListView l, View v, int position, long id)",
    "returnType" : "void",
    "comment" : "\n     * This method will be called when an item in the list is selected.\n     * Subclasses should override. Subclasses can call\n     * getListView().getItemAtPosition(position) if they need to access the\n     * data associated with the selected item.\n     *\n     * @param l The ListView where the click happened\n     * @param v The view that was clicked within the ListView\n     * @param position The position of the view in the list\n     * @param id The row id of the item that was clicked\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListAdapter(ListAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Provide the cursor for the list view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(int position)",
    "returnType" : "void",
    "comment" : "\n     * Set the currently selected list item to the specified\n     * position with the adapter's data\n     *\n     * @param position\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSelectedItemPosition()",
    "returnType" : "int",
    "comment" : "\n     * Get the position of the currently selected list item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSelectedItemId()",
    "returnType" : "long",
    "comment" : "\n     * Get the cursor row ID of the currently selected list item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListView getListView()",
    "returnType" : "ListView",
    "comment" : "\n     * Get the fragment's list view widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEmptyText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * The default content for a ListFragment has a TextView that can\n     * be shown when the list is empty.  If you would like to have it\n     * shown, call this method to supply the text it should use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListShown(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the list is being displayed.  You can make it not\n     * displayed if you are waiting for the initial data to show in it.  During\n     * this time an indeterminant progress indicator will be shown instead.\n     * \n     * <p>Applications do not normally need to use this themselves.  The default\n     * behavior of ListFragment is to start with the list not being shown, only\n     * showing it once an adapter is given with {@link #setListAdapter(ListAdapter)}.\n     * If the list at that point had not been shown, when it does get shown\n     * it will be do without the user ever seeing the hidden state.\n     * \n     * @param shown If true, the list view is shown; if false, the progress\n     * indicator.  The initial value is true.\n     ",
    "links" : [ "#setListAdapter(ListAdapter)" ]
  }, {
    "name" : "public void setListShownNoAnimation(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #setListShown(boolean)}, but no animation is used when\n     * transitioning from the previous state.\n     ",
    "links" : [ "#setListShown(boolean)" ]
  }, {
    "name" : "private void setListShown(boolean shown, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the list is being displayed.  You can make it not\n     * displayed if you are waiting for the initial data to show in it.  During\n     * this time an indeterminant progress indicator will be shown instead.\n     * \n     * @param shown If true, the list view is shown; if false, the progress\n     * indicator.  The initial value is true.\n     * @param animate If true, an animation will be used to transition to the\n     * new state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListAdapter getListAdapter()",
    "returnType" : "ListAdapter",
    "comment" : "\n     * Get the ListAdapter associated with this fragment's ListView.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", "public void onViewCreated(View view, Bundle savedInstanceState)", "public void onDestroyView()", "public void onListItemClick(ListView l, View v, int position, long id)", "public void setListAdapter(ListAdapter adapter)", "public void setSelection(int position)", "public int getSelectedItemPosition()", "public long getSelectedItemId()", "public ListView getListView()", "public void setEmptyText(CharSequence text)", "public void setListShown(boolean shown)", "public void setListShownNoAnimation(boolean shown)", "private void setListShown(boolean shown, boolean animate)", "public ListAdapter getListAdapter()", "private void ensureList()" ],
  "variableNames" : [ "mHandler", "mRequestFocus", "mOnClickListener", "mAdapter", "mList", "mEmptyView", "mStandardEmptyView", "mProgressContainer", "mListContainer", "mEmptyText", "mListShown" ]
}