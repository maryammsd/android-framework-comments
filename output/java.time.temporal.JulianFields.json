{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/temporal/JulianFields.java",
  "packageName" : "java.time.temporal",
  "className" : "JulianFields",
  "comment" : "\n * A set of date fields that provide access to Julian Days.\n * <p>\n * The Julian Day is a standard way of expressing date and time commonly used in the scientific community.\n * It is expressed as a decimal number of whole days where days start at midday.\n * This class represents variations on Julian Days that count whole days from midnight.\n * <p>\n * The fields are implemented relative to {@link ChronoField#EPOCH_DAY EPOCH_DAY}.\n * The fields are supported, and can be queried and set if {@code EPOCH_DAY} is available.\n * The fields work with all chronologies.\n *\n * @implSpec\n * This is an immutable and thread-safe class.\n *\n * @since 1.8\n ",
  "links" : [ "java.time.temporal.ChronoField#EPOCH_DAY" ],
  "variables" : [ {
    "name" : "JULIAN_DAY_OFFSET",
    "type" : "long",
    "comment" : "\n     * The offset from Julian to EPOCH DAY.\n     ",
    "links" : [ ]
  }, {
    "name" : "JULIAN_DAY",
    "type" : "TemporalField",
    "comment" : "\n     * Julian Day field.\n     * <p>\n     * This is an integer-based version of the Julian Day Number.\n     * Julian Day is a well-known system that represents the count of whole days since day 0,\n     * which is defined to be January 1, 4713 BCE in the Julian calendar, and -4713-11-24 Gregorian.\n     * The field  has \"JulianDay\" as 'name', and 'DAYS' as 'baseUnit'.\n     * The field always refers to the local date-time, ignoring the offset or zone.\n     * <p>\n     * For date-times, 'JULIAN_DAY.getFrom()' assumes the same value from\n     * midnight until just before the next midnight.\n     * When 'JULIAN_DAY.adjustInto()' is applied to a date-time, the time of day portion remains unaltered.\n     * 'JULIAN_DAY.adjustInto()' and 'JULIAN_DAY.getFrom()' only apply to {@code Temporal} objects that\n     * can be converted into {@link ChronoField#EPOCH_DAY}.\n     * An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a Julian Day field.\n     * In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}\n     * the Julian Day value is validated against the range of valid values.\n     * In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.\n     *\n     * <h4>Astronomical and Scientific Notes</h4>\n     * The standard astronomical definition uses a fraction to indicate the time-of-day,\n     * where each day is counted from midday to midday. For example,\n     * a fraction of 0 represents midday, a fraction of 0.25\n     * represents 18:00, a fraction of 0.5 represents midnight and a fraction\n     * of 0.75 represents 06:00.\n     * <p>\n     * By contrast, this implementation has no fractional part, and counts\n     * days from midnight to midnight.\n     * This implementation uses an integer and days starting at midnight.\n     * The integer value for the Julian Day Number is the astronomical Julian Day value at midday\n     * of the date in question.\n     * This amounts to the astronomical Julian Day, rounded to an integer {@code JDN = floor(JD + 0.5)}.\n     *\n     * <pre>\n     *  | ISO date          |  Julian Day Number | Astronomical Julian Day |\n     *  | 1970-01-01T00:00  |         2,440,588  |         2,440,587.5     |\n     *  | 1970-01-01T06:00  |         2,440,588  |         2,440,587.75    |\n     *  | 1970-01-01T12:00  |         2,440,588  |         2,440,588.0     |\n     *  | 1970-01-01T18:00  |         2,440,588  |         2,440,588.25    |\n     *  | 1970-01-02T00:00  |         2,440,589  |         2,440,588.5     |\n     *  | 1970-01-02T06:00  |         2,440,589  |         2,440,588.75    |\n     *  | 1970-01-02T12:00  |         2,440,589  |         2,440,589.0     |\n     * </pre>\n     * <p>\n     * Julian Days are sometimes taken to imply Universal Time or UTC, but this\n     * implementation always uses the Julian Day number for the local date,\n     * regardless of the offset or time-zone.\n     ",
    "links" : [ "java.time.temporal.ChronoField#EPOCH_DAY", "java.time.temporal.UnsupportedTemporalTypeException" ]
  }, {
    "name" : "MODIFIED_JULIAN_DAY",
    "type" : "TemporalField",
    "comment" : "\n     * Modified Julian Day field.\n     * <p>\n     * This is an integer-based version of the Modified Julian Day Number.\n     * Modified Julian Day (MJD) is a well-known system that counts days continuously.\n     * It is defined relative to astronomical Julian Day as  {@code MJD = JD - 2400000.5}.\n     * Each Modified Julian Day runs from midnight to midnight.\n     * The field always refers to the local date-time, ignoring the offset or zone.\n     * <p>\n     * For date-times, 'MODIFIED_JULIAN_DAY.getFrom()' assumes the same value from\n     * midnight until just before the next midnight.\n     * When 'MODIFIED_JULIAN_DAY.adjustInto()' is applied to a date-time, the time of day portion remains unaltered.\n     * 'MODIFIED_JULIAN_DAY.adjustInto()' and 'MODIFIED_JULIAN_DAY.getFrom()' only apply to {@code Temporal} objects\n     * that can be converted into {@link ChronoField#EPOCH_DAY}.\n     * An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.\n     * <p>\n     * This implementation is an integer version of MJD with the decimal part rounded to floor.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a Modified Julian Day field.\n     * In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}\n     * the Modified Julian Day value is validated against the range of valid values.\n     * In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.\n     *\n     * <h4>Astronomical and Scientific Notes</h4>\n     * <pre>\n     *  | ISO date          | Modified Julian Day |      Decimal MJD |\n     *  | 1970-01-01T00:00  |             40,587  |       40,587.0   |\n     *  | 1970-01-01T06:00  |             40,587  |       40,587.25  |\n     *  | 1970-01-01T12:00  |             40,587  |       40,587.5   |\n     *  | 1970-01-01T18:00  |             40,587  |       40,587.75  |\n     *  | 1970-01-02T00:00  |             40,588  |       40,588.0   |\n     *  | 1970-01-02T06:00  |             40,588  |       40,588.25  |\n     *  | 1970-01-02T12:00  |             40,588  |       40,588.5   |\n     * </pre>\n     *\n     * Modified Julian Days are sometimes taken to imply Universal Time or UTC, but this\n     * implementation always uses the Modified Julian Day for the local date,\n     * regardless of the offset or time-zone.\n     ",
    "links" : [ "java.time.temporal.ChronoField#EPOCH_DAY", "java.time.temporal.UnsupportedTemporalTypeException" ]
  }, {
    "name" : "RATA_DIE",
    "type" : "TemporalField",
    "comment" : "\n     * Rata Die field.\n     * <p>\n     * Rata Die counts whole days continuously starting day 1 at midnight at the beginning of 0001-01-01 (ISO).\n     * The field always refers to the local date-time, ignoring the offset or zone.\n     * <p>\n     * For date-times, 'RATA_DIE.getFrom()' assumes the same value from\n     * midnight until just before the next midnight.\n     * When 'RATA_DIE.adjustInto()' is applied to a date-time, the time of day portion remains unaltered.\n     * 'RATA_DIE.adjustInto()' and 'RATA_DIE.getFrom()' only apply to {@code Temporal} objects\n     * that can be converted into {@link ChronoField#EPOCH_DAY}.\n     * An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a Rata Die field.\n     * In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}\n     * the Rata Die value is validated against the range of valid values.\n     * In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.\n     ",
    "links" : [ "java.time.temporal.ChronoField#EPOCH_DAY", "java.time.temporal.UnsupportedTemporalTypeException" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "JULIAN_DAY_OFFSET", "JULIAN_DAY", "MODIFIED_JULIAN_DAY", "RATA_DIE" ]
}