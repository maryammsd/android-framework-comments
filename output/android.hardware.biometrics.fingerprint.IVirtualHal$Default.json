{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/fingerprint/IVirtualHal.java",
  "packageName" : "android.hardware.biometrics.fingerprint",
  "className" : "Default",
  "comment" : " Default implementation for IVirtualHal. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void setEnrollments(int[] id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setEnrollments\n     * \n     * Set the ids of the fingerprints that were currently enrolled in the Virtual HAL,\n     * \n     * @param ids ids can contain 1 or more ids, each must be larger than 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnrollmentHit(int hit_id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setEnrollmentHit\n     * \n     * Set current fingerprint enrollment ids in Fingerprint Virtual HAL,\n     * \n     * @param ids ids can contain 1 or more ids, each must be larger than 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNextEnrollment(android.hardware.biometrics.fingerprint.NextEnrollment next_enrollment) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setNextEnrollment\n     * \n     * Set the next enrollment behavior\n     * \n     * @param next_enrollment specifies enrollment id, progress stages and final result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAuthenticatorId(long id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setAuthenticatorId\n     * \n     * Set authenticator id in virtual HAL, the id is returned in ISession#getAuthenticatorId() call\n     * \n     * @param id authenticator id value, only applied to the sensor with SensorStrength::STRONG.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChallenge(long challenge) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setChallenge\n     * \n     * Set the challenge generated by the virtual HAL, which is returned in\n     * ISessionCallback#onChallengeGenerated()\n     * \n     * @param challenge\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationAuthenticateFails(boolean fail) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationAuthenticateFails\n     * \n     * Set whether to force authentication to fail. If true, the virtual hal will report failure on\n     * authentication attempt until it is set to false\n     * \n     * @param fail  if true, then the next authentication will fail\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationAuthenticateLatency(int[] latencyMs) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationAuthenticateLatency\n     * \n     * Set authentication latency in the virtual hal in a fixed value (single element) or random\n     * values (two elements representing the bound values)\n     * The latency simulates the delay from the time framework requesting HAL to authetication to\n     * the time when HAL is ready to perform authentication operations.\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in array falls in any of\n     * the following conditions\n     *   1. the array contains no element\n     *   2. the array contains more than two elements\n     *   3. the array contains any negative value\n     * The accompanying error message gives more detail\n     * \n     * @param latencyMs[]  value(s) are in milli-seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationAuthenticateDuration(int durationMs) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationAuthenticateDuration\n     * \n     * Set authentication duration covering the HAL authetication from start to end, including\n     * fingerprint capturing, and matching, acquired info reporting. In case a sequence of acquired\n     * info code are specified via setOperationAuthenticateAcquired(), the reporting is evenly\n     * distributed over the duration.\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in value is negative\n     * \n     * @param duration  value is in milli-seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationAuthenticateError(int error) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationAuthenticateError\n     * \n     * Force authentication to error out for non-zero error\n     * Check hardware/interfaces/biometrics/fingerprint/aidl/default/README.md for valid error codes\n     * \n     * @param error if error < 1000\n     *                  non-vendor error\n     *              else\n     *                  vendor error\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationAuthenticateAcquired(android.hardware.biometrics.fingerprint.AcquiredInfoAndVendorCode[] acquired) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationAuthenticateAcquired\n     * \n     * Set one of more acquired info codes for the virtual hal to report during authentication\n     * Check hardware/interfaces/biometrics/fingerprint/aidl/default/README.md for valid acquired\n     * info codes\n     * \n     * @param acquired[], one or more acquired info codes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationEnrollError(int error) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationEnrollError\n     * \n     * Force enrollment operation to error out for non-zero error\n     * Check hardware/interfaces/biometrics/fingerprint/aidl/default/README.md for valid error codes\n     * \n     * @param error if error < 1000\n     *                  non-vendor error\n     *              else\n     *                  vendor error\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationEnrollLatency(int[] latencyMs) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationEnrollLatency\n     * \n     * Set enrollment latency in the virtual hal in a fixed value (single element) or random\n     * values (two elements representing the bound values)\n     * The latency simulates the delay from the time framework requesting HAL to enroll to the\n     * time when HAL is ready to perform enrollment operations.\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in array falls in any of\n     * the following conditions\n     *   1. the array contains no element\n     *   2. the array contains more than two elements\n     *   3. the array contains any negative value\n     * The accompanying error message gives more detail\n     * \n     * @param latencyMs[]  value(s) are in milli-seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationDetectInteractionLatency(int[] latencyMs) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationDetectInteractionLatency\n     * \n     * Set detect interaction latency in the virtual hal in a fixed value (single element) or random\n     * values (two elements representing the bound values)\n     * The latency simulates the delay from the time framework requesting HAL to detect interaction\n     * to the time when HAL is ready to perform detect interaction operations.\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in array falls in any of\n     * the following conditions\n     *   1. the array contains no element\n     *   2. the array contains more than two elements\n     *   3. the array contains any negative value\n     * The accompanying error message gives more detail\n     * \n     * @param latencyMs[]  value(s) are in milli-seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationDetectInteractionError(int error) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationDetectInteractionError\n     * \n     * Force detect interaction operation to error out for non-zero error\n     * Check hardware/interfaces/biometrics/fingerprint/aidl/default/README.md for valid error codes\n     * \n     * @param error if error < 1000\n     *                  non-vendor error\n     *              else\n     *                  vendor error\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationDetectInteractionDuration(int durationMs) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationDetectInteractionDuration\n     * \n     * Set detect interaction duration covering the HAL authetication from start to end, including\n     * fingerprint detect and acquired info reporting. In case a sequence of acquired info code are\n     * specified via setOperationDetectInteractionAcquired(), the reporting is evenly distributed\n     * over the duration.\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in value is negative\n     * \n     * @param duration  value is in milli-seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperationDetectInteractionAcquired(android.hardware.biometrics.fingerprint.AcquiredInfoAndVendorCode[] acquired) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setOperationDetectInteractionAcquired\n     * \n     * Set one of more acquired info codes for the virtual hal to report during detect interaction\n     * Check hardware/interfaces/biometrics/fingerprint/aidl/default/README.md for valid acquired\n     * info codes\n     * \n     * @param acquired[], one or more acquired info codes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLockout(boolean lockout) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setLockout\n     * \n     * Whether to force to lockout on authentcation operation. If true, the virtual hal will report\n     * permanent lockout in processing authentication requrest, regardless of whether\n     * setLockoutEnable(true) is called or not.\n     * \n     * @param lockout, set to true if lockout is desired\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLockoutEnable(boolean enable) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setLockoutEnable\n     * \n     * Whether to enable authentication-fail-based lockout tracking or not. The lock tracking\n     * includes both timed-based (aka temporary) lockout and permanent lockout.\n     * \n     * @param enable, set true to enable the lockout tracking\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLockoutTimedThreshold(int threshold) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setLockoutTimedThreshold\n     * \n     * Set the number of consecutive authentication failures that triggers the timed-based lock to\n     * occur\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in value is negative\n     * \n     * @param threshold, the number of consecutive failures\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLockoutTimedDuration(int durationMs) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setLockoutTimedDuration\n     * \n     * Set the duration to expire timed-based lock during which there is no authentication failure\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in value is negative\n     * \n     * @param duration, in milli-seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLockoutPermanentThreshold(int threshold) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * setLockoutPermanentThreshold\n     * \n     * Set the number of consecutive authentication failures that triggers the permanent lock to\n     * occur\n     * \n     * This method fails with STATUS_INVALID_PARAMETERS if the passed-in value is negative\n     * \n     * @param threshold, the number of consecutive failures\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetConfigurations() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * resetConfigurations\n     * \n     * Reset all virtual hal configurations to default values\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setType(byte type) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * The following functions are used to configure Fingerprint Virtual HAL sensor properties\n     *  refer to SensorProps.aidl and CommonProps.aidl for details of each property\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorId(int id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSensorStrength(byte strength) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMaxEnrollmentPerUser(int max) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSensorLocation(android.hardware.biometrics.fingerprint.SensorLocation loc) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNavigationGuesture(boolean v) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDetectInteraction(boolean v) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayTouch(boolean v) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setControlIllumination(boolean v) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInterfaceVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInterfaceHash()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setEnrollments(int[] id) throws android.os.RemoteException", "public void setEnrollmentHit(int hit_id) throws android.os.RemoteException", "public void setNextEnrollment(android.hardware.biometrics.fingerprint.NextEnrollment next_enrollment) throws android.os.RemoteException", "public void setAuthenticatorId(long id) throws android.os.RemoteException", "public void setChallenge(long challenge) throws android.os.RemoteException", "public void setOperationAuthenticateFails(boolean fail) throws android.os.RemoteException", "public void setOperationAuthenticateLatency(int[] latencyMs) throws android.os.RemoteException", "public void setOperationAuthenticateDuration(int durationMs) throws android.os.RemoteException", "public void setOperationAuthenticateError(int error) throws android.os.RemoteException", "public void setOperationAuthenticateAcquired(android.hardware.biometrics.fingerprint.AcquiredInfoAndVendorCode[] acquired) throws android.os.RemoteException", "public void setOperationEnrollError(int error) throws android.os.RemoteException", "public void setOperationEnrollLatency(int[] latencyMs) throws android.os.RemoteException", "public void setOperationDetectInteractionLatency(int[] latencyMs) throws android.os.RemoteException", "public void setOperationDetectInteractionError(int error) throws android.os.RemoteException", "public void setOperationDetectInteractionDuration(int durationMs) throws android.os.RemoteException", "public void setOperationDetectInteractionAcquired(android.hardware.biometrics.fingerprint.AcquiredInfoAndVendorCode[] acquired) throws android.os.RemoteException", "public void setLockout(boolean lockout) throws android.os.RemoteException", "public void setLockoutEnable(boolean enable) throws android.os.RemoteException", "public void setLockoutTimedThreshold(int threshold) throws android.os.RemoteException", "public void setLockoutTimedDuration(int durationMs) throws android.os.RemoteException", "public void setLockoutPermanentThreshold(int threshold) throws android.os.RemoteException", "public void resetConfigurations() throws android.os.RemoteException", "public void setType(byte type) throws android.os.RemoteException", "public void setSensorId(int id) throws android.os.RemoteException", "public void setSensorStrength(byte strength) throws android.os.RemoteException", "public void setMaxEnrollmentPerUser(int max) throws android.os.RemoteException", "public void setSensorLocation(android.hardware.biometrics.fingerprint.SensorLocation loc) throws android.os.RemoteException", "public void setNavigationGuesture(boolean v) throws android.os.RemoteException", "public void setDetectInteraction(boolean v) throws android.os.RemoteException", "public void setDisplayTouch(boolean v) throws android.os.RemoteException", "public void setControlIllumination(boolean v) throws android.os.RemoteException", "public int getInterfaceVersion()", "public String getInterfaceHash()", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}