{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ScreenRecordingCallbacks.java",
  "packageName" : "android.view",
  "className" : "ScreenRecordingCallbacks",
  "comment" : "\n * This class is responsible for calling app-registered screen recording callbacks. This class\n * registers a single screen recording callback with WindowManagerService and calls the\n * app-registered callbacks whenever that WindowManagerService callback is called.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sInstance",
    "type" : "ScreenRecordingCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "ArrayMap<Consumer<@ScreenRecordingState Integer>, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackNotifier",
    "type" : "IScreenRecordingCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static IWindowManager getWindowManagerService()",
    "returnType" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ScreenRecordingCallbacks getInstance()",
    "returnType" : "ScreenRecordingCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int addCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<@ScreenRecordingState Integer> callback)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeCallback(@NonNull Consumer<@ScreenRecordingState Integer> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyCallbacks(@ScreenRecordingState int state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static IWindowManager getWindowManagerService()", " static ScreenRecordingCallbacks getInstance()", " int addCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<@ScreenRecordingState Integer> callback)", " void removeCallback(@NonNull Consumer<@ScreenRecordingState Integer> callback)", "private void notifyCallbacks(@ScreenRecordingState int state)" ],
  "variableNames" : [ "sInstance", "sLock", "mCallbacks", "mCallbackNotifier", "mState" ]
}