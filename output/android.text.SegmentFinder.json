{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/SegmentFinder.java",
  "packageName" : "android.text",
  "className" : "SegmentFinder",
  "comment" : "\n * Finds text segment boundaries within text. Subclasses can implement different types of text\n * segments. Grapheme clusters and words are examples of possible text segments. These are\n * implemented by {@link GraphemeClusterSegmentFinder} and {@link WordSegmentFinder}.\n *\n * <p>Text segments may not overlap, so every character belongs to at most one text segment. A\n * character may belong to no text segments.\n *\n * <p>For example, WordSegmentFinder subdivides the text \"Hello, World!\" into four text segments:\n * \"Hello\", \",\", \"World\", \"!\". The space character does not belong to any text segments.\n *\n * @see Layout#getRangeForRect(RectF, SegmentFinder, Layout.TextInclusionStrategy)\n ",
  "links" : [ "android.text.WordSegmentFinder", "android.text.GraphemeClusterSegmentFinder" ],
  "variables" : [ {
    "name" : "DONE",
    "type" : "int",
    "comment" : "\n     * Return value of previousStartBoundary(int), previousEndBoundary(int), nextStartBoundary(int),\n     * and nextEndBoundary(int) when there are no boundaries of the specified type in the specified\n     * direction.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int previousStartBoundary(@IntRange(from = 0) int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the character offset of the previous text segment start boundary before the specified\n     * character offset, or {@code DONE} if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int previousEndBoundary(@IntRange(from = 0) int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the character offset of the previous text segment end boundary before the specified\n     * character offset, or {@code DONE} if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int nextStartBoundary(@IntRange(from = 0) int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the character offset of the next text segment start boundary after the specified\n     * character offset, or {@code DONE} if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int nextEndBoundary(@IntRange(from = 0) int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the character offset of the next text segment end boundary after the specified\n     * character offset, or {@code DONE} if there are none.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int previousStartBoundary(@IntRange(from = 0) int offset)", "public abstract int previousEndBoundary(@IntRange(from = 0) int offset)", "public abstract int nextStartBoundary(@IntRange(from = 0) int offset)", "public abstract int nextEndBoundary(@IntRange(from = 0) int offset)" ],
  "variableNames" : [ "DONE" ]
}