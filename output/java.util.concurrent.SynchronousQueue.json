{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/SynchronousQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "SynchronousQueue",
  "comment" : "\n * A {@linkplain BlockingQueue blocking queue} in which each insert\n * operation must wait for a corresponding remove operation by another\n * thread, and vice versa.  A synchronous queue does not have any\n * internal capacity, not even a capacity of one.  You cannot\n * {@code peek} at a synchronous queue because an element is only\n * present when you try to remove it; you cannot insert an element\n * (using any method) unless another thread is trying to remove it;\n * you cannot iterate as there is nothing to iterate.  The\n * <em>head</em> of the queue is the element that the first queued\n * inserting thread is trying to add to the queue; if there is no such\n * queued thread then no element is available for removal and\n * {@code poll()} will return {@code null}.  For purposes of other\n * {@code Collection} methods (for example {@code contains}), a\n * {@code SynchronousQueue} acts as an empty collection.  This queue\n * does not permit {@code null} elements.\n *\n * <p>Synchronous queues are similar to rendezvous channels used in\n * CSP and Ada. They are well suited for handoff designs, in which an\n * object running in one thread must sync up with an object running\n * in another thread in order to hand it some information, event, or\n * task.\n *\n * <p>This class supports an optional fairness policy for ordering\n * waiting producer and consumer threads.  By default, this ordering\n * is not guaranteed. However, a queue constructed with fairness set\n * to {@code true} grants threads access in FIFO order.\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Collection} and {@link Iterator} interfaces.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea and Bill Scherer and Michael Scott\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "java.util.Iterator", "java.util.Collection" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPIN_FOR_TIMEOUT_THRESHOLD",
    "type" : "long",
    "comment" : "\n     * The number of nanoseconds for which it is faster to spin\n     * rather than to use timed park. A rough estimate suffices.\n     ",
    "links" : [ ]
  }, {
    "name" : "transferer",
    "type" : "Transferer<E>",
    "comment" : "\n     * The transferer. Set only in constructor, but cannot be declared\n     * as final without further complicating serialization.  Since\n     * this is accessed only at most once per public method, there\n     * isn't a noticeable performance penalty for using volatile\n     * instead of final here.\n     ",
    "links" : [ ]
  }, {
    "name" : "qlock",
    "type" : "ReentrantLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "waitingProducers",
    "type" : "WaitQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "waitingConsumers",
    "type" : "WaitQueue",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void put(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified element to this queue, waiting if necessary for\n     * another thread to receive it.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue, waiting if necessary\n     * up to the specified wait time for another thread to receive it.\n     *\n     * @return {@code true} if successful, or {@code false} if the\n     *         specified waiting time elapses before a consumer appears\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue, if another thread is\n     * waiting to receive it.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this queue, else\n     *         {@code false}\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, waiting if necessary\n     * for another thread to insert it.\n     *\n     * @return the head of this queue\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, waiting\n     * if necessary up to the specified wait time, for another thread\n     * to insert it.\n     *\n     * @return the head of this queue, or {@code null} if the\n     *         specified waiting time elapses before an element is present\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, if another thread\n     * is currently making an element available.\n     *\n     * @return the head of this queue, or {@code null} if no\n     *         element is available\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Always returns {@code true}.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @return {@code true}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Always returns zero.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @return zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Always returns zero.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @return zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Does nothing.\n     * A {@code SynchronousQueue} has no internal capacity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Always returns {@code false}.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @param o the element\n     * @return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Always returns {@code false}.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @param o the element to remove\n     * @return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code false} unless the given collection is empty.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @param c the collection\n     * @return {@code false} unless given collection is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Always returns {@code false}.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @param c the collection\n     * @return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Always returns {@code false}.\n     * A {@code SynchronousQueue} has no internal capacity.\n     *\n     * @param c the collection\n     * @return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "\n     * Always returns {@code null}.\n     * A {@code SynchronousQueue} does not return elements\n     * unless actively waited on.\n     *\n     * @return {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an empty iterator in which {@code hasNext} always returns\n     * {@code false}.\n     *\n     * @return an empty iterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns an empty spliterator in which calls to\n     * {@link Spliterator#trySplit() trySplit} always return {@code null}.\n     *\n     * @return an empty spliterator\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#trySplit()" ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns a zero-length array.\n     * @return a zero-length array\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Sets the zeroth element of the specified array to {@code null}\n     * (if the array has non-zero length) and returns it.\n     *\n     * @param a the array\n     * @return the specified array\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Always returns {@code \"[]\"}.\n     * @return {@code \"[]\"}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this queue to a stream (that is, serializes it).\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this queue from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void put(E e) throws InterruptedException", "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException", "public boolean offer(E e)", "public E take() throws InterruptedException", "public E poll(long timeout, TimeUnit unit) throws InterruptedException", "public E poll()", "public boolean isEmpty()", "public int size()", "public int remainingCapacity()", "public void clear()", "public boolean contains(Object o)", "public boolean remove(Object o)", "public boolean containsAll(Collection<?> c)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "public E peek()", "public Iterator<E> iterator()", "public Spliterator<E> spliterator()", "public Object[] toArray()", "public T[] toArray(T[] a)", "public String toString()", "public int drainTo(Collection<? super E> c)", "public int drainTo(Collection<? super E> c, int maxElements)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "SPIN_FOR_TIMEOUT_THRESHOLD", "transferer", "qlock", "waitingProducers", "waitingConsumers" ]
}