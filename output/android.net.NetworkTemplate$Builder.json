{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkTemplate.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : "\n     * Builder class for NetworkTemplate.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mMatchRule",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchSubscriberIds",
    "type" : "SortedSet<String>",
    "comment" : " Use a SortedSet to provide a deterministic order when fetching the first one.",
    "links" : [ ]
  }, {
    "name" : "mMatchWifiNetworkKeys",
    "type" : "SortedSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetered",
    "type" : "int",
    "comment" : " Matches for the NetworkStats constants METERED_*, ROAMING_* and DEFAULT_NETWORK_*.",
    "links" : [ ]
  }, {
    "name" : "mRoaming",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNetwork",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRatType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOemManaged",
    "type" : "int",
    "comment" : " Bitfield containing OEM network properties {@code NetworkIdentity#OEM_*}.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSubscriberIds(@NonNull Set<String> subscriberIds)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Subscriber Ids. Calling this function with an empty set represents\n         * the intention of matching any Subscriber Ids.\n         *\n         * @param subscriberIds the list of Subscriber Ids.\n         * @return this builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setWifiNetworkKeys(@NonNull Set<String> wifiNetworkKeys)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Wifi Network Keys. Calling this function with an empty set represents\n         * the intention of matching any Wifi Network Key.\n         *\n         * @param wifiNetworkKeys the list of Wifi Network Key,\n         *                        see {@link WifiInfo#getNetworkKey()}.\n         *                        Or an empty list to match all networks.\n         *                        Note that {@code getNetworkKey()} might get null key\n         *                        when wifi disconnects. However, the caller should never invoke\n         *                        this function with a null Wifi Network Key since such statistics\n         *                        never exists.\n         * @return this builder.\n         ",
    "links" : [ "android.net.wifi.WifiInfo#getNetworkKey()" ]
  }, {
    "name" : "public Builder setMeteredness(@NetworkStats.Meteredness int metered)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the meteredness filter.\n         *\n         * @param metered the meteredness filter.\n         * @return this builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRoaming(@NetworkStats.Roaming int roaming)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the roaming filter.\n         *\n         * @param roaming the roaming filter.\n         * @return this builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDefaultNetworkStatus(@NetworkStats.DefaultNetwork int defaultNetwork)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the default network status filter.\n         *\n         * @param defaultNetwork the default network status filter.\n         * @return this builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRatType(int ratType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Radio Access Technology(RAT) type filter.\n         *\n         * @param ratType the Radio Access Technology(RAT) type filter. Use\n         *                {@link #NETWORK_TYPE_ALL} to include all network types when filtering.\n         *                See {@code TelephonyManager.NETWORK_TYPE_*}.\n         * @return this builder.\n         ",
    "links" : [ "#NETWORK_TYPE_ALL" ]
  }, {
    "name" : "public Builder setOemManaged(@OemManaged int oemManaged)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the OEM managed filter.\n         *\n         * @param oemManaged the match rule to match different type of OEM managed network or\n         *                   unmanaged networks. See {@code OEM_MANAGED_*}.\n         * @return this builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void assertRequestableMatchRule(final int matchRule)",
    "returnType" : "void",
    "comment" : "\n         * Check whether the match rule is requestable.\n         *\n         * @param matchRule the target match rule to be checked.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void assertRequestableParameters()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateWifiNetworkKeys()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkTemplate build()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n         * Builds the instance of the NetworkTemplate.\n         *\n         * @return the built instance of NetworkTemplate.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setSubscriberIds(@NonNull Set<String> subscriberIds)", "public Builder setWifiNetworkKeys(@NonNull Set<String> wifiNetworkKeys)", "public Builder setMeteredness(@NetworkStats.Meteredness int metered)", "public Builder setRoaming(@NetworkStats.Roaming int roaming)", "public Builder setDefaultNetworkStatus(@NetworkStats.DefaultNetwork int defaultNetwork)", "public Builder setRatType(int ratType)", "public Builder setOemManaged(@OemManaged int oemManaged)", "private static void assertRequestableMatchRule(final int matchRule)", "private void assertRequestableParameters()", "private void validateWifiNetworkKeys()", "public NetworkTemplate build()" ],
  "variableNames" : [ "mMatchRule", "mMatchSubscriberIds", "mMatchWifiNetworkKeys", "mMetered", "mRoaming", "mDefaultNetwork", "mRatType", "mOemManaged" ]
}