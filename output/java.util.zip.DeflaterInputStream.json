{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/DeflaterInputStream.java",
  "packageName" : "java.util.zip",
  "className" : "DeflaterInputStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "def",
    "type" : "Deflater",
    "comment" : " Compressor for this stream. ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : " Input buffer for reading compressed data. ",
    "links" : [ ]
  }, {
    "name" : "rbuf",
    "type" : "byte[]",
    "comment" : " Temporary read buffer. ",
    "links" : [ ]
  }, {
    "name" : "usesDefaultDeflater",
    "type" : "boolean",
    "comment" : " Default compressor is used. ",
    "links" : [ ]
  }, {
    "name" : "reachEOF",
    "type" : "boolean",
    "comment" : " End of the underlying input stream has been reached. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check to make sure that this stream has not been closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and its underlying input stream, discarding\n     * any pending uncompressed data.\n     *\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single byte of compressed data from the input stream.\n     * This method will block until some input can be read and compressed.\n     *\n     * @return a single byte of compressed data, or -1 if the end of the\n     * uncompressed input stream is reached\n     * @throws IOException if an I/O error occurs or if this stream is\n     * already closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads compressed data into a byte array.\n     * This method will block until some input can be read and compressed.\n     *\n     * @param b buffer into which the data is read\n     * @param off starting offset of the data within {@code b}\n     * @param len maximum number of compressed bytes to read into {@code b}\n     * @return the actual number of bytes read, or -1 if the end of the\n     * uncompressed input stream is reached\n     * @throws IndexOutOfBoundsException  if {@code len > b.length - off}\n     * @throws IOException if an I/O error occurs or if this input stream is\n     * already closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips over and discards data from the input stream.\n     * This method may block until the specified number of bytes are read and\n     * skipped. <em>Note:</em> While {@code n} is given as a {@code long},\n     * the maximum number of bytes which can be skipped is\n     * {@code Integer.MAX_VALUE}.\n     *\n     * @param n number of bytes to be skipped\n     * @return the actual number of bytes skipped\n     * @throws IOException if an I/O error occurs or if this stream is\n     * already closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns 0 after EOF has been reached, otherwise always return 1.\n     * <p>\n     * Programs should not count on this method to return the actual number\n     * of bytes that could be read without blocking\n     * @return zero after the end of the underlying input stream has been\n     * reached, otherwise always returns 1\n     * @throws IOException if an I/O error occurs or if this stream is\n     * already closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Always returns {@code false} because this input stream does not support\n     * the {@link #mark mark()} and {@link #reset reset()} methods.\n     *\n     * @return false, always\n     ",
    "links" : [ "#mark", "#reset" ]
  }, {
    "name" : "public void mark(int limit)",
    "returnType" : "void",
    "comment" : "\n     * <i>This operation is not supported</i>.\n     *\n     * @param limit maximum bytes that can be read before invalidating the position marker\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * <i>This operation is not supported</i>.\n     *\n     * @throws IOException always thrown\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public void close() throws IOException", "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public int available() throws IOException", "public boolean markSupported()", "public void mark(int limit)", "public void reset() throws IOException" ],
  "variableNames" : [ "def", "buf", "rbuf", "usesDefaultDeflater", "reachEOF" ]
}