{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/NativeActivity.java",
  "packageName" : "android.app",
  "className" : "NativeActivity",
  "comment" : "\n * Convenience for implementing an activity that will be implemented\n * purely in native code.  That is, a game (or game-like thing).  There\n * is no need to derive from this class; you can simply declare it in your\n * manifest, and use the NDK APIs from there.\n *\n * <p>A <a href=\"https://github.com/googlesamples/android-ndk/tree/master/native-activity\">sample\n * native activity</a> is available in the NDK samples.\n ",
  "variables" : [ {
    "name" : "META_DATA_LIB_NAME",
    "type" : "String",
    "comment" : "\n     * Optional meta-that can be in the manifest for this component, specifying\n     * the name of the native shared library to load.  If not specified,\n     * \"main\" is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "META_DATA_FUNC_NAME",
    "type" : "String",
    "comment" : "\n     * Optional meta-that can be in the manifest for this component, specifying\n     * the name of the main entry point for this native activity in the\n     * {@link #META_DATA_LIB_NAME} native code.  If not specified,\n     * \"ANativeActivity_onCreate\" is used.\n     ",
    "links" : [ "#META_DATA_LIB_NAME" ]
  }, {
    "name" : "KEY_NATIVE_SAVED_STATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContentView",
    "type" : "NativeContentView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIMM",
    "type" : "InputMethodManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurInputQueue",
    "type" : "InputQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurSurfaceHolder",
    "type" : "SurfaceHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocation",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastContentX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastContentY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastContentWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastContentHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchingUnhandledKey",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native long loadNativeCode(String path, String funcname, MessageQueue queue, String internalDataPath, String obbPath, String externalDataPath, int sdkVersion, AssetManager assetMgr, byte[] savedState, ClassLoader classLoader, String libraryPath)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native String getDlError()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void unloadNativeCode(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onStartNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onResumeNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native byte[] onSaveInstanceStateNative(long handle)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onPauseNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onStopNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onConfigurationChangedNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onLowMemoryNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onWindowFocusChangedNative(long handle, boolean focused)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onSurfaceCreatedNative(long handle, Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onSurfaceChangedNative(long handle, Surface surface, int format, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onSurfaceRedrawNeededNative(long handle, Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onSurfaceDestroyedNative(long handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onInputQueueCreatedNative(long handle, long queuePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onInputQueueDestroyedNative(long handle, long queuePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void onContentRectChangedNative(long handle, int x, int y, int w, int h)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getAbsolutePath(File file)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onPause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onResume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSaveInstanceState(Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLowMemory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void surfaceCreated(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void surfaceChanged(SurfaceHolder holder, int format, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void surfaceRedrawNeeded(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void surfaceDestroyed(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInputQueueCreated(InputQueue queue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInputQueueDestroyed(InputQueue queue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onGlobalLayout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setWindowFlags(int flags, int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setWindowFormat(int format)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void showIme(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hideIme(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "META_DATA_LIB_NAME", "META_DATA_FUNC_NAME", "KEY_NATIVE_SAVED_STATE", "mNativeContentView", "mIMM", "mNativeHandle", "mCurInputQueue", "mCurSurfaceHolder", "mLocation", "mLastContentX", "mLastContentY", "mLastContentWidth", "mLastContentHeight", "mDispatchingUnhandledKey", "mDestroyed" ],
  "methodNames" : [ "private native long loadNativeCode(String path, String funcname, MessageQueue queue, String internalDataPath, String obbPath, String externalDataPath, int sdkVersion, AssetManager assetMgr, byte[] savedState, ClassLoader classLoader, String libraryPath)", "private native String getDlError()", "private native void unloadNativeCode(long handle)", "private native void onStartNative(long handle)", "private native void onResumeNative(long handle)", "private native byte[] onSaveInstanceStateNative(long handle)", "private native void onPauseNative(long handle)", "private native void onStopNative(long handle)", "private native void onConfigurationChangedNative(long handle)", "private native void onLowMemoryNative(long handle)", "private native void onWindowFocusChangedNative(long handle, boolean focused)", "private native void onSurfaceCreatedNative(long handle, Surface surface)", "private native void onSurfaceChangedNative(long handle, Surface surface, int format, int width, int height)", "private native void onSurfaceRedrawNeededNative(long handle, Surface surface)", "private native void onSurfaceDestroyedNative(long handle)", "private native void onInputQueueCreatedNative(long handle, long queuePtr)", "private native void onInputQueueDestroyedNative(long handle, long queuePtr)", "private native void onContentRectChangedNative(long handle, int x, int y, int w, int h)", "protected void onCreate(Bundle savedInstanceState)", "private static String getAbsolutePath(File file)", "protected void onDestroy()", "protected void onPause()", "protected void onResume()", "protected void onSaveInstanceState(Bundle outState)", "protected void onStart()", "protected void onStop()", "public void onConfigurationChanged(Configuration newConfig)", "public void onLowMemory()", "public void onWindowFocusChanged(boolean hasFocus)", "public void surfaceCreated(SurfaceHolder holder)", "public void surfaceChanged(SurfaceHolder holder, int format, int width, int height)", "public void surfaceRedrawNeeded(SurfaceHolder holder)", "public void surfaceDestroyed(SurfaceHolder holder)", "public void onInputQueueCreated(InputQueue queue)", "public void onInputQueueDestroyed(InputQueue queue)", "public void onGlobalLayout()", " void setWindowFlags(int flags, int mask)", " void setWindowFormat(int format)", " void showIme(int mode)", " void hideIme(int mode)" ]
}