{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/SaveInfo.java",
  "packageName" : "android.service.autofill",
  "className" : "Builder",
  "comment" : "\n     * A builder for {@link SaveInfo} objects.\n     ",
  "links" : [ "android.service.autofill.SaveInfo" ],
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeButtonStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositiveButtonStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeActionListener",
    "type" : "IntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiredIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptionalIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomDescription",
    "type" : "CustomDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValidator",
    "type" : "InternalValidator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSanitizers",
    "type" : "ArrayMap<InternalSanitizer, AutofillId[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSanitizerIds",
    "type" : "ArraySet<AutofillId>",
    "comment" : " Set used to validate against duplicate ids.",
    "links" : [ ]
  }, {
    "name" : "mTriggerId",
    "type" : "AutofillId",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setFlags(@SaveInfoFlags int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets flags changing the save behavior.\n         *\n         * @param flags {@link #FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE},\n         * {@link #FLAG_DONT_SAVE_ON_FINISH}, {@link #FLAG_DELAY_SAVE}, or {@code 0}.\n         * @return This builder.\n         ",
    "links" : [ "#FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE", "#FLAG_DONT_SAVE_ON_FINISH", "#FLAG_DELAY_SAVE" ]
  }, {
    "name" : "public Builder setOptionalIds(@NonNull AutofillId[] ids)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the ids of additional, optional views the service would be interested to save.\n         *\n         * <p>See {@link SaveInfo} for more info.\n         *\n         * @param ids The ids of the optional views.\n         * @return This builder.\n         *\n         * @throws IllegalArgumentException if {@code ids} is {@code null} or empty, or if\n         * it contains any {@code null} entry.\n         ",
    "links" : [ "android.service.autofill.SaveInfo" ]
  }, {
    "name" : "public Builder setDescription(@Nullable CharSequence description)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an optional description to be shown in the UI when the user is asked to save.\n         *\n         * <p>Typically, it describes how the data will be stored by the service, so it can help\n         * users to decide whether they can trust the service to save their data.\n         *\n         * @param description a succint description.\n         * @return This Builder.\n         *\n         * @throws IllegalStateException if this call was made after calling\n         * {@link #setCustomDescription(CustomDescription)}.\n         ",
    "links" : [ "#setCustomDescription(CustomDescription)" ]
  }, {
    "name" : "public Builder setCustomDescription(@NonNull CustomDescription customDescription)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a custom description to be shown in the UI when the user is asked to save.\n         *\n         * <p>Typically used when the service must show more info about the object being saved,\n         * like a credit card logo, masked number, and expiration date.\n         *\n         * @param customDescription the custom description.\n         * @return This Builder.\n         *\n         * @throws IllegalStateException if this call was made after calling\n         * {@link #setDescription(CharSequence)}.\n         ",
    "links" : [ "#setDescription(CharSequence)" ]
  }, {
    "name" : "public Builder setNegativeAction(@NegativeButtonStyle int style, @Nullable IntentSender listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the style and listener for the negative save action.\n         *\n         * <p>This allows an autofill service to customize the style and be\n         * notified when the user selects the negative action in the save\n         * UI. Note that selecting the negative action regardless of its style\n         * and listener being customized would dismiss the save UI and if a\n         * custom listener intent is provided then this intent is\n         * started. The default style is {@link #NEGATIVE_BUTTON_STYLE_CANCEL}</p>\n         *\n         * @param style The action style.\n         * @param listener The action listener.\n         * @return This builder.\n         *\n         * @see #NEGATIVE_BUTTON_STYLE_CANCEL\n         * @see #NEGATIVE_BUTTON_STYLE_REJECT\n         * @see #NEGATIVE_BUTTON_STYLE_NEVER\n         *\n         * @throws IllegalArgumentException If the style is invalid\n         ",
    "links" : [ "#NEGATIVE_BUTTON_STYLE_CANCEL" ]
  }, {
    "name" : "public Builder setPositiveAction(@PositiveButtonStyle int style)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the style for the positive save action.\n         *\n         * <p>This allows an autofill service to customize the style of the\n         * positive action in the save UI. Note that selecting the positive\n         * action regardless of its style would dismiss the save UI and calling\n         * into the {@link AutofillService#onSaveRequest(SaveRequest, SaveCallback) save request}.\n         * The service should take the next action if selecting style\n         * {@link #POSITIVE_BUTTON_STYLE_CONTINUE}. The default style is\n         * {@link #POSITIVE_BUTTON_STYLE_SAVE}\n         *\n         * @param style The action style.\n         * @return This builder.\n         *\n         * @see #POSITIVE_BUTTON_STYLE_SAVE\n         * @see #POSITIVE_BUTTON_STYLE_CONTINUE\n         *\n         * @throws IllegalArgumentException If the style is invalid\n         ",
    "links" : [ "#POSITIVE_BUTTON_STYLE_CONTINUE", "android.service.autofill.AutofillService#onSaveRequest(SaveRequest", "#POSITIVE_BUTTON_STYLE_SAVE" ]
  }, {
    "name" : "public Builder setValidator(@NonNull Validator validator)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an object used to validate the user input - if the input is not valid, the\n         * autofill save UI is not shown.\n         *\n         * <p>Typically used to validate credit card numbers. Examples:\n         *\n         * <p>Validator for a credit number that must have exactly 16 digits:\n         *\n         * <pre class=\"prettyprint\">\n         * Validator validator = new RegexValidator(ccNumberId, Pattern.compile(\"\"^\\\\d{16}$\"))\n         * </pre>\n         *\n         * <p>Validator for a credit number that must pass a Luhn checksum and either have\n         * 16 digits, or 15 digits starting with 108:\n         *\n         * <pre class=\"prettyprint\">\n         * import static android.service.autofill.Validators.and;\n         * import static android.service.autofill.Validators.or;\n         *\n         * Validator validator =\n         *   and(\n         *     new LuhnChecksumValidator(ccNumberId),\n         *     or(\n         *       new RegexValidator(ccNumberId, Pattern.compile(\"^\\\\d{16}$\")),\n         *       new RegexValidator(ccNumberId, Pattern.compile(\"^108\\\\d{12}$\"))\n         *     )\n         *   );\n         * </pre>\n         *\n         * <p><b>Note:</b> the example above is just for illustrative purposes; the same validator\n         * could be created using a single regex for the {@code OR} part:\n         *\n         * <pre class=\"prettyprint\">\n         * Validator validator =\n         *   and(\n         *     new LuhnChecksumValidator(ccNumberId),\n         *     new RegexValidator(ccNumberId, Pattern.compile(\"\"^(\\\\d{16}|108\\\\d{12})$\"))\n         *   );\n         * </pre>\n         *\n         * <p>Validator for a credit number contained in just 4 fields and that must have exactly\n         * 4 digits on each field:\n         *\n         * <pre class=\"prettyprint\">\n         * import static android.service.autofill.Validators.and;\n         *\n         * Validator validator =\n         *   and(\n         *     new RegexValidator(ccNumberId1, Pattern.compile(\"^\\\\d{4}$\")),\n         *     new RegexValidator(ccNumberId2, Pattern.compile(\"^\\\\d{4}$\")),\n         *     new RegexValidator(ccNumberId3, Pattern.compile(\"^\\\\d{4}$\")),\n         *     new RegexValidator(ccNumberId4, Pattern.compile(\"^\\\\d{4}$\"))\n         *   );\n         * </pre>\n         *\n         * @param validator an implementation provided by the Android System.\n         * @return this builder.\n         *\n         * @throws IllegalArgumentException if {@code validator} is not a class provided\n         * by the Android System.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addSanitizer(@NonNull Sanitizer sanitizer, @NonNull AutofillId... ids)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a sanitizer for one or more field.\n         *\n         * <p>When a sanitizer is set for a field, the {@link AutofillValue} is sent to the\n         * sanitizer before a save request is <a href=\"#TriggeringSaveRequest\">triggered</a>.\n         *\n         * <p>Typically used to avoid displaying the save UI for values that are autofilled but\n         * reformattedby the app. For example, to remove spaces between every 4 digits of a\n         * credit card number:\n         *\n         * <pre class=\"prettyprint\">\n         * builder.addSanitizer(new TextValueSanitizer(\n         *     Pattern.compile(\"^(\\\\d{4})\\\\s?(\\\\d{4})\\\\s?(\\\\d{4})\\\\s?(\\\\d{4})$\", \"$1$2$3$4\")),\n         *     ccNumberId);\n         * </pre>\n         *\n         * <p>The same sanitizer can be reused to sanitize multiple fields. For example, to trim\n         * both the username and password fields:\n         *\n         * <pre class=\"prettyprint\">\n         * builder.addSanitizer(\n         *     new TextValueSanitizer(Pattern.compile(\"^\\\\s*(.*)\\\\s*$\"), \"$1\"),\n         *         usernameId, passwordId);\n         * </pre>\n         *\n         * <p>The sanitizer can also be used as an alternative for a\n         * {@link #setValidator(Validator) validator}. If any of the {@code ids} is a\n         * {@link #Builder(int, AutofillId[]) required id} and the {@code sanitizer} fails\n         * because of it, then the save UI is not shown.\n         *\n         * @param sanitizer an implementation provided by the Android System.\n         * @param ids id of fields whose value will be sanitized.\n         * @return this builder.\n         *\n         * @throws IllegalArgumentException if a sanitizer for any of the {@code ids} has already\n         * been added or if {@code ids} is empty.\n         ",
    "links" : [ "android.view.autofill.AutofillValue", "#Builder(int", "#setValidator(Validator)" ]
  }, {
    "name" : "public Builder setTriggerId(@NonNull AutofillId id)",
    "returnType" : "Builder",
    "comment" : "\n         * Explicitly defines the view that should commit the autofill context when clicked.\n         *\n         * <p>Usually, the save request is only automatically\n         * <a href=\"#TriggeringSaveRequest\">triggered</a> after the activity is\n         * finished or all relevant views become invisible, but there are scenarios where the\n         * autofill context is automatically commited too late\n         * &mdash;for example, when the activity manually clears the autofillable views when a\n         * button is tapped. This method can be used to trigger the autofill save UI earlier in\n         * these scenarios.\n         *\n         * <p><b>Note:</b> This method should only be used in scenarios where the automatic workflow\n         * is not enough, otherwise it could trigger the autofill save UI when it should not&mdash;\n         * for example, when the user entered invalid credentials for the autofillable views.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SaveInfo build()",
    "returnType" : "SaveInfo",
    "comment" : "\n         * Builds a new {@link SaveInfo} instance.\n         *\n         * If no {@link #Builder(int, AutofillId[]) required ids},\n         * or {@link #setOptionalIds(AutofillId[]) optional ids}, or {@link #FLAG_DELAY_SAVE}\n         * were set, Save Dialog will only be triggered if platform detection is enabled, which\n         * is indicated when {@link FillRequest#getHints()} is not empty.\n         ",
    "links" : [ "android.service.autofill.SaveInfo", "#FLAG_DELAY_SAVE", "android.service.autofill.FillRequest#getHints()", "#Builder(int", "#setOptionalIds(AutofillId" ]
  }, {
    "name" : "private void throwIfDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setFlags(@SaveInfoFlags int flags)", "public Builder setOptionalIds(@NonNull AutofillId[] ids)", "public Builder setDescription(@Nullable CharSequence description)", "public Builder setCustomDescription(@NonNull CustomDescription customDescription)", "public Builder setNegativeAction(@NegativeButtonStyle int style, @Nullable IntentSender listener)", "public Builder setPositiveAction(@PositiveButtonStyle int style)", "public Builder setValidator(@NonNull Validator validator)", "public Builder addSanitizer(@NonNull Sanitizer sanitizer, @NonNull AutofillId... ids)", "public Builder setTriggerId(@NonNull AutofillId id)", "public SaveInfo build()", "private void throwIfDestroyed()" ],
  "variableNames" : [ "mType", "mNegativeButtonStyle", "mPositiveButtonStyle", "mNegativeActionListener", "mRequiredIds", "mOptionalIds", "mDescription", "mDestroyed", "mFlags", "mCustomDescription", "mValidator", "mSanitizers", "mSanitizerIds", "mTriggerId" ]
}