{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/params/SessionConfiguration.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "SessionConfiguration",
  "comment" : "\n * A helper class that aggregates all supported arguments for capture session initialization.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_REGULAR",
    "type" : "int",
    "comment" : "\n     * A regular session type containing instances of {@link OutputConfiguration} running\n     * at regular non high speed FPS ranges and optionally {@link InputConfiguration} for\n     * reprocessable sessions.\n     *\n     * @see CameraDevice#createCaptureSession\n     * @see CameraDevice#createReprocessableCaptureSession\n     ",
    "links" : [ "OutputConfiguration", "InputConfiguration" ]
  }, {
    "name" : "SESSION_HIGH_SPEED",
    "type" : "int",
    "comment" : "\n     * A high speed session type that can only contain instances of {@link OutputConfiguration}.\n     * The outputs can run using high speed FPS ranges. Calls to {@link #setInputConfiguration}\n     * are not supported.\n     * <p>\n     * When using this type, the CameraCaptureSession returned by\n     * {@link android.hardware.camera2.CameraCaptureSession.StateCallback} can be cast to a\n     * {@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession} to access the extra\n     * methods for constrained high speed recording.\n     * </p>\n     *\n     * @see CameraDevice#createConstrainedHighSpeedCaptureSession\n     ",
    "links" : [ "OutputConfiguration", "#setInputConfiguration", "android.hardware.camera2.CameraCaptureSession.StateCallback", "android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession" ]
  }, {
    "name" : "SESSION_VENDOR_START",
    "type" : "int",
    "comment" : "\n     * First vendor-specific session mode\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mOutputConfigurations",
    "type" : "List<OutputConfiguration>",
    "comment" : " Camera capture session related parameters.",
    "links" : [ ]
  }, {
    "name" : "mStateCallback",
    "type" : "CameraCaptureSession.StateCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputConfig",
    "type" : "InputConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionParameters",
    "type" : "CaptureRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SessionConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link SessionConfiguration} is equal to another {@link SessionConfiguration}.\n     *\n     * <p>Two output session configurations are only equal if and only if the underlying input\n     * configuration, output configurations, and session type are equal. </p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "SessionConfiguration", "SessionConfiguration" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSessionType()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the type of the capture session.\n     *\n     * @return The capture session type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OutputConfiguration> getOutputConfigurations()",
    "returnType" : "List<OutputConfiguration>",
    "comment" : "\n     * Retrieve the {@link OutputConfiguration} list for the capture session.\n     *\n     * @return A list of output configurations for the capture session.\n     ",
    "links" : [ "OutputConfiguration" ]
  }, {
    "name" : "public CameraCaptureSession.StateCallback getStateCallback()",
    "returnType" : "CameraCaptureSession.StateCallback",
    "comment" : "\n     * Retrieve the {@link CameraCaptureSession.StateCallback} for the capture session.\n     *\n     * @return A state callback interface implementation.\n     ",
    "links" : [ "CameraCaptureSession.StateCallback" ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Retrieve the {@link java.util.concurrent.Executor} for the capture session.\n     *\n     * @return The Executor on which the callback will be invoked.\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "public void setInputConfiguration(@NonNull InputConfiguration input)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link InputConfiguration} for a reprocessable session. Input configuration are not\n     * supported for {@link #SESSION_HIGH_SPEED}.\n     *\n     * @param input Input configuration.\n     * @throws UnsupportedOperationException In case it is called for {@link #SESSION_HIGH_SPEED}\n     *                                       type session configuration.\n     ",
    "links" : [ "InputConfiguration", "#SESSION_HIGH_SPEED", "#SESSION_HIGH_SPEED" ]
  }, {
    "name" : "public InputConfiguration getInputConfiguration()",
    "returnType" : "InputConfiguration",
    "comment" : "\n     * Retrieve the {@link InputConfiguration}.\n     *\n     * @return The capture session input configuration.\n     ",
    "links" : [ "InputConfiguration" ]
  }, {
    "name" : "public void setSessionParameters(CaptureRequest params)",
    "returnType" : "void",
    "comment" : "\n     * Sets the session wide camera parameters (see {@link CaptureRequest}). This argument can\n     * be set for every supported session type and will be passed to the camera device as part\n     * of the capture session initialization. Session parameters are a subset of the available\n     * capture request parameters (see {@link CameraCharacteristics#getAvailableSessionKeys})\n     * and their application can introduce internal camera delays. To improve camera performance\n     * it is suggested to change them sparingly within the lifetime of the capture session and\n     * to pass their initial values as part of this method.\n     *\n     * @param params A capture request that includes the initial values for any available\n     *               session wide capture keys. Tags (see {@link CaptureRequest.Builder#setTag}) and\n     *               output targets (see {@link CaptureRequest.Builder#addTarget}) are ignored if\n     *               set. Parameter values not part of\n     *               {@link CameraCharacteristics#getAvailableSessionKeys} will also be ignored. It\n     *               is recommended to build the session parameters using the same template type as\n     *               the initial capture request, so that the session and initial request parameters\n     *               match as much as possible.\n     ",
    "links" : [ "CaptureRequest", "CameraCharacteristics#getAvailableSessionKeys", "CaptureRequest.Builder#setTag", "CaptureRequest.Builder#addTarget", "CameraCharacteristics#getAvailableSessionKeys" ]
  }, {
    "name" : "public CaptureRequest getSessionParameters()",
    "returnType" : "CaptureRequest",
    "comment" : "\n     * Retrieve the session wide camera parameters (see {@link CaptureRequest}).\n     *\n     * @return A capture request that includes the initial values for any available\n     *         session wide capture keys.\n     ",
    "links" : [ "CaptureRequest" ]
  } ],
  "variableNames" : [ "TAG", "SESSION_REGULAR", "SESSION_HIGH_SPEED", "SESSION_VENDOR_START", "mOutputConfigurations", "mStateCallback", "mSessionType", "mExecutor", "mInputConfig", "mSessionParameters", "CREATOR" ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public boolean equals(Object obj)", "public int hashCode()", "public int getSessionType()", "public List<OutputConfiguration> getOutputConfigurations()", "public CameraCaptureSession.StateCallback getStateCallback()", "public Executor getExecutor()", "public void setInputConfiguration(@NonNull InputConfiguration input)", "public InputConfiguration getInputConfiguration()", "public void setSessionParameters(CaptureRequest params)", "public CaptureRequest getSessionParameters()" ]
}