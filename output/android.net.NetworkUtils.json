{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkUtils.java",
  "packageName" : "android.net",
  "className" : "NetworkUtils",
  "comment" : "\n * Native methods for managing network interfaces.\n *\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native void attachDropAllBPFFilter(FileDescriptor fd) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Attaches a socket filter that drops all of incoming packets.\n     * @param fd the socket's {@link FileDescriptor}.\n     ",
    "links" : [ "java.io.FileDescriptor" ]
  }, {
    "name" : "public static native void detachBPFFilter(FileDescriptor fd) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Detaches a socket filter.\n     * @param fd the socket's {@link FileDescriptor}.\n     ",
    "links" : [ "java.io.FileDescriptor" ]
  }, {
    "name" : "private static native boolean bindProcessToNetworkHandle(long netHandle)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean bindProcessToNetwork(int netId)",
    "returnType" : "boolean",
    "comment" : "\n     * Binds the current process to the network designated by {@code netId}.  All sockets created\n     * in the future (and not explicitly bound via a bound {@link SocketFactory} (see\n     * {@link Network#getSocketFactory}) will be bound to this network.  Note that if this\n     * {@code Network} ever disconnects all sockets created in this way will cease to work.  This\n     * is by design so an application doesn't accidentally use sockets it thinks are still bound to\n     * a particular {@code Network}.  Passing NETID_UNSET clears the binding.\n     ",
    "links" : [ "android.net.Network#getSocketFactory", "SocketFactory" ]
  }, {
    "name" : "private static native long getBoundNetworkHandleForProcess()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getBoundNetworkForProcess()",
    "returnType" : "int",
    "comment" : "\n     * Return the netId last passed to {@link #bindProcessToNetwork}, or NETID_UNSET if\n     * {@link #unbindProcessToNetwork} has been called since {@link #bindProcessToNetwork}.\n     ",
    "links" : [ "#unbindProcessToNetwork", "#bindProcessToNetwork" ]
  }, {
    "name" : "public static native boolean bindProcessToNetworkForHostResolution(int netId)",
    "returnType" : "boolean",
    "comment" : "\n     * Binds host resolutions performed by this process to the network designated by {@code netId}.\n     * {@link #bindProcessToNetwork} takes precedence over this setting.  Passing NETID_UNSET clears\n     * the binding.\n     *\n     * @deprecated This is strictly for legacy usage to support startUsingNetworkFeature().\n     ",
    "links" : [ "#bindProcessToNetwork" ]
  }, {
    "name" : "private static native int bindSocketToNetworkHandle(FileDescriptor fd, long netHandle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int bindSocketToNetwork(FileDescriptor fd, int netId)",
    "returnType" : "int",
    "comment" : "\n     * Explicitly binds {@code fd} to the network designated by {@code netId}.  This\n     * overrides any binding via {@link #bindProcessToNetwork}.\n     * @return 0 on success or negative errno on failure.\n     ",
    "links" : [ "#bindProcessToNetwork" ]
  }, {
    "name" : "public static boolean queryUserAccess(int uid, int netId)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if {@code uid} can access network designated by {@code netId}.\n     * @return {@code true} if {@code uid} can access network, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native FileDescriptor resNetworkSend(long netHandle, byte[] msg, int msglen, int flags) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor resNetworkSend(int netId, byte[] msg, int msglen, int flags) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * DNS resolver series jni method.\n     * Issue the query {@code msg} on the network designated by {@code netId}.\n     * {@code flags} is an additional config to control actual querying behavior.\n     * @return a file descriptor to watch for read events\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native FileDescriptor resNetworkQuery(long netHandle, String dname, int nsClass, int nsType, int flags) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor resNetworkQuery(int netId, String dname, int nsClass, int nsType, int flags) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * DNS resolver series jni method.\n     * Look up the {@code nsClass} {@code nsType} Resource Record (RR) associated\n     * with Domain Name {@code dname} on the network designated by {@code netId}.\n     * {@code flags} is an additional config to control actual querying behavior.\n     * @return a file descriptor to watch for read events\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native DnsResolver.DnsResponse resNetworkResult(FileDescriptor fd) throws ErrnoException",
    "returnType" : "DnsResolver.DnsResponse",
    "comment" : "\n     * DNS resolver series jni method.\n     * Read a result for the query associated with the {@code fd}.\n     * @return DnsResponse containing blob answer and rcode\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void resNetworkCancel(FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "\n     * DNS resolver series jni method.\n     * Attempts to cancel the in-progress query associated with the {@code fd}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native Network getDnsNetwork() throws ErrnoException",
    "returnType" : "Network",
    "comment" : "\n     * DNS resolver series jni method.\n     * Attempts to get network which resolver will use if no network is explicitly selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native TcpRepairWindow getTcpRepairWindow(FileDescriptor fd) throws ErrnoException",
    "returnType" : "TcpRepairWindow",
    "comment" : "\n     * Get the tcp repair window associated with the {@code fd}.\n     *\n     * @param fd the tcp socket's {@link FileDescriptor}.\n     * @return a {@link TcpRepairWindow} object indicates tcp window size.\n     ",
    "links" : [ "java.io.FileDescriptor", "android.net.TcpRepairWindow" ]
  }, {
    "name" : "public static InetAddress intToInetAddress(int hostAddress)",
    "returnType" : "InetAddress",
    "comment" : "\n     * @see Inet4AddressUtils#intToInet4AddressHTL(int)\n     * @deprecated Use either {@link Inet4AddressUtils#intToInet4AddressHTH(int)}\n     *             or {@link Inet4AddressUtils#intToInet4AddressHTL(int)}\n     ",
    "links" : [ "com.android.net.module.util.Inet4AddressUtils#intToInet4AddressHTL(int)", "com.android.net.module.util.Inet4AddressUtils#intToInet4AddressHTH(int)" ]
  }, {
    "name" : "public static int inetAddressToInt(Inet4Address inetAddr) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "\n     * @see Inet4AddressUtils#inet4AddressToIntHTL(Inet4Address)\n     * @deprecated Use either {@link Inet4AddressUtils#inet4AddressToIntHTH(Inet4Address)}\n     *             or {@link Inet4AddressUtils#inet4AddressToIntHTL(Inet4Address)}\n     ",
    "links" : [ "com.android.net.module.util.Inet4AddressUtils#inet4AddressToIntHTL(Inet4Address)", "com.android.net.module.util.Inet4AddressUtils#inet4AddressToIntHTH(Inet4Address)" ]
  }, {
    "name" : "public static int prefixLengthToNetmaskInt(int prefixLength) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "\n     * @see Inet4AddressUtils#prefixLengthToV4NetmaskIntHTL(int)\n     * @deprecated Use either {@link Inet4AddressUtils#prefixLengthToV4NetmaskIntHTH(int)}\n     *             or {@link Inet4AddressUtils#prefixLengthToV4NetmaskIntHTL(int)}\n     ",
    "links" : [ "com.android.net.module.util.Inet4AddressUtils#prefixLengthToV4NetmaskIntHTH(int)", "com.android.net.module.util.Inet4AddressUtils#prefixLengthToV4NetmaskIntHTL(int)" ]
  }, {
    "name" : "public static int netmaskIntToPrefixLength(int netmask)",
    "returnType" : "int",
    "comment" : "\n     * Convert a IPv4 netmask integer to a prefix length\n     * @param netmask as an integer (0xff000000 for a /8 subnet)\n     * @return the network prefix length\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int netmaskToPrefixLength(Inet4Address netmask)",
    "returnType" : "int",
    "comment" : "\n     * Convert an IPv4 netmask to a prefix length, checking that the netmask is contiguous.\n     * @param netmask as a {@code Inet4Address}.\n     * @return the network prefix length\n     * @throws IllegalArgumentException the specified netmask was not contiguous.\n     * @hide\n     * @deprecated use {@link Inet4AddressUtils#netmaskToPrefixLength(Inet4Address)}\n     ",
    "links" : [ "com.android.net.module.util.Inet4AddressUtils#netmaskToPrefixLength(Inet4Address)" ]
  }, {
    "name" : "public static InetAddress numericToInetAddress(String addrString) throws IllegalArgumentException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Create an InetAddress from a string where the string must be a standard\n     * representation of a V4 or V6 address.  Avoids doing a DNS lookup on failure\n     * but it will throw an IllegalArgumentException in that case.\n     * @param addrString\n     * @return the InetAddress\n     * @hide\n     * @deprecated Use {@link InetAddresses#parseNumericAddress(String)}, if possible.\n     ",
    "links" : [ "android.net.InetAddresses#parseNumericAddress(String)" ]
  }, {
    "name" : "public static int getImplicitNetmask(Inet4Address address)",
    "returnType" : "int",
    "comment" : "\n     * Returns the implicit netmask of an IPv4 address, as was the custom before 1993.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Pair<InetAddress, Integer> parseIpAndMask(String ipAndMaskString)",
    "returnType" : "Pair<InetAddress, Integer>",
    "comment" : "\n     * Utility method to parse strings such as \"192.0.2.5/24\" or \"2001:db8::cafe:d00d/64\".\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Pair<InetAddress, Integer> legacyParseIpAndMask(String ipAndMaskString)",
    "returnType" : "Pair<InetAddress, Integer>",
    "comment" : "\n     * Utility method to parse strings such as \"192.0.2.5/24\" or \"2001:db8::cafe:d00d/64\".\n     * @hide\n     *\n     * @deprecated This method is used only for IpPrefix and LinkAddress. Since Android S, use\n     *             {@link #parseIpAndMask(String)}, if possible.\n     ",
    "links" : [ "#parseIpAndMask(String)" ]
  }, {
    "name" : "public static InetAddress hexToInet6Address(String addrHexString) throws IllegalArgumentException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Convert a 32 char hex string into a Inet6Address.\n     * throws a runtime exception if the string isn't 32 chars, isn't hex or can't be\n     * made into an Inet6Address\n     * @param addrHexString a 32 character hex string representing an IPv6 addr\n     * @return addr an InetAddress representation for the string\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String trimV4AddrZeros(String addr)",
    "returnType" : "String",
    "comment" : "\n     * Trim leading zeros from IPv4 address strings\n     * Our base libraries will interpret that as octel..\n     * Must leave non v4 addresses and host names alone.\n     * For example, 192.168.000.010 -> 192.168.0.10\n     * TODO - fix base libraries and remove this function\n     * @param addr a string representing an ip addr\n     * @return a string propertly trimmed\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TreeSet<IpPrefix> deduplicatePrefixSet(final TreeSet<IpPrefix> src)",
    "returnType" : "TreeSet<IpPrefix>",
    "comment" : "\n     * Returns a prefix set without overlaps.\n     *\n     * This expects the src set to be sorted from shorter to longer. Results are undefined\n     * failing this condition. The returned prefix set is sorted in the same order as the\n     * passed set, with the same comparator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long routedIPv4AddressCount(final TreeSet<IpPrefix> prefixes)",
    "returnType" : "long",
    "comment" : "\n     * Returns how many IPv4 addresses match any of the prefixes in the passed ordered set.\n     *\n     * Obviously this returns an integral value between 0 and 2**32.\n     * The behavior is undefined if any of the prefixes is not an IPv4 prefix or if the\n     * set is not ordered smallest prefix to longer prefix.\n     *\n     * @param prefixes the set of prefixes, ordered by length\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BigInteger routedIPv6AddressCount(final TreeSet<IpPrefix> prefixes)",
    "returnType" : "BigInteger",
    "comment" : "\n     * Returns how many IPv6 addresses match any of the prefixes in the passed ordered set.\n     *\n     * This returns a BigInteger between 0 and 2**128.\n     * The behavior is undefined if any of the prefixes is not an IPv6 prefix or if the\n     * set is not ordered smallest prefix to longer prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void setsockoptBytes(FileDescriptor fd, int level, int option, byte[] value) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Sets a socket option with byte array\n     *\n     * @param fd The socket file descriptor\n     * @param level The level at which the option is defined\n     * @param option The socket option for which the value is to be set\n     * @param value The option value to be set in byte array\n     * @throws ErrnoException if setsockopt fails\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isKernel64Bit()",
    "returnType" : "boolean",
    "comment" : " Returns whether the Linux Kernel is 64 bit ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isKernelX86()",
    "returnType" : "boolean",
    "comment" : " Returns whether the Linux Kernel is x86 ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static native void attachDropAllBPFFilter(FileDescriptor fd) throws SocketException", "public static native void detachBPFFilter(FileDescriptor fd) throws SocketException", "private static native boolean bindProcessToNetworkHandle(long netHandle)", "public static boolean bindProcessToNetwork(int netId)", "private static native long getBoundNetworkHandleForProcess()", "public static int getBoundNetworkForProcess()", "public static native boolean bindProcessToNetworkForHostResolution(int netId)", "private static native int bindSocketToNetworkHandle(FileDescriptor fd, long netHandle)", "public static int bindSocketToNetwork(FileDescriptor fd, int netId)", "public static boolean queryUserAccess(int uid, int netId)", "private static native FileDescriptor resNetworkSend(long netHandle, byte[] msg, int msglen, int flags) throws ErrnoException", "public static FileDescriptor resNetworkSend(int netId, byte[] msg, int msglen, int flags) throws ErrnoException", "private static native FileDescriptor resNetworkQuery(long netHandle, String dname, int nsClass, int nsType, int flags) throws ErrnoException", "public static FileDescriptor resNetworkQuery(int netId, String dname, int nsClass, int nsType, int flags) throws ErrnoException", "public static native DnsResolver.DnsResponse resNetworkResult(FileDescriptor fd) throws ErrnoException", "public static native void resNetworkCancel(FileDescriptor fd)", "public static native Network getDnsNetwork() throws ErrnoException", "public static native TcpRepairWindow getTcpRepairWindow(FileDescriptor fd) throws ErrnoException", "public static InetAddress intToInetAddress(int hostAddress)", "public static int inetAddressToInt(Inet4Address inetAddr) throws IllegalArgumentException", "public static int prefixLengthToNetmaskInt(int prefixLength) throws IllegalArgumentException", "public static int netmaskIntToPrefixLength(int netmask)", "public static int netmaskToPrefixLength(Inet4Address netmask)", "public static InetAddress numericToInetAddress(String addrString) throws IllegalArgumentException", "public static int getImplicitNetmask(Inet4Address address)", "public static Pair<InetAddress, Integer> parseIpAndMask(String ipAndMaskString)", "public static Pair<InetAddress, Integer> legacyParseIpAndMask(String ipAndMaskString)", "public static InetAddress hexToInet6Address(String addrHexString) throws IllegalArgumentException", "public static String trimV4AddrZeros(String addr)", "private static TreeSet<IpPrefix> deduplicatePrefixSet(final TreeSet<IpPrefix> src)", "public static long routedIPv4AddressCount(final TreeSet<IpPrefix> prefixes)", "public static BigInteger routedIPv6AddressCount(final TreeSet<IpPrefix> prefixes)", "public static native void setsockoptBytes(FileDescriptor fd, int level, int option, byte[] value) throws ErrnoException", "public static native boolean isKernel64Bit()", "public static native boolean isKernelX86()" ],
  "variableNames" : [ "TAG" ]
}