{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/KeyFactory.java",
  "packageName" : "java.security",
  "className" : "KeyFactory",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "debug",
    "type" : "Debug",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The algorithm associated with this key factory",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "spi",
    "type" : "KeyFactorySpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : " lock for mutex during provider selection",
    "links" : [ ]
  }, {
    "name" : "serviceIterator",
    "type" : "Iterator<Service>",
    "comment" : " null once provider is selected",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static KeyFactory getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "KeyFactory",
    "comment" : "\n     * Returns a KeyFactory object that converts\n     * public/private keys of the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyFactory object encapsulating the\n     * KeyFactorySpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the requested key algorithm.\n     *\n     * @return the new {@code KeyFactory} object\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code KeyFactorySpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static KeyFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "KeyFactory",
    "comment" : "\n     * Returns a KeyFactory object that converts\n     * public/private keys of the specified algorithm.\n     *\n     * <p> A new KeyFactory object encapsulating the\n     * KeyFactorySpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the requested key algorithm.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new {@code KeyFactory} object\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code KeyFactorySpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static KeyFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "KeyFactory",
    "comment" : "\n     * Returns a KeyFactory object that converts\n     * public/private keys of the specified algorithm.\n     *\n     * <p> A new KeyFactory object encapsulating the\n     * KeyFactorySpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the requested key algorithm.\n     *\n     * @param provider the provider.\n     *\n     * @return the new {@code KeyFactory} object\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code KeyFactorySpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this key factory object.\n     *\n     * @return the provider of this key factory object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the algorithm\n     * associated with this {@code KeyFactory}.\n     *\n     * @return the name of the algorithm associated with this\n     * {@code KeyFactory}\n     ",
    "links" : [ ]
  }, {
    "name" : "private KeyFactorySpi nextSpi(KeyFactorySpi oldSpi)",
    "returnType" : "KeyFactorySpi",
    "comment" : "\n     * Update the active KeyFactorySpi of this class and return the next\n     * implementation for failover. If no more implemenations are\n     * available, this method returns null. However, the active spi of\n     * this class is never set to null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final PublicKey generatePublic(KeySpec keySpec) throws InvalidKeySpecException",
    "returnType" : "PublicKey",
    "comment" : "\n     * Generates a public key object from the provided key specification\n     * (key material).\n     *\n     * @param keySpec the specification (key material) of the public key.\n     *\n     * @return the public key.\n     *\n     * @exception InvalidKeySpecException if the given key specification\n     * is inappropriate for this key factory to produce a public key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final PrivateKey generatePrivate(KeySpec keySpec) throws InvalidKeySpecException",
    "returnType" : "PrivateKey",
    "comment" : "\n     * Generates a private key object from the provided key specification\n     * (key material).\n     *\n     * @param keySpec the specification (key material) of the private key.\n     *\n     * @return the private key.\n     *\n     * @exception InvalidKeySpecException if the given key specification\n     * is inappropriate for this key factory to produce a private key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T getKeySpec(Key key, Class<T> keySpec) throws InvalidKeySpecException",
    "returnType" : "T",
    "comment" : "\n     * Returns a specification (key material) of the given key object.\n     * {@code keySpec} identifies the specification class in which\n     * the key material should be returned. It could, for example, be\n     * {@code DSAPublicKeySpec.class}, to indicate that the\n     * key material should be returned in an instance of the\n     * {@code DSAPublicKeySpec} class.\n     *\n     * @param <T> the type of the key specification to be returned\n     *\n     * @param key the key.\n     *\n     * @param keySpec the specification class in which\n     * the key material should be returned.\n     *\n     * @return the underlying key specification (key material) in an instance\n     * of the requested specification class.\n     *\n     * @exception InvalidKeySpecException if the requested key specification is\n     * inappropriate for the given key, or the given key cannot be processed\n     * (e.g., the given key has an unrecognized algorithm or format).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Key translateKey(Key key) throws InvalidKeyException",
    "returnType" : "Key",
    "comment" : "\n     * Translates a key object, whose provider may be unknown or potentially\n     * untrusted, into a corresponding key object of this key factory.\n     *\n     * @param key the key whose provider is unknown or untrusted.\n     *\n     * @return the translated key.\n     *\n     * @exception InvalidKeyException if the given key cannot be processed\n     * by this key factory.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static KeyFactory getInstance(String algorithm) throws NoSuchAlgorithmException", "public static KeyFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static KeyFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final String getAlgorithm()", "private KeyFactorySpi nextSpi(KeyFactorySpi oldSpi)", "public final PublicKey generatePublic(KeySpec keySpec) throws InvalidKeySpecException", "public final PrivateKey generatePrivate(KeySpec keySpec) throws InvalidKeySpecException", "public final T getKeySpec(Key key, Class<T> keySpec) throws InvalidKeySpecException", "public final Key translateKey(Key key) throws InvalidKeyException" ],
  "variableNames" : [ "debug", "algorithm", "provider", "spi", "lock", "serviceIterator" ]
}