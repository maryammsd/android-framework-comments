{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/ListResourceBundle.java",
  "packageName" : "java.util",
  "className" : "ListResourceBundle",
  "comment" : "\n * {@code ListResourceBundle} is an abstract subclass of\n * {@code ResourceBundle} that manages resources for a locale\n * in a convenient and easy to use list. See {@code ResourceBundle} for\n * more information about resource bundles in general.\n *\n * <P>\n * Subclasses must override {@code getContents} and provide an array,\n * where each item in the array is a pair of objects.\n * The first element of each pair is the key, which must be a\n * {@code String}, and the second element is the value associated with\n * that key.\n *\n * <p>\n * The following <a id=\"sample\">example</a> shows two members of a resource\n * bundle family with the base name \"MyResources\".\n * \"MyResources\" is the default member of the bundle family, and\n * \"MyResources_fr\" is the French member.\n * These members are based on {@code ListResourceBundle}\n * (a related <a href=\"PropertyResourceBundle.html#sample\">example</a> shows\n * how you can add a bundle to this family that's based on a properties file).\n * The keys in this example are of the form \"s1\" etc. The actual\n * keys are entirely up to your choice, so long as they are the same as\n * the keys you use in your program to retrieve the objects from the bundle.\n * Keys are case-sensitive.\n * <blockquote>\n * <pre>\n *\n * public class MyResources extends ListResourceBundle {\n *     protected Object[][] getContents() {\n *         return new Object[][] {\n *         // LOCALIZE THIS\n *             {\"s1\", \"The disk \\\"{1}\\\" contains {0}.\"},  // MessageFormat pattern\n *             {\"s2\", \"1\"},                               // location of {0} in pattern\n *             {\"s3\", \"My Disk\"},                         // sample disk name\n *             {\"s4\", \"no files\"},                        // first ChoiceFormat choice\n *             {\"s5\", \"one file\"},                        // second ChoiceFormat choice\n *             {\"s6\", \"{0,number} files\"},                // third ChoiceFormat choice\n *             {\"s7\", \"3 Mar 96\"},                        // sample date\n *             {\"s8\", new Dimension(1,5)}                 // real object, not just string\n *         // END OF MATERIAL TO LOCALIZE\n *         };\n *     }\n * }\n *\n * public class MyResources_fr extends ListResourceBundle {\n *     protected Object[][] getContents() {\n *         return new Object[][] {\n *         // LOCALIZE THIS\n *             {\"s1\", \"Le disque \\\"{1}\\\" {0}.\"},          // MessageFormat pattern\n *             {\"s2\", \"1\"},                               // location of {0} in pattern\n *             {\"s3\", \"Mon disque\"},                      // sample disk name\n *             {\"s4\", \"ne contient pas de fichiers\"},     // first ChoiceFormat choice\n *             {\"s5\", \"contient un fichier\"},             // second ChoiceFormat choice\n *             {\"s6\", \"contient {0,number} fichiers\"},    // third ChoiceFormat choice\n *             {\"s7\", \"3 mars 1996\"},                     // sample date\n *             {\"s8\", new Dimension(1,3)}                 // real object, not just string\n *         // END OF MATERIAL TO LOCALIZE\n *         };\n *     }\n * }\n * </pre>\n * </blockquote>\n *\n * <p>\n * The implementation of a {@code ListResourceBundle} subclass must be thread-safe\n * if it's simultaneously used by multiple threads. The default implementations\n * of the methods in this class are thread-safe.\n *\n * @see ResourceBundle\n * @see PropertyResourceBundle\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "lookup",
    "type" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Object handleGetObject(String key)",
    "returnType" : "Object",
    "comment" : " Implements java.util.ResourceBundle.handleGetObject; inherits javadoc specification.",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getKeys()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an {@code Enumeration} of the keys contained in\n     * this {@code ResourceBundle} and its parent bundles.\n     *\n     * @return an {@code Enumeration} of the keys contained in\n     *         this {@code ResourceBundle} and its parent bundles.\n     * @see #keySet()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Set<String> handleKeySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a {@code Set} of the keys contained\n     * <em>only</em> in this {@code ResourceBundle}.\n     *\n     * @return a {@code Set} of the keys contained only in this\n     *         {@code ResourceBundle}\n     * @since 1.6\n     * @see #keySet()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract Object[][] getContents()",
    "returnType" : "Object[][]",
    "comment" : "\n     * Returns an array in which each item is a pair of objects in an\n     * {@code Object} array. The first element of each pair is\n     * the key, which must be a {@code String}, and the second\n     * element is the value associated with that key.  See the class\n     * description for details.\n     *\n     * @return an array of an {@code Object} array representing a\n     * key-value pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void loadLookup()",
    "returnType" : "void",
    "comment" : "\n     * We lazily load the lookup hashtable.  This function does the\n     * loading.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final Object handleGetObject(String key)", "public Enumeration<String> getKeys()", "protected Set<String> handleKeySet()", "protected abstract Object[][] getContents()", "private synchronized void loadLookup()" ],
  "variableNames" : [ "lookup" ]
}