{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StackStreamFactory.java",
  "packageName" : "java.lang",
  "className" : "AbstractStackWalker",
  "comment" : "\n     * Subclass of AbstractStackWalker implements a specific stack walking logic.\n     * It needs to set up the frame buffer and stack walking mode.\n     *\n     * It initiates the VM stack walking via the callStackWalk method that serves\n     * as the anchored frame and VM will call up to AbstractStackWalker::doStackWalk.\n     *\n     * @param <R> the type of the result returned from stack walking\n     * @param <T> the type of the data gathered for each frame.\n     *            For example, StackFrameInfo for StackWalker::walk or\n     *            Class<?> for StackWalker::getCallerClass\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "walker",
    "type" : "StackWalker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "thread",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxDepth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "depth",
    "type" : "int",
    "comment" : " traversed stack depth",
    "links" : [ ]
  }, {
    "name" : "frameBuffer",
    "type" : "FrameBuffer<? extends T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "anchor",
    "type" : "Object",
    "comment" : " protected long anchor;",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int toStackWalkMode(StackWalker walker, int mode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract R consumeFrames()",
    "returnType" : "R",
    "comment" : "\n         * A callback method to consume the stack frames.  This method is invoked\n         * once stack walking begins (i.e. it is only invoked when walkFrames is called).\n         *\n         * Each specialized AbstractStackWalker subclass implements the consumeFrames method\n         * to control the following:\n         * 1. fetch the subsequent batches of stack frames\n         * 2. reuse or expand the allocated buffers\n         * 3. create specialized StackFrame objects\n         *\n         * @return the number of consumed frames\n         ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void initFrameBuffer()",
    "returnType" : "void",
    "comment" : "\n         * Initialize FrameBuffer.  Subclass should implement this method to\n         * create its custom frame buffers.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int batchSize(int lastBatchFrameCount)",
    "returnType" : "int",
    "comment" : "\n         * Returns the suggested next batch size.\n         *\n         * Subclass should override this method to change the batch size\n         *\n         * @param lastBatchFrameCount number of frames in the last batch; or zero\n         * @return suggested batch size\n         ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextBatchSize()",
    "returnType" : "int",
    "comment" : "\n         * Returns the next batch size, always >= minimum batch size (32)\n         *\n         * Subclass may override this method if the minimum batch size is different.\n         ",
    "links" : [ ]
  }, {
    "name" : " final void checkState(WalkerState state)",
    "returnType" : "void",
    "comment" : "\n         * Checks if this stream is in the given state. Otherwise, throws IllegalStateException.\n         *\n         * VM also validates this stream if it's anchored for stack walking\n         * when stack frames are fetched for each batch.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void close()",
    "returnType" : "void",
    "comment" : "\n         * Close this stream.  This stream becomes invalid to walk.\n         ",
    "links" : [ ]
  }, {
    "name" : " final R walk()",
    "returnType" : "R",
    "comment" : "\n         * Walks stack frames until {@link #consumeFrames} is done consuming\n         * the frames it is interested in.\n         ",
    "links" : [ "#consumeFrames" ]
  }, {
    "name" : "private boolean skipReflectionFrames()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Class<?> peekFrame()",
    "returnType" : "Class<?>",
    "comment" : "\n         * Returns {@code Class} object at the current frame;\n         * or {@code null} if no more frame. If advanceToNextBatch is true,\n         * it will only fetch the next batch.\n         ",
    "links" : [ ]
  }, {
    "name" : "private R doStackWalk(Object anchor, int skipFrames, int batchSize, int bufStartIndex, int bufEndIndex)",
    "returnType" : "R",
    "comment" : " private Object doStackWalk(long anchor, int skipFrames, int batchSize,",
    "links" : [ ]
  }, {
    "name" : "private int getNextBatch()",
    "returnType" : "int",
    "comment" : "\n         * Get next batch of stack frames.\n         ",
    "links" : [ ]
  }, {
    "name" : " final Class<?> nextFrame()",
    "returnType" : "Class<?>",
    "comment" : "\n         * This method traverses the next stack frame and returns the Class\n         * invoking that stack frame.\n         *\n         * This method can only be called during the walk method.  This is intended\n         * to be used to walk the stack frames in one single invocation and\n         * this stack stream will be invalidated once walk is done.\n         *\n         * @see #tryNextFrame\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if there is next frame to be traversed.\n         * This skips hidden frames unless this StackWalker has\n         * {@link Option#SHOW_REFLECT_FRAMES}\n         ",
    "links" : [ "java.lang.StackWalker.Option#SHOW_REFLECT_FRAMES" ]
  }, {
    "name" : "private R beginStackWalk()",
    "returnType" : "R",
    "comment" : "\n         * Begin stack walking - pass the allocated arrays to the VM to fill in\n         * stack frame information.\n         *\n         * VM first anchors the frame of the current thread.  A traversable stream\n         * on this thread's stack will be opened.  The VM will fetch the first batch\n         * of stack frames and call AbstractStackWalker::doStackWalk to invoke the\n         * stack walking function on each stack frame.\n         *\n         * If all fetched stack frames are traversed, AbstractStackWalker::fetchStackFrames will\n         * fetch the next batch of stack frames to continue.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int fetchStackFrames(int batchSize)",
    "returnType" : "int",
    "comment" : "\n         * Fetches stack frames.\n         *\n         * @params batchSize number of elements of the frame  buffers for this batch\n         * @returns number of frames fetched in this batch\n         ",
    "links" : [ ]
  }, {
    "name" : "private R callStackWalk(long mode, int skipframes, int batchSize, int startIndex, T[] frames)",
    "returnType" : "R",
    "comment" : " private native R callStackWalk(long mode, int skipframes,",
    "links" : [ ]
  }, {
    "name" : "private void checkFrameType(long mode, T[] frames)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int fetchStackFrames(long mode, @NonNull Object anchor, int batchSize, int startIndex, T[] frames)",
    "returnType" : "int",
    "comment" : "                                     T[] frames) {",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int toStackWalkMode(StackWalker walker, int mode)", "protected abstract R consumeFrames()", "protected abstract void initFrameBuffer()", "protected abstract int batchSize(int lastBatchFrameCount)", "protected int getNextBatchSize()", " final void checkState(WalkerState state)", "private void close()", " final R walk()", "private boolean skipReflectionFrames()", " final Class<?> peekFrame()", "private R doStackWalk(Object anchor, int skipFrames, int batchSize, int bufStartIndex, int bufEndIndex)", "private int getNextBatch()", " final Class<?> nextFrame()", " final boolean hasNext()", "private R beginStackWalk()", "private int fetchStackFrames(int batchSize)", "private R callStackWalk(long mode, int skipframes, int batchSize, int startIndex, T[] frames)", "private void checkFrameType(long mode, T[] frames)", "private int fetchStackFrames(long mode, @NonNull Object anchor, int batchSize, int startIndex, T[] frames)" ],
  "variableNames" : [ "walker", "thread", "maxDepth", "mode", "depth", "frameBuffer", "anchor" ]
}