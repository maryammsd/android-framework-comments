{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ContentProvider.java",
  "packageName" : "android.content",
  "className" : "Transport",
  "comment" : "\n     * Binder object that deals with remoting.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAppOpsManager",
    "type" : "AppOpsManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReadOp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWriteOp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ContentInterface",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ContentProvider getContentProvider()",
    "returnType" : "ContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getProviderName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(@NonNull AttributionSource attributionSource, Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getType(AttributionSource attributionSource, Uri uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logGetTypeData(int callingUid, Uri uri, String type, boolean permissionCheckPassed)",
    "returnType" : "void",
    "comment" : " Utility function to log the getTypeData calls",
    "links" : [ ]
  }, {
    "name" : "public void getTypeAsync(AttributionSource attributionSource, Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getTypeAnonymousAsync(Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(@NonNull AttributionSource attributionSource, Uri uri, ContentValues initialValues, Bundle extras)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int bulkInsert(@NonNull AttributionSource attributionSource, Uri uri, ContentValues[] initialValues)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentProviderResult[] applyBatch(@NonNull AttributionSource attributionSource, String authority, ArrayList<ContentProviderOperation> operations) throws OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int delete(@NonNull AttributionSource attributionSource, Uri uri, Bundle extras)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int update(@NonNull AttributionSource attributionSource, Uri uri, ContentValues values, Bundle extras)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor openFile(@NonNull AttributionSource attributionSource, Uri uri, String mode, ICancellationSignal cancellationSignal) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openAssetFile(@NonNull AttributionSource attributionSource, Uri uri, String mode, ICancellationSignal cancellationSignal) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(@NonNull AttributionSource attributionSource, String authority, String method, @Nullable String arg, @Nullable Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getStreamTypes(AttributionSource attributionSource, Uri uri, String mimeTypeFilter)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openTypedAssetFile(@NonNull AttributionSource attributionSource, Uri uri, String mimeType, Bundle opts, ICancellationSignal cancellationSignal) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICancellationSignal createCancellationSignal()",
    "returnType" : "ICancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri canonicalize(@NonNull AttributionSource attributionSource, Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void canonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri uncanonicalize(@NonNull AttributionSource attributionSource, Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void uncanonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(@NonNull AttributionSource attributionSource, Uri uri, Bundle extras, ICancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(@NonNull AttributionSource attributionSource, Uri uri, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceFilePermission(@NonNull AttributionSource attributionSource, Uri uri, String mode) throws FileNotFoundException, SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int enforceReadPermission(@NonNull AttributionSource attributionSource, Uri uri) throws SecurityException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int enforceWritePermission(@NonNull AttributionSource attributionSource, Uri uri) throws SecurityException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int checkGetTypePermission(@NonNull AttributionSource attributionSource, Uri uri)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " ContentProvider getContentProvider()", "public String getProviderName()", "public Cursor query(@NonNull AttributionSource attributionSource, Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal)", "public String getType(AttributionSource attributionSource, Uri uri)", "private void logGetTypeData(int callingUid, Uri uri, String type, boolean permissionCheckPassed)", "public void getTypeAsync(AttributionSource attributionSource, Uri uri, RemoteCallback callback)", "public void getTypeAnonymousAsync(Uri uri, RemoteCallback callback)", "public Uri insert(@NonNull AttributionSource attributionSource, Uri uri, ContentValues initialValues, Bundle extras)", "public int bulkInsert(@NonNull AttributionSource attributionSource, Uri uri, ContentValues[] initialValues)", "public ContentProviderResult[] applyBatch(@NonNull AttributionSource attributionSource, String authority, ArrayList<ContentProviderOperation> operations) throws OperationApplicationException", "public int delete(@NonNull AttributionSource attributionSource, Uri uri, Bundle extras)", "public int update(@NonNull AttributionSource attributionSource, Uri uri, ContentValues values, Bundle extras)", "public ParcelFileDescriptor openFile(@NonNull AttributionSource attributionSource, Uri uri, String mode, ICancellationSignal cancellationSignal) throws FileNotFoundException", "public AssetFileDescriptor openAssetFile(@NonNull AttributionSource attributionSource, Uri uri, String mode, ICancellationSignal cancellationSignal) throws FileNotFoundException", "public Bundle call(@NonNull AttributionSource attributionSource, String authority, String method, @Nullable String arg, @Nullable Bundle extras)", "public String[] getStreamTypes(AttributionSource attributionSource, Uri uri, String mimeTypeFilter)", "public AssetFileDescriptor openTypedAssetFile(@NonNull AttributionSource attributionSource, Uri uri, String mimeType, Bundle opts, ICancellationSignal cancellationSignal) throws FileNotFoundException", "public ICancellationSignal createCancellationSignal()", "public Uri canonicalize(@NonNull AttributionSource attributionSource, Uri uri)", "public void canonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback)", "public Uri uncanonicalize(@NonNull AttributionSource attributionSource, Uri uri)", "public void uncanonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback)", "public boolean refresh(@NonNull AttributionSource attributionSource, Uri uri, Bundle extras, ICancellationSignal cancellationSignal) throws RemoteException", "public int checkUriPermission(@NonNull AttributionSource attributionSource, Uri uri, int uid, int modeFlags)", "private void enforceFilePermission(@NonNull AttributionSource attributionSource, Uri uri, String mode) throws FileNotFoundException, SecurityException", "private int enforceReadPermission(@NonNull AttributionSource attributionSource, Uri uri) throws SecurityException", "private int enforceWritePermission(@NonNull AttributionSource attributionSource, Uri uri) throws SecurityException", "private int checkGetTypePermission(@NonNull AttributionSource attributionSource, Uri uri)" ],
  "variableNames" : [ "mAppOpsManager", "mReadOp", "mWriteOp", "mInterface" ]
}