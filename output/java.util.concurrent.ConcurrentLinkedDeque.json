{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentLinkedDeque.java",
  "packageName" : "java.util.concurrent",
  "className" : "ConcurrentLinkedDeque",
  "comment" : "\n * An unbounded concurrent {@linkplain Deque deque} based on linked nodes.\n * Concurrent insertion, removal, and access operations execute safely\n * across multiple threads.\n * A {@code ConcurrentLinkedDeque} is an appropriate choice when\n * many threads will share access to a common collection.\n * Like most other concurrent collection implementations, this class\n * does not permit the use of {@code null} elements.\n *\n * <p>Iterators and spliterators are\n * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n *\n * <p>Beware that, unlike in most collections, the {@code size} method\n * is <em>NOT</em> a constant-time operation. Because of the\n * asynchronous nature of these deques, determining the current number\n * of elements requires a traversal of the elements, and so may report\n * inaccurate results if this collection is modified during traversal.\n *\n * <p>Bulk operations that add, remove, or examine multiple elements,\n * such as {@link #addAll}, {@link #removeIf} or {@link #forEach},\n * are <em>not</em> guaranteed to be performed atomically.\n * For example, a {@code forEach} traversal concurrent with an {@code\n * addAll} operation might observe only some of the added elements.\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Deque} and {@link Iterator} interfaces.\n *\n * <p>Memory consistency effects: As with other concurrent collections,\n * actions in a thread prior to placing an object into a\n * {@code ConcurrentLinkedDeque}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions subsequent to the access or removal of that element from\n * the {@code ConcurrentLinkedDeque} in another thread.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.7\n * @author Doug Lea\n * @author Martin Buchholz\n * @param <E> the type of elements held in this deque\n ",
  "links" : [ "#forEach", "java.util.Iterator", "#addAll", "java.util.Deque", "#removeIf" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "head",
    "type" : "Node<E>",
    "comment" : "\n     * A node from which the first node on list (that is, the unique node p\n     * with p.prev == null && p.next != p) can be reached in O(1) time.\n     * Invariants:\n     * - the first node is always O(1) reachable from head via prev links\n     * - all live nodes are reachable from the first node via succ()\n     * - head != null\n     * - (tmp = head).next != tmp || tmp != head\n     * - head is never gc-unlinked (but may be unlinked)\n     * Non-invariants:\n     * - head.item may or may not be null\n     * - head may not be reachable from the first or last node, or from tail\n     ",
    "links" : [ ]
  }, {
    "name" : "tail",
    "type" : "Node<E>",
    "comment" : "\n     * A node from which the last node on list (that is, the unique node p\n     * with p.next == null && p.prev != p) can be reached in O(1) time.\n     * Invariants:\n     * - the last node is always O(1) reachable from tail via next links\n     * - all live nodes are reachable from the last node via pred()\n     * - tail != null\n     * - tail is never gc-unlinked (but may be unlinked)\n     * Non-invariants:\n     * - tail.item may or may not be null\n     * - tail may not be reachable from the first or last node, or from head\n     ",
    "links" : [ ]
  }, {
    "name" : "PREV_TERMINATOR",
    "type" : "Node<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NEXT_TERMINATOR",
    "type" : "Node<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOPS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEAD",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  }, {
    "name" : "TAIL",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREV",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NEXT",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITEM",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Node<E> prevTerminator()",
    "returnType" : "Node<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Node<E> nextTerminator()",
    "returnType" : "Node<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Node<E> newNode(E item)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns a new node holding item.  Uses relaxed write because item\n     * can only be seen after piggy-backing publication via CAS.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void linkFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Links e as first element.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void linkLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Links e as last element.\n     ",
    "links" : [ ]
  }, {
    "name" : " void unlink(Node<E> x)",
    "returnType" : "void",
    "comment" : "\n     * Unlinks non-null node x.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void unlinkFirst(Node<E> first, Node<E> next)",
    "returnType" : "void",
    "comment" : "\n     * Unlinks non-null first node.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void unlinkLast(Node<E> last, Node<E> prev)",
    "returnType" : "void",
    "comment" : "\n     * Unlinks non-null last node.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void updateHead()",
    "returnType" : "void",
    "comment" : "\n     * Guarantees that any node which was unlinked before a call to\n     * this method will be unreachable from head after it returns.\n     * Does not guarantee to eliminate slack, only that head will\n     * point to a node that was active while this method was running.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void updateTail()",
    "returnType" : "void",
    "comment" : "\n     * Guarantees that any node which was unlinked before a call to\n     * this method will be unreachable from tail after it returns.\n     * Does not guarantee to eliminate slack, only that tail will\n     * point to a node that was active while this method was running.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void skipDeletedPredecessors(Node<E> x)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void skipDeletedSuccessors(Node<E> x)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Node<E> succ(Node<E> p)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns the successor of p, or the first node if p.next has been\n     * linked to self, which will only be true if traversing with a\n     * stale pointer that is now off the list.\n     ",
    "links" : [ ]
  }, {
    "name" : " final Node<E> pred(Node<E> p)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns the predecessor of p, or the last node if p.prev has been\n     * linked to self, which will only be true if traversing with a\n     * stale pointer that is now off the list.\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<E> first()",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns the first node, the unique node p for which:\n     *     p.prev == null && p.next != p\n     * The returned node may or may not be logically deleted.\n     * Guarantees that head is set to the returned node.\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<E> last()",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns the last node, the unique node p for which:\n     *     p.next == null && p.prev != p\n     * The returned node may or may not be logically deleted.\n     * Guarantees that tail is set to the returned node.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E screenNullResult(E v)",
    "returnType" : "E",
    "comment" : "\n     * Returns element unless it is null, in which case throws\n     * NoSuchElementException.\n     *\n     * @param v the element\n     * @return the element\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initHeadTail(Node<E> h, Node<E> t)",
    "returnType" : "void",
    "comment" : "\n     * Initializes head and tail, ensuring invariants hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the front of this deque.\n     * As the deque is unbounded, this method will never throw\n     * {@link IllegalStateException}.\n     *\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "public void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the end of this deque.\n     * As the deque is unbounded, this method will never throw\n     * {@link IllegalStateException}.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "IllegalStateException", "#add" ]
  }, {
    "name" : "public boolean offerFirst(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the front of this deque.\n     * As the deque is unbounded, this method will never return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Deque#offerFirst})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Deque#offerFirst" ]
  }, {
    "name" : "public boolean offerLast(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque.\n     * As the deque is unbounded, this method will never return {@code false}.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @return {@code true} (as specified by {@link Deque#offerLast})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Deque#offerLast", "#add" ]
  }, {
    "name" : "public E peekFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peekLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getLast()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pollFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E pollLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this deque.\n     * As the deque is unbounded, this method will never return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Queue#offer" ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this deque.\n     * As the deque is unbounded, this method will never throw\n     * {@link IllegalStateException} or return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.AbstractCollection#add", "IllegalStateException" ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E remove()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pop()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E element()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void push(E e)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeFirstOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeLastOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the last occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the last element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this deque contains the specified element.\n     * More formally, returns {@code true} if and only if this deque contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o element whose presence in this deque is to be tested\n     * @return {@code true} if this deque contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this collection contains no elements.\n     *\n     * @return {@code true} if this collection contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this deque.  If this deque\n     * contains more than {@code Integer.MAX_VALUE} elements, it\n     * returns {@code Integer.MAX_VALUE}.\n     *\n     * <p>Beware that, unlike in most collections, this method is\n     * <em>NOT</em> a constant-time operation. Because of the\n     * asynchronous nature of these deques, determining the current\n     * number of elements requires traversing them all to count them.\n     * Additionally, it is possible for the size to change during\n     * execution of this method, in which case the returned result\n     * will be inaccurate. Thus, this method is typically not very\n     * useful in concurrent applications.\n     *\n     * @return the number of elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to {@link #removeFirstOccurrence(Object)}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#removeFirstOccurrence(Object)" ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends all of the elements in the specified collection to the end of\n     * this deque, in the order that they are returned by the specified\n     * collection's iterator.  Attempts to {@code addAll} of a deque to\n     * itself result in {@code IllegalArgumentException}.\n     *\n     * @param c the elements to be inserted into this deque\n     * @return {@code true} if this deque changed as a result of the call\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     * @throws IllegalArgumentException if the collection is this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this deque.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object[] toArrayInternal(Object[] a)",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this deque, in\n     * proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this deque.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this deque,\n     * in proper sequence (from first to last element); the runtime\n     * type of the returned array is that of the specified array.  If\n     * the deque fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of\n     * the specified array and the size of this deque.\n     *\n     * <p>If this deque fits in the specified array with room to spare\n     * (i.e., the array has more elements than this deque), the element in\n     * the array immediately following the end of the deque is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as\n     * bridge between array-based and collection-based APIs.  Further,\n     * this method allows precise control over the runtime type of the\n     * output array, and may, under certain circumstances, be used to\n     * save allocation costs.\n     *\n     * <p>Suppose {@code x} is a deque known to contain only strings.\n     * The following code can be used to dump the deque into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the deque are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this deque\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this deque\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this deque in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in reverse\n     * sequential order.  The elements will be returned in order from\n     * last (tail) to first (head).\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this deque in reverse order\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this deque.\n     *\n     * <p>The returned spliterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},\n     * {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.\n     *\n     * @implNote\n     * The {@code Spliterator} implements {@code trySplit} to permit limited\n     * parallelism.\n     *\n     * @return a {@code Spliterator} over the elements in this deque\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#NONNULL", "java.util.Spliterator#CONCURRENT", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this deque to a stream (that is, serializes it).\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @serialData All of the elements (each an {@code E}) in\n     * the proper order, followed by a null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this deque from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Node<E> prevTerminator()", " Node<E> nextTerminator()", " static Node<E> newNode(E item)", "private void linkFirst(E e)", "private void linkLast(E e)", " void unlink(Node<E> x)", "private void unlinkFirst(Node<E> first, Node<E> next)", "private void unlinkLast(Node<E> last, Node<E> prev)", "private final void updateHead()", "private final void updateTail()", "private void skipDeletedPredecessors(Node<E> x)", "private void skipDeletedSuccessors(Node<E> x)", " final Node<E> succ(Node<E> p)", " final Node<E> pred(Node<E> p)", " Node<E> first()", " Node<E> last()", "private E screenNullResult(E v)", "private void initHeadTail(Node<E> h, Node<E> t)", "public void addFirst(E e)", "public void addLast(E e)", "public boolean offerFirst(E e)", "public boolean offerLast(E e)", "public E peekFirst()", "public E peekLast()", "public E getFirst()", "public E getLast()", "public E pollFirst()", "public E pollLast()", "public E removeFirst()", "public E removeLast()", "public boolean offer(E e)", "public boolean add(E e)", "public E poll()", "public E peek()", "public E remove()", "public E pop()", "public E element()", "public void push(E e)", "public boolean removeFirstOccurrence(Object o)", "public boolean removeLastOccurrence(Object o)", "public boolean contains(Object o)", "public boolean isEmpty()", "public int size()", "public boolean remove(Object o)", "public boolean addAll(Collection<? extends E> c)", "public void clear()", "public String toString()", "private Object[] toArrayInternal(Object[] a)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public Iterator<E> iterator()", "public Iterator<E> descendingIterator()", "public Spliterator<E> spliterator()", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "private boolean bulkRemove(Predicate<? super E> filter)", "public void forEach(Consumer<? super E> action)" ],
  "variableNames" : [ "serialVersionUID", "head", "tail", "PREV_TERMINATOR", "NEXT_TERMINATOR", "HOPS", "HEAD", "TAIL", "PREV", "NEXT", "ITEM" ]
}