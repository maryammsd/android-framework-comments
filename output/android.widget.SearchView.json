{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SearchView.java",
  "packageName" : "android.widget",
  "className" : "SearchView",
  "comment" : "\n * A widget that provides a user interface for the user to enter a search query and submit a request\n * to a search provider. Shows a list of query suggestions or results, if available, and allows the\n * user to pick a suggestion or result to launch into.\n *\n * <p>\n * When the SearchView is used in an ActionBar as an action view for a collapsible menu item, it\n * needs to be set to iconified by default using {@link #setIconifiedByDefault(boolean)\n * setIconifiedByDefault(true)}. This is the default, so nothing needs to be done.\n * </p>\n * <p>\n * If you want the search field to always be visible, then call setIconifiedByDefault(false).\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about using {@code SearchView}, read the\n * <a href=\"{@docRoot}guide/topics/search/index.html\">Search</a> developer guide.</p>\n * </div>\n *\n * @see android.view.MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW\n * @attr ref android.R.styleable#SearchView_iconifiedByDefault\n * @attr ref android.R.styleable#SearchView_imeOptions\n * @attr ref android.R.styleable#SearchView_inputType\n * @attr ref android.R.styleable#SearchView_maxWidth\n * @attr ref android.R.styleable#SearchView_queryHint\n ",
  "links" : [ "#setIconifiedByDefault(boolean)" ],
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IME_OPTION_NO_MICROPHONE",
    "type" : "String",
    "comment" : "\n     * Private constant for removing the microphone in the keyboard.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSearchSrcTextView",
    "type" : "SearchAutoComplete",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchEditFrame",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchPlate",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubmitArea",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchButton",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGoButton",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseButton",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceButton",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownAnchor",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchDelegate",
    "type" : "UpdatableTouchDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchSrcTextViewBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchSrtTextViewBoundsExpanded",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTemp",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTemp2",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapsedIcon",
    "type" : "ImageView",
    "comment" : " Icon optionally displayed when the SearchView is collapsed. ",
    "links" : [ ]
  }, {
    "name" : "mSearchHintIcon",
    "type" : "Drawable",
    "comment" : " Drawable used as an EditText hint. ",
    "links" : [ ]
  }, {
    "name" : "mSuggestionRowLayout",
    "type" : "int",
    "comment" : " Resources used by SuggestionsAdapter to display suggestions.",
    "links" : [ ]
  }, {
    "name" : "mSuggestionCommitIconResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceWebSearchIntent",
    "type" : "Intent",
    "comment" : " Intents used for voice searching.",
    "links" : [ ]
  }, {
    "name" : "mVoiceAppSearchIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultQueryHint",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnQueryChangeListener",
    "type" : "OnQueryTextListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCloseListener",
    "type" : "OnCloseListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnQueryTextFocusChangeListener",
    "type" : "OnFocusChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnSuggestionListener",
    "type" : "OnSuggestionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnSearchClickListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconifiedByDefault",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconified",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuggestionsAdapter",
    "type" : "CursorAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubmitButtonEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueryHint",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueryRefinement",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClearingFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceButtonEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOldQueryText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserQuery",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandedInActionView",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapsedImeOptions",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchable",
    "type" : "SearchableInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppSearchData",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateDrawableStateRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleaseCursorRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutsideDrawablesCache",
    "type" : "WeakHashMap<String, Drawable.ConstantState>",
    "comment" : " more than once.",
    "links" : [ ]
  }, {
    "name" : "mOnClickListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextKeyListener",
    "type" : "View.OnKeyListener",
    "comment" : "\n     * React to the user typing \"enter\" or other hardwired keys while typing in\n     * the search box. This handles these special keys while the edit box has\n     * focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnEditorActionListener",
    "type" : "OnEditorActionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnItemClickListener",
    "type" : "OnItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnItemSelectedListener",
    "type" : "OnItemSelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextWatcher",
    "type" : "TextWatcher",
    "comment" : "\n     * Callback to watch the text field for empty/non-empty\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getSuggestionRowLayout()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getSuggestionCommitIconResId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSearchableInfo(SearchableInfo searchable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the SearchableInfo for this SearchView. Properties in the SearchableInfo are used\n     * to display labels, hints, suggestions, create intents for launching search results screens\n     * and controlling other affordances such as a voice button.\n     *\n     * @param searchable a SearchableInfo can be retrieved from the SearchManager, for a specific\n     * activity or a global search provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAppSearchData(Bundle appSearchData)",
    "returnType" : "void",
    "comment" : "\n     * Sets the APP_DATA for legacy SearchDialog use.\n     * @param appSearchData bundle provided by the app when launching the search dialog\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImeOptions(int imeOptions)",
    "returnType" : "void",
    "comment" : "\n     * Sets the IME options on the query text field.\n     *\n     * @see TextView#setImeOptions(int)\n     * @param imeOptions the options to set on the query text field\n     *\n     * @attr ref android.R.styleable#SearchView_imeOptions\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getImeOptions()",
    "returnType" : "int",
    "comment" : "\n     * Returns the IME options set on the query text field.\n     * @return the ime options\n     * @see TextView#setImeOptions(int)\n     *\n     * @attr ref android.R.styleable#SearchView_imeOptions\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInputType(int inputType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the input type on the query text field.\n     *\n     * @see TextView#setInputType(int)\n     * @param inputType the input type to set on the query text field\n     *\n     * @attr ref android.R.styleable#SearchView_inputType\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the input type set on the query text field.\n     * @return the input type\n     *\n     * @attr ref android.R.styleable#SearchView_inputType\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestFocus(int direction, Rect previouslyFocusedRect)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void clearFocus()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setOnQueryTextListener(OnQueryTextListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener for user actions within the SearchView.\n     *\n     * @param listener the listener object that receives callbacks when the user performs\n     * actions in the SearchView such as clicking on buttons or typing a query.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCloseListener(OnCloseListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to inform when the user closes the SearchView.\n     *\n     * @param listener the listener to call when the user closes the SearchView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnQueryTextFocusChangeListener(OnFocusChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to inform when the focus of the query text field changes.\n     *\n     * @param listener the listener to inform of focus changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnSuggestionListener(OnSuggestionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to inform when a suggestion is focused or clicked.\n     *\n     * @param listener the listener to inform of suggestion selection events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnSearchClickListener(OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to inform when the search button is pressed. This is only\n     * relevant when the text field is not visible by default. Calling {@link #setIconified\n     * setIconified(false)} can also cause this listener to be informed.\n     *\n     * @param listener the listener to inform when the search button is clicked or\n     * the text field is programmatically de-iconified.\n     ",
    "links" : [ "#setIconifiedsetIconified(false)" ]
  }, {
    "name" : "public CharSequence getQuery()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the query string currently in the text field.\n     *\n     * @return the query string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQuery(CharSequence query, boolean submit)",
    "returnType" : "void",
    "comment" : "\n     * Sets a query string in the text field and optionally submits the query as well.\n     *\n     * @param query the query string. This replaces any query text already present in the\n     * text field.\n     * @param submit whether to submit the query right now or only update the contents of\n     * text field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQueryHint(@Nullable CharSequence hint)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hint text to display in the query text field. This overrides\n     * any hint specified in the {@link SearchableInfo}.\n     * <p>\n     * This value may be specified as an empty string to prevent any query hint\n     * from being displayed.\n     *\n     * @param hint the hint text to display or {@code null} to clear\n     * @attr ref android.R.styleable#SearchView_queryHint\n     ",
    "links" : [ "android.app.SearchableInfo" ]
  }, {
    "name" : "public CharSequence getQueryHint()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the hint text that will be displayed in the query text field.\n     * <p>\n     * The displayed query hint is chosen in the following order:\n     * <ol>\n     * <li>Non-null value set with {@link #setQueryHint(CharSequence)}\n     * <li>Value specified in XML using\n     *     {@link android.R.styleable#SearchView_queryHint android:queryHint}\n     * <li>Valid string resource ID exposed by the {@link SearchableInfo} via\n     *     {@link SearchableInfo#getHintId()}\n     * <li>Default hint provided by the theme against which the view was\n     *     inflated\n     * </ol>\n     *\n     * @return the displayed query hint text, or {@code null} if none set\n     * @attr ref android.R.styleable#SearchView_queryHint\n     ",
    "links" : [ "android.app.SearchableInfo#getHintId()", "#setQueryHint(CharSequence)", "android.app.SearchableInfo", "android.R.styleable#SearchView_queryHint" ]
  }, {
    "name" : "public void setIconifiedByDefault(boolean iconified)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default or resting state of the search field. If true, a single search icon is\n     * shown by default and expands to show the text field and other buttons when pressed. Also,\n     * if the default state is iconified, then it collapses to that state when the close button\n     * is pressed. Changes to this property will take effect immediately.\n     *\n     * <p>The default value is true.</p>\n     *\n     * @param iconified whether the search field should be iconified by default\n     *\n     * @attr ref android.R.styleable#SearchView_iconifiedByDefault\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIconfiedByDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the default iconified state of the search field.\n     * @return\n     *\n     * @deprecated use {@link #isIconifiedByDefault()}\n     * @attr ref android.R.styleable#SearchView_iconifiedByDefault\n     ",
    "links" : [ "#isIconifiedByDefault()" ]
  }, {
    "name" : "public boolean isIconifiedByDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the default iconified state of the search field.\n     *\n     * @attr ref android.R.styleable#SearchView_iconifiedByDefault\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIconified(boolean iconify)",
    "returnType" : "void",
    "comment" : "\n     * Iconifies or expands the SearchView. Any query text is cleared when iconified. This is\n     * a temporary state and does not override the default iconified state set by\n     * {@link #setIconifiedByDefault(boolean)}. If the default state is iconified, then\n     * a false here will only be valid until the user closes the field. And if the default\n     * state is expanded, then a true here will only clear the text field and not close it.\n     *\n     * @param iconify a true value will collapse the SearchView to an icon, while a false will\n     * expand it.\n     ",
    "links" : [ "#setIconifiedByDefault(boolean)" ]
  }, {
    "name" : "public boolean isIconified()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current iconified state of the SearchView.\n     *\n     * @return true if the SearchView is currently iconified, false if the search field is\n     * fully visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubmitButtonEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables showing a submit button when the query is non-empty. In cases where the SearchView\n     * is being used to filter the contents of the current activity and doesn't launch a separate\n     * results activity, then the submit button should be disabled.\n     *\n     * @param enabled true to show a submit button for submitting queries, false if a submit\n     * button is not required.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSubmitButtonEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the submit button is enabled when necessary or never displayed.\n     *\n     * @return whether the submit button is enabled automatically when necessary\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQueryRefinementEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Specifies if a query refinement button should be displayed alongside each suggestion\n     * or if it should depend on the flags set in the individual items retrieved from the\n     * suggestions provider. Clicking on the query refinement button will replace the text\n     * in the query text field with the text from the suggestion. This flag only takes effect\n     * if a SearchableInfo has been specified with {@link #setSearchableInfo(SearchableInfo)}\n     * and not when using a custom adapter.\n     *\n     * @param enable true if all items should have a query refinement button, false if only\n     * those items that have a query refinement flag set should have the button.\n     *\n     * @see SearchManager#SUGGEST_COLUMN_FLAGS\n     * @see SearchManager#FLAG_QUERY_REFINEMENT\n     ",
    "links" : [ "#setSearchableInfo(SearchableInfo)" ]
  }, {
    "name" : "public boolean isQueryRefinementEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether query refinement is enabled for all items or only specific ones.\n     * @return true if enabled for all items, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuggestionsAdapter(CursorAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * You can set a custom adapter if you wish. Otherwise the default adapter is used to\n     * display the suggestions from the suggestions provider associated with the SearchableInfo.\n     *\n     * @see #setSearchableInfo(SearchableInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public CursorAdapter getSuggestionsAdapter()",
    "returnType" : "CursorAdapter",
    "comment" : "\n     * Returns the adapter used for suggestions, if any.\n     * @return the suggestions adapter\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxWidth(int maxpixels)",
    "returnType" : "void",
    "comment" : "\n     * Makes the view at most this many pixels wide\n     *\n     * @attr ref android.R.styleable#SearchView_maxWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxWidth()",
    "returnType" : "int",
    "comment" : "\n     * Gets the specified maximum width in pixels, if set. Returns zero if\n     * no maximum width was specified.\n     * @return the maximum width of the view\n     *\n     * @attr ref android.R.styleable#SearchView_maxWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getChildBoundsWithinSearchView(View view, Rect rect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getPreferredWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getPreferredHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateViewsVisibility(final boolean collapsed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasVoiceSearch()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSubmitAreaEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSubmitButton(boolean hasText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSubmitArea()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCloseButton()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postUpdateFocusedState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateFocusedState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onQueryRefine(CharSequence queryText)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles the key down event for dealing with action keys.\n     *\n     * @param keyCode This is the keycode of the typed key, and is the same value as\n     *        found in the KeyEvent parameter.\n     * @param event The complete event record for the typed key\n     *\n     * @return true if the event was handled here, or false if not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean onSuggestionsKey(View v, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * React to the user typing while in the suggestions list. First, check for\n     * action keys. If not handled, try refocusing regular characters into the\n     * EditText.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getActionKeyMessage(Cursor c, SearchableInfo.ActionKeyInfo actionKey)",
    "returnType" : "String",
    "comment" : "\n     * For a given suggestion and a given cursor row, get the action message. If\n     * not provided by the specific row/column, also check for a single\n     * definition (for the action key).\n     *\n     * @param c The cursor providing suggestions\n     * @param actionKey The actionkey record being examined\n     *\n     * @return Returns a string, or null if no action key message for this\n     *         suggestion\n     ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getDecoratedHint(CharSequence hintText)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateQueryHint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSearchAutoComplete()",
    "returnType" : "void",
    "comment" : "\n     * Updates the auto-complete text view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateVoiceButton(boolean empty)",
    "returnType" : "void",
    "comment" : "\n     * Update the visibility of the voice button.  There are actually two voice search modes,\n     * either of which will activate the button.\n     * @param empty whether the search query text field is empty. If it is, then the other\n     * criteria apply to make the voice button visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onTextChanged(CharSequence newText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSubmitQuery()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dismissSuggestions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCloseClicked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSearchClicked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onVoiceClicked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onTextFocusChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onActionViewCollapsed()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActionViewExpanded()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustDropDownSizeAndPosition()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean onItemClicked(int position, int actionKey, String actionMsg)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean onItemSelected(int position)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void rewriteQueryFromSuggestion(int position)",
    "returnType" : "void",
    "comment" : "\n     * Query rewriting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean launchSuggestion(int position, int actionKey, String actionMsg)",
    "returnType" : "boolean",
    "comment" : "\n     * Launches an intent based on a suggestion.\n     *\n     * @param position The index of the suggestion to create the intent from.\n     * @param actionKey The key code of the action key that was pressed,\n     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n     * @param actionMsg The message for the action key that was pressed,\n     *        or <code>null</code> if none.\n     * @return true if a successful launch, false if could not (e.g. bad position).\n     ",
    "links" : [ "android.view.KeyEvent#KEYCODE_UNKNOWN" ]
  }, {
    "name" : "private void launchIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Launches an intent, including any special intent handling.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setQuery(CharSequence query)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text in the query box, without updating the suggestions.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void launchQuerySearch(int actionKey, String actionMsg, String query)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Intent createIntent(String action, Uri data, String extraData, String query, int actionKey, String actionMsg)",
    "returnType" : "Intent",
    "comment" : "\n     * Constructs an intent from the given information and the search dialog state.\n     *\n     * @param action Intent action.\n     * @param data Intent data, or <code>null</code>.\n     * @param extraData Data for {@link SearchManager#EXTRA_DATA_KEY} or <code>null</code>.\n     * @param query Intent query, or <code>null</code>.\n     * @param actionKey The key code of the action key that was pressed,\n     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n     * @param actionMsg The message for the action key that was pressed,\n     *        or <code>null</code> if none.\n     * @param mode The search mode, one of the acceptable values for\n     *             {@link SearchManager#SEARCH_MODE}, or {@code null}.\n     * @return The intent.\n     ",
    "links" : [ "android.view.KeyEvent#KEYCODE_UNKNOWN", "android.app.SearchManager#EXTRA_DATA_KEY", "android.app.SearchManager#SEARCH_MODE" ]
  }, {
    "name" : "private Intent createVoiceWebSearchIntent(Intent baseIntent, SearchableInfo searchable)",
    "returnType" : "Intent",
    "comment" : "\n     * Create and return an Intent that can launch the voice search activity for web search.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Intent createVoiceAppSearchIntent(Intent baseIntent, SearchableInfo searchable)",
    "returnType" : "Intent",
    "comment" : "\n     * Create and return an Intent that can launch the voice search activity, perform a specific\n     * voice transcription, and forward the results to the searchable activity.\n     *\n     * @param baseIntent The voice app search intent to start from\n     * @return A completely-configured intent ready to send to the voice search activity\n     ",
    "links" : [ ]
  }, {
    "name" : "private Intent createIntentFromSuggestion(Cursor c, int actionKey, String actionMsg)",
    "returnType" : "Intent",
    "comment" : "\n     * When a particular suggestion has been selected, perform the various lookups required\n     * to use the suggestion.  This includes checking the cursor for suggestion-specific data,\n     * and/or falling back to the XML for defaults;  It also creates REST style Uri data when\n     * the suggestion includes a data id.\n     *\n     * @param c The suggestions cursor, moved to the row of the user's selection\n     * @param actionKey The key code of the action key that was pressed,\n     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n     * @param actionMsg The message for the action key that was pressed,\n     *        or <code>null</code> if none.\n     * @return An intent for the suggestion at the cursor's position.\n     ",
    "links" : [ "android.view.KeyEvent#KEYCODE_UNKNOWN" ]
  }, {
    "name" : "private void forceSuggestionQuery()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isLandscapeMode(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getSuggestionRowLayout()", " int getSuggestionCommitIconResId()", "public void setSearchableInfo(SearchableInfo searchable)", "public void setAppSearchData(Bundle appSearchData)", "public void setImeOptions(int imeOptions)", "public int getImeOptions()", "public void setInputType(int inputType)", "public int getInputType()", "public boolean requestFocus(int direction, Rect previouslyFocusedRect)", "public void clearFocus()", "public void setOnQueryTextListener(OnQueryTextListener listener)", "public void setOnCloseListener(OnCloseListener listener)", "public void setOnQueryTextFocusChangeListener(OnFocusChangeListener listener)", "public void setOnSuggestionListener(OnSuggestionListener listener)", "public void setOnSearchClickListener(OnClickListener listener)", "public CharSequence getQuery()", "public void setQuery(CharSequence query, boolean submit)", "public void setQueryHint(@Nullable CharSequence hint)", "public CharSequence getQueryHint()", "public void setIconifiedByDefault(boolean iconified)", "public boolean isIconfiedByDefault()", "public boolean isIconifiedByDefault()", "public void setIconified(boolean iconify)", "public boolean isIconified()", "public void setSubmitButtonEnabled(boolean enabled)", "public boolean isSubmitButtonEnabled()", "public void setQueryRefinementEnabled(boolean enable)", "public boolean isQueryRefinementEnabled()", "public void setSuggestionsAdapter(CursorAdapter adapter)", "public CursorAdapter getSuggestionsAdapter()", "public void setMaxWidth(int maxpixels)", "public int getMaxWidth()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "private void getChildBoundsWithinSearchView(View view, Rect rect)", "private int getPreferredWidth()", "private int getPreferredHeight()", "private void updateViewsVisibility(final boolean collapsed)", "private boolean hasVoiceSearch()", "private boolean isSubmitAreaEnabled()", "private void updateSubmitButton(boolean hasText)", "private void updateSubmitArea()", "private void updateCloseButton()", "private void postUpdateFocusedState()", "private void updateFocusedState()", "protected void onDetachedFromWindow()", " void onQueryRefine(CharSequence queryText)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "private boolean onSuggestionsKey(View v, int keyCode, KeyEvent event)", "private static String getActionKeyMessage(Cursor c, SearchableInfo.ActionKeyInfo actionKey)", "private CharSequence getDecoratedHint(CharSequence hintText)", "private void updateQueryHint()", "private void updateSearchAutoComplete()", "private void updateVoiceButton(boolean empty)", "private void onTextChanged(CharSequence newText)", "private void onSubmitQuery()", "private void dismissSuggestions()", "private void onCloseClicked()", "private void onSearchClicked()", "private void onVoiceClicked()", " void onTextFocusChanged()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "public void onActionViewCollapsed()", "public void onActionViewExpanded()", "protected Parcelable onSaveInstanceState()", "protected void onRestoreInstanceState(Parcelable state)", "public CharSequence getAccessibilityClassName()", "private void adjustDropDownSizeAndPosition()", "private boolean onItemClicked(int position, int actionKey, String actionMsg)", "private boolean onItemSelected(int position)", "private void rewriteQueryFromSuggestion(int position)", "private boolean launchSuggestion(int position, int actionKey, String actionMsg)", "private void launchIntent(Intent intent)", "private void setQuery(CharSequence query)", "private void launchQuerySearch(int actionKey, String actionMsg, String query)", "private Intent createIntent(String action, Uri data, String extraData, String query, int actionKey, String actionMsg)", "private Intent createVoiceWebSearchIntent(Intent baseIntent, SearchableInfo searchable)", "private Intent createVoiceAppSearchIntent(Intent baseIntent, SearchableInfo searchable)", "private Intent createIntentFromSuggestion(Cursor c, int actionKey, String actionMsg)", "private void forceSuggestionQuery()", " static boolean isLandscapeMode(Context context)" ],
  "variableNames" : [ "DBG", "LOG_TAG", "IME_OPTION_NO_MICROPHONE", "mSearchSrcTextView", "mSearchEditFrame", "mSearchPlate", "mSubmitArea", "mSearchButton", "mGoButton", "mCloseButton", "mVoiceButton", "mDropDownAnchor", "mTouchDelegate", "mSearchSrcTextViewBounds", "mSearchSrtTextViewBoundsExpanded", "mTemp", "mTemp2", "mCollapsedIcon", "mSearchHintIcon", "mSuggestionRowLayout", "mSuggestionCommitIconResId", "mVoiceWebSearchIntent", "mVoiceAppSearchIntent", "mDefaultQueryHint", "mOnQueryChangeListener", "mOnCloseListener", "mOnQueryTextFocusChangeListener", "mOnSuggestionListener", "mOnSearchClickListener", "mIconifiedByDefault", "mIconified", "mSuggestionsAdapter", "mSubmitButtonEnabled", "mQueryHint", "mQueryRefinement", "mClearingFocus", "mMaxWidth", "mVoiceButtonEnabled", "mOldQueryText", "mUserQuery", "mExpandedInActionView", "mCollapsedImeOptions", "mSearchable", "mAppSearchData", "mUpdateDrawableStateRunnable", "mReleaseCursorRunnable", "mOutsideDrawablesCache", "mOnClickListener", "mTextKeyListener", "mOnEditorActionListener", "mOnItemClickListener", "mOnItemSelectedListener", "mTextWatcher" ]
}