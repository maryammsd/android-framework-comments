{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UnicodeSetStringSpan.java",
  "packageName" : "android.icu.impl",
  "className" : "OffsetList",
  "comment" : "\n     * Helper class for UnicodeSetStringSpan.\n     *\n     * <p>List of offsets from the current position from where to try matching\n     * a code point or a string.\n     * Stores offsets rather than indexes to simplify the code and use the same list\n     * for both increments (in span()) and decrements (in spanBack()).\n     *\n     * <p>Assumption: The maximum offset is limited, and the offsets that are stored at any one time\n     * are relatively dense, that is,\n     * there are normally no gaps of hundreds or thousands of offset values.\n     *\n     * <p>This class optionally also tracks the minimum non-negative count for each position,\n     * intended to count the smallest number of elements of any path leading to that position.\n     *\n     * <p>The implementation uses a circular buffer of count integers,\n     * each indicating whether the corresponding offset is in the list,\n     * and its path element count.\n     * This avoids inserting into a sorted list of offsets (or absolute indexes)\n     * and physically moving part of the list.\n     *\n     * <p>Note: In principle, the caller should setMaxLength() to\n     * the maximum of the max string length and U16_LENGTH/U8_LENGTH\n     * to account for \"long\" single code points.\n     *\n     * <p>Note: An earlier version did not track counts and stored only byte flags.\n     * With boolean flags, if maxLength were guaranteed to be no more than 32 or 64,\n     * the list could be stored as bit flags in a single integer.\n     * Rather than handling a circular buffer with a start list index,\n     * the integer would simply be shifted when lower offsets are removed.\n     * UnicodeSet does not have a limit on the lengths of strings.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "list",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "start",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setMaxLength(int maxLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void shift(int delta)",
    "returnType" : "void",
    "comment" : "\n         * Reduces all stored offsets by delta, used when the current position moves by delta.\n         * There must not be any offsets lower than delta.\n         * If there is an offset equal to delta, it is removed.\n         *\n         * @param delta [1..maxLength]\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n         * Adds an offset. The list must not contain it yet.\n         * @param offset [1..maxLength]\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addOffsetAndCount(int offset, int count)",
    "returnType" : "void",
    "comment" : "\n         * Adds an offset and updates its count.\n         * The list may already contain the offset.\n         * @param offset [1..maxLength]\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsOffset(int offset)",
    "returnType" : "boolean",
    "comment" : "\n         * @param offset [1..maxLength]\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCountAtOffset(int offset, int count)",
    "returnType" : "boolean",
    "comment" : "\n         * @param offset [1..maxLength]\n         ",
    "links" : [ ]
  }, {
    "name" : "public int popMinimum(OutputInt outCount)",
    "returnType" : "int",
    "comment" : "\n         * Finds the lowest stored offset from a non-empty list, removes it,\n         * and reduces all other offsets by this minimum.\n         * @return min=[1..maxLength]\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setMaxLength(int maxLength)", "public void clear()", "public boolean isEmpty()", "public void shift(int delta)", "public void addOffset(int offset)", "public void addOffsetAndCount(int offset, int count)", "public boolean containsOffset(int offset)", "public boolean hasCountAtOffset(int offset, int count)", "public int popMinimum(OutputInt outCount)" ],
  "variableNames" : [ "list", "length", "start" ]
}