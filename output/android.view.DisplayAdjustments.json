{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/DisplayAdjustments.java",
  "packageName" : "android.view",
  "className" : "DisplayAdjustments",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "DEFAULT_DISPLAY_ADJUSTMENTS",
    "type" : "DisplayAdjustments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatInfo",
    "type" : "CompatibilityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFixedRotationAdjustments",
    "type" : "FixedRotationAdjustments",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCompatibilityInfo(@Nullable CompatibilityInfo compatInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CompatibilityInfo getCompatibilityInfo()",
    "returnType" : "CompatibilityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setConfiguration(@Nullable Configuration configuration)",
    "returnType" : "void",
    "comment" : "\n     * Updates the configuration for the DisplayAdjustments with new configuration.\n     * Default to EMPTY configuration if new configuration is {@code null}\n     * @param configuration new configuration\n     * @throws IllegalArgumentException if trying to modify DEFAULT_DISPLAY_ADJUSTMENTS\n     ",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFixedRotationAdjustments(FixedRotationAdjustments fixedRotationAdjustments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FixedRotationAdjustments getFixedRotationAdjustments()",
    "returnType" : "FixedRotationAdjustments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean noFlip(@Surface.Rotation int realRotation)",
    "returnType" : "boolean",
    "comment" : " Returns {@code false} if the width and height of display should swap. ",
    "links" : [ ]
  }, {
    "name" : "public void adjustSize(@NonNull Point size, @Surface.Rotation int realRotation)",
    "returnType" : "void",
    "comment" : " Adjusts the given size if possible. ",
    "links" : [ ]
  }, {
    "name" : "public void adjustMetrics(@NonNull DisplayMetrics metrics, @Surface.Rotation int realRotation)",
    "returnType" : "void",
    "comment" : " Adjusts the given metrics if possible. ",
    "links" : [ ]
  }, {
    "name" : "public DisplayCutout getDisplayCutout(@Nullable DisplayCutout realCutout)",
    "returnType" : "DisplayCutout",
    "comment" : " Returns the adjusted cutout if available. Otherwise the original cutout is returned. ",
    "links" : [ ]
  }, {
    "name" : "public int getRotation(@Surface.Rotation int realRotation)",
    "returnType" : "int",
    "comment" : " Returns the adjusted rotation if available. Otherwise the original rotation is returned. ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_DISPLAY_ADJUSTMENTS", "mCompatInfo", "mConfiguration", "mFixedRotationAdjustments" ],
  "methodNames" : [ "public void setCompatibilityInfo(@Nullable CompatibilityInfo compatInfo)", "public CompatibilityInfo getCompatibilityInfo()", "public void setConfiguration(@Nullable Configuration configuration)", "public Configuration getConfiguration()", "public void setFixedRotationAdjustments(FixedRotationAdjustments fixedRotationAdjustments)", "public FixedRotationAdjustments getFixedRotationAdjustments()", "private boolean noFlip(@Surface.Rotation int realRotation)", "public void adjustSize(@NonNull Point size, @Surface.Rotation int realRotation)", "public void adjustMetrics(@NonNull DisplayMetrics metrics, @Surface.Rotation int realRotation)", "public DisplayCutout getDisplayCutout(@Nullable DisplayCutout realCutout)", "public int getRotation(@Surface.Rotation int realRotation)", "public int hashCode()", "public boolean equals(Object o)" ]
}