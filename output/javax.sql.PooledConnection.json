{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/sql/PooledConnection.java",
  "packageName" : "javax.sql",
  "className" : "PooledConnection",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Connection getConnection() throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n   * Creates and returns a <code>Connection</code> object that is a handle\n   * for the physical connection that\n   * this <code>PooledConnection</code> object represents.\n   * The connection pool manager calls this method when an application has\n   * called the method <code>DataSource.getConnection</code> and there are\n   * no <code>PooledConnection</code> objects available. See the\n   * {@link PooledConnection interface description} for more information.\n   *\n   * @return  a <code>Connection</code> object that is a handle to\n   *          this <code>PooledConnection</code> object\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.4\n   ",
    "links" : [ "javax.sql.PooledConnection" ]
  }, {
    "name" : " void close() throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Closes the physical connection that this <code>PooledConnection</code>\n   * object represents.  An application never calls this method directly;\n   * it is called by the connection pool module, or manager.\n   * <P>\n   * See the {@link PooledConnection interface description} for more\n   * information.\n   *\n   * @exception SQLException if a database access error occurs\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.4\n   ",
    "links" : [ "javax.sql.PooledConnection" ]
  }, {
    "name" : " void addConnectionEventListener(ConnectionEventListener listener)",
    "returnType" : "void",
    "comment" : "\n   * Registers the given event listener so that it will be notified\n   * when an event occurs on this <code>PooledConnection</code> object.\n   *\n   * @param listener a component, usually the connection pool manager,\n   *        that has implemented the\n   *        <code>ConnectionEventListener</code> interface and wants to be\n   *        notified when the connection is closed or has an error\n   * @see #removeConnectionEventListener\n   ",
    "links" : [ ]
  }, {
    "name" : " void removeConnectionEventListener(ConnectionEventListener listener)",
    "returnType" : "void",
    "comment" : "\n   * Removes the given event listener from the list of components that\n   * will be notified when an event occurs on this\n   * <code>PooledConnection</code> object.\n   *\n   * @param listener a component, usually the connection pool manager,\n   *        that has implemented the\n   *        <code>ConnectionEventListener</code> interface and\n   *        been registered with this <code>PooledConnection</code> object as\n   *        a listener\n   * @see #addConnectionEventListener\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addStatementEventListener(StatementEventListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Registers a <code>StatementEventListener</code> with this <code>PooledConnection</code> object.  Components that\n         * wish to be notified when  <code>PreparedStatement</code>s created by the\n         * connection are closed or are detected to be invalid may use this method\n         * to register a <code>StatementEventListener</code> with this <code>PooledConnection</code> object.\n         * <p>\n         * @param listener      an component which implements the <code>StatementEventListener</code>\n         *                                      interface that is to be registered with this <code>PooledConnection</code> object\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeStatementEventListener(StatementEventListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Removes the specified <code>StatementEventListener</code> from the list of\n         * components that will be notified when the driver detects that a\n         * <code>PreparedStatement</code> has been closed or is invalid.\n         * <p>\n         * @param listener      the component which implements the\n         *                                      <code>StatementEventListener</code> interface that was previously\n         *                                      registered with this <code>PooledConnection</code> object\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Connection getConnection() throws SQLException", " void close() throws SQLException", " void addConnectionEventListener(ConnectionEventListener listener)", " void removeConnectionEventListener(ConnectionEventListener listener)", "public void addStatementEventListener(StatementEventListener listener)", "public void removeStatementEventListener(StatementEventListener listener)" ],
  "variableNames" : [ ]
}