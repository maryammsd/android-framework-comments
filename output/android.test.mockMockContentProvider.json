{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/mock/MockContentProvider.java",
  "packageName" : "android.test.mock",
  "className" : "MockContentProvider",
  "comment" : "\n * Mock implementation of ContentProvider.  All methods are non-functional and throw\n * {@link java.lang.UnsupportedOperationException}.  Tests can extend this class to\n * implement behavior needed for tests.\n ",
  "variables" : [ {
    "name" : "mIContentProvider",
    "type" : "InversionIContentProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int delete(Uri uri, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getType(Uri uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getTypeAsync(Uri uri, RemoteCallback remoteCallback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(Uri uri, ContentValues values)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onCreate()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int bulkInsert(Uri uri, ContentValues[] values)",
    "returnType" : "int",
    "comment" : "\n     * If you're reluctant to implement this manually, please just call super.bulkInsert().\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attachInfo(Context context, ProviderInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)",
    "returnType" : "ContentProviderResult[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(String method, String request, Bundle args)",
    "returnType" : "Bundle",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getStreamTypes(Uri url, String mimeTypeFilter)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openTypedAssetFile(Uri url, String mimeType, Bundle opts)",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void canonicalizeAsync(Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(Uri url, Bundle args)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(@NonNull Uri uri, int uid, @Intent.AccessUriMode int modeFlags)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public final IContentProvider getIContentProvider()",
    "returnType" : "IContentProvider",
    "comment" : "\n     * Returns IContentProvider which calls back same methods in this class.\n     * By overriding this class, we avoid the mechanism hidden behind ContentProvider\n     * (IPC, etc.)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getIContentProviderBinder()",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void attachInfoForTesting(ContentProvider provider, Context context, ProviderInfo providerInfo)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #attachInfo(Context, android.content.pm.ProviderInfo)}, but for use\n     * when directly instantiating the provider for testing.\n     *\n     * <p>Provided for use by {@code android.test.ProviderTestCase2} and\n     * {@code android.test.RenamingDelegatingContext}.\n     *\n     * @deprecated Use a mocking framework like <a href=\"https://github.com/mockito/mockito\">Mockito</a>.\n     * New tests should be written using the\n     * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Android Testing Support Library</a>.\n     ",
    "links" : [ "#attachInfo" ]
  } ],
  "variableNames" : [ "mIContentProvider" ],
  "methodNames" : [ "public int delete(Uri uri, String selection, String[] selectionArgs)", "public String getType(Uri uri)", "public void getTypeAsync(Uri uri, RemoteCallback remoteCallback)", "public Uri insert(Uri uri, ContentValues values)", "public boolean onCreate()", "public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)", "public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)", "public int bulkInsert(Uri uri, ContentValues[] values)", "public void attachInfo(Context context, ProviderInfo info)", "public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)", "public Bundle call(String method, String request, Bundle args)", "public String[] getStreamTypes(Uri url, String mimeTypeFilter)", "public AssetFileDescriptor openTypedAssetFile(Uri url, String mimeType, Bundle opts)", "public void canonicalizeAsync(Uri uri, RemoteCallback callback)", "public boolean refresh(Uri url, Bundle args)", "public int checkUriPermission(@NonNull Uri uri, int uid, @Intent.AccessUriMode int modeFlags)", "public final IContentProvider getIContentProvider()", "public IBinder getIContentProviderBinder()", "public static void attachInfoForTesting(ContentProvider provider, Context context, ProviderInfo providerInfo)" ]
}