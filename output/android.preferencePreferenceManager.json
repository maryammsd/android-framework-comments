{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/preference/PreferenceManager.java",
  "packageName" : "android.preference",
  "className" : "PreferenceManager",
  "comment" : "\n * Used to help create {@link Preference} hierarchies\n * from activities or XML.\n * <p>\n * In most cases, clients should use\n * {@link PreferenceActivity#addPreferencesFromIntent} or\n * {@link PreferenceActivity#addPreferencesFromResource(int)}.\n *\n * @see PreferenceActivity\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_PREFERENCES",
    "type" : "String",
    "comment" : "\n     * The Activity meta-data key for its XML preference hierarchy.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HAS_SET_DEFAULT_VALUES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivity",
    "type" : "Activity",
    "comment" : "\n     * @see #getActivity()\n     ",
    "links" : [ ]
  }, {
    "name" : "mFragment",
    "type" : "PreferenceFragment",
    "comment" : "\n     * Fragment that owns this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * The context to use. This should always be set.\n     *\n     * @see #mActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "mNextId",
    "type" : "long",
    "comment" : "\n     * The counter for unique IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNextRequestCode",
    "type" : "int",
    "comment" : "\n     * The counter for unique request codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSharedPreferences",
    "type" : "SharedPreferences",
    "comment" : "\n     * Cached shared preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPreferenceDataStore",
    "type" : "PreferenceDataStore",
    "comment" : "\n     * Data store to be used by the Preferences or {@code null} if\n     * {@link android.content.SharedPreferences} should be used.\n     ",
    "links" : [ "android.content.SharedPreferences" ]
  }, {
    "name" : "mEditor",
    "type" : "SharedPreferences.Editor",
    "comment" : "\n     * If in no-commit mode, the shared editor to give out (which will be\n     * committed when exiting no-commit mode).\n     ",
    "links" : [ ]
  }, {
    "name" : "mNoCommit",
    "type" : "boolean",
    "comment" : "\n     * Blocks commits from happening on the shared editor. This is used when\n     * inflating the hierarchy. Do not set this directly, use {@link #setNoCommit(boolean)}\n     ",
    "links" : [ "#setNoCommit" ]
  }, {
    "name" : "mSharedPreferencesName",
    "type" : "String",
    "comment" : "\n     * The SharedPreferences name that will be used for all {@link Preference}s\n     * managed by this instance.\n     ",
    "links" : [ "Preference" ]
  }, {
    "name" : "mSharedPreferencesMode",
    "type" : "int",
    "comment" : "\n     * The SharedPreferences mode that will be used for all {@link Preference}s\n     * managed by this instance.\n     ",
    "links" : [ "Preference" ]
  }, {
    "name" : "STORAGE_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STORAGE_DEVICE_PROTECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STORAGE_CREDENTIAL_PROTECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStorage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferenceScreen",
    "type" : "PreferenceScreen",
    "comment" : "\n     * The {@link PreferenceScreen} at the root of the preference hierarchy.\n     ",
    "links" : [ "PreferenceScreen" ]
  }, {
    "name" : "mActivityResultListeners",
    "type" : "List<OnActivityResultListener>",
    "comment" : "\n     * List of activity result listeners.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivityStopListeners",
    "type" : "List<OnActivityStopListener>",
    "comment" : "\n     * List of activity stop listeners.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivityDestroyListeners",
    "type" : "List<OnActivityDestroyListener>",
    "comment" : "\n     * List of activity destroy listeners.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPreferencesScreens",
    "type" : "List<DialogInterface>",
    "comment" : "\n     * List of dialogs that should be dismissed when we receive onNewIntent in\n     * our PreferenceActivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnPreferenceTreeClickListener",
    "type" : "OnPreferenceTreeClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setFragment(PreferenceFragment fragment)",
    "returnType" : "void",
    "comment" : "\n     * Sets the owning preference fragment\n     ",
    "links" : [ ]
  }, {
    "name" : " PreferenceFragment getFragment()",
    "returnType" : "PreferenceFragment",
    "comment" : "\n     * Returns the owning preference fragment, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPreferenceDataStore(PreferenceDataStore dataStore)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@link PreferenceDataStore} to be used by all Preferences associated with this manager\n     * that don't have a custom {@link PreferenceDataStore} assigned via\n     * {@link Preference#setPreferenceDataStore(PreferenceDataStore)}. Also if the data store is\n     * set, the child preferences won't use {@link android.content.SharedPreferences} as long as\n     * they are assigned to this manager.\n     *\n     * @param dataStore The {@link PreferenceDataStore} to be used by this manager.\n     * @see Preference#setPreferenceDataStore(PreferenceDataStore)\n     ",
    "links" : [ "PreferenceDataStore", "PreferenceDataStore", "Preference#setPreferenceDataStore", "android.content.SharedPreferences", "PreferenceDataStore" ]
  }, {
    "name" : "public PreferenceDataStore getPreferenceDataStore()",
    "returnType" : "PreferenceDataStore",
    "comment" : "\n     * Returns the {@link PreferenceDataStore} associated with this manager or {@code null} if\n     * the default {@link android.content.SharedPreferences} are used instead.\n     *\n     * @return The {@link PreferenceDataStore} associated with this manager or {@code null} if none.\n     * @see #setPreferenceDataStore(PreferenceDataStore)\n     ",
    "links" : [ "PreferenceDataStore", "android.content.SharedPreferences", "PreferenceDataStore" ]
  }, {
    "name" : "private List<ResolveInfo> queryIntentActivities(Intent queryIntent)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Returns a list of {@link Activity} (indirectly) that match a given\n     * {@link Intent}.\n     *\n     * @param queryIntent The Intent to match.\n     * @return The list of {@link ResolveInfo} that point to the matched\n     *         activities.\n     ",
    "links" : [ "Activity", "Intent", "ResolveInfo" ]
  }, {
    "name" : " PreferenceScreen inflateFromIntent(Intent queryIntent, PreferenceScreen rootPreferences)",
    "returnType" : "PreferenceScreen",
    "comment" : "\n     * Inflates a preference hierarchy from the preference hierarchies of\n     * {@link Activity Activities} that match the given {@link Intent}. An\n     * {@link Activity} defines its preference hierarchy with meta-data using\n     * the {@link #METADATA_KEY_PREFERENCES} key.\n     * <p>\n     * If a preference hierarchy is given, the new preference hierarchies will\n     * be merged in.\n     *\n     * @param queryIntent The intent to match activities.\n     * @param rootPreferences Optional existing hierarchy to merge the new\n     *            hierarchies into.\n     * @return The root hierarchy (if one was not provided, the new hierarchy's\n     *         root).\n     ",
    "links" : [ "Activity", "Intent", "Activity", "#METADATA_KEY_PREFERENCES" ]
  }, {
    "name" : "public PreferenceScreen inflateFromResource(Context context, @XmlRes int resId, PreferenceScreen rootPreferences)",
    "returnType" : "PreferenceScreen",
    "comment" : "\n     * Inflates a preference hierarchy from XML. If a preference hierarchy is\n     * given, the new preference hierarchies will be merged in.\n     *\n     * @param context The context of the resource.\n     * @param resId The resource ID of the XML to inflate.\n     * @param rootPreferences Optional existing hierarchy to merge the new\n     *            hierarchies into.\n     * @return The root hierarchy (if one was not provided, the new hierarchy's\n     *         root).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PreferenceScreen createPreferenceScreen(Context context)",
    "returnType" : "PreferenceScreen",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long getNextId()",
    "returnType" : "long",
    "comment" : "\n     * Called by a preference to get a unique ID in its hierarchy.\n     *\n     * @return A unique ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSharedPreferencesName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the current name of the SharedPreferences file that preferences managed by\n     * this will use.\n     *\n     * @return The name that can be passed to {@link Context#getSharedPreferences(String, int)}.\n     * @see Context#getSharedPreferences(String, int)\n     ",
    "links" : [ "Context#getSharedPreferences" ]
  }, {
    "name" : "public void setSharedPreferencesName(String sharedPreferencesName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name of the SharedPreferences file that preferences managed by this\n     * will use.\n     *\n     * <p>If custom {@link PreferenceDataStore} is set, this won't override its usage.\n     *\n     * @param sharedPreferencesName The name of the SharedPreferences file.\n     * @see Context#getSharedPreferences(String, int)\n     * @see #setPreferenceDataStore(PreferenceDataStore)\n     ",
    "links" : [ "PreferenceDataStore" ]
  }, {
    "name" : "public int getSharedPreferencesMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current mode of the SharedPreferences file that preferences managed by\n     * this will use.\n     *\n     * @return The mode that can be passed to {@link Context#getSharedPreferences(String, int)}.\n     * @see Context#getSharedPreferences(String, int)\n     ",
    "links" : [ "Context#getSharedPreferences" ]
  }, {
    "name" : "public void setSharedPreferencesMode(int sharedPreferencesMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the mode of the SharedPreferences file that preferences managed by this\n     * will use.\n     *\n     * @param sharedPreferencesMode The mode of the SharedPreferences file.\n     * @see Context#getSharedPreferences(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStorageDefault()",
    "returnType" : "void",
    "comment" : "\n     * Sets the storage location used internally by this class to be the default\n     * provided by the hosting {@link Context}.\n     ",
    "links" : [ "Context" ]
  }, {
    "name" : "public void setStorageDeviceProtected()",
    "returnType" : "void",
    "comment" : "\n     * Explicitly set the storage location used internally by this class to be\n     * device-protected storage.\n     * <p>\n     * On devices with direct boot, data stored in this location is encrypted\n     * with a key tied to the physical device, and it can be accessed\n     * immediately after the device has booted successfully, both\n     * <em>before and after</em> the user has authenticated with their\n     * credentials (such as a lock pattern or PIN).\n     * <p>\n     * Because device-protected data is available without user authentication,\n     * you should carefully limit the data you store using this Context. For\n     * example, storing sensitive authentication tokens or passwords in the\n     * device-protected area is strongly discouraged.\n     *\n     * @see Context#createDeviceProtectedStorageContext()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStorageCredentialProtected()",
    "returnType" : "void",
    "comment" : "\n     * Explicitly set the storage location used internally by this class to be\n     * credential-protected storage. This is the default storage area for apps\n     * unless {@code forceDeviceProtectedStorage} was requested.\n     * <p>\n     * On devices with direct boot, data stored in this location is encrypted\n     * with a key tied to user credentials, which can be accessed\n     * <em>only after</em> the user has entered their credentials (such as a\n     * lock pattern or PIN).\n     *\n     * @see Context#createCredentialProtectedStorageContext()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStorageDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the storage location used internally by this class is the\n     * default provided by the hosting {@link Context}.\n     *\n     * @see #setStorageDefault()\n     * @see #setStorageDeviceProtected()\n     ",
    "links" : [ "Context" ]
  }, {
    "name" : "public boolean isStorageDeviceProtected()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the storage location used internally by this class is backed\n     * by device-protected storage.\n     *\n     * @see #setStorageDefault()\n     * @see #setStorageDeviceProtected()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStorageCredentialProtected()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the storage location used internally by this class is backed\n     * by credential-protected storage.\n     *\n     * @see #setStorageDefault()\n     * @see #setStorageDeviceProtected()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences()",
    "returnType" : "SharedPreferences",
    "comment" : "\n     * Gets a {@link SharedPreferences} instance that preferences managed by this will use.\n     *\n     * @return a {@link SharedPreferences} instance pointing to the file that contains the values of\n     *         preferences that are managed by this PreferenceManager. If a\n     *         {@link PreferenceDataStore} has been set, this method returns {@code null}.\n     ",
    "links" : [ "SharedPreferences", "SharedPreferences", "PreferenceDataStore" ]
  }, {
    "name" : "public static SharedPreferences getDefaultSharedPreferences(Context context)",
    "returnType" : "SharedPreferences",
    "comment" : "\n     * Gets a {@link SharedPreferences} instance that points to the default file that is used by\n     * the preference framework in the given context.\n     *\n     * @param context The context of the preferences whose values are wanted.\n     * @return A {@link SharedPreferences} instance that can be used to retrieve and listen\n     *         to values of the preferences.\n     ",
    "links" : [ "SharedPreferences", "SharedPreferences" ]
  }, {
    "name" : "public static String getDefaultSharedPreferencesName(Context context)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name used for storing default shared preferences.\n     *\n     * @see #getDefaultSharedPreferences(Context)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getDefaultSharedPreferencesMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " PreferenceScreen getPreferenceScreen()",
    "returnType" : "PreferenceScreen",
    "comment" : "\n     * Returns the root of the preference hierarchy managed by this class.\n     *\n     * @return The {@link PreferenceScreen} object that is at the root of the hierarchy.\n     ",
    "links" : [ "PreferenceScreen" ]
  }, {
    "name" : " boolean setPreferences(PreferenceScreen preferenceScreen)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the root of the preference hierarchy.\n     *\n     * @param preferenceScreen The root {@link PreferenceScreen} of the preference hierarchy.\n     * @return Whether the {@link PreferenceScreen} given is different than the previous.\n     ",
    "links" : [ "PreferenceScreen", "PreferenceScreen" ]
  }, {
    "name" : "public Preference findPreference(CharSequence key)",
    "returnType" : "Preference",
    "comment" : "\n     * Finds a {@link Preference} based on its key.\n     *\n     * @param key the key of the preference to retrieve\n     * @return the {@link Preference} with the key, or {@code null}\n     * @see PreferenceGroup#findPreference(CharSequence)\n     ",
    "links" : [ "Preference", "Preference" ]
  }, {
    "name" : "public static void setDefaultValues(Context context, @XmlRes int resId, boolean readAgain)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default values from an XML preference file by reading the values defined\n     * by each {@link Preference} item's {@code android:defaultValue} attribute. This should\n     * be called by the application's main activity.\n     * <p>\n     *\n     * @param context The context of the shared preferences.\n     * @param resId The resource ID of the preference XML file.\n     * @param readAgain Whether to re-read the default values.\n     * If false, this method sets the default values only if this\n     * method has never been called in the past (or if the\n     * {@link #KEY_HAS_SET_DEFAULT_VALUES} in the default value shared\n     * preferences file is false). To attempt to set the default values again\n     * bypassing this check, set {@code readAgain} to true.\n     *            <p class=\"note\">\n     *            Note: this will NOT reset preferences back to their default\n     *            values. For that functionality, use\n     *            {@link PreferenceManager#getDefaultSharedPreferences(Context)}\n     *            and clear it followed by a call to this method with this\n     *            parameter set to true.\n     ",
    "links" : [ "Preference", "#KEY_HAS_SET_DEFAULT_VALUES", "PreferenceManager#getDefaultSharedPreferences" ]
  }, {
    "name" : "public static void setDefaultValues(Context context, String sharedPreferencesName, int sharedPreferencesMode, int resId, boolean readAgain)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #setDefaultValues(Context, int, boolean)} but allows\n     * the client to provide the filename and mode of the shared preferences\n     * file.\n     *\n     * @param context The context of the shared preferences.\n     * @param sharedPreferencesName A custom name for the shared preferences file.\n     * @param sharedPreferencesMode The file creation mode for the shared preferences file, such\n     * as {@link android.content.Context#MODE_PRIVATE} or {@link\n     * android.content.Context#MODE_PRIVATE}\n     * @param resId The resource ID of the preference XML file.\n     * @param readAgain Whether to re-read the default values.\n     * If false, this method will set the default values only if this\n     * method has never been called in the past (or if the\n     * {@link #KEY_HAS_SET_DEFAULT_VALUES} in the default value shared\n     * preferences file is false). To attempt to set the default values again\n     * bypassing this check, set {@code readAgain} to true.\n     *            <p class=\"note\">\n     *            Note: this will NOT reset preferences back to their default\n     *            values. For that functionality, use\n     *            {@link PreferenceManager#getDefaultSharedPreferences(Context)}\n     *            and clear it followed by a call to this method with this\n     *            parameter set to true.\n     *\n     * @see #setDefaultValues(Context, int, boolean)\n     * @see #setSharedPreferencesName(String)\n     * @see #setSharedPreferencesMode(int)\n     ",
    "links" : [ "#setDefaultValues", "android.content.Context#MODE_PRIVATE", "#KEY_HAS_SET_DEFAULT_VALUES", "PreferenceManager#getDefaultSharedPreferences" ]
  }, {
    "name" : " SharedPreferences.Editor getEditor()",
    "returnType" : "SharedPreferences.Editor",
    "comment" : "\n     * Returns an editor to use when modifying the shared preferences.\n     *\n     * <p>Do NOT commit unless {@link #shouldCommit()} returns true.\n     *\n     * @return an editor to use to write to shared preferences. If a {@link PreferenceDataStore}\n     *         has been set, this method returns {@code null}.\n     * @see #shouldCommit()\n     ",
    "links" : [ "#shouldCommit", "PreferenceDataStore" ]
  }, {
    "name" : " boolean shouldCommit()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether it is the client's responsibility to commit on the\n     * {@link #getEditor()}. This will return false in cases where the writes\n     * should be batched, for example when inflating preferences from XML.\n     *\n     * <p>If preferences are using {@link PreferenceDataStore} this value is irrelevant.\n     *\n     * @return Whether the client should commit.\n     ",
    "links" : [ "#getEditor", "PreferenceDataStore" ]
  }, {
    "name" : "private void setNoCommit(boolean noCommit)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Activity getActivity()",
    "returnType" : "Activity",
    "comment" : "\n     * Returns the activity that shows the preferences. This is useful for doing\n     * managed queries, but in most cases the use of {@link #getContext()} is\n     * preferred.\n     *\n     * <p>This will return {@code null} if this class was instantiated with a Context\n     * instead of Activity. For example, when setting the default values.\n     *\n     * @return The activity that shows the preferences.\n     * @see #mContext\n     ",
    "links" : [ "#getContext" ]
  }, {
    "name" : " Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Returns the context. This is preferred over {@link #getActivity()} when\n     * possible.\n     *\n     * @return The context.\n     ",
    "links" : [ "#getActivity" ]
  }, {
    "name" : " void registerOnActivityResultListener(OnActivityResultListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener.\n     *\n     * @see OnActivityResultListener\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterOnActivityResultListener(OnActivityResultListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener.\n     *\n     * @see OnActivityResultListener\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityResult(int requestCode, int resultCode, Intent data)",
    "returnType" : "void",
    "comment" : "\n     * Called by the {@link PreferenceManager} to dispatch a subactivity result.\n     ",
    "links" : [ "PreferenceManager" ]
  }, {
    "name" : "public void registerOnActivityStopListener(OnActivityStopListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener.\n     *\n     * @see OnActivityStopListener\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnActivityStopListener(OnActivityStopListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener.\n     *\n     * @see OnActivityStopListener\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityStop()",
    "returnType" : "void",
    "comment" : "\n     * Called by the {@link PreferenceManager} to dispatch the activity stop\n     * event.\n     ",
    "links" : [ "PreferenceManager" ]
  }, {
    "name" : " void registerOnActivityDestroyListener(OnActivityDestroyListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener.\n     *\n     * @see OnActivityDestroyListener\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterOnActivityDestroyListener(OnActivityDestroyListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener.\n     *\n     * @see OnActivityDestroyListener\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Called by the {@link PreferenceManager} to dispatch the activity destroy\n     * event.\n     ",
    "links" : [ "PreferenceManager" ]
  }, {
    "name" : " int getNextRequestCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a request code that is unique for the activity. Each subsequent\n     * call to this method should return another unique request code.\n     *\n     * @return A unique request code that will never be used by anyone other\n     *         than the caller of this method.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addPreferencesScreen(DialogInterface screen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removePreferencesScreen(DialogInterface screen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchNewIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link PreferenceActivity} to dispatch the new Intent event.\n     *\n     * @param intent The new Intent.\n     ",
    "links" : [ "PreferenceActivity" ]
  }, {
    "name" : "private void dismissAllScreens()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setOnPreferenceTreeClickListener(OnPreferenceTreeClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when a {@link Preference} in the\n     * hierarchy rooted at this {@link PreferenceManager} is clicked.\n     *\n     * @param listener The callback to be invoked.\n     ",
    "links" : [ "Preference", "PreferenceManager" ]
  }, {
    "name" : " OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()",
    "returnType" : "OnPreferenceTreeClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "METADATA_KEY_PREFERENCES", "KEY_HAS_SET_DEFAULT_VALUES", "mActivity", "mFragment", "mContext", "mNextId", "mNextRequestCode", "mSharedPreferences", "mPreferenceDataStore", "mEditor", "mNoCommit", "mSharedPreferencesName", "mSharedPreferencesMode", "STORAGE_DEFAULT", "STORAGE_DEVICE_PROTECTED", "STORAGE_CREDENTIAL_PROTECTED", "mStorage", "mPreferenceScreen", "mActivityResultListeners", "mActivityStopListeners", "mActivityDestroyListeners", "mPreferencesScreens", "mOnPreferenceTreeClickListener" ],
  "methodNames" : [ "private void init(Context context)", " void setFragment(PreferenceFragment fragment)", " PreferenceFragment getFragment()", "public void setPreferenceDataStore(PreferenceDataStore dataStore)", "public PreferenceDataStore getPreferenceDataStore()", "private List<ResolveInfo> queryIntentActivities(Intent queryIntent)", " PreferenceScreen inflateFromIntent(Intent queryIntent, PreferenceScreen rootPreferences)", "public PreferenceScreen inflateFromResource(Context context, @XmlRes int resId, PreferenceScreen rootPreferences)", "public PreferenceScreen createPreferenceScreen(Context context)", " long getNextId()", "public String getSharedPreferencesName()", "public void setSharedPreferencesName(String sharedPreferencesName)", "public int getSharedPreferencesMode()", "public void setSharedPreferencesMode(int sharedPreferencesMode)", "public void setStorageDefault()", "public void setStorageDeviceProtected()", "public void setStorageCredentialProtected()", "public boolean isStorageDefault()", "public boolean isStorageDeviceProtected()", "public boolean isStorageCredentialProtected()", "public SharedPreferences getSharedPreferences()", "public static SharedPreferences getDefaultSharedPreferences(Context context)", "public static String getDefaultSharedPreferencesName(Context context)", "private static int getDefaultSharedPreferencesMode()", " PreferenceScreen getPreferenceScreen()", " boolean setPreferences(PreferenceScreen preferenceScreen)", "public Preference findPreference(CharSequence key)", "public static void setDefaultValues(Context context, @XmlRes int resId, boolean readAgain)", "public static void setDefaultValues(Context context, String sharedPreferencesName, int sharedPreferencesMode, int resId, boolean readAgain)", " SharedPreferences.Editor getEditor()", " boolean shouldCommit()", "private void setNoCommit(boolean noCommit)", " Activity getActivity()", " Context getContext()", " void registerOnActivityResultListener(OnActivityResultListener listener)", " void unregisterOnActivityResultListener(OnActivityResultListener listener)", " void dispatchActivityResult(int requestCode, int resultCode, Intent data)", "public void registerOnActivityStopListener(OnActivityStopListener listener)", "public void unregisterOnActivityStopListener(OnActivityStopListener listener)", " void dispatchActivityStop()", " void registerOnActivityDestroyListener(OnActivityDestroyListener listener)", " void unregisterOnActivityDestroyListener(OnActivityDestroyListener listener)", " void dispatchActivityDestroy()", " int getNextRequestCode()", " void addPreferencesScreen(DialogInterface screen)", " void removePreferencesScreen(DialogInterface screen)", " void dispatchNewIntent(Intent intent)", "private void dismissAllScreens()", " void setOnPreferenceTreeClickListener(OnPreferenceTreeClickListener listener)", " OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()" ]
}