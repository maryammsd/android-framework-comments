{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/DelegatingX509Certificate.java",
  "packageName" : "android.security.keystore",
  "className" : "DelegatingX509Certificate",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDelegate",
    "type" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Set<String> getCriticalExtensionOIDs()",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getExtensionValue(String oid)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getNonCriticalExtensionOIDs()",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasUnsupportedCriticalExtension()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBasicConstraints()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Principal getIssuerDN()",
    "returnType" : "Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getIssuerUniqueID()",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getKeyUsage()",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Date getNotAfter()",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Date getNotBefore()",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BigInteger getSerialNumber()",
    "returnType" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSigAlgName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSigAlgOID()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSigAlgParams()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSignature()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Principal getSubjectDN()",
    "returnType" : "Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getSubjectUniqueID()",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getTBSCertificate() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getEncoded() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PublicKey getPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getExtendedKeyUsage() throws CertificateParsingException",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Collection<List<?>> getIssuerAlternativeNames() throws CertificateParsingException",
    "returnType" : "Collection<List<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public X500Principal getIssuerX500Principal()",
    "returnType" : "X500Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Collection<List<?>> getSubjectAlternativeNames() throws CertificateParsingException",
    "returnType" : "Collection<List<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public X500Principal getSubjectX500Principal()",
    "returnType" : "X500Principal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public Set<String> getNonCriticalExtensionOIDs()", "public boolean hasUnsupportedCriticalExtension()", "public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException", "public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException", "public int getBasicConstraints()", "public Principal getIssuerDN()", "public boolean[] getIssuerUniqueID()", "public boolean[] getKeyUsage()", "public Date getNotAfter()", "public Date getNotBefore()", "public BigInteger getSerialNumber()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public byte[] getSignature()", "public Principal getSubjectDN()", "public boolean[] getSubjectUniqueID()", "public byte[] getTBSCertificate() throws CertificateEncodingException", "public int getVersion()", "public byte[] getEncoded() throws CertificateEncodingException", "public PublicKey getPublicKey()", "public String toString()", "public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public List<String> getExtendedKeyUsage() throws CertificateParsingException", "public Collection<List<?>> getIssuerAlternativeNames() throws CertificateParsingException", "public X500Principal getIssuerX500Principal()", "public Collection<List<?>> getSubjectAlternativeNames() throws CertificateParsingException", "public X500Principal getSubjectX500Principal()" ],
  "variableNames" : [ "mDelegate" ]
}