{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/compat/PackageOverride.java",
  "packageName" : "android.app.compat",
  "className" : "PackageOverride",
  "comment" : "\n * An app compat override applied to a given package and change id pairing.\n *\n * A package override contains a list of version ranges with the desired boolean value of\n * the override for the app in this version range. Ranges can be open ended in either direction.\n * An instance of PackageOverride gets created via {@link Builder} and is immutable once created.\n *\n * @hide\n ",
  "links" : [ "Builder" ],
  "variables" : [ {
    "name" : "VALUE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #evaluate(long)} and {@link #evaluateForAllVersions()} indicating that\n     * this PackageOverride does not define the value of the override for the given version.\n     * @hide\n     ",
    "links" : [ "#evaluateForAllVersions()", "#evaluate(long)" ]
  }, {
    "name" : "VALUE_ENABLED",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #evaluate(long)} and {@link #evaluateForAllVersions()} indicating that\n     * the override evaluates to {@code true} for the given version.\n     * @hide\n     ",
    "links" : [ "#evaluateForAllVersions()", "#evaluate(long)" ]
  }, {
    "name" : "VALUE_DISABLED",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #evaluate(long)} and {@link #evaluateForAllVersions()} indicating that\n     * the override evaluates to {@code fakse} for the given version.\n     * @hide\n     ",
    "links" : [ "#evaluateForAllVersions()", "#evaluate(long)" ]
  }, {
    "name" : "mMinVersionCode",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxVersionCode",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int evaluate(long versionCode)",
    "returnType" : "int",
    "comment" : "\n     * Evaluate the override for the given {@code versionCode}. If no override is defined for\n     * the specified version code, {@link #VALUE_UNDEFINED} is returned.\n     * @hide\n     ",
    "links" : [ "#VALUE_UNDEFINED" ]
  }, {
    "name" : "public int evaluateForAllVersions()",
    "returnType" : "int",
    "comment" : "\n     * Evaluate the override independent of version code, i.e. only return an evaluated value if\n     * this range covers all versions, otherwise {@link #VALUE_UNDEFINED} is returned.\n     * @hide\n     ",
    "links" : [ "#VALUE_UNDEFINED" ]
  }, {
    "name" : "public long getMinVersionCode()",
    "returnType" : "long",
    "comment" : "\n     * Returns the minimum APK version code the override applies to.\n     *\n     * @see PackageInfo#getLongVersionCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxVersionCode()",
    "returnType" : "long",
    "comment" : "\n     * Returns the maximum APK version code the override applies from.\n     *\n     * @see PackageInfo#getLongVersionCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns the enabled value for the override. ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static PackageOverride createFromParcel(Parcel in)",
    "returnType" : "PackageOverride",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int evaluate(long versionCode)", "public int evaluateForAllVersions()", "public long getMinVersionCode()", "public long getMaxVersionCode()", "public boolean isEnabled()", "public void writeToParcel(Parcel dest)", "public static PackageOverride createFromParcel(Parcel in)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "VALUE_UNDEFINED", "VALUE_ENABLED", "VALUE_DISABLED", "mMinVersionCode", "mMaxVersionCode", "mEnabled" ]
}