{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/ConsoleHandler.java",
  "packageName" : "java.util.logging",
  "className" : "ConsoleHandler",
  "comment" : "\n * This <tt>Handler</tt> publishes log records to <tt>System.err</tt>.\n * By default the <tt>SimpleFormatter</tt> is used to generate brief summaries.\n * <p>\n * <b>Configuration:</b>\n * By default each <tt>ConsoleHandler</tt> is initialized using the following\n * <tt>LogManager</tt> configuration properties where {@code <handler-name>}\n * refers to the fully-qualified class name of the handler.\n * If properties are not defined\n * (or have invalid values) then the specified default values are used.\n * <ul>\n * <li>   &lt;handler-name&gt;.level\n *        specifies the default level for the <tt>Handler</tt>\n *        (defaults to <tt>Level.INFO</tt>). </li>\n * <li>   &lt;handler-name&gt;.filter\n *        specifies the name of a <tt>Filter</tt> class to use\n *        (defaults to no <tt>Filter</tt>). </li>\n * <li>   &lt;handler-name&gt;.formatter\n *        specifies the name of a <tt>Formatter</tt> class to use\n *        (defaults to <tt>java.util.logging.SimpleFormatter</tt>). </li>\n * <li>   &lt;handler-name&gt;.encoding\n *        the name of the character set encoding to use (defaults to\n *        the default platform encoding). </li>\n * </ul>\n * <p>\n * For example, the properties for {@code ConsoleHandler} would be:\n * <ul>\n * <li>   java.util.logging.ConsoleHandler.level=INFO </li>\n * <li>   java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter </li>\n * </ul>\n * <p>\n * For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n * <ul>\n * <li>   com.foo.MyHandler.level=INFO </li>\n * <li>   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li>\n * </ul>\n * <p>\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "private void configure()",
    "returnType" : "void",
    "comment" : " javadoc.",
    "links" : [ ]
  }, {
    "name" : "public void publish(LogRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Publish a <tt>LogRecord</tt>.\n     * <p>\n     * The logging request was made initially to a <tt>Logger</tt> object,\n     * which initialized the <tt>LogRecord</tt> and forwarded it here.\n     * <p>\n     * @param  record  description of the log event. A null record is\n     *                 silently ignored and is not published\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Override <tt>StreamHandler.close</tt> to do a flush but not\n     * to close the output stream.  That is, we do <b>not</b>\n     * close <tt>System.err</tt>.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void configure()", "public void publish(LogRecord record)", "public void close()" ],
  "variableNames" : [ ]
}