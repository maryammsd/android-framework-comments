{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/xpath/XPathExpression.java",
  "packageName" : "javax.xml.xpath",
  "className" : "XPathExpression",
  "comment" : "\n * <p><code>XPathExpression</code> provides access to compiled XPath expressions.</p>\n *\n * <table id=\"XPathExpression-evaluation\" border=\"1\" cellpadding=\"2\">\n *   <thead>\n *     <tr>\n *       <th colspan=\"2\">Evaluation of XPath Expressions.</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>context</td>\n *       <td>\n *         If a request is made to evaluate the expression in the absence\n * of a context item, an empty document node will be used for the context.\n * For the purposes of evaluating XPath expressions, a DocumentFragment\n * is treated like a Document node.\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>variables</td>\n *      <td>\n *        If the expression contains a variable reference, its value will be found through the {@link XPathVariableResolver}.\n *        An {@link XPathExpressionException} is raised if the variable resolver is undefined or\n *        the resolver returns <code>null</code> for the variable.\n *        The value of a variable must be immutable through the course of any single evaluation.</p>\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>functions</td>\n *      <td>\n *        If the expression contains a function reference, the function will be found through the {@link XPathFunctionResolver}.\n *        An {@link XPathExpressionException} is raised if the function resolver is undefined or\n *        the function resolver returns <code>null</code> for the function.</p>\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>QNames</td>\n *      <td>\n *        QNames in the expression are resolved against the XPath namespace context.\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>result</td>\n *      <td>\n *        This result of evaluating an expression is converted to an instance of the desired return type.\n *        Valid return types are defined in {@link XPathConstants}.\n *        Conversion to the return type follows XPath conversion rules.</p>\n *      </td>\n *    </tr>\n * </table>\n *\n * @author  <a href=\"mailto:Norman.Walsh@Sun.com\">Norman Walsh</a>\n * @author  <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 446598 $, $Date: 2006-09-15 05:55:40 -0700 (Fri, 15 Sep 2006) $\n * @see <a href=\"http://www.w3.org/TR/xpath#section-Expressions\">XML Path Language (XPath) Version 1.0, Expressions</a>\n * @since 1.5\n ",
  "links" : [ "javax.xml.xpath.XPathExpressionException", "javax.xml.xpath.XPathVariableResolver", "javax.xml.xpath.XPathFunctionResolver", "javax.xml.xpath.XPathConstants" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Object evaluate(Object item, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the specified context and return the result as the specified type.</p>\n     *\n     * <p>See <a href=\"#XPathExpression-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in {@link XPathConstants},\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     * If <code>returnType</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param item The starting context (node or node list, for example).\n     * @param returnType The desired return type.\n     *\n     * @return The <code>Object</code> that is the result of evaluating the expression and converting the result to\n     *   <code>returnType</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If  <code>returnType</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants" ]
  }, {
    "name" : "public String evaluate(Object item) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the specified context and return the result as a <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(Object item, QName returnType)} with a <code>returnType</code> of\n     * {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See <a href=\"#XPathExpression-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     *\n     * @param item The starting context (node or node list, for example).\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and converting the result to a\n     *   <code>String</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(Object" ]
  }, {
    "name" : "public Object evaluate(InputSource source, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the context of the specified <code>InputSource</code> and return the result as the\n     * specified type.</p>\n     *\n     * <p>This method builds a data model for the {@link InputSource} and calls\n     * {@link #evaluate(Object item, QName returnType)} on the resulting document object.</p>\n     *\n     * <p>See <a href=\"#XPathExpression-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in {@link XPathConstants},\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If <code>source</code> or <code>returnType</code> is <code>null</code>,\n     * then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param source The <code>InputSource</code> of the document to evaluate over.\n     * @param returnType The desired return type.\n     *\n     * @return The <code>Object</code> that is the result of evaluating the expression and converting the result to\n     *   <code>returnType</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If  <code>source</code> or <code>returnType</code> is <code>null</code>.\n     ",
    "links" : [ "org.xml.sax.InputSource", "javax.xml.xpath.XPathConstants", "#evaluate(Object" ]
  }, {
    "name" : "public String evaluate(InputSource source) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the context of the specified <code>InputSource</code> and return the result as a\n     * <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(InputSource source, QName returnType)} with a <code>returnType</code> of\n     * {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See <a href=\"#XPathExpression-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>source</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param source The <code>InputSource</code> of the document to evaluate over.\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and converting the result to a\n     *   <code>String</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     * @throws NullPointerException If  <code>source</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(InputSource" ]
  } ],
  "methodNames" : [ "public Object evaluate(Object item, QName returnType) throws XPathExpressionException", "public String evaluate(Object item) throws XPathExpressionException", "public Object evaluate(InputSource source, QName returnType) throws XPathExpressionException", "public String evaluate(InputSource source) throws XPathExpressionException" ],
  "variableNames" : [ ]
}