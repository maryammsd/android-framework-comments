{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/ProxyOnBackInvokedDispatcher.java",
  "packageName" : "android.window",
  "className" : "ProxyOnBackInvokedDispatcher",
  "comment" : "\n * {@link OnBackInvokedDispatcher} only used to hold callbacks while an actual\n * dispatcher becomes available. <b>It does not dispatch the back events</b>.\n * <p>\n * Once the actual {@link OnBackInvokedDispatcher} becomes available,\n * {@link #setActualDispatcher(OnBackInvokedDispatcher)} needs to\n * be called and this {@link ProxyOnBackInvokedDispatcher} will pass the callback registrations\n * onto it.\n * <p>\n * This dispatcher will continue to keep track of callback registrations and when a dispatcher is\n * removed or set it will unregister the callbacks from the old one and register them on the new\n * one unless {@link #reset()} is called before.\n *\n * @hide\n ",
  "links" : [ "#reset()", "android.window.ProxyOnBackInvokedDispatcher", "#setActualDispatcher(OnBackInvokedDispatcher)", "android.window.OnBackInvokedDispatcher" ],
  "variables" : [ {
    "name" : "mCallbacks",
    "type" : "List<Pair<OnBackInvokedCallback, Integer>>",
    "comment" : "\n     * List of pair representing an {@link OnBackInvokedCallback} and its associated priority.\n     *\n     * @see OnBackInvokedDispatcher#registerOnBackInvokedCallback(int, OnBackInvokedCallback)\n     ",
    "links" : [ "android.window.OnBackInvokedCallback" ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActualDispatcher",
    "type" : "OnBackInvokedDispatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImeDispatcher",
    "type" : "ImeOnBackInvokedDispatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChecker",
    "type" : "Checker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerOnBackInvokedCallback(int priority, @NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerSystemOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerOnBackInvokedCallbackUnchecked(@NonNull OnBackInvokedCallback callback, int priority)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void transferCallbacksToDispatcher()",
    "returnType" : "void",
    "comment" : "\n     * Transfers all the pending callbacks to the provided dispatcher.\n     * <p>\n     * The callbacks are registered on the dispatcher in the same order as they were added on this\n     * proxy dispatcher.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearCallbacksOnDispatcher()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this {@link ProxyOnBackInvokedDispatcher} so it loses track of the currently\n     * registered callbacks.\n     * <p>\n     * Using this method means that when setting a new {@link OnBackInvokedDispatcher}, the\n     * callbacks registered on the old one won't be removed from it and won't be registered on\n     * the new one.\n     ",
    "links" : [ "android.window.ProxyOnBackInvokedDispatcher", "android.window.OnBackInvokedDispatcher" ]
  }, {
    "name" : "public void setActualDispatcher(@Nullable OnBackInvokedDispatcher actualDispatcher)",
    "returnType" : "void",
    "comment" : "\n     * Sets the actual {@link OnBackInvokedDispatcher} onto which the callbacks will be registered.\n     * <p>\n     * If any dispatcher was already present, all the callbacks that were added via this\n     * {@link ProxyOnBackInvokedDispatcher} will be unregistered from the old one and registered\n     * on the new one if it is not null.\n     * <p>\n     * If you do not wish for the previously registered callbacks to be reassigned to the new\n     * dispatcher, {@link #reset} must be called beforehand.\n     ",
    "links" : [ "#reset", "android.window.ProxyOnBackInvokedDispatcher", "android.window.OnBackInvokedDispatcher" ]
  }, {
    "name" : "public void setImeOnBackInvokedDispatcher(@NonNull ImeOnBackInvokedDispatcher imeDispatcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerOnBackInvokedCallback(int priority, @NonNull OnBackInvokedCallback callback)", "public void registerSystemOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)", "public void unregisterOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)", "private void registerOnBackInvokedCallbackUnchecked(@NonNull OnBackInvokedCallback callback, int priority)", "private void transferCallbacksToDispatcher()", "private void clearCallbacksOnDispatcher()", "public void reset()", "public void setActualDispatcher(@Nullable OnBackInvokedDispatcher actualDispatcher)", "public void setImeOnBackInvokedDispatcher(@NonNull ImeOnBackInvokedDispatcher imeDispatcher)" ],
  "variableNames" : [ "mCallbacks", "mLock", "mActualDispatcher", "mImeDispatcher", "mChecker" ]
}