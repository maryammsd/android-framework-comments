{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/Utils.java",
  "packageName" : "android.media",
  "className" : "Utils",
  "comment" : "\n * Media Utilities\n *\n * This class is hidden but public to allow CTS testing and verification\n * of the static methods and classes.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void sortDistinctRanges(Range<T>[] ranges)",
    "returnType" : "void",
    "comment" : "\n     * Sorts distinct (non-intersecting) range array in ascending order.\n     * @throws java.lang.IllegalArgumentException if ranges are not distinct\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Range<T>[] intersectSortedDistinctRanges(Range<T>[] one, Range<T>[] another)",
    "returnType" : "Range<T>[]",
    "comment" : "\n     * Returns the intersection of two sets of non-intersecting ranges\n     * @param one a sorted set of non-intersecting ranges in ascending order\n     * @param another another sorted set of non-intersecting ranges in ascending order\n     * @return the intersection of the two sets, sorted in ascending order\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int binarySearchDistinctRanges(Range<T>[] ranges, T value)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the range that contains a value in a sorted array of distinct ranges.\n     * @param ranges a sorted array of non-intersecting ranges in ascending order\n     * @param value the value to search for\n     * @return if the value is in one of the ranges, it returns the index of that range.  Otherwise,\n     * the return value is {@code (-1-index)} for the {@code index} of the range that is\n     * immediately following {@code value}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int gcd(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Returns greatest common divisor\n     ",
    "links" : [ ]
  }, {
    "name" : " static Range<Integer> factorRange(Range<Integer> range, int factor)",
    "returnType" : "Range<Integer>",
    "comment" : " Returns the equivalent factored range {@code newrange}, where for every\n     * {@code e}: {@code newrange.contains(e)} implies that {@code range.contains(e * factor)},\n     * and {@code !newrange.contains(e)} implies that {@code !range.contains(e * factor)}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Range<Long> factorRange(Range<Long> range, long factor)",
    "returnType" : "Range<Long>",
    "comment" : " Returns the equivalent factored range {@code newrange}, where for every\n     * {@code e}: {@code newrange.contains(e)} implies that {@code range.contains(e * factor)},\n     * and {@code !newrange.contains(e)} implies that {@code !range.contains(e * factor)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Rational scaleRatio(Rational ratio, int num, int den)",
    "returnType" : "Rational",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Range<Rational> scaleRange(Range<Rational> range, int num, int den)",
    "returnType" : "Range<Rational>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Range<Integer> alignRange(Range<Integer> range, int align)",
    "returnType" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int divUp(int num, int den)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long divUp(long num, long den)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long lcm(int a, int b)",
    "returnType" : "long",
    "comment" : "\n     * Returns least common multiple\n     ",
    "links" : [ ]
  }, {
    "name" : " static Range<Integer> intRangeFor(double v)",
    "returnType" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Range<Long> longRangeFor(double v)",
    "returnType" : "Range<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Size parseSize(Object o, Size fallback)",
    "returnType" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int parseIntSafely(Object o, int fallback)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Range<Integer> parseIntRange(Object o, Range<Integer> fallback)",
    "returnType" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Range<Long> parseLongRange(Object o, Range<Long> fallback)",
    "returnType" : "Range<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Range<Rational> parseRationalRange(Object o, Range<Rational> fallback)",
    "returnType" : "Range<Rational>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Pair<Size, Size> parseSizeRange(Object o)",
    "returnType" : "Pair<Size, Size>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static File getUniqueExternalFile(Context context, String subdirectory, String fileName, String mimeType)",
    "returnType" : "File",
    "comment" : "\n     * Creates a unique file in the specified external storage with the desired name. If the name is\n     * taken, the new file's name will have '(%d)' to avoid overwriting files.\n     *\n     * @param context {@link Context} to query the file name from.\n     * @param subdirectory One of the directories specified in {@link android.os.Environment}\n     * @param fileName desired name for the file.\n     * @param mimeType MIME type of the file to create.\n     * @return the File object in the storage, or null if an error occurs.\n     ",
    "links" : [ "android.content.Context", "android.os.Environment" ]
  }, {
    "name" : " static String getFileDisplayNameFromUri(Context context, Uri uri)",
    "returnType" : "String",
    "comment" : "\n     * Returns a file's display name from its {@link android.content.ContentResolver.SCHEME_FILE}\n     * or {@link android.content.ContentResolver.SCHEME_CONTENT} Uri. The display name of a file\n     * includes its extension.\n     *\n     * @param context Context trying to resolve the file's display name.\n     * @param uri Uri of the file.\n     * @return the file's display name, or the uri's string if something fails or the uri isn't in\n     *            the schemes specified above.\n     ",
    "links" : [ "android.content.ContentResolver.SCHEME_FILE", "android.content.ContentResolver.SCHEME_CONTENT" ]
  }, {
    "name" : "public static String anonymizeBluetoothAddress(@Nullable String address)",
    "returnType" : "String",
    "comment" : "\n     * Convert a Bluetooth MAC address to an anonymized one when exposed to a non privileged app\n     * Must match the implementation of BluetoothUtils.toAnonymizedAddress()\n     * @param address MAC address to be anonymized\n     * @return anonymized MAC address\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String anonymizeBluetoothAddress(int deviceType, @Nullable String address)",
    "returnType" : "String",
    "comment" : "\n     * Convert a Bluetooth MAC address to an anonymized one if the internal device type corresponds\n     * to a Bluetooth.\n     * @param deviceType the internal type of the audio device\n     * @param address MAC address to be anonymized\n     * @return anonymized MAC address\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void sortDistinctRanges(Range<T>[] ranges)", "public static Range<T>[] intersectSortedDistinctRanges(Range<T>[] one, Range<T>[] another)", "public static int binarySearchDistinctRanges(Range<T>[] ranges, T value)", " static int gcd(int a, int b)", " static Range<Integer> factorRange(Range<Integer> range, int factor)", " static Range<Long> factorRange(Range<Long> range, long factor)", "private static Rational scaleRatio(Rational ratio, int num, int den)", " static Range<Rational> scaleRange(Range<Rational> range, int num, int den)", " static Range<Integer> alignRange(Range<Integer> range, int align)", " static int divUp(int num, int den)", " static long divUp(long num, long den)", "private static long lcm(int a, int b)", " static Range<Integer> intRangeFor(double v)", " static Range<Long> longRangeFor(double v)", " static Size parseSize(Object o, Size fallback)", " static int parseIntSafely(Object o, int fallback)", " static Range<Integer> parseIntRange(Object o, Range<Integer> fallback)", " static Range<Long> parseLongRange(Object o, Range<Long> fallback)", " static Range<Rational> parseRationalRange(Object o, Range<Rational> fallback)", " static Pair<Size, Size> parseSizeRange(Object o)", "public static File getUniqueExternalFile(Context context, String subdirectory, String fileName, String mimeType)", " static String getFileDisplayNameFromUri(Context context, Uri uri)", "public static String anonymizeBluetoothAddress(@Nullable String address)", "public static String anonymizeBluetoothAddress(int deviceType, @Nullable String address)" ],
  "variableNames" : [ "TAG" ]
}