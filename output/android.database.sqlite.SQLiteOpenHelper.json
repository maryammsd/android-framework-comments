{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/sqlite/SQLiteOpenHelper.java",
  "packageName" : "android.database.sqlite",
  "className" : "SQLiteOpenHelper",
  "comment" : "\n * A helper class to manage database creation and version management.\n *\n * <p>You create a subclass implementing {@link #onCreate}, {@link #onUpgrade} and\n * optionally {@link #onOpen}, and this class takes care of opening the database\n * if it exists, creating it if it does not, and upgrading it as necessary.\n * Transactions are used to make sure the database is always in a sensible state.\n *\n * <p>This class makes it easy for {@link android.content.ContentProvider}\n * implementations to defer opening and upgrading the database until first use,\n * to avoid blocking application startup with long-running database upgrades.\n *\n * <p>For an example, see the NotePadProvider class in the NotePad sample application,\n * in the <em>samples/</em> directory of the SDK.</p>\n *\n * <p class=\"note\"><strong>Note:</strong> this class assumes\n * monotonically increasing version numbers for upgrades.</p>\n *\n * <p class=\"note\"><strong>Note:</strong> the {@link AutoCloseable} interface was\n * first added in the {@link android.os.Build.VERSION_CODES#Q} release.</p>\n ",
  "links" : [ "#onUpgrade", "android.os.Build.VERSION_CODES#Q", "AutoCloseable", "#onCreate", "#onOpen", "android.content.ContentProvider" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNewVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumSupportedVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDatabase",
    "type" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInitializing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpenParamsBuilder",
    "type" : "SQLiteDatabase.OpenParams.Builder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDatabaseName()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of the SQLite database being opened, as given to\n     * the constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWriteAheadLoggingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the use of write-ahead logging for the database.\n     *\n     * Write-ahead logging cannot be used with read-only databases so the value of\n     * this flag is ignored if the database is opened read-only.\n     *\n     * @param enabled True if write-ahead logging should be enabled, false if it\n     * should be disabled.\n     *\n     * @see SQLiteDatabase#enableWriteAheadLogging()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLookasideConfig(@IntRange(from = 0) final int slotSize, @IntRange(from = 0) final int slotCount)",
    "returnType" : "void",
    "comment" : "\n     * Configures <a href=\"https://sqlite.org/malloc.html#lookaside\">lookaside memory allocator</a>\n     *\n     * <p>This method should be called from the constructor of the subclass,\n     * before opening the database, since lookaside memory configuration can only be changed\n     * when no connection is using it\n     *\n     * <p>SQLite default settings will be used, if this method isn't called.\n     * Use {@code setLookasideConfig(0,0)} to disable lookaside\n     *\n     * <p><strong>Note:</strong> Provided slotSize/slotCount configuration is just a recommendation.\n     * The system may choose different values depending on a device, e.g. lookaside allocations\n     * can be disabled on low-RAM devices\n     *\n     * @param slotSize The size in bytes of each lookaside slot.\n     * @param slotCount The total number of lookaside memory slots per database connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOpenParams(@NonNull SQLiteDatabase.OpenParams openParams)",
    "returnType" : "void",
    "comment" : "\n     * Sets configuration parameters that are used for opening {@link SQLiteDatabase}.\n     * <p>Please note that {@link SQLiteDatabase#CREATE_IF_NECESSARY} flag will always be set when\n     * opening the database\n     *\n     * @param openParams configuration parameters that are used for opening {@link SQLiteDatabase}.\n     * @throws IllegalStateException if the database is already open\n     ",
    "links" : [ "android.database.sqlite.SQLiteDatabase", "android.database.sqlite.SQLiteDatabase#CREATE_IF_NECESSARY" ]
  }, {
    "name" : "private void setOpenParamsBuilder(SQLiteDatabase.OpenParams.Builder openParamsBuilder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIdleConnectionTimeout(@IntRange(from = 0) final long idleConnectionTimeoutMs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum number of milliseconds that SQLite connection is allowed to be idle\n     * before it is closed and removed from the pool.\n     *\n     * <p>This method should be called from the constructor of the subclass,\n     * before opening the database\n     *\n     * <p><b>DO NOT USE</b> this method.\n     * This feature has negative side effects that are very hard to foresee.\n     * See the javadoc of\n     * {@link SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)}\n     * for the details.\n     *\n     * @param idleConnectionTimeoutMs timeout in milliseconds. Use {@link Long#MAX_VALUE} value\n     * to allow unlimited idle connections.\n     *\n     * @see SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)\n     *\n     * @deprecated DO NOT USE this method. See the javadoc of\n     * {@link SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)}\n     * for the details.\n     ",
    "links" : [ "#MAX_VALUE", "SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)" ]
  }, {
    "name" : "public SQLiteDatabase getWritableDatabase()",
    "returnType" : "SQLiteDatabase",
    "comment" : "\n     * Create and/or open a database that will be used for reading and writing.\n     * The first time this is called, the database will be opened and\n     * {@link #onCreate}, {@link #onUpgrade} and/or {@link #onOpen} will be\n     * called.\n     *\n     * <p>Once opened successfully, the database is cached, so you can\n     * call this method every time you need to write to the database.\n     * (Make sure to call {@link #close} when you no longer need the database.)\n     * Errors such as bad permissions or a full disk may cause this method\n     * to fail, but future attempts may succeed if the problem is fixed.</p>\n     *\n     * <p class=\"caution\">Database upgrade may take a long time, you\n     * should not call this method from the application main thread, including\n     * from {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.\n     *\n     * @throws SQLiteException if the database cannot be opened for writing\n     * @return a read/write database object valid until {@link #close} is called\n     ",
    "links" : [ "android.content.ContentProvider#onCreate", "#onUpgrade", "#close", "#onCreate", "#onOpen" ]
  }, {
    "name" : "public SQLiteDatabase getReadableDatabase()",
    "returnType" : "SQLiteDatabase",
    "comment" : "\n     * Create and/or open a database.  This will be the same object returned by\n     * {@link #getWritableDatabase} unless some problem, such as a full disk,\n     * requires the database to be opened read-only.  In that case, a read-only\n     * database object will be returned.  If the problem is fixed, a future call\n     * to {@link #getWritableDatabase} may succeed, in which case the read-only\n     * database object will be closed and the read/write object will be returned\n     * in the future.\n     *\n     * <p class=\"caution\">Like {@link #getWritableDatabase}, this method may\n     * take a long time to return, so you should not call it from the\n     * application main thread, including from\n     * {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.\n     *\n     * @throws SQLiteException if the database cannot be opened\n     * @return a database object valid until {@link #getWritableDatabase}\n     *     or {@link #close} is called.\n     ",
    "links" : [ "android.content.ContentProvider#onCreate", "#getWritableDatabase", "#close" ]
  }, {
    "name" : "private SQLiteDatabase getDatabaseLocked(boolean writable)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setFilePermissionsForDb(String dbPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close()",
    "returnType" : "void",
    "comment" : "\n     * Close any open database object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigure(SQLiteDatabase db)",
    "returnType" : "void",
    "comment" : "\n     * Called when the database connection is being configured, to enable features such as\n     * write-ahead logging or foreign key support.\n     * <p>\n     * This method is called before {@link #onCreate}, {@link #onUpgrade}, {@link #onDowngrade}, or\n     * {@link #onOpen} are called. It should not modify the database except to configure the\n     * database connection as required.\n     * </p>\n     * <p>\n     * This method should only call methods that configure the parameters of the database\n     * connection, such as {@link SQLiteDatabase#enableWriteAheadLogging}\n     * {@link SQLiteDatabase#setForeignKeyConstraintsEnabled}, {@link SQLiteDatabase#setLocale},\n     * {@link SQLiteDatabase#setMaximumSize}, or executing PRAGMA statements.\n     * </p>\n     *\n     * @param db The database.\n     ",
    "links" : [ "#onUpgrade", "android.database.sqlite.SQLiteDatabase#enableWriteAheadLogging", "android.database.sqlite.SQLiteDatabase#setLocale", "android.database.sqlite.SQLiteDatabase#setMaximumSize", "#onCreate", "#onOpen", "#onDowngrade", "android.database.sqlite.SQLiteDatabase#setForeignKeyConstraintsEnabled" ]
  }, {
    "name" : "public void onBeforeDelete(SQLiteDatabase db)",
    "returnType" : "void",
    "comment" : "\n     * Called before the database is deleted when the version returned by\n     * {@link SQLiteDatabase#getVersion()} is lower than the minimum supported version passed (if at\n     * all) while creating this helper. After the database is deleted, a fresh database with the\n     * given version is created. This will be followed by {@link #onConfigure(SQLiteDatabase)} and\n     * {@link #onCreate(SQLiteDatabase)} being called with a new SQLiteDatabase object\n     *\n     * @param db the database opened with this helper\n     * @see #SQLiteOpenHelper(Context, String, CursorFactory, int, int, DatabaseErrorHandler)\n     * @hide\n     ",
    "links" : [ "android.database.sqlite.SQLiteDatabase#getVersion()", "#onConfigure(SQLiteDatabase)", "#onCreate(SQLiteDatabase)" ]
  }, {
    "name" : "public abstract void onCreate(SQLiteDatabase db)",
    "returnType" : "void",
    "comment" : "\n     * Called when the database is created for the first time. This is where the\n     * creation of tables and the initial population of the tables should happen.\n     *\n     * @param db The database.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)",
    "returnType" : "void",
    "comment" : "\n     * Called when the database needs to be upgraded. The implementation\n     * should use this method to drop tables, add tables, or do anything else it\n     * needs to upgrade to the new schema version.\n     *\n     * <p>\n     * The SQLite ALTER TABLE documentation can be found\n     * <a href=\"http://sqlite.org/lang_altertable.html\">here</a>. If you add new columns\n     * you can use ALTER TABLE to insert them into a live table. If you rename or remove columns\n     * you can use ALTER TABLE to rename the old table, then create the new table and then\n     * populate the new table with the contents of the old table.\n     * </p><p>\n     * This method executes within a transaction.  If an exception is thrown, all changes\n     * will automatically be rolled back.\n     * </p>\n     * <p>\n     * <em>Important:</em> You should NOT modify an existing migration step from version X to X+1\n     * once a build has been released containing that migration step.  If a migration step has an\n     * error and it runs on a device, the step will NOT re-run itself in the future if a fix is made\n     * to the migration step.</p>\n     * <p>For example, suppose a migration step renames a database column from {@code foo} to\n     * {@code bar} when the name should have been {@code baz}.  If that migration step is released\n     * in a build and runs on a user's device, the column will be renamed to {@code bar}.  If the\n     * developer subsequently edits this same migration step to change the name to {@code baz} as\n     * intended, the user devices which have already run this step will still have the name\n     * {@code bar}.  Instead, a NEW migration step should be created to correct the error and rename\n     * {@code bar} to {@code baz}, ensuring the error is corrected on devices which have already run\n     * the migration step with the error.</p>\n     *\n     * @param db The database.\n     * @param oldVersion The old database version.\n     * @param newVersion The new database version.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion)",
    "returnType" : "void",
    "comment" : "\n     * Called when the database needs to be downgraded. This is strictly similar to\n     * {@link #onUpgrade} method, but is called whenever current version is newer than requested one.\n     * However, this method is not abstract, so it is not mandatory for a customer to\n     * implement it. If not overridden, default implementation will reject downgrade and\n     * throws SQLiteException\n     *\n     * <p>\n     * This method executes within a transaction.  If an exception is thrown, all changes\n     * will automatically be rolled back.\n     * </p>\n     *\n     * @param db The database.\n     * @param oldVersion The old database version.\n     * @param newVersion The new database version.\n     ",
    "links" : [ "#onUpgrade" ]
  }, {
    "name" : "public void onOpen(SQLiteDatabase db)",
    "returnType" : "void",
    "comment" : "\n     * Called when the database has been opened.  The implementation\n     * should check {@link SQLiteDatabase#isReadOnly} before updating the\n     * database.\n     * <p>\n     * This method is called after the database connection has been configured\n     * and after the database schema has been created, upgraded or downgraded as necessary.\n     * If the database connection must be configured in some way before the schema\n     * is created, upgraded, or downgraded, do it in {@link #onConfigure} instead.\n     * </p>\n     *\n     * @param db The database.\n     ",
    "links" : [ "android.database.sqlite.SQLiteDatabase#isReadOnly", "#onConfigure" ]
  } ],
  "methodNames" : [ "public String getDatabaseName()", "public void setWriteAheadLoggingEnabled(boolean enabled)", "public void setLookasideConfig(@IntRange(from = 0) final int slotSize, @IntRange(from = 0) final int slotCount)", "public void setOpenParams(@NonNull SQLiteDatabase.OpenParams openParams)", "private void setOpenParamsBuilder(SQLiteDatabase.OpenParams.Builder openParamsBuilder)", "public void setIdleConnectionTimeout(@IntRange(from = 0) final long idleConnectionTimeoutMs)", "public SQLiteDatabase getWritableDatabase()", "public SQLiteDatabase getReadableDatabase()", "private SQLiteDatabase getDatabaseLocked(boolean writable)", "private static void setFilePermissionsForDb(String dbPath)", "public synchronized void close()", "public void onConfigure(SQLiteDatabase db)", "public void onBeforeDelete(SQLiteDatabase db)", "public abstract void onCreate(SQLiteDatabase db)", "public abstract void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)", "public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion)", "public void onOpen(SQLiteDatabase db)" ],
  "variableNames" : [ "TAG", "mContext", "mName", "mNewVersion", "mMinimumSupportedVersion", "mDatabase", "mIsInitializing", "mOpenParamsBuilder" ]
}