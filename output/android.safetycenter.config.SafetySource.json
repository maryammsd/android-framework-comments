{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/safetycenter/config/SafetySource.java",
  "packageName" : "android.safetycenter.config",
  "className" : "SafetySource",
  "comment" : "\n * Data class used to represent the initial configuration of a safety source.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SAFETY_SOURCE_TYPE_STATIC",
    "type" : "int",
    "comment" : "\n     * Static safety source.\n     *\n     * <p>A static safety source is a source completely defined in the Safety Center configuration.\n     * The source is displayed with no icon and neither the description displayed nor the tap\n     * behavior can be changed at runtime. A static safety source cannot have any issue associated\n     * with it.\n     ",
    "links" : [ ]
  }, {
    "name" : "SAFETY_SOURCE_TYPE_DYNAMIC",
    "type" : "int",
    "comment" : "\n     * Dynamic safety source.\n     *\n     * <p>The status, description, tap behavior, and related issues of a dynamic safety source can\n     * be set at runtime by the package that owns the source. The source is displayed with an icon\n     * reflecting the status when part of a collapsible safety sources group.\n     ",
    "links" : [ ]
  }, {
    "name" : "SAFETY_SOURCE_TYPE_ISSUE_ONLY",
    "type" : "int",
    "comment" : "\n     * Issue-only safety source.\n     *\n     * <p>An issue-only safety source is not displayed as an entry in the Safety Center page. The\n     * package that owns an issue-only safety source can set the list of issues associated with the\n     * source at runtime.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_NONE",
    "type" : "int",
    "comment" : " Profile property unspecified. ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_PRIMARY",
    "type" : "int",
    "comment" : "\n     * Even when the active user has managed enabled profiles, a visible safety source will be\n     * displayed as a single entry for the primary profile. For dynamic sources, refresh requests\n     * will be sent to and set requests will be accepted from the primary profile only.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_ALL",
    "type" : "int",
    "comment" : "\n     * When the user has managed enabled profiles, a visible safety source will be displayed as\n     * multiple entries one for each enabled profile. For dynamic sources, refresh requests will be\n     * sent to and set requests will be accepted from all profiles.\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIAL_DISPLAY_STATE_ENABLED",
    "type" : "int",
    "comment" : "\n     * The dynamic safety source will create an enabled entry in the Safety Center page until a set\n     * request is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIAL_DISPLAY_STATE_DISABLED",
    "type" : "int",
    "comment" : "\n     * The dynamic safety source will create a disabled entry in the Safety Center page until a set\n     * request is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIAL_DISPLAY_STATE_HIDDEN",
    "type" : "int",
    "comment" : "\n     * The dynamic safety source will have no entry in the Safety Center page until a set request is\n     * received.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SafetySource>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleForWorkResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSummaryResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntentAction",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfile",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialDisplayState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxSeverityLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchTermsResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoggingAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefreshOnPageOpenAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotificationsAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeduplicationGroup",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageCertificateHashes",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleForPrivateProfileResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : " Returns the type of this safety source. ",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the id of this safety source.\n     *\n     * <p>The id is unique among safety sources in a Safety Center configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of this safety source.\n     *\n     * <p>This is the package that owns the source. The package will receive refresh requests, and\n     * it can send set requests for the source. The package is also used to create an explicit\n     * pending intent from the intent action in the package context.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_STATIC} even if the optional package name field for the\n     *     source is set, for sources of type {@link SafetySource#SAFETY_SOURCE_TYPE_STATIC} use\n     *     {@link SafetySource#getOptionalPackageName()}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#getOptionalPackageName()", "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_STATIC" ]
  }, {
    "name" : "public String getOptionalPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of this safety source or null if undefined.\n     *\n     * <p>This is the package that owns the source.\n     *\n     * <p>The package is always defined for sources of type dynamic and issue-only. The package will\n     * receive refresh requests, and it can send set requests for sources of type dynamic and\n     * issue-only. The package is also used to create an explicit pending intent in the package\n     * context from the intent action if defined.\n     *\n     * <p>The package is optional for sources of type static. If present, the package is used to\n     * create an explicit pending intent in the package context from the intent action.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleResId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource id of the title of this safety source.\n     *\n     * <p>The id refers to a string resource that is either accessible from any resource context or\n     * that is accessible from the same resource context that was used to load the Safety Center\n     * configuration. The id is {@link Resources#ID_NULL} when a title is not provided.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY", "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : "public int getTitleForWorkResId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource id of the title for work of this safety source.\n     *\n     * <p>The id refers to a string resource that is either accessible from any resource context or\n     * that is accessible from the same resource context that was used to load the Safety Center\n     * configuration. The id is {@link Resources#ID_NULL} when a title for work is not provided.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY} or if the profile property of the source is\n     *     set to {@link SafetySource#PROFILE_PRIMARY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY", "android.content.res.Resources#ID_NULL", "android.safetycenter.config.SafetySource#PROFILE_PRIMARY" ]
  }, {
    "name" : "public int getTitleForPrivateProfileResId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource id of the title for private profile of this safety source.\n     *\n     * <p>The id refers to a string resource that is either accessible from any resource context or\n     * that is accessible from the same resource context that was used to load the Safety Center\n     * configuration. The id is {@link Resources#ID_NULL} when a title for private profile is not\n     * provided.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY} or if the profile property of the source is\n     *     set to {@link SafetySource#PROFILE_PRIMARY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY", "android.content.res.Resources#ID_NULL", "android.safetycenter.config.SafetySource#PROFILE_PRIMARY" ]
  }, {
    "name" : "public int getSummaryResId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource id of the summary of this safety source.\n     *\n     * <p>The id refers to a string resource that is either accessible from any resource context or\n     * that is accessible from the same resource context that was used to load the Safety Center\n     * configuration. The id is {@link Resources#ID_NULL} when a summary is not provided.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY", "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : "public String getIntentAction()",
    "returnType" : "String",
    "comment" : "\n     * Returns the intent action of this safety source.\n     *\n     * <p>An intent created from the intent action should resolve to a public activity. If the\n     * source is displayed as an entry in the Safety Center page, and if the action is set to {@code\n     * null} or if it does not resolve to an activity the source will be marked as disabled.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY" ]
  }, {
    "name" : "public int getProfile()",
    "returnType" : "int",
    "comment" : " Returns the profile property of this safety source. ",
    "links" : [ ]
  }, {
    "name" : "public int getInitialDisplayState()",
    "returnType" : "int",
    "comment" : "\n     * Returns the initial display state of this safety source.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_STATIC} or {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY", "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_STATIC" ]
  }, {
    "name" : "public int getMaxSeverityLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum severity level of this safety source.\n     *\n     * <p>The maximum severity level dictates the maximum severity level values that can be used in\n     * the source status or the source issues when setting the source data at runtime. A source can\n     * always send a status severity level of at least {@link\n     * android.safetycenter.SafetySourceData#SEVERITY_LEVEL_INFORMATION} even if the maximum\n     * severity level is set to a lower value.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_STATIC}\n     ",
    "links" : [ "android.safetycenter.SafetySourceData#SEVERITY_LEVEL_INFORMATION", "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_STATIC" ]
  }, {
    "name" : "public int getSearchTermsResId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource id of the search terms of this safety source.\n     *\n     * <p>The id refers to a string resource that is either accessible from any resource context or\n     * that is accessible from the same resource context that was used to load the Safety Center\n     * configuration. The id is {@link Resources#ID_NULL} when search terms are not provided.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_ISSUE_ONLY", "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : "public boolean isLoggingAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the logging allowed property of this safety source.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_STATIC}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_STATIC" ]
  }, {
    "name" : "public boolean isRefreshOnPageOpenAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the refresh on page open allowed property of this safety source.\n     *\n     * <p>If set to {@code true}, a refresh request will be sent to the source when the Safety\n     * Center page is opened.\n     *\n     * @throws UnsupportedOperationException if the source is of type {@link\n     *     SafetySource#SAFETY_SOURCE_TYPE_STATIC}\n     ",
    "links" : [ "android.safetycenter.config.SafetySource#SAFETY_SOURCE_TYPE_STATIC" ]
  }, {
    "name" : "public boolean areNotificationsAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether Safety Center may post Notifications about issues reported by this {@link\n     * SafetySource}.\n     *\n     * @see Builder#setNotificationsAllowed(boolean)\n     ",
    "links" : [ "android.safetycenter.config.SafetySource" ]
  }, {
    "name" : "public String getDeduplicationGroup()",
    "returnType" : "String",
    "comment" : "\n     * Returns the deduplication group this source belongs to.\n     *\n     * <p>Sources which are part of the same deduplication group can coordinate to deduplicate their\n     * issues.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getPackageCertificateHashes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a set of package certificate hashes representing valid signed packages that represent\n     * this {@link SafetySource}.\n     *\n     * <p>If one or more certificate hashes are set, Safety Center will validate that a package\n     * calling {@link android.safetycenter.SafetyCenterManager#setSafetySourceData} is signed with\n     * one of the certificates provided.\n     *\n     * <p>The default value is an empty {@code Set}, in which case only the package name is\n     * validated.\n     *\n     * @see Builder#addPackageCertificateHash(String)\n     ",
    "links" : [ "android.safetycenter.config.SafetySource", "android.safetycenter.SafetyCenterManager#setSafetySourceData" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getType()", "public String getId()", "public String getPackageName()", "public String getOptionalPackageName()", "public int getTitleResId()", "public int getTitleForWorkResId()", "public int getTitleForPrivateProfileResId()", "public int getSummaryResId()", "public String getIntentAction()", "public int getProfile()", "public int getInitialDisplayState()", "public int getMaxSeverityLevel()", "public int getSearchTermsResId()", "public boolean isLoggingAllowed()", "public boolean isRefreshOnPageOpenAllowed()", "public boolean areNotificationsAllowed()", "public String getDeduplicationGroup()", "public Set<String> getPackageCertificateHashes()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "SAFETY_SOURCE_TYPE_STATIC", "SAFETY_SOURCE_TYPE_DYNAMIC", "SAFETY_SOURCE_TYPE_ISSUE_ONLY", "PROFILE_NONE", "PROFILE_PRIMARY", "PROFILE_ALL", "INITIAL_DISPLAY_STATE_ENABLED", "INITIAL_DISPLAY_STATE_DISABLED", "INITIAL_DISPLAY_STATE_HIDDEN", "CREATOR", "mType", "mId", "mPackageName", "mTitleResId", "mTitleForWorkResId", "mSummaryResId", "mIntentAction", "mProfile", "mInitialDisplayState", "mMaxSeverityLevel", "mSearchTermsResId", "mLoggingAllowed", "mRefreshOnPageOpenAllowed", "mNotificationsAllowed", "mDeduplicationGroup", "mPackageCertificateHashes", "mTitleForPrivateProfileResId" ]
}