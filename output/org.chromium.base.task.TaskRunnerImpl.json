{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/task/TaskRunnerImpl.java",
  "packageName" : "org.chromium.base.task",
  "className" : "TaskRunnerImpl",
  "comment" : "\n * Implementation of the abstract class {@link TaskRunnerImpl}. Uses AsyncTasks until\n * native APIs are available.\n ",
  "links" : [ "org.chromium.base.task.TaskRunnerImpl" ],
  "variables" : [ {
    "name" : "sQueue",
    "type" : "ReferenceQueue<Object>",
    "comment" : " cleared.",
    "links" : [ ]
  }, {
    "name" : "sCleaners",
    "type" : "Set<TaskRunnerCleaner>",
    "comment" : " TaskRunnerImpl they're weakly referencing does.",
    "links" : [ ]
  }, {
    "name" : "mTaskTraits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraceEvent",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskRunnerType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeTaskRunnerAndroid",
    "type" : "long",
    "comment" : " been migrated to the native task runner.",
    "links" : [ ]
  }, {
    "name" : "mRunPreNativeTaskClosure",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreNativeTaskLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDidOneTimeInitialization",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreNativeTasks",
    "type" : "LinkedList<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreNativeDelayedTasks",
    "type" : "List<Pair<Runnable, Long>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int clearTaskQueueForTesting()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void destroyGarbageCollectedTaskRunners()",
    "returnType" : "void",
    "comment" : "\n     * The lifecycle for a TaskRunner is very complicated. Some task runners are static and never\n     * destroyed, some have a task posted to them and are immediately allowed to be GC'd by the\n     * creator, but if native isn't initialized the task would be lost if this were to be GC'd.\n     * This makes an explicit destroy impractical as it can't be enforced on static runners, and\n     * wouldn't actually destroy the runner before native initialization as that would cause tasks\n     * to be lost. A finalizer could give us the correct behaviour here, but finalizers are banned\n     * due to the performance cost they impose, and all of the many correctness gotchas around\n     * implementing a finalizer.\n     *\n     * The strategy we've gone with here is to use a ReferenceQueue to keep track of which\n     * TaskRunners are no longer reachable (and may have been GC'd), and to delete the native\n     * counterpart for those TaskRunners by polling the queue when doing non-performance-critical\n     * operations on TaskRunners, like creating a new one. In order to prevent this TaskRunner from\n     * being GC'd before its tasks can be posted to the native runner, PostTask holds a strong\n     * reference to each TaskRunner with a task posted to it before native initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postTask(Runnable task)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void postDelayedTask(Runnable task, long delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Boolean belongsToCurrentThreadInternal()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void oneTimeInitialization()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void schedulePreNativeTask()",
    "returnType" : "void",
    "comment" : "\n     * Must be overridden in subclasses, schedules a call to runPreNativeTask() at an appropriate\n     * time.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean schedulePreNativeDelayedTask(Runnable task, long delay)",
    "returnType" : "boolean",
    "comment" : "\n     * Overridden in subclasses that support Delayed tasks pre-native.\n     *\n     * @return true if the task has been scheduled and does not need to be forwarded to the native\n     *         task runner.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void runPreNativeTask()",
    "returnType" : "void",
    "comment" : " The trace event name is derived from string literals.",
    "links" : [ ]
  }, {
    "name" : " void initNativeTaskRunner()",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int clearTaskQueueForTesting()", "private static void destroyGarbageCollectedTaskRunners()", "public void postTask(Runnable task)", "public void postDelayedTask(Runnable task, long delay)", "protected Boolean belongsToCurrentThreadInternal()", "private void oneTimeInitialization()", "protected void schedulePreNativeTask()", "protected boolean schedulePreNativeDelayedTask(Runnable task, long delay)", "protected void runPreNativeTask()", " void initNativeTaskRunner()" ],
  "variableNames" : [ "sQueue", "sCleaners", "mTaskTraits", "mTraceEvent", "mTaskRunnerType", "mNativeTaskRunnerAndroid", "mRunPreNativeTaskClosure", "mPreNativeTaskLock", "mDidOneTimeInitialization", "mPreNativeTasks", "mPreNativeDelayedTasks" ]
}