{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/attribute/BasicFileAttributeView.java",
  "packageName" : "java.nio.file.attribute",
  "className" : "BasicFileAttributeView",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the attribute view. Attribute views of this type\n     * have the name {@code \"basic\"}.\n     ",
    "links" : [ ]
  }, {
    "name" : " BasicFileAttributes readAttributes() throws IOException",
    "returnType" : "BasicFileAttributes",
    "comment" : "\n     * Reads the basic file attributes as a bulk operation.\n     *\n     * <p> It is implementation specific if all file attributes are read as an\n     * atomic operation with respect to other file system operations.\n     *\n     * @return  the file attributes\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file\n     ",
    "links" : [ "#checkRead(String)" ]
  }, {
    "name" : " void setTimes(FileTime lastModifiedTime, FileTime lastAccessTime, FileTime createTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates any or all of the file's last modified time, last access time,\n     * and create time attributes.\n     *\n     * <p> This method updates the file's timestamp attributes. The values are\n     * converted to the epoch and precision supported by the file system.\n     * Converting from finer to coarser granularities result in precision loss.\n     * The behavior of this method when attempting to set a timestamp that is\n     * not supported or to a value that is outside the range supported by the\n     * underlying file store is not defined. It may or not fail by throwing an\n     * {@code IOException}.\n     *\n     * <p> If any of the {@code lastModifiedTime}, {@code lastAccessTime},\n     * or {@code createTime} parameters has the value {@code null} then the\n     * corresponding timestamp is not changed. An implementation may require to\n     * read the existing values of the file attributes when only some, but not\n     * all, of the timestamp attributes are updated. Consequently, this method\n     * may not be an atomic operation with respect to other file system\n     * operations. Reading and re-writing existing values may also result in\n     * precision loss. If all of the {@code lastModifiedTime}, {@code\n     * lastAccessTime} and {@code createTime} parameters are {@code null} then\n     * this method has no effect.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to change a file's last access time.\n     * <pre>\n     *    Path path = ...\n     *    FileTime time = ...\n     *    Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, time, null);\n     * </pre>\n     *\n     * @param   lastModifiedTime\n     *          the new last modified time, or {@code null} to not change the\n     *          value\n     * @param   lastAccessTime\n     *          the last access time, or {@code null} to not change the value\n     * @param   createTime\n     *          the file's create time, or {@code null} to not change the value\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, its  {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file\n     *\n     * @see java.nio.file.Files#setLastModifiedTime\n     ",
    "links" : [ "#checkWrite(String)" ]
  } ],
  "methodNames" : [ " String name()", " BasicFileAttributes readAttributes() throws IOException", " void setTimes(FileTime lastModifiedTime, FileTime lastAccessTime, FileTime createTime) throws IOException" ],
  "variableNames" : [ ]
}