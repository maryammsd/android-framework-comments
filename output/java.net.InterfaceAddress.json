{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/InterfaceAddress.java",
  "packageName" : "java.net",
  "className" : "InterfaceAddress",
  "comment" : "\n * This class represents a Network Interface address. In short it's an\n * IP address, a subnet mask and a broadcast address when the address is\n * an IPv4 one. An IP address and a network prefix length in the case\n * of IPv6 address.\n *\n * @see java.net.NetworkInterface\n * @since 1.6\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "address",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "broadcast",
    "type" : "Inet4Address",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maskLength",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private short countPrefixLength(InetAddress netmask)",
    "returnType" : "short",
    "comment" : "\n     * Counts the prefix length for the netmask address.\n     *\n     * A valid netmask address must start with a continuous sequence of 1, followed by a continuous\n     * sequence of 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns an {@code InetAddress} for this address.\n     *\n     * @return the {@code InetAddress} for this address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getBroadcast()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns an {@code InetAddress} for the broadcast address\n     * for this InterfaceAddress.\n     * <p>\n     * Only IPv4 networks have broadcast address therefore, in the case\n     * of an IPv6 network, {@code null} will be returned.\n     *\n     * @return the {@code InetAddress} representing the broadcast\n     *         address or {@code null} if there is no broadcast address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getNetworkPrefixLength()",
    "returnType" : "short",
    "comment" : "\n     * Returns the network prefix length for this address. This is also known\n     * as the subnet mask in the context of IPv4 addresses.\n     * Typical IPv4 values would be 8 (255.0.0.0), 16 (255.255.0.0)\n     * or 24 (255.255.255.0). <p>\n     * Typical IPv6 values would be 128 (::1/128) or 10 (fe80::203:baff:fe27:1243/10)\n     *\n     * @return a {@code short} representing the prefix length for the\n     *         subnet of that address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object.\n     * The result is {@code true} if and only if the argument is\n     * not {@code null} and it represents the same interface address as\n     * this object.\n     * <p>\n     * Two instances of {@code InterfaceAddress} represent the same\n     * address if the InetAddress, the prefix length and the broadcast are\n     * the same for both.\n     *\n     * @param   obj   the object to compare against.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see     java.net.InterfaceAddress#hashCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this Interface address.\n     *\n     * @return  a hash code value for this Interface address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Converts this Interface address to a {@code String}. The\n     * string returned is of the form: InetAddress / prefix length [ broadcast address ].\n     *\n     * @return  a string representation of this Interface address.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private short countPrefixLength(InetAddress netmask)", "public InetAddress getAddress()", "public InetAddress getBroadcast()", "public short getNetworkPrefixLength()", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "address", "broadcast", "maskLength" ]
}