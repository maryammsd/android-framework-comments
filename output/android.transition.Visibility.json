{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/transition/Visibility.java",
  "packageName" : "android.transition",
  "className" : "Visibility",
  "comment" : "\n * This transition tracks changes to the visibility of target views in the\n * start and end scenes. Visibility is determined not just by the\n * {@link View#setVisibility(int)} state of views, but also whether\n * views exist in the current view hierarchy. The class is intended to be a\n * utility for subclasses such as {@link Fade}, which use this visibility\n * information to determine the specific animations to run when visibility\n * changes occur. Subclasses should implement one or both of the methods\n * {@link #onAppear(ViewGroup, TransitionValues, int, TransitionValues, int)},\n * {@link #onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int)} or\n * {@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)},\n * {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}.\n ",
  "links" : [ "#onAppear(ViewGroup", "#onDisappear(ViewGroup", "android.transition.Fade", "android.view.View#setVisibility(int)" ],
  "variables" : [ {
    "name" : "PROPNAME_VISIBILITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_SCREEN_LOCATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_IN",
    "type" : "int",
    "comment" : "\n     * Mode used in {@link #setMode(int)} to make the transition\n     * operate on targets that are appearing. Maybe be combined with\n     * {@link #MODE_OUT} to target Visibility changes both in and out.\n     ",
    "links" : [ "#MODE_OUT", "#setMode(int)" ]
  }, {
    "name" : "MODE_OUT",
    "type" : "int",
    "comment" : "\n     * Mode used in {@link #setMode(int)} to make the transition\n     * operate on targets that are disappearing. Maybe be combined with\n     * {@link #MODE_IN} to target Visibility changes both in and out.\n     ",
    "links" : [ "#MODE_IN", "#setMode(int)" ]
  }, {
    "name" : "sTransitionProperties",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuppressLayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSuppressLayout(boolean suppress)",
    "returnType" : "void",
    "comment" : "\n     * This tells the Visibility transition to suppress layout during the transition and release\n     * the suppression after the transition.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMode(@VisibilityMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Changes the transition to support appearing and/or disappearing Views, depending\n     * on <code>mode</code>.\n     *\n     * @param mode The behavior supported by this transition, a combination of\n     *             {@link #MODE_IN} and {@link #MODE_OUT}.\n     * @attr ref android.R.styleable#VisibilityTransition_transitionVisibilityMode\n     ",
    "links" : [ "#MODE_OUT", "#MODE_IN" ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns whether appearing and/or disappearing Views are supported.\n     *\n     * Returns whether appearing and/or disappearing Views are supported. A combination of\n     *         {@link #MODE_IN} and {@link #MODE_OUT}.\n     * @attr ref android.R.styleable#VisibilityTransition_transitionVisibilityMode\n     ",
    "links" : [ "#MODE_OUT", "#MODE_IN" ]
  }, {
    "name" : "public String[] getTransitionProperties()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void captureValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureStartValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureEndValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisible(TransitionValues values)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the view is 'visible' according to the given values\n     * object. This is determined by testing the same properties in the values\n     * object that are used to determine whether the object is appearing or\n     * disappearing in the {@link\n     * Transition#createAnimator(ViewGroup, TransitionValues, TransitionValues)}\n     * method. This method can be called by, for example, subclasses that want\n     * to know whether the object is visible in the same way that Visibility\n     * determines it for the actual animation.\n     *\n     * @param values The TransitionValues object that holds the information by\n     * which visibility is determined.\n     * @return True if the view reference by <code>values</code> is visible,\n     * false otherwise.\n     ",
    "links" : [ "android.transition.Transition#createAnimator(ViewGroup" ]
  }, {
    "name" : "private static VisibilityInfo getVisibilityChangeInfo(TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "VisibilityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable TransitionValues startValues, @Nullable TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Animator onAppear(ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility)",
    "returnType" : "Animator",
    "comment" : "\n     * The default implementation of this method calls\n     * {@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)}.\n     * Subclasses should override this method or\n     * {@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)}.\n     * if they need to create an Animator when targets appear.\n     * The method should only be called by the Visibility class; it is\n     * not intended to be called from external classes.\n     *\n     * @param sceneRoot The root of the transition hierarchy\n     * @param startValues The target values in the start scene\n     * @param startVisibility The target visibility in the start scene\n     * @param endValues The target values in the end scene\n     * @param endVisibility The target visibility in the end scene\n     * @return An Animator to be started at the appropriate time in the\n     * overall transition for this scene change. A null value means no animation\n     * should be run.\n     ",
    "links" : [ "#onAppear(ViewGroup" ]
  }, {
    "name" : "public Animator onAppear(ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "\n     * The default implementation of this method returns a null Animator. Subclasses should\n     * override this method to make targets appear with the desired transition. The\n     * method should only be called from\n     * {@link #onAppear(ViewGroup, TransitionValues, int, TransitionValues, int)}.\n     *\n     * @param sceneRoot The root of the transition hierarchy\n     * @param view The View to make appear. This will be in the target scene's View hierarchy and\n     *             will be VISIBLE.\n     * @param startValues The target values in the start scene\n     * @param endValues The target values in the end scene\n     * @return An Animator to be started at the appropriate time in the\n     * overall transition for this scene change. A null value means no animation\n     * should be run.\n     ",
    "links" : [ "#onAppear(ViewGroup" ]
  }, {
    "name" : "public Animator onDisappear(ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility)",
    "returnType" : "Animator",
    "comment" : "\n     * Subclasses should override this method or\n     * {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}\n     * if they need to create an Animator when targets disappear.\n     * The method should only be called by the Visibility class; it is\n     * not intended to be called from external classes.\n     * <p>\n     * The default implementation of this method attempts to find a View to use to call\n     * {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)},\n     * based on the situation of the View in the View hierarchy. For example,\n     * if a View was simply removed from its parent, then the View will be added\n     * into a {@link android.view.ViewGroupOverlay} and passed as the <code>view</code>\n     * parameter in {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}.\n     * If a visible View is changed to be {@link View#GONE} or {@link View#INVISIBLE},\n     * then it can be used as the <code>view</code> and the visibility will be changed\n     * to {@link View#VISIBLE} for the duration of the animation. However, if a View\n     * is in a hierarchy which is also altering its visibility, the situation can be\n     * more complicated. In general, if a view that is no longer in the hierarchy in\n     * the end scene still has a parent (so its parent hierarchy was removed, but it\n     * was not removed from its parent), then it will be left alone to avoid side-effects from\n     * improperly removing it from its parent. The only exception to this is if\n     * the previous {@link Scene} was {@link Scene#getSceneForLayout(ViewGroup, int,\n     * android.content.Context) created from a layout resource file}, then it is considered\n     * safe to un-parent the starting scene view in order to make it disappear.</p>\n     *\n     * @param sceneRoot The root of the transition hierarchy\n     * @param startValues The target values in the start scene\n     * @param startVisibility The target visibility in the start scene\n     * @param endValues The target values in the end scene\n     * @param endVisibility The target visibility in the end scene\n     * @return An Animator to be started at the appropriate time in the\n     * overall transition for this scene change. A null value means no animation\n     * should be run.\n     ",
    "links" : [ "android.view.View#VISIBLE", "#onDisappear(ViewGroup", "android.transition.Scene", "android.transition.Scene#getSceneForLayout(ViewGroup", "android.view.ViewGroupOverlay", "android.view.View#INVISIBLE", "android.view.View#GONE" ]
  }, {
    "name" : "public boolean isTransitionRequired(TransitionValues startValues, TransitionValues newValues)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Animator onDisappear(ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "\n     * The default implementation of this method returns a null Animator. Subclasses should\n     * override this method to make targets disappear with the desired transition. The\n     * method should only be called from\n     * {@link #onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int)}.\n     *\n     * @param sceneRoot The root of the transition hierarchy\n     * @param view The View to make disappear. This will be in the target scene's View\n     *             hierarchy or in an {@link android.view.ViewGroupOverlay} and will be\n     *             VISIBLE.\n     * @param startValues The target values in the start scene\n     * @param endValues The target values in the end scene\n     * @return An Animator to be started at the appropriate time in the\n     * overall transition for this scene change. A null value means no animation\n     * should be run.\n     ",
    "links" : [ "#onDisappear(ViewGroup", "android.view.ViewGroupOverlay" ]
  } ],
  "methodNames" : [ "public void setSuppressLayout(boolean suppress)", "public void setMode(@VisibilityMode int mode)", "public int getMode()", "public String[] getTransitionProperties()", "private void captureValues(TransitionValues transitionValues)", "public void captureStartValues(TransitionValues transitionValues)", "public void captureEndValues(TransitionValues transitionValues)", "public boolean isVisible(TransitionValues values)", "private static VisibilityInfo getVisibilityChangeInfo(TransitionValues startValues, TransitionValues endValues)", "public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable TransitionValues startValues, @Nullable TransitionValues endValues)", "public Animator onAppear(ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility)", "public Animator onAppear(ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)", "public Animator onDisappear(ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility)", "public boolean isTransitionRequired(TransitionValues startValues, TransitionValues newValues)", "public Animator onDisappear(ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)" ],
  "variableNames" : [ "PROPNAME_VISIBILITY", "PROPNAME_PARENT", "PROPNAME_SCREEN_LOCATION", "MODE_IN", "MODE_OUT", "sTransitionProperties", "mMode", "mSuppressLayout" ]
}