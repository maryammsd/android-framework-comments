{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/util/IpRange.java",
  "packageName" : "android.net.util",
  "className" : "IpRange",
  "comment" : "\n * This class represents an IP range, i.e., a contiguous block of IP addresses defined by a starting\n * and ending IP address. These addresses may not be power-of-two aligned.\n *\n * <p>Conversion to prefixes are deterministic, and will always return the same set of {@link\n * IpPrefix}(es). Ordering of IpPrefix instances is not guaranteed.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "SIGNUM_POSITIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartAddr",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndAddr",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static InetAddress getAsInetAddress(byte[] address)",
    "returnType" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getStartAddr()",
    "returnType" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getEndAddr()",
    "returnType" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<IpPrefix> asIpPrefixes()",
    "returnType" : "List<IpPrefix>",
    "comment" : "\n     * Converts this IP range to a list of IpPrefix instances.\n     *\n     * <p>This method outputs the IpPrefix instances for use in the routing architecture.\n     *\n     * <p>For example, the range 192.0.2.4 - 192.0.3.1 converts to the following prefixes:\n     *\n     * <ul>\n     *   <li>192.0.2.128/25\n     *   <li>192.0.2.64/26\n     *   <li>192.0.2.32/27\n     *   <li>192.0.2.16/28\n     *   <li>192.0.2.8/29\n     *   <li>192.0.2.4/30\n     *   <li>192.0.3.0/31\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<IpPrefix> getSubsetPrefixes(IpPrefix prefix)",
    "returnType" : "List<IpPrefix>",
    "comment" : "\n     * Returns the two prefixes that comprise the given prefix.\n     *\n     * <p>For example, for the prefix 192.0.2.0/24, this will return the two prefixes that combined\n     * make up the current prefix:\n     *\n     * <ul>\n     *   <li>192.0.2.0/25\n     *   <li>192.0.2.128/25\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsRange(IpRange other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the other IP range is contained within this one\n     *\n     * <p>Checks based on byte values. For other to be contained within this IP range, other's\n     * starting address must be greater or equal to the current IpRange's starting address, and the\n     * other's ending address must be less than or equal to the current IP range's ending address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean overlapsRange(IpRange other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the other IP range overlaps with this one\n     *\n     * <p>Checks based on byte values. For there to be overlap, this IpRange's starting address must\n     * be less than the other's ending address, and vice versa.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static BigInteger addrToBigInteger(byte[] addr)",
    "returnType" : "BigInteger",
    "comment" : " Gets the InetAddress in BigInteger form ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SIGNUM_POSITIVE", "mStartAddr", "mEndAddr" ],
  "methodNames" : [ "private static InetAddress getAsInetAddress(byte[] address)", "public InetAddress getStartAddr()", "public InetAddress getEndAddr()", "public List<IpPrefix> asIpPrefixes()", "private static List<IpPrefix> getSubsetPrefixes(IpPrefix prefix)", "public boolean containsRange(IpRange other)", "public boolean overlapsRange(IpRange other)", "public int hashCode()", "public boolean equals(Object obj)", "private static BigInteger addrToBigInteger(byte[] addr)" ]
}