{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Region.java",
  "packageName" : "android.graphics",
  "className" : "Region",
  "comment" : "",
  "variables" : [ {
    "name" : "MAX_POOL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<Region>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeRegion",
    "type" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Region>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setEmpty()",
    "returnType" : "void",
    "comment" : " Set the region to the empty region\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean set(@NonNull Region region)",
    "returnType" : "boolean",
    "comment" : " Set the region to the specified region.\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean set(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : " Set the region to the specified rectangle\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean set(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : " Set the region to the specified rectangle\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPath(@NonNull Path path, @NonNull Region clip)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the region to the area described by the path and clip.\n     * Return true if the resulting region is non-empty. This produces a region\n     * that is identical to the pixels that would be drawn by the path\n     * (with no antialiasing).\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if this region is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean isRect()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region contains a single rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean isComplex()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region contains more than one rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Return a new Rect set to the bounds of the region. If the region is\n     * empty, the Rect will be set to [0, 0, 0, 0]\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBounds(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the Rect to the bounds of the region. If the region is empty, the\n     * Rect will be set to [0, 0, 0, 0]\n     ",
    "links" : [ ]
  }, {
    "name" : "public Path getBoundaryPath()",
    "returnType" : "Path",
    "comment" : "\n     * Return the boundary of the region as a new Path. If the region is empty,\n     * the path will also be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoundaryPath(@NonNull Path path)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the path to the boundary of the region. If the region is empty, the\n     * path will also be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean contains(int x, int y)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region contains the specified point\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean quickContains(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region is a single rectangle (not complex) and it\n     * contains the specified rectangle. Returning false is not a guarantee\n     * that the rectangle is not contained by this region, but return true is a\n     * guarantee that the rectangle is contained by this region.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean quickContains(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region is a single rectangle (not complex) and it\n     * contains the specified rectangle. Returning false is not a guarantee\n     * that the rectangle is not contained by this region, but return true is a\n     * guarantee that the rectangle is contained by this region.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean quickReject(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region is empty, or if the specified rectangle does\n     * not intersect the region. Returning false is not a guarantee that they\n     * intersect, but returning true is a guarantee that they do not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean quickReject(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region is empty, or if the specified rectangle does\n     * not intersect the region. Returning false is not a guarantee that they\n     * intersect, but returning true is a guarantee that they do not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean quickReject(Region rgn)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the region is empty, or if the specified region does not\n     * intersect the region. Returning false is not a guarantee that they\n     * intersect, but returning true is a guarantee that they do not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void translate(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Translate the region by [dx, dy]. If the region is empty, do nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void translate(int dx, int dy, Region dst)",
    "returnType" : "void",
    "comment" : "\n     * Set the dst region to the result of translating this region by [dx, dy].\n     * If this region is empty, then dst will be set to empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float scale)",
    "returnType" : "void",
    "comment" : "\n     * Scale the region by the given scale amount. This re-constructs new region by\n     * scaling the rects that this region consists of. New rectis are computed by scaling \n     * coordinates by float, then rounded by roundf() function to integers. This may results\n     * in less internal rects if 0 < scale < 1. Zero and Negative scale result in\n     * an empty region. If this region is empty, do nothing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void scale(float scale, Region dst)",
    "returnType" : "void",
    "comment" : "\n     * Set the dst region to the result of scaling this region by the given scale amount.\n     * If this region is empty, then dst will be set to empty.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean union(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean op(@NonNull Rect r, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform the specified Op on this region and the specified rect. Return\n     * true if the result of the op is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean op(int left, int top, int right, int bottom, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform the specified Op on this region and the specified rect. Return\n     * true if the result of the op is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean op(@NonNull Region region, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform the specified Op on this region and the specified region. Return\n     * true if the result of the op is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean op(@NonNull Rect rect, @NonNull Region region, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Set this region to the result of performing the Op on the specified rect\n     * and region. Return true if the result is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean op(@NonNull Region region1, @NonNull Region region2, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Set this region to the result of performing the Op on the specified\n     * regions. Return true if the result is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Region obtain()",
    "returnType" : "Region",
    "comment" : "\n     * @return An instance from a pool if such or a new one.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Region obtain(@NonNull Region other)",
    "returnType" : "Region",
    "comment" : "\n     * @return An instance from a pool if such or a new one.\n     *\n     * @param other Region to copy values from for initialization.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycles an instance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel p, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write the region and its pixels to the parcel. The region can be\n     * rebuilt from the parcel by calling CREATOR.createFromParcel().\n     * @param p    Parcel object to write the region data into\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final long ni()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeEquals(long native_r1, long native_r2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeConstructor()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestructor(long native_region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetRegion(long native_dst, long native_src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetRect(long native_dst, int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetPath(long native_dst, long native_path, long native_clip)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetBounds(long native_region, Rect rect)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetBoundaryPath(long native_region, long native_path)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeOp(long native_dst, int left, int top, int right, int bottom, int op)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeOp(long native_dst, Rect rect, long native_region, int op)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeOp(long native_dst, long native_region1, long native_region2, int op)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromParcel(Parcel p)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeWriteToParcel(long native_region, Parcel p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeToString(long native_region)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAX_POOL_SIZE", "sPool", "mNativeRegion", "CREATOR" ],
  "methodNames" : [ "public void setEmpty()", "public boolean set(@NonNull Region region)", "public boolean set(@NonNull Rect r)", "public boolean set(int left, int top, int right, int bottom)", "public boolean setPath(@NonNull Path path, @NonNull Region clip)", "public native boolean isEmpty()", "public native boolean isRect()", "public native boolean isComplex()", "public Rect getBounds()", "public boolean getBounds(@NonNull Rect r)", "public Path getBoundaryPath()", "public boolean getBoundaryPath(@NonNull Path path)", "public native boolean contains(int x, int y)", "public boolean quickContains(@NonNull Rect r)", "public native boolean quickContains(int left, int top, int right, int bottom)", "public boolean quickReject(@NonNull Rect r)", "public native boolean quickReject(int left, int top, int right, int bottom)", "public native boolean quickReject(Region rgn)", "public void translate(int dx, int dy)", "public native void translate(int dx, int dy, Region dst)", "public void scale(float scale)", "public native void scale(float scale, Region dst)", "public final boolean union(@NonNull Rect r)", "public boolean op(@NonNull Rect r, @NonNull Op op)", "public boolean op(int left, int top, int right, int bottom, @NonNull Op op)", "public boolean op(@NonNull Region region, @NonNull Op op)", "public boolean op(@NonNull Rect rect, @NonNull Region region, @NonNull Op op)", "public boolean op(@NonNull Region region1, @NonNull Region region2, @NonNull Op op)", "public String toString()", "public static Region obtain()", "public static Region obtain(@NonNull Region other)", "public void recycle()", "public int describeContents()", "public void writeToParcel(Parcel p, int flags)", "public boolean equals(Object obj)", "protected void finalize() throws Throwable", " final long ni()", "private static native boolean nativeEquals(long native_r1, long native_r2)", "private static native long nativeConstructor()", "private static native void nativeDestructor(long native_region)", "private static native void nativeSetRegion(long native_dst, long native_src)", "private static native boolean nativeSetRect(long native_dst, int left, int top, int right, int bottom)", "private static native boolean nativeSetPath(long native_dst, long native_path, long native_clip)", "private static native boolean nativeGetBounds(long native_region, Rect rect)", "private static native boolean nativeGetBoundaryPath(long native_region, long native_path)", "private static native boolean nativeOp(long native_dst, int left, int top, int right, int bottom, int op)", "private static native boolean nativeOp(long native_dst, Rect rect, long native_region, int op)", "private static native boolean nativeOp(long native_dst, long native_region1, long native_region2, int op)", "private static native long nativeCreateFromParcel(Parcel p)", "private static native boolean nativeWriteToParcel(long native_region, Parcel p)", "private static native String nativeToString(long native_region)" ]
}