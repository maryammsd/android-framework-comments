{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/appwidget/AppWidgetProviderInfo.java",
  "packageName" : "android.appwidget",
  "className" : "AppWidgetProviderInfo",
  "comment" : "\n * Describes the meta data for an installed AppWidget provider.  The fields in this class\n * correspond to the fields in the <code>&lt;appwidget-provider&gt;</code> xml tag.\n ",
  "variables" : [ {
    "name" : "RESIZE_NONE",
    "type" : "int",
    "comment" : "\n     * Widget is not resizable.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * Widget is resizable in the horizontal axis only.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_VERTICAL",
    "type" : "int",
    "comment" : "\n     * Widget is resizable in the vertical axis only.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_BOTH",
    "type" : "int",
    "comment" : "\n     * Widget is resizable in both the horizontal and vertical axes.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_CATEGORY_HOME_SCREEN",
    "type" : "int",
    "comment" : "\n     * Indicates that the widget can be displayed on the home screen. This is the default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_CATEGORY_KEYGUARD",
    "type" : "int",
    "comment" : "\n     * Indicates that the widget can be displayed on the keyguard.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_CATEGORY_SEARCHBOX",
    "type" : "int",
    "comment" : "\n     * Indicates that the widget can be displayed within a space reserved for the search box.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_FEATURE_RECONFIGURABLE",
    "type" : "int",
    "comment" : "\n     * The widget can be reconfigured anytime after it is bound by starting the\n     * {@link #configure} activity.\n     *\n     * @see #widgetFeatures\n     ",
    "links" : [ "#configure" ]
  }, {
    "name" : "WIDGET_FEATURE_HIDE_FROM_PICKER",
    "type" : "int",
    "comment" : "\n     * The widget is added directly by the app, and the host may hide this widget when providing\n     * the user with the list of available widgets to choose from.\n     *\n     * @see AppWidgetManager#requestPinAppWidget(ComponentName, Bundle, PendingIntent)\n     * @see #widgetFeatures\n     ",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "ComponentName",
    "comment" : "\n     * Identity of this AppWidget component.  This component should be a {@link\n     * android.content.BroadcastReceiver}, and it will be sent the AppWidget intents\n     * {@link android.appwidget as described in the AppWidget package documentation}.\n     *\n     * <p>This field corresponds to the <code>android:name</code> attribute in\n     * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.\n     ",
    "links" : [ "android.appwidget" ]
  }, {
    "name" : "minWidth",
    "type" : "int",
    "comment" : "\n     * The default height of the widget when added to a host, in dp. The widget will get\n     * at least this width, and will often be given more, depending on the host.\n     *\n     * <p>This field corresponds to the <code>android:minWidth</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ ]
  }, {
    "name" : "minHeight",
    "type" : "int",
    "comment" : "\n     * The default height of the widget when added to a host, in dp. The widget will get\n     * at least this height, and will often be given more, depending on the host.\n     *\n     * <p>This field corresponds to the <code>android:minHeight</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ ]
  }, {
    "name" : "minResizeWidth",
    "type" : "int",
    "comment" : "\n     * Minimum width (in dp) which the widget can be resized to. This field has no effect if it\n     * is greater than minWidth or if horizontal resizing isn't enabled (see {@link #resizeMode}).\n     *\n     * <p>This field corresponds to the <code>android:minResizeWidth</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ "#resizeMode" ]
  }, {
    "name" : "minResizeHeight",
    "type" : "int",
    "comment" : "\n     * Minimum height (in dp) which the widget can be resized to. This field has no effect if it\n     * is greater than minHeight or if vertical resizing isn't enabled (see {@link #resizeMode}).\n     *\n     * <p>This field corresponds to the <code>android:minResizeHeight</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ "#resizeMode" ]
  }, {
    "name" : "updatePeriodMillis",
    "type" : "int",
    "comment" : "\n     * How often, in milliseconds, that this AppWidget wants to be updated.\n     * The AppWidget manager may place a limit on how often a AppWidget is updated.\n     *\n     * <p>This field corresponds to the <code>android:updatePeriodMillis</code> attribute in\n     * the AppWidget meta-data file.\n     *\n     * <p class=\"note\"><b>Note:</b> Updates requested with <code>updatePeriodMillis</code>\n     * will not be delivered more than once every 30 minutes.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "initialLayout",
    "type" : "int",
    "comment" : "\n     * The resource id of the initial layout for this AppWidget.  This should be\n     * displayed until the RemoteViews for the AppWidget is available.\n     *\n     * <p>This field corresponds to the <code>android:initialLayout</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ ]
  }, {
    "name" : "initialKeyguardLayout",
    "type" : "int",
    "comment" : "\n     * The resource id of the initial layout for this AppWidget when it is displayed on keyguard.\n     * This parameter only needs to be provided if the widget can be displayed on the keyguard,\n     * see {@link #widgetCategory}.\n     *\n     * <p>This field corresponds to the <code>android:initialKeyguardLayout</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ "#widgetCategory" ]
  }, {
    "name" : "configure",
    "type" : "ComponentName",
    "comment" : "\n     * The activity to launch that will configure the AppWidget.\n     *\n     * <p>This class name of field corresponds to the <code>android:configure</code> attribute in\n     * the AppWidget meta-data file.  The package name always corresponds to the package containing\n     * the AppWidget provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "label",
    "type" : "String",
    "comment" : "\n     * The label to display to the user in the AppWidget picker.\n     *\n     * @deprecated Use {@link #loadLabel(android.content.pm.PackageManager)}.\n     ",
    "links" : [ "#loadLabel" ]
  }, {
    "name" : "icon",
    "type" : "int",
    "comment" : "\n     * The icon to display for this AppWidget in the AppWidget picker. If not supplied in the\n     * xml, the application icon will be used.\n     *\n     * <p>This field corresponds to the <code>android:icon</code> attribute in\n     * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.\n     ",
    "links" : [ ]
  }, {
    "name" : "autoAdvanceViewId",
    "type" : "int",
    "comment" : "\n     * The view id of the AppWidget subview which should be auto-advanced by the widget's host.\n     *\n     * <p>This field corresponds to the <code>android:autoAdvanceViewId</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ ]
  }, {
    "name" : "previewImage",
    "type" : "int",
    "comment" : "\n     * A preview of what the AppWidget will look like after it's configured.\n     * If not supplied, the AppWidget's icon will be used.\n     *\n     * <p>This field corresponds to the <code>android:previewImage</code> attribute in\n     * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.\n     ",
    "links" : [ ]
  }, {
    "name" : "resizeMode",
    "type" : "int",
    "comment" : "\n     * The rules by which a widget can be resized. See {@link #RESIZE_NONE},\n     * {@link #RESIZE_NONE}, {@link #RESIZE_HORIZONTAL},\n     * {@link #RESIZE_VERTICAL}, {@link #RESIZE_BOTH}.\n     *\n     * <p>This field corresponds to the <code>android:resizeMode</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ "#RESIZE_NONE", "#RESIZE_NONE", "#RESIZE_HORIZONTAL", "#RESIZE_VERTICAL", "#RESIZE_BOTH" ]
  }, {
    "name" : "widgetCategory",
    "type" : "int",
    "comment" : "\n     * Determines whether this widget can be displayed on the home screen, the keyguard, or both.\n     * A widget which is displayed on both needs to ensure that it follows the design guidelines\n     * for both widget classes. This can be achieved by querying the AppWidget options in its\n     * widget provider's update method.\n     *\n     * <p>This field corresponds to the <code>widgetCategory</code> attribute in\n     * the AppWidget meta-data file.\n     ",
    "links" : [ ]
  }, {
    "name" : "widgetFeatures",
    "type" : "int",
    "comment" : "\n     * Flags indicating various features supported by the widget. These are hints to the widget\n     * host, and do not actually change the behavior of the widget.\n     *\n     * @see #WIDGET_FEATURE_RECONFIGURABLE\n     * @see #WIDGET_FEATURE_HIDE_FROM_PICKER\n     ",
    "links" : [ ]
  }, {
    "name" : "providerInfo",
    "type" : "ActivityInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AppWidgetProviderInfo>",
    "comment" : "\n     * Parcelable.Creator that instantiates AppWidgetProviderInfo objects\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String loadLabel(PackageManager packageManager)",
    "returnType" : "String",
    "comment" : "\n     * Loads the localized label to display to the user in the AppWidget picker.\n     *\n     * @param packageManager Package manager instance for loading resources.\n     * @return The label for the current locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Drawable loadIcon(@NonNull Context context, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads the icon to display for this AppWidget in the AppWidget picker. If not\n     * supplied in the xml, the application icon will be used. A client can optionally\n     * provide a desired density such as {@link android.util.DisplayMetrics#DENSITY_LOW}\n     * {@link android.util.DisplayMetrics#DENSITY_MEDIUM}, etc. If no density is\n     * provided, the density of the current display will be used.\n     * <p>\n     * The loaded icon corresponds to the <code>android:icon</code> attribute in\n     * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.\n     * </p>\n     *\n     * @param context Context for accessing resources.\n     * @param density The optional desired density as per\n     *         {@link android.util.DisplayMetrics#densityDpi}.\n     * @return The provider icon.\n     ",
    "links" : [ "android.util.DisplayMetrics#DENSITY_LOW", "android.util.DisplayMetrics#DENSITY_MEDIUM", "android.util.DisplayMetrics#densityDpi" ]
  }, {
    "name" : "public final Drawable loadPreviewImage(@NonNull Context context, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads a preview of what the AppWidget will look like after it's configured.\n     * A client can optionally provide a desired density such as\n     * {@link android.util.DisplayMetrics#DENSITY_LOW}\n     * {@link android.util.DisplayMetrics#DENSITY_MEDIUM}, etc. If no density is\n     * provided, the density of the current display will be used.\n     * <p>\n     * The loaded image corresponds to the <code>android:previewImage</code> attribute\n     * in the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.\n     * </p>\n     *\n     * @param context Context for accessing resources.\n     * @param density The optional desired density as per\n     *         {@link android.util.DisplayMetrics#densityDpi}.\n     * @return The widget preview image or null if preview image is not available.\n     ",
    "links" : [ "android.util.DisplayMetrics#DENSITY_LOW", "android.util.DisplayMetrics#DENSITY_MEDIUM", "android.util.DisplayMetrics#densityDpi" ]
  }, {
    "name" : "public final UserHandle getProfile()",
    "returnType" : "UserHandle",
    "comment" : "\n     * Gets the user profile in which the provider resides.\n     *\n     * @return The hosting user profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AppWidgetProviderInfo clone()",
    "returnType" : "AppWidgetProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable loadDrawable(Context context, int density, int resourceId, boolean loadDefaultIcon)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateDimensions(DisplayMetrics displayMetrics)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "RESIZE_NONE", "RESIZE_HORIZONTAL", "RESIZE_VERTICAL", "RESIZE_BOTH", "WIDGET_CATEGORY_HOME_SCREEN", "WIDGET_CATEGORY_KEYGUARD", "WIDGET_CATEGORY_SEARCHBOX", "WIDGET_FEATURE_RECONFIGURABLE", "WIDGET_FEATURE_HIDE_FROM_PICKER", "provider", "minWidth", "minHeight", "minResizeWidth", "minResizeHeight", "updatePeriodMillis", "initialLayout", "initialKeyguardLayout", "configure", "label", "icon", "autoAdvanceViewId", "previewImage", "resizeMode", "widgetCategory", "widgetFeatures", "providerInfo", "CREATOR" ],
  "methodNames" : [ "public final String loadLabel(PackageManager packageManager)", "public final Drawable loadIcon(@NonNull Context context, int density)", "public final Drawable loadPreviewImage(@NonNull Context context, int density)", "public final UserHandle getProfile()", "public void writeToParcel(Parcel out, int flags)", "public AppWidgetProviderInfo clone()", "public int describeContents()", "private Drawable loadDrawable(Context context, int density, int resourceId, boolean loadDefaultIcon)", "public void updateDimensions(DisplayMetrics displayMetrics)", "public String toString()" ]
}