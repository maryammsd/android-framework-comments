{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/AlgorithmConstraints.java",
  "packageName" : "java.security",
  "className" : "AlgorithmConstraints",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean permits(Set<CryptoPrimitive> primitives, String algorithm, AlgorithmParameters parameters)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether an algorithm is granted permission for the\n     * specified cryptographic primitives.\n     *\n     * @param primitives a set of cryptographic primitives\n     * @param algorithm the algorithm name\n     * @param parameters the algorithm parameters, or null if no additional\n     *     parameters\n     *\n     * @return true if the algorithm is permitted and can be used for all\n     *     of the specified cryptographic primitives\n     *\n     * @throws IllegalArgumentException if primitives or algorithm is null\n     *     or empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean permits(Set<CryptoPrimitive> primitives, Key key)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether a key is granted permission for the specified\n     * cryptographic primitives.\n     * <p>\n     * This method is usually used to check key size and key usage.\n     *\n     * @param primitives a set of cryptographic primitives\n     * @param key the key\n     *\n     * @return true if the key can be used for all of the specified\n     *     cryptographic primitives\n     *\n     * @throws IllegalArgumentException if primitives is null or empty,\n     *     or the key is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean permits(Set<CryptoPrimitive> primitives, String algorithm, Key key, AlgorithmParameters parameters)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether an algorithm and the corresponding key are granted\n     * permission for the specified cryptographic primitives.\n     *\n     * @param primitives a set of cryptographic primitives\n     * @param algorithm the algorithm name\n     * @param key the key\n     * @param parameters the algorithm parameters, or null if no additional\n     *     parameters\n     *\n     * @return true if the key and the algorithm can be used for all of the\n     *     specified cryptographic primitives\n     *\n     * @throws IllegalArgumentException if primitives or algorithm is null\n     *     or empty, or the key is null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean permits(Set<CryptoPrimitive> primitives, String algorithm, AlgorithmParameters parameters)", "public boolean permits(Set<CryptoPrimitive> primitives, Key key)", "public boolean permits(Set<CryptoPrimitive> primitives, String algorithm, Key key, AlgorithmParameters parameters)" ],
  "variableNames" : [ ]
}