{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/job/JobParameters.java",
  "packageName" : "android.app.job",
  "className" : "JobParameters",
  "comment" : "\n * Contains the parameters used to configure/identify your job. You do not create this object\n * yourself, instead it is handed in to your application by the System.\n ",
  "variables" : [ {
    "name" : "REASON_CANCELED",
    "type" : "int",
    "comment" : " 0.",
    "links" : [ ]
  }, {
    "name" : "REASON_CONSTRAINTS_NOT_SATISFIED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PREEMPT",
    "type" : "int",
    "comment" : " 2.",
    "links" : [ ]
  }, {
    "name" : "REASON_TIMEOUT",
    "type" : "int",
    "comment" : " 3.",
    "links" : [ ]
  }, {
    "name" : "REASON_DEVICE_IDLE",
    "type" : "int",
    "comment" : " 4.",
    "links" : [ ]
  }, {
    "name" : "REASON_DEVICE_THERMAL",
    "type" : "int",
    "comment" : " 5.",
    "links" : [ ]
  }, {
    "name" : "REASON_RESTRICTED_BUCKET",
    "type" : "int",
    "comment" : "\n     * The job is in the {@link android.app.usage.UsageStatsManager#STANDBY_BUCKET_RESTRICTED}\n     * bucket.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.usage.UsageStatsManager#STANDBY_BUCKET_RESTRICTED" ]
  }, {
    "name" : "JOB_STOP_REASON_CODES",
    "type" : "int[]",
    "comment" : "\n     * All the stop reason codes. This should be regarded as an immutable array at runtime.\n     *\n     * Note the order of these values will affect \"dumpsys batterystats\", and we do not want to\n     * change the order of existing fields, so adding new fields is okay but do not remove or\n     * change existing fields. When deprecating a field, just replace that with \"-1\" in this array.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "jobId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "transientExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clipGrantFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "callback",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "overrideDeadlineExpired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggeredContentUris",
    "type" : "Uri[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggeredContentAuthorities",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "network",
    "type" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stopReason",
    "type" : "int",
    "comment" : " Default value of stopReason is REASON_CANCELED",
    "links" : [ ]
  }, {
    "name" : "debugStopReason",
    "type" : "String",
    "comment" : " Human readable stop reason for debugging.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<JobParameters>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getReasonCodeDescription(int reasonCode)",
    "returnType" : "String",
    "comment" : " TODO(142420609): make it @SystemApi for mainline",
    "links" : [ ]
  }, {
    "name" : "public static int[] getJobStopReasonCodes()",
    "returnType" : "int[]",
    "comment" : " @SystemApi TODO make it a system api for mainline",
    "links" : [ ]
  }, {
    "name" : "public int getJobId()",
    "returnType" : "int",
    "comment" : "\n     * @return The unique id of this job, specified at creation time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStopReason()",
    "returnType" : "int",
    "comment" : "\n     * Reason onStopJob() was called on this job.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDebugStopReason()",
    "returnType" : "String",
    "comment" : "\n     * Reason onStopJob() was called on this job.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * @return The extras you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setExtras(android.os.PersistableBundle)}. This will\n     * never be null. If you did not set any extras this will be an empty bundle.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setExtras(android.os.PersistableBundle)" ]
  }, {
    "name" : "public Bundle getTransientExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * @return The transient extras you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setTransientExtras(android.os.Bundle)}. This will\n     * never be null. If you did not set any extras this will be an empty bundle.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setTransientExtras(android.os.Bundle)" ]
  }, {
    "name" : "public ClipData getClipData()",
    "returnType" : "ClipData",
    "comment" : "\n     * @return The clip you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setClipData(ClipData, int)}. Will be null\n     * if it was not set.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setClipData(ClipData" ]
  }, {
    "name" : "public int getClipGrantFlags()",
    "returnType" : "int",
    "comment" : "\n     * @return The clip grant flags you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setClipData(ClipData, int)}. Will be 0\n     * if it was not set.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setClipData(ClipData" ]
  }, {
    "name" : "public boolean isOverrideDeadlineExpired()",
    "returnType" : "boolean",
    "comment" : "\n     * For jobs with {@link android.app.job.JobInfo.Builder#setOverrideDeadline(long)} set, this\n     * provides an easy way to tell whether the job is being executed due to the deadline\n     * expiring. Note: If the job is running because its deadline expired, it implies that its\n     * constraints will not be met.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setOverrideDeadline(long)" ]
  }, {
    "name" : "public Uri[] getTriggeredContentUris()",
    "returnType" : "Uri[]",
    "comment" : "\n     * For jobs with {@link android.app.job.JobInfo.Builder#addTriggerContentUri} set, this\n     * reports which URIs have triggered the job.  This will be null if either no URIs have\n     * triggered it (it went off due to a deadline or other reason), or the number of changed\n     * URIs is too large to report.  Whether or not the number of URIs is too large, you can\n     * always use {@link #getTriggeredContentAuthorities()} to determine whether the job was\n     * triggered due to any content changes and the authorities they are associated with.\n     ",
    "links" : [ "#getTriggeredContentAuthorities()", "android.app.job.JobInfo.Builder#addTriggerContentUri" ]
  }, {
    "name" : "public String[] getTriggeredContentAuthorities()",
    "returnType" : "String[]",
    "comment" : "\n     * For jobs with {@link android.app.job.JobInfo.Builder#addTriggerContentUri} set, this\n     * reports which content authorities have triggered the job.  It will only be null if no\n     * authorities have triggered it -- that is, the job executed for some other reason, such\n     * as a deadline expiring.  If this is non-null, you can use {@link #getTriggeredContentUris()}\n     * to retrieve the details of which URIs changed (as long as that has not exceeded the maximum\n     * number it can reported).\n     ",
    "links" : [ "#getTriggeredContentUris()", "android.app.job.JobInfo.Builder#addTriggerContentUri" ]
  }, {
    "name" : "public Network getNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * Return the network that should be used to perform any network requests\n     * for this job.\n     * <p>\n     * Devices may have multiple active network connections simultaneously, or\n     * they may not have a default network route at all. To correctly handle all\n     * situations like this, your job should always use the network returned by\n     * this method instead of implicitly using the default network route.\n     * <p>\n     * Note that the system may relax the constraints you originally requested,\n     * such as allowing a {@link JobInfo#NETWORK_TYPE_UNMETERED} job to run over\n     * a metered network when there is a surplus of metered data available.\n     *\n     * @return the network that should be used to perform any network requests\n     *         for this job, or {@code null} if this job didn't set any required\n     *         network type.\n     * @see JobInfo.Builder#setRequiredNetworkType(int)\n     ",
    "links" : [ "android.app.job.JobInfo#NETWORK_TYPE_UNMETERED" ]
  }, {
    "name" : "public JobWorkItem dequeueWork()",
    "returnType" : "JobWorkItem",
    "comment" : "\n     * Dequeue the next pending {@link JobWorkItem} from these JobParameters associated with their\n     * currently running job.  Calling this method when there is no more work available and all\n     * previously dequeued work has been completed will result in the system taking care of\n     * stopping the job for you --\n     * you should not call {@link JobService#jobFinished(JobParameters, boolean)} yourself\n     * (otherwise you risk losing an upcoming JobWorkItem that is being enqueued at the same time).\n     *\n     * <p>Once you are done with the {@link JobWorkItem} returned by this method, you must call\n     * {@link #completeWork(JobWorkItem)} with it to inform the system that you are done\n     * executing the work.  The job will not be finished until all dequeued work has been\n     * completed.  You do not, however, have to complete each returned work item before deqeueing\n     * the next one -- you can use {@link #dequeueWork()} multiple times before completing\n     * previous work if you want to process work in parallel, and you can complete the work\n     * in whatever order you want.</p>\n     *\n     * <p>If the job runs to the end of its available time period before all work has been\n     * completed, it will stop as normal.  You should return true from\n     * {@link JobService#onStopJob(JobParameters)} in order to have the job rescheduled, and by\n     * doing so any pending as well as remaining uncompleted work will be re-queued\n     * for the next time the job runs.</p>\n     *\n     * <p>This example shows how to construct a JobService that will serially dequeue and\n     * process work that is available for it:</p>\n     *\n     * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/JobWorkService.java\n     *      service}\n     *\n     * @return Returns a new {@link JobWorkItem} if there is one pending, otherwise null.\n     * If null is returned, the system will also stop the job if all work has also been completed.\n     * (This means that for correct operation, you must always call dequeueWork() after you have\n     * completed other work, to check either for more work or allow the system to stop the job.)\n     ",
    "links" : [ "android.app.job.JobService#jobFinished(JobParameters", "android.app.job.JobService#onStopJob(JobParameters)", "android.app.job.JobWorkItem", "#completeWork(JobWorkItem)", "#dequeueWork()" ]
  }, {
    "name" : "public void completeWork(@NonNull JobWorkItem work)",
    "returnType" : "void",
    "comment" : "\n     * Report the completion of executing a {@link JobWorkItem} previously returned by\n     * {@link #dequeueWork()}.  This tells the system you are done with the\n     * work associated with that item, so it will not be returned again.  Note that if this\n     * is the last work in the queue, completing it here will <em>not</em> finish the overall\n     * job -- for that to happen, you still need to call {@link #dequeueWork()}\n     * again.\n     *\n     * <p>If you are enqueueing work into a job, you must call this method for each piece\n     * of work you process.  Do <em>not</em> call\n     * {@link JobService#jobFinished(JobParameters, boolean)}\n     * or else you can lose work in your queue.</p>\n     *\n     * @param work The work you have completed processing, as previously returned by\n     * {@link #dequeueWork()}\n     ",
    "links" : [ "android.app.job.JobService#jobFinished(JobParameters", "android.app.job.JobWorkItem", "#dequeueWork()" ]
  }, {
    "name" : "public IJobCallback getCallback()",
    "returnType" : "IJobCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setStopReason(int reason, String debugStopReason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "REASON_CANCELED", "REASON_CONSTRAINTS_NOT_SATISFIED", "REASON_PREEMPT", "REASON_TIMEOUT", "REASON_DEVICE_IDLE", "REASON_DEVICE_THERMAL", "REASON_RESTRICTED_BUCKET", "JOB_STOP_REASON_CODES", "jobId", "extras", "transientExtras", "clipData", "clipGrantFlags", "callback", "overrideDeadlineExpired", "mTriggeredContentUris", "mTriggeredContentAuthorities", "network", "stopReason", "debugStopReason", "CREATOR" ],
  "methodNames" : [ "public static String getReasonCodeDescription(int reasonCode)", "public static int[] getJobStopReasonCodes()", "public int getJobId()", "public int getStopReason()", "public String getDebugStopReason()", "public PersistableBundle getExtras()", "public Bundle getTransientExtras()", "public ClipData getClipData()", "public int getClipGrantFlags()", "public boolean isOverrideDeadlineExpired()", "public Uri[] getTriggeredContentUris()", "public String[] getTriggeredContentAuthorities()", "public Network getNetwork()", "public JobWorkItem dequeueWork()", "public void completeWork(@NonNull JobWorkItem work)", "public IJobCallback getCallback()", "public void setStopReason(int reason, String debugStopReason)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}