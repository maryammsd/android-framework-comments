{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/job/JobParameters.java",
  "packageName" : "android.app.job",
  "className" : "JobParameters",
  "comment" : "\n * Contains the parameters used to configure/identify your job. You do not create this object\n * yourself, instead it is handed in to your application by the System.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INTERNAL_STOP_REASON_UNKNOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_CANCELED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_CONSTRAINTS_NOT_SATISFIED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_PREEMPT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The job ran for at least its minimum execution limit.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_DEVICE_IDLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_DEVICE_THERMAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_RESTRICTED_BUCKET",
    "type" : "int",
    "comment" : "\n     * The job is in the {@link android.app.usage.UsageStatsManager#STANDBY_BUCKET_RESTRICTED}\n     * bucket.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.usage.UsageStatsManager#STANDBY_BUCKET_RESTRICTED" ]
  }, {
    "name" : "INTERNAL_STOP_REASON_UNINSTALL",
    "type" : "int",
    "comment" : "\n     * The app was uninstalled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_DATA_CLEARED",
    "type" : "int",
    "comment" : "\n     * The app's data was cleared.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_RTC_UPDATED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_SUCCESSFUL_FINISH",
    "type" : "int",
    "comment" : "\n     * The app called jobFinished() on its own.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_USER_UI_STOP",
    "type" : "int",
    "comment" : "\n     * The user stopped the job via some UI (eg. Task Manager).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_STOP_REASON_ANR",
    "type" : "int",
    "comment" : "\n     * The app didn't respond quickly enough from JobScheduler's perspective.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "JOB_STOP_REASON_CODES",
    "type" : "int[]",
    "comment" : "\n     * All the stop reason codes. This should be regarded as an immutable array at runtime.\n     *\n     * Note the order of these values will affect \"dumpsys batterystats\", and we do not want to\n     * change the order of existing fields, so adding new fields is okay but do not remove or\n     * change existing fields. When deprecating a field, just replace that with \"-1\" in this array.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * There is no reason the job is stopped. This is the value returned from the JobParameters\n     * object passed to {@link JobService#onStartJob(JobParameters)}.\n     ",
    "links" : [ "android.app.job.JobService#onStartJob(JobParameters)" ]
  }, {
    "name" : "STOP_REASON_CANCELLED_BY_APP",
    "type" : "int",
    "comment" : "\n     * The job was cancelled directly by the app, either by calling\n     * {@link JobScheduler#cancel(int)}, {@link JobScheduler#cancelAll()}, or by scheduling a\n     * new job with the same job ID.\n     ",
    "links" : [ "android.app.job.JobScheduler#cancel(int)", "android.app.job.JobScheduler#cancelAll()" ]
  }, {
    "name" : "STOP_REASON_PREEMPT",
    "type" : "int",
    "comment" : " The job was stopped to run a higher priority job of the app. ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The job used up its maximum execution time and timed out. Each individual job has a maximum\n     * execution time limit, regardless of how much total quota the app has. See the note on\n     * {@link JobScheduler} and {@link JobInfo} for the execution time limits.\n     ",
    "links" : [ "android.app.job.JobScheduler", "android.app.job.JobInfo" ]
  }, {
    "name" : "STOP_REASON_DEVICE_STATE",
    "type" : "int",
    "comment" : "\n     * The device state (eg. Doze, battery saver, memory usage, etc) requires JobScheduler stop this\n     * job.\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_CONSTRAINT_BATTERY_NOT_LOW",
    "type" : "int",
    "comment" : "\n     * The requested battery-not-low constraint is no longer satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresBatteryNotLow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_CONSTRAINT_CHARGING",
    "type" : "int",
    "comment" : "\n     * The requested charging constraint is no longer satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresCharging(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_CONSTRAINT_CONNECTIVITY",
    "type" : "int",
    "comment" : "\n     * The requested connectivity constraint is no longer satisfied.\n     *\n     * @see JobInfo.Builder#setRequiredNetwork(NetworkRequest)\n     * @see JobInfo.Builder#setRequiredNetworkType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_CONSTRAINT_DEVICE_IDLE",
    "type" : "int",
    "comment" : "\n     * The requested idle constraint is no longer satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresDeviceIdle(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_CONSTRAINT_STORAGE_NOT_LOW",
    "type" : "int",
    "comment" : "\n     * The requested storage-not-low constraint is no longer satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresStorageNotLow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_QUOTA",
    "type" : "int",
    "comment" : "\n     * The app has consumed all of its current quota. Each app is assigned a quota of how much\n     * it can run jobs within a certain time frame. The quota is informed, in part, by app standby\n     * buckets. Once an app has used up all of its quota, it won't be able to start jobs until\n     * quota is replenished, is changed, or is temporarily not applied.\n     *\n     * @see UsageStatsManager#getAppStandbyBucket()\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_BACKGROUND_RESTRICTION",
    "type" : "int",
    "comment" : "\n     * The app is restricted from running in the background.\n     *\n     * @see ActivityManager#isBackgroundRestricted()\n     * @see PackageManager#isInstantApp()\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_APP_STANDBY",
    "type" : "int",
    "comment" : "\n     * The current standby bucket requires that the job stop now.\n     *\n     * @see UsageStatsManager#STANDBY_BUCKET_RESTRICTED\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_USER",
    "type" : "int",
    "comment" : "\n     * The user stopped the job. This can happen either through force-stop, adb shell commands,\n     * uninstalling, or some other UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_SYSTEM_PROCESSING",
    "type" : "int",
    "comment" : " The system is doing some processing that requires stopping this job. ",
    "links" : [ ]
  }, {
    "name" : "STOP_REASON_ESTIMATED_APP_LAUNCH_TIME_CHANGED",
    "type" : "int",
    "comment" : "\n     * The system's estimate of when the app will be launched changed significantly enough to\n     * decide this job shouldn't be running right now. This will mostly apply to prefetch jobs.\n     *\n     * @see JobInfo#isPrefetch()\n     * @see JobInfo.Builder#setPrefetch(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "jobId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJobNamespace",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "transientExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clipGrantFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "callback",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "overrideDeadlineExpired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsExpedited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsUserInitiated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggeredContentUris",
    "type" : "Uri[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggeredContentAuthorities",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetwork",
    "type" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStopReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalStopReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "debugStopReason",
    "type" : "String",
    "comment" : " Human readable stop reason for debugging.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<JobParameters>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getInternalReasonCodeDescription(int reasonCode)",
    "returnType" : "String",
    "comment" : " TODO(142420609): make it @SystemApi for mainline",
    "links" : [ ]
  }, {
    "name" : "public static int[] getJobStopReasonCodes()",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getJobId()",
    "returnType" : "int",
    "comment" : "\n     * @return The unique id of this job, specified at creation time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getJobNamespace()",
    "returnType" : "String",
    "comment" : "\n     * Get the namespace this job was placed in.\n     *\n     * @see JobScheduler#forNamespace(String)\n     * @return The namespace this job was scheduled in. Will be {@code null} if there was no\n     * explicit namespace set and this job is therefore in the default namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStopReason()",
    "returnType" : "int",
    "comment" : "\n     * @return The reason {@link JobService#onStopJob(JobParameters)} was called on this job. Will\n     * be {@link #STOP_REASON_UNDEFINED} if {@link JobService#onStopJob(JobParameters)} has not\n     * yet been called.\n     ",
    "links" : [ "#STOP_REASON_UNDEFINED", "android.app.job.JobService#onStopJob(JobParameters)" ]
  }, {
    "name" : "public int getInternalStopReasonCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getDebugStopReason()",
    "returnType" : "String",
    "comment" : "\n     * Reason onStopJob() was called on this job.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * @return The extras you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setExtras(android.os.PersistableBundle)}. This will\n     * never be null. If you did not set any extras this will be an empty bundle.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setExtras(android.os.PersistableBundle)" ]
  }, {
    "name" : "public Bundle getTransientExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * @return The transient extras you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setTransientExtras(android.os.Bundle)}. This will\n     * never be null. If you did not set any extras this will be an empty bundle.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setTransientExtras(android.os.Bundle)" ]
  }, {
    "name" : "public ClipData getClipData()",
    "returnType" : "ClipData",
    "comment" : "\n     * @return The clip you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setClipData(ClipData, int)}. Will be null\n     * if it was not set.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setClipData(ClipData" ]
  }, {
    "name" : "public int getClipGrantFlags()",
    "returnType" : "int",
    "comment" : "\n     * @return The clip grant flags you passed in when constructing this job with\n     * {@link android.app.job.JobInfo.Builder#setClipData(ClipData, int)}. Will be 0\n     * if it was not set.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setClipData(ClipData" ]
  }, {
    "name" : "public boolean isExpeditedJob()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether this job is running as an expedited job or not. A job is guaranteed to have\n     * all expedited job guarantees for the duration of the job execution if this returns\n     * {@code true}. This will return {@code false} if the job that wasn't requested to run as a\n     * expedited job, or if it was requested to run as an expedited job but the app didn't have\n     * any remaining expedited job quota at the time of execution.\n     *\n     * @see JobInfo.Builder#setExpedited(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserInitiatedJob()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether this job is running as a user-initiated job or not. A job is guaranteed to\n     * have all user-initiated job guarantees for the duration of the job execution if this returns\n     * {@code true}. This will return {@code false} if the job wasn't requested to run as a\n     * user-initiated job, or if it was requested to run as a user-initiated job but the app didn't\n     * meet any of the requirements at the time of execution, such as having the\n     * {@link android.Manifest.permission#RUN_USER_INITIATED_JOBS} permission.\n     *\n     * @see JobInfo.Builder#setUserInitiated(boolean)\n     ",
    "links" : [ "android.Manifest.permission#RUN_USER_INITIATED_JOBS" ]
  }, {
    "name" : "public boolean isOverrideDeadlineExpired()",
    "returnType" : "boolean",
    "comment" : "\n     * For jobs with {@link android.app.job.JobInfo.Builder#setOverrideDeadline(long)} set, this\n     * provides an easy way to tell whether the job is being executed due to the deadline\n     * expiring. Note: If the job is running because its deadline expired, it implies that its\n     * constraints will not be met. However,\n     * {@link android.app.job.JobInfo.Builder#setPeriodic(long) periodic jobs} will only ever\n     * run when their constraints are satisfied, therefore, the constraints will still be satisfied\n     * for a periodic job even if the deadline has expired.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setOverrideDeadline(long)", "android.app.job.JobInfo.Builder#setPeriodic(long)" ]
  }, {
    "name" : "public Uri[] getTriggeredContentUris()",
    "returnType" : "Uri[]",
    "comment" : "\n     * For jobs with {@link android.app.job.JobInfo.Builder#addTriggerContentUri} set, this\n     * reports which URIs have triggered the job.  This will be null if either no URIs have\n     * triggered it (it went off due to a deadline or other reason), or the number of changed\n     * URIs is too large to report.  Whether or not the number of URIs is too large, you can\n     * always use {@link #getTriggeredContentAuthorities()} to determine whether the job was\n     * triggered due to any content changes and the authorities they are associated with.\n     ",
    "links" : [ "#getTriggeredContentAuthorities()", "android.app.job.JobInfo.Builder#addTriggerContentUri" ]
  }, {
    "name" : "public String[] getTriggeredContentAuthorities()",
    "returnType" : "String[]",
    "comment" : "\n     * For jobs with {@link android.app.job.JobInfo.Builder#addTriggerContentUri} set, this\n     * reports which content authorities have triggered the job.  It will only be null if no\n     * authorities have triggered it -- that is, the job executed for some other reason, such\n     * as a deadline expiring.  If this is non-null, you can use {@link #getTriggeredContentUris()}\n     * to retrieve the details of which URIs changed (as long as that has not exceeded the maximum\n     * number it can reported).\n     ",
    "links" : [ "#getTriggeredContentUris()", "android.app.job.JobInfo.Builder#addTriggerContentUri" ]
  }, {
    "name" : "public Network getNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * Return the network that should be used to perform any network requests\n     * for this job.\n     * <p>\n     * Devices may have multiple active network connections simultaneously, or\n     * they may not have a default network route at all. To correctly handle all\n     * situations like this, your job should always use the network returned by\n     * this method instead of implicitly using the default network route.\n     * <p>\n     * Note that the system may relax the constraints you originally requested,\n     * such as allowing a {@link JobInfo#NETWORK_TYPE_UNMETERED} job to run over\n     * a metered network when there is a surplus of metered data available.\n     *\n     * Starting in Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n     * this will return {@code null} if the app does not hold the permissions specified in\n     * {@link JobInfo.Builder#setRequiredNetwork(NetworkRequest)}.\n     *\n     * @return the network that should be used to perform any network requests\n     *         for this job, or {@code null} if this job didn't set any required\n     *         network type or if the job executed when there was no available network to use.\n     * @see JobInfo.Builder#setRequiredNetworkType(int)\n     * @see JobInfo.Builder#setRequiredNetwork(NetworkRequest)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.app.job.JobInfo#NETWORK_TYPE_UNMETERED", "JobInfo.Builder#setRequiredNetwork(NetworkRequest)" ]
  }, {
    "name" : "public JobWorkItem dequeueWork()",
    "returnType" : "JobWorkItem",
    "comment" : "\n     * Dequeue the next pending {@link JobWorkItem} from these JobParameters associated with their\n     * currently running job.  Calling this method when there is no more work available and all\n     * previously dequeued work has been completed will result in the system taking care of\n     * stopping the job for you --\n     * you should not call {@link JobService#jobFinished(JobParameters, boolean)} yourself\n     * (otherwise you risk losing an upcoming JobWorkItem that is being enqueued at the same time).\n     *\n     * <p>Once you are done with the {@link JobWorkItem} returned by this method, you must call\n     * {@link #completeWork(JobWorkItem)} with it to inform the system that you are done\n     * executing the work.  The job will not be finished until all dequeued work has been\n     * completed.  You do not, however, have to complete each returned work item before deqeueing\n     * the next one -- you can use {@link #dequeueWork()} multiple times before completing\n     * previous work if you want to process work in parallel, and you can complete the work\n     * in whatever order you want.</p>\n     *\n     * <p>If the job runs to the end of its available time period before all work has been\n     * completed, it will stop as normal.  You should return true from\n     * {@link JobService#onStopJob(JobParameters)} in order to have the job rescheduled, and by\n     * doing so any pending as well as remaining uncompleted work will be re-queued\n     * for the next time the job runs.</p>\n     *\n     * <p>This example shows how to construct a JobService that will serially dequeue and\n     * process work that is available for it:</p>\n     *\n     * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/JobWorkService.java\n     *      service}\n     *\n     * @return Returns a new {@link JobWorkItem} if there is one pending, otherwise null.\n     * If null is returned, the system will also stop the job if all work has also been completed.\n     * (This means that for correct operation, you must always call dequeueWork() after you have\n     * completed other work, to check either for more work or allow the system to stop the job.)\n     ",
    "links" : [ "android.app.job.JobService#jobFinished(JobParameters", "android.app.job.JobService#onStopJob(JobParameters)", "android.app.job.JobWorkItem", "#completeWork(JobWorkItem)", "#dequeueWork()" ]
  }, {
    "name" : "public void completeWork(@NonNull JobWorkItem work)",
    "returnType" : "void",
    "comment" : "\n     * Report the completion of executing a {@link JobWorkItem} previously returned by\n     * {@link #dequeueWork()}.  This tells the system you are done with the\n     * work associated with that item, so it will not be returned again.  Note that if this\n     * is the last work in the queue, completing it here will <em>not</em> finish the overall\n     * job -- for that to happen, you still need to call {@link #dequeueWork()}\n     * again.\n     *\n     * <p>If you are enqueueing work into a job, you must call this method for each piece\n     * of work you process.  Do <em>not</em> call\n     * {@link JobService#jobFinished(JobParameters, boolean)}\n     * or else you can lose work in your queue.</p>\n     *\n     * @param work The work you have completed processing, as previously returned by\n     * {@link #dequeueWork()}\n     ",
    "links" : [ "android.app.job.JobService#jobFinished(JobParameters", "android.app.job.JobWorkItem", "#dequeueWork()" ]
  }, {
    "name" : "public IJobCallback getCallback()",
    "returnType" : "IJobCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setNetwork(@Nullable Network network)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setStopReason(@StopReason int reason, int internalStopReason, String debugStopReason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getInternalReasonCodeDescription(int reasonCode)", "public static int[] getJobStopReasonCodes()", "public int getJobId()", "public String getJobNamespace()", "public int getStopReason()", "public int getInternalStopReasonCode()", "public String getDebugStopReason()", "public PersistableBundle getExtras()", "public Bundle getTransientExtras()", "public ClipData getClipData()", "public int getClipGrantFlags()", "public boolean isExpeditedJob()", "public boolean isUserInitiatedJob()", "public boolean isOverrideDeadlineExpired()", "public Uri[] getTriggeredContentUris()", "public String[] getTriggeredContentAuthorities()", "public Network getNetwork()", "public JobWorkItem dequeueWork()", "public void completeWork(@NonNull JobWorkItem work)", "public IJobCallback getCallback()", "public void setNetwork(@Nullable Network network)", "public void setStopReason(@StopReason int reason, int internalStopReason, String debugStopReason)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "INTERNAL_STOP_REASON_UNKNOWN", "INTERNAL_STOP_REASON_CANCELED", "INTERNAL_STOP_REASON_CONSTRAINTS_NOT_SATISFIED", "INTERNAL_STOP_REASON_PREEMPT", "INTERNAL_STOP_REASON_TIMEOUT", "INTERNAL_STOP_REASON_DEVICE_IDLE", "INTERNAL_STOP_REASON_DEVICE_THERMAL", "INTERNAL_STOP_REASON_RESTRICTED_BUCKET", "INTERNAL_STOP_REASON_UNINSTALL", "INTERNAL_STOP_REASON_DATA_CLEARED", "INTERNAL_STOP_REASON_RTC_UPDATED", "INTERNAL_STOP_REASON_SUCCESSFUL_FINISH", "INTERNAL_STOP_REASON_USER_UI_STOP", "INTERNAL_STOP_REASON_ANR", "JOB_STOP_REASON_CODES", "STOP_REASON_UNDEFINED", "STOP_REASON_CANCELLED_BY_APP", "STOP_REASON_PREEMPT", "STOP_REASON_TIMEOUT", "STOP_REASON_DEVICE_STATE", "STOP_REASON_CONSTRAINT_BATTERY_NOT_LOW", "STOP_REASON_CONSTRAINT_CHARGING", "STOP_REASON_CONSTRAINT_CONNECTIVITY", "STOP_REASON_CONSTRAINT_DEVICE_IDLE", "STOP_REASON_CONSTRAINT_STORAGE_NOT_LOW", "STOP_REASON_QUOTA", "STOP_REASON_BACKGROUND_RESTRICTION", "STOP_REASON_APP_STANDBY", "STOP_REASON_USER", "STOP_REASON_SYSTEM_PROCESSING", "STOP_REASON_ESTIMATED_APP_LAUNCH_TIME_CHANGED", "jobId", "mJobNamespace", "extras", "transientExtras", "clipData", "clipGrantFlags", "callback", "overrideDeadlineExpired", "mIsExpedited", "mIsUserInitiated", "mTriggeredContentUris", "mTriggeredContentAuthorities", "mNetwork", "mStopReason", "mInternalStopReason", "debugStopReason", "CREATOR" ]
}