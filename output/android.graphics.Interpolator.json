{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/Interpolator.java",
  "packageName" : "android.graphics",
  "className" : "Interpolator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mValueCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "native_instance",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset(int valueCount)",
    "returnType" : "void",
    "comment" : "\n     * Reset the Interpolator to have the specified number of values and an\n     * implicit keyFrame count of 2 (just a start and end). After this call the\n     * values for each keyFrame must be assigned using setKeyFrame().\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset(int valueCount, int frameCount)",
    "returnType" : "void",
    "comment" : "\n     * Reset the Interpolator to have the specified number of values and\n     * keyFrames. After this call the values for each keyFrame must be assigned\n     * using setKeyFrame().\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getKeyFrameCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getValueCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setKeyFrame(int index, int msec, float[] values)",
    "returnType" : "void",
    "comment" : "\n     * Assign the keyFrame (specified by index) a time value and an array of key\n     * values (with an implicitly blend array of [0, 0, 1, 1] giving linear\n     * transition to the next set of key values).\n     *\n     * @param index The index of the key frame to assign\n     * @param msec The time (in mililiseconds) for this key frame. Based on the\n     *        SystemClock.uptimeMillis() clock\n     * @param values Array of values associated with theis key frame\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setKeyFrame(int index, int msec, float[] values, float[] blend)",
    "returnType" : "void",
    "comment" : "\n     * Assign the keyFrame (specified by index) a time value and an array of key\n     * values and blend array.\n     *\n     * @param index The index of the key frame to assign\n     * @param msec The time (in mililiseconds) for this key frame. Based on the\n     *        SystemClock.uptimeMillis() clock\n     * @param values Array of values associated with theis key frame\n     * @param blend (may be null) Optional array of 4 blend values\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRepeatMirror(float repeatCount, boolean mirror)",
    "returnType" : "void",
    "comment" : "\n     * Set a repeat count (which may be fractional) for the interpolator, and\n     * whether the interpolator should mirror its repeats. The default settings\n     * are repeatCount = 1, and mirror = false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result timeToValues(float[] values)",
    "returnType" : "Result",
    "comment" : "\n     * Calls timeToValues(msec, values) with the msec set to now (by calling\n     * (int)SystemClock.uptimeMillis().)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result timeToValues(int msec, float[] values)",
    "returnType" : "Result",
    "comment" : "\n     * Given a millisecond time value (msec), return the interpolated values and\n     * return whether the specified time was within the range of key times\n     * (NORMAL), was before the first key time (FREEZE_START) or after the last\n     * key time (FREEZE_END). In any event, computed values are always returned.\n     *\n     * @param msec The time (in milliseconds) used to sample into the\n     *        Interpolator. Based on the SystemClock.uptimeMillis() clock\n     * @param values Where to write the computed values (may be NULL).\n     * @return how the values were computed (even if values == null)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeConstructor(int valueCount, int frameCount)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestructor(long native_instance)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReset(long native_instance, int valueCount, int frameCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetKeyFrame(long native_instance, int index, int msec, float[] values, float[] blend)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetRepeatMirror(long native_instance, float repeatCount, boolean mirror)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeTimeToValues(long native_instance, int msec, float[] values)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset(int valueCount)", "public void reset(int valueCount, int frameCount)", "public final int getKeyFrameCount()", "public final int getValueCount()", "public void setKeyFrame(int index, int msec, float[] values)", "public void setKeyFrame(int index, int msec, float[] values, float[] blend)", "public void setRepeatMirror(float repeatCount, boolean mirror)", "public Result timeToValues(float[] values)", "public Result timeToValues(int msec, float[] values)", "protected void finalize() throws Throwable", "private static native long nativeConstructor(int valueCount, int frameCount)", "private static native void nativeDestructor(long native_instance)", "private static native void nativeReset(long native_instance, int valueCount, int frameCount)", "private static native void nativeSetKeyFrame(long native_instance, int index, int msec, float[] values, float[] blend)", "private static native void nativeSetRepeatMirror(long native_instance, float repeatCount, boolean mirror)", "private static native int nativeTimeToValues(long native_instance, int msec, float[] values)" ],
  "variableNames" : [ "mValueCount", "mFrameCount", "native_instance" ]
}