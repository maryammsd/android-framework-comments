{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemForEach.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemForEach",
  "comment" : "\n * Implement xsl:for-each.\n * <pre>\n * <!ELEMENT xsl:for-each\n *  (#PCDATA\n *   %instructions;\n *   %result-elements;\n *   | xsl:sort)\n * >\n *\n * <!ATTLIST xsl:for-each\n *   select %expr; #REQUIRED\n *   %space-att;\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#for-each\">for-each in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Set true to request some basic status reports ",
    "links" : [ ]
  }, {
    "name" : "m_doc_cache_off",
    "type" : "boolean",
    "comment" : "\n   * This is set by an \"xalan-doc-cache-off\" pi, or the old \"xalan:doc-cache-off\" pi.\n   * The old form of the PI only works for XML parsers that are not namespace aware.\n   * It tells the engine that\n   * documents created in the location paths executed by this element\n   * will not be reparsed. It's set by StylesheetHandler during\n   * construction. Note that this feature applies _only_ to xsl:for-each\n   * elements in its current incarnation; a more general cache management\n   * solution is desperately needed.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_selectExpression",
    "type" : "Expression",
    "comment" : "\n   * The \"select\" expression.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_xpath",
    "type" : "XPath",
    "comment" : "\n   * Used to fix bug#16889\n   * Store XPath away for later processing.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_sortElems",
    "type" : "Vector",
    "comment" : "\n   * Vector containing the xsl:sort elements associated with this element.\n   *  @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSelect(XPath xpath)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"select\" attribute.\n   *\n   * @param xpath The XPath expression for the \"select\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getSelect()",
    "returnType" : "Expression",
    "comment" : "\n   * Get the \"select\" attribute.\n   *\n   * @return The XPath expression for the \"select\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   *\n   * NEEDSDOC @param sroot\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endCompose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This after the template's children have been composed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getSortElemCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the count xsl:sort elements associated with this element.\n   * @return The number of xsl:sort elements.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemSort getSortElem(int i)",
    "returnType" : "ElemSort",
    "comment" : "\n   * Get a xsl:sort element associated with this element.\n   *\n   * @param i Index of xsl:sort element to get\n   *\n   * @return xsl:sort element at given index\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSortElem(ElemSort sortElem)",
    "returnType" : "void",
    "comment" : "\n   * Set a xsl:sort element associated with this element.\n   *\n   * @param sortElem xsl:sort element to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute the xsl:for-each transformation\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemTemplateElement getTemplateMatch()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get template element associated with this\n   *\n   *\n   * @return template element associated with this (itself)\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator sortNodes(XPathContext xctxt, Vector keys, DTMIterator sourceNodes) throws TransformerException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Sort given nodes\n   *\n   *\n   * @param xctxt The XPath runtime state for the sort.\n   * @param keys Vector of sort keyx\n   * @param sourceNodes Iterator of nodes to sort\n   *\n   * @return iterator of sorted nodes\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Perform a query if needed, and call transformNode for each child.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException Thrown in a variety of circumstances.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   * <!ELEMENT xsl:apply-templates (xsl:sort|xsl:with-param)*>\n   * <!ATTLIST xsl:apply-templates\n   *   select %expr; \"node()\"\n   *   mode %qname; #IMPLIED\n   * >\n   *\n   * @param newChild Child to add to child list\n   *\n   * @return Child just added to child list\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callChildVisitors(XSLTVisitor visitor, boolean callAttributes)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * @see ExpressionOwner#getExpression()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExpression(Expression exp)",
    "returnType" : "void",
    "comment" : "\n   * @see ExpressionOwner#setExpression(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n   * to keep the binary compatibility, assign a default value for newly added\n   * globel varialbe m_xpath during deserialization of an object which was \n   * serialized using an older version\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSelect(XPath xpath)", "public Expression getSelect()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void endCompose(StylesheetRoot sroot) throws TransformerException", "public int getSortElemCount()", "public ElemSort getSortElem(int i)", "public void setSortElem(ElemSort sortElem)", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "protected ElemTemplateElement getTemplateMatch()", "public DTMIterator sortNodes(XPathContext xctxt, Vector keys, DTMIterator sourceNodes) throws TransformerException", "public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)", "public void callChildVisitors(XSLTVisitor visitor, boolean callAttributes)", "public Expression getExpression()", "public void setExpression(Expression exp)", "private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "DEBUG", "m_doc_cache_off", "m_selectExpression", "m_xpath", "m_sortElems" ]
}