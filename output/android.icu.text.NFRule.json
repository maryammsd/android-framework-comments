{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFRule.java",
  "packageName" : "android.icu.text",
  "className" : "NFRule",
  "comment" : "\n * A class representing a single rule in a RuleBasedNumberFormat.  A rule\n * inserts its text into the result string and then passes control to its\n * substitutions, which do the same thing.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NEGATIVE_NUMBER_RULE",
    "type" : "int",
    "comment" : "\n     * Special base value used to identify a negative-number rule\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPROPER_FRACTION_RULE",
    "type" : "int",
    "comment" : "\n     * Special base value used to identify an improper fraction (x.x) rule\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPER_FRACTION_RULE",
    "type" : "int",
    "comment" : "\n     * Special base value used to identify a proper fraction (0.x) rule\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_RULE",
    "type" : "int",
    "comment" : "\n     * Special base value used to identify a default rule\n     ",
    "links" : [ ]
  }, {
    "name" : "INFINITY_RULE",
    "type" : "int",
    "comment" : "\n     * Special base value used to identify an infinity rule\n     ",
    "links" : [ ]
  }, {
    "name" : "NAN_RULE",
    "type" : "int",
    "comment" : "\n     * Special base value used to identify a not a number rule\n     ",
    "links" : [ ]
  }, {
    "name" : "ZERO",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "baseValue",
    "type" : "long",
    "comment" : "\n     * The rule's base value\n     ",
    "links" : [ ]
  }, {
    "name" : "radix",
    "type" : "int",
    "comment" : "\n     * The rule's radix (the radix to the power of the exponent equals\n     * the rule's divisor)\n     ",
    "links" : [ ]
  }, {
    "name" : "exponent",
    "type" : "short",
    "comment" : "\n     * The rule's exponent (the radix raised to the power of the exponent\n     * equals the rule's divisor)\n     ",
    "links" : [ ]
  }, {
    "name" : "decimalPoint",
    "type" : "char",
    "comment" : "\n     * If this is a fraction rule, this is the decimal point from DecimalFormatSymbols to match.\n     ",
    "links" : [ ]
  }, {
    "name" : "ruleText",
    "type" : "String",
    "comment" : "\n     * The rule's rule text.  When formatting a number, the rule's text\n     * is inserted into the result string, and then the text from any\n     * substitutions is inserted into the result string\n     ",
    "links" : [ ]
  }, {
    "name" : "rulePatternFormat",
    "type" : "PluralFormat",
    "comment" : "\n     * The rule's plural format when defined. This is not a substitution\n     * because it only works on the current baseValue. It's normally not used\n     * due to the overhead.\n     ",
    "links" : [ ]
  }, {
    "name" : "sub1",
    "type" : "NFSubstitution",
    "comment" : "\n     * The rule's first substitution (the one with the lower offset\n     * into the rule text)\n     ",
    "links" : [ ]
  }, {
    "name" : "sub2",
    "type" : "NFSubstitution",
    "comment" : "\n     * The rule's second substitution (the one with the higher offset\n     * into the rule text)\n     ",
    "links" : [ ]
  }, {
    "name" : "formatter",
    "type" : "RuleBasedNumberFormat",
    "comment" : "\n     * The RuleBasedNumberFormat that owns this rule\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_PREFIXES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void makeRules(String description, NFRuleSet owner, NFRule predecessor, RuleBasedNumberFormat ownersOwner, List<NFRule> returnList)",
    "returnType" : "void",
    "comment" : "\n     * Creates one or more rules based on the description passed in.\n     * @param description The description of the rule(s).\n     * @param owner The rule set containing the new rule(s).\n     * @param predecessor The rule that precedes the new one(s) in \"owner\"'s\n     * rule list\n     * @param ownersOwner The RuleBasedNumberFormat that owns the\n     * rule set that owns the new rule(s)\n     * @param returnList One or more instances of NFRule are added and returned here\n     ",
    "links" : [ ]
  }, {
    "name" : "private String parseRuleDescriptor(String description)",
    "returnType" : "String",
    "comment" : "\n     * This function parses the rule's rule descriptor (i.e., the base\n     * value and/or other tokens that precede the rule's rule text\n     * in the description) and sets the rule's base value, radix, and\n     * exponent according to the descriptor.  (If the description doesn't\n     * include a rule descriptor, then this function sets everything to\n     * default values and the rule set sets the rule's real base value).\n     * @param description The rule's description\n     * @return If \"description\" included a rule descriptor, this is\n     * \"description\" with the descriptor and any trailing whitespace\n     * stripped off.  Otherwise; it's \"descriptor\" unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void extractSubstitutions(NFRuleSet owner, String ruleText, NFRule predecessor)",
    "returnType" : "void",
    "comment" : "\n     * Searches the rule's rule text for the substitution tokens,\n     * creates the substitutions, and removes the substitution tokens\n     * from the rule's rule text.\n     * @param owner The rule set containing this rule\n     * @param predecessor The rule preceding this one in \"owners\" rule list\n     * @param ruleText The rule text\n     ",
    "links" : [ ]
  }, {
    "name" : "private NFSubstitution extractSubstitution(NFRuleSet owner, NFRule predecessor)",
    "returnType" : "NFSubstitution",
    "comment" : "\n     * Searches the rule's rule text for the first substitution token,\n     * creates a substitution based on it, and removes the token from\n     * the rule's rule text.\n     * @param owner The rule set containing this rule\n     * @param predecessor The rule preceding this one in the rule set's\n     * rule list\n     * @return The newly-created substitution.  This is never null; if\n     * the rule text doesn't contain any substitution tokens, this will\n     * be a NullSubstitution.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setBaseValue(long newBaseValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the rule's base value, and causes the radix and exponent\n     * to be recalculated.  This is used during construction when we\n     * don't know the rule's base value until after it's been\n     * constructed.  It should not be used at any other time.\n     * @param newBaseValue The new base value for the rule.\n     ",
    "links" : [ ]
  }, {
    "name" : "private short expectedExponent()",
    "returnType" : "short",
    "comment" : "\n     * This calculates the rule's exponent based on its radix and base\n     * value.  This will be the highest power the radix can be raised to\n     * and still produce a result less than or equal to the base value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int indexOfAnyRulePrefix(String ruleText)",
    "returnType" : "int",
    "comment" : "\n     * Searches the rule's rule text for any of the specified strings.\n     * @return The index of the first match in the rule's rule text\n     * (i.e., the first substring in the rule's rule text that matches\n     * _any_ of the strings in \"strings\").  If none of the strings in\n     * \"strings\" is found in the rule's rule text, returns -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests two rules for equality.\n     * @param that The rule to compare this one against\n     * @return True if the two rules are functionally equivalent\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a textual representation of the rule.  This won't\n     * necessarily be the same as the description that this rule\n     * was created with, but it will produce the same result.\n     * @return A textual description of the rule\n     ",
    "links" : [ ]
  }, {
    "name" : "public final char getDecimalPoint()",
    "returnType" : "char",
    "comment" : "\n     * Returns the rule's base value\n     * @return The rule's base value\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getBaseValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the rule's base value\n     * @return The rule's base value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDivisor()",
    "returnType" : "long",
    "comment" : "\n     * Returns the rule's divisor (the value that controls the behavior\n     * of its substitutions)\n     * @return The rule's divisor\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasModulusSubstitution()",
    "returnType" : "boolean",
    "comment" : "\n     * Internal function used by the rounding code in MultiplierSubstitution.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doFormat(long number, StringBuilder toInsertInto, int pos, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Formats the number, and inserts the resulting text into\n     * toInsertInto.\n     * @param number The number being formatted\n     * @param toInsertInto The string where the resultant text should\n     * be inserted\n     * @param pos The position in toInsertInto where the resultant text\n     * should be inserted\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doFormat(double number, StringBuilder toInsertInto, int pos, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Formats the number, and inserts the resulting text into\n     * toInsertInto.\n     * @param number The number being formatted\n     * @param toInsertInto The string where the resultant text should\n     * be inserted\n     * @param pos The position in toInsertInto where the resultant text\n     * should be inserted\n     ",
    "links" : [ ]
  }, {
    "name" : " static long power(long base, short exponent)",
    "returnType" : "long",
    "comment" : "\n     * This is an equivalent to Math.pow that accurately works on 64-bit numbers\n     * @param base The base\n     * @param exponent The exponent\n     * @return radix ** exponent\n     * @see Math#pow(double, double)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldRollBack(long number)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by the owning rule set to determine whether to invoke the\n     * rollback rule (i.e., whether this rule or the one that precedes\n     * it in the rule set's list should be used to format the number)\n     * @param number The number being formatted\n     * @return True if the rule set should use the rule that precedes\n     * this one in its list; false if it should use this rule\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number doParse(String text, ParsePosition parsePosition, boolean isFractionRule, double upperBound, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * Attempts to parse the string with this rule.\n     * @param text The string being parsed\n     * @param parsePosition On entry, the value is ignored and assumed to\n     * be 0. On exit, this has been updated with the position of the first\n     * character not consumed by matching the text against this rule\n     * (if this rule doesn't match the text at all, the parse position\n     * if left unchanged (presumably at 0) and the function returns\n     * Long.valueOf(0)).\n     * @param isFractionRule True if this rule is contained within a\n     * fraction rule set.  This is only used if the rule has no\n     * substitutions.\n     * @return If this rule matched the text, this is the rule's base value\n     * combined appropriately with the results of parsing the substitutions.\n     * If nothing matched, this is Long.valueOf(0) and the parse position is\n     * left unchanged.  The result will be an instance of Long if the\n     * result is an integer and Double otherwise.  The result is never null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String stripPrefix(String text, String prefix, ParsePosition pp)",
    "returnType" : "String",
    "comment" : "\n     * This function is used by parse() to match the text being parsed\n     * against a possible prefix string.  This function\n     * matches characters from the beginning of the string being parsed\n     * to characters from the prospective prefix.  If they match, pp is\n     * updated to the first character not matched, and the result is\n     * the unparsed part of the string.  If they don't match, the whole\n     * string is returned, and pp is left unchanged.\n     * @param text The string being parsed\n     * @param prefix The text to match against\n     * @param pp On entry, ignored and assumed to be 0.  On exit, points\n     * to the first unmatched character (assuming the whole prefix matched),\n     * or is unchanged (if the whole prefix didn't match).\n     * @return If things match, this is the unparsed part of \"text\";\n     * if they didn't match, this is \"text\".\n     ",
    "links" : [ ]
  }, {
    "name" : "private Number matchToDelimiter(String text, int startPos, double baseVal, String delimiter, PluralFormat pluralFormatDelimiter, ParsePosition pp, NFSubstitution sub, double upperBound, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * Used by parse() to match a substitution and any following text.\n     * \"text\" is searched for instances of \"delimiter\".  For each instance\n     * of delimiter, the intervening text is tested to see whether it\n     * matches the substitution.  The longest match wins.\n     * @param text The string being parsed\n     * @param startPos The position in \"text\" where we should start looking\n     * for \"delimiter\".\n     * @param baseVal A partial parse result (often the rule's base value),\n     * which is combined with the result from matching the substitution\n     * @param delimiter The string to search \"text\" for.\n     * @param pp Ignored and presumed to be 0 on entry.  If there's a match,\n     * on exit this will point to the first unmatched character.\n     * @param sub If we find \"delimiter\" in \"text\", this substitution is used\n     * to match the text between the beginning of the string and the\n     * position of \"delimiter.\"  (If \"delimiter\" is the empty string, then\n     * this function just matches against this substitution and updates\n     * everything accordingly.)\n     * @param upperBound When matching the substitution, it will only\n     * consider rules with base values lower than this value.\n     * @return If there's a match, this is the result of composing\n     * baseValue with the result of matching the substitution.  Otherwise,\n     * this is Long.valueOf(0).  It's never null.  If the result is an integer,\n     * this will be an instance of Long; otherwise, it's an instance of\n     * Double.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int prefixLength(String str, String prefix)",
    "returnType" : "int",
    "comment" : "\n     * Used by stripPrefix() to match characters.  If lenient parse mode\n     * is off, this just calls startsWith().  If lenient parse mode is on,\n     * this function uses CollationElementIterators to match characters in\n     * the strings (only primary-order differences are significant in\n     * determining whether there's a match).\n     * @param str The string being tested\n     * @param prefix The text we're hoping to see at the beginning\n     * of \"str\"\n     * @return If \"prefix\" is found at the beginning of \"str\", this\n     * is the number of characters in \"str\" that were matched (this\n     * isn't necessarily the same as the length of \"prefix\" when matching\n     * text with a collator).  If there's no match, this is 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] findText(String str, String key, PluralFormat pluralFormatKey, int startingAt)",
    "returnType" : "int[]",
    "comment" : "\n     * Searches a string for another string.  If lenient parsing is off,\n     * this just calls indexOf().  If lenient parsing is on, this function\n     * uses CollationElementIterator to match characters, and only\n     * primary-order differences are significant in determining whether\n     * there's a match.\n     * @param str The string to search\n     * @param key The string to search \"str\" for\n     * @param startingAt The index into \"str\" where the search is to\n     * begin\n     * @return A two-element array of ints.  Element 0 is the position\n     * of the match, or -1 if there was no match.  Element 1 is the\n     * number of characters in \"str\" that matched (which isn't necessarily\n     * the same as the length of \"key\")\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean allIgnorable(String str)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks to see whether a string consists entirely of ignorable\n     * characters.\n     * @param str The string to test.\n     * @return true if the string is empty of consists entirely of\n     * characters that the number formatter's collator says are\n     * ignorable at the primary-order level.  false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void makeRules(String description, NFRuleSet owner, NFRule predecessor, RuleBasedNumberFormat ownersOwner, List<NFRule> returnList)", "private String parseRuleDescriptor(String description)", "private void extractSubstitutions(NFRuleSet owner, String ruleText, NFRule predecessor)", "private NFSubstitution extractSubstitution(NFRuleSet owner, NFRule predecessor)", " final void setBaseValue(long newBaseValue)", "private short expectedExponent()", "private static int indexOfAnyRulePrefix(String ruleText)", "public boolean equals(Object that)", "public int hashCode()", "public String toString()", "public final char getDecimalPoint()", "public final long getBaseValue()", "public long getDivisor()", " boolean hasModulusSubstitution()", "public void doFormat(long number, StringBuilder toInsertInto, int pos, int recursionCount)", "public void doFormat(double number, StringBuilder toInsertInto, int pos, int recursionCount)", " static long power(long base, short exponent)", "public boolean shouldRollBack(long number)", "public Number doParse(String text, ParsePosition parsePosition, boolean isFractionRule, double upperBound, int nonNumericalExecutedRuleMask)", "private String stripPrefix(String text, String prefix, ParsePosition pp)", "private Number matchToDelimiter(String text, int startPos, double baseVal, String delimiter, PluralFormat pluralFormatDelimiter, ParsePosition pp, NFSubstitution sub, double upperBound, int nonNumericalExecutedRuleMask)", "private int prefixLength(String str, String prefix)", "private int[] findText(String str, String key, PluralFormat pluralFormatKey, int startingAt)", "private boolean allIgnorable(String str)", "public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)" ],
  "variableNames" : [ "NEGATIVE_NUMBER_RULE", "IMPROPER_FRACTION_RULE", "PROPER_FRACTION_RULE", "DEFAULT_RULE", "INFINITY_RULE", "NAN_RULE", "ZERO", "baseValue", "radix", "exponent", "decimalPoint", "ruleText", "rulePatternFormat", "sub1", "sub2", "formatter", "RULE_PREFIXES" ]
}