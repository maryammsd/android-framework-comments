{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/WallpaperColors.java",
  "packageName" : "android.app",
  "className" : "WallpaperColors",
  "comment" : "\n * Provides information about the colors of a wallpaper.\n * <p>\n * Exposes the 3 most visually representative colors of a wallpaper. Can be either\n * {@link WallpaperColors#getPrimaryColor()}, {@link WallpaperColors#getSecondaryColor()}\n * or {@link WallpaperColors#getTertiaryColor()}.\n ",
  "variables" : [ {
    "name" : "DEBUG_DARK_PIXELS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HINT_SUPPORTS_DARK_TEXT",
    "type" : "int",
    "comment" : "\n     * Specifies that dark text is preferred over the current wallpaper for best presentation.\n     * <p>\n     * eg. A launcher may set its text color to black if this flag is specified.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HINT_SUPPORTS_DARK_THEME",
    "type" : "int",
    "comment" : "\n     * Specifies that dark theme is preferred over the current wallpaper for best presentation.\n     * <p>\n     * eg. A launcher may set its drawer color to black if this flag is specified.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HINT_FROM_BITMAP",
    "type" : "int",
    "comment" : "\n     * Specifies that this object was generated by extracting colors from a bitmap.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_BITMAP_SIZE",
    "type" : "int",
    "comment" : " Maximum size that a bitmap can have to keep our calculations sane",
    "links" : [ ]
  }, {
    "name" : "MAX_WALLPAPER_EXTRACTION_AREA",
    "type" : "int",
    "comment" : " using the area instead. This way our comparisons are aspect ratio independent.",
    "links" : [ ]
  }, {
    "name" : "MIN_COLOR_OCCURRENCE",
    "type" : "float",
    "comment" : " present in at least MIN_COLOR_OCCURRENCE of the image",
    "links" : [ ]
  }, {
    "name" : "DARK_THEME_MEAN_LUMINANCE",
    "type" : "float",
    "comment" : " Decides when dark theme is optimal for this wallpaper",
    "links" : [ ]
  }, {
    "name" : "BRIGHT_IMAGE_MEAN_LUMINANCE",
    "type" : "float",
    "comment" : " Minimum mean luminosity that an image needs to have to support dark text",
    "links" : [ ]
  }, {
    "name" : "DARK_PIXEL_CONTRAST",
    "type" : "float",
    "comment" : " to avoid bright images with some dark spots.",
    "links" : [ ]
  }, {
    "name" : "MAX_DARK_AREA",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainColors",
    "type" : "ArrayList<Color>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorHints",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WallpaperColors>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static WallpaperColors fromDrawable(Drawable drawable)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * Constructs {@link WallpaperColors} from a drawable.\n     * <p>\n     * Main colors will be extracted from the drawable.\n     *\n     * @param drawable Source where to extract from.\n     ",
    "links" : [ "WallpaperColors" ]
  }, {
    "name" : "public static WallpaperColors fromBitmap(@NonNull Bitmap bitmap)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * Constructs {@link WallpaperColors} from a bitmap.\n     * <p>\n     * Main colors will be extracted from the bitmap.\n     *\n     * @param bitmap Source where to extract from.\n     ",
    "links" : [ "WallpaperColors" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Color getPrimaryColor()",
    "returnType" : "Color",
    "comment" : "\n     * Gets the most visually representative color of the wallpaper.\n     * \"Visually representative\" means easily noticeable in the image,\n     * probably happening at high frequency.\n     *\n     * @return A color.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Color getSecondaryColor()",
    "returnType" : "Color",
    "comment" : "\n     * Gets the second most preeminent color of the wallpaper. Can be null.\n     *\n     * @return A color, may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Color getTertiaryColor()",
    "returnType" : "Color",
    "comment" : "\n     * Gets the third most preeminent color of the wallpaper. Can be null.\n     *\n     * @return A color, may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Color> getMainColors()",
    "returnType" : "List<Color>",
    "comment" : "\n     * List of most preeminent colors, sorted by importance.\n     *\n     * @return List of colors.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColorHints()",
    "returnType" : "int",
    "comment" : "\n     * Combination of WallpaperColor hints.\n     *\n     * @see WallpaperColors#HINT_SUPPORTS_DARK_TEXT\n     * @return True if dark text is supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorHints(int colorHints)",
    "returnType" : "void",
    "comment" : "\n     * @param colorHints Combination of WallpaperColors hints.\n     * @see WallpaperColors#HINT_SUPPORTS_DARK_TEXT\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int calculateDarkHints(Bitmap source)",
    "returnType" : "int",
    "comment" : "\n     * Checks if image is bright and clean enough to support light text.\n     *\n     * @param source What to read.\n     * @return Whether image supports dark text or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Size calculateOptimalSize(int width, int height)",
    "returnType" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG_DARK_PIXELS", "HINT_SUPPORTS_DARK_TEXT", "HINT_SUPPORTS_DARK_THEME", "HINT_FROM_BITMAP", "MAX_BITMAP_SIZE", "MAX_WALLPAPER_EXTRACTION_AREA", "MIN_COLOR_OCCURRENCE", "DARK_THEME_MEAN_LUMINANCE", "BRIGHT_IMAGE_MEAN_LUMINANCE", "DARK_PIXEL_CONTRAST", "MAX_DARK_AREA", "mMainColors", "mColorHints", "CREATOR" ],
  "methodNames" : [ "public static WallpaperColors fromDrawable(Drawable drawable)", "public static WallpaperColors fromBitmap(@NonNull Bitmap bitmap)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public Color getPrimaryColor()", "public Color getSecondaryColor()", "public Color getTertiaryColor()", "public List<Color> getMainColors()", "public boolean equals(Object o)", "public int hashCode()", "public int getColorHints()", "public void setColorHints(int colorHints)", "private static int calculateDarkHints(Bitmap source)", "private static Size calculateOptimalSize(int width, int height)", "public String toString()" ]
}