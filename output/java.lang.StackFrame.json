{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StackWalker.java",
  "packageName" : "java.lang",
  "className" : "StackFrame",
  "comment" : "\n     * A {@code StackFrame} object represents a method invocation returned by\n     * {@link StackWalker}.\n     *\n     * <p> The {@link #getDeclaringClass()} method may be unsupported as determined\n     * by the {@linkplain Option stack walking options} of a {@linkplain\n     * StackWalker stack walker}.\n     *\n     * @since 9\n     * @jvms 2.6\n     ",
  "links" : [ "#getDeclaringClass()", "java.lang.StackWalker" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getClassName()",
    "returnType" : "String",
    "comment" : "\n         * Gets the <a href=\"ClassLoader.html#binary-name\">binary name</a>\n         * of the declaring class of the method represented by this stack frame.\n         *\n         * @return the binary name of the declaring class of the method\n         *         represented by this stack frame\n         *\n         * @jls 13.1 The Form of a Binary\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getMethodName()",
    "returnType" : "String",
    "comment" : "\n         * Gets the name of the method represented by this stack frame.\n         * @return the name of the method represented by this stack frame\n         ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getDeclaringClass()",
    "returnType" : "Class<?>",
    "comment" : "\n         * Gets the declaring {@code Class} for the method represented by\n         * this stack frame.\n         *\n         * @return the declaring {@code Class} of the method represented by\n         * this stack frame\n         *\n         * @throws UnsupportedOperationException if this {@code StackWalker}\n         *         is not configured with {@link Option#RETAIN_CLASS_REFERENCE\n         *         Option.RETAIN_CLASS_REFERENCE}.\n         ",
    "links" : [ "#RETAIN_CLASS_REFERENCEOption.RETAIN_CLASS_REFERENCE" ]
  }, {
    "name" : "public MethodType getMethodType()",
    "returnType" : "MethodType",
    "comment" : "\n         * Returns the {@link MethodType} representing the parameter types and\n         * the return type for the method represented by this stack frame.\n         *\n         * @implSpec\n         * The default implementation throws {@code UnsupportedOperationException}.\n         *\n         * @return the {@code MethodType} for this stack frame\n         *\n         * @throws UnsupportedOperationException if this {@code StackWalker}\n         *         is not configured with {@link Option#RETAIN_CLASS_REFERENCE\n         *         Option.RETAIN_CLASS_REFERENCE}.\n         *\n         * @since 10\n         ",
    "links" : [ "java.lang.invoke.MethodType", "#RETAIN_CLASS_REFERENCEOption.RETAIN_CLASS_REFERENCE" ]
  }, {
    "name" : "public String getDescriptor()",
    "returnType" : "String",
    "comment" : "\n         * Returns the <i>descriptor</i> of the method represented by\n         * this stack frame as defined by\n         * <cite>The Java Virtual Machine Specification</cite>.\n         *\n         * @implSpec\n         * The default implementation throws {@code UnsupportedOperationException}.\n         *\n         * @return the descriptor of the method represented by\n         *         this stack frame\n         *\n         * @see MethodType#fromMethodDescriptorString(String, ClassLoader)\n         * @see MethodType#toMethodDescriptorString()\n         * @jvms 4.3.3 Method Descriptor\n         *\n         * @since 10\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getByteCodeIndex()",
    "returnType" : "int",
    "comment" : "\n         * Returns the index to the {@code insns} array of a {@code code_item}\n         * containing the execution point represented by this stack frame.\n         * The code array gives the actual bytes of Dalvik bytecode\n         * that implement the method.\n         *\n         * @return the index to the {@code insns} array of the {@code code_item} attribute\n         *         containing the execution point represented by this stack frame,\n         *         or a negative number if the method is native.\n         *\n         * @jvms 4.7.3 The {@code Code} Attribute\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getFileName()",
    "returnType" : "String",
    "comment" : "\n         * Returns the name of the source file containing the execution point\n         * represented by this stack frame.  Generally, this corresponds\n         * to the {@code SourceFile} attribute of the relevant {@code class}\n         * file as defined by <cite>The Java Virtual Machine Specification</cite>.\n         * In some systems, the name may refer to some source code unit\n         * other than a file, such as an entry in a source repository.\n         *\n         * @return the name of the file containing the execution point\n         *         represented by this stack frame, or {@code null} if\n         *         this information is unavailable.\n         *\n         * @jvms 4.7.10 The {@code SourceFile} Attribute\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n         * Returns the line number of the source line containing the execution\n         * point represented by this stack frame.  Generally, this is\n         * derived from the {@code LineNumberTable} attribute of the relevant\n         * {@code class} file as defined by <cite>The Java Virtual Machine\n         * Specification</cite>.\n         *\n         * @return the line number of the source line containing the execution\n         *         point represented by this stack frame, or a negative number if\n         *         this information is unavailable.\n         *\n         * @jvms 4.7.12 The {@code LineNumberTable} Attribute\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNativeMethod()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if the method containing the execution point\n         * represented by this stack frame is a native method.\n         *\n         * @return {@code true} if the method containing the execution point\n         *         represented by this stack frame is a native method.\n         ",
    "links" : [ ]
  }, {
    "name" : "public StackTraceElement toStackTraceElement()",
    "returnType" : "StackTraceElement",
    "comment" : "\n         * Gets a {@code StackTraceElement} for this stack frame.\n         *\n         * @return {@code StackTraceElement} for this stack frame.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getClassName()", "public String getMethodName()", "public Class<?> getDeclaringClass()", "public MethodType getMethodType()", "public String getDescriptor()", "public int getByteCodeIndex()", "public String getFileName()", "public int getLineNumber()", "public boolean isNativeMethod()", "public StackTraceElement toStackTraceElement()" ],
  "variableNames" : [ ]
}