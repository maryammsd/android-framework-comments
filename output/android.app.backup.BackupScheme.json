{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/FullBackup.java",
  "packageName" : "android.app.backup",
  "className" : "BackupScheme",
  "comment" : "",
  "variables" : [ {
    "name" : "FILES_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATABASE_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROOT_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHAREDPREF_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOBACKUP_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_FILES_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_DATABASE_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROOT_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_SHAREDPREF_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CACHE_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_NOBACKUP_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_DIR",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_INCLUDE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_EXCLUDE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullBackupContent",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageManager",
    "type" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStorageManager",
    "type" : "StorageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumes",
    "type" : "StorageVolume[]",
    "comment" : " lazy initialized, only when needed",
    "links" : [ ]
  }, {
    "name" : "mIncludes",
    "type" : "Map<String, Set<PathWithRequiredFlags>>",
    "comment" : "\n         * A map of domain -> set of pairs (canonical file; required transport flags) in that\n         * domain that are to be included if the transport has decared the required flags.\n         * We keep track of the domain so that we can go through the file system in order later on.\n         ",
    "links" : [ ]
  }, {
    "name" : "mExcludes",
    "type" : "ArraySet<PathWithRequiredFlags>",
    "comment" : "\n         * Set that will be populated with pairs (canonical file; requiredFlags=0) for each file or\n         * directory that is to be excluded. Note that for excludes, the requiredFlags attribute is\n         * ignored and the value should be always set to 0.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " String tokenToDirectoryPath(String domainToken)",
    "returnType" : "String",
    "comment" : "\n         * Parse out the semantic domains into the correct physical location.\n         ",
    "links" : [ ]
  }, {
    "name" : "private String sharedDomainToPath(String domain) throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StorageVolume[] getVolumeList()",
    "returnType" : "StorageVolume[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isFullBackupContentEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized Map<String, Set<PathWithRequiredFlags>> maybeParseAndGetCanonicalIncludePaths() throws IOException, XmlPullParserException",
    "returnType" : "Map<String, Set<PathWithRequiredFlags>>",
    "comment" : "\n         * @return A mapping of domain -> set of pairs (canonical file; required transport flags)\n         * in that domain that are to be included if the transport has decared the required flags.\n         * Each of these paths specifies a file that the client has explicitly included in their\n         * backup set. If this map is empty we will back up the entire data directory (including\n         * managed external storage).\n         ",
    "links" : [ ]
  }, {
    "name" : "public synchronized ArraySet<PathWithRequiredFlags> maybeParseAndGetCanonicalExcludePaths() throws IOException, XmlPullParserException",
    "returnType" : "ArraySet<PathWithRequiredFlags>",
    "comment" : "\n         * @return A set of (canonical paths; requiredFlags=0) that are to be excluded from the\n         * backup/restore set.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void maybeParseBackupSchemeLocked() throws IOException, XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parseBackupSchemeFromXmlLocked(XmlPullParser parser, Set<PathWithRequiredFlags> excludes, Map<String, Set<PathWithRequiredFlags>> includes) throws IOException, XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getRequiredFlagsFromString(String requiredFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Set<PathWithRequiredFlags> parseCurrentTagForDomain(XmlPullParser parser, Set<PathWithRequiredFlags> excludes, Map<String, Set<PathWithRequiredFlags>> includes, String domain) throws XmlPullParserException",
    "returnType" : "Set<PathWithRequiredFlags>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getTokenForXmlDomain(String xmlDomain)",
    "returnType" : "String",
    "comment" : "\n         * Map xml specified domain (human-readable, what clients put in their manifest's xml) to\n         * BackupAgent internal data token.\n         * @return null if the xml domain was invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "private File extractCanonicalFile(File domain, String filePathFromXml)",
    "returnType" : "File",
    "comment" : "\n         *\n         * @param domain Directory where the specified file should exist. Not null.\n         * @param filePathFromXml parsed from xml. Not sanitised before calling this function so may\n         *                        be null.\n         * @return The canonical path of the file specified or null if no such file exists.\n         ",
    "links" : [ ]
  }, {
    "name" : "private File getDirectoryForCriteriaDomain(String domain)",
    "returnType" : "File",
    "comment" : "\n         * @param domain parsed from xml. Not sanitised before calling this function so may be null.\n         * @return The directory relevant to the domain specified.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void validateInnerTagContents(XmlPullParser parser) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n         * Let's be strict about the type of xml the client can write. If we see anything untoward,\n         * throw an XmlPullParserException.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FILES_DIR", "DATABASE_DIR", "ROOT_DIR", "SHAREDPREF_DIR", "CACHE_DIR", "NOBACKUP_DIR", "DEVICE_FILES_DIR", "DEVICE_DATABASE_DIR", "DEVICE_ROOT_DIR", "DEVICE_SHAREDPREF_DIR", "DEVICE_CACHE_DIR", "DEVICE_NOBACKUP_DIR", "EXTERNAL_DIR", "TAG_INCLUDE", "TAG_EXCLUDE", "mFullBackupContent", "mPackageManager", "mStorageManager", "mPackageName", "mVolumes", "mIncludes", "mExcludes" ],
  "methodNames" : [ " String tokenToDirectoryPath(String domainToken)", "private String sharedDomainToPath(String domain) throws IOException", "private StorageVolume[] getVolumeList()", " boolean isFullBackupContentEnabled()", "public synchronized Map<String, Set<PathWithRequiredFlags>> maybeParseAndGetCanonicalIncludePaths() throws IOException, XmlPullParserException", "public synchronized ArraySet<PathWithRequiredFlags> maybeParseAndGetCanonicalExcludePaths() throws IOException, XmlPullParserException", "private void maybeParseBackupSchemeLocked() throws IOException, XmlPullParserException", "public void parseBackupSchemeFromXmlLocked(XmlPullParser parser, Set<PathWithRequiredFlags> excludes, Map<String, Set<PathWithRequiredFlags>> includes) throws IOException, XmlPullParserException", "private int getRequiredFlagsFromString(String requiredFlags)", "private Set<PathWithRequiredFlags> parseCurrentTagForDomain(XmlPullParser parser, Set<PathWithRequiredFlags> excludes, Map<String, Set<PathWithRequiredFlags>> includes, String domain) throws XmlPullParserException", "private String getTokenForXmlDomain(String xmlDomain)", "private File extractCanonicalFile(File domain, String filePathFromXml)", "private File getDirectoryForCriteriaDomain(String domain)", "private void validateInnerTagContents(XmlPullParser parser) throws XmlPullParserException" ]
}