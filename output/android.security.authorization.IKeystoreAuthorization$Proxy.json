{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/authorization/IKeystoreAuthorization.java",
  "packageName" : "android.security.authorization",
  "className" : "Proxy",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInterfaceDescriptor()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addAuthToken(android.hardware.security.keymint.HardwareAuthToken authToken) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Allows the Android authenticators to hand over an auth token to Keystore.\n       * Callers require 'AddAuth' permission.\n       * ## Error conditions:\n       * `ResponseCode::PERMISSION_DENIED` - if the callers do not have the 'AddAuth' permission.\n       * `ResponseCode::SYSTEM_ERROR` - if failed to store the auth token in the database or if failed\n       * to add the auth token to the operation, if it is a per-op auth token.\n       * \n       * @param authToken The auth token created by an authenticator, upon user authentication.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceUnlocked(int userId, byte[] password) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Tells Keystore that the device is now unlocked for a user.  Requires the 'Unlock' permission.\n       * \n       * This method makes Keystore start allowing the use of the given user's keys that require an\n       * unlocked device, following the device boot or an earlier call to onDeviceLocked() which\n       * disabled the use of such keys.  In addition, once per boot, this method must be called with a\n       * password before keys that require user authentication can be used.\n       * \n       * This method does two things to restore access to UnlockedDeviceRequired keys.  First, it sets\n       * a flag that indicates the user is unlocked.  This is always done, and it makes Keystore's\n       * logical enforcement of UnlockedDeviceRequired start passing.  Second, it recovers and caches\n       * the user's UnlockedDeviceRequired super keys.  This succeeds only in the following cases:\n       * \n       *  - The (correct) password is provided, proving that the user has authenticated using LSKF or\n       *    equivalent.  This is the most powerful type of unlock.  Keystore uses the password to\n       *    decrypt the user's UnlockedDeviceRequired super keys from disk.  It also uses the password\n       *    to decrypt the user's AfterFirstUnlock super key from disk, if not already done.\n       * \n       *  - The user's UnlockedDeviceRequired super keys are cached in biometric-encrypted form, and a\n       *    matching valid HardwareAuthToken has been added to Keystore.  I.e., class 3 biometric\n       *    unlock is enabled and the user recently authenticated using a class 3 biometric.  The keys\n       *    are cached in biometric-encrypted form if onDeviceLocked() was called with a nonempty list\n       *    of unlockingSids, and onNonLskfUnlockMethodsExpired() was not called later.\n       * \n       *  - The user's UnlockedDeviceRequired super keys are already cached in plaintext.  This is the\n       *    case if onDeviceLocked() was called with weakUnlockEnabled=true, and\n       *    onWeakUnlockMethodsExpired() was not called later.  This case provides only\n       *    Keystore-enforced logical security for UnlockedDeviceRequired.\n       * \n       * ## Error conditions:\n       * `ResponseCode::PERMISSION_DENIED` - if the caller does not have the 'Unlock' permission.\n       * `ResponseCode::VALUE_CORRUPTED` - if a super key can not be decrypted.\n       * `ResponseCode::KEY_NOT_FOUND` - if a super key is not found.\n       * `ResponseCode::SYSTEM_ERROR` - if another error occurred.\n       * \n       * @param userId The Android user ID of the user for which the device is now unlocked\n       * @param password If available, a secret derived from the user's synthetic password\n       ",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceLocked(int userId, long[] unlockingSids, boolean weakUnlockEnabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Tells Keystore that the device is now locked for a user.  Requires the 'Lock' permission.\n       * \n       * This method makes Keystore stop allowing the use of the given user's keys that require an\n       * unlocked device.  This is enforced logically, and when possible it's also enforced\n       * cryptographically by wiping the UnlockedDeviceRequired super keys from memory.\n       * \n       * unlockingSids and weakUnlockEnabled specify the methods by which the device can become\n       * unlocked for the user, in addition to LSKF-equivalent authentication.\n       * \n       * unlockingSids is the list of SIDs of class 3 (strong) biometrics that can unlock.  If\n       * unlockingSids is non-empty, then this method saves a copy of the UnlockedDeviceRequired super\n       * keys in memory encrypted by a new AES key that is imported into KeyMint and configured to be\n       * usable only when user authentication has occurred using any of the SIDs.  This allows the\n       * keys to be recovered if the device is unlocked using a class 3 biometric.\n       * \n       * weakUnlockEnabled is true if the unlock can happen using a method that does not have an\n       * associated SID, such as a class 1 (convenience) biometric, class 2 (weak) biometric, or trust\n       * agent.  These methods don't count as \"authentication\" from Keystore's perspective.  In this\n       * case, Keystore keeps a copy of the UnlockedDeviceRequired super keys in memory in plaintext,\n       * providing only logical security for UnlockedDeviceRequired.\n       * \n       * ## Error conditions:\n       * `ResponseCode::PERMISSION_DENIED` - if the caller does not have the 'Lock' permission.\n       * \n       * @param userId The Android user ID of the user for which the device is now locked\n       * @param unlockingSids SIDs of class 3 biometrics that can unlock the device for the user\n       * @param weakUnlockEnabled Whether a weak unlock method can unlock the device for the user\n       ",
    "links" : [ ]
  }, {
    "name" : "public void onWeakUnlockMethodsExpired(int userId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Tells Keystore that weak unlock methods can no longer unlock the device for the given user.\n       * This is intended to be called after an earlier call to onDeviceLocked() with\n       * weakUnlockEnabled=true.  It upgrades the security level of UnlockedDeviceRequired keys to\n       * that which would have resulted from calling onDeviceLocked() with weakUnlockEnabled=false.\n       * \n       * ## Error conditions:\n       * `ResponseCode::PERMISSION_DENIED` - if the caller does not have the 'Lock' permission.\n       * \n       * @param userId The Android user ID of the user for which weak unlock methods have expired\n       ",
    "links" : [ ]
  }, {
    "name" : "public void onNonLskfUnlockMethodsExpired(int userId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Tells Keystore that non-LSKF-equivalent unlock methods can no longer unlock the device for\n       * the given user.  This is intended to be called after an earlier call to onDeviceLocked() with\n       * nonempty unlockingSids.  It upgrades the security level of UnlockedDeviceRequired keys to\n       * that which would have resulted from calling onDeviceLocked() with unlockingSids=[] and\n       * weakUnlockEnabled=false.\n       * \n       * ## Error conditions:\n       * `ResponseCode::PERMISSION_DENIED` - if the caller does not have the 'Lock' permission.\n       * \n       * @param userId The Android user ID of the user for which non-LSKF unlock methods have expired\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.security.authorization.AuthorizationTokens getAuthTokensForCredStore(long challenge, long secureUserId, long authTokenMaxAgeMillis) throws android.os.RemoteException",
    "returnType" : "android.security.authorization.AuthorizationTokens",
    "comment" : "\n       * Allows Credstore to retrieve a HardwareAuthToken and a TimestampToken.\n       * Identity Credential Trusted App can run either in the TEE or in other secure Hardware.\n       * So, credstore always need to retrieve a TimestampToken along with a HardwareAuthToken.\n       * \n       * The passed in |challenge| parameter must always be non-zero.\n       * \n       * The returned TimestampToken will always have its |challenge| field set to\n       * the |challenge| parameter.\n       * \n       * This method looks through auth-tokens cached by keystore which match\n       * the passed-in |secureUserId|.\n       * The most recent matching auth token which has a |challenge| field which matches\n       * the passed-in |challenge| parameter is returned.\n       * In this case the |authTokenMaxAgeMillis| parameter is not used.\n       * \n       * Otherwise, the most recent matching auth token which is younger\n       * than |authTokenMaxAgeMillis| is returned.\n       * \n       * This method is called by credstore (and only credstore).\n       * \n       * The caller requires 'get_auth_token' permission.\n       * \n       * ## Error conditions:\n       * `ResponseCode::PERMISSION_DENIED` - if the caller does not have the 'get_auth_token'\n       *                                     permission.\n       * `ResponseCode::SYSTEM_ERROR` - if failed to obtain an authtoken from the database.\n       * `ResponseCode::NO_AUTH_TOKEN_FOUND` - a matching auth token is not found.\n       * `ResponseCode::INVALID_ARGUMENT` - if the passed-in |challenge| parameter is zero.\n       ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAuthTime(long secureUserId, int[] authTypes) throws android.os.RemoteException",
    "returnType" : "long",
    "comment" : "\n       * Returns the last successful authentication time since boot for the given user with any of the\n       * given authenticator types. This is determined by inspecting the cached auth tokens.\n       * \n       * ## Error conditions:\n       * `ResponseCode::NO_AUTH_TOKEN_FOUND` - if there is no matching authentication token found\n       ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.os.IBinder asBinder()", "public java.lang.String getInterfaceDescriptor()", "public void addAuthToken(android.hardware.security.keymint.HardwareAuthToken authToken) throws android.os.RemoteException", "public void onDeviceUnlocked(int userId, byte[] password) throws android.os.RemoteException", "public void onDeviceLocked(int userId, long[] unlockingSids, boolean weakUnlockEnabled) throws android.os.RemoteException", "public void onWeakUnlockMethodsExpired(int userId) throws android.os.RemoteException", "public void onNonLskfUnlockMethodsExpired(int userId) throws android.os.RemoteException", "public android.security.authorization.AuthorizationTokens getAuthTokensForCredStore(long challenge, long secureUserId, long authTokenMaxAgeMillis) throws android.os.RemoteException", "public long getLastAuthTime(long secureUserId, int[] authTypes) throws android.os.RemoteException" ],
  "variableNames" : [ "mRemote" ]
}