{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/Mesh.java",
  "packageName" : "android.graphics",
  "className" : "Mesh",
  "comment" : "\n * Class representing a mesh object.\n *\n * This class represents a Mesh object that can optionally be indexed.\n * A {@link MeshSpecification} is required along with various attributes for\n * detailing the mesh object, including a mode, vertex buffer, optional index buffer, and bounds\n * for the mesh. Once generated, a mesh object can be drawn through\n * {@link Canvas#drawMesh(Mesh, BlendMode, Paint)}\n ",
  "links" : [ "android.graphics.Canvas#drawMesh(Mesh", "android.graphics.MeshSpecification" ],
  "variables" : [ {
    "name" : "mNativeMeshWrapper",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsIndexed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRIANGLES",
    "type" : "int",
    "comment" : "\n     * The mesh will be drawn with triangles without utilizing shared vertices.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRIANGLE_STRIP",
    "type" : "int",
    "comment" : "\n     * The mesh will be drawn with triangles utilizing shared vertices.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setColorUniform(@NonNull String uniformName, @ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform color value corresponding to the shader assigned to the mesh. If the shader\n     * does not have a uniform with that name or if the uniform is declared with a type other than\n     * vec3 or vec4 and corresponding layout(color) annotation then an IllegalArgumentExcepton is\n     * thrown.\n     *\n     * @param uniformName name matching the color uniform declared in the shader program.\n     * @param color       the provided sRGB color will be converted into the shader program's output\n     *                    colorspace and be available as a vec4 uniform in the program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorUniform(@NonNull String uniformName, @ColorLong long color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform color value corresponding to the shader assigned to the mesh. If the shader\n     * does not have a uniform with that name or if the uniform is declared with a type other than\n     * vec3 or vec4 and corresponding layout(color) annotation then an IllegalArgumentExcepton is\n     * thrown.\n     *\n     * @param uniformName name matching the color uniform declared in the shader program.\n     * @param color       the provided sRGB color will be converted into the shader program's output\n     *                    colorspace and be available as a vec4 uniform in the program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorUniform(@NonNull String uniformName, @NonNull Color color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform color value corresponding to the shader assigned to the mesh. If the shader\n     * does not have a uniform with that name or if the uniform is declared with a type other than\n     * vec3 or vec4 and corresponding layout(color) annotation then an IllegalArgumentExcepton is\n     * thrown.\n     *\n     * @param uniformName name matching the color uniform declared in the shader program.\n     * @param color       the provided sRGB color will be converted into the shader program's output\n     *                    colorspace and will be made available as a vec4 uniform in the program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than a\n     * float or float[1] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the float uniform declared in the shader program.\n     * @param value       float value corresponding to the float uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value1, float value2)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than a\n     * vec2 or float[2] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the float uniform declared in the shader program.\n     * @param value1      first float value corresponding to the float uniform with the given name.\n     * @param value2      second float value corresponding to the float uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than a\n     * vec3 or float[3] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the float uniform declared in the shader program.\n     * @param value1      first float value corresponding to the float uniform with the given name.\n     * @param value2      second float value corresponding to the float uniform with the given name.\n     * @param value3      third float value corresponding to the float unifiform with the given\n     *                    name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3, float value4)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than a\n     * vec4 or float[4] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the float uniform declared in the shader program.\n     * @param value1      first float value corresponding to the float uniform with the given name.\n     * @param value2      second float value corresponding to the float uniform with the given name.\n     * @param value3      third float value corresponding to the float uniform with the given name.\n     * @param value4      fourth float value corresponding to the float uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloatUniform(@NonNull String uniformName, @NonNull float[] values)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than a\n     * float (for N=1), vecN, or float[N], where N is the length of the values param, then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the float uniform declared in the shader program.\n     * @param values      float value corresponding to the vec4 float uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setFloatUniform(String uniformName, float value1, float value2, float value3, float value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setUniform(String uniformName, float[] values, boolean isColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than int\n     * or int[1] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the int uniform declared in the shader program.\n     * @param value       value corresponding to the int uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value1, int value2)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than ivec2\n     * or int[2] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the int uniform declared in the shader program.\n     * @param value1      first value corresponding to the int uniform with the given name.\n     * @param value2      second value corresponding to the int uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than ivec3\n     * or int[3] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the int uniform declared in the shader program.\n     * @param value1      first value corresponding to the int uniform with the given name.\n     * @param value2      second value corresponding to the int uniform with the given name.\n     * @param value3      third value corresponding to the int uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3, int value4)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than ivec4\n     * or int[4] then an IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the int uniform declared in the shader program.\n     * @param value1      first value corresponding to the int uniform with the given name.\n     * @param value2      second value corresponding to the int uniform with the given name.\n     * @param value3      third value corresponding to the int uniform with the given name.\n     * @param value4      fourth value corresponding to the int uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntUniform(@NonNull String uniformName, @NonNull int[] values)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uniform value corresponding to the shader assigned to the mesh. If the shader does\n     * not have a uniform with that name or if the uniform is declared with a type other than an\n     * int (for N=1), ivecN, or int[N], where N is the length of the values param, then an\n     * IllegalArgumentException is thrown.\n     *\n     * @param uniformName name matching the int uniform declared in the shader program.\n     * @param values      int values corresponding to the vec4 int uniform with the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getNativeWrapperInstance()",
    "returnType" : "long",
    "comment" : "\n     * @hide so only calls from module can utilize it\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setIntUniform(String uniformName, int value1, int value2, int value3, int value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void meshSetup(long nativeMeshWrapper, boolean isIndexed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeMake(long meshSpec, int mode, Buffer vertexBuffer, boolean isDirect, int vertexCount, int vertexOffset, float left, float top, float right, float bottom)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeMakeIndexed(long meshSpec, int mode, Buffer vertexBuffer, boolean isVertexDirect, int vertexCount, int vertexOffset, ShortBuffer indexBuffer, boolean isIndexDirect, int indexCount, int indexOffset, float left, float top, float right, float bottom)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long builder, String uniformName, float value1, float value2, float value3, float value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long builder, String uniformName, float[] values, boolean isColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long builder, String uniformName, int value1, int value2, int value3, int value4, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateUniforms(long builder, String uniformName, int[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setColorUniform(@NonNull String uniformName, @ColorInt int color)", "public void setColorUniform(@NonNull String uniformName, @ColorLong long color)", "public void setColorUniform(@NonNull String uniformName, @NonNull Color color)", "public void setFloatUniform(@NonNull String uniformName, float value)", "public void setFloatUniform(@NonNull String uniformName, float value1, float value2)", "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3)", "public void setFloatUniform(@NonNull String uniformName, float value1, float value2, float value3, float value4)", "public void setFloatUniform(@NonNull String uniformName, @NonNull float[] values)", "private void setFloatUniform(String uniformName, float value1, float value2, float value3, float value4, int count)", "private void setUniform(String uniformName, float[] values, boolean isColor)", "public void setIntUniform(@NonNull String uniformName, int value)", "public void setIntUniform(@NonNull String uniformName, int value1, int value2)", "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3)", "public void setIntUniform(@NonNull String uniformName, int value1, int value2, int value3, int value4)", "public void setIntUniform(@NonNull String uniformName, @NonNull int[] values)", " long getNativeWrapperInstance()", "private void setIntUniform(String uniformName, int value1, int value2, int value3, int value4, int count)", "private void meshSetup(long nativeMeshWrapper, boolean isIndexed)", "private static native long nativeGetFinalizer()", "private static native long nativeMake(long meshSpec, int mode, Buffer vertexBuffer, boolean isDirect, int vertexCount, int vertexOffset, float left, float top, float right, float bottom)", "private static native long nativeMakeIndexed(long meshSpec, int mode, Buffer vertexBuffer, boolean isVertexDirect, int vertexCount, int vertexOffset, ShortBuffer indexBuffer, boolean isIndexDirect, int indexCount, int indexOffset, float left, float top, float right, float bottom)", "private static native void nativeUpdateUniforms(long builder, String uniformName, float value1, float value2, float value3, float value4, int count)", "private static native void nativeUpdateUniforms(long builder, String uniformName, float[] values, boolean isColor)", "private static native void nativeUpdateUniforms(long builder, String uniformName, int value1, int value2, int value3, int value4, int count)", "private static native void nativeUpdateUniforms(long builder, String uniformName, int[] values)" ],
  "variableNames" : [ "mNativeMeshWrapper", "mIsIndexed", "TRIANGLES", "TRIANGLE_STRIP" ]
}