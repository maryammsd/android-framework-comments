{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/PrimitiveIterator.java",
  "packageName" : "java.util",
  "className" : "PrimitiveIterator",
  "comment" : "\n * A base type for primitive specializations of {@code Iterator}.  Specialized\n * subtypes are provided for {@link OfInt int}, {@link OfLong long}, and\n * {@link OfDouble double} values.\n *\n * <p>The specialized subtype default implementations of {@link Iterator#next}\n * and {@link Iterator#forEachRemaining(java.util.function.Consumer)} box\n * primitive values to instances of their corresponding wrapper class.  Such\n * boxing may offset any advantages gained when using the primitive\n * specializations.  To avoid boxing, the corresponding primitive-based methods\n * should be used.  For example, {@link PrimitiveIterator.OfInt#nextInt()} and\n * {@link PrimitiveIterator.OfInt#forEachRemaining(java.util.function.IntConsumer)}\n * should be used in preference to {@link PrimitiveIterator.OfInt#next()} and\n * {@link PrimitiveIterator.OfInt#forEachRemaining(java.util.function.Consumer)}.\n *\n * <p>Iteration of primitive values using boxing-based methods\n * {@link Iterator#next next()} and\n * {@link Iterator#forEachRemaining(java.util.function.Consumer) forEachRemaining()},\n * does not affect the order in which the values, transformed to boxed values,\n * are encountered.\n *\n * @implNote\n * If the boolean system property {@code org.openjdk.java.util.stream.tripwire}\n * is set to {@code true} then diagnostic warnings are reported if boxing of\n * primitive values occur when operating on primitive subtype specializations.\n *\n * @param <T> the type of elements returned by this PrimitiveIterator.  The\n *        type must be a wrapper type for a primitive type, such as\n *        {@code Integer} for the primitive {@code int} type.\n * @param <T_CONS> the type of primitive consumer.  The type must be a\n *        primitive specialization of {@link java.util.function.Consumer} for\n *        {@code T}, such as {@link java.util.function.IntConsumer} for\n *        {@code Integer}.\n *\n * @since 1.8\n ",
  "links" : [ "OfInt", "java.util.Iterator#next", "PrimitiveIterator.OfInt#forEachRemaining(java.util.function.IntConsumer)", "java.util.function.Consumer", "PrimitiveIterator.OfInt#forEachRemaining(java.util.function.Consumer)", "OfLong", "java.util.function.IntConsumer", "PrimitiveIterator.OfInt#nextInt()", "OfDouble", "java.util.Iterator#forEachRemaining(java.util.function.Consumer)", "PrimitiveIterator.OfInt#next()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void forEachRemaining(T_CONS action)",
    "returnType" : "void",
    "comment" : "\n     * Performs the given action for each remaining element until all elements\n     * have been processed or the action throws an exception.  Actions are\n     * performed in the order of iteration, if that order is specified.\n     * Exceptions thrown by the action are relayed to the caller.\n     * <p>\n     * The behavior of an iterator is unspecified if the action modifies the\n     * source of elements in any way (even by calling the {@link #remove remove}\n     * method or other mutator methods of {@code Iterator} subtypes),\n     * unless an overriding class has specified a concurrent modification policy.\n     * <p>\n     * Subsequent behavior of an iterator is unspecified if the action throws an\n     * exception.\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     ",
    "links" : [ "#remove" ]
  } ],
  "methodNames" : [ " void forEachRemaining(T_CONS action)" ],
  "variableNames" : [ ]
}