{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/DeadObjectException.java",
  "packageName" : "android.os",
  "className" : "DeadObjectException",
  "comment" : "\n * The object you are calling has died, because its hosting process\n * no longer exists, or there has been a low-level binder error.\n *\n * If you get this exception from a system service, the error is\n * usually nonrecoverable as the framework will restart. If you\n * receive this error from an app, at a minimum, you should\n * recover by resetting the connection. For instance, you should\n * drop the binder, clean up associated state, and reset your\n * connection to the service which through this error. In order\n * to simplify your error recovery paths, you may also want to\n * \"simply\" restart your process. However, this may not be an\n * option if the service you are talking to is unreliable or\n * crashes frequently.\n *\n * If this isn't from a service death and is instead from a\n * low-level binder error, it will be from:\n * - a oneway call queue filling up (too many oneway calls)\n * - from the binder buffer being filled up, so that the transaction\n *   is rejected.\n *\n * In these cases, more information about the error will be\n * logged. However, there isn't a good way to differentiate\n * this information at runtime. So, you should handle the\n * error, as if the service died.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ ]
}