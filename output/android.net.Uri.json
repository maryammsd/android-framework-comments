{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/Uri.java",
  "packageName" : "android.net",
  "className" : "Uri",
  "comment" : "\n * Immutable URI reference. A URI reference includes a URI and a fragment, the\n * component of the URI following a '#'. Builds and parses URI references\n * which conform to\n * <a href=\"http://www.faqs.org/rfcs/rfc2396.html\">RFC 2396</a>.\n *\n * <p>In the interest of performance, this class performs little to no\n * validation. Behavior is undefined for invalid input. This class is very\n * forgiving--in the face of invalid input, it will return garbage\n * rather than throw an exception unless otherwise specified.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG",
    "type" : "String",
    "comment" : " Log tag. ",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "Uri",
    "comment" : "\n     * The empty URI, equivalent to \"\".\n     ",
    "links" : [ ]
  }, {
    "name" : "NOT_FOUND",
    "type" : "int",
    "comment" : " Index of a component which was not found. ",
    "links" : [ ]
  }, {
    "name" : "NOT_CALCULATED",
    "type" : "int",
    "comment" : " Placeholder value for an index which hasn't been calculated yet. ",
    "links" : [ ]
  }, {
    "name" : "NOT_HIERARCHICAL",
    "type" : "String",
    "comment" : "\n     * Error message presented when a user tries to treat an opaque URI as\n     * hierarchical.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ENCODING",
    "type" : "String",
    "comment" : " Default encoding. ",
    "links" : [ ]
  }, {
    "name" : "NULL_TYPE_ID",
    "type" : "int",
    "comment" : " Identifies a null parcelled Uri. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Uri>",
    "comment" : "\n     * Reads Uris from Parcels.\n     ",
    "links" : [ ]
  }, {
    "name" : "HEX_DIGITS",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract boolean isHierarchical()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this URI is hierarchical like \"http://google.com\".\n     * Absolute URIs are hierarchical if the scheme-specific part starts with\n     * a '/'. Relative URIs are always hierarchical.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this URI is opaque like \"mailto:nobody@google.com\". The\n     * scheme-specific part of an opaque URI cannot start with a '/'.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isRelative()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this URI is relative, i.e.&nbsp;if it doesn't contain an\n     * explicit scheme.\n     *\n     * @return true if this URI is relative, false if it's absolute\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAbsolute()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this URI is absolute, i.e.&nbsp;if it contains an\n     * explicit scheme.\n     *\n     * @return true if this URI is absolute, false if it's relative\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getScheme()",
    "returnType" : "String",
    "comment" : "\n     * Gets the scheme of this URI. Example: \"http\"\n     *\n     * @return the scheme or null if this is a relative URI\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSchemeSpecificPart()",
    "returnType" : "String",
    "comment" : "\n     * Gets the scheme-specific part of this URI, i.e.&nbsp;everything between\n     * the scheme separator ':' and the fragment separator '#'. If this is a\n     * relative URI, this method returns the entire URI. Decodes escaped octets.\n     *\n     * <p>Example: \"//www.google.com/search?q=android\"\n     *\n     * @return the decoded scheme-specific-part\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEncodedSchemeSpecificPart()",
    "returnType" : "String",
    "comment" : "\n     * Gets the scheme-specific part of this URI, i.e.&nbsp;everything between\n     * the scheme separator ':' and the fragment separator '#'. If this is a\n     * relative URI, this method returns the entire URI. Leaves escaped octets\n     * intact.\n     *\n     * <p>Example: \"//www.google.com/search?q=android\"\n     *\n     * @return the encoded scheme-specific-part\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getAuthority()",
    "returnType" : "String",
    "comment" : "\n     * Gets the decoded authority part of this URI. For\n     * server addresses, the authority is structured as follows:\n     * {@code [ userinfo '@' ] host [ ':' port ]}\n     *\n     * <p>Examples: \"google.com\", \"bob@google.com:80\"\n     *\n     * @return the authority for this URI or null if not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEncodedAuthority()",
    "returnType" : "String",
    "comment" : "\n     * Gets the encoded authority part of this URI. For\n     * server addresses, the authority is structured as follows:\n     * {@code [ userinfo '@' ] host [ ':' port ]}\n     *\n     * <p>Examples: \"google.com\", \"bob@google.com:80\"\n     *\n     * @return the authority for this URI or null if not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getUserInfo()",
    "returnType" : "String",
    "comment" : "\n     * Gets the decoded user information from the authority.\n     * For example, if the authority is \"nobody@google.com\", this method will\n     * return \"nobody\".\n     *\n     * @return the user info for this URI or null if not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEncodedUserInfo()",
    "returnType" : "String",
    "comment" : "\n     * Gets the encoded user information from the authority.\n     * For example, if the authority is \"nobody@google.com\", this method will\n     * return \"nobody\".\n     *\n     * @return the user info for this URI or null if not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getHost()",
    "returnType" : "String",
    "comment" : "\n     * Gets the encoded host from the authority for this URI. For example,\n     * if the authority is \"bob@google.com\", this method will return\n     * \"google.com\".\n     *\n     * @return the host for this URI or null if not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Gets the port from the authority for this URI. For example,\n     * if the authority is \"google.com:80\", this method will return 80.\n     *\n     * @return the port for this URI or -1 if invalid or not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getPath()",
    "returnType" : "String",
    "comment" : "\n     * Gets the decoded path.\n     *\n     * @return the decoded path, or null if this is not a hierarchical URI\n     * (like \"mailto:nobody@google.com\") or the URI is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEncodedPath()",
    "returnType" : "String",
    "comment" : "\n     * Gets the encoded path.\n     *\n     * @return the encoded path, or null if this is not a hierarchical URI\n     * (like \"mailto:nobody@google.com\") or the URI is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getQuery()",
    "returnType" : "String",
    "comment" : "\n     * Gets the decoded query component from this URI. The query comes after\n     * the query separator ('?') and before the fragment separator ('#'). This\n     * method would return \"q=android\" for\n     * \"http://www.google.com/search?q=android\".\n     *\n     * @return the decoded query or null if there isn't one\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEncodedQuery()",
    "returnType" : "String",
    "comment" : "\n     * Gets the encoded query component from this URI. The query comes after\n     * the query separator ('?') and before the fragment separator ('#'). This\n     * method would return \"q=android\" for\n     * \"http://www.google.com/search?q=android\".\n     *\n     * @return the encoded query or null if there isn't one\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getFragment()",
    "returnType" : "String",
    "comment" : "\n     * Gets the decoded fragment part of this URI, everything after the '#'.\n     *\n     * @return the decoded fragment or null if there isn't one\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEncodedFragment()",
    "returnType" : "String",
    "comment" : "\n     * Gets the encoded fragment part of this URI, everything after the '#'.\n     *\n     * @return the encoded fragment or null if there isn't one\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<String> getPathSegments()",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the decoded path segments.\n     *\n     * @return decoded path segments, each without a leading or trailing '/'\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getLastPathSegment()",
    "returnType" : "String",
    "comment" : "\n     * Gets the decoded last segment in the path.\n     *\n     * @return the decoded last segment or null if the path is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this Uri to another object for equality. Returns true if the\n     * encoded string representations of this Uri and the given Uri are\n     * equal. Case counts. Paths are not normalized. If one Uri specifies a\n     * default port explicitly and the other leaves it implicit, they will not\n     * be considered equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Hashes the encoded string represention of this Uri consistently with\n     * {@link #equals(Object)}.\n     ",
    "links" : [ "#equals(Object)" ]
  }, {
    "name" : "public int compareTo(Uri other)",
    "returnType" : "int",
    "comment" : "\n     * Compares the string representation of this Uri with that of\n     * another.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the encoded string representation of this URI.\n     * Example: \"http://google.com/\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toSafeString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of this URI that has common forms of PII redacted,\n     * making it safer to use for logging purposes.  For example, {@code tel:800-466-4411} is\n     * returned as {@code tel:xxx-xxx-xxxx} and {@code http://example.com/path/to/item/} is\n     * returned as {@code http://example.com/...}. For all other uri schemes, only the scheme,\n     * host and port are returned.\n     * @return the common forms PII redacted string of this URI\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder buildUpon()",
    "returnType" : "Builder",
    "comment" : "\n     * Constructs a new builder, copying the attributes from this Uri.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri parse(String uriString)",
    "returnType" : "Uri",
    "comment" : "\n     * Creates a Uri which parses the given encoded URI string.\n     *\n     * @param uriString an RFC 2396-compliant, encoded URI\n     * @throws NullPointerException if uriString is null\n     * @return Uri for this given uri string\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri fromFile(File file)",
    "returnType" : "Uri",
    "comment" : "\n     * Creates a Uri from a file. The URI has the form\n     * \"file://<absolute path>\". Encodes path characters with the exception of\n     * '/'.\n     *\n     * <p>Example: \"file:///tmp/android.txt\"\n     *\n     * @throws NullPointerException if file is null\n     * @return a Uri for the given file\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri fromParts(String scheme, String ssp, String fragment)",
    "returnType" : "Uri",
    "comment" : "\n     * Creates an opaque Uri from the given components. Encodes the ssp\n     * which means this method cannot be used to create hierarchical URIs.\n     *\n     * @param scheme of the URI\n     * @param ssp scheme-specific-part, everything between the\n     *  scheme separator (':') and the fragment separator ('#'), which will\n     *  get encoded\n     * @param fragment fragment, everything after the '#', null if undefined,\n     *  will get encoded\n     *\n     * @throws NullPointerException if scheme or ssp is null\n     * @return Uri composed of the given scheme, ssp, and fragment\n     *\n     * @see Builder if you don't want the ssp and fragment to be encoded\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getQueryParameterNames()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a set of the unique names of all query parameters. Iterating\n     * over the set will return the names in order of their first occurrence.\n     *\n     * @throws UnsupportedOperationException if this isn't a hierarchical URI\n     *\n     * @return a set of decoded names\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getQueryParameters(String key)",
    "returnType" : "List<String>",
    "comment" : "\n     * Searches the query string for parameter values with the given key.\n     *\n     * @param key which will be encoded\n     *\n     * @throws UnsupportedOperationException if this isn't a hierarchical URI\n     * @throws NullPointerException if key is null\n     * @return a list of decoded values\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getQueryParameter(String key)",
    "returnType" : "String",
    "comment" : "\n     * Searches the query string for the first value with the given key.\n     *\n     * <p><strong>Warning:</strong> Prior to Jelly Bean, this decoded\n     * the '+' character as '+' rather than ' '.\n     *\n     * @param key which will be encoded\n     * @throws UnsupportedOperationException if this isn't a hierarchical URI\n     * @throws NullPointerException if key is null\n     * @return the decoded value or null if no parameter is found\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBooleanQueryParameter(String key, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Searches the query string for the first value with the given key and interprets it\n     * as a boolean value. \"false\" and \"0\" are interpreted as <code>false</code>, everything\n     * else is interpreted as <code>true</code>.\n     *\n     * @param key which will be decoded\n     * @param defaultValue the default value to return if there is no query parameter for key\n     * @return the boolean interpretation of the query parameter key\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri normalizeScheme()",
    "returnType" : "Uri",
    "comment" : "\n     * Return an equivalent URI with a lowercase scheme component.\n     * This aligns the Uri with Android best practices for\n     * intent filtering.\n     *\n     * <p>For example, \"HTTP://www.android.com\" becomes\n     * \"http://www.android.com\"\n     *\n     * <p>All URIs received from outside Android (such as user input,\n     * or external sources like Bluetooth, NFC, or the Internet) should\n     * be normalized before they are used to create an Intent.\n     *\n     * <p class=\"note\">This method does <em>not</em> validate bad URIs,\n     * or 'fix' poorly formatted URIs - so do not use it for input validation.\n     * A Uri will always be returned, even if the Uri is badly formatted to\n     * begin with and a scheme component cannot be found.\n     *\n     * @return normalized Uri (never null)\n     * @see android.content.Intent#setData\n     * @see android.content.Intent#setDataAndNormalize\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void writeToParcel(Parcel out, Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Writes a Uri to a Parcel.\n     *\n     * @param out parcel to write to\n     * @param uri to write, can be null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encode(String s)",
    "returnType" : "String",
    "comment" : "\n     * Encodes characters in the given string as '%'-escaped octets\n     * using the UTF-8 scheme. Leaves letters (\"A-Z\", \"a-z\"), numbers\n     * (\"0-9\"), and unreserved characters (\"_-!.~'()*\") intact. Encodes\n     * all other characters.\n     *\n     * @param s string to encode\n     * @return an encoded version of s suitable for use as a URI component,\n     *  or null if s is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encode(String s, String allow)",
    "returnType" : "String",
    "comment" : "\n     * Encodes characters in the given string as '%'-escaped octets\n     * using the UTF-8 scheme. Leaves letters (\"A-Z\", \"a-z\"), numbers\n     * (\"0-9\"), and unreserved characters (\"_-!.~'()*\") intact. Encodes\n     * all other characters with the exception of those specified in the\n     * allow argument.\n     *\n     * @param s string to encode\n     * @param allow set of additional characters to allow in the encoded form,\n     *  null if no characters should be skipped\n     * @return an encoded version of s suitable for use as a URI component,\n     *  or null if s is null\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAllowed(char c, String allow)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given character is allowed.\n     *\n     * @param c character to check\n     * @param allow characters to allow\n     * @return true if the character is allowed or false if it should be\n     *  encoded\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encodeIfNotEncoded(@Nullable String value, @Nullable String allow)",
    "returnType" : "String",
    "comment" : "\n     * Encodes a value it wasn't already encoded.\n     *\n     * @param value string to encode\n     * @param allow characters to allow\n     * @return encoded value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isEncoded(@Nullable String value, @Nullable String allow)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given string is already encoded to safe characters.\n     *\n     * @param value string to check\n     * @param allow characters to allow\n     * @return true if the string is already encoded or false if it should be encoded\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String decode(String s)",
    "returnType" : "String",
    "comment" : "\n     * Decodes '%'-escaped octets in the given string using the UTF-8 scheme.\n     * Replaces invalid octets with the unicode replacement character\n     * (\"\\\\uFFFD\").\n     *\n     * @param s encoded string to decode\n     * @return the given string with escaped octets decoded, or null if\n     *  s is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String decodeIfNeeded(@Nullable String value)",
    "returnType" : "String",
    "comment" : "\n     * Decodes a string if it was encoded, indicated by containing a %.\n     * @param value encoded string to decode\n     * @return decoded value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri withAppendedPath(Uri baseUri, String pathSegment)",
    "returnType" : "Uri",
    "comment" : "\n     * Creates a new Uri by appending an already-encoded path segment to a\n     * base Uri.\n     *\n     * @param baseUri Uri to append path segment to\n     * @param pathSegment encoded path segment to append\n     * @return a new Uri based on baseUri with the given segment appended to\n     *  the path\n     * @throws NullPointerException if baseUri is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getCanonicalUri()",
    "returnType" : "Uri",
    "comment" : "\n     * If this {@link Uri} is {@code file://}, then resolve and return its\n     * canonical path. Also fixes legacy emulated storage paths so they are\n     * usable across user boundaries. Should always be called from the app\n     * process before sending elsewhere.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.Uri" ]
  }, {
    "name" : "public void checkFileUriExposed(String location)",
    "returnType" : "void",
    "comment" : "\n     * If this is a {@code file://} Uri, it will be reported to\n     * {@link StrictMode}.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.StrictMode" ]
  }, {
    "name" : "public void checkContentUriWithoutPermission(String location, int flags)",
    "returnType" : "void",
    "comment" : "\n     * If this is a {@code content://} Uri without access flags, it will be\n     * reported to {@link StrictMode}.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.StrictMode" ]
  }, {
    "name" : "public boolean isPathPrefixMatch(Uri prefix)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if this is a path prefix match against the given Uri. Verifies that\n     * scheme, authority, and atomic path segments match.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract boolean isHierarchical()", "public boolean isOpaque()", "public abstract boolean isRelative()", "public boolean isAbsolute()", "public abstract String getScheme()", "public abstract String getSchemeSpecificPart()", "public abstract String getEncodedSchemeSpecificPart()", "public abstract String getAuthority()", "public abstract String getEncodedAuthority()", "public abstract String getUserInfo()", "public abstract String getEncodedUserInfo()", "public abstract String getHost()", "public abstract int getPort()", "public abstract String getPath()", "public abstract String getEncodedPath()", "public abstract String getQuery()", "public abstract String getEncodedQuery()", "public abstract String getFragment()", "public abstract String getEncodedFragment()", "public abstract List<String> getPathSegments()", "public abstract String getLastPathSegment()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public int compareTo(Uri other)", "public abstract String toString()", "public String toSafeString()", "public abstract Builder buildUpon()", "public static Uri parse(String uriString)", "public static Uri fromFile(File file)", "public static Uri fromParts(String scheme, String ssp, String fragment)", "public Set<String> getQueryParameterNames()", "public List<String> getQueryParameters(String key)", "public String getQueryParameter(String key)", "public boolean getBooleanQueryParameter(String key, boolean defaultValue)", "public Uri normalizeScheme()", "public static void writeToParcel(Parcel out, Uri uri)", "public static String encode(String s)", "public static String encode(String s, String allow)", "private static boolean isAllowed(char c, String allow)", "public static String encodeIfNotEncoded(@Nullable String value, @Nullable String allow)", "private static boolean isEncoded(@Nullable String value, @Nullable String allow)", "public static String decode(String s)", "public static String decodeIfNeeded(@Nullable String value)", "public static Uri withAppendedPath(Uri baseUri, String pathSegment)", "public Uri getCanonicalUri()", "public void checkFileUriExposed(String location)", "public void checkContentUriWithoutPermission(String location, int flags)", "public boolean isPathPrefixMatch(Uri prefix)" ],
  "variableNames" : [ "LOG", "EMPTY", "NOT_FOUND", "NOT_CALCULATED", "NOT_HIERARCHICAL", "DEFAULT_ENCODING", "NULL_TYPE_ID", "CREATOR", "HEX_DIGITS" ]
}