{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/Format.java",
  "packageName" : "java.text",
  "className" : "Format",
  "comment" : "\n * {@code Format} is an abstract base class for formatting locale-sensitive\n * information such as dates, messages, and numbers.\n *\n * <p>\n * {@code Format} defines the programming interface for formatting\n * locale-sensitive objects into {@code String}s (the\n * {@code format} method) and for parsing {@code String}s back\n * into objects (the {@code parseObject} method).\n *\n * <p>\n * Generally, a format's {@code parseObject} method must be able to parse\n * any string formatted by its {@code format} method. However, there may\n * be exceptional cases where this is not possible. For example, a\n * {@code format} method might create two adjacent integer numbers with\n * no separator in between, and in this case the {@code parseObject} could\n * not tell which digits belong to which number.\n *\n * <h2>Subclassing</h2>\n *\n * <p>\n * The Java Platform provides three specialized subclasses of {@code Format}--\n * {@code DateFormat}, {@code MessageFormat}, and\n * {@code NumberFormat}--for formatting dates, messages, and numbers,\n * respectively.\n * <p>\n * Concrete subclasses must implement three methods:\n * <ol>\n * <li> {@code format(Object obj, StringBuffer toAppendTo, FieldPosition pos)}\n * <li> {@code formatToCharacterIterator(Object obj)}\n * <li> {@code parseObject(String source, ParsePosition pos)}\n * </ol>\n * These general methods allow polymorphic parsing and formatting of objects\n * and are used, for example, by {@code MessageFormat}.\n * Subclasses often also provide additional {@code format} methods for\n * specific input types as well as {@code parse} methods for specific\n * result types. Any {@code parse} method that does not take a\n * {@code ParsePosition} argument should throw {@code ParseException}\n * when no text in the required format is at the beginning of the input text.\n *\n * <p>\n * Most subclasses will also implement the following factory methods:\n * <ol>\n * <li>\n * {@code getInstance} for getting a useful format object appropriate\n * for the current locale\n * <li>\n * {@code getInstance(Locale)} for getting a useful format\n * object appropriate for the specified locale\n * </ol>\n * In addition, some subclasses may also implement other\n * {@code getXxxxInstance} methods for more specialized control. For\n * example, the {@code NumberFormat} class provides\n * {@code getPercentInstance} and {@code getCurrencyInstance}\n * methods for getting specialized number formatters.\n *\n * <p>\n * Subclasses of {@code Format} that allow programmers to create objects\n * for locales (with {@code getInstance(Locale)} for example)\n * must also implement the following class method:\n * <blockquote>\n * <pre>\n * public static Locale[] getAvailableLocales()\n * </pre>\n * </blockquote>\n *\n * <p>\n * And finally subclasses may define a set of constants to identify the various\n * fields in the formatted output. These constants are used to create a FieldPosition\n * object which identifies what information is contained in the field and its\n * position in the formatted result. These constants should be named\n * <code><em>item</em>_FIELD</code> where <code><em>item</em></code> identifies\n * the field. For examples of these constants, see {@code ERA_FIELD} and its\n * friends in {@link DateFormat}.\n *\n * <h3><a id=\"synchronization\">Synchronization</a></h3>\n *\n * <p>\n * Formats are generally not synchronized.\n * It is recommended to create separate format instances for each thread.\n * If multiple threads access a format concurrently, it must be synchronized\n * externally.\n *\n * @see          java.text.ParsePosition\n * @see          java.text.FieldPosition\n * @see          java.text.NumberFormat\n * @see          java.text.DateFormat\n * @see          java.text.MessageFormat\n * @author       Mark Davis\n * @since 1.1\n ",
  "links" : [ "java.text.DateFormat" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String format(Object obj)",
    "returnType" : "String",
    "comment" : "\n     * Formats an object to produce a string. This is equivalent to\n     * <blockquote>\n     * {@link #format(Object, StringBuffer, FieldPosition) format}<code>(obj,\n     *         new StringBuffer(), new FieldPosition(0)).toString();</code>\n     * </blockquote>\n     *\n     * @param obj    The object to format\n     * @return       Formatted string.\n     * @throws    IllegalArgumentException if the Format cannot format the given\n     *            object\n     ",
    "links" : [ "#format(Object" ]
  }, {
    "name" : "public abstract StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats an object and appends the resulting text to a given string\n     * buffer.\n     * If the {@code pos} argument identifies a field used by the format,\n     * then its indices are set to the beginning and end of the first such\n     * field encountered.\n     *\n     * @param obj    The object to format\n     * @param toAppendTo    where the text is to be appended\n     * @param pos    A {@code FieldPosition} identifying a field\n     *               in the formatted text\n     * @return       the string buffer passed in as {@code toAppendTo},\n     *               with formatted text appended\n     * @throws    NullPointerException if {@code toAppendTo} or\n     *            {@code pos} is null\n     * @throws    IllegalArgumentException if the Format cannot format the given\n     *            object\n     ",
    "links" : [ ]
  }, {
    "name" : "public AttributedCharacterIterator formatToCharacterIterator(Object obj)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * Formats an Object producing an {@code AttributedCharacterIterator}.\n     * You can use the returned {@code AttributedCharacterIterator}\n     * to build the resulting String, as well as to determine information\n     * about the resulting String.\n     * <p>\n     * Each attribute key of the AttributedCharacterIterator will be of type\n     * {@code Field}. It is up to each {@code Format} implementation\n     * to define what the legal values are for each attribute in the\n     * {@code AttributedCharacterIterator}, but typically the attribute\n     * key is also used as the attribute value.\n     * <p>The default implementation creates an\n     * {@code AttributedCharacterIterator} with no attributes. Subclasses\n     * that support fields should override this and create an\n     * {@code AttributedCharacterIterator} with meaningful attributes.\n     *\n     * @throws    NullPointerException if obj is null.\n     * @throws    IllegalArgumentException when the Format cannot format the\n     *            given object.\n     * @param obj The object to format\n     * @return AttributedCharacterIterator describing the formatted value.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object parseObject(String source, ParsePosition pos)",
    "returnType" : "Object",
    "comment" : "\n     * Parses text from a string to produce an object.\n     * <p>\n     * The method attempts to parse text starting at the index given by\n     * {@code pos}.\n     * If parsing succeeds, then the index of {@code pos} is updated\n     * to the index after the last character used (parsing does not necessarily\n     * use all characters up to the end of the string), and the parsed\n     * object is returned. The updated {@code pos} can be used to\n     * indicate the starting point for the next call to this method.\n     * If an error occurs, then the index of {@code pos} is not\n     * changed, the error index of {@code pos} is set to the index of\n     * the character where the error occurred, and null is returned.\n     *\n     * @param source A {@code String}, part of which should be parsed.\n     * @param pos A {@code ParsePosition} object with index and error\n     *            index information as described above.\n     * @return An {@code Object} parsed from the string. In case of\n     *         error, returns null.\n     * @throws NullPointerException if {@code source} or {@code pos} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object parseObject(String source) throws ParseException",
    "returnType" : "Object",
    "comment" : "\n     * Parses text from the beginning of the given string to produce an object.\n     * The method may not use the entire text of the given string.\n     *\n     * @param source A {@code String} whose beginning should be parsed.\n     * @return An {@code Object} parsed from the string.\n     * @throws    ParseException if the beginning of the specified string\n     *            cannot be parsed.\n     * @throws NullPointerException if {@code source} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Creates and returns a copy of this object.\n     *\n     * @return a clone of this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : " AttributedCharacterIterator createAttributedCharacterIterator(String s)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * Creates an {@code AttributedCharacterIterator} for the String\n     * {@code s}.\n     *\n     * @param s String to create AttributedCharacterIterator from\n     * @return AttributedCharacterIterator wrapping s\n     ",
    "links" : [ ]
  }, {
    "name" : " AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator[] iterators)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * Creates an {@code AttributedCharacterIterator} containing the\n     * concatenated contents of the passed in\n     * {@code AttributedCharacterIterator}s.\n     *\n     * @param iterators AttributedCharacterIterators used to create resulting\n     *                  AttributedCharacterIterators\n     * @return AttributedCharacterIterator wrapping passed in\n     *         AttributedCharacterIterators\n     ",
    "links" : [ ]
  }, {
    "name" : " AttributedCharacterIterator createAttributedCharacterIterator(String string, AttributedCharacterIterator.Attribute key, Object value)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * Returns an AttributedCharacterIterator with the String\n     * {@code string} and additional key/value pair {@code key},\n     * {@code value}.\n     *\n     * @param string String to create AttributedCharacterIterator from\n     * @param key Key for AttributedCharacterIterator\n     * @param value Value associated with key in AttributedCharacterIterator\n     * @return AttributedCharacterIterator wrapping args\n     ",
    "links" : [ ]
  }, {
    "name" : " AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator iterator, AttributedCharacterIterator.Attribute key, Object value)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * Creates an AttributedCharacterIterator with the contents of\n     * {@code iterator} and the additional attribute {@code key}\n     * {@code value}.\n     *\n     * @param iterator Initial AttributedCharacterIterator to add arg to\n     * @param key Key for AttributedCharacterIterator\n     * @param value Value associated with key in AttributedCharacterIterator\n     * @return AttributedCharacterIterator wrapping args\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String format(Object obj)", "public abstract StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)", "public AttributedCharacterIterator formatToCharacterIterator(Object obj)", "public abstract Object parseObject(String source, ParsePosition pos)", "public Object parseObject(String source) throws ParseException", "public Object clone()", " AttributedCharacterIterator createAttributedCharacterIterator(String s)", " AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator[] iterators)", " AttributedCharacterIterator createAttributedCharacterIterator(String string, AttributedCharacterIterator.Attribute key, Object value)", " AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator iterator, AttributedCharacterIterator.Attribute key, Object value)" ],
  "variableNames" : [ "serialVersionUID" ]
}