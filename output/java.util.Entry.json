{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Map.java",
  "packageName" : "java.util",
  "className" : "Entry",
  "comment" : "\n     * A map entry (key-value pair). The Entry may be unmodifiable, or the\n     * value may be modifiable if the optional {@code setValue} method is\n     * implemented. The Entry may be independent of any map, or it may represent\n     * an entry of the entry-set view of a map.\n     * <p>\n     * Instances of the {@code Map.Entry} interface may be obtained by iterating\n     * the entry-set view of a map. These instances maintain a connection to the\n     * original, backing map. This connection to the backing map is valid\n     * <i>only</i> for the duration of iteration over the entry-set view.\n     * During iteration of the entry-set view, if supported by the backing map,\n     * a change to a {@code Map.Entry}'s value via the\n     * {@link Map.Entry#setValue setValue} method will be visible in the backing map.\n     * The behavior of such a {@code Map.Entry} instance is undefined outside of\n     * iteration of the map's entry-set view. It is also undefined if the backing\n     * map has been modified after the {@code Map.Entry} was returned by the\n     * iterator, except through the {@code Map.Entry.setValue} method. In particular,\n     * a change to the value of a mapping in the backing map might or might not be\n     * visible in the corresponding {@code Map.Entry} element of the entry-set view.\n     *\n     * @apiNote\n     * It is possible to create a {@code Map.Entry} instance that is disconnected\n     * from a backing map by using the {@link Map.Entry#copyOf copyOf} method. For example,\n     * the following creates a snapshot of a map's entries that is guaranteed not to\n     * change even if the original map is modified:\n     * <pre> {@code\n     * var entries = map.entrySet().stream().map(Map.Entry::copyOf).toList()\n     * }</pre>\n     *\n     * @see Map#entrySet()\n     * @since 1.2\n     ",
  "links" : [ "Map.Entry#setValue", "Map.Entry#copyOf" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " K getKey()",
    "returnType" : "K",
    "comment" : "\n         * Returns the key corresponding to this entry.\n         *\n         * @return the key corresponding to this entry\n         * @throws IllegalStateException implementations may, but are not\n         *         required to, throw this exception if the entry has been\n         *         removed from the backing map.\n         ",
    "links" : [ ]
  }, {
    "name" : " V getValue()",
    "returnType" : "V",
    "comment" : "\n         * Returns the value corresponding to this entry.  If the mapping\n         * has been removed from the backing map (by the iterator's\n         * {@code remove} operation), the results of this call are undefined.\n         *\n         * @return the value corresponding to this entry\n         * @throws IllegalStateException implementations may, but are not\n         *         required to, throw this exception if the entry has been\n         *         removed from the backing map.\n         ",
    "links" : [ ]
  }, {
    "name" : " V setValue(V value)",
    "returnType" : "V",
    "comment" : "\n         * Replaces the value corresponding to this entry with the specified\n         * value (optional operation).  (Writes through to the map.)  The\n         * behavior of this call is undefined if the mapping has already been\n         * removed from the map (by the iterator's {@code remove} operation).\n         *\n         * @param value new value to be stored in this entry\n         * @return old value corresponding to the entry\n         * @throws UnsupportedOperationException if the {@code put} operation\n         *         is not supported by the backing map\n         * @throws ClassCastException if the class of the specified value\n         *         prevents it from being stored in the backing map\n         * @throws NullPointerException if the backing map does not permit\n         *         null values, and the specified value is null\n         * @throws IllegalArgumentException if some property of this value\n         *         prevents it from being stored in the backing map\n         * @throws IllegalStateException implementations may, but are not\n         *         required to, throw this exception if the entry has been\n         *         removed from the backing map.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n         * Compares the specified object with this entry for equality.\n         * Returns {@code true} if the given object is also a map entry and\n         * the two entries represent the same mapping.  More formally, two\n         * entries {@code e1} and {@code e2} represent the same mapping\n         * if<pre>\n         *     (e1.getKey()==null ?\n         *      e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &amp;&amp;\n         *     (e1.getValue()==null ?\n         *      e2.getValue()==null : e1.getValue().equals(e2.getValue()))\n         * </pre>\n         * This ensures that the {@code equals} method works properly across\n         * different implementations of the {@code Map.Entry} interface.\n         *\n         * @param o object to be compared for equality with this map entry\n         * @return {@code true} if the specified object is equal to this map\n         *         entry\n         ",
    "links" : [ ]
  }, {
    "name" : " int hashCode()",
    "returnType" : "int",
    "comment" : "\n         * Returns the hash code value for this map entry.  The hash code\n         * of a map entry {@code e} is defined to be: <pre>\n         *     (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n         *     (e.getValue()==null ? 0 : e.getValue().hashCode())\n         * </pre>\n         * This ensures that {@code e1.equals(e2)} implies that\n         * {@code e1.hashCode()==e2.hashCode()} for any two Entries\n         * {@code e1} and {@code e2}, as required by the general\n         * contract of {@code Object.hashCode}.\n         *\n         * @return the hash code value for this map entry\n         * @see Object#hashCode()\n         * @see Object#equals(Object)\n         * @see #equals(Object)\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Comparator<Map.Entry<K, V>> comparingByKey()",
    "returnType" : "Comparator<Map.Entry<K, V>>",
    "comment" : "\n         * Returns a comparator that compares {@link Map.Entry} in natural order on key.\n         *\n         * <p>The returned comparator is serializable and throws {@link\n         * NullPointerException} when comparing an entry with a null key.\n         *\n         * @param  <K> the {@link Comparable} type of then map keys\n         * @param  <V> the type of the map values\n         * @return a comparator that compares {@link Map.Entry} in natural order on key.\n         * @see Comparable\n         * @since 1.8\n         ",
    "links" : [ "Map.Entry", "Comparable", "NullPointerException" ]
  }, {
    "name" : "public static Comparator<Map.Entry<K, V>> comparingByValue()",
    "returnType" : "Comparator<Map.Entry<K, V>>",
    "comment" : "\n         * Returns a comparator that compares {@link Map.Entry} in natural order on value.\n         *\n         * <p>The returned comparator is serializable and throws {@link\n         * NullPointerException} when comparing an entry with null values.\n         *\n         * @param <K> the type of the map keys\n         * @param <V> the {@link Comparable} type of the map values\n         * @return a comparator that compares {@link Map.Entry} in natural order on value.\n         * @see Comparable\n         * @since 1.8\n         ",
    "links" : [ "Map.Entry", "Comparable", "NullPointerException" ]
  }, {
    "name" : "public static Comparator<Map.Entry<K, V>> comparingByKey(Comparator<? super K> cmp)",
    "returnType" : "Comparator<Map.Entry<K, V>>",
    "comment" : "\n         * Returns a comparator that compares {@link Map.Entry} by key using the given\n         * {@link Comparator}.\n         *\n         * <p>The returned comparator is serializable if the specified comparator\n         * is also serializable.\n         *\n         * @param  <K> the type of the map keys\n         * @param  <V> the type of the map values\n         * @param  cmp the key {@link Comparator}\n         * @return a comparator that compares {@link Map.Entry} by the key.\n         * @since 1.8\n         ",
    "links" : [ "Map.Entry", "java.util.Comparator" ]
  }, {
    "name" : "public static Comparator<Map.Entry<K, V>> comparingByValue(Comparator<? super V> cmp)",
    "returnType" : "Comparator<Map.Entry<K, V>>",
    "comment" : "\n         * Returns a comparator that compares {@link Map.Entry} by value using the given\n         * {@link Comparator}.\n         *\n         * <p>The returned comparator is serializable if the specified comparator\n         * is also serializable.\n         *\n         * @param  <K> the type of the map keys\n         * @param  <V> the type of the map values\n         * @param  cmp the value {@link Comparator}\n         * @return a comparator that compares {@link Map.Entry} by the value.\n         * @since 1.8\n         ",
    "links" : [ "Map.Entry", "java.util.Comparator" ]
  }, {
    "name" : "public static Map.Entry<K, V> copyOf(Map.Entry<? extends K, ? extends V> e)",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n         * Returns a copy of the given {@code Map.Entry}. The returned instance is not\n         * associated with any map. The returned instance has the same characteristics\n         * as instances returned by the {@link Map#entry Map::entry} method.\n         *\n         * @apiNote\n         * An instance obtained from a map's entry-set view has a connection to that map.\n         * The {@code copyOf}  method may be used to create a {@code Map.Entry} instance,\n         * containing the same key and value, that is independent of any map.\n         *\n         * @implNote\n         * If the given entry was obtained from a call to {@code copyOf} or {@code Map::entry},\n         * calling {@code copyOf} will generally not create another copy.\n         *\n         * @param <K> the type of the key\n         * @param <V> the type of the value\n         * @param e the entry to be copied\n         * @return a map entry equal to the given entry\n         * @throws NullPointerException if e is null or if either of its key or value is null\n         * @since 17\n         ",
    "links" : [ "java.util.Map#entry" ]
  } ],
  "methodNames" : [ " K getKey()", " V getValue()", " V setValue(V value)", " boolean equals(Object o)", " int hashCode()", "public static Comparator<Map.Entry<K, V>> comparingByKey()", "public static Comparator<Map.Entry<K, V>> comparingByValue()", "public static Comparator<Map.Entry<K, V>> comparingByKey(Comparator<? super K> cmp)", "public static Comparator<Map.Entry<K, V>> comparingByValue(Comparator<? super V> cmp)", "public static Map.Entry<K, V> copyOf(Map.Entry<? extends K, ? extends V> e)" ],
  "variableNames" : [ ]
}