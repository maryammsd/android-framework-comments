{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/BidirectionalStream.java",
  "packageName" : "org.chromium.net",
  "className" : "Callback",
  "comment" : " Callback class used to receive callbacks from a {@link BidirectionalStream}. ",
  "links" : [ "org.chromium.net.BidirectionalStream" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onStreamReady(BidirectionalStream stream)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the stream is ready for reading and writing. Consumer may call {@link\n         * BidirectionalStream#read read()} to start reading data. Consumer may call {@link\n         * BidirectionalStream#write write()} to start writing data.\n         *\n         * @param stream the stream that is ready.\n         ",
    "links" : [ "org.chromium.net.BidirectionalStream#write", "org.chromium.net.BidirectionalStream#read" ]
  }, {
    "name" : "public abstract void onResponseHeadersReceived(BidirectionalStream stream, UrlResponseInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when initial response headers are received. Headers are available from {@code\n         * info.}{@link UrlResponseInfo#getAllHeaders getAllHeaders()}. Consumer may call {@link\n         * BidirectionalStream#read read()} to start reading. Consumer may call {@link\n         * BidirectionalStream#write write()} to start writing or close the stream.\n         *\n         * @param stream the stream on which response headers were received.\n         * @param info the response information.\n         ",
    "links" : [ "org.chromium.net.UrlResponseInfo#getAllHeaders", "org.chromium.net.BidirectionalStream#write", "org.chromium.net.BidirectionalStream#read" ]
  }, {
    "name" : "public abstract void onReadCompleted(BidirectionalStream stream, UrlResponseInfo info, ByteBuffer buffer, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when data is read into the buffer passed to {@link BidirectionalStream#read\n         * read()}. Only part of the buffer may be populated. To continue reading, call {@link\n         * BidirectionalStream#read read()}. It may be invoked after {@code\n         * onResponseTrailersReceived()}, if there was pending read data before trailers were\n         * received.\n         *\n         * @param stream the stream on which the read completed\n         * @param info the response information\n         * @param buffer the buffer that was passed to {@link BidirectionalStream#read read()}, now\n         * containing the received data. The buffer's limit is not changed. The buffer's position is\n         * set to the end of the received data. If position is not updated, it means the remote side\n         * has signaled that it will send no more data.\n         * @param endOfStream if true, this is the last read data, remote will not send more data,\n         *         and\n         * the read side is closed.\n         ",
    "links" : [ "org.chromium.net.BidirectionalStream#readread()", "org.chromium.net.BidirectionalStream#read" ]
  }, {
    "name" : "public abstract void onWriteCompleted(BidirectionalStream stream, UrlResponseInfo info, ByteBuffer buffer, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the entire ByteBuffer passed to {@link BidirectionalStream#write write()} is\n         * sent. The buffer's position is updated to be the same as the buffer's limit. The buffer's\n         * limit is not changed. To continue writing, call {@link BidirectionalStream#write\n         * write()}.\n         *\n         * @param stream the stream on which the write completed\n         * @param info the response information\n         * @param buffer the buffer that was passed to {@link BidirectionalStream#write write()}.\n         *         The\n         * buffer's position is set to the buffer's limit. The buffer's limit is not changed.\n         * @param endOfStream the endOfStream flag that was passed to the corresponding {@link\n         * BidirectionalStream#write write()}. If true, the write side is closed.\n         ",
    "links" : [ "org.chromium.net.BidirectionalStream#write", "org.chromium.net.BidirectionalStream#writewrite()" ]
  }, {
    "name" : "public void onResponseTrailersReceived(BidirectionalStream stream, UrlResponseInfo info, UrlResponseInfo.HeaderBlock trailers)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when trailers are received before closing the stream. Only invoked when server\n         * sends trailers, which it may not. May be invoked while there is read data remaining in\n         * local buffer.\n         *\n         * Default implementation takes no action.\n         *\n         * @param stream the stream on which response trailers were received\n         * @param info the response information\n         * @param trailers the trailers received\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSucceeded(BidirectionalStream stream, UrlResponseInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when there is no data to be read or written and the stream is closed successfully\n         * remotely and locally. Once invoked, no further {@link BidirectionalStream.Callback}\n         * methods will be invoked.\n         *\n         * @param stream the stream which is closed successfully\n         * @param info the response information\n         ",
    "links" : [ "BidirectionalStream.Callback" ]
  }, {
    "name" : "public abstract void onFailed(BidirectionalStream stream, UrlResponseInfo info, CronetException error)",
    "returnType" : "void",
    "comment" : "\n         * Invoked if the stream failed for any reason after {@link BidirectionalStream#start}.\n         * <a href=\"https://tools.ietf.org/html/rfc7540#section-7\">HTTP/2 error codes</a> are\n         * mapped to {@link NetworkException#getCronetInternalErrorCode} codes. Once invoked, no\n         * further {@link BidirectionalStream.Callback} methods will be invoked.\n         *\n         * @param stream the stream which has failed\n         * @param info the response information. May be {@code null} if no response was received.\n         * @param error information about the failure\n         ",
    "links" : [ "BidirectionalStream.Callback", "org.chromium.net.NetworkException#getCronetInternalErrorCode", "org.chromium.net.BidirectionalStream#start" ]
  }, {
    "name" : "public void onCanceled(BidirectionalStream stream, UrlResponseInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Invoked if the stream was canceled via {@link BidirectionalStream#cancel}. Once invoked,\n         * no further {@link BidirectionalStream.Callback} methods will be invoked. Default\n         * implementation takes no action.\n         *\n         * @param stream the stream that was canceled\n         * @param info the response information. May be {@code null} if no response was received.\n         ",
    "links" : [ "BidirectionalStream.Callback", "org.chromium.net.BidirectionalStream#cancel" ]
  } ],
  "methodNames" : [ "public abstract void onStreamReady(BidirectionalStream stream)", "public abstract void onResponseHeadersReceived(BidirectionalStream stream, UrlResponseInfo info)", "public abstract void onReadCompleted(BidirectionalStream stream, UrlResponseInfo info, ByteBuffer buffer, boolean endOfStream)", "public abstract void onWriteCompleted(BidirectionalStream stream, UrlResponseInfo info, ByteBuffer buffer, boolean endOfStream)", "public void onResponseTrailersReceived(BidirectionalStream stream, UrlResponseInfo info, UrlResponseInfo.HeaderBlock trailers)", "public abstract void onSucceeded(BidirectionalStream stream, UrlResponseInfo info)", "public abstract void onFailed(BidirectionalStream stream, UrlResponseInfo info, CronetException error)", "public void onCanceled(BidirectionalStream stream, UrlResponseInfo info)" ],
  "variableNames" : [ ]
}