{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/MediaStore.java",
  "packageName" : "android.provider",
  "className" : "Thumbnails",
  "comment" : "\n         * This class provides utility methods to obtain thumbnails for various\n         * {@link Video} items.\n         *\n         * @deprecated Callers should migrate to using\n         *             {@link ContentResolver#loadThumbnail}, since it offers\n         *             richer control over requested thumbnail sizes and\n         *             cancellation behavior.\n         ",
  "links" : [ "Video", "android.content.ContentResolver#loadThumbnail" ],
  "variables" : [ {
    "name" : "INTERNAL_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n             * The content:// style URI for the internal storage.\n             ",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n             * The content:// style URI for the \"primary\" external storage\n             * volume.\n             ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SORT_ORDER",
    "type" : "String",
    "comment" : "\n             * The default sort order for this table\n             ",
    "links" : [ ]
  }, {
    "name" : "DATA",
    "type" : "String",
    "comment" : "\n             * Path to the thumbnail file on disk.\n             ",
    "links" : [ ]
  }, {
    "name" : "VIDEO_ID",
    "type" : "String",
    "comment" : "\n             * The original image for the thumbnal\n             ",
    "links" : [ ]
  }, {
    "name" : "KIND",
    "type" : "String",
    "comment" : "\n             * The kind of the thumbnail\n             ",
    "links" : [ ]
  }, {
    "name" : "MINI_KIND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FULL_SCREEN_KIND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MICRO_KIND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIDTH",
    "type" : "String",
    "comment" : "\n             * The width of the thumbnal\n             ",
    "links" : [ ]
  }, {
    "name" : "HEIGHT",
    "type" : "String",
    "comment" : "\n             * The height of the thumbnail\n             ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void cancelThumbnailRequest(ContentResolver cr, long origId)",
    "returnType" : "void",
    "comment" : "\n             * Cancel any outstanding {@link #getThumbnail} requests, causing\n             * them to return by throwing a {@link OperationCanceledException}.\n             * <p>\n             * This method has no effect on\n             * {@link ContentResolver#loadThumbnail} calls, since they provide\n             * their own {@link CancellationSignal}.\n             *\n             * @deprecated Callers should migrate to using\n             *             {@link ContentResolver#loadThumbnail}, since it\n             *             offers richer control over requested thumbnail sizes\n             *             and cancellation behavior.\n             ",
    "links" : [ "android.os.OperationCanceledException", "android.content.ContentResolver#loadThumbnail", "android.os.CancellationSignal", "#getThumbnail" ]
  }, {
    "name" : "public static Bitmap getThumbnail(ContentResolver cr, long videoId, int kind, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "\n             * Return thumbnail representing a specific video item. If a\n             * thumbnail doesn't exist, this method will block until it's\n             * generated. Callers are responsible for their own in-memory\n             * caching of returned values.\n             *\n             * @param videoId the video item to obtain a thumbnail for.\n             * @param kind optimal thumbnail size desired.\n             * @return decoded thumbnail, or {@code null} if problem was\n             *         encountered.\n             * @deprecated Callers should migrate to using\n             *             {@link ContentResolver#loadThumbnail}, since it\n             *             offers richer control over requested thumbnail sizes\n             *             and cancellation behavior.\n             ",
    "links" : [ "android.content.ContentResolver#loadThumbnail" ]
  }, {
    "name" : "public static void cancelThumbnailRequest(ContentResolver cr, long videoId, long groupId)",
    "returnType" : "void",
    "comment" : "\n             * Cancel any outstanding {@link #getThumbnail} requests, causing\n             * them to return by throwing a {@link OperationCanceledException}.\n             * <p>\n             * This method has no effect on\n             * {@link ContentResolver#loadThumbnail} calls, since they provide\n             * their own {@link CancellationSignal}.\n             *\n             * @deprecated Callers should migrate to using\n             *             {@link ContentResolver#loadThumbnail}, since it\n             *             offers richer control over requested thumbnail sizes\n             *             and cancellation behavior.\n             ",
    "links" : [ "android.os.OperationCanceledException", "android.content.ContentResolver#loadThumbnail", "android.os.CancellationSignal", "#getThumbnail" ]
  }, {
    "name" : "public static Bitmap getThumbnail(ContentResolver cr, long videoId, long groupId, int kind, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "\n             * Return thumbnail representing a specific video item. If a\n             * thumbnail doesn't exist, this method will block until it's\n             * generated. Callers are responsible for their own in-memory\n             * caching of returned values.\n             *\n             * @param videoId the video item to obtain a thumbnail for.\n             * @param kind optimal thumbnail size desired.\n             * @return decoded thumbnail, or {@code null} if problem was\n             *         encountered.\n             * @deprecated Callers should migrate to using\n             *             {@link ContentResolver#loadThumbnail}, since it\n             *             offers richer control over requested thumbnail sizes\n             *             and cancellation behavior.\n             ",
    "links" : [ "android.content.ContentResolver#loadThumbnail" ]
  }, {
    "name" : "public static Uri getContentUri(String volumeName)",
    "returnType" : "Uri",
    "comment" : "\n             * Get the content:// style URI for the image media table on the\n             * given volume.\n             *\n             * @param volumeName the name of the volume to get the URI for\n             * @return the URI to the image media table on the given volume\n             ",
    "links" : [ ]
  }, {
    "name" : "public static Size getKindSize(int kind)",
    "returnType" : "Size",
    "comment" : "\n             * Return the typical {@link Size} (in pixels) used internally when\n             * the given thumbnail kind is requested.\n             *\n             * @deprecated Callers should migrate to using\n             *             {@link ContentResolver#loadThumbnail}, since it\n             *             offers richer control over requested thumbnail sizes\n             *             and cancellation behavior.\n             ",
    "links" : [ "android.content.ContentResolver#loadThumbnail", "android.util.Size" ]
  } ],
  "methodNames" : [ "public static void cancelThumbnailRequest(ContentResolver cr, long origId)", "public static Bitmap getThumbnail(ContentResolver cr, long videoId, int kind, BitmapFactory.Options options)", "public static void cancelThumbnailRequest(ContentResolver cr, long videoId, long groupId)", "public static Bitmap getThumbnail(ContentResolver cr, long videoId, long groupId, int kind, BitmapFactory.Options options)", "public static Uri getContentUri(String volumeName)", "public static Size getKindSize(int kind)" ],
  "variableNames" : [ "INTERNAL_CONTENT_URI", "EXTERNAL_CONTENT_URI", "DEFAULT_SORT_ORDER", "DATA", "VIDEO_ID", "KIND", "MINI_KIND", "FULL_SCREEN_KIND", "MICRO_KIND", "WIDTH", "HEIGHT" ]
}