{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityNodeInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityNodeInfo",
  "comment" : "\n * This class represents a node of the window content as well as actions that\n * can be requested from its source. From the point of view of an\n * {@link android.accessibilityservice.AccessibilityService} a window's content is\n * presented as a tree of accessibility node infos, which may or may not map one-to-one\n * to the view hierarchy. In other words, a custom view is free to report itself as\n * a tree of accessibility node info.\n * </p>\n * <p>\n * Once an accessibility node info is delivered to an accessibility service it is\n * made immutable and calling a state mutation method generates an error. See\n * {@link #setQueryFromAppProcessEnabled} if you would like to inspect the\n * node tree from the app process for testing or debugging tools.\n * </p>\n * <p>\n * Please refer to {@link android.accessibilityservice.AccessibilityService} for\n * details about how to obtain a handle to window content as a tree of accessibility\n * node info as well as details about the security model.\n * </p>\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about making applications accessible, read the\n * <a href=\"{@docRoot}guide/topics/ui/accessibility/index.html\">Accessibility</a>\n * developer guide.</p>\n * </div>\n * <aside class=\"note\">\n * <b>Note:</b> Use a {@link androidx.core.view.accessibility.AccessibilityNodeInfoCompat}\n * wrapper instead of this class for backwards-compatibility. </aside>\n *\n * @see android.accessibilityservice.AccessibilityService\n * @see AccessibilityEvent\n * @see AccessibilityManager\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "#setQueryFromAppProcessEnabled", "androidx.core.view.accessibility.AccessibilityNodeInfoCompat" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_CONNECTION_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_SELECTION_INDEX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_ITEM_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ROOT_ITEM_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LEASHED_ITEM_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_NODE_ID",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ROOT_NODE_ID",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LEASHED_NODE_ID",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PREFETCH_ANCESTORS",
    "type" : "int",
    "comment" : "\n     * Prefetching strategy that prefetches the ancestors of the requested node.\n     * <p> Ancestors will be prefetched before siblings and descendants.\n     *\n     * @see #getChild(int, int)\n     * @see #getParent(int)\n     * @see AccessibilityWindowInfo#getRoot(int)\n     * @see AccessibilityService#getRootInActiveWindow(int)\n     * @see AccessibilityEvent#getSource(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PREFETCH_SIBLINGS",
    "type" : "int",
    "comment" : "\n     * Prefetching strategy that prefetches the siblings of the requested node.\n     * <p> To avoid disconnected trees, this flag will also prefetch the parent. Siblings will be\n     * prefetched before descendants.\n     *\n     * <p> See {@link #FLAG_PREFETCH_ANCESTORS} for information on where these flags can be used.\n     ",
    "links" : [ "#FLAG_PREFETCH_ANCESTORS" ]
  }, {
    "name" : "FLAG_PREFETCH_DESCENDANTS_HYBRID",
    "type" : "int",
    "comment" : "\n     * Prefetching strategy that prefetches the descendants in a hybrid depth first and breadth\n     * first approach.\n     * <p> The children of the root node is prefetched before recursing on the children. This\n     * must not be combined with {@link #FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST} or\n     * {@link #FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST} or this will trigger an\n     * IllegalArgumentException.\n     *\n     * <p> See {@link #FLAG_PREFETCH_ANCESTORS} for information on where these flags can be used.\n     ",
    "links" : [ "#FLAG_PREFETCH_ANCESTORS", "#FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST", "#FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST" ]
  }, {
    "name" : "FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST",
    "type" : "int",
    "comment" : "\n     * Prefetching strategy that prefetches the descendants of the requested node depth-first.\n     * <p> This must not be combined with {@link #FLAG_PREFETCH_DESCENDANTS_HYBRID} or\n     * {@link #FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST} or this will trigger an\n     * IllegalArgumentException.\n     *\n     * <p> See {@link #FLAG_PREFETCH_ANCESTORS} for information on where these flags can be used.\n     ",
    "links" : [ "#FLAG_PREFETCH_ANCESTORS", "#FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST", "#FLAG_PREFETCH_DESCENDANTS_HYBRID" ]
  }, {
    "name" : "FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST",
    "type" : "int",
    "comment" : "\n     * Prefetching strategy that prefetches the descendants of the requested node breadth-first.\n     * <p> This must not be combined with {@link #FLAG_PREFETCH_DESCENDANTS_HYBRID} or\n     * {@link #FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST} or this will trigger an\n     * IllegalArgumentException.\n     *\n     * <p> See {@link #FLAG_PREFETCH_ANCESTORS} for information on where these flags can be used.\n     ",
    "links" : [ "#FLAG_PREFETCH_ANCESTORS", "#FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST", "#FLAG_PREFETCH_DESCENDANTS_HYBRID" ]
  }, {
    "name" : "FLAG_PREFETCH_UNINTERRUPTIBLE",
    "type" : "int",
    "comment" : "\n     * Prefetching flag that specifies prefetching should not be interrupted by a request to\n     * retrieve a node or perform an action on a node.\n     *\n     * <p> See {@link #FLAG_PREFETCH_ANCESTORS} for information on where these flags can be used.\n     ",
    "links" : [ "#FLAG_PREFETCH_ANCESTORS" ]
  }, {
    "name" : "FLAG_PREFETCH_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for {@link PrefetchingStrategy} all types.\n     *\n     * @see #FLAG_PREFETCH_ANCESTORS\n     * @see #FLAG_PREFETCH_SIBLINGS\n     * @see #FLAG_PREFETCH_DESCENDANTS_HYBRID\n     * @see #FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST\n     * @see #FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST\n     * @see #FLAG_PREFETCH_UNINTERRUPTIBLE\n     *\n     * @hide\n     ",
    "links" : [ "PrefetchingStrategy" ]
  }, {
    "name" : "FLAG_PREFETCH_DESCENDANTS_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for {@link PrefetchingStrategy} that includes only descendants-related strategies.\n     *\n     * @see #FLAG_PREFETCH_DESCENDANTS_HYBRID\n     * @see #FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST\n     * @see #FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST\n     *\n     * @hide\n     ",
    "links" : [ "PrefetchingStrategy" ]
  }, {
    "name" : "MAX_NUMBER_OF_PREFETCHED_NODES",
    "type" : "int",
    "comment" : "\n     * Maximum batch size of prefetched nodes for a request.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SERVICE_REQUESTS_INCLUDE_NOT_IMPORTANT_VIEWS",
    "type" : "int",
    "comment" : "\n     * @see AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SERVICE_REQUESTS_REPORT_VIEW_IDS",
    "type" : "int",
    "comment" : "\n     * @see AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SERVICE_IS_ACCESSIBILITY_TOOL",
    "type" : "int",
    "comment" : "\n     * @see AccessibilityServiceInfo#isAccessibilityTool()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_REPORT_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for all types of additional view data exposed to services.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_FOCUS",
    "type" : "int",
    "comment" : "\n     * Action that gives input focus to the node.\n     * See {@link AccessibilityAction#ACTION_FOCUS}\n     ",
    "links" : [ "#ACTION_FOCUS" ]
  }, {
    "name" : "ACTION_CLEAR_FOCUS",
    "type" : "int",
    "comment" : "\n     * Action that clears input focus of the node.\n     * See {@link AccessibilityAction#ACTION_CLEAR_FOCUS}\n     ",
    "links" : [ "#ACTION_CLEAR_FOCUS" ]
  }, {
    "name" : "ACTION_SELECT",
    "type" : "int",
    "comment" : "\n     * Action that selects the node.\n     * @see AccessibilityAction#ACTION_SELECT\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CLEAR_SELECTION",
    "type" : "int",
    "comment" : "\n     * Action that deselects the node.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CLICK",
    "type" : "int",
    "comment" : "\n     * Action that clicks on the node info.\n     *\n     * @see AccessibilityAction#ACTION_CLICK\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_LONG_CLICK",
    "type" : "int",
    "comment" : "\n     * Action that long clicks on the node.\n     *\n     * <p>It does not support coordinate information for anchoring.</p>\n     * @see AccessibilityAction#ACTION_LONG_CLICK\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_ACCESSIBILITY_FOCUS",
    "type" : "int",
    "comment" : "\n     * Action that gives accessibility focus to the node.\n     * See {@link AccessibilityAction#ACTION_ACCESSIBILITY_FOCUS}\n     ",
    "links" : [ "#ACTION_ACCESSIBILITY_FOCUS" ]
  }, {
    "name" : "ACTION_CLEAR_ACCESSIBILITY_FOCUS",
    "type" : "int",
    "comment" : "\n     * Action that clears accessibility focus of the node.\n     * See {@link AccessibilityAction#ACTION_CLEAR_ACCESSIBILITY_FOCUS}\n     ",
    "links" : [ "#ACTION_CLEAR_ACCESSIBILITY_FOCUS" ]
  }, {
    "name" : "ACTION_NEXT_AT_MOVEMENT_GRANULARITY",
    "type" : "int",
    "comment" : "\n     * Action that requests to go to the next entity in this node's text\n     * at a given movement granularity. For example, move to the next character,\n     * word, etc.\n     * <p>\n     * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT}<,\n     * {@link #ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN}<br>\n     * <strong>Example:</strong> Move to the previous character and do not extend selection.\n     * <code><pre><p>\n     *   Bundle arguments = new Bundle();\n     *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,\n     *           AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER);\n     *   arguments.putBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN,\n     *           false);\n     *   info.performAction(AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY, arguments);\n     * </code></pre></p>\n     * </p>\n     *\n     * @see #ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n     * @see #ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n     *\n     * @see #setMovementGranularities(int)\n     * @see #getMovementGranularities()\n     *\n     * @see #MOVEMENT_GRANULARITY_CHARACTER\n     * @see #MOVEMENT_GRANULARITY_WORD\n     * @see #MOVEMENT_GRANULARITY_LINE\n     * @see #MOVEMENT_GRANULARITY_PARAGRAPH\n     * @see #MOVEMENT_GRANULARITY_PAGE\n     ",
    "links" : [ "#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT", "#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN" ]
  }, {
    "name" : "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY",
    "type" : "int",
    "comment" : "\n     * Action that requests to go to the previous entity in this node's text\n     * at a given movement granularity. For example, move to the next character,\n     * word, etc.\n     * <p>\n     * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT}<,\n     * {@link #ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN}<br>\n     * <strong>Example:</strong> Move to the next character and do not extend selection.\n     * <code><pre><p>\n     *   Bundle arguments = new Bundle();\n     *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,\n     *           AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER);\n     *   arguments.putBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN,\n     *           false);\n     *   info.performAction(AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY,\n     *           arguments);\n     * </code></pre></p>\n     * </p>\n     *\n     * @see #ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n     * @see #ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n     *\n     * @see #setMovementGranularities(int)\n     * @see #getMovementGranularities()\n     *\n     * @see #MOVEMENT_GRANULARITY_CHARACTER\n     * @see #MOVEMENT_GRANULARITY_WORD\n     * @see #MOVEMENT_GRANULARITY_LINE\n     * @see #MOVEMENT_GRANULARITY_PARAGRAPH\n     * @see #MOVEMENT_GRANULARITY_PAGE\n     ",
    "links" : [ "#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT", "#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN" ]
  }, {
    "name" : "ACTION_NEXT_HTML_ELEMENT",
    "type" : "int",
    "comment" : "\n     * Action to move to the next HTML element of a given type. For example, move\n     * to the BUTTON, INPUT, TABLE, etc.\n     * <p>\n     * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_HTML_ELEMENT_STRING}<br>\n     * <strong>Example:</strong>\n     * <code><pre><p>\n     *   Bundle arguments = new Bundle();\n     *   arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, \"BUTTON\");\n     *   info.performAction(AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT, arguments);\n     * </code></pre></p>\n     * </p>\n     ",
    "links" : [ "#ACTION_ARGUMENT_HTML_ELEMENT_STRING" ]
  }, {
    "name" : "ACTION_PREVIOUS_HTML_ELEMENT",
    "type" : "int",
    "comment" : "\n     * Action to move to the previous HTML element of a given type. For example, move\n     * to the BUTTON, INPUT, TABLE, etc.\n     * <p>\n     * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_HTML_ELEMENT_STRING}<br>\n     * <strong>Example:</strong>\n     * <code><pre><p>\n     *   Bundle arguments = new Bundle();\n     *   arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, \"BUTTON\");\n     *   info.performAction(AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT, arguments);\n     * </code></pre></p>\n     * </p>\n     ",
    "links" : [ "#ACTION_ARGUMENT_HTML_ELEMENT_STRING" ]
  }, {
    "name" : "ACTION_SCROLL_FORWARD",
    "type" : "int",
    "comment" : "\n     * Action to scroll the node content forward.\n     * @see AccessibilityAction#ACTION_SCROLL_FORWARD\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SCROLL_BACKWARD",
    "type" : "int",
    "comment" : "\n     * Action to scroll the node content backward.\n     * @see AccessibilityAction#ACTION_SCROLL_BACKWARD\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_COPY",
    "type" : "int",
    "comment" : "\n     * Action to copy the current selection to the clipboard.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PASTE",
    "type" : "int",
    "comment" : "\n     * Action to paste the current clipboard content.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CUT",
    "type" : "int",
    "comment" : "\n     * Action to cut the current selection and place it to the clipboard.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SET_SELECTION",
    "type" : "int",
    "comment" : "\n     * Action to set the selection. Performing this action with no arguments\n     * clears the selection.\n     *\n     * @see AccessibilityAction#ACTION_SET_SELECTION\n     * @see #ACTION_ARGUMENT_SELECTION_START_INT\n     * @see #ACTION_ARGUMENT_SELECTION_END_INT\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_EXPAND",
    "type" : "int",
    "comment" : "\n     * Action to expand an expandable node.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_COLLAPSE",
    "type" : "int",
    "comment" : "\n     * Action to collapse an expandable node.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DISMISS",
    "type" : "int",
    "comment" : "\n     * Action to dismiss a dismissable node.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SET_TEXT",
    "type" : "int",
    "comment" : "\n     * Action that sets the text of the node. Performing the action without argument, using <code>\n     * null</code> or empty {@link CharSequence} will clear the text. This action will also put the\n     * cursor at the end of text.\n     * @see AccessibilityAction#ACTION_SET_TEXT\n     ",
    "links" : [ "CharSequence" ]
  }, {
    "name" : "LAST_LEGACY_STANDARD_ACTION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INVALID_ACTIONS_MASK",
    "type" : "int",
    "comment" : "\n     * Mask to verify if a given value is a combination of the existing ACTION_ constants.\n     *\n     * The smallest possible action is 1, and the largest is 1 << 21, or {@link ACTION_SET_TEXT}. A\n     * node can have any combination of actions present, so a node's max action int is:\n     *\n     *   0000 0000 0011 1111 1111 1111 1111 1111\n     *\n     * Therefore, if an action has any of the following bits flipped, it will be invalid:\n     *\n     *   1111 1111 11-- ---- ---- ---- ---- ----\n     *\n     * This can be represented in hexadecimal as 0xFFC00000.\n     *\n     * @see AccessibilityNodeInfo#addAction(int)\n     ",
    "links" : [ "ACTION_SET_TEXT" ]
  }, {
    "name" : "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT",
    "type" : "String",
    "comment" : "\n     * Argument for which movement granularity to be used when traversing the node text.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_NEXT_AT_MOVEMENT_GRANULARITY}</li>\n     *     <li>{@link AccessibilityAction#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY}</li>\n     * </ul>\n     * </p>\n     *\n     * @see AccessibilityAction#ACTION_NEXT_AT_MOVEMENT_GRANULARITY\n     * @see AccessibilityAction#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY\n     ",
    "links" : [ "#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY", "#ACTION_NEXT_AT_MOVEMENT_GRANULARITY" ]
  }, {
    "name" : "ACTION_ARGUMENT_HTML_ELEMENT_STRING",
    "type" : "String",
    "comment" : "\n     * Argument for which HTML element to get moving to the next/previous HTML element.\n     * <p>\n     * <strong>Type:</strong> String<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_NEXT_HTML_ELEMENT}</li>\n     *     <li>{@link AccessibilityAction#ACTION_PREVIOUS_HTML_ELEMENT}</li>\n     * </ul>\n     * </p>\n     *\n     * @see AccessibilityAction#ACTION_NEXT_HTML_ELEMENT\n     * @see AccessibilityAction#ACTION_PREVIOUS_HTML_ELEMENT\n     ",
    "links" : [ "#ACTION_PREVIOUS_HTML_ELEMENT", "#ACTION_NEXT_HTML_ELEMENT" ]
  }, {
    "name" : "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN",
    "type" : "String",
    "comment" : "\n     * Argument for whether when moving at granularity to extend the selection\n     * or to move it otherwise.\n     * <p>\n     * <strong>Type:</strong> boolean<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_NEXT_AT_MOVEMENT_GRANULARITY}</li>\n     *     <li>{@link AccessibilityAction#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_NEXT_AT_MOVEMENT_GRANULARITY\n     * @see AccessibilityAction#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY\n     ",
    "links" : [ "#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY", "#ACTION_NEXT_AT_MOVEMENT_GRANULARITY" ]
  }, {
    "name" : "ACTION_ARGUMENT_SELECTION_START_INT",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the selection start.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_SET_SELECTION}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_SET_SELECTION\n     ",
    "links" : [ "#ACTION_SET_SELECTION" ]
  }, {
    "name" : "ACTION_ARGUMENT_SELECTION_END_INT",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the selection end.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_SET_SELECTION}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_SET_SELECTION\n     ",
    "links" : [ "#ACTION_SET_SELECTION" ]
  }, {
    "name" : "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the text content to set.\n     * <p>\n     * <strong>Type:</strong> CharSequence<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_SET_TEXT}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_SET_TEXT\n     ",
    "links" : [ "#ACTION_SET_TEXT" ]
  }, {
    "name" : "ACTION_ARGUMENT_ROW_INT",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the collection row to make visible on screen.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_SCROLL_TO_POSITION}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_SCROLL_TO_POSITION\n     ",
    "links" : [ "#ACTION_SCROLL_TO_POSITION" ]
  }, {
    "name" : "ACTION_ARGUMENT_COLUMN_INT",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the collection column to make visible on screen.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_SCROLL_TO_POSITION}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_SCROLL_TO_POSITION\n     ",
    "links" : [ "#ACTION_SCROLL_TO_POSITION" ]
  }, {
    "name" : "ACTION_ARGUMENT_PROGRESS_VALUE",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the progress value to set.\n     * <p>\n     * <strong>Type:</strong> float<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_SET_PROGRESS}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_SET_PROGRESS\n     ",
    "links" : [ "#ACTION_SET_PROGRESS" ]
  }, {
    "name" : "ACTION_ARGUMENT_MOVE_WINDOW_X",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the x coordinate to which to move a window.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_MOVE_WINDOW}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_MOVE_WINDOW\n     ",
    "links" : [ "#ACTION_MOVE_WINDOW" ]
  }, {
    "name" : "ACTION_ARGUMENT_MOVE_WINDOW_Y",
    "type" : "String",
    "comment" : "\n     * Argument for specifying the y coordinate to which to move a window.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_MOVE_WINDOW}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_MOVE_WINDOW\n     ",
    "links" : [ "#ACTION_MOVE_WINDOW" ]
  }, {
    "name" : "ACTION_ARGUMENT_ACCESSIBLE_CLICKABLE_SPAN",
    "type" : "String",
    "comment" : "\n     * Argument to pass the {@link AccessibilityClickableSpan}.\n     * For use with R.id.accessibilityActionClickOnClickableSpan\n     * @hide\n     ",
    "links" : [ "android.text.style.AccessibilityClickableSpan" ]
  }, {
    "name" : "ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT",
    "type" : "String",
    "comment" : "\n     * Argument to represent the duration in milliseconds to press and hold a node.\n     * <p>\n     * <strong>Type:</strong> int<br>\n     * <strong>Actions:</strong>\n     * <ul>\n     *     <li>{@link AccessibilityAction#ACTION_PRESS_AND_HOLD}</li>\n     * </ul>\n     *\n     * @see AccessibilityAction#ACTION_PRESS_AND_HOLD\n     ",
    "links" : [ "#ACTION_PRESS_AND_HOLD" ]
  }, {
    "name" : "ACTION_ARGUMENT_DIRECTION_INT",
    "type" : "String",
    "comment" : "\n     * <p>Argument to represent the direction when using\n     * {@link AccessibilityAction#ACTION_SCROLL_IN_DIRECTION}.</p>\n     *\n     * <p>\n     *     The value of this argument can be one of:\n     *     <ul>\n     *         <li>{@link View#FOCUS_DOWN}</li>\n     *         <li>{@link View#FOCUS_UP}</li>\n     *         <li>{@link View#FOCUS_LEFT}</li>\n     *         <li>{@link View#FOCUS_RIGHT}</li>\n     *         <li>{@link View#FOCUS_FORWARD}</li>\n     *         <li>{@link View#FOCUS_BACKWARD}</li>\n     *     </ul>\n     * </p>\n     ",
    "links" : [ "android.view.SurfaceView#FOCUS_DOWN", "#ACTION_SCROLL_IN_DIRECTION", "android.view.SurfaceView#FOCUS_LEFT", "android.view.SurfaceView#FOCUS_RIGHT", "android.view.SurfaceView#FOCUS_UP", "android.view.SurfaceView#FOCUS_FORWARD", "android.view.SurfaceView#FOCUS_BACKWARD" ]
  }, {
    "name" : "ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT",
    "type" : "String",
    "comment" : "\n     * <p>Argument to represent the scroll amount as a percent of the visible area of a node, with\n     * 1.0F as the default. Values smaller than 1.0F represent a partial scroll of the node, and\n     * values larger than 1.0F represent a scroll that extends beyond the currently visible node\n     * Rect. Setting this to {@link Float#POSITIVE_INFINITY} or to another \"too large\" value should\n     * scroll to the end of the node. Negative values should not be used with this argument.\n     * </p>\n     *\n     * <p>\n     *     This argument should be used with the following scroll actions:\n     *     <ul>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_FORWARD}</li>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_BACKWARD}</li>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_UP}</li>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_DOWN}</li>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_LEFT}</li>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_RIGHT}</li>\n     *     </ul>\n     * </p>\n     * <p>\n     *     Example: if a view representing a list of items implements\n     *     {@link AccessibilityAction#ACTION_SCROLL_FORWARD} to scroll forward by an entire screen\n     *     (one \"page\"), then passing a value of .25F via this argument should scroll that view\n     *     only by 1/4th of a screen. Passing a value of 1.50F via this argument should scroll the\n     *     view by 1 1/2 screens or to end of the node if the node doesn't extend to 1 1/2 screens.\n     * </p>\n     *\n     * <p>\n     *     This argument should not be used with the following scroll actions, which don't cleanly\n     *     conform to granular scroll semantics:\n     *     <ul>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_IN_DIRECTION}</li>\n     *         <li>{@link AccessibilityAction#ACTION_SCROLL_TO_POSITION}</li>\n     *     </ul>\n     * </p>\n     *\n     * <p>\n     *     Views that support this argument should set\n     *     {@link #setGranularScrollingSupported(boolean)} to true. Clients should use\n     *     {@link #isGranularScrollingSupported()} to check if granular scrolling is supported.\n     * </p>\n     ",
    "links" : [ "#ACTION_SCROLL_DOWN", "#ACTION_SCROLL_BACKWARD", "#ACTION_SCROLL_IN_DIRECTION", "#ACTION_SCROLL_LEFT", "#ACTION_SCROLL_UP", "#ACTION_SCROLL_TO_POSITION", "#ACTION_SCROLL_FORWARD", "#isGranularScrollingSupported()", "#POSITIVE_INFINITY", "#setGranularScrollingSupported(boolean)", "#ACTION_SCROLL_RIGHT" ]
  }, {
    "name" : "FOCUS_INPUT",
    "type" : "int",
    "comment" : "\n     * The input focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "FOCUS_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * The accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "MOVEMENT_GRANULARITY_CHARACTER",
    "type" : "int",
    "comment" : "\n     * Movement granularity bit for traversing the text of a node by character.\n     ",
    "links" : [ ]
  }, {
    "name" : "MOVEMENT_GRANULARITY_WORD",
    "type" : "int",
    "comment" : "\n     * Movement granularity bit for traversing the text of a node by word.\n     ",
    "links" : [ ]
  }, {
    "name" : "MOVEMENT_GRANULARITY_LINE",
    "type" : "int",
    "comment" : "\n     * Movement granularity bit for traversing the text of a node by line.\n     ",
    "links" : [ ]
  }, {
    "name" : "MOVEMENT_GRANULARITY_PARAGRAPH",
    "type" : "int",
    "comment" : "\n     * Movement granularity bit for traversing the text of a node by paragraph.\n     ",
    "links" : [ ]
  }, {
    "name" : "MOVEMENT_GRANULARITY_PAGE",
    "type" : "int",
    "comment" : "\n     * Movement granularity bit for traversing the text of a node by page.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY",
    "type" : "String",
    "comment" : "\n     * Key used to request and locate extra data for text character location. This key requests that\n     * an array of {@link android.graphics.RectF}s be added to the extras. This request is made with\n     * {@link #refreshWithExtraData(String, Bundle)}. The arguments taken by this request are two\n     * integers: {@link #EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX} and\n     * {@link #EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH}. The starting index must be valid\n     * inside the CharSequence returned by {@link #getText()}, and the length must be positive.\n     * <p>\n     * The data can be retrieved from the {@code Bundle} returned by {@link #getExtras()} using this\n     * string as a key for {@link Bundle#getParcelableArray(String)}. The\n     * {@link android.graphics.RectF} will be null for characters that either do not exist or are\n     * off the screen.\n     *\n     * {@see #refreshWithExtraData(String, Bundle)}\n     ",
    "links" : [ "android.graphics.RectF", "#refreshWithExtraData(String", "#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX", "#getText()", "android.os.Bundle#getParcelableArray(String)", "#getExtras()", "#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH" ]
  }, {
    "name" : "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX",
    "type" : "String",
    "comment" : "\n     * Integer argument specifying the start index of the requested text location data. Must be\n     * valid inside the CharSequence returned by {@link #getText()}.\n     *\n     * @see #EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY\n     ",
    "links" : [ "#getText()" ]
  }, {
    "name" : "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH",
    "type" : "String",
    "comment" : "\n     * Integer argument specifying the end index of the requested text location data. Must be\n     * positive and no larger than {@link #EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH}.\n     *\n     * @see #EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY\n     ",
    "links" : [ "#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH" ]
  }, {
    "name" : "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH",
    "type" : "int",
    "comment" : "\n     * The maximum allowed length of the requested text location data.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DATA_RENDERING_INFO_KEY",
    "type" : "String",
    "comment" : "\n     * Key used to request extra data for the rendering information.\n     * The key requests that a {@link AccessibilityNodeInfo.ExtraRenderingInfo} be added to this\n     * info. This request is made with {@link #refreshWithExtraData(String, Bundle)} without\n     * argument.\n     * <p>\n     * The data can be retrieved from the {@link ExtraRenderingInfo} returned by\n     * {@link #getExtraRenderingInfo()} using {@link ExtraRenderingInfo#getLayoutSize},\n     * {@link ExtraRenderingInfo#getTextSizeInPx()} and\n     * {@link ExtraRenderingInfo#getTextSizeUnit()}. For layout params, it is supported by both\n     * {@link TextView} and {@link ViewGroup}. For text size and unit, it is only supported by\n     * {@link TextView}.\n     *\n     * @see #refreshWithExtraData(String, Bundle)\n     ",
    "links" : [ "#getLayoutSize", "#refreshWithExtraData(String", "#getTextSizeInPx()", "AccessibilityNodeInfo.ExtraRenderingInfo", "android.widget.TextView", "#getTextSizeUnit()", "#getExtraRenderingInfo()", "ExtraRenderingInfo", "android.view.ViewGroup" ]
  }, {
    "name" : "EXTRA_DATA_REQUESTED_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_CHECKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_CHECKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_FOCUSABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_FOCUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_SELECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_CLICKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_LONG_CLICKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_ENABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_PASSWORD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_SCROLLABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_VISIBLE_TO_USER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_EDITABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_OPENS_POPUP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_DISMISSABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_MULTI_LINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_CONTENT_INVALID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_CONTEXT_CLICKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_IMPORTANCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_SCREEN_READER_FOCUSABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_IS_SHOWING_HINT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_IS_HEADING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_IS_TEXT_ENTRY_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_IS_TEXT_SELECTABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_REQUEST_INITIAL_ACCESSIBILITY_FOCUS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_ACCESSIBILITY_DATA_SENSITIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_SUPPORTS_GRANULAR_SCROLLING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIRTUAL_DESCENDANT_ID_MASK",
    "type" : "long",
    "comment" : "\n     * Bits that provide the id of a virtual descendant of a view.\n     ",
    "links" : [ ]
  }, {
    "name" : "VIRTUAL_DESCENDANT_ID_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift of {@link #VIRTUAL_DESCENDANT_ID_MASK} to get to the id for a\n     * virtual descendant of a view. Such a descendant does not exist in the view\n     * hierarchy and is only reported via the accessibility APIs.\n     ",
    "links" : [ "#VIRTUAL_DESCENDANT_ID_MASK" ]
  }, {
    "name" : "DEFAULT",
    "type" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSealed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowId",
    "type" : "int",
    "comment" : " Data.",
    "links" : [ ]
  }, {
    "name" : "mSourceNodeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentNodeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabelForId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabeledById",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraversalBefore",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraversalAfter",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinDurationBetweenContentChanges",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBooleanProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundsInParent",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundsInScreen",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundsInWindow",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawingOrderInParent",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalText",
    "type" : "CharSequence",
    "comment" : " Hidden, unparceled value used to hold the original value passed to setText",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mError",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaneTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTooltipText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewIdResourceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUniqueId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainerTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraDataKeys",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildNodeIds",
    "type" : "LongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActions",
    "type" : "ArrayList<AccessibilityAction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxTextLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMovementGranularities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSelectionStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSelectionEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLiveRegion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRangeInfo",
    "type" : "RangeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollectionInfo",
    "type" : "CollectionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollectionItemInfo",
    "type" : "CollectionItemInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchDelegateInfo",
    "type" : "TouchDelegateInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraRenderingInfo",
    "type" : "ExtraRenderingInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeashedChild",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeashedParent",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeashedParentNodeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AccessibilityNodeInfo>",
    "comment" : "\n     * @see android.os.Parcelable.Creator\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getAccessibilityViewId(long accessibilityNodeId)",
    "returnType" : "int",
    "comment" : "\n     * Gets the accessibility view id which identifies a View in the view three.\n     *\n     * @param accessibilityNodeId The id of an {@link AccessibilityNodeInfo}.\n     * @return The accessibility view id part of the node id.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "public static int getVirtualDescendantId(long accessibilityNodeId)",
    "returnType" : "int",
    "comment" : "\n     * Gets the virtual descendant id which identifies an imaginary view in a\n     * containing View.\n     *\n     * @param accessibilityNodeId The id of an {@link AccessibilityNodeInfo}.\n     * @return The virtual view id part of the node id.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "public static long makeNodeId(int accessibilityViewId, int virtualDescendantId)",
    "returnType" : "long",
    "comment" : "\n     * Makes a node id by shifting the <code>virtualDescendantId</code>\n     * by {@link #VIRTUAL_DESCENDANT_ID_SHIFT} and taking\n     * the bitwise or with the <code>accessibilityViewId</code>.\n     *\n     * @param accessibilityViewId A View accessibility id.\n     * @param virtualDescendantId A virtual descendant id.\n     * @return The node id.\n     *\n     * @hide\n     ",
    "links" : [ "#VIRTUAL_DESCENDANT_ID_SHIFT" ]
  }, {
    "name" : "public void setSource(View source)",
    "returnType" : "void",
    "comment" : "\n     * Sets the source.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param source The info source.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setSource(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the source to be a virtual descendant of the given <code>root</code>.\n     * If <code>virtualDescendantId</code> is {@link View#NO_ID} the root\n     * is set as the source.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report themselves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo findFocus(int focus)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Find the view that has the specified focus type. The search starts from\n     * the view represented by this node info.\n     *\n     * <p>\n     * <strong>Note:</strong> If this view hierarchy has a {@link SurfaceView} embedding another\n     * view hierarchy via {@link SurfaceView#setChildSurfacePackage}, there is a limitation that\n     * this API won't be able to find the node for the view on the embedded view hierarchy. It's\n     * because views don't know about the embedded hierarchies. Instead, you could traverse all\n     * the children to find the node. Or, use {@link AccessibilityService#findFocus(int)} for\n     * {@link #FOCUS_ACCESSIBILITY} only since it has no such limitation.\n     * </p>\n     *\n     * @param focus The focus to find. One of {@link #FOCUS_INPUT} or\n     *         {@link #FOCUS_ACCESSIBILITY}.\n     * @return The node info of the focused view or null.\n     *\n     * @see #FOCUS_INPUT\n     * @see #FOCUS_ACCESSIBILITY\n     ",
    "links" : [ "android.view.SurfaceView", "#FOCUS_INPUT", "android.view.SurfaceView#setChildSurfacePackage", "android.accessibilityservice.AccessibilityService#findFocus(int)", "#FOCUS_ACCESSIBILITY" ]
  }, {
    "name" : "public AccessibilityNodeInfo focusSearch(int direction)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Searches for the nearest view in the specified direction that can take\n     * the input focus.\n     *\n     * <p>\n     * <strong>Note:</strong> If this view hierarchy has a {@link SurfaceView} embedding another\n     * view hierarchy via {@link SurfaceView#setChildSurfacePackage}, there is a limitation that\n     * this API won't be able to find the node for the view in the specified direction on the\n     * embedded view hierarchy. It's because views don't know about the embedded hierarchies.\n     * Instead, you could traverse all the children to find the node.\n     * </p>\n     *\n     * @param direction The direction. Can be one of:\n     *     {@link View#FOCUS_DOWN},\n     *     {@link View#FOCUS_UP},\n     *     {@link View#FOCUS_LEFT},\n     *     {@link View#FOCUS_RIGHT},\n     *     {@link View#FOCUS_FORWARD},\n     *     {@link View#FOCUS_BACKWARD}.\n     *\n     * @return The node info for the view that can take accessibility focus.\n     ",
    "links" : [ "android.view.SurfaceView#FOCUS_DOWN", "android.view.SurfaceView#FOCUS_LEFT", "android.view.SurfaceView#FOCUS_RIGHT", "android.view.SurfaceView", "android.view.SurfaceView#setChildSurfacePackage", "android.view.SurfaceView#FOCUS_UP", "android.view.SurfaceView#FOCUS_FORWARD", "android.view.SurfaceView#FOCUS_BACKWARD" ]
  }, {
    "name" : "public int getWindowId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the window from which the info comes from.\n     *\n     * @return The window id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(Bundle arguments, boolean bypassCache)",
    "returnType" : "boolean",
    "comment" : "\n     * Refreshes this info with the latest state of the view it represents.\n     *\n     * @param bypassCache Whether to bypass the cache.\n     * @return Whether the refresh succeeded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh()",
    "returnType" : "boolean",
    "comment" : "\n     * Refreshes this info with the latest state of the view it represents.\n     *\n     * @return {@code true} if the refresh succeeded. {@code false} if the {@link View} represented\n     * by this node is no longer in the view tree (and thus this node is obsolete).\n     ",
    "links" : [ "android.view.SurfaceView" ]
  }, {
    "name" : "public boolean refreshWithExtraData(String extraDataKey, Bundle args)",
    "returnType" : "boolean",
    "comment" : "\n     * Refreshes this info with the latest state of the view it represents, and request new\n     * data be added by the View.\n     *\n     * @param extraDataKey The extra data requested. Data that must be requested\n     *                     with this mechanism is generally expensive to retrieve, so should only be\n     *                     requested when needed. See\n     *                     {@link #EXTRA_DATA_RENDERING_INFO_KEY},\n     *                     {@link #EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY},\n     *                     {@link #getAvailableExtraData()} and {@link #getExtraRenderingInfo()}.\n     * @param args A bundle of arguments for the request. These depend on the particular request.\n     *\n     * @return {@code true} if the refresh succeeded. {@code false} if the {@link View} represented\n     * by this node is no longer in the view tree (and thus this node is obsolete).\n     ",
    "links" : [ "android.view.SurfaceView", "#getExtraRenderingInfo()", "#getAvailableExtraData()", "#EXTRA_DATA_RENDERING_INFO_KEY", "#EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY" ]
  }, {
    "name" : "public LongArray getChildNodeIds()",
    "returnType" : "LongArray",
    "comment" : "\n     * Returns the array containing the IDs of this node's children.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getChildId(int index)",
    "returnType" : "long",
    "comment" : "\n     * Returns the id of the child at the specified index.\n     *\n     * @throws IndexOutOfBoundsException when index &lt; 0 || index &gt;=\n     *             getChildCount()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChildCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of children.\n     *\n     * @return The child count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getChild(int index)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Get the child at given index.\n     *\n     * @param index The child index.\n     * @return The child node.\n     *\n     * @throws IllegalStateException If called outside of an {@link AccessibilityService} and before\n     *                               calling {@link #setQueryFromAppProcessEnabled}.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#setQueryFromAppProcessEnabled" ]
  }, {
    "name" : "public AccessibilityNodeInfo getChild(int index, @PrefetchingStrategy int prefetchingStrategy)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Get the child at given index.\n     *\n     * <p>\n     * See {@link #getParent(int)} for a description of prefetching.\n     * @param index The child index.\n     * @param prefetchingStrategy the prefetching strategy.\n     * @return The child node.\n     *\n     * @throws IllegalStateException If called outside of an {@link AccessibilityService} and before\n     *                               calling {@link #setQueryFromAppProcessEnabled}.\n     *\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#getParent(int)", "#setQueryFromAppProcessEnabled" ]
  }, {
    "name" : "public void addChild(View child)",
    "returnType" : "void",
    "comment" : "\n     * Adds a child.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     * Note that a view cannot be made its own child.\n     * </p>\n     *\n     * @param child The child.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void addChild(@NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Adds a view root from leashed content as a child. This method is used to embedded another\n     * view hierarchy.\n     * <p>\n     * <strong>Note:</strong> Only one leashed child is permitted.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     * Note that a view cannot be made its own child.\n     * </p>\n     *\n     * @param token The token to which a view root is added.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void addChildUnchecked(View child)",
    "returnType" : "void",
    "comment" : "\n     * Unchecked version of {@link #addChild(View)} that does not verify\n     * uniqueness. For framework use only.\n     *\n     * @hide\n     ",
    "links" : [ "#addChild(View)" ]
  }, {
    "name" : "public boolean removeChild(View child)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a child. If the child was not previously added to the node,\n     * calling this method has no effect.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param child The child.\n     * @return true if the child was present\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean removeChild(IBinder token)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a leashed child. If the child was not previously added to the node,\n     * calling this method has no effect.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param token The token of the leashed child\n     * @return true if the child was present\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void addChild(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Adds a virtual child which is a descendant of the given <code>root</code>.\n     * If <code>virtualDescendantId</code> is {@link View#NO_ID} the root\n     * is added as a child.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report them selves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * Note that a view cannot be made its own child.\n     * </p>\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual child.\n     ",
    "links" : [ "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "private void addChildInternal(View root, int virtualDescendantId, boolean checked)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeChild(View root, int virtualDescendantId)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a virtual child which is a descendant of the given\n     * <code>root</code>. If the child was not previously added to the node,\n     * calling this method has no effect.\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual child.\n     * @return true if the child was present\n     * @see #addChild(View, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityAction> getActionList()",
    "returnType" : "List<AccessibilityAction>",
    "comment" : "\n     * Gets the actions that can be performed on the node.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActions()",
    "returnType" : "int",
    "comment" : "\n     * Gets the actions that can be performed on the node.\n     *\n     * @return The bit mask of with actions.\n     *\n     * @see AccessibilityNodeInfo#ACTION_FOCUS\n     * @see AccessibilityNodeInfo#ACTION_CLEAR_FOCUS\n     * @see AccessibilityNodeInfo#ACTION_SELECT\n     * @see AccessibilityNodeInfo#ACTION_CLEAR_SELECTION\n     * @see AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS\n     * @see AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS\n     * @see AccessibilityNodeInfo#ACTION_CLICK\n     * @see AccessibilityNodeInfo#ACTION_LONG_CLICK\n     * @see AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY\n     * @see AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY\n     * @see AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT\n     * @see AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT\n     * @see AccessibilityNodeInfo#ACTION_SCROLL_FORWARD\n     * @see AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD\n     *\n     * @deprecated Use {@link #getActionList()}.\n     ",
    "links" : [ "#getActionList()" ]
  }, {
    "name" : "public void addAction(AccessibilityAction action)",
    "returnType" : "void",
    "comment" : "\n     * Adds an action that can be performed on the node.\n     * <p>\n     * To add a standard action use the static constants on {@link AccessibilityAction}.\n     * To add a custom action create a new {@link AccessibilityAction} by passing in a\n     * resource id from your application as the action id and an optional label that\n     * describes the action. To override one of the standard actions use as the action\n     * id of a standard action id such as {@link #ACTION_CLICK} and an optional label that\n     * describes the action.\n     * </p>\n     * <p>\n     * Use {@link androidx.core.view.ViewCompat#addAccessibilityAction(View, CharSequence,\n     * AccessibilityViewCommand)} to register an action directly on the view.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param action The action.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "AccessibilityAction", "androidx.core.view.ViewCompat#addAccessibilityAction(View", "android.accessibilityservice.AccessibilityService", "#ACTION_CLICK" ]
  }, {
    "name" : "private void addActionUnchecked(AccessibilityAction action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addAction(int action)",
    "returnType" : "void",
    "comment" : "\n     * Adds an action that can be performed on the node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param action The action.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @throws IllegalArgumentException If the argument is not one of the standard actions.\n     *\n     * @deprecated This has been deprecated for {@link #addAction(AccessibilityAction)}\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#addAction(AccessibilityAction)" ]
  }, {
    "name" : "public void removeAction(int action)",
    "returnType" : "void",
    "comment" : "\n     * Removes an action that can be performed on the node. If the action was\n     * not already added to the node, calling this method has no effect.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param action The action to be removed.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @deprecated Use {@link #removeAction(AccessibilityAction)}\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#removeAction(AccessibilityAction)" ]
  }, {
    "name" : "public boolean removeAction(AccessibilityAction action)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes an action that can be performed on the node. If the action was\n     * not already added to the node, calling this method has no effect.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param action The action to be removed.\n     * @return The action removed from the list of actions.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void removeAllActions()",
    "returnType" : "void",
    "comment" : "\n     * Removes all actions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getTraversalBefore()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the node before which this one is visited during traversal. A screen-reader\n     * must visit the content of this node before the content of the one it precedes.\n     *\n     * @return The succeeding node if such or <code>null</code>.\n     *\n     * @see #setTraversalBefore(android.view.View)\n     * @see #setTraversalBefore(android.view.View, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTraversalBefore(View view)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view before whose node this one should be visited during traversal. A\n     * screen-reader must visit the content of this node before the content of the one\n     * it precedes.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param view The view providing the preceding node.\n     *\n     * @see #getTraversalBefore()\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setTraversalBefore(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the node before which this one is visited during traversal. A screen-reader\n     * must visit the content of this node before the content of the one it precedes.\n     * The successor is a virtual descendant of the given <code>root</code>. If\n     * <code>virtualDescendantId</code> equals to {@link View#NO_ID} the root is set\n     * as the successor.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report them selves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo getTraversalAfter()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the node after which this one is visited in accessibility traversal.\n     * A screen-reader must visit the content of the other node before the content\n     * of this one.\n     *\n     * @return The succeeding node if such or <code>null</code>.\n     *\n     * @see #setTraversalAfter(android.view.View)\n     * @see #setTraversalAfter(android.view.View, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTraversalAfter(View view)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view whose node is visited after this one in accessibility traversal.\n     * A screen-reader must visit the content of the other node before the content\n     * of this one.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param view The previous view.\n     *\n     * @see #getTraversalAfter()\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setTraversalAfter(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the node after which this one is visited in accessibility traversal.\n     * A screen-reader must visit the content of the other node before the content\n     * of this one. If <code>virtualDescendantId</code> equals to {@link View#NO_ID}\n     * the root is set as the predecessor.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report them selves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "public List<String> getAvailableExtraData()",
    "returnType" : "List<String>",
    "comment" : "\n     * Get the extra data available for this node.\n     * <p>\n     * Some data that is useful for some accessibility services is expensive to compute, and would\n     * place undue overhead on apps to compute all the time. That data can be requested with\n     * {@link #refreshWithExtraData(String, Bundle)}.\n     *\n     * @return An unmodifiable list of keys corresponding to extra data that can be requested.\n     * @see #EXTRA_DATA_RENDERING_INFO_KEY\n     * @see #EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY\n     ",
    "links" : [ "#refreshWithExtraData(String" ]
  }, {
    "name" : "public void setAvailableExtraData(List<String> extraDataKeys)",
    "returnType" : "void",
    "comment" : "\n     * Set the extra data available for this node.\n     * <p>\n     * <strong>Note:</strong> When a {@code View} passes in a non-empty list, it promises that\n     * it will populate the node's extras with corresponding pieces of information in\n     * {@link View#addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo, String, Bundle)}.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     *\n     * @param extraDataKeys A list of types of extra data that are available.\n     * @see #getAvailableExtraData()\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo" ]
  }, {
    "name" : "public void setMaxTextLength(int max)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum text length, or -1 for no limit.\n     * <p>\n     * Typically used to indicate that an editable text field has a limit on\n     * the number of characters entered.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     *\n     * @param max The maximum text length.\n     * @see #getMaxTextLength()\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public int getMaxTextLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum text length for this node.\n     *\n     * @return The maximum text length, or -1 for no limit.\n     * @see #setMaxTextLength(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMovementGranularities(int granularities)",
    "returnType" : "void",
    "comment" : "\n     * Sets the movement granularities for traversing the text of this node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param granularities The bit mask with granularities.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public int getMovementGranularities()",
    "returnType" : "int",
    "comment" : "\n     * Gets the movement granularities for traversing the text of this node.\n     *\n     * @return The bit mask with granularities.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinDurationBetweenContentChanges(@NonNull Duration duration)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum time duration between two content change events, which is used in throttling\n     * content change events in accessibility services.\n     *\n     * <p>\n     * Example: An app can set MinMillisBetweenContentChanges as 1 min for a view which sends\n     * content change events to accessibility services one event per second.\n     * Accessibility service will throttle those content change events and only handle one event\n     * per minute for that view.\n     * </p>\n     * <p>\n     * Example UI elements that frequently update and may benefit from a duration are progress bars,\n     * timers, and stopwatches.\n     * </p>\n     *\n     * @see AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED\n     * @see AccessibilityEvent#getContentChangeTypes\n     * @param duration the minimum duration between content change events.\n     *                                         Negative duration would be treated as zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Duration getMinDurationBetweenContentChanges()",
    "returnType" : "Duration",
    "comment" : "\n     * Gets the minimum time duration between two content change events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performAction(int action)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs an action on the node.\n     * <p>\n     *   <strong>Note:</strong> An action can be performed only if the request is made\n     *   from an {@link android.accessibilityservice.AccessibilityService}.\n     * </p>\n     *\n     * @param action The action to perform.\n     * @return True if the action was performed.\n     *\n     * @throws IllegalStateException If called outside of an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean performAction(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs an action on the node.\n     * <p>\n     *   <strong>Note:</strong> An action can be performed only if the request is made\n     *   from an {@link android.accessibilityservice.AccessibilityService}.\n     * </p>\n     *\n     * @param action The action to perform.\n     * @param arguments A bundle with additional arguments.\n     * @return True if the action was performed.\n     *\n     * @throws IllegalStateException If called outside of an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text)",
    "returnType" : "List<AccessibilityNodeInfo>",
    "comment" : "\n     * Finds {@link AccessibilityNodeInfo}s by text. The match is case\n     * insensitive containment. The search is relative to this info i.e.\n     * this info is the root of the traversed tree.\n     *\n     * <p>\n     * <strong>Note:</strong> If this view hierarchy has a {@link SurfaceView} embedding another\n     * view hierarchy via {@link SurfaceView#setChildSurfacePackage}, there is a limitation that\n     * this API won't be able to find the node for the view on the embedded view hierarchy. It's\n     * because views don't know about the embedded hierarchies. Instead, you could traverse all\n     * the children to find the node.\n     * </p>\n     *\n     * @param text The searched text.\n     * @return A list of node info.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.SurfaceView", "android.view.SurfaceView#setChildSurfacePackage" ]
  }, {
    "name" : "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(@NonNull String viewId)",
    "returnType" : "List<AccessibilityNodeInfo>",
    "comment" : "\n     * Finds {@link AccessibilityNodeInfo}s by the fully qualified view id's resource\n     * name where a fully qualified id is of the from \"package:id/id_resource_name\".\n     * For example, if the target application's package is \"foo.bar\" and the id\n     * resource name is \"baz\", the fully qualified resource id is \"foo.bar:id/baz\".\n     *\n     * <p>\n     *   <strong>Note:</strong> The primary usage of this API is for UI test automation\n     *   and in order to report the fully qualified view id if an {@link AccessibilityNodeInfo}\n     *   the client has to set the {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}\n     *   flag when configuring the {@link android.accessibilityservice.AccessibilityService}.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> If this view hierarchy has a {@link SurfaceView} embedding another\n     * view hierarchy via {@link SurfaceView#setChildSurfacePackage}, there is a limitation that\n     * this API won't be able to find the node for the view on the embedded view hierarchy. It's\n     * because views don't know about the embedded hierarchies. Instead, you could traverse all\n     * the children to find the node.\n     * </p>\n     *\n     * @param viewId The fully qualified resource name of the view id to find.\n     * @return A list of node info.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView", "android.view.SurfaceView#setChildSurfacePackage", "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS" ]
  }, {
    "name" : "public AccessibilityWindowInfo getWindow()",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Gets the window to which this node belongs.\n     *\n     * @return The window.\n     *\n     * @see android.accessibilityservice.AccessibilityService#getWindows()\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getParent()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the parent.\n     *\n     * @return The parent.\n     *\n     * @throws IllegalStateException If called outside of an {@link AccessibilityService} and before\n     *                               calling {@link #setQueryFromAppProcessEnabled}.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#setQueryFromAppProcessEnabled" ]
  }, {
    "name" : "public AccessibilityNodeInfo getParent(@PrefetchingStrategy int prefetchingStrategy)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the parent.\n     *\n     * <p>\n     * Use {@code prefetchingStrategy} to determine the types of\n     * nodes prefetched from the app if the requested node is not in the cache and must be retrieved\n     * by the app. The default strategy for {@link #getParent()} is a combination of ancestor and\n     * sibling strategies. The app will prefetch until all nodes fulfilling the strategies are\n     * fetched, another node request is sent, or the maximum prefetch batch size of\n     * {@link #MAX_NUMBER_OF_PREFETCHED_NODES} nodes is reached. To prevent interruption by another\n     * request and to force prefetching of the max batch size, use\n     * {@link AccessibilityNodeInfo#FLAG_PREFETCH_UNINTERRUPTIBLE}.\n     * </p>\n     *\n     * @param prefetchingStrategy the prefetching strategy.\n     * @return The parent.\n     *\n     * @throws IllegalStateException If called outside of an {@link AccessibilityService} and before\n     *                               calling {@link #setQueryFromAppProcessEnabled}.\n     *\n     * @see #FLAG_PREFETCH_ANCESTORS\n     * @see #FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST\n     * @see #FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST\n     * @see #FLAG_PREFETCH_DESCENDANTS_HYBRID\n     * @see #FLAG_PREFETCH_SIBLINGS\n     * @see #FLAG_PREFETCH_UNINTERRUPTIBLE\n     ",
    "links" : [ "#getParent()", "#MAX_NUMBER_OF_PREFETCHED_NODES", "android.accessibilityservice.AccessibilityService", "android.view.accessibility.AccessibilityNodeInfo#FLAG_PREFETCH_UNINTERRUPTIBLE", "#setQueryFromAppProcessEnabled" ]
  }, {
    "name" : "public long getParentNodeId()",
    "returnType" : "long",
    "comment" : "\n     * @return The parent node id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParent(View parent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the parent.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param parent The parent.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setParent(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the parent to be a virtual descendant of the given <code>root</code>.\n     * If <code>virtualDescendantId</code> equals to {@link View#NO_ID} the root\n     * is set as the parent.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report them selves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "public void getBoundsInParent(Rect outBounds)",
    "returnType" : "void",
    "comment" : "\n     * Gets the node bounds in the viewParent's coordinates.\n     * {@link #getParent()} does not represent the source's viewParent.\n     * Instead it represents the result of {@link View#getParentForAccessibility()},\n     * which returns the closest ancestor where {@link View#isImportantForAccessibility()} is true.\n     * So this method is not reliable.\n     * <p>\n     * When magnification is enabled, the bounds in parent are also scaled up by magnification\n     * scale. For example, it returns Rect(20, 20, 200, 200) for original bounds\n     * Rect(10, 10, 100, 100), when the magnification scale is 2.\n     * <p/>\n     *\n     * @param outBounds The output node bounds.\n     * @deprecated Use {@link #getBoundsInScreen(Rect)} instead.\n     *\n     ",
    "links" : [ "#getParent()", "android.view.SurfaceView#isImportantForAccessibility()", "android.view.SurfaceView#getParentForAccessibility()", "#getBoundsInScreen(Rect)" ]
  }, {
    "name" : "public void setBoundsInParent(Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Sets the node bounds in the viewParent's coordinates.\n     * {@link #getParent()} does not represent the source's viewParent.\n     * Instead it represents the result of {@link View#getParentForAccessibility()},\n     * which returns the closest ancestor where {@link View#isImportantForAccessibility()} is true.\n     * So this method is not reliable.\n     *\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param bounds The node bounds.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @deprecated Accessibility services should not care about these bounds.\n     ",
    "links" : [ "#getParent()", "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#isImportantForAccessibility()", "android.view.SurfaceView#getParentForAccessibility()" ]
  }, {
    "name" : "public void getBoundsInScreen(Rect outBounds)",
    "returnType" : "void",
    "comment" : "\n     * Gets the node bounds in screen coordinates.\n     * <p>\n     * When magnification is enabled, the bounds in screen are scaled up by magnification scale\n     * and the positions are also adjusted according to the offset of magnification viewport.\n     * For example, it returns Rect(-180, -180, 0, 0) for original bounds Rect(10, 10, 100, 100),\n     * when the magnification scale is 2 and offsets for X and Y are both 200.\n     * <p/>\n     *\n     * @param outBounds The output node bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBoundsInScreen()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the actual rect containing the node bounds in screen coordinates.\n     *\n     * @hide Not safe to expose outside the framework.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBoundsInScreen(Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Sets the node bounds in screen coordinates.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param bounds The node bounds.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void getBoundsInWindow(@NonNull Rect outBounds)",
    "returnType" : "void",
    "comment" : "\n     * Gets the node bounds in window coordinates.\n     * <p>\n     * When magnification is enabled, the bounds in window are scaled up by magnification scale\n     * and the positions are also adjusted according to the offset of magnification viewport.\n     * For example, it returns Rect(-180, -180, 0, 0) for original bounds Rect(10, 10, 100, 100),\n     * when the magnification scale is 2 and offsets for X and Y are both 200.\n     * <p/>\n     *\n     * @param outBounds The output node bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBoundsInWindow()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the actual rect containing the node bounds in window coordinates.\n     *\n     * @hide Not safe to expose outside the framework.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBoundsInWindow(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Sets the node bounds in window coordinates.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param bounds The node bounds.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isCheckable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is checkable.\n     *\n     * @return True if the node is checkable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCheckable(boolean checkable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is checkable.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param checkable True if the node is checkable.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is checked.\n     *\n     * @return True if the node is checked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChecked(boolean checked)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is checked.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param checked True if the node is checked.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is focusable.\n     *\n     * <p>In the View system, this typically maps to {@link View#isFocusable()}.\n     * @return True if the node is focusable.\n     ",
    "links" : [ "android.view.SurfaceView#isFocusable()" ]
  }, {
    "name" : "public void setFocusable(boolean focusable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is focusable.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     * <p>To mark a node as explicitly focusable for a screen reader, consider using\n     * {@link #setScreenReaderFocusable(boolean)} instead.\n     *\n     * @param focusable True if the node is focusable.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#setScreenReaderFocusable(boolean)" ]
  }, {
    "name" : "public boolean isFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is focused.\n     *\n     * <p>This is distinct from {@link #isAccessibilityFocused()}, which is used by screen readers.\n     * See {@link AccessibilityAction#ACTION_ACCESSIBILITY_FOCUS} for details.\n     *\n     * @return True if the node is focused.\n     ",
    "links" : [ "#ACTION_ACCESSIBILITY_FOCUS", "#isAccessibilityFocused()" ]
  }, {
    "name" : "public void setFocused(boolean focused)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is focused.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param focused True if the node is focused.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isVisibleToUser()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is visible to the user.\n     * <p>\n     * Between {@link Build.VERSION_CODES#JELLY_BEAN API 16} and\n     * {@link Build.VERSION_CODES#Q API 29}, this method may incorrectly return false when\n     * magnification is enabled. On other versions, a node is considered visible even if it is not\n     * on the screen because magnification is active.\n     * </p>\n     *\n     * @return Whether the node is visible to the user.\n     ",
    "links" : [ "Build.VERSION_CODES#JELLY_BEAN", "Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public void setVisibleToUser(boolean visibleToUser)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is visible to the user.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param visibleToUser Whether the node is visible to the user.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isAccessibilityFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is accessibility focused.\n     *\n     * <p>This is distinct from {@link #isFocused()}, which is used to track system focus.\n     * See {@link #ACTION_ACCESSIBILITY_FOCUS} for details.\n     * @return True if the node is accessibility focused.\n     ",
    "links" : [ "#isFocused()", "#ACTION_ACCESSIBILITY_FOCUS" ]
  }, {
    "name" : "public void setAccessibilityFocused(boolean focused)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is accessibility focused.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     * <p>The UI element updating this property should send an event of\n     * {@link AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED}\n     * or {@link AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} if its\n     * accessibility-focused state changes.\n     * @param focused True if the node is accessibility focused.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED" ]
  }, {
    "name" : "public boolean isSelected()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is selected.\n     *\n     * @return True if the node is selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelected(boolean selected)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is selected.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param selected True if the node is selected.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isClickable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is clickable.\n     *\n     * @return True if the node is clickable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClickable(boolean clickable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is clickable.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param clickable True if the node is clickable.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isLongClickable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is long clickable.\n     *\n     * @return True if the node is long clickable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLongClickable(boolean longClickable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is long clickable.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param longClickable True if the node is long clickable.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is enabled.\n     *\n     * @return True if the node is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is enabled.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param enabled True if the node is enabled.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isPassword()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is a password.\n     *\n     * @return True if the node is a password.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPassword(boolean password)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is a password.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param password True if the node is a password.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isScrollable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node is scrollable.\n     *\n     * @return True if the node is scrollable, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollable(boolean scrollable)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the node is scrollable.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param scrollable True if the node is scrollable, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isGranularScrollingSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node supports granular scrolling.\n     *\n     * @return True if all scroll actions that could support\n     * {@link #ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT} have done so, false otherwise.\n     ",
    "links" : [ "#ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT" ]
  }, {
    "name" : "public void setGranularScrollingSupported(boolean granularScrollingSupported)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the node supports granular scrolling. This should be set to true if all scroll\n     * actions which could support {@link #ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT} have done so.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param granularScrollingSupported True if the node supports granular scrolling, false\n     *                                  otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT" ]
  }, {
    "name" : "public boolean isTextSelectable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node has selectable text.\n     *\n     * <p>\n     *     Services should use {@link #ACTION_SET_SELECTION} for selection. Editable text nodes must\n     *     also be selectable. But not all UIs will populate this field, so services should consider\n     *     'isTextSelectable | isEditable' to ensure they don't miss nodes with selectable text.\n     * </p>\n     *\n     * @see #isEditable\n     * @return True if the node has selectable text.\n     ",
    "links" : [ "#ACTION_SET_SELECTION" ]
  }, {
    "name" : "public void setTextSelectable(boolean selectableText)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the node has selectable text.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param selectableText True if the node has selectable text, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean hasRequestInitialAccessibilityFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the node has {@link #setRequestInitialAccessibilityFocus}.\n     *\n     * @return True if the node has requested initial accessibility focus.\n     ",
    "links" : [ "#setRequestInitialAccessibilityFocus" ]
  }, {
    "name" : "public void setRequestInitialAccessibilityFocus(boolean requestInitialAccessibilityFocus)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node has requested initial accessibility focus.\n     *\n     * <p>\n     * If the node {@link #hasRequestInitialAccessibilityFocus}, this node would be one of\n     * candidates to be accessibility focused when the window appears.\n     * </p>\n     *\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param requestInitialAccessibilityFocus True if the node requests to receive initial\n     *                                         accessibility focus.\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#hasRequestInitialAccessibilityFocus" ]
  }, {
    "name" : "public boolean isEditable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node is editable.\n     *\n     * @return True if the node is editable, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEditable(boolean editable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is editable.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param editable True if the node is editable.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isAccessibilityDataSensitive()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node's accessibility data is considered sensitive.\n     *\n     * @return True if the node's data is considered sensitive, false otherwise.\n     * @see View#isAccessibilityDataSensitive()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityDataSensitive(boolean accessibilityDataSensitive)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node's accessibility data is considered sensitive.\n     *\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an {@link AccessibilityService}.\n     * This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param accessibilityDataSensitive True if the node's accessibility data is considered\n     *                                   sensitive.\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @see View#setAccessibilityDataSensitive\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setPaneTitle(@Nullable CharSequence paneTitle)",
    "returnType" : "void",
    "comment" : "\n     * If this node represents a visually distinct region of the screen that may update separately\n     * from the rest of the window, it is considered a pane. Set the pane title to indicate that\n     * the node is a pane, and to provide a title for it.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     * @param paneTitle The title of the pane represented by this node.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CharSequence getPaneTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the title of the pane represented by this node.\n     *\n     * @return The title of the pane represented by this node, or {@code null} if this node does\n     *         not represent a pane.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDrawingOrder()",
    "returnType" : "int",
    "comment" : "\n     * Get the drawing order of the view corresponding it this node.\n     * <p>\n     * Drawing order is determined only within the node's parent, so this index is only relative\n     * to its siblings.\n     * <p>\n     * In some cases, the drawing order is essentially simultaneous, so it is possible for two\n     * siblings to return the same value. It is also possible that values will be skipped.\n     *\n     * @return The drawing position of the view corresponding to this node relative to its siblings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDrawingOrder(int drawingOrderInParent)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawing order of the view corresponding it this node.\n     *\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     * @param drawingOrderInParent\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CollectionInfo getCollectionInfo()",
    "returnType" : "CollectionInfo",
    "comment" : "\n     * Gets the collection info if the node is a collection. A collection\n     * child is always a collection item.\n     *\n     * @return The collection info.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCollectionInfo(CollectionInfo collectionInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sets the collection info if the node is a collection. A collection\n     * child is always a collection item.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param collectionInfo The collection info.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CollectionItemInfo getCollectionItemInfo()",
    "returnType" : "CollectionItemInfo",
    "comment" : "\n     * Gets the collection item info if the node is a collection item. A collection\n     * item is always a child of a collection.\n     *\n     * @return The collection item info.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCollectionItemInfo(CollectionItemInfo collectionItemInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sets the collection item info if the node is a collection item. A collection\n     * item is always a child of a collection.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public RangeInfo getRangeInfo()",
    "returnType" : "RangeInfo",
    "comment" : "\n     * Gets the range info if this node is a range.\n     *\n     * @return The range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRangeInfo(RangeInfo rangeInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sets the range info if this node is a range.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param rangeInfo The range info.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public ExtraRenderingInfo getExtraRenderingInfo()",
    "returnType" : "ExtraRenderingInfo",
    "comment" : "\n     * Gets the {@link ExtraRenderingInfo extra rendering info} if the node is meant to be\n     * refreshed with extra data to examine rendering related accessibility issues.\n     *\n     * @return The {@link ExtraRenderingInfo extra rendering info}.\n     *\n     * @see #EXTRA_DATA_RENDERING_INFO_KEY\n     * @see #refreshWithExtraData(String, Bundle)\n     ",
    "links" : [ "ExtraRenderingInfo" ]
  }, {
    "name" : "public void setExtraRenderingInfo(@NonNull ExtraRenderingInfo extraRenderingInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sets the extra rendering info, <code>extraRenderingInfo<code/>, if the node is meant to be\n     * refreshed with extra data.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param extraRenderingInfo The {@link ExtraRenderingInfo extra rendering info}.\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "ExtraRenderingInfo" ]
  }, {
    "name" : "public boolean isContentInvalid()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the content of this node is invalid. For example,\n     * a date is not well-formed.\n     *\n     * @return If the node content is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentInvalid(boolean contentInvalid)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the content of this node is invalid. For example,\n     * a date is not well-formed.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param contentInvalid If the node content is invalid.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isContextClickable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this node is context clickable.\n     *\n     * @return True if the node is context clickable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContextClickable(boolean contextClickable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this node is context clickable.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}. This class is made immutable\n     * before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param contextClickable True if the node is context clickable.\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public int getLiveRegion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the node's live region mode.\n     * <p>\n     * A live region is a node that contains information that is important for\n     * the user and when it changes the user should be notified. For example,\n     * a Snackbar that displays a confirmation notification should be marked\n     * as a live region with mode\n     * {@link View#ACCESSIBILITY_LIVE_REGION_POLITE}.\n     * <p>\n     * It is the responsibility of the accessibility service to monitor\n     * {@link AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events indicating\n     * changes to live region nodes and their children.\n     *\n     * @return The live region mode, or\n     *         {@link View#ACCESSIBILITY_LIVE_REGION_NONE} if the view is not a\n     *         live region.\n     * @see android.view.View#getAccessibilityLiveRegion()\n     ",
    "links" : [ "android.view.SurfaceView#ACCESSIBILITY_LIVE_REGION_NONE", "android.view.SurfaceView#ACCESSIBILITY_LIVE_REGION_POLITE", "android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED" ]
  }, {
    "name" : "public void setLiveRegion(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the node's live region mode.\n     * <p>\n     * <strong>Note:</strong> Cannot be called from an\n     * {@link android.accessibilityservice.AccessibilityService}. This class is\n     * made immutable before being delivered to an AccessibilityService.\n     *\n     * @param mode The live region mode, or\n     *        {@link View#ACCESSIBILITY_LIVE_REGION_NONE} if the view is not a\n     *        live region.\n     * @see android.view.View#setAccessibilityLiveRegion(int)\n     ",
    "links" : [ "android.view.SurfaceView#ACCESSIBILITY_LIVE_REGION_NONE", "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isMultiLine()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node is a multi line editable text.\n     *\n     * @return True if the node is multi line.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMultiLine(boolean multiLine)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the node is a multi line editable text.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param multiLine True if the node is multi line.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean canOpenPopup()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if this node opens a popup or a dialog.\n     *\n     * @return If the the node opens a popup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCanOpenPopup(boolean opensPopup)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this node opens a popup or a dialog.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param opensPopup If the the node opens a popup.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isDismissable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the node can be dismissed.\n     *\n     * @return If the node can be dismissed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDismissable(boolean dismissable)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the node can be dismissed.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param dismissable If the node can be dismissed.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isImportantForAccessibility()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the node originates from a view considered important for accessibility.\n     *\n     * @return {@code true} if the node originates from a view considered important for\n     *         accessibility, {@code false} otherwise\n     *\n     * @see View#isImportantForAccessibility()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImportantForAccessibility(boolean important)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node is considered important for accessibility.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param important {@code true} if the node is considered important for accessibility,\n     *                  {@code false} otherwise\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isScreenReaderFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the node is explicitly marked as a focusable unit by a screen reader. Note\n     * that {@code false} indicates that it is not explicitly marked, not that the node is not\n     * a focusable unit. Screen readers should generally use other signals, such as\n     * {@link #isFocusable()}, or the presence of text in a node, to determine what should receive\n     * focus.\n     *\n     * @return {@code true} if the node is specifically marked as a focusable unit for screen\n     *         readers, {@code false} otherwise.\n     *\n     * @see View#isScreenReaderFocusable()\n     ",
    "links" : [ "#isFocusable()" ]
  }, {
    "name" : "public void setScreenReaderFocusable(boolean screenReaderFocusable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node should be considered a focusable unit by a screen reader.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     * <p>This can be used to\n     * <a href=\"{@docRoot}guide/topics/ui/accessibility/principles#content-groups\">group related\n     * content.</a>\n     * </p>\n     *\n     * @param screenReaderFocusable {@code true} if the node is a focusable unit for screen readers,\n     *                              {@code false} otherwise.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isShowingHintText()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the node's text represents a hint for the user to enter text. It should only\n     * be {@code true} if the node has editable text.\n     *\n     * @return {@code true} if the text in the node represents a hint to the user, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShowingHintText(boolean showingHintText)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node's text represents a hint for the user to enter text. It should only\n     * be {@code true} if the node has editable text.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param showingHintText {@code true} if the text in the node represents a hint to the user,\n     * {@code false} otherwise.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isHeading()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether node represents a heading.\n     * <p><strong>Note:</strong> Returns {@code true} if either {@link #setHeading(boolean)}\n     * marks this node as a heading or if the node has a {@link CollectionItemInfo} that marks\n     * it as such, to accomodate apps that use the now-deprecated API.</p>\n     *\n     * @return {@code true} if the node is a heading, {@code false} otherwise.\n     ",
    "links" : [ "CollectionItemInfo", "#setHeading(boolean)" ]
  }, {
    "name" : "public void setHeading(boolean isHeading)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node represents a heading.\n     *\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param isHeading {@code true} if the node is a heading, {@code false} otherwise.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isTextEntryKey()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether node represents a text entry key that is part of a keyboard or keypad.\n     *\n     * @return {@code true} if the node is a text entry key., {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextEntryKey(boolean isTextEntryKey)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the node represents a text entry key that is part of a keyboard or keypad.\n     *\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param isTextEntryKey {@code true} if the node is a text entry key, {@code false} otherwise.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CharSequence getPackageName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the package this node comes from.\n     *\n     * @return The package name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPackageName(CharSequence packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the package this node comes from.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param packageName The package name.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CharSequence getClassName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the class this node comes from.\n     *\n     * @return The class name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClassName(CharSequence className)",
    "returnType" : "void",
    "comment" : "\n     * Sets the class this node comes from.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param className The class name.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the text of this node.\n     * <p>\n     *   <strong>Note:</strong> If the text contains {@link ClickableSpan}s or {@link URLSpan}s,\n     *   these spans will have been replaced with ones whose {@link ClickableSpan#onClick(View)}\n     *   can be called from an {@link AccessibilityService}. When called from a service, the\n     *   {@link View} argument is ignored and the corresponding span will be found on the view that\n     *   this {@code AccessibilityNodeInfo} represents and called with that view as its argument.\n     *   <p>\n     *   This treatment of {@link ClickableSpan}s means that the text returned from this method may\n     *   different slightly one passed to {@link #setText(CharSequence)}, although they will be\n     *   equivalent according to {@link TextUtils#equals(CharSequence, CharSequence)}. The\n     *   {@link ClickableSpan#onClick(View)} of any spans, however, will generally not work outside\n     *   of an accessibility service.\n     * </p>\n     *\n     * @return The text.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#setText(CharSequence)", "android.view.SurfaceView", "android.text.TextUtils#equals(CharSequence", "android.text.style.AccessibilityClickableSpan", "android.text.style.AccessibilityURLSpan", "android.text.style.AccessibilityClickableSpan#onClick(View)" ]
  }, {
    "name" : "public CharSequence getOriginalText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the text passed to setText before any changes to the spans.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text of this node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param text The text.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "private CharSequence replaceClickableSpan(CharSequence text)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Replaces any ClickableSpan in the given {@code text} with placeholders.\n     *\n     * @param text The text.\n     *\n     * @return The spannable with ClickableSpan replacement.\n     ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence replaceReplacementSpan(CharSequence text)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Replaces any ReplacementSpan in the given {@code text} if the object has content description.\n     *\n     * @param text The text.\n     *\n     * @return The spannable with ReplacementSpan replacement.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getHintText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the hint text of this node. Only applies to nodes where text can be entered.\n     *\n     * @return The hint text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHintText(CharSequence hintText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hint text of this node. Only applies to nodes where text can be entered.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param hintText The hint text for this mode.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setError(CharSequence error)",
    "returnType" : "void",
    "comment" : "\n     * Sets the error text of this node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param error The error text.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CharSequence getError()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the error text of this node.\n     *\n     * @return The error text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getStateDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the state description of this node.\n     *\n     * @return the state description\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the content description of this node.\n     *\n     * @return The content description.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStateDescription(@Nullable CharSequence stateDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the state description of this node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param stateDescription the state description of this node.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setContentDescription(CharSequence contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content description of this node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param contentDescription The content description.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public CharSequence getTooltipText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the tooltip text of this node.\n     *\n     * @return The tooltip text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTooltipText(@Nullable CharSequence tooltipText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the tooltip text of this node.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param tooltipText The tooltip text.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public void setLabelFor(View labeled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view for which the view represented by this info serves as a\n     * label for accessibility purposes.\n     *\n     * @param labeled The view for which this info serves as a label.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLabelFor(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view for which the view represented by this info serves as a\n     * label for accessibility purposes. If <code>virtualDescendantId</code>\n     * is {@link View#NO_ID} the root is set as the labeled.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report themselves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param root The root whose virtual descendant serves as a label.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo getLabelFor()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the node info for which the view represented by this info serves as\n     * a label for accessibility purposes.\n     *\n     * @return The labeled info.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLabeledBy(View label)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view which serves as the label of the view represented by\n     * this info for accessibility purposes.\n     *\n     * @param label The view that labels this node's source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLabeledBy(View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view which serves as the label of the view represented by\n     * this info for accessibility purposes. If <code>virtualDescendantId</code>\n     * is {@link View#NO_ID} the root is set as the label.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report themselves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param root The root whose virtual descendant labels this node's source.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#NO_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo getLabeledBy()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the node info which serves as the label of the view represented by\n     * this info for accessibility purposes.\n     *\n     * @return The label.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setViewIdResourceName(String viewIdResName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fully qualified resource name of the source view's id.\n     *\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param viewIdResName The id resource name.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public String getViewIdResourceName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the fully qualified resource name of the source view's id.\n     *\n     * <p>\n     *   <strong>Note:</strong> The primary usage of this API is for UI test automation\n     *   and in order to report the source view id of an {@link AccessibilityNodeInfo} the\n     *   client has to set the {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}\n     *   flag when configuring the {@link android.accessibilityservice.AccessibilityService}.\n     * </p>\n\n     * @return The id resource name.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityService", "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS" ]
  }, {
    "name" : "public int getTextSelectionStart()",
    "returnType" : "int",
    "comment" : "\n     * Gets the text selection start or the cursor position.\n     * <p>\n     * If no text is selected, both this method and\n     * {@link AccessibilityNodeInfo#getTextSelectionEnd()} return the same value:\n     * the current location of the cursor.\n     * </p>\n     *\n     * @return The text selection start, the cursor location if there is no selection, or -1 if\n     *         there is no text selection and no cursor.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#getTextSelectionEnd()" ]
  }, {
    "name" : "public int getTextSelectionEnd()",
    "returnType" : "int",
    "comment" : "\n     * Gets the text selection end if text is selected.\n     * <p>\n     * If no text is selected, both this method and\n     * {@link AccessibilityNodeInfo#getTextSelectionStart()} return the same value:\n     * the current location of the cursor.\n     * </p>\n     *\n     * @return The text selection end, the cursor location if there is no selection, or -1 if\n     *         there is no text selection and no cursor.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#getTextSelectionStart()" ]
  }, {
    "name" : "public void setTextSelection(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text selection start and end.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an AccessibilityService.\n     * </p>\n     *\n     * @param start The text selection start.\n     * @param end The text selection end.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the input type of the source as defined by {@link InputType}.\n     *\n     * @return The input type.\n     ",
    "links" : [ "android.text.InputType" ]
  }, {
    "name" : "public void setInputType(int inputType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the input type of the source as defined by {@link InputType}.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an\n     *   AccessibilityService.\n     * </p>\n     *\n     * @param inputType The input type.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.text.InputType" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets an optional bundle with extra data. The bundle\n     * is lazily created and never <code>null</code>.\n     * <p>\n     * <strong>Note:</strong> It is recommended to use the package\n     * name of your application as a prefix for the keys to avoid\n     * collisions which may confuse an accessibility service if the\n     * same key has different meaning when emitted from different\n     * applications.\n     * </p>\n     *\n     * @return The bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasExtras()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a node has an extras bundle\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public TouchDelegateInfo getTouchDelegateInfo()",
    "returnType" : "TouchDelegateInfo",
    "comment" : "\n     * Get the {@link TouchDelegateInfo} for touch delegate behavior with the represented view.\n     * It is possible for the same node to be pointed to by several regions. Use\n     * {@link TouchDelegateInfo#getRegionAt(int)} to get touch delegate target {@link Region}, and\n     * {@link TouchDelegateInfo#getTargetForRegion(Region)} for {@link AccessibilityNodeInfo} from\n     * the given region.\n     *\n     * @return {@link TouchDelegateInfo} or {@code null} if there are no touch delegates.\n     ",
    "links" : [ "TouchDelegateInfo", "#getTargetForRegion(Region)", "android.view.accessibility.AccessibilityNodeInfo", "android.graphics.Region", "#getRegionAt(int)" ]
  }, {
    "name" : "public void setTouchDelegateInfo(@NonNull TouchDelegateInfo delegatedInfo)",
    "returnType" : "void",
    "comment" : "\n     * Set touch delegate info if the represented view has a {@link TouchDelegate}.\n     * <p>\n     *   <strong>Note:</strong> Cannot be called from an\n     *   {@link android.accessibilityservice.AccessibilityService}.\n     *   This class is made immutable before being delivered to an\n     *   AccessibilityService.\n     * </p>\n     *\n     * @param delegatedInfo {@link TouchDelegateInfo} returned from\n     *         {@link TouchDelegate#getTouchDelegateInfo()}.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "TouchDelegateInfo", "android.accessibilityservice.AccessibilityService", "android.view.TouchDelegate", "android.view.TouchDelegate#getTouchDelegateInfo()" ]
  }, {
    "name" : "private boolean getBooleanProperty(int property)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the value of a boolean property.\n     *\n     * @param property The property.\n     * @return The value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setBooleanProperty(int property, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a boolean property.\n     *\n     * @param property The property.\n     * @param value The value.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectionId(int connectionId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the unique id of the IAccessibilityServiceConnection over which\n     * this instance can send requests to the system.\n     *\n     * @param connectionId The connection id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionId()",
    "returnType" : "int",
    "comment" : "\n     * Get the connection ID.\n     *\n     * @return The connection id\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceNodeId(long sourceId, int windowId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the id of the source node.\n     *\n     * @param sourceId The id.\n     * @param windowId The window id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSourceNodeId()",
    "returnType" : "long",
    "comment" : "\n     * Gets the id of the source node.\n     *\n     * @return The id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUniqueId(@Nullable String uniqueId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the unique id to act as a key to identify the node. If the node instance is replaced\n     * after refreshing the layout, calling this API to assign the same unique id to the new\n     * alike node can help accessibility service to identify it.\n     *\n     * @param uniqueId The unique id that is associated with a visible node on the screen\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUniqueId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the unique id of the node.\n     *\n     * @return The unique id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContainerTitle(@Nullable CharSequence containerTitle)",
    "returnType" : "void",
    "comment" : "\n     * Sets the container title for app-developer-defined container which can be any type of\n     * ViewGroup or layout.\n     * Container title will be used to group together related controls, similar to HTML fieldset.\n     * Or container title may identify a large piece of the UI that is visibly grouped together,\n     * such as a toolbar or a card, etc.\n     * <p>\n     * Container title helps to assist in navigation across containers and other groups.\n     * For example, a screen reader may use this to determine where to put accessibility focus.\n     * </p>\n     * <p>\n     * Container title is different from pane title{@link #setPaneTitle} which indicates that the\n     * node represents a window or activity.\n     * </p>\n     *\n     * <p>\n     *  Example: An app can set container titles on several non-modal menus, containing TextViews\n     *  or ImageButtons that have content descriptions, text, etc. Screen readers can quickly\n     *  switch accessibility focus among menus instead of child views.  Other accessibility-services\n     *  can easily find the menu.\n     * </p>\n     *\n     * @param containerTitle The container title that is associated with a ViewGroup/Layout on the\n     *                       screen.\n     ",
    "links" : [ "#setPaneTitle" ]
  }, {
    "name" : "public CharSequence getContainerTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the container title.\n     *\n     * @see #setContainerTitle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLeashedParent(@Nullable IBinder token, int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the token and node id of the leashed parent.\n     *\n     * @param token The token.\n     * @param viewId The accessibility view id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getLeashedParent()",
    "returnType" : "IBinder",
    "comment" : "\n     * Gets the token of the leashed parent.\n     *\n     * @return The token.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLeashedParentNodeId()",
    "returnType" : "long",
    "comment" : "\n     * Gets the node id of the leashed parent.\n     *\n     * @return The accessibility node id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQueryFromAppProcessEnabled(@NonNull View view, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Connects this node to the View's root so that operations on this node can query the entire\n     * {@link AccessibilityNodeInfo} tree and perform accessibility actions on nodes.\n     *\n     * <p>\n     * Testing or debugging tools should create this {@link AccessibilityNodeInfo} node using\n     * {@link View#createAccessibilityNodeInfo()} or {@link AccessibilityNodeProvider} and call this\n     * method, then navigate and interact with the node tree by calling methods on the node.\n     * Calling this method more than once on the same node is a no-op. After calling this method,\n     * all nodes linked to this node (children, ancestors, etc.) are also queryable.\n     * </p>\n     *\n     * <p>\n     * Here \"query\" refers to the following node operations:\n     * <li>check properties of this node (example: {@link #isScrollable()})</li>\n     * <li>find and query children (example: {@link #getChild(int)})</li>\n     * <li>find and query the parent (example: {@link #getParent()})</li>\n     * <li>find focus (examples: {@link #findFocus(int)}, {@link #focusSearch(int)})</li>\n     * <li>find and query other nodes (example: {@link #findAccessibilityNodeInfosByText(String)},\n     * {@link #findAccessibilityNodeInfosByViewId(String)})</li>\n     * <li>perform actions (example: {@link #performAction(int)})</li>\n     * </p>\n     *\n     * <p>\n     * This is intended for short-lived inspections from testing or debugging tools in the app\n     * process, as operations on this node tree will only succeed as long as the associated\n     * view hierarchy remains attached to a window. {@link AccessibilityNodeInfo} objects can\n     * quickly become out of sync with their corresponding {@link View} objects; if you wish to\n     * inspect a changed or different view hierarchy then create a new node from any view in that\n     * hierarchy and call this method on that new node, instead of disabling & re-enabling the\n     * connection on the previous node.\n     * </p>\n     *\n     * @param view The view that generated this node, or any view in the same view-root hierarchy.\n     * @param enabled Whether to enable (true) or disable (false) querying from the app process.\n     * @throws IllegalStateException If called from an {@link AccessibilityService}, or if provided\n     *                               a {@link View} that is not attached to a window.\n     ",
    "links" : [ "#performAction(int)", "android.view.accessibility.AccessibilityNodeInfo", "#findAccessibilityNodeInfosByViewId(String)", "android.view.SurfaceView", "android.view.accessibility.AccessibilityNodeProvider", "#focusSearch(int)", "#findAccessibilityNodeInfosByText(String)", "#isScrollable()", "#getParent()", "#findFocus(int)", "android.accessibilityservice.AccessibilityService", "android.view.SurfaceView#createAccessibilityNodeInfo()", "#getChild(int)" ]
  }, {
    "name" : "public void setSealed(boolean sealed)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this instance is sealed.\n     *\n     * @param sealed Whether is sealed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSealed()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if this instance is sealed.\n     *\n     * @return Whether is sealed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean usingDirectConnection(int connectionId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void enforceSealed()",
    "returnType" : "void",
    "comment" : "\n     * Enforces that this instance is sealed, unless using a {@link DirectAccessibilityConnection}\n     * which allows queries while the node is not sealed.\n     *\n     * @throws IllegalStateException If this instance is not sealed.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.DirectAccessibilityConnection" ]
  }, {
    "name" : "private void enforceValidFocusDirection(int direction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceValidFocusType(int focusType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void enforceNotSealed()",
    "returnType" : "void",
    "comment" : "\n     * Enforces that this instance is not sealed.\n     *\n     * @throws IllegalStateException If this instance is sealed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AccessibilityNodeInfo obtain(View source)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Returns a cached instance if such is available otherwise a new one\n     * and sets the source.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityNodeInfo(View)} instead.\n     * @param source The source view.\n     * @return An instance.\n     *\n     * @see #setSource(View)\n     ",
    "links" : [ "#AccessibilityNodeInfo(View)" ]
  }, {
    "name" : "public static AccessibilityNodeInfo obtain(View root, int virtualDescendantId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Returns a cached instance if such is available otherwise a new one\n     * and sets the source.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityNodeInfo(View, int)} instead.\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual descendant.\n     * @return An instance.\n     *\n     * @see #setSource(View, int)\n     ",
    "links" : [ "#AccessibilityNodeInfo(View" ]
  }, {
    "name" : "public static AccessibilityNodeInfo obtain()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Instantiates a new AccessibilityNodeInfo.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityNodeInfo()} instead.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityNodeInfo()" ]
  }, {
    "name" : "public static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Instantiates a new AccessibilityNodeInfo initialized from the given\n     * <code>info</code>.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityNodeInfo(AccessibilityNodeInfo)} instead.\n     * @param info The other info.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityNodeInfo(AccessibilityNodeInfo)" ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Would previously return an instance back to be reused.\n     *\n     * @deprecated Object pooling has been discontinued. Calling this function now will have\n     * no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     *   <strong>Note:</strong> After the instance is written to a parcel it\n     *      is recycled. You must not touch the object after calling this function.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelNoRecycle(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void init(AccessibilityNodeInfo other)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this instance from another one.\n     *\n     * @param other The other instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initCopyInfos(AccessibilityNodeInfo other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initFromParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new instance from a {@link Parcel}.\n     *\n     * @param parcel A parcel containing the state of a {@link AccessibilityNodeInfo}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.os.Parcel" ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the state of this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDefaultStandardAction(AccessibilityAction action)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AccessibilityAction getActionSingleton(int actionId)",
    "returnType" : "AccessibilityAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AccessibilityAction getActionSingletonBySerializationFlag(long flag)",
    "returnType" : "AccessibilityAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addStandardActions(long serializationIdMask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getActionSymbolicName(int action)",
    "returnType" : "String",
    "comment" : "\n     * Gets the human readable action symbolic name.\n     *\n     * @param action The action.\n     * @return The symbolic name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getMovementGranularitySymbolicName(int granularity)",
    "returnType" : "String",
    "comment" : "\n     * Gets the human readable movement granularity symbolic name.\n     *\n     * @param granularity The granularity.\n     * @return The symbolic name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean canPerformRequestOverConnection(int connectionId, int windowId, long accessibilityNodeId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, int windowId, long accessibilityId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, int windowId, long accessibilityId, @PrefetchingStrategy int prefetchingStrategy)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, IBinder leashToken, long accessibilityId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, IBinder leashToken, long accessibilityId, @PrefetchingStrategy int prefetchingStrategy)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String idToString(long accessibilityId)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static String idItemToString(int item)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getAccessibilityViewId(long accessibilityNodeId)", "public static int getVirtualDescendantId(long accessibilityNodeId)", "public static long makeNodeId(int accessibilityViewId, int virtualDescendantId)", "public void setSource(View source)", "public void setSource(View root, int virtualDescendantId)", "public AccessibilityNodeInfo findFocus(int focus)", "public AccessibilityNodeInfo focusSearch(int direction)", "public int getWindowId()", "public boolean refresh(Bundle arguments, boolean bypassCache)", "public boolean refresh()", "public boolean refreshWithExtraData(String extraDataKey, Bundle args)", "public LongArray getChildNodeIds()", "public long getChildId(int index)", "public int getChildCount()", "public AccessibilityNodeInfo getChild(int index)", "public AccessibilityNodeInfo getChild(int index, @PrefetchingStrategy int prefetchingStrategy)", "public void addChild(View child)", "public void addChild(@NonNull IBinder token)", "public void addChildUnchecked(View child)", "public boolean removeChild(View child)", "public boolean removeChild(IBinder token)", "public void addChild(View root, int virtualDescendantId)", "private void addChildInternal(View root, int virtualDescendantId, boolean checked)", "public boolean removeChild(View root, int virtualDescendantId)", "public List<AccessibilityAction> getActionList()", "public int getActions()", "public void addAction(AccessibilityAction action)", "private void addActionUnchecked(AccessibilityAction action)", "public void addAction(int action)", "public void removeAction(int action)", "public boolean removeAction(AccessibilityAction action)", "public void removeAllActions()", "public AccessibilityNodeInfo getTraversalBefore()", "public void setTraversalBefore(View view)", "public void setTraversalBefore(View root, int virtualDescendantId)", "public AccessibilityNodeInfo getTraversalAfter()", "public void setTraversalAfter(View view)", "public void setTraversalAfter(View root, int virtualDescendantId)", "public List<String> getAvailableExtraData()", "public void setAvailableExtraData(List<String> extraDataKeys)", "public void setMaxTextLength(int max)", "public int getMaxTextLength()", "public void setMovementGranularities(int granularities)", "public int getMovementGranularities()", "public void setMinDurationBetweenContentChanges(@NonNull Duration duration)", "public Duration getMinDurationBetweenContentChanges()", "public boolean performAction(int action)", "public boolean performAction(int action, Bundle arguments)", "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text)", "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(@NonNull String viewId)", "public AccessibilityWindowInfo getWindow()", "public AccessibilityNodeInfo getParent()", "public AccessibilityNodeInfo getParent(@PrefetchingStrategy int prefetchingStrategy)", "public long getParentNodeId()", "public void setParent(View parent)", "public void setParent(View root, int virtualDescendantId)", "public void getBoundsInParent(Rect outBounds)", "public void setBoundsInParent(Rect bounds)", "public void getBoundsInScreen(Rect outBounds)", "public Rect getBoundsInScreen()", "public void setBoundsInScreen(Rect bounds)", "public void getBoundsInWindow(@NonNull Rect outBounds)", "public Rect getBoundsInWindow()", "public void setBoundsInWindow(@NonNull Rect bounds)", "public boolean isCheckable()", "public void setCheckable(boolean checkable)", "public boolean isChecked()", "public void setChecked(boolean checked)", "public boolean isFocusable()", "public void setFocusable(boolean focusable)", "public boolean isFocused()", "public void setFocused(boolean focused)", "public boolean isVisibleToUser()", "public void setVisibleToUser(boolean visibleToUser)", "public boolean isAccessibilityFocused()", "public void setAccessibilityFocused(boolean focused)", "public boolean isSelected()", "public void setSelected(boolean selected)", "public boolean isClickable()", "public void setClickable(boolean clickable)", "public boolean isLongClickable()", "public void setLongClickable(boolean longClickable)", "public boolean isEnabled()", "public void setEnabled(boolean enabled)", "public boolean isPassword()", "public void setPassword(boolean password)", "public boolean isScrollable()", "public void setScrollable(boolean scrollable)", "public boolean isGranularScrollingSupported()", "public void setGranularScrollingSupported(boolean granularScrollingSupported)", "public boolean isTextSelectable()", "public void setTextSelectable(boolean selectableText)", "public boolean hasRequestInitialAccessibilityFocus()", "public void setRequestInitialAccessibilityFocus(boolean requestInitialAccessibilityFocus)", "public boolean isEditable()", "public void setEditable(boolean editable)", "public boolean isAccessibilityDataSensitive()", "public void setAccessibilityDataSensitive(boolean accessibilityDataSensitive)", "public void setPaneTitle(@Nullable CharSequence paneTitle)", "public CharSequence getPaneTitle()", "public int getDrawingOrder()", "public void setDrawingOrder(int drawingOrderInParent)", "public CollectionInfo getCollectionInfo()", "public void setCollectionInfo(CollectionInfo collectionInfo)", "public CollectionItemInfo getCollectionItemInfo()", "public void setCollectionItemInfo(CollectionItemInfo collectionItemInfo)", "public RangeInfo getRangeInfo()", "public void setRangeInfo(RangeInfo rangeInfo)", "public ExtraRenderingInfo getExtraRenderingInfo()", "public void setExtraRenderingInfo(@NonNull ExtraRenderingInfo extraRenderingInfo)", "public boolean isContentInvalid()", "public void setContentInvalid(boolean contentInvalid)", "public boolean isContextClickable()", "public void setContextClickable(boolean contextClickable)", "public int getLiveRegion()", "public void setLiveRegion(int mode)", "public boolean isMultiLine()", "public void setMultiLine(boolean multiLine)", "public boolean canOpenPopup()", "public void setCanOpenPopup(boolean opensPopup)", "public boolean isDismissable()", "public void setDismissable(boolean dismissable)", "public boolean isImportantForAccessibility()", "public void setImportantForAccessibility(boolean important)", "public boolean isScreenReaderFocusable()", "public void setScreenReaderFocusable(boolean screenReaderFocusable)", "public boolean isShowingHintText()", "public void setShowingHintText(boolean showingHintText)", "public boolean isHeading()", "public void setHeading(boolean isHeading)", "public boolean isTextEntryKey()", "public void setTextEntryKey(boolean isTextEntryKey)", "public CharSequence getPackageName()", "public void setPackageName(CharSequence packageName)", "public CharSequence getClassName()", "public void setClassName(CharSequence className)", "public CharSequence getText()", "public CharSequence getOriginalText()", "public void setText(CharSequence text)", "private CharSequence replaceClickableSpan(CharSequence text)", "private CharSequence replaceReplacementSpan(CharSequence text)", "public CharSequence getHintText()", "public void setHintText(CharSequence hintText)", "public void setError(CharSequence error)", "public CharSequence getError()", "public CharSequence getStateDescription()", "public CharSequence getContentDescription()", "public void setStateDescription(@Nullable CharSequence stateDescription)", "public void setContentDescription(CharSequence contentDescription)", "public CharSequence getTooltipText()", "public void setTooltipText(@Nullable CharSequence tooltipText)", "public void setLabelFor(View labeled)", "public void setLabelFor(View root, int virtualDescendantId)", "public AccessibilityNodeInfo getLabelFor()", "public void setLabeledBy(View label)", "public void setLabeledBy(View root, int virtualDescendantId)", "public AccessibilityNodeInfo getLabeledBy()", "public void setViewIdResourceName(String viewIdResName)", "public String getViewIdResourceName()", "public int getTextSelectionStart()", "public int getTextSelectionEnd()", "public void setTextSelection(int start, int end)", "public int getInputType()", "public void setInputType(int inputType)", "public Bundle getExtras()", "public boolean hasExtras()", "public TouchDelegateInfo getTouchDelegateInfo()", "public void setTouchDelegateInfo(@NonNull TouchDelegateInfo delegatedInfo)", "private boolean getBooleanProperty(int property)", "private void setBooleanProperty(int property, boolean value)", "public void setConnectionId(int connectionId)", "public int getConnectionId()", "public int describeContents()", "public void setSourceNodeId(long sourceId, int windowId)", "public long getSourceNodeId()", "public void setUniqueId(@Nullable String uniqueId)", "public String getUniqueId()", "public void setContainerTitle(@Nullable CharSequence containerTitle)", "public CharSequence getContainerTitle()", "public void setLeashedParent(@Nullable IBinder token, int viewId)", "public IBinder getLeashedParent()", "public long getLeashedParentNodeId()", "public void setQueryFromAppProcessEnabled(@NonNull View view, boolean enabled)", "public void setSealed(boolean sealed)", "public boolean isSealed()", "private static boolean usingDirectConnection(int connectionId)", "protected void enforceSealed()", "private void enforceValidFocusDirection(int direction)", "private void enforceValidFocusType(int focusType)", "protected void enforceNotSealed()", "public static AccessibilityNodeInfo obtain(View source)", "public static AccessibilityNodeInfo obtain(View root, int virtualDescendantId)", "public static AccessibilityNodeInfo obtain()", "public static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info)", "public void recycle()", "public void writeToParcel(Parcel parcel, int flags)", "public void writeToParcelNoRecycle(Parcel parcel, int flags)", "private void init(AccessibilityNodeInfo other)", "private void initCopyInfos(AccessibilityNodeInfo other)", "private void initFromParcel(Parcel parcel)", "private void clear()", "private static boolean isDefaultStandardAction(AccessibilityAction action)", "private static AccessibilityAction getActionSingleton(int actionId)", "private static AccessibilityAction getActionSingletonBySerializationFlag(long flag)", "private void addStandardActions(long serializationIdMask)", "private static String getActionSymbolicName(int action)", "private static String getMovementGranularitySymbolicName(int granularity)", "private static boolean canPerformRequestOverConnection(int connectionId, int windowId, long accessibilityNodeId)", "public boolean equals(@Nullable Object object)", "public int hashCode()", "public String toString()", "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, int windowId, long accessibilityId)", "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, int windowId, long accessibilityId, @PrefetchingStrategy int prefetchingStrategy)", "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, IBinder leashToken, long accessibilityId)", "private static AccessibilityNodeInfo getNodeForAccessibilityId(int connectionId, IBinder leashToken, long accessibilityId, @PrefetchingStrategy int prefetchingStrategy)", "public static String idToString(long accessibilityId)", "private static String idItemToString(int item)" ],
  "variableNames" : [ "TAG", "DEBUG", "UNDEFINED_CONNECTION_ID", "UNDEFINED_SELECTION_INDEX", "UNDEFINED_ITEM_ID", "ROOT_ITEM_ID", "LEASHED_ITEM_ID", "UNDEFINED_NODE_ID", "ROOT_NODE_ID", "LEASHED_NODE_ID", "FLAG_PREFETCH_ANCESTORS", "FLAG_PREFETCH_SIBLINGS", "FLAG_PREFETCH_DESCENDANTS_HYBRID", "FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST", "FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST", "FLAG_PREFETCH_UNINTERRUPTIBLE", "FLAG_PREFETCH_MASK", "FLAG_PREFETCH_DESCENDANTS_MASK", "MAX_NUMBER_OF_PREFETCHED_NODES", "FLAG_SERVICE_REQUESTS_INCLUDE_NOT_IMPORTANT_VIEWS", "FLAG_SERVICE_REQUESTS_REPORT_VIEW_IDS", "FLAG_SERVICE_IS_ACCESSIBILITY_TOOL", "FLAG_REPORT_MASK", "ACTION_FOCUS", "ACTION_CLEAR_FOCUS", "ACTION_SELECT", "ACTION_CLEAR_SELECTION", "ACTION_CLICK", "ACTION_LONG_CLICK", "ACTION_ACCESSIBILITY_FOCUS", "ACTION_CLEAR_ACCESSIBILITY_FOCUS", "ACTION_NEXT_AT_MOVEMENT_GRANULARITY", "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY", "ACTION_NEXT_HTML_ELEMENT", "ACTION_PREVIOUS_HTML_ELEMENT", "ACTION_SCROLL_FORWARD", "ACTION_SCROLL_BACKWARD", "ACTION_COPY", "ACTION_PASTE", "ACTION_CUT", "ACTION_SET_SELECTION", "ACTION_EXPAND", "ACTION_COLLAPSE", "ACTION_DISMISS", "ACTION_SET_TEXT", "LAST_LEGACY_STANDARD_ACTION", "INVALID_ACTIONS_MASK", "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT", "ACTION_ARGUMENT_HTML_ELEMENT_STRING", "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN", "ACTION_ARGUMENT_SELECTION_START_INT", "ACTION_ARGUMENT_SELECTION_END_INT", "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE", "ACTION_ARGUMENT_ROW_INT", "ACTION_ARGUMENT_COLUMN_INT", "ACTION_ARGUMENT_PROGRESS_VALUE", "ACTION_ARGUMENT_MOVE_WINDOW_X", "ACTION_ARGUMENT_MOVE_WINDOW_Y", "ACTION_ARGUMENT_ACCESSIBLE_CLICKABLE_SPAN", "ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT", "ACTION_ARGUMENT_DIRECTION_INT", "ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT", "FOCUS_INPUT", "FOCUS_ACCESSIBILITY", "MOVEMENT_GRANULARITY_CHARACTER", "MOVEMENT_GRANULARITY_WORD", "MOVEMENT_GRANULARITY_LINE", "MOVEMENT_GRANULARITY_PARAGRAPH", "MOVEMENT_GRANULARITY_PAGE", "EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY", "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX", "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH", "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH", "EXTRA_DATA_RENDERING_INFO_KEY", "EXTRA_DATA_REQUESTED_KEY", "BOOLEAN_PROPERTY_CHECKABLE", "BOOLEAN_PROPERTY_CHECKED", "BOOLEAN_PROPERTY_FOCUSABLE", "BOOLEAN_PROPERTY_FOCUSED", "BOOLEAN_PROPERTY_SELECTED", "BOOLEAN_PROPERTY_CLICKABLE", "BOOLEAN_PROPERTY_LONG_CLICKABLE", "BOOLEAN_PROPERTY_ENABLED", "BOOLEAN_PROPERTY_PASSWORD", "BOOLEAN_PROPERTY_SCROLLABLE", "BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED", "BOOLEAN_PROPERTY_VISIBLE_TO_USER", "BOOLEAN_PROPERTY_EDITABLE", "BOOLEAN_PROPERTY_OPENS_POPUP", "BOOLEAN_PROPERTY_DISMISSABLE", "BOOLEAN_PROPERTY_MULTI_LINE", "BOOLEAN_PROPERTY_CONTENT_INVALID", "BOOLEAN_PROPERTY_CONTEXT_CLICKABLE", "BOOLEAN_PROPERTY_IMPORTANCE", "BOOLEAN_PROPERTY_SCREEN_READER_FOCUSABLE", "BOOLEAN_PROPERTY_IS_SHOWING_HINT", "BOOLEAN_PROPERTY_IS_HEADING", "BOOLEAN_PROPERTY_IS_TEXT_ENTRY_KEY", "BOOLEAN_PROPERTY_IS_TEXT_SELECTABLE", "BOOLEAN_PROPERTY_REQUEST_INITIAL_ACCESSIBILITY_FOCUS", "BOOLEAN_PROPERTY_ACCESSIBILITY_DATA_SENSITIVE", "BOOLEAN_PROPERTY_SUPPORTS_GRANULAR_SCROLLING", "VIRTUAL_DESCENDANT_ID_MASK", "VIRTUAL_DESCENDANT_ID_SHIFT", "DEFAULT", "mSealed", "mWindowId", "mSourceNodeId", "mParentNodeId", "mLabelForId", "mLabeledById", "mTraversalBefore", "mTraversalAfter", "mMinDurationBetweenContentChanges", "mBooleanProperties", "mBoundsInParent", "mBoundsInScreen", "mBoundsInWindow", "mDrawingOrderInParent", "mPackageName", "mClassName", "mOriginalText", "mText", "mHintText", "mError", "mPaneTitle", "mStateDescription", "mContentDescription", "mTooltipText", "mViewIdResourceName", "mUniqueId", "mContainerTitle", "mExtraDataKeys", "mChildNodeIds", "mActions", "mMaxTextLength", "mMovementGranularities", "mTextSelectionStart", "mTextSelectionEnd", "mInputType", "mLiveRegion", "mExtras", "mConnectionId", "mRangeInfo", "mCollectionInfo", "mCollectionItemInfo", "mTouchDelegateInfo", "mExtraRenderingInfo", "mLeashedChild", "mLeashedParent", "mLeashedParentNodeId", "CREATOR" ]
}