{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tuner/filter/SharedFilter.java",
  "packageName" : "android.media.tv.tuner.filter",
  "className" : "SharedFilter",
  "comment" : "\n * Tuner shared data filter.\n *\n * <p>This class is used to filter wanted data in a different process.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "STATUS_INACCESSIBLE",
    "type" : "int",
    "comment" : "\n     * The status of a shared filter that its data becomes inaccessible.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "SharedFilterCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAccessible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int nativeStartSharedFilter()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStopSharedFilter()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeFlushSharedFilter()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSharedRead(byte[] buffer, long offset, long size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSharedClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onFilterStatus(int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onFilterEvent(FilterEvent[] events)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCallback(SharedFilterCallback cb, Executor executor)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public SharedFilterCallback getCallback()",
    "returnType" : "SharedFilterCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int start()",
    "returnType" : "int",
    "comment" : "\n     * Starts filtering data.\n     *\n     * <p>Does nothing if the filter is already started.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int stop()",
    "returnType" : "int",
    "comment" : "\n     * Stops filtering data.\n     *\n     * <p>Does nothing if the filter is stopped or not started.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int flush()",
    "returnType" : "int",
    "comment" : "\n     * Flushes the shared filter.\n     *\n     * <p>The data which is already produced by filter but not consumed yet will\n     * be cleared.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(@NonNull byte[] buffer, @BytesLong long offset, @BytesLong long size)",
    "returnType" : "int",
    "comment" : "\n     * Copies filtered data from shared filter output to the given byte array.\n     *\n     * @param buffer the buffer to store the filtered data.\n     * @param offset the index of the first byte in {@code buffer} to write.\n     * @param size the maximum number of bytes to read.\n     * @return the number of bytes read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Stops filtering data and releases the shared filter instance.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native int nativeStartSharedFilter()", "private native int nativeStopSharedFilter()", "private native int nativeFlushSharedFilter()", "private native int nativeSharedRead(byte[] buffer, long offset, long size)", "private native int nativeSharedClose()", "private void onFilterStatus(int status)", "private void onFilterEvent(FilterEvent[] events)", "public void setCallback(SharedFilterCallback cb, Executor executor)", "public SharedFilterCallback getCallback()", "public int start()", "public int stop()", "public int flush()", "public int read(@NonNull byte[] buffer, @BytesLong long offset, @BytesLong long size)", "public void close()" ],
  "variableNames" : [ "STATUS_INACCESSIBLE", "TAG", "mNativeContext", "mCallback", "mExecutor", "mCallbackLock", "mIsClosed", "mIsAccessible", "mLock" ]
}