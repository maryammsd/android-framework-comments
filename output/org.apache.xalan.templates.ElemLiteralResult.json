{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemLiteralResult.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemLiteralResult",
  "comment" : "\n * Implement a Literal Result Element.\n * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTYSTRING",
    "type" : "String",
    "comment" : " The return value as Empty String. ",
    "links" : [ ]
  }, {
    "name" : "isLiteralResultAsStylesheet",
    "type" : "boolean",
    "comment" : "\n   * Tells if this element represents a root element\n   * that is also the stylesheet element.\n   * TODO: This should be a derived class.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_avts",
    "type" : "List",
    "comment" : "\n   * The created element node will have the attribute nodes\n   * that were present on the element node in the stylesheet tree,\n   * other than attributes with names in the XSLT namespace.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_xslAttr",
    "type" : "List",
    "comment" : " List of attributes with the XSLT namespace.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_namespace",
    "type" : "String",
    "comment" : "\n   * The namespace of the element to be created.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_localName",
    "type" : "String",
    "comment" : "\n   * The local name of the element to be created.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_rawName",
    "type" : "String",
    "comment" : "\n   * The raw name of the element to be created.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_ExtensionElementURIs",
    "type" : "StringVector",
    "comment" : "\n   * The \"extension-element-prefixes\" property, actually contains URIs.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_version",
    "type" : "String",
    "comment" : "\n   * The XSLT version as specified by this element.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_excludeResultPrefixes",
    "type" : "StringVector",
    "comment" : "\n   * The \"exclude-result-prefixes\" property.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setIsLiteralResultAsStylesheet(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * Set whether this element represents a root element\n   * that is also the stylesheet element.\n   *\n   *\n   * @param b boolean flag indicating whether this element\n   * represents a root element that is also the stylesheet element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIsLiteralResultAsStylesheet()",
    "returnType" : "boolean",
    "comment" : "\n   * Return whether this element represents a root element\n   * that is also the stylesheet element.\n   *\n   *\n   * @return boolean flag indicating whether this element\n   * represents a root element that is also the stylesheet element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addLiteralResultAttribute(AVT avt)",
    "returnType" : "void",
    "comment" : "\n   * Set a literal result attribute (AVTs only).\n   *\n   * @param avt literal result attribute to add (AVT only)\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addLiteralResultAttribute(String att)",
    "returnType" : "void",
    "comment" : "\n   * Set a literal result attribute (used for xsl attributes).\n   *\n   * @param att literal result attribute to add\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setXmlSpace(AVT avt)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xml:space\" attribute.\n   * A text node is preserved if an ancestor element of the text node\n   * has an xml:space attribute with a value of preserve, and\n   * no closer ancestor element has xml:space with a value of default.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Text\">section-Creating-Text in XSLT Specification</a>\n   *\n   * @param avt  Enumerated value, either Constants.ATTRVAL_PRESERVE \n   * or Constants.ATTRVAL_STRIP.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getLiteralResultAttributeNS(String namespaceURI, String localName)",
    "returnType" : "AVT",
    "comment" : "\n   * Get a literal result attribute by name.\n   *\n   * @param namespaceURI Namespace URI of attribute node to get\n   * @param localName Local part of qualified name of attribute node to get\n   *\n   * @return literal result attribute (AVT)\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributeNS(String namespaceURI, String localName)",
    "returnType" : "String",
    "comment" : "\n   * Return the raw value of the attribute.\n   *\n   * @param namespaceURI Namespace URI of attribute node to get\n   * @param localName Local part of qualified name of attribute node to get\n   *\n   * @return The Attr value as a string, or the empty string if that attribute \n   * does not have a specified or default value\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getLiteralResultAttribute(String name)",
    "returnType" : "AVT",
    "comment" : "\n   * Get a literal result attribute by name. The name is namespaceURI:localname  \n   * if namespace is not null.\n   *\n   * @param name Name of literal result attribute to get\n   *\n   * @return literal result attribute (AVT)\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getAttribute(String rawName)",
    "returnType" : "String",
    "comment" : "\n   * Return the raw value of the attribute.\n   *\n   * @param namespaceURI:localName or localName if the namespaceURI is null of \n   * the attribute to get\n   *\n   * @return The Attr value as a string, or the empty string if that attribute \n   * does not have a specified or default value\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExcludeResultPrefix(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not the passed URL is flagged by\n   * the \"extension-element-prefixes\" or \"exclude-result-prefixes\"\n   * properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param prefix non-null reference to prefix that might be excluded.(not currently used)\n   * @param uri reference to namespace that prefix maps to\n   *\n   * @return true if the prefix should normally be excluded.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void resolvePrefixTables() throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Augment resolvePrefixTables, resolving the namespace aliases once\n   * the superclass has resolved the tables.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean needToCheckExclude()",
    "returnType" : "boolean",
    "comment" : "\n   * Return whether we need to check namespace prefixes\n   * against the exclude result prefixes or extensions lists.\n   * Note that this will create a new prefix table if one\n   * has not been created already.\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespace(String ns)",
    "returnType" : "void",
    "comment" : "\n   * Set the namespace URI of the result element to be created.\n   * Note that after resolvePrefixTables has been called, this will\n   * return the aliased result namespace, not the original stylesheet\n   * namespace.\n   *\n   * @param ns The Namespace URI, or the empty string if the\n   *        element has no Namespace URI.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespace()",
    "returnType" : "String",
    "comment" : "\n   * Get the original namespace of the Literal Result Element.\n   * \n   * %REVIEW% Why isn't this overriding the getNamespaceURI method\n   * rather than introducing a new one?\n   *\n   * @return The Namespace URI, or the empty string if the\n   *        element has no Namespace URI.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalName(String localName)",
    "returnType" : "void",
    "comment" : "\n   * Set the local name of the LRE.\n   *\n   * @param localName The local name (without prefix) of the result element\n   *                  to be created.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n   * Get the local name of the Literal Result Element.\n   * Note that after resolvePrefixTables has been called, this will\n   * return the aliased name prefix, not the original stylesheet\n   * namespace prefix.\n   *\n   * @return The local name (without prefix) of the result element\n   *                  to be created.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRawName(String rawName)",
    "returnType" : "void",
    "comment" : "\n   * Set the raw name of the LRE.\n   *\n   * @param rawName The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getRawName()",
    "returnType" : "String",
    "comment" : "\n   * Get the raw name of the Literal Result Element.\n   *\n   * @return  The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "\n   * Get the prefix part of the raw name of the Literal Result Element.\n   *\n   * @return The prefix, or the empty string if noprefix was provided.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExtensionElementPrefixes(StringVector v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"extension-element-prefixes\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param v Vector of URIs (not prefixes) to set as the \"extension-element-prefixes\" property\n   ",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n   * @see org.w3c.dom.Node\n   *\n   * @return NamedNodeMap\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getExtensionElementPrefix(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "String",
    "comment" : "\n   * Get an \"extension-element-prefix\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param i Index of URI (\"extension-element-prefix\" property) to get\n   *\n   * @return URI at given index (\"extension-element-prefix\" property)\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getExtensionElementPrefixCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"extension-element-prefixes\" Strings.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @return the number of \"extension-element-prefixes\" Strings\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExtensionElementURI(String uri)",
    "returnType" : "boolean",
    "comment" : "\n   * Find out if the given \"extension-element-prefix\" property is defined.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param uri The URI to find\n   *\n   * @return True if the given URI is found\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setVersion(String v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"version\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#forwards\">forwards in XSLT Specification</a>\n   *\n   * @param v Version property value to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getVersion()",
    "returnType" : "String",
    "comment" : "\n   * Get the \"version\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#forwards\">forwards in XSLT Specification</a>\n   *\n   * @return Version property value\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExcludeResultPrefixes(StringVector v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"exclude-result-prefixes\" property.\n   * The designation of a namespace as an excluded namespace is\n   * effective within the subtree of the stylesheet rooted at\n   * the element bearing the exclude-result-prefixes or\n   * xsl:exclude-result-prefixes attribute; a subtree rooted\n   * at an xsl:stylesheet element does not include any stylesheets\n   * imported or included by children of that xsl:stylesheet element.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param v vector of prefixes that are resolvable to strings.\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean excludeResultNSDecl(String prefix, String uri) throws TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the result namespace decl should be excluded.  Should be called before\n   * namespace aliasing (I think).\n   *\n   * @param prefix Prefix of namespace to check\n   * @param uri URI of namespace to check\n   *\n   * @return True if the given namespace should be excluded\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Copy a Literal Result Element into the Result tree, copy the\n   * non-excluded namespace attributes, copy the attributes not\n   * of the XSLT namespace, and execute the children of the LRE.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Iterator enumerateLiteralResultAttributes()",
    "returnType" : "Iterator",
    "comment" : "\n   * Compiling templates requires that we be able to list the AVTs\n   * ADDED 9/5/2000 to support compilation experiment\n   *\n   * @return an Enumeration of the literal result attributes associated\n   * with this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean accept(XSLTVisitor visitor)",
    "returnType" : "boolean",
    "comment" : "\n     * Accept a visitor and call the appropriate method \n     * for this class.\n     * \n     * @param visitor The visitor whose appropriate method will be called.\n     * @return true if the children of the object should be visited.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n     * Call the children visitors.\n     * @param visitor The visitor whose appropriate method will be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void throwDOMException(short code, String msg)",
    "returnType" : "void",
    "comment" : "\n     * Throw a DOMException\n     *\n     * @param msg key of the error that occured.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setIsLiteralResultAsStylesheet(boolean b)", "public boolean getIsLiteralResultAsStylesheet()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void addLiteralResultAttribute(AVT avt)", "public void addLiteralResultAttribute(String att)", "public void setXmlSpace(AVT avt)", "public AVT getLiteralResultAttributeNS(String namespaceURI, String localName)", "public String getAttributeNS(String namespaceURI, String localName)", "public AVT getLiteralResultAttribute(String name)", "public String getAttribute(String rawName)", "public boolean containsExcludeResultPrefix(String prefix, String uri)", "public void resolvePrefixTables() throws TransformerException", " boolean needToCheckExclude()", "public void setNamespace(String ns)", "public String getNamespace()", "public void setLocalName(String localName)", "public String getLocalName()", "public void setRawName(String rawName)", "public String getRawName()", "public String getPrefix()", "public void setExtensionElementPrefixes(StringVector v)", "public NamedNodeMap getAttributes()", "public String getExtensionElementPrefix(int i) throws ArrayIndexOutOfBoundsException", "public int getExtensionElementPrefixCount()", "public boolean containsExtensionElementURI(String uri)", "public int getXSLToken()", "public String getNodeName()", "public void setVersion(String v)", "public String getVersion()", "public void setExcludeResultPrefixes(StringVector v)", "private boolean excludeResultNSDecl(String prefix, String uri) throws TransformerException", "public void execute(TransformerImpl transformer) throws TransformerException", "public Iterator enumerateLiteralResultAttributes()", "protected boolean accept(XSLTVisitor visitor)", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)", "public void throwDOMException(short code, String msg)" ],
  "variableNames" : [ "serialVersionUID", "EMPTYSTRING", "isLiteralResultAsStylesheet", "m_avts", "m_xslAttr", "m_namespace", "m_localName", "m_rawName", "m_ExtensionElementURIs", "m_version", "m_excludeResultPrefixes" ]
}