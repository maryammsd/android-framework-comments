{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/location/ContextHubClientCallback.java",
  "packageName" : "android.hardware.location",
  "className" : "ContextHubClientCallback",
  "comment" : "\n * A class for {@link android.hardware.location.ContextHubClient ContextHubClient} to\n * receive messages and life-cycle events from nanoapps in the Context Hub at which the client is\n * attached to.\n *\n * This callback is registered through the {@link\n * android.hardware.location.ContextHubManager#createClient(\n * ContextHubInfo, ContextHubClientCallback, Executor) creation} of\n * {@link android.hardware.location.ContextHubClient ContextHubClient}. Callbacks are invoked in\n * the following ways:\n * 1) Messages from nanoapps delivered through onMessageFromNanoApp may either be broadcasted\n *    or targeted to a specific client.\n * 2) Nanoapp or Context Hub events (the remaining callbacks) are broadcasted to all clients, and\n *    the client can choose to ignore the event by filtering through the parameters.\n *\n * @hide\n ",
  "links" : [ "android.hardware.location.ContextHubManager#createClient(", "android.hardware.location.ContextHubClient" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onMessageFromNanoApp(ContextHubClient client, NanoAppMessage message)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when receiving a message from a nanoapp.\n     *\n     * The message contents of this callback may either be broadcasted or targeted to the\n     * client receiving the invocation.\n     *\n     * @param client the client that is associated with this callback\n     * @param message the message sent by the nanoapp\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onHubReset(ContextHubClient client)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the attached Context Hub has reset.\n     *\n     * @param client the client that is associated with this callback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNanoAppAborted(ContextHubClient client, long nanoAppId, int abortCode)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a nanoapp aborts at the attached Context Hub.\n     *\n     * @param client the client that is associated with this callback\n     * @param nanoAppId the ID of the nanoapp that had aborted\n     * @param abortCode the reason for nanoapp's abort, specific to each nanoapp\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNanoAppLoaded(ContextHubClient client, long nanoAppId)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a nanoapp is dynamically loaded at the attached Context Hub through\n     * the {@link android.hardware.location.ContextHubManager}.\n     *\n     * NOTE: This callback is <b>not</b> invoked for a nanoapp that is loaded internally by CHRE\n     * (e.g. nanoapps that are preloaded by the system). To check the availability of these\n     * nanoapps, use the {@link ContextHubManager#queryNanoApps(ContextHubInfo)} API.\n     *\n     * @param client the client that is associated with this callback\n     * @param nanoAppId the ID of the nanoapp that had been loaded\n     ",
    "links" : [ "android.hardware.location.ContextHubManager#queryNanoApps(ContextHubInfo)", "android.hardware.location.ContextHubManager" ]
  }, {
    "name" : "public void onNanoAppUnloaded(ContextHubClient client, long nanoAppId)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a nanoapp is dynamically unloaded from the attached Context Hub through\n     * the {@link android.hardware.location.ContextHubManager}.\n     *\n     * @param client the client that is associated with this callback\n     * @param nanoAppId the ID of the nanoapp that had been unloaded\n     ",
    "links" : [ "android.hardware.location.ContextHubManager" ]
  }, {
    "name" : "public void onNanoAppEnabled(ContextHubClient client, long nanoAppId)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a nanoapp is dynamically enabled at the attached Context Hub through\n     * the {@link android.hardware.location.ContextHubManager}.\n     *\n     * @param client the client that is associated with this callback\n     * @param nanoAppId the ID of the nanoapp that had been enabled\n     ",
    "links" : [ "android.hardware.location.ContextHubManager" ]
  }, {
    "name" : "public void onNanoAppDisabled(ContextHubClient client, long nanoAppId)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a nanoapp is dynamically disabled at the attached Context Hub through\n     * the {@link android.hardware.location.ContextHubManager}.\n     *\n     * @param client the client that is associated with this callback\n     * @param nanoAppId the ID of the nanoapp that had been disabled\n     ",
    "links" : [ "android.hardware.location.ContextHubManager" ]
  }, {
    "name" : "public void onClientAuthorizationChanged(@NonNull ContextHubClient client, long nanoAppId, @ContextHubManager.AuthorizationState int authorization)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a {@link ContextHubClient}'s authorization to communicate with a\n     * nanoapp changes. This typically happens as a result of the app that created the\n     * {@link ContextHubClient} gaining or losing the permissions required to communicate with a\n     * nanoapp.\n     *\n     * An example of the connection callbacks looks like:\n     * 1) {@link ContextHubClient} sends message to nanoapp and holds required permissions\n     * 2) {@link ContextHubClient} loses required permissions\n     * 3) Callback invoked with the nanoapp ID and\n     *    {@link ContextHubManager#AUTHORIZATION_DENIED_GRACE_PERIOD}\n     * 4) {@link ContextHubClient} performs any cleanup required with the nanoapp\n     * 5) Callback invoked with the nanoapp ID and {@link ContextHubManager#AUTHORIZATION_DENIED}.\n     *    At this point, any further attempts of communication between the nanoapp and the\n     *    {@link ContextHubClient} will be dropped by the contexthub and a security exception will\n     *    be thrown when calling {@link ContextHubClient#sendMessageToNanoApp}. The\n     *    {@link ContextHubClient} should assume no communciation can happen again until\n     *    {@link ContextHubManager#AUTHORIZATION_GRANTED} is received.\n     *\n     * @param client the client that is associated with this callback\n     * @param nanoAppId the ID of the nanoapp associated with the new\n     * authorization state\n     * @param authorization the authorization state denoting the ability of the\n     * client to communicate with the nanoapp\n     ",
    "links" : [ "android.hardware.location.ContextHubManager#AUTHORIZATION_DENIED", "android.hardware.location.ContextHubManager#AUTHORIZATION_GRANTED", "android.hardware.location.ContextHubManager#AUTHORIZATION_DENIED_GRACE_PERIOD", "android.hardware.location.ContextHubClient#sendMessageToNanoApp", "android.hardware.location.ContextHubClient" ]
  } ],
  "methodNames" : [ "public void onMessageFromNanoApp(ContextHubClient client, NanoAppMessage message)", "public void onHubReset(ContextHubClient client)", "public void onNanoAppAborted(ContextHubClient client, long nanoAppId, int abortCode)", "public void onNanoAppLoaded(ContextHubClient client, long nanoAppId)", "public void onNanoAppUnloaded(ContextHubClient client, long nanoAppId)", "public void onNanoAppEnabled(ContextHubClient client, long nanoAppId)", "public void onNanoAppDisabled(ContextHubClient client, long nanoAppId)", "public void onClientAuthorizationChanged(@NonNull ContextHubClient client, long nanoAppId, @ContextHubManager.AuthorizationState int authorization)" ],
  "variableNames" : [ ]
}