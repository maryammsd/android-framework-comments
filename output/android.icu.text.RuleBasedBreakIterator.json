{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RuleBasedBreakIterator.java",
  "packageName" : "android.icu.text",
  "className" : "RuleBasedBreakIterator",
  "comment" : "\n * Rule Based Break Iterator\n * This is a port of the C++ class RuleBasedBreakIterator from ICU4C.\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "START_STATE",
    "type" : "int",
    "comment" : " The state number of the starting state",
    "links" : [ ]
  }, {
    "name" : "STOP_STATE",
    "type" : "int",
    "comment" : " The state-transition value indicating \"stop\"",
    "links" : [ ]
  }, {
    "name" : "RBBI_START",
    "type" : "int",
    "comment" : "               are.  The state machine only fetches user text input while in RUN mode.",
    "links" : [ ]
  }, {
    "name" : "RBBI_RUN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RBBI_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fText",
    "type" : "CharacterIterator",
    "comment" : "\n     * The character iterator through which this BreakIterator accesses the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "fRData",
    "type" : "RBBIDataWrapper",
    "comment" : "\n     * The rule data for this BreakIterator instance.\n     * Not intended for public use. Declared public for testing purposes only.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "fPosition",
    "type" : "int",
    "comment" : "\n     *  The iteration state - current position, rule status for the current position,\n     *                        and whether the iterator ran off the end, yielding UBRK_DONE.\n     *                        Current position is pinned to be 0 < position <= text.length.\n     *                        Current position is always set to a boundary.\n     *\n     *  The current  position of the iterator. Pinned, 0 < fPosition <= text.length.\n     *  Never has the value UBRK_DONE (-1).\n     ",
    "links" : [ ]
  }, {
    "name" : "fRuleStatusIndex",
    "type" : "int",
    "comment" : "\n     * Index of the Rule {tag} values for the most recent match.\n     ",
    "links" : [ ]
  }, {
    "name" : "fDone",
    "type" : "boolean",
    "comment" : "\n     * True when iteration has run off the end, and iterator functions should return UBRK_DONE.\n     ",
    "links" : [ ]
  }, {
    "name" : "fLookAheadMatches",
    "type" : "int[]",
    "comment" : "\n     *  Array of look-ahead tentative results.\n     ",
    "links" : [ ]
  }, {
    "name" : "fBreakCache",
    "type" : "BreakCache",
    "comment" : "\n     *   Cache of previously determined boundary positions.\n     ",
    "links" : [ ]
  }, {
    "name" : "fPhraseBreaking",
    "type" : "boolean",
    "comment" : "\n     * Flag used to indicate if phrase breaking is required.\n     ",
    "links" : [ ]
  }, {
    "name" : "fDictionaryCharCount",
    "type" : "int",
    "comment" : "\n     * Counter for the number of characters encountered with the \"dictionary\"\n     *   flag set.  Normal RBBI iterators don't use it, although the code\n     *   for updating it is live.  Dictionary Based break iterators (a subclass\n     *   of us) access this field directly.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "fDictionaryCache",
    "type" : "DictionaryCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RBBI_DEBUG_ARG",
    "type" : "String",
    "comment" : "\n     * ICU debug argument name for RBBI\n     ",
    "links" : [ ]
  }, {
    "name" : "TRACE",
    "type" : "boolean",
    "comment" : "\n     * Debugging flag.  Trace operation of state machine when true.\n     ",
    "links" : [ ]
  }, {
    "name" : "gUnhandledBreakEngine",
    "type" : "UnhandledBreakEngine",
    "comment" : "\n     * The \"default\" break engine - just skips over ranges of dictionary words,\n     * producing no breaks. Should only be used if characters need to be handled\n     * by a dictionary but we have no dictionary implementation for them.\n     *\n     * Only one instance; shared by all break iterators.\n     ",
    "links" : [ ]
  }, {
    "name" : "gAllBreakEngines",
    "type" : "ConcurrentLinkedQueue<LanguageBreakEngine>",
    "comment" : "\n     * List of all known break engines, common for all break iterators.\n     * Lazily updated as break engines are needed, because instantiation of\n     * break engines is expensive.\n     *\n     * Important notes:\n     * <ul>Because we don't want to add the same LanguageBreakEngine multiple times, all writes\n     *     are synchronized.\n     * <ul>Read access avoids explicit synchronization, but will end up being synchronized if\n     *     needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "fDebugEnv",
    "type" : "String",
    "comment" : "\n     * Control debug, trace and dump options.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RuleBasedBreakIterator getInstanceFromCompiledRules(InputStream is) throws IOException",
    "returnType" : "RuleBasedBreakIterator",
    "comment" : "\n     * Create a break iterator from a precompiled set of break rules.\n     *\n     * Creating a break iterator from the binary rules is much faster than\n     * creating one from source rules.\n     *\n     * The binary rules are generated by the RuleBasedBreakIterator.compileRules() function.\n     * Binary break iterator rules are not guaranteed to be compatible between\n     * different versions of ICU.\n     *\n     * @param is an input stream supplying the compiled binary rules.\n     * @throws IOException if there is an error while reading the rules from the InputStream.\n     * @see    #compileRules(String, OutputStream)\n     ",
    "links" : [ ]
  }, {
    "name" : " static RuleBasedBreakIterator getInstanceFromCompiledRules(ByteBuffer bytes, boolean phraseBreaking) throws IOException",
    "returnType" : "RuleBasedBreakIterator",
    "comment" : " package-potected ",
    "links" : [ ]
  }, {
    "name" : "public static RuleBasedBreakIterator getInstanceFromCompiledRules(ByteBuffer bytes) throws IOException",
    "returnType" : "RuleBasedBreakIterator",
    "comment" : "\n     * Create a break iterator from a precompiled set of break rules.\n     *\n     * Creating a break iterator from the binary rules is much faster than\n     * creating one from source rules.\n     *\n     * The binary rules are generated by the RuleBasedBreakIterator.compileRules() function.\n     * Binary break iterator rules are not guaranteed to be compatible between\n     * different versions of ICU.\n     *\n     * @param bytes a buffer supplying the compiled binary rules.\n     * @throws IOException if there is an error while reading the rules from the buffer.\n     * @see    #compileRules(String, OutputStream)\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clones this iterator.\n     * @return A newly-constructed RuleBasedBreakIterator with the same\n     * behavior as this one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if both BreakIterators are of the same class, have the same\n     * rules, and iterate over the same text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the description (rules) used to create this iterator.\n     * (In ICU4C, the same function is RuleBasedBreakIterator::getRules())\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Compute a hashcode for this BreakIterator\n     * @return A hash code\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(java.io.PrintStream out)",
    "returnType" : "void",
    "comment" : "\n     * Dump the contents of the state table and character classes for this break iterator.\n     * For debugging only.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void compileRules(String rules, OutputStream ruleBinary) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Compile a set of source break rules into the binary state tables used\n     * by the break iterator engine.  Creating a break iterator from precompiled\n     * rules is much faster than creating one from source rules.\n     *\n     * Binary break rules are not guaranteed to be compatible between different\n     * versions of ICU.\n     *\n     *\n     * @param rules  The source form of the break rules\n     * @param ruleBinary  An output stream to receive the compiled rules.\n     * @throws IOException If there is an error writing the output.\n     * @see #getInstanceFromCompiledRules(InputStream)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int first()",
    "returnType" : "int",
    "comment" : "\n     * Sets the current iteration position to the beginning of the text.\n     * (i.e., the CharacterIterator's starting offset).\n     * @return The offset of the beginning of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int last()",
    "returnType" : "int",
    "comment" : "\n     * Sets the current iteration position to the end of the text.\n     * (i.e., the CharacterIterator's ending offset).\n     * @return The text's past-the-end offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next(int n)",
    "returnType" : "int",
    "comment" : "\n     * Advances the iterator either forward or backward the specified number of steps.\n     * Negative values move backward, and positive values move forward.  This is\n     * equivalent to repeatedly calling next() or previous().\n     * @param n The number of steps to move.  The sign indicates the direction\n     * (negative is backwards, and positive is forwards).\n     * @return The character offset of the boundary position n boundaries away from\n     * the current one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "\n     * Advances the iterator to the next boundary position.\n     * @return The position of the first boundary after this one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int previous()",
    "returnType" : "int",
    "comment" : "\n     * Moves the iterator backwards, to the boundary preceding the current one.\n     * @return The position of the boundary position immediately preceding the starting position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int following(int startPos)",
    "returnType" : "int",
    "comment" : "\n     * Sets the iterator to refer to the first boundary position following\n     * the specified position.\n     * @param startPos The position from which to begin searching for a break position.\n     * @return The position of the first break after the current position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int preceding(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Sets the iterator to refer to the last boundary position before the\n     * specified position.\n     * @param offset The position to begin searching for a break from.\n     * @return The position of the last boundary before the starting position.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static final void checkOffset(int offset, CharacterIterator text)",
    "returnType" : "void",
    "comment" : "\n     * Throw IllegalArgumentException unless begin &lt;= offset &lt; end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified position is a boundary position.  As a side\n     * effect, leaves the iterator pointing to the first boundary position at\n     * or after \"offset\".\n     * @param offset the offset to check.\n     * @return True if \"offset\" is a boundary position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int current()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current iteration position.  Note that DONE is never\n     * returned from this function; if iteration has run to the end of a\n     * string, current() will return the length of the string while\n     * next() will return BreakIterator.DONE).\n     * @return The current iteration position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRuleStatus()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRuleStatusVec(int[] fillInArray)",
    "returnType" : "int",
    "comment" : "\n     * Get the status (tag) values from the break rule(s) that determined the boundary\n     * at the current iteration position.  The values appear in the rule source\n     * within brackets, {123}, for example.  The default status value for rules\n     * that do not explicitly provide one is zero.\n     * <p>\n     * The status values used by the standard ICU break rules are defined\n     * as public constants in class RuleBasedBreakIterator.\n     * <p>\n     * If the size  of the output array is insufficient to hold the data,\n     *  the output will be truncated to the available length.  No exception\n     *  will be thrown.\n     *\n     * @param fillInArray an array to be filled in with the status values.\n     * @return          The number of rule status values from the rules that determined\n     *                  the boundary at the current iteration position.\n     *                  In the event that the array is too small, the return value\n     *                  is the total number of status values that were available,\n     *                  not the reduced number that were actually returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharacterIterator getText()",
    "returnType" : "CharacterIterator",
    "comment" : "\n     * Returns a CharacterIterator over the text being analyzed.\n     * <p>\n     * <b><i>Caution:</i></b>The state of the returned CharacterIterator\n     * must not be modified in any way while the BreakIterator is still in use.\n     * Doing so will lead to undefined behavior of the BreakIterator.\n     * Clone the returned CharacterIterator first and work with that.\n     * <p>\n     * The returned CharacterIterator is a reference\n     * to the <b>actual iterator being used</b> by the BreakIterator.\n     * No guarantees are made about the current position\n     * of this iterator when it is returned; it may differ from the\n     * BreakIterators current position.  If you need to move that\n     * position to examine the text, clone this function's return value first.\n     * @return An iterator over the text being analyzed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharacterIterator newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the iterator to analyze a new piece of text.  This function resets\n     * the current iteration position to the beginning of the text.\n     * (The old iterator is dropped.)\n     * <p>\n     * <b><i>Caution:</i></b> The supplied CharacterIterator is used\n     * directly by the BreakIterator, and must not be altered in any\n     * way by code outside of the BreakIterator.\n     * Doing so will lead to undefined behavior of the BreakIterator.\n     *\n     * @param newText An iterator over the text to analyze.\n     ",
    "links" : [ ]
  }, {
    "name" : "private LanguageBreakEngine getLanguageBreakEngine(int c)",
    "returnType" : "LanguageBreakEngine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int handleNext()",
    "returnType" : "int",
    "comment" : "\n     * The State Machine Engine for moving forward is here.\n     * This function is the heart of the RBBI run time engine.\n     *\n     * Input\n     *    fPosition, the position in the text to begin from.\n     * Output\n     *    fPosition:           the boundary following the starting position.\n     *    fDictionaryCharCount the number of dictionary characters encountered.\n     *                         If > 0, the segment will be further subdivided\n     *    fRuleStatusIndex     Info from the state table indicating which rules caused the boundary.\n     *\n     * @return the new iterator position\n     *\n     * A note on supplementary characters and the position of underlying\n     * Java CharacterIterator:   Normally, a character iterator is positioned at\n     * the char most recently returned by next().  Within this function, when\n     * a supplementary char is being processed, the char iterator is left\n     * sitting on the trail surrogate, in the middle of the code point.\n     * This is different from everywhere else, where an iterator always\n     * points at the lead surrogate of a supplementary.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int handleSafePrevious(int fromPosition)",
    "returnType" : "int",
    "comment" : "\n     * Iterate backwards from an arbitrary position in the input text using the Safe Reverse rules.\n     * This locates a \"Safe Position\" from which the forward break rules\n     * will operate correctly. A Safe Position is not necessarily a boundary itself.\n     *\n     * The logic of this function is very similar to handleNext(), above, but simpler\n     * because the safe table does not require as many options.\n     *\n     * @param fromPosition the position in the input text to begin the iteration.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int CISetIndex32(CharacterIterator ci, int index)",
    "returnType" : "int",
    "comment" : "\n     * Set the index of a CharacterIterator.\n     * Pin the index to the valid range range of BeginIndex <= index <= EndIndex.\n     * If the index points to a trail surrogate of a supplementary character, adjust it\n     * to the start (lead surrogate) index.\n     *\n     * @param ci A CharacterIterator to set\n     * @param index the index to set\n     * @return the resulting index, possibly pinned or adjusted.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RuleBasedBreakIterator getInstanceFromCompiledRules(InputStream is) throws IOException", " static RuleBasedBreakIterator getInstanceFromCompiledRules(ByteBuffer bytes, boolean phraseBreaking) throws IOException", "public static RuleBasedBreakIterator getInstanceFromCompiledRules(ByteBuffer bytes) throws IOException", "public Object clone()", "public boolean equals(Object that)", "public String toString()", "public int hashCode()", "public void dump(java.io.PrintStream out)", "public static void compileRules(String rules, OutputStream ruleBinary) throws IOException", "public int first()", "public int last()", "public int next(int n)", "public int next()", "public int previous()", "public int following(int startPos)", "public int preceding(int offset)", "protected static final void checkOffset(int offset, CharacterIterator text)", "public boolean isBoundary(int offset)", "public int current()", "public int getRuleStatus()", "public int getRuleStatusVec(int[] fillInArray)", "public CharacterIterator getText()", "public void setText(CharacterIterator newText)", "private LanguageBreakEngine getLanguageBreakEngine(int c)", "private int handleNext()", "private int handleSafePrevious(int fromPosition)", "private static int CISetIndex32(CharacterIterator ci, int index)" ],
  "variableNames" : [ "START_STATE", "STOP_STATE", "RBBI_START", "RBBI_RUN", "RBBI_END", "fText", "fRData", "fPosition", "fRuleStatusIndex", "fDone", "fLookAheadMatches", "fBreakCache", "fPhraseBreaking", "fDictionaryCharCount", "fDictionaryCache", "RBBI_DEBUG_ARG", "TRACE", "gUnhandledBreakEngine", "gAllBreakEngines", "fDebugEnv" ]
}