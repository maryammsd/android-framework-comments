{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/TaskOrganizer.java",
  "packageName" : "android.window",
  "className" : "TaskOrganizer",
  "comment" : "\n * Interface for ActivityTaskManager/WindowManager to delegate control of tasks.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTaskOrganizerController",
    "type" : "ITaskOrganizerController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : " made on the incoming binder call.",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ITaskOrganizer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<TaskAppearedInfo> registerOrganizer()",
    "returnType" : "List<TaskAppearedInfo>",
    "comment" : "\n     * Register a TaskOrganizer to manage tasks as they enter a supported windowing mode.\n     *\n     * @return a list of the tasks that should be managed by the organizer, not including tasks\n     *         created via {@link #createRootTask}.\n     ",
    "links" : [ "#createRootTask" ]
  }, {
    "name" : "public void unregisterOrganizer()",
    "returnType" : "void",
    "comment" : " Unregisters a previously registered task organizer. ",
    "links" : [ ]
  }, {
    "name" : "public void addStartingWindow(@NonNull StartingWindowInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Called when a Task is starting and the system would like to show a UI to indicate that an\n     * application is starting. The client is responsible to add/remove the starting window if it\n     * has create a starting window for the Task.\n     *\n     * @param info The information about the Task that's available\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeStartingWindow(@NonNull StartingWindowRemovalInfo removalInfo)",
    "returnType" : "void",
    "comment" : "\n     * Called when the Task want to remove the starting window.\n     * @param removalInfo The information used to remove the starting window.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copySplashScreenView(int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Called when the Task want to copy the splash screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAppSplashScreenViewRemoved(int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Notify the shell ({@link com.android.wm.shell.ShellTaskOrganizer} that the client has\n     * removed the splash screen view.\n     * @see com.android.wm.shell.ShellTaskOrganizer#onAppSplashScreenViewRemoved(int)\n     * @see SplashScreenView#remove()\n     ",
    "links" : [ "com.android.wm.shell.ShellTaskOrganizer" ]
  }, {
    "name" : "public void onTaskAppeared(@NonNull ActivityManager.RunningTaskInfo taskInfo, @NonNull SurfaceControl leash)",
    "returnType" : "void",
    "comment" : "\n     * Called when a task with the registered windowing mode can be controlled by this task\n     * organizer. For non-root tasks, the leash may initially be hidden so it is up to the organizer\n     * to show this task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTaskVanished(@NonNull ActivityManager.RunningTaskInfo taskInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTaskInfoChanged(@NonNull ActivityManager.RunningTaskInfo taskInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBackPressedOnTaskRoot(@NonNull ActivityManager.RunningTaskInfo taskInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onImeDrawnOnTask(int taskId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void createRootTask(int displayId, int windowingMode, @Nullable IBinder launchCookie, boolean removeWithTaskOrganizer)",
    "returnType" : "void",
    "comment" : "\n     * Creates a persistent root task in WM for a particular windowing-mode.\n     * @param displayId The display to create the root task on.\n     * @param windowingMode Windowing mode to put the root task in.\n     * @param launchCookie Launch cookie to associate with the task so that is can be identified\n     *                     when the {@link ITaskOrganizer#onTaskAppeared} callback is called.\n     * @param removeWithTaskOrganizer True if this task should be removed when organizer destroyed.\n     * @hide\n     ",
    "links" : [ "#onTaskAppeared" ]
  }, {
    "name" : "public void createRootTask(int displayId, int windowingMode, @Nullable IBinder launchCookie)",
    "returnType" : "void",
    "comment" : "\n     * Creates a persistent root task in WM for a particular windowing-mode.\n     * @param displayId The display to create the root task on.\n     * @param windowingMode Windowing mode to put the root task in.\n     * @param launchCookie Launch cookie to associate with the task so that is can be identified\n     *                     when the {@link ITaskOrganizer#onTaskAppeared} callback is called.\n     ",
    "links" : [ "#onTaskAppeared" ]
  }, {
    "name" : "public boolean deleteRootTask(@NonNull WindowContainerToken task)",
    "returnType" : "boolean",
    "comment" : " Deletes a persistent root task in WM ",
    "links" : [ ]
  }, {
    "name" : "public List<ActivityManager.RunningTaskInfo> getChildTasks(@NonNull WindowContainerToken parent, @NonNull int[] activityTypes)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : " Gets direct child tasks (ordered from top-to-bottom) ",
    "links" : [ ]
  }, {
    "name" : "public List<ActivityManager.RunningTaskInfo> getRootTasks(int displayId, @NonNull int[] activityTypes)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : " Gets all root tasks on a display (ordered from top-to-bottom) ",
    "links" : [ ]
  }, {
    "name" : "public WindowContainerToken getImeTarget(int display)",
    "returnType" : "WindowContainerToken",
    "comment" : " Get the {@link WindowContainerToken} of the task which contains the current ime target ",
    "links" : [ "android.window.WindowContainerToken" ]
  }, {
    "name" : "public void setInterceptBackPressedOnTaskRoot(@NonNull WindowContainerToken task, boolean interceptBackPressed)",
    "returnType" : "void",
    "comment" : "\n     * Requests that the given task organizer is notified when back is pressed on the root activity\n     * of one of its controlled tasks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restartTaskTopActivityProcessIfVisible(@NonNull WindowContainerToken task)",
    "returnType" : "void",
    "comment" : "\n     * Restarts the top activity in the given task by killing its process if it is visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateCameraCompatControlState(@NonNull WindowContainerToken task, @CameraCompatControlState int state)",
    "returnType" : "void",
    "comment" : "\n     * Updates a state of camera compat control for stretched issues in the viewfinder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Gets the executor to run callbacks on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private ITaskOrganizerController getController()",
    "returnType" : "ITaskOrganizerController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public List<TaskAppearedInfo> registerOrganizer()", "public void unregisterOrganizer()", "public void addStartingWindow(@NonNull StartingWindowInfo info)", "public void removeStartingWindow(@NonNull StartingWindowRemovalInfo removalInfo)", "public void copySplashScreenView(int taskId)", "public void onAppSplashScreenViewRemoved(int taskId)", "public void onTaskAppeared(@NonNull ActivityManager.RunningTaskInfo taskInfo, @NonNull SurfaceControl leash)", "public void onTaskVanished(@NonNull ActivityManager.RunningTaskInfo taskInfo)", "public void onTaskInfoChanged(@NonNull ActivityManager.RunningTaskInfo taskInfo)", "public void onBackPressedOnTaskRoot(@NonNull ActivityManager.RunningTaskInfo taskInfo)", "public void onImeDrawnOnTask(int taskId)", "public void createRootTask(int displayId, int windowingMode, @Nullable IBinder launchCookie, boolean removeWithTaskOrganizer)", "public void createRootTask(int displayId, int windowingMode, @Nullable IBinder launchCookie)", "public boolean deleteRootTask(@NonNull WindowContainerToken task)", "public List<ActivityManager.RunningTaskInfo> getChildTasks(@NonNull WindowContainerToken parent, @NonNull int[] activityTypes)", "public List<ActivityManager.RunningTaskInfo> getRootTasks(int displayId, @NonNull int[] activityTypes)", "public WindowContainerToken getImeTarget(int display)", "public void setInterceptBackPressedOnTaskRoot(@NonNull WindowContainerToken task, boolean interceptBackPressed)", "public void restartTaskTopActivityProcessIfVisible(@NonNull WindowContainerToken task)", "public void updateCameraCompatControlState(@NonNull WindowContainerToken task, @CameraCompatControlState int state)", "public Executor getExecutor()", "private ITaskOrganizerController getController()" ],
  "variableNames" : [ "mTaskOrganizerController", "mExecutor", "mInterface" ]
}