{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ActivityChooserView.java",
  "packageName" : "android.widget",
  "className" : "ActivityChooserView",
  "comment" : "\n * This class is a view for choosing an activity for handling a given {@link Intent}.\n * <p>\n * The view is composed of two adjacent buttons:\n * <ul>\n * <li>\n * The left button is an immediate action and allows one click activity choosing.\n * Tapping this button immediately executes the intent without requiring any further\n * user input. Long press on this button shows a popup for changing the default\n * activity.\n * </li>\n * <li>\n * The right button is an overflow action and provides an optimized menu\n * of additional activities. Tapping this button shows a popup anchored to this\n * view, listing the most frequently used activities. This list is initially\n * limited to a small number of items in frequency used order. The last item,\n * \"Show all...\" serves as an affordance to display all available activities.\n * </li>\n * </ul>\n * </p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "ActivityChooserViewAdapter",
    "comment" : "\n     * An adapter for displaying the activities in an {@link AdapterView}.\n     ",
    "links" : [ "AdapterView" ]
  }, {
    "name" : "mCallbacks",
    "type" : "Callbacks",
    "comment" : "\n     * Implementation of various interfaces to avoid publishing them in the APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivityChooserContent",
    "type" : "LinearLayout",
    "comment" : "\n     * The content of this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivityChooserContentBackground",
    "type" : "Drawable",
    "comment" : "\n     * Stores the background drawable to allow hiding and latter showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExpandActivityOverflowButton",
    "type" : "FrameLayout",
    "comment" : "\n     * The expand activities action button;\n     ",
    "links" : [ ]
  }, {
    "name" : "mExpandActivityOverflowButtonImage",
    "type" : "ImageView",
    "comment" : "\n     * The image for the expand activities action button;\n     ",
    "links" : [ ]
  }, {
    "name" : "mDefaultActivityButton",
    "type" : "FrameLayout",
    "comment" : "\n     * The default activities action button;\n     ",
    "links" : [ ]
  }, {
    "name" : "mDefaultActivityButtonImage",
    "type" : "ImageView",
    "comment" : "\n     * The image for the default activities action button;\n     ",
    "links" : [ ]
  }, {
    "name" : "mListPopupMaxWidth",
    "type" : "int",
    "comment" : "\n     * The maximal width of the list popup.\n     ",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "ActionProvider",
    "comment" : "\n     * The ActionProvider hosting this view, if applicable.\n     ",
    "links" : [ ]
  }, {
    "name" : "mModelDataSetOberver",
    "type" : "DataSetObserver",
    "comment" : "\n     * Observer for the model data.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnGlobalLayoutListener",
    "type" : "OnGlobalLayoutListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListPopupWindow",
    "type" : "ListPopupWindow",
    "comment" : "\n     * Popup window for showing the activity overflow list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnDismissListener",
    "type" : "PopupWindow.OnDismissListener",
    "comment" : "\n     * Listener for the dismissal of the popup/alert.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsSelectingDefaultActivity",
    "type" : "boolean",
    "comment" : "\n     * Flag whether a default activity currently being selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInitialActivityCount",
    "type" : "int",
    "comment" : "\n     * The count of activities in the popup.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsAttachedToWindow",
    "type" : "boolean",
    "comment" : "\n     * Flag whether this view is attached to a window.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDefaultActionButtonContentDescription",
    "type" : "int",
    "comment" : "\n     * String resource for formatting content description of the default target.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setActivityChooserModel(ActivityChooserModel dataModel)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpandActivityOverflowButtonDrawable(Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the background for the button that expands the activity\n     * overflow list.\n     *\n     * <strong>Note:</strong> Clients would like to set this drawable\n     * as a clue about the action the chosen activity will perform. For\n     * example, if a share activity is to be chosen the drawable should\n     * give a clue that sharing is to be performed.\n     *\n     * @param drawable The drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpandActivityOverflowButtonContentDescription(@StringRes int resourceId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content description for the button that expands the activity\n     * overflow list.\n     *\n     * description as a clue about the action performed by the button.\n     * For example, if a share activity is to be chosen the content\n     * description should be something like \"Share with\".\n     *\n     * @param resourceId The content description resource id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProvider(ActionProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Set the provider hosting this view, if applicable.\n     * @hide Internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean showPopup()",
    "returnType" : "boolean",
    "comment" : "\n     * Shows the popup window with activities.\n     *\n     * @return True if the popup was shown, false if already showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void showPopupUnchecked(int maxActivityCount)",
    "returnType" : "void",
    "comment" : "\n     * Shows the popup no matter if it was already showing.\n     *\n     * @param maxActivityCount The max number of activities to display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dismissPopup()",
    "returnType" : "boolean",
    "comment" : "\n     * Dismisses the popup window with activities.\n     *\n     * @return True if dismissed, false if already dismissed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isShowingPopup()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the popup window with activities is shown.\n     *\n     * @return True if the popup is shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityChooserModel getDataModel()",
    "returnType" : "ActivityChooserModel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(PopupWindow.OnDismissListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to receive a callback when the popup is dismissed.\n     *\n     * @param listener The listener to be notified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInitialActivityCount(int itemCount)",
    "returnType" : "void",
    "comment" : "\n     * Sets the initial count of items shown in the activities popup\n     * i.e. the items before the popup is expanded. This is an upper\n     * bound since it is not guaranteed that such number of intent\n     * handlers exist.\n     *\n     * @param itemCount The initial popup item count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultActionButtonContentDescription(@StringRes int resourceId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a content description of the default action button. This\n     * resource should be a string taking one formatting argument and\n     * will be used for formatting the content description of the button\n     * dynamically as the default target changes. For example, a resource\n     * pointing to the string \"share with %1$s\" will result in a content\n     * description \"share with Bluetooth\" for the Bluetooth activity.\n     *\n     * @param resourceId The resource id.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ListPopupWindow getListPopupWindow()",
    "returnType" : "ListPopupWindow",
    "comment" : "\n     * Gets the list popup window which is lazily initialized.\n     *\n     * @return The popup.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateAppearance()",
    "returnType" : "void",
    "comment" : "\n     * Updates the buttons state.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "mAdapter", "mCallbacks", "mActivityChooserContent", "mActivityChooserContentBackground", "mExpandActivityOverflowButton", "mExpandActivityOverflowButtonImage", "mDefaultActivityButton", "mDefaultActivityButtonImage", "mListPopupMaxWidth", "mProvider", "mModelDataSetOberver", "mOnGlobalLayoutListener", "mListPopupWindow", "mOnDismissListener", "mIsSelectingDefaultActivity", "mInitialActivityCount", "mIsAttachedToWindow", "mDefaultActionButtonContentDescription" ],
  "methodNames" : [ "public void setActivityChooserModel(ActivityChooserModel dataModel)", "public void setExpandActivityOverflowButtonDrawable(Drawable drawable)", "public void setExpandActivityOverflowButtonContentDescription(@StringRes int resourceId)", "public void setProvider(ActionProvider provider)", "public boolean showPopup()", "private void showPopupUnchecked(int maxActivityCount)", "public boolean dismissPopup()", "public boolean isShowingPopup()", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public ActivityChooserModel getDataModel()", "public void setOnDismissListener(PopupWindow.OnDismissListener listener)", "public void setInitialActivityCount(int itemCount)", "public void setDefaultActionButtonContentDescription(@StringRes int resourceId)", "private ListPopupWindow getListPopupWindow()", "private void updateAppearance()" ]
}