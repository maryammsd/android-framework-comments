{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/MimeTypeFilter.java",
  "packageName" : "android.content",
  "className" : "MimeTypeFilter",
  "comment" : "\n * Provides utility methods for matching MIME type filters used in ContentProvider.\n *\n * <p>Wildcards are allowed only instead of the entire type or subtype with a tree prefix.\n * Eg. image\\/*, *\\/* is a valid filter and will match image/jpeg, but image/j* is invalid and\n * it will not match image/jpeg. Suffixes and parameters are not supported, and they are treated\n * as part of the subtype during matching. Neither type nor subtype can be empty.\n *\n * <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike the formal\n * RFC definitions. As a result, you should always write these elements with lower case letters,\n * or use {@link android.content.Intent#normalizeMimeType} to ensure that they are converted to\n * lower case.</em>\n *\n * <p>MIME types can be null or ill-formatted. In such case they won't match anything.\n *\n * <p>MIME type filters must be correctly formatted, or an exception will be thrown.\n * Copied from support library.\n * {@hide}\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "private static boolean mimeTypeAgainstFilter(@NonNull String[] mimeTypeParts, @NonNull String[] filterParts)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean matches(@Nullable String mimeType, @NonNull String filter)",
    "returnType" : "boolean",
    "comment" : "\n     * Matches one nullable MIME type against one MIME type filter.\n     * @return True if the {@code mimeType} matches the {@code filter}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String matches(@Nullable String mimeType, @NonNull String[] filters)",
    "returnType" : "String",
    "comment" : "\n     * Matches one nullable MIME type against an array of MIME type filters.\n     * @return The first matching filter, or null if nothing matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String matches(@Nullable String[] mimeTypes, @NonNull String filter)",
    "returnType" : "String",
    "comment" : "\n     * Matches multiple MIME types against an array of MIME type filters.\n     * @return The first matching MIME type, or null if nothing matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] matchesMany(@Nullable String[] mimeTypes, @NonNull String filter)",
    "returnType" : "String[]",
    "comment" : "\n     * Matches multiple MIME types against an array of MIME type filters.\n     * @return The list of matching MIME types, or empty array if nothing matches.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "private static boolean mimeTypeAgainstFilter(@NonNull String[] mimeTypeParts, @NonNull String[] filterParts)", "public static boolean matches(@Nullable String mimeType, @NonNull String filter)", "public static String matches(@Nullable String mimeType, @NonNull String[] filters)", "public static String matches(@Nullable String[] mimeTypes, @NonNull String filter)", "public static String[] matchesMany(@Nullable String[] mimeTypes, @NonNull String filter)" ]
}