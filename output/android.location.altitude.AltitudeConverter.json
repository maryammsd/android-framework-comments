{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/altitude/AltitudeConverter.java",
  "packageName" : "android.location.altitude",
  "className" : "AltitudeConverter",
  "comment" : "\n * Converts altitudes reported above the World Geodetic System 1984 (WGS84) reference ellipsoid\n * into ones above Mean Sea Level.\n *\n * <p>Reference:\n *\n * <pre>\n * Brian Julian and Michael Angermann.\n * \"Resource efficient and accurate altitude conversion to Mean Sea Level.\"\n * 2023 IEEE/ION Position, Location and Navigation Symposium (PLANS).\n * </pre>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_ABS_VALID_LATITUDE",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ABS_VALID_LONGITUDE",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGeoidMap",
    "type" : "GeoidMap",
    "comment" : " Manages a mapping of geoid heights and expiration distances associated with S2 cells. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void validate(@NonNull Location location)",
    "returnType" : "void",
    "comment" : "\n     * Throws an {@link IllegalArgumentException} if the {@code location} has an invalid latitude,\n     * longitude, or altitude above WGS84.\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "private static boolean isFiniteAndAtAbsMost(double value, double rhs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long[] findMapSquare(@NonNull MapParamsProto geoidHeightParams, @NonNull Location location)",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the four S2 cell IDs for the map square associated with the {@code location}.\n     *\n     * <p>The first map cell, denoted z11 in the appendix of the referenced paper above, contains\n     * the location. The others are the map cells denoted z21, z12, and z22, in that order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long findCommonNeighbor(long[] edgeNeighbors, long[] otherEdgeNeighbors, long z11)",
    "returnType" : "long",
    "comment" : "\n     * Returns the first common non-z11 neighbor found between the two arrays of edge neighbors. If\n     * such a common neighbor does not exist, returns z11.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void addMslAltitude(@NonNull MapParamsProto geoidHeightParams, @NonNull double[] geoidHeightsMeters, @NonNull Location location)",
    "returnType" : "void",
    "comment" : "\n     * Adds to {@code location} the bilinearly interpolated Mean Sea Level altitude. In addition, a\n     * Mean Sea Level altitude accuracy is added if the {@code location} has a valid vertical\n     * accuracy; otherwise, does not add a corresponding accuracy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addMslAltitudeToLocation(@NonNull Context context, @NonNull Location location) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Adds a Mean Sea Level altitude to the {@code location}. In addition, adds a Mean Sea Level\n     * altitude accuracy if the {@code location} has a finite and non-negative vertical accuracy;\n     * otherwise, does not add a corresponding accuracy.\n     *\n     * <p>Must be called off the main thread as data may be loaded from raw assets.\n     *\n     * @throws IOException              if an I/O error occurs when loading data from raw assets.\n     * @throws IllegalArgumentException if the {@code location} has an invalid latitude, longitude,\n     *                                  or altitude above WGS84. Specifically, the latitude must be\n     *                                  between -90 and 90 (both inclusive), the longitude must be\n     *                                  between -180 and 180 (both inclusive), and the altitude\n     *                                  above WGS84 must be finite.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean tryAddMslAltitudeToLocation(@NonNull Location location)",
    "returnType" : "boolean",
    "comment" : "\n     * Same as {@link #addMslAltitudeToLocation(Context, Location)} except that this method can be\n     * called on the main thread as data will not be loaded from raw assets. Returns true if a Mean\n     * Sea Level altitude is added to the {@code location}; otherwise, returns false and leaves the\n     * {@code location} unchanged.\n     *\n     * <p>Prior calls to {@link #addMslAltitudeToLocation(Context, Location)} off the main thread\n     * are necessary to load data from raw assets. Example code on the main thread is as follows:\n     *\n     * <pre>{@code\n     *   if (!mAltitudeConverter.tryAddMslAltitudeToLocation(location)) {\n     *       // Queue up only one call off the main thread.\n     *       if (mIsAltitudeConverterIdle) {\n     *           mIsAltitudeConverterIdle = false;\n     *           executeOffMainThread(() -> {\n     *               try {\n     *                   // Load raw assets for next call attempt on main thread.\n     *                   mAltitudeConverter.addMslAltitudeToLocation(mContext, location);\n     *               } catch (IOException e) {\n     *                   Log.e(TAG, \"Not loading raw assets: \" + e);\n     *               }\n     *               mIsAltitudeConverterIdle = true;\n     *           });\n     *       }\n     *   }\n     * }</pre>\n     ",
    "links" : [ "#addMslAltitudeToLocation(Context" ]
  }, {
    "name" : "public GetGeoidHeightResponse getGeoidHeight(@NonNull Context context, @NonNull GetGeoidHeightRequest request) throws IOException",
    "returnType" : "GetGeoidHeightResponse",
    "comment" : "\n     * Returns the geoid height (a.k.a. geoid undulation) at the location specified in {@code\n     * request}. The geoid height at a location is defined as the difference between an altitude\n     * measured above the World Geodetic System 1984 reference ellipsoid (WGS84) and its\n     * corresponding Mean Sea Level altitude.\n     *\n     * <p>Must be called off the main thread as data may be loaded from raw assets.\n     *\n     * @throws IOException              if an I/O error occurs when loading data from raw assets.\n     * @throws IllegalArgumentException if the {@code request} has an invalid latitude or longitude.\n     *                                  Specifically, the latitude must be between -90 and 90 (both\n     *                                  inclusive), and the longitude must be between -180 and 180\n     *                                  (both inclusive).\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void validate(@NonNull Location location)", "private static boolean isFiniteAndAtAbsMost(double value, double rhs)", "private static long[] findMapSquare(@NonNull MapParamsProto geoidHeightParams, @NonNull Location location)", "private static long findCommonNeighbor(long[] edgeNeighbors, long[] otherEdgeNeighbors, long z11)", "private static void addMslAltitude(@NonNull MapParamsProto geoidHeightParams, @NonNull double[] geoidHeightsMeters, @NonNull Location location)", "public void addMslAltitudeToLocation(@NonNull Context context, @NonNull Location location) throws IOException", "public boolean tryAddMslAltitudeToLocation(@NonNull Location location)", "public GetGeoidHeightResponse getGeoidHeight(@NonNull Context context, @NonNull GetGeoidHeightRequest request) throws IOException" ],
  "variableNames" : [ "MAX_ABS_VALID_LATITUDE", "MAX_ABS_VALID_LONGITUDE", "mGeoidMap" ]
}