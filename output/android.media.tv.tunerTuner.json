{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/tuner/Tuner.java",
  "packageName" : "android.media.tv.tuner",
  "className" : "Tuner",
  "comment" : "\n * This class is used to interact with hardware tuners devices.\n *\n * <p> Each TvInputService Session should create one instance of this class.\n *\n * <p> This class controls the TIS interaction with Tuner HAL.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "INVALID_TS_PID",
    "type" : "int",
    "comment" : "\n     * Invalid TS packet ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_STREAM_ID",
    "type" : "int",
    "comment" : "\n     * Invalid stream ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_FILTER_ID",
    "type" : "int",
    "comment" : "\n     * Invalid filter ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_AV_SYNC_ID",
    "type" : "int",
    "comment" : "\n     * Invalid AV Sync ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_TIMESTAMP",
    "type" : "long",
    "comment" : "\n     * Invalid timestamp.\n     *\n     * <p>Returned by {@link android.media.tv.tuner.filter.TimeFilter#getSourceTime()},\n     * {@link android.media.tv.tuner.filter.TimeFilter#getTimeStamp()}, or\n     * {@link Tuner#getAvSyncTime(int)} when the requested timestamp is not available.\n     *\n     * @see android.media.tv.tuner.filter.TimeFilter#getSourceTime()\n     * @see android.media.tv.tuner.filter.TimeFilter#getTimeStamp()\n     * @see Tuner#getAvSyncTime(int)\n     ",
    "links" : [ "android.media.tv.tuner.filter.TimeFilter#getSourceTime", "android.media.tv.tuner.filter.TimeFilter#getTimeStamp", "Tuner#getAvSyncTime" ]
  }, {
    "name" : "SCAN_TYPE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Scan type undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_AUTO",
    "type" : "int",
    "comment" : "\n     * Scan type auto.\n     *\n     * <p> Tuner will send {@link android.media.tv.tuner.frontend.ScanCallback#onLocked}\n     ",
    "links" : [ "android.media.tv.tuner.frontend.ScanCallback#onLocked" ]
  }, {
    "name" : "SCAN_TYPE_BLIND",
    "type" : "int",
    "comment" : "\n     * Blind scan.\n     *\n     * <p>Frequency range is not specified. The {@link android.media.tv.tuner.Tuner} will scan an\n     * implementation specific range.\n     ",
    "links" : [ "android.media.tv.tuner.Tuner" ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Operation succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Operation failed because the corresponding resources are not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_NOT_INITIALIZED",
    "type" : "int",
    "comment" : "\n     * Operation failed because the corresponding resources are not initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_INVALID_STATE",
    "type" : "int",
    "comment" : "\n     * Operation failed because it's not in a valid state.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_INVALID_ARGUMENT",
    "type" : "int",
    "comment" : "\n     * Operation failed because there are invalid arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_OUT_OF_MEMORY",
    "type" : "int",
    "comment" : "\n     * Memory allocation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_UNKNOWN_ERROR",
    "type" : "int",
    "comment" : "\n     * Operation failed due to unknown errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_RESOURCE_LOST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ON_FILTER_EVENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ON_FILTER_STATUS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ON_LNB_EVENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DVR_TYPE_RECORD",
    "type" : "int",
    "comment" : "\n     * DVR for recording.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DVR_TYPE_PLAYBACK",
    "type" : "int",
    "comment" : "\n     * DVR for playback of recorded programs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTunerResourceManager",
    "type" : "TunerResourceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrontend",
    "type" : "Frontend",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "EventHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrontendInfo",
    "type" : "FrontendInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrontendHandle",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrontendType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLnb",
    "type" : "Lnb",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLnbHandle",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTuneEventListener",
    "type" : "OnTuneEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTunerEventExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanCallback",
    "type" : "ScanCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnResourceLostListener",
    "type" : "OnResourceLostListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnResourceLostListenerExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDemuxHandle",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescramblers",
    "type" : "Map<Integer, Descrambler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilters",
    "type" : "List<Filter>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceListener",
    "type" : "TunerResourceManager.ResourcesReclaimListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : " used by native jMediaTuner",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setFrontendInfoList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getFrontendIds()",
    "returnType" : "List<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void setLnbIds()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setResourceLostListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnResourceLostListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener for resource lost.\n     *\n     * @param executor the executor on which the listener should be invoked.\n     * @param listener the listener that will be run.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearResourceLostListener()",
    "returnType" : "void",
    "comment" : "\n     * Removes the listener for resource lost.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shareFrontendFromTuner(@NonNull Tuner tuner)",
    "returnType" : "void",
    "comment" : "\n     * Shares the frontend resource with another Tuner instance\n     *\n     * @param tuner the Tuner instance to share frontend resource with.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateResourcePriority(int priority, int niceValue)",
    "returnType" : "void",
    "comment" : "\n     * Updates client priority with an arbitrary value along with a nice value.\n     *\n     * <p>Tuner resource manager (TRM) uses the client priority value to decide whether it is able\n     * to reclaim insufficient resources from another client.\n     * <p>The nice value represents how much the client intends to give up the resource when an\n     * insufficient resource situation happens.\n     *\n     * @param priority the new priority.\n     * @param niceValue the nice value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Releases the Tuner instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeInit()",
    "returnType" : "void",
    "comment" : "\n     * Native Initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void nativeSetup()",
    "returnType" : "void",
    "comment" : "\n     * Native setup.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native List<Integer> nativeGetFrontendIds()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Native method to get all frontend IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native Frontend nativeOpenFrontendByHandle(int handle)",
    "returnType" : "Frontend",
    "comment" : "\n     * Native method to open frontend of the given ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native int nativeCloseFrontendByHandle(int handle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeTune(int type, FrontendSettings settings)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStopTune()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeScan(int settingsType, FrontendSettings settings, int scanType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStopScan()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetLnb(int lnbId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetLna(boolean enable)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native FrontendStatus nativeGetFrontendStatus(int[] statusTypes)",
    "returnType" : "FrontendStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Integer nativeGetAvSyncHwId(Filter filter)",
    "returnType" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Long nativeGetAvSyncTime(int avSyncId)",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeConnectCiCam(int ciCamId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeDisconnectCiCam()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native FrontendInfo nativeGetFrontendInfo(int id)",
    "returnType" : "FrontendInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Filter nativeOpenFilter(int type, int subType, long bufferSize)",
    "returnType" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native TimeFilter nativeOpenTimeFilter()",
    "returnType" : "TimeFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int[] nativeGetLnbIds()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Lnb nativeOpenLnbByHandle(int handle)",
    "returnType" : "Lnb",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Lnb nativeOpenLnbByName(String name)",
    "returnType" : "Lnb",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Descrambler nativeOpenDescramblerByHandle(int handle)",
    "returnType" : "Descrambler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeOpenDemuxByhandle(int handle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DvrRecorder nativeOpenDvrRecorder(long bufferSize)",
    "returnType" : "DvrRecorder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DvrPlayback nativeOpenDvrPlayback(long bufferSize)",
    "returnType" : "DvrPlayback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DemuxCapabilities nativeGetDemuxCapabilities()",
    "returnType" : "DemuxCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeCloseDemux(int handle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeCloseFrontend(int handle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private EventHandler createEventHandler()",
    "returnType" : "EventHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnTuneEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnTuneEventListener eventListener)",
    "returnType" : "void",
    "comment" : "\n     * Listens for tune events.\n     *\n     * <p>\n     * Tuner events are started when {@link #tune(FrontendSettings)} is called and end when {@link\n     * #cancelTuning()} is called.\n     *\n     * @param eventListener receives tune events.\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     * @see #tune(FrontendSettings)\n     ",
    "links" : [ "#tune" ]
  }, {
    "name" : "public void clearOnTuneEventListener()",
    "returnType" : "void",
    "comment" : "\n     * Clears the {@link OnTuneEventListener} and its associated {@link Executor}.\n     *\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     * @see #setOnTuneEventListener(Executor, OnTuneEventListener)\n     ",
    "links" : [ "OnTuneEventListener", "Executor" ]
  }, {
    "name" : "public int tune(@NonNull FrontendSettings settings)",
    "returnType" : "int",
    "comment" : "\n     * Tunes the frontend to using the settings given.\n     *\n     * <p>Tuner resource manager (TRM) uses the client priority value to decide whether it is able\n     * to get frontend resource. If the client can't get the resource, this call returns {@link\n     * Result#RESULT_UNAVAILABLE}.\n     *\n     * <p>\n     * This locks the frontend to a frequency by providing signal\n     * delivery information. If previous tuning isn't completed, this stop the previous tuning, and\n     * start a new tuning.\n     *\n     * <p>\n     * Tune is an async call, with {@link OnTuneEventListener#SIGNAL_LOCKED} and {@link\n     * OnTuneEventListener#SIGNAL_NO_SIGNAL} events sent to the {@link OnTuneEventListener}\n     * specified in {@link #setOnTuneEventListener(Executor, OnTuneEventListener)}.\n     *\n     * @param settings Signal delivery information the frontend uses to\n     *                 search and lock the signal.\n     * @return result status of tune operation.\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     * @see #setOnTuneEventListener(Executor, OnTuneEventListener)\n     ",
    "links" : [ "OnTuneEventListener#SIGNAL_LOCKED", "OnTuneEventListener", "#setOnTuneEventListener" ]
  }, {
    "name" : "public int cancelTuning()",
    "returnType" : "int",
    "comment" : "\n     * Stops a previous tuning.\n     *\n     * <p>If the method completes successfully, the frontend is no longer tuned and no data\n     * will be sent to attached filters.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int scan(@NonNull FrontendSettings settings, @ScanType int scanType, @NonNull @CallbackExecutor Executor executor, @NonNull ScanCallback scanCallback)",
    "returnType" : "int",
    "comment" : "\n     * Scan for channels.\n     *\n     * <p>Details for channels found are returned via {@link ScanCallback}.\n     *\n     * @param settings A {@link FrontendSettings} to configure the frontend.\n     * @param scanType The scan type.\n     * @throws SecurityException     if the caller does not have appropriate permissions.\n     * @throws IllegalStateException if {@code scan} is called again before\n     *                               {@link #cancelScanning()} is called.\n     ",
    "links" : [ "ScanCallback", "FrontendSettings", "#cancelScanning" ]
  }, {
    "name" : "public int cancelScanning()",
    "returnType" : "int",
    "comment" : "\n     * Stops a previous scanning.\n     *\n     * <p>\n     * The {@link ScanCallback} and it's {@link Executor} will be removed.\n     *\n     * <p>\n     * If the method completes successfully, the frontend stopped previous scanning.\n     *\n     * @throws SecurityException if the caller does not have appropriate permissions.\n     ",
    "links" : [ "ScanCallback", "Executor" ]
  }, {
    "name" : "private boolean requestFrontend()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int setLnb(@NonNull Lnb lnb)",
    "returnType" : "int",
    "comment" : "\n     * Sets Low-Noise Block downconverter (LNB) for satellite frontend.\n     *\n     * <p>This assigns a hardware LNB resource to the satellite tuner. It can be\n     * called multiple times to update LNB assignment.\n     *\n     * @param lnb the LNB instance.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setLnaEnabled(boolean enable)",
    "returnType" : "int",
    "comment" : "\n     * Enable or Disable Low Noise Amplifier (LNA).\n     *\n     * @param enable {@code true} to activate LNA module; {@code false} to deactivate LNA.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FrontendStatus getFrontendStatus(@NonNull @FrontendStatusType int[] statusTypes)",
    "returnType" : "FrontendStatus",
    "comment" : "\n     * Gets the statuses of the frontend.\n     *\n     * <p>This retrieve the statuses of the frontend for given status types.\n     *\n     * @param statusTypes an array of status types which the caller requests.\n     * @return statuses which response the caller's requests. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAvSyncHwId(@NonNull Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Gets hardware sync ID for audio and video.\n     *\n     * @param filter the filter instance for the hardware sync ID.\n     * @return the id of hardware A/V sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAvSyncTime(int avSyncHwId)",
    "returnType" : "long",
    "comment" : "\n     * Gets the current timestamp for Audio/Video sync\n     *\n     * <p>The timestamp is maintained by hardware. The timestamp based on 90KHz, and it's format is\n     * the same as PTS (Presentation Time Stamp).\n     *\n     * @param avSyncHwId the hardware id of A/V sync.\n     * @return the current timestamp of hardware A/V sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int connectCiCam(int ciCamId)",
    "returnType" : "int",
    "comment" : "\n     * Connects Conditional Access Modules (CAM) through Common Interface (CI)\n     *\n     * <p>The demux uses the output from the frontend as the input by default, and must change to\n     * use the output from CI-CAM as the input after this call.\n     *\n     * @param ciCamId specify CI-CAM Id to connect.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int disconnectCiCam()",
    "returnType" : "int",
    "comment" : "\n     * Disconnects Conditional Access Modules (CAM)\n     *\n     * <p>The demux will use the output from the frontend as the input after this call.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FrontendInfo getFrontendInfo()",
    "returnType" : "FrontendInfo",
    "comment" : "\n     * Gets the frontend information.\n     *\n     * @return The frontend information. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FrontendInfo getFrontendInfoById(int id)",
    "returnType" : "FrontendInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public DemuxCapabilities getDemuxCapabilities()",
    "returnType" : "DemuxCapabilities",
    "comment" : "\n     * Gets Demux capabilities.\n     *\n     * @return A {@link DemuxCapabilities} instance that represents the demux capabilities.\n     *         {@code null} if the operation failed.\n     ",
    "links" : [ "DemuxCapabilities" ]
  }, {
    "name" : "private void onFrontendEvent(int eventType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onScanStopped()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onProgress(int percent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onFrequenciesReport(int[] frequency)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSymbolRates(int[] rate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onHierarchy(int hierarchy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSignalType(int signalType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onPlpIds(int[] plpIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onGroupIds(int[] groupIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onInputStreamIds(int[] inputStreamIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onDvbsStandard(int dvbsStandandard)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onDvbtStandard(int dvbtStandard)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onAnalogSifStandard(int sif)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onAtsc3PlpInfos(Atsc3PlpInfo[] atsc3PlpInfos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Filter openFilter(@Type int mainType, @Subtype int subType, @BytesLong long bufferSize, @CallbackExecutor @Nullable Executor executor, @Nullable FilterCallback cb)",
    "returnType" : "Filter",
    "comment" : "\n     * Opens a filter object based on the given types and buffer size.\n     *\n     * @param mainType the main type of the filter.\n     * @param subType the subtype of the filter.\n     * @param bufferSize the buffer size of the filter to be opened in bytes. The buffer holds the\n     * data output from the filter.\n     * @param executor the executor on which callback will be invoked. The default event handler\n     * executor is used if it's {@code null}.\n     * @param cb the callback to receive notifications from filter.\n     * @return the opened filter. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Lnb openLnb(@CallbackExecutor @NonNull Executor executor, @NonNull LnbCallback cb)",
    "returnType" : "Lnb",
    "comment" : "\n     * Opens an LNB (low-noise block downconverter) object.\n     *\n     * <p>If there is an existing Lnb object, it will be replace by the newly opened one.\n     *\n     * @param executor the executor on which callback will be invoked. The default event handler\n     * executor is used if it's {@code null}.\n     * @param cb the callback to receive notifications from LNB.\n     * @return the opened LNB object. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Lnb openLnbByName(@NonNull String name, @CallbackExecutor @NonNull Executor executor, @NonNull LnbCallback cb)",
    "returnType" : "Lnb",
    "comment" : "\n     * Opens an LNB (low-noise block downconverter) object specified by the give name.\n     *\n     * @param name the LNB name.\n     * @param executor the executor on which callback will be invoked. The default event handler\n     * executor is used if it's {@code null}.\n     * @param cb the callback to receive notifications from LNB.\n     * @return the opened LNB object. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean requestLnb()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TimeFilter openTimeFilter()",
    "returnType" : "TimeFilter",
    "comment" : "\n     * Open a time filter object.\n     *\n     * @return the opened time filter object. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Descrambler openDescrambler()",
    "returnType" : "Descrambler",
    "comment" : "\n     * Opens a Descrambler in tuner.\n     *\n     * @return  a {@link Descrambler} object.\n     ",
    "links" : [ "Descrambler" ]
  }, {
    "name" : "public DvrRecorder openDvrRecorder(@BytesLong long bufferSize, @CallbackExecutor @NonNull Executor executor, @NonNull OnRecordStatusChangedListener l)",
    "returnType" : "DvrRecorder",
    "comment" : "\n     * Open a DVR (Digital Video Record) recorder instance.\n     *\n     * @param bufferSize the buffer size of the output in bytes. It's used to hold output data of\n     * the attached filters.\n     * @param executor the executor on which callback will be invoked. The default event handler\n     * executor is used if it's {@code null}.\n     * @param l the listener to receive notifications from DVR recorder.\n     * @return the opened DVR recorder object. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DvrPlayback openDvrPlayback(@BytesLong long bufferSize, @CallbackExecutor @NonNull Executor executor, @NonNull OnPlaybackStatusChangedListener l)",
    "returnType" : "DvrPlayback",
    "comment" : "\n     * Open a DVR (Digital Video Record) playback instance.\n     *\n     * @param bufferSize the buffer size of the output in bytes. It's used to hold output data of\n     * the attached filters.\n     * @param executor the executor on which callback will be invoked. The default event handler\n     * executor is used if it's {@code null}.\n     * @param l the listener to receive notifications from DVR recorder.\n     * @return the opened DVR playback object. {@code null} if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean requestDemux()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Descrambler requestDescrambler()",
    "returnType" : "Descrambler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkResource(int resourceType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void releaseLnb()",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  } ],
  "variableNames" : [ "INVALID_TS_PID", "INVALID_STREAM_ID", "INVALID_FILTER_ID", "INVALID_AV_SYNC_ID", "INVALID_TIMESTAMP", "SCAN_TYPE_UNDEFINED", "SCAN_TYPE_AUTO", "SCAN_TYPE_BLIND", "RESULT_SUCCESS", "RESULT_UNAVAILABLE", "RESULT_NOT_INITIALIZED", "RESULT_INVALID_STATE", "RESULT_INVALID_ARGUMENT", "RESULT_OUT_OF_MEMORY", "RESULT_UNKNOWN_ERROR", "TAG", "DEBUG", "MSG_RESOURCE_LOST", "MSG_ON_FILTER_EVENT", "MSG_ON_FILTER_STATUS", "MSG_ON_LNB_EVENT", "DVR_TYPE_RECORD", "DVR_TYPE_PLAYBACK", "mContext", "mTunerResourceManager", "mClientId", "mFrontend", "mHandler", "mFrontendInfo", "mFrontendHandle", "mFrontendType", "mUserId", "mLnb", "mLnbHandle", "mOnTuneEventListener", "mOnTunerEventExecutor", "mScanCallback", "mScanCallbackExecutor", "mOnResourceLostListener", "mOnResourceLostListenerExecutor", "mDemuxHandle", "mDescramblers", "mFilters", "mResourceListener", "mNativeContext" ],
  "methodNames" : [ "private void setFrontendInfoList()", "public List<Integer> getFrontendIds()", "private void setLnbIds()", "public void setResourceLostListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnResourceLostListener listener)", "public void clearResourceLostListener()", "public void shareFrontendFromTuner(@NonNull Tuner tuner)", "public void updateResourcePriority(int priority, int niceValue)", "public void close()", "private static native void nativeInit()", "private native void nativeSetup()", "private native List<Integer> nativeGetFrontendIds()", "private native Frontend nativeOpenFrontendByHandle(int handle)", "private native int nativeCloseFrontendByHandle(int handle)", "private native int nativeTune(int type, FrontendSettings settings)", "private native int nativeStopTune()", "private native int nativeScan(int settingsType, FrontendSettings settings, int scanType)", "private native int nativeStopScan()", "private native int nativeSetLnb(int lnbId)", "private native int nativeSetLna(boolean enable)", "private native FrontendStatus nativeGetFrontendStatus(int[] statusTypes)", "private native Integer nativeGetAvSyncHwId(Filter filter)", "private native Long nativeGetAvSyncTime(int avSyncId)", "private native int nativeConnectCiCam(int ciCamId)", "private native int nativeDisconnectCiCam()", "private native FrontendInfo nativeGetFrontendInfo(int id)", "private native Filter nativeOpenFilter(int type, int subType, long bufferSize)", "private native TimeFilter nativeOpenTimeFilter()", "private native int[] nativeGetLnbIds()", "private native Lnb nativeOpenLnbByHandle(int handle)", "private native Lnb nativeOpenLnbByName(String name)", "private native Descrambler nativeOpenDescramblerByHandle(int handle)", "private native int nativeOpenDemuxByhandle(int handle)", "private native DvrRecorder nativeOpenDvrRecorder(long bufferSize)", "private native DvrPlayback nativeOpenDvrPlayback(long bufferSize)", "private native DemuxCapabilities nativeGetDemuxCapabilities()", "private native int nativeCloseDemux(int handle)", "private native int nativeCloseFrontend(int handle)", "private native int nativeClose()", "private EventHandler createEventHandler()", "public void setOnTuneEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnTuneEventListener eventListener)", "public void clearOnTuneEventListener()", "public int tune(@NonNull FrontendSettings settings)", "public int cancelTuning()", "public int scan(@NonNull FrontendSettings settings, @ScanType int scanType, @NonNull @CallbackExecutor Executor executor, @NonNull ScanCallback scanCallback)", "public int cancelScanning()", "private boolean requestFrontend()", "private int setLnb(@NonNull Lnb lnb)", "public int setLnaEnabled(boolean enable)", "public FrontendStatus getFrontendStatus(@NonNull @FrontendStatusType int[] statusTypes)", "public int getAvSyncHwId(@NonNull Filter filter)", "public long getAvSyncTime(int avSyncHwId)", "public int connectCiCam(int ciCamId)", "public int disconnectCiCam()", "public FrontendInfo getFrontendInfo()", "public FrontendInfo getFrontendInfoById(int id)", "public DemuxCapabilities getDemuxCapabilities()", "private void onFrontendEvent(int eventType)", "private void onLocked()", "private void onScanStopped()", "private void onProgress(int percent)", "private void onFrequenciesReport(int[] frequency)", "private void onSymbolRates(int[] rate)", "private void onHierarchy(int hierarchy)", "private void onSignalType(int signalType)", "private void onPlpIds(int[] plpIds)", "private void onGroupIds(int[] groupIds)", "private void onInputStreamIds(int[] inputStreamIds)", "private void onDvbsStandard(int dvbsStandandard)", "private void onDvbtStandard(int dvbtStandard)", "private void onAnalogSifStandard(int sif)", "private void onAtsc3PlpInfos(Atsc3PlpInfo[] atsc3PlpInfos)", "public Filter openFilter(@Type int mainType, @Subtype int subType, @BytesLong long bufferSize, @CallbackExecutor @Nullable Executor executor, @Nullable FilterCallback cb)", "public Lnb openLnb(@CallbackExecutor @NonNull Executor executor, @NonNull LnbCallback cb)", "public Lnb openLnbByName(@NonNull String name, @CallbackExecutor @NonNull Executor executor, @NonNull LnbCallback cb)", "private boolean requestLnb()", "public TimeFilter openTimeFilter()", "public Descrambler openDescrambler()", "public DvrRecorder openDvrRecorder(@BytesLong long bufferSize, @CallbackExecutor @NonNull Executor executor, @NonNull OnRecordStatusChangedListener l)", "public DvrPlayback openDvrPlayback(@BytesLong long bufferSize, @CallbackExecutor @NonNull Executor executor, @NonNull OnPlaybackStatusChangedListener l)", "private boolean requestDemux()", "private Descrambler requestDescrambler()", "private boolean checkResource(int resourceType)", " void releaseLnb()" ]
}