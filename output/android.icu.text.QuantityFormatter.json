{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/QuantityFormatter.java",
  "packageName" : "android.icu.text",
  "className" : "QuantityFormatter",
  "comment" : "\n * QuantityFormatter represents an unknown quantity of something and formats a known quantity\n * in terms of that something. For example, a QuantityFormatter that represents X apples may\n * format 1 as \"1 apple\" and 3 as \"3 apples\"\n * <p>\n * QuanitityFormatter appears here instead of in android.icu.impl because it depends on\n * PluralRules and DecimalFormat. It is package-protected as it is not meant for public use.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "templates",
    "type" : "SimpleFormatter[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addIfAbsent(CharSequence variant, String template)",
    "returnType" : "void",
    "comment" : "\n     * Adds a template if there is none yet for the plural form.\n     *\n     * @param variant the plural variant, e.g \"zero\", \"one\", \"two\", \"few\", \"many\", \"other\"\n     * @param template the text for that plural variant with \"{0}\" as the quantity. For\n     * example, in English, the template for the \"one\" variant may be \"{0} apple\" while the\n     * template for the \"other\" variant may be \"{0} apples\"\n     * @throws IllegalArgumentException if variant is not recognized or\n     *  if template has more than just the {0} placeholder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this object has at least the \"other\" variant\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format(double number, NumberFormat numberFormat, PluralRules pluralRules)",
    "returnType" : "String",
    "comment" : "\n     * Format formats a number with this object.\n     * @param number the number to be formatted\n     * @param numberFormat used to actually format the number.\n     * @param pluralRules uses the number and the numberFormat to determine what plural\n     *  variant to use for fetching the formatting template.\n     * @return the formatted string e.g '3 apples'\n     ",
    "links" : [ ]
  }, {
    "name" : "public SimpleFormatter getByVariant(CharSequence variant)",
    "returnType" : "SimpleFormatter",
    "comment" : "\n     * Gets the SimpleFormatter for a particular variant.\n     * @param variant \"zero\", \"one\", \"two\", \"few\", \"many\", \"other\"\n     * @return the SimpleFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StandardPlural selectPlural(double number, NumberFormat numberFormat, PluralRules rules)",
    "returnType" : "StandardPlural",
    "comment" : "\n     * Selects the standard plural form for the number/formatter/rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StringBuilder format(String compiledPattern, CharSequence value, StringBuilder appendTo, FieldPosition pos)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats the pattern with the value and adjusts the FieldPosition.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addIfAbsent(CharSequence variant, String template)", "public boolean isValid()", "public String format(double number, NumberFormat numberFormat, PluralRules pluralRules)", "public SimpleFormatter getByVariant(CharSequence variant)", "public static StandardPlural selectPlural(double number, NumberFormat numberFormat, PluralRules rules)", "public static StringBuilder format(String compiledPattern, CharSequence value, StringBuilder appendTo, FieldPosition pos)" ],
  "variableNames" : [ "templates" ]
}