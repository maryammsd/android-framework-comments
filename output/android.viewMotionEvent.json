{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/MotionEvent.java",
  "packageName" : "android.view",
  "className" : "MotionEvent",
  "comment" : "\n * Object used to report movement (mouse, pen, finger, trackball) events.\n * Motion events may hold either absolute or relative movements and other data,\n * depending on the type of device.\n *\n * <h3>Overview</h3>\n * <p>\n * Motion events describe movements in terms of an action code and a set of axis values.\n * The action code specifies the state change that occurred such as a pointer going\n * down or up.  The axis values describe the position and other movement properties.\n * </p><p>\n * For example, when the user first touches the screen, the system delivers a touch\n * event to the appropriate {@link View} with the action code {@link #ACTION_DOWN}\n * and a set of axis values that include the X and Y coordinates of the touch and\n * information about the pressure, size and orientation of the contact area.\n * </p><p>\n * Some devices can report multiple movement traces at the same time.  Multi-touch\n * screens emit one movement trace for each finger.  The individual fingers or\n * other objects that generate movement traces are referred to as <em>pointers</em>.\n * Motion events contain information about all of the pointers that are currently active\n * even if some of them have not moved since the last event was delivered.\n * </p><p>\n * The number of pointers only ever changes by one as individual pointers go up and down,\n * except when the gesture is canceled.\n * </p><p>\n * Each pointer has a unique id that is assigned when it first goes down\n * (indicated by {@link #ACTION_DOWN} or {@link #ACTION_POINTER_DOWN}).  A pointer id\n * remains valid until the pointer eventually goes up (indicated by {@link #ACTION_UP}\n * or {@link #ACTION_POINTER_UP}) or when the gesture is canceled (indicated by\n * {@link #ACTION_CANCEL}).\n * </p><p>\n * The MotionEvent class provides many methods to query the position and other properties of\n * pointers, such as {@link #getX(int)}, {@link #getY(int)}, {@link #getAxisValue},\n * {@link #getPointerId(int)}, {@link #getToolType(int)}, and many others.  Most of these\n * methods accept the pointer index as a parameter rather than the pointer id.\n * The pointer index of each pointer in the event ranges from 0 to one less than the value\n * returned by {@link #getPointerCount()}.\n * </p><p>\n * The order in which individual pointers appear within a motion event is undefined.\n * Thus the pointer index of a pointer can change from one event to the next but\n * the pointer id of a pointer is guaranteed to remain constant as long as the pointer\n * remains active.  Use the {@link #getPointerId(int)} method to obtain the\n * pointer id of a pointer to track it across all subsequent motion events in a gesture.\n * Then for successive motion events, use the {@link #findPointerIndex(int)} method\n * to obtain the pointer index for a given pointer id in that motion event.\n * </p><p>\n * Mouse and stylus buttons can be retrieved using {@link #getButtonState()}.  It is a\n * good idea to check the button state while handling {@link #ACTION_DOWN} as part\n * of a touch event.  The application may choose to perform some different action\n * if the touch event starts due to a secondary button click, such as presenting a\n * context menu.\n * </p>\n *\n * <h3>Batching</h3>\n * <p>\n * For efficiency, motion events with {@link #ACTION_MOVE} may batch together\n * multiple movement samples within a single object.  The most current\n * pointer coordinates are available using {@link #getX(int)} and {@link #getY(int)}.\n * Earlier coordinates within the batch are accessed using {@link #getHistoricalX(int, int)}\n * and {@link #getHistoricalY(int, int)}.  The coordinates are \"historical\" only\n * insofar as they are older than the current coordinates in the batch; however,\n * they are still distinct from any other coordinates reported in prior motion events.\n * To process all coordinates in the batch in time order, first consume the historical\n * coordinates then consume the current coordinates.\n * </p><p>\n * Example: Consuming all samples for all pointers in a motion event in time order.\n * </p><p><pre><code>\n * void printSamples(MotionEvent ev) {\n *     final int historySize = ev.getHistorySize();\n *     final int pointerCount = ev.getPointerCount();\n *     for (int h = 0; h &lt; historySize; h++) {\n *         System.out.printf(\"At time %d:\", ev.getHistoricalEventTime(h));\n *         for (int p = 0; p &lt; pointerCount; p++) {\n *             System.out.printf(\"  pointer %d: (%f,%f)\",\n *                 ev.getPointerId(p), ev.getHistoricalX(p, h), ev.getHistoricalY(p, h));\n *         }\n *     }\n *     System.out.printf(\"At time %d:\", ev.getEventTime());\n *     for (int p = 0; p &lt; pointerCount; p++) {\n *         System.out.printf(\"  pointer %d: (%f,%f)\",\n *             ev.getPointerId(p), ev.getX(p), ev.getY(p));\n *     }\n * }\n * </code></pre></p>\n *\n * <h3>Device Types</h3>\n * <p>\n * The interpretation of the contents of a MotionEvent varies significantly depending\n * on the source class of the device.\n * </p><p>\n * On pointing devices with source class {@link InputDevice#SOURCE_CLASS_POINTER}\n * such as touch screens, the pointer coordinates specify absolute\n * positions such as view X/Y coordinates.  Each complete gesture is represented\n * by a sequence of motion events with actions that describe pointer state transitions\n * and movements.  A gesture starts with a motion event with {@link #ACTION_DOWN}\n * that provides the location of the first pointer down.  As each additional\n * pointer that goes down or up, the framework will generate a motion event with\n * {@link #ACTION_POINTER_DOWN} or {@link #ACTION_POINTER_UP} accordingly.\n * Pointer movements are described by motion events with {@link #ACTION_MOVE}.\n * Finally, a gesture end either when the final pointer goes up as represented\n * by a motion event with {@link #ACTION_UP} or when gesture is canceled\n * with {@link #ACTION_CANCEL}.\n * </p><p>\n * Some pointing devices such as mice may support vertical and/or horizontal scrolling.\n * A scroll event is reported as a generic motion event with {@link #ACTION_SCROLL} that\n * includes the relative scroll offset in the {@link #AXIS_VSCROLL} and\n * {@link #AXIS_HSCROLL} axes.  See {@link #getAxisValue(int)} for information\n * about retrieving these additional axes.\n * </p><p>\n * On trackball devices with source class {@link InputDevice#SOURCE_CLASS_TRACKBALL},\n * the pointer coordinates specify relative movements as X/Y deltas.\n * A trackball gesture consists of a sequence of movements described by motion\n * events with {@link #ACTION_MOVE} interspersed with occasional {@link #ACTION_DOWN}\n * or {@link #ACTION_UP} motion events when the trackball button is pressed or released.\n * </p><p>\n * On joystick devices with source class {@link InputDevice#SOURCE_CLASS_JOYSTICK},\n * the pointer coordinates specify the absolute position of the joystick axes.\n * The joystick axis values are normalized to a range of -1.0 to 1.0 where 0.0 corresponds\n * to the center position.  More information about the set of available axes and the\n * range of motion can be obtained using {@link InputDevice#getMotionRange}.\n * Some common joystick axes are {@link #AXIS_X}, {@link #AXIS_Y},\n * {@link #AXIS_HAT_X}, {@link #AXIS_HAT_Y}, {@link #AXIS_Z} and {@link #AXIS_RZ}.\n * </p><p>\n * Refer to {@link InputDevice} for more information about how different kinds of\n * input devices and sources represent pointer coordinates.\n * </p>\n *\n * <h3>Consistency Guarantees</h3>\n * <p>\n * Motion events are always delivered to views as a consistent stream of events.\n * What constitutes a consistent stream varies depending on the type of device.\n * For touch events, consistency implies that pointers go down one at a time,\n * move around as a group and then go up one at a time or are canceled.\n * </p><p>\n * While the framework tries to deliver consistent streams of motion events to\n * views, it cannot guarantee it.  Some events may be dropped or modified by\n * containing views in the application before they are delivered thereby making\n * the stream of events inconsistent.  Views should always be prepared to\n * handle {@link #ACTION_CANCEL} and should tolerate anomalous\n * situations such as receiving a new {@link #ACTION_DOWN} without first having\n * received an {@link #ACTION_UP} for the prior gesture.\n * </p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NS_PER_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LABEL_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CONCISE_TOSTRING",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_POINTER_ID",
    "type" : "int",
    "comment" : "\n     * An invalid pointer id.\n     *\n     * This value (-1) can be used as a placeholder to indicate that a pointer id\n     * has not been assigned or is not available.  It cannot appear as\n     * a pointer id inside a {@link MotionEvent}.\n     ",
    "links" : [ "MotionEvent" ]
  }, {
    "name" : "ACTION_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask of the parts of the action code that are the action itself.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DOWN",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A pressed gesture has started, the\n     * motion contains the initial starting location.\n     * <p>\n     * This is also a good time to check the button state to distinguish\n     * secondary and tertiary button clicks and handle them appropriately.\n     * Use {@link #getButtonState} to retrieve the button state.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#getButtonState" ]
  }, {
    "name" : "ACTION_UP",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A pressed gesture has finished, the\n     * motion contains the final release location as well as any intermediate\n     * points since the last down or move event.\n     ",
    "links" : [ "#getActionMasked" ]
  }, {
    "name" : "ACTION_MOVE",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A change has happened during a\n     * press gesture (between {@link #ACTION_DOWN} and {@link #ACTION_UP}).\n     * The motion contains the most recent point, as well as any intermediate\n     * points since the last down or move event.\n     ",
    "links" : [ "#getActionMasked", "#ACTION_DOWN", "#ACTION_UP" ]
  }, {
    "name" : "ACTION_CANCEL",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: The current gesture has been aborted.\n     * You will not receive any more points in it.  You should treat this as\n     * an up event, but not perform any action that you normally would.\n     ",
    "links" : [ "#getActionMasked" ]
  }, {
    "name" : "ACTION_OUTSIDE",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A movement has happened outside of the\n     * normal bounds of the UI element.  This does not provide a full gesture,\n     * but only the initial location of the movement/touch.\n     * <p>\n     * Note: Because the location of any event will be outside the\n     * bounds of the view hierarchy, it will not get dispatched to\n     * any children of a ViewGroup by default. Therefore,\n     * movements with ACTION_OUTSIDE should be handled in either the\n     * root {@link View} or in the appropriate {@link Window.Callback}\n     * (e.g. {@link android.app.Activity} or {@link android.app.Dialog}).\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "View", "Window.Callback", "android.app.Activity", "android.app.Dialog" ]
  }, {
    "name" : "ACTION_POINTER_DOWN",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A non-primary pointer has gone down.\n     * <p>\n     * Use {@link #getActionIndex} to retrieve the index of the pointer that changed.\n     * </p><p>\n     * The index is encoded in the {@link #ACTION_POINTER_INDEX_MASK} bits of the\n     * unmasked action returned by {@link #getAction}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#getActionIndex", "#ACTION_POINTER_INDEX_MASK", "#getAction" ]
  }, {
    "name" : "ACTION_POINTER_UP",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A non-primary pointer has gone up.\n     * <p>\n     * Use {@link #getActionIndex} to retrieve the index of the pointer that changed.\n     * </p><p>\n     * The index is encoded in the {@link #ACTION_POINTER_INDEX_MASK} bits of the\n     * unmasked action returned by {@link #getAction}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#getActionIndex", "#ACTION_POINTER_INDEX_MASK", "#getAction" ]
  }, {
    "name" : "ACTION_HOVER_MOVE",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A change happened but the pointer\n     * is not down (unlike {@link #ACTION_MOVE}).  The motion contains the most\n     * recent point, as well as any intermediate points since the last\n     * hover move event.\n     * <p>\n     * This action is always delivered to the window or view under the pointer.\n     * </p><p>\n     * This action is not a touch event so it is delivered to\n     * {@link View#onGenericMotionEvent(MotionEvent)} rather than\n     * {@link View#onTouchEvent(MotionEvent)}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#ACTION_MOVE", "View#onGenericMotionEvent", "View#onTouchEvent" ]
  }, {
    "name" : "ACTION_SCROLL",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: The motion event contains relative\n     * vertical and/or horizontal scroll offsets.  Use {@link #getAxisValue(int)}\n     * to retrieve the information from {@link #AXIS_VSCROLL} and {@link #AXIS_HSCROLL}.\n     * The pointer may or may not be down when this event is dispatched.\n     * <p>\n     * This action is always delivered to the window or view under the pointer, which\n     * may not be the window or view currently touched.\n     * </p><p>\n     * This action is not a touch event so it is delivered to\n     * {@link View#onGenericMotionEvent(MotionEvent)} rather than\n     * {@link View#onTouchEvent(MotionEvent)}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#getAxisValue", "#AXIS_VSCROLL", "#AXIS_HSCROLL", "View#onGenericMotionEvent", "View#onTouchEvent" ]
  }, {
    "name" : "ACTION_HOVER_ENTER",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: The pointer is not down but has entered the\n     * boundaries of a window or view.\n     * <p>\n     * This action is always delivered to the window or view under the pointer.\n     * </p><p>\n     * This action is not a touch event so it is delivered to\n     * {@link View#onGenericMotionEvent(MotionEvent)} rather than\n     * {@link View#onTouchEvent(MotionEvent)}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "View#onGenericMotionEvent", "View#onTouchEvent" ]
  }, {
    "name" : "ACTION_HOVER_EXIT",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: The pointer is not down but has exited the\n     * boundaries of a window or view.\n     * <p>\n     * This action is always delivered to the window or view that was previously under the pointer.\n     * </p><p>\n     * This action is not a touch event so it is delivered to\n     * {@link View#onGenericMotionEvent(MotionEvent)} rather than\n     * {@link View#onTouchEvent(MotionEvent)}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "View#onGenericMotionEvent", "View#onTouchEvent" ]
  }, {
    "name" : "ACTION_BUTTON_PRESS",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A button has been pressed.\n     *\n     * <p>\n     * Use {@link #getActionButton()} to get which button was pressed.\n     * </p><p>\n     * This action is not a touch event so it is delivered to\n     * {@link View#onGenericMotionEvent(MotionEvent)} rather than\n     * {@link View#onTouchEvent(MotionEvent)}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#getActionButton", "View#onGenericMotionEvent", "View#onTouchEvent" ]
  }, {
    "name" : "ACTION_BUTTON_RELEASE",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getActionMasked}: A button has been released.\n     *\n     * <p>\n     * Use {@link #getActionButton()} to get which button was released.\n     * </p><p>\n     * This action is not a touch event so it is delivered to\n     * {@link View#onGenericMotionEvent(MotionEvent)} rather than\n     * {@link View#onTouchEvent(MotionEvent)}.\n     * </p>\n     ",
    "links" : [ "#getActionMasked", "#getActionButton", "View#onGenericMotionEvent", "View#onTouchEvent" ]
  }, {
    "name" : "ACTION_POINTER_INDEX_MASK",
    "type" : "int",
    "comment" : "\n     * Bits in the action code that represent a pointer index, used with\n     * {@link #ACTION_POINTER_DOWN} and {@link #ACTION_POINTER_UP}.  Shifting\n     * down by {@link #ACTION_POINTER_INDEX_SHIFT} provides the actual pointer\n     * index where the data for the pointer going up or down can be found; you can\n     * get its identifier with {@link #getPointerId(int)} and the actual\n     * data with {@link #getX(int)} etc.\n     *\n     * @see #getActionIndex\n     ",
    "links" : [ "#ACTION_POINTER_DOWN", "#ACTION_POINTER_UP", "#ACTION_POINTER_INDEX_SHIFT", "#getPointerId", "#getX" ]
  }, {
    "name" : "ACTION_POINTER_INDEX_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift for the action bits holding the pointer index as\n     * defined by {@link #ACTION_POINTER_INDEX_MASK}.\n     *\n     * @see #getActionIndex\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK" ]
  }, {
    "name" : "ACTION_POINTER_1_DOWN",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the\n     * data index associated with {@link #ACTION_POINTER_DOWN}.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK", "#ACTION_POINTER_DOWN" ]
  }, {
    "name" : "ACTION_POINTER_2_DOWN",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the\n     * data index associated with {@link #ACTION_POINTER_DOWN}.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK", "#ACTION_POINTER_DOWN" ]
  }, {
    "name" : "ACTION_POINTER_3_DOWN",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the\n     * data index associated with {@link #ACTION_POINTER_DOWN}.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK", "#ACTION_POINTER_DOWN" ]
  }, {
    "name" : "ACTION_POINTER_1_UP",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the\n     * data index associated with {@link #ACTION_POINTER_UP}.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK", "#ACTION_POINTER_UP" ]
  }, {
    "name" : "ACTION_POINTER_2_UP",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the\n     * data index associated with {@link #ACTION_POINTER_UP}.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK", "#ACTION_POINTER_UP" ]
  }, {
    "name" : "ACTION_POINTER_3_UP",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the\n     * data index associated with {@link #ACTION_POINTER_UP}.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK", "#ACTION_POINTER_UP" ]
  }, {
    "name" : "ACTION_POINTER_ID_MASK",
    "type" : "int",
    "comment" : "\n     * @deprecated Renamed to {@link #ACTION_POINTER_INDEX_MASK} to match\n     * the actual data contained in these bits.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_MASK" ]
  }, {
    "name" : "ACTION_POINTER_ID_SHIFT",
    "type" : "int",
    "comment" : "\n     * @deprecated Renamed to {@link #ACTION_POINTER_INDEX_SHIFT} to match\n     * the actual data contained in these bits.\n     ",
    "links" : [ "#ACTION_POINTER_INDEX_SHIFT" ]
  }, {
    "name" : "FLAG_WINDOW_IS_OBSCURED",
    "type" : "int",
    "comment" : "\n     * This flag indicates that the window that received this motion event is partly\n     * or wholly obscured by another visible window above it. This flag is set to true\n     * if the event directly passed through the obscured area.\n     *\n     * A security sensitive application can check this flag to identify situations in which\n     * a malicious application may have covered up part of its content for the purpose\n     * of misleading the user or hijacking touches.  An appropriate response might be\n     * to drop the suspect touches or to take additional precautions to confirm the user's\n     * actual intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_WINDOW_IS_PARTIALLY_OBSCURED",
    "type" : "int",
    "comment" : "\n     * This flag indicates that the window that received this motion event is partly\n     * or wholly obscured by another visible window above it. This flag is set to true\n     * even if the event did not directly pass through the obscured area.\n     *\n     * A security sensitive application can check this flag to identify situations in which\n     * a malicious application may have covered up part of its content for the purpose\n     * of misleading the user or hijacking touches.  An appropriate response might be\n     * to drop the suspect touches or to take additional precautions to confirm the user's\n     * actual intent.\n     *\n     * Unlike FLAG_WINDOW_IS_OBSCURED, this is true even if the window that received this event is\n     * obstructed in areas other than the touched location.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HOVER_EXIT_PENDING",
    "type" : "int",
    "comment" : "\n     * This private flag is only set on {@link #ACTION_HOVER_MOVE} events and indicates that\n     * this event will be immediately followed by a {@link #ACTION_HOVER_EXIT}. It is used to\n     * prevent generating redundant {@link #ACTION_HOVER_ENTER} events.\n     * @hide\n     ",
    "links" : [ "#ACTION_HOVER_MOVE", "#ACTION_HOVER_EXIT", "#ACTION_HOVER_ENTER" ]
  }, {
    "name" : "FLAG_IS_GENERATED_GESTURE",
    "type" : "int",
    "comment" : "\n     * This flag indicates that the event has been generated by a gesture generator. It\n     * provides a hint to the GestureDetector to not apply any touch slop.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_TAINTED",
    "type" : "int",
    "comment" : "\n     * Private flag that indicates when the system has detected that this motion event\n     * may be inconsistent with respect to the sequence of previously delivered motion events,\n     * such as when a pointer move event is sent but the pointer is not down.\n     *\n     * @hide\n     * @see #isTainted\n     * @see #setTainted\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_TARGET_ACCESSIBILITY_FOCUS",
    "type" : "int",
    "comment" : "\n     * Private flag indicating that this event was synthesized by the system and should be delivered\n     * to the accessibility focused view first. When being dispatched such an event is not handled\n     * by predecessors of the accessibility focused view and after the event reaches that view the\n     * flag is cleared and normal event dispatch is performed. This ensures that the platform can\n     * click on any view that has accessibility focus which is semantically equivalent to asking the\n     * view to perform a click accessibility action but more generic as views not implementing click\n     * action correctly can still be activated.\n     *\n     * @hide\n     * @see #isTargetAccessibilityFocus()\n     * @see #setTargetAccessibilityFocus(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "EDGE_TOP",
    "type" : "int",
    "comment" : "\n     * Flag indicating the motion event intersected the top edge of the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "EDGE_BOTTOM",
    "type" : "int",
    "comment" : "\n     * Flag indicating the motion event intersected the bottom edge of the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "EDGE_LEFT",
    "type" : "int",
    "comment" : "\n     * Flag indicating the motion event intersected the left edge of the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "EDGE_RIGHT",
    "type" : "int",
    "comment" : "\n     * Flag indicating the motion event intersected the right edge of the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_X",
    "type" : "int",
    "comment" : "\n     * Axis constant: X axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen, reports the absolute X screen position of the center of\n     * the touch contact area.  The units are display pixels.\n     * <li>For a touch pad, reports the absolute X surface position of the center of the touch\n     * contact area.  The units are device-dependent; use {@link InputDevice#getMotionRange(int)}\n     * to query the effective range of values.\n     * <li>For a mouse, reports the absolute X screen position of the mouse pointer.\n     * The units are display pixels.\n     * <li>For a trackball, reports the relative horizontal displacement of the trackball.\n     * The value is normalized to a range from -1.0 (left) to 1.0 (right).\n     * <li>For a joystick, reports the absolute X position of the joystick.\n     * The value is normalized to a range from -1.0 (left) to 1.0 (right).\n     * </ul>\n     * </p>\n     *\n     * @see #getX(int)\n     * @see #getHistoricalX(int, int)\n     * @see MotionEvent.PointerCoords#x\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "InputDevice#getMotionRange" ]
  }, {
    "name" : "AXIS_Y",
    "type" : "int",
    "comment" : "\n     * Axis constant: Y axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen, reports the absolute Y screen position of the center of\n     * the touch contact area.  The units are display pixels.\n     * <li>For a touch pad, reports the absolute Y surface position of the center of the touch\n     * contact area.  The units are device-dependent; use {@link InputDevice#getMotionRange(int)}\n     * to query the effective range of values.\n     * <li>For a mouse, reports the absolute Y screen position of the mouse pointer.\n     * The units are display pixels.\n     * <li>For a trackball, reports the relative vertical displacement of the trackball.\n     * The value is normalized to a range from -1.0 (up) to 1.0 (down).\n     * <li>For a joystick, reports the absolute Y position of the joystick.\n     * The value is normalized to a range from -1.0 (up or far) to 1.0 (down or near).\n     * </ul>\n     * </p>\n     *\n     * @see #getY(int)\n     * @see #getHistoricalY(int, int)\n     * @see MotionEvent.PointerCoords#y\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "InputDevice#getMotionRange" ]
  }, {
    "name" : "AXIS_PRESSURE",
    "type" : "int",
    "comment" : "\n     * Axis constant: Pressure axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen or touch pad, reports the approximate pressure applied to the surface\n     * by a finger or other tool.  The value is normalized to a range from\n     * 0 (no pressure at all) to 1 (normal pressure), although values higher than 1\n     * may be generated depending on the calibration of the input device.\n     * <li>For a trackball, the value is set to 1 if the trackball button is pressed\n     * or 0 otherwise.\n     * <li>For a mouse, the value is set to 1 if the primary mouse button is pressed\n     * or 0 otherwise.\n     * </ul>\n     * </p>\n     *\n     * @see #getPressure(int)\n     * @see #getHistoricalPressure(int, int)\n     * @see MotionEvent.PointerCoords#pressure\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_SIZE",
    "type" : "int",
    "comment" : "\n     * Axis constant: Size axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen or touch pad, reports the approximate size of the contact area in\n     * relation to the maximum detectable size for the device.  The value is normalized\n     * to a range from 0 (smallest detectable size) to 1 (largest detectable size),\n     * although it is not a linear scale.  This value is of limited use.\n     * To obtain calibrated size information, use\n     * {@link #AXIS_TOUCH_MAJOR} or {@link #AXIS_TOOL_MAJOR}.\n     * </ul>\n     * </p>\n     *\n     * @see #getSize(int)\n     * @see #getHistoricalSize(int, int)\n     * @see MotionEvent.PointerCoords#size\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "#AXIS_TOUCH_MAJOR", "#AXIS_TOOL_MAJOR" ]
  }, {
    "name" : "AXIS_TOUCH_MAJOR",
    "type" : "int",
    "comment" : "\n     * Axis constant: TouchMajor axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen, reports the length of the major axis of an ellipse that\n     * represents the touch area at the point of contact.\n     * The units are display pixels.\n     * <li>For a touch pad, reports the length of the major axis of an ellipse that\n     * represents the touch area at the point of contact.\n     * The units are device-dependent; use {@link InputDevice#getMotionRange(int)}\n     * to query the effective range of values.\n     * </ul>\n     * </p>\n     *\n     * @see #getTouchMajor(int)\n     * @see #getHistoricalTouchMajor(int, int)\n     * @see MotionEvent.PointerCoords#touchMajor\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "InputDevice#getMotionRange" ]
  }, {
    "name" : "AXIS_TOUCH_MINOR",
    "type" : "int",
    "comment" : "\n     * Axis constant: TouchMinor axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen, reports the length of the minor axis of an ellipse that\n     * represents the touch area at the point of contact.\n     * The units are display pixels.\n     * <li>For a touch pad, reports the length of the minor axis of an ellipse that\n     * represents the touch area at the point of contact.\n     * The units are device-dependent; use {@link InputDevice#getMotionRange(int)}\n     * to query the effective range of values.\n     * </ul>\n     * </p><p>\n     * When the touch is circular, the major and minor axis lengths will be equal to one another.\n     * </p>\n     *\n     * @see #getTouchMinor(int)\n     * @see #getHistoricalTouchMinor(int, int)\n     * @see MotionEvent.PointerCoords#touchMinor\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "InputDevice#getMotionRange" ]
  }, {
    "name" : "AXIS_TOOL_MAJOR",
    "type" : "int",
    "comment" : "\n     * Axis constant: ToolMajor axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen, reports the length of the major axis of an ellipse that\n     * represents the size of the approaching finger or tool used to make contact.\n     * <li>For a touch pad, reports the length of the major axis of an ellipse that\n     * represents the size of the approaching finger or tool used to make contact.\n     * The units are device-dependent; use {@link InputDevice#getMotionRange(int)}\n     * to query the effective range of values.\n     * </ul>\n     * </p><p>\n     * When the touch is circular, the major and minor axis lengths will be equal to one another.\n     * </p><p>\n     * The tool size may be larger than the touch size since the tool may not be fully\n     * in contact with the touch sensor.\n     * </p>\n     *\n     * @see #getToolMajor(int)\n     * @see #getHistoricalToolMajor(int, int)\n     * @see MotionEvent.PointerCoords#toolMajor\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "InputDevice#getMotionRange" ]
  }, {
    "name" : "AXIS_TOOL_MINOR",
    "type" : "int",
    "comment" : "\n     * Axis constant: ToolMinor axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen, reports the length of the minor axis of an ellipse that\n     * represents the size of the approaching finger or tool used to make contact.\n     * <li>For a touch pad, reports the length of the minor axis of an ellipse that\n     * represents the size of the approaching finger or tool used to make contact.\n     * The units are device-dependent; use {@link InputDevice#getMotionRange(int)}\n     * to query the effective range of values.\n     * </ul>\n     * </p><p>\n     * When the touch is circular, the major and minor axis lengths will be equal to one another.\n     * </p><p>\n     * The tool size may be larger than the touch size since the tool may not be fully\n     * in contact with the touch sensor.\n     * </p>\n     *\n     * @see #getToolMinor(int)\n     * @see #getHistoricalToolMinor(int, int)\n     * @see MotionEvent.PointerCoords#toolMinor\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "InputDevice#getMotionRange" ]
  }, {
    "name" : "AXIS_ORIENTATION",
    "type" : "int",
    "comment" : "\n     * Axis constant: Orientation axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a touch screen or touch pad, reports the orientation of the finger\n     * or tool in radians relative to the vertical plane of the device.\n     * An angle of 0 radians indicates that the major axis of contact is oriented\n     * upwards, is perfectly circular or is of unknown orientation.  A positive angle\n     * indicates that the major axis of contact is oriented to the right.  A negative angle\n     * indicates that the major axis of contact is oriented to the left.\n     * The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians\n     * (finger pointing fully right).\n     * <li>For a stylus, the orientation indicates the direction in which the stylus\n     * is pointing in relation to the vertical axis of the current orientation of the screen.\n     * The range is from -PI radians to PI radians, where 0 is pointing up,\n     * -PI/2 radians is pointing left, -PI or PI radians is pointing down, and PI/2 radians\n     * is pointing right.  See also {@link #AXIS_TILT}.\n     * </ul>\n     * </p>\n     *\n     * @see #getOrientation(int)\n     * @see #getHistoricalOrientation(int, int)\n     * @see MotionEvent.PointerCoords#orientation\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "#AXIS_TILT" ]
  }, {
    "name" : "AXIS_VSCROLL",
    "type" : "int",
    "comment" : "\n     * Axis constant: Vertical Scroll axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a mouse, reports the relative movement of the vertical scroll wheel.\n     * The value is normalized to a range from -1.0 (down) to 1.0 (up).\n     * </ul>\n     * </p><p>\n     * This axis should be used to scroll views vertically.\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_HSCROLL",
    "type" : "int",
    "comment" : "\n     * Axis constant: Horizontal Scroll axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a mouse, reports the relative movement of the horizontal scroll wheel.\n     * The value is normalized to a range from -1.0 (left) to 1.0 (right).\n     * </ul>\n     * </p><p>\n     * This axis should be used to scroll views horizontally.\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_Z",
    "type" : "int",
    "comment" : "\n     * Axis constant: Z axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute Z position of the joystick.\n     * The value is normalized to a range from -1.0 (high) to 1.0 (low).\n     * <em>On game pads with two analog joysticks, this axis is often reinterpreted\n     * to report the absolute X position of the second joystick instead.</em>\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RX",
    "type" : "int",
    "comment" : "\n     * Axis constant: X Rotation axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute rotation angle about the X axis.\n     * The value is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RY",
    "type" : "int",
    "comment" : "\n     * Axis constant: Y Rotation axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute rotation angle about the Y axis.\n     * The value is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RZ",
    "type" : "int",
    "comment" : "\n     * Axis constant: Z Rotation axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute rotation angle about the Z axis.\n     * The value is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise).\n     * <em>On game pads with two analog joysticks, this axis is often reinterpreted\n     * to report the absolute Y position of the second joystick instead.</em>\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_HAT_X",
    "type" : "int",
    "comment" : "\n     * Axis constant: Hat X axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute X position of the directional hat control.\n     * The value is normalized to a range from -1.0 (left) to 1.0 (right).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_HAT_Y",
    "type" : "int",
    "comment" : "\n     * Axis constant: Hat Y axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute Y position of the directional hat control.\n     * The value is normalized to a range from -1.0 (up) to 1.0 (down).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_LTRIGGER",
    "type" : "int",
    "comment" : "\n     * Axis constant: Left Trigger axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the left trigger control.\n     * The value is normalized to a range from 0.0 (released) to 1.0 (fully pressed).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RTRIGGER",
    "type" : "int",
    "comment" : "\n     * Axis constant: Right Trigger axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the right trigger control.\n     * The value is normalized to a range from 0.0 (released) to 1.0 (fully pressed).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_THROTTLE",
    "type" : "int",
    "comment" : "\n     * Axis constant: Throttle axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the throttle control.\n     * The value is normalized to a range from 0.0 (fully open) to 1.0 (fully closed).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RUDDER",
    "type" : "int",
    "comment" : "\n     * Axis constant: Rudder axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the rudder control.\n     * The value is normalized to a range from -1.0 (turn left) to 1.0 (turn right).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_WHEEL",
    "type" : "int",
    "comment" : "\n     * Axis constant: Wheel axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the steering wheel control.\n     * The value is normalized to a range from -1.0 (turn left) to 1.0 (turn right).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GAS",
    "type" : "int",
    "comment" : "\n     * Axis constant: Gas axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the gas (accelerator) control.\n     * The value is normalized to a range from 0.0 (no acceleration)\n     * to 1.0 (maximum acceleration).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_BRAKE",
    "type" : "int",
    "comment" : "\n     * Axis constant: Brake axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a joystick, reports the absolute position of the brake control.\n     * The value is normalized to a range from 0.0 (no braking) to 1.0 (maximum braking).\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_DISTANCE",
    "type" : "int",
    "comment" : "\n     * Axis constant: Distance axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a stylus, reports the distance of the stylus from the screen.\n     * A value of 0.0 indicates direct contact and larger values indicate increasing\n     * distance from the surface.\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_TILT",
    "type" : "int",
    "comment" : "\n     * Axis constant: Tilt axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a stylus, reports the tilt angle of the stylus in radians where\n     * 0 radians indicates that the stylus is being held perpendicular to the\n     * surface, and PI/2 radians indicates that the stylus is being held flat\n     * against the surface.\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int, int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_SCROLL",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic scroll axis of a motion event.\n     * <p>\n     * <ul>\n     * <li>Reports the relative movement of the generic scrolling device.\n     * </ul>\n     * </p><p>\n     * This axis should be used for scroll events that are neither strictly vertical nor horizontal.\n     * A good example would be the rotation of a rotary encoder input device.\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RELATIVE_X",
    "type" : "int",
    "comment" : "\n     * Axis constant: The movement of x position of a motion event.\n     * <p>\n     * <ul>\n     * <li>For a mouse, reports a difference of x position between the previous position.\n     * This is useful when pointer is captured, in that case the mouse pointer doesn't change\n     * the location but this axis reports the difference which allows the app to see\n     * how the mouse is moved.\n     * </ul>\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int, int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_RELATIVE_Y",
    "type" : "int",
    "comment" : "\n     * Axis constant: The movement of y position of a motion event.\n     * <p>\n     * This is similar to {@link #AXIS_RELATIVE_X} but for y-axis.\n     * </p>\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int, int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ "#AXIS_RELATIVE_X" ]
  }, {
    "name" : "AXIS_GENERIC_1",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 1 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_2",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 2 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_3",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 3 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_4",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 4 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_5",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 5 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_6",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 6 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_7",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 7 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_8",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 8 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_9",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 9 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_10",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 10 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_11",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 11 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_12",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 12 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_13",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 13 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_14",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 14 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_15",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 15 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_GENERIC_16",
    "type" : "int",
    "comment" : "\n     * Axis constant: Generic 16 axis of a motion event.\n     * The interpretation of a generic axis is device-specific.\n     *\n     * @see #getAxisValue(int, int)\n     * @see #getHistoricalAxisValue(int, int, int)\n     * @see MotionEvent.PointerCoords#getAxisValue(int)\n     * @see InputDevice#getMotionRange\n     ",
    "links" : [ ]
  }, {
    "name" : "AXIS_SYMBOLIC_NAMES",
    "type" : "SparseArray<String>",
    "comment" : " Symbolic names of all axes.",
    "links" : [ ]
  }, {
    "name" : "BUTTON_PRIMARY",
    "type" : "int",
    "comment" : "\n     * Button constant: Primary button (left mouse button).\n     *\n     * This button constant is not set in response to simple touches with a finger\n     * or stylus tip.  The user must actually push a button.\n     *\n     * @see #getButtonState\n     ",
    "links" : [ ]
  }, {
    "name" : "BUTTON_SECONDARY",
    "type" : "int",
    "comment" : "\n     * Button constant: Secondary button (right mouse button).\n     *\n     * @see #getButtonState\n     ",
    "links" : [ ]
  }, {
    "name" : "BUTTON_TERTIARY",
    "type" : "int",
    "comment" : "\n     * Button constant: Tertiary button (middle mouse button).\n     *\n     * @see #getButtonState\n     ",
    "links" : [ ]
  }, {
    "name" : "BUTTON_BACK",
    "type" : "int",
    "comment" : "\n     * Button constant: Back button pressed (mouse back button).\n     * <p>\n     * The system may send a {@link KeyEvent#KEYCODE_BACK} key press to the application\n     * when this button is pressed.\n     * </p>\n     *\n     * @see #getButtonState\n     ",
    "links" : [ "KeyEvent#KEYCODE_BACK" ]
  }, {
    "name" : "BUTTON_FORWARD",
    "type" : "int",
    "comment" : "\n     * Button constant: Forward button pressed (mouse forward button).\n     * <p>\n     * The system may send a {@link KeyEvent#KEYCODE_FORWARD} key press to the application\n     * when this button is pressed.\n     * </p>\n     *\n     * @see #getButtonState\n     ",
    "links" : [ "KeyEvent#KEYCODE_FORWARD" ]
  }, {
    "name" : "BUTTON_STYLUS_PRIMARY",
    "type" : "int",
    "comment" : "\n     * Button constant: Primary stylus button pressed.\n     *\n     * @see #getButtonState\n     ",
    "links" : [ ]
  }, {
    "name" : "BUTTON_STYLUS_SECONDARY",
    "type" : "int",
    "comment" : "\n     * Button constant: Secondary stylus button pressed.\n     *\n     * @see #getButtonState\n     ",
    "links" : [ ]
  }, {
    "name" : "BUTTON_SYMBOLIC_NAMES",
    "type" : "String[]",
    "comment" : " to most significant.",
    "links" : [ ]
  }, {
    "name" : "CLASSIFICATION_NONE",
    "type" : "int",
    "comment" : "\n     * Classification constant: None.\n     *\n     * No additional information is available about the current motion event stream.\n     *\n     * @see #getClassification\n     ",
    "links" : [ ]
  }, {
    "name" : "CLASSIFICATION_AMBIGUOUS_GESTURE",
    "type" : "int",
    "comment" : "\n     * Classification constant: Ambiguous gesture.\n     *\n     * The user's intent with respect to the current event stream is not yet determined.\n     * Gestural actions, such as scrolling, should be inhibited until the classification resolves\n     * to another value or the event stream ends.\n     *\n     * @see #getClassification\n     ",
    "links" : [ ]
  }, {
    "name" : "CLASSIFICATION_DEEP_PRESS",
    "type" : "int",
    "comment" : "\n     * Classification constant: Deep press.\n     *\n     * The current event stream represents the user intentionally pressing harder on the screen.\n     * This classification type should be used to accelerate the long press behaviour.\n     *\n     * @see #getClassification\n     ",
    "links" : [ ]
  }, {
    "name" : "TOOL_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Tool type constant: Unknown tool type.\n     * This constant is used when the tool type is not known or is not relevant,\n     * such as for a trackball or other non-pointing device.\n     *\n     * @see #getToolType\n     ",
    "links" : [ ]
  }, {
    "name" : "TOOL_TYPE_FINGER",
    "type" : "int",
    "comment" : "\n     * Tool type constant: The tool is a finger.\n     *\n     * @see #getToolType\n     ",
    "links" : [ ]
  }, {
    "name" : "TOOL_TYPE_STYLUS",
    "type" : "int",
    "comment" : "\n     * Tool type constant: The tool is a stylus.\n     *\n     * @see #getToolType\n     ",
    "links" : [ ]
  }, {
    "name" : "TOOL_TYPE_MOUSE",
    "type" : "int",
    "comment" : "\n     * Tool type constant: The tool is a mouse.\n     *\n     * @see #getToolType\n     ",
    "links" : [ ]
  }, {
    "name" : "TOOL_TYPE_ERASER",
    "type" : "int",
    "comment" : "\n     * Tool type constant: The tool is an eraser or a stylus being used in an inverted posture.\n     *\n     * @see #getToolType\n     ",
    "links" : [ ]
  }, {
    "name" : "TOOL_TYPE_SYMBOLIC_NAMES",
    "type" : "SparseArray<String>",
    "comment" : " Symbolic names of all tool types.",
    "links" : [ ]
  }, {
    "name" : "HISTORY_CURRENT",
    "type" : "int",
    "comment" : " Private value for history pos that obtains the current sample.",
    "links" : [ ]
  }, {
    "name" : "INVALID_CURSOR_POSITION",
    "type" : "float",
    "comment" : " NaN and we use isnan() everywhere to check validity.",
    "links" : [ ]
  }, {
    "name" : "MAX_RECYCLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerUsed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRecyclerTop",
    "type" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gSharedTempLock",
    "type" : "Object",
    "comment" : " the caller into single element PointerCoords and pointer id arrays.",
    "links" : [ ]
  }, {
    "name" : "gSharedTempPointerCoords",
    "type" : "PointerCoords[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gSharedTempPointerProperties",
    "type" : "PointerProperties[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gSharedTempPointerIndexMap",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : " Pointer to the native MotionEvent object that contains the actual data.",
    "links" : [ ]
  }, {
    "name" : "mNext",
    "type" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<MotionEvent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static final void ensureSharedTempPointerCapacity(int desiredCapacity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeInitialize(long nativePtr, int deviceId, int source, int displayId, int action, int flags, int edgeFlags, int metaState, int buttonState, @Classification int classification, float xOffset, float yOffset, float xPrecision, float yPrecision, long downTimeNanos, long eventTimeNanos, int pointerCount, PointerProperties[] pointerIds, PointerCoords[] pointerCoords)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDispose(long nativePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddBatch(long nativePtr, long eventTimeNanos, PointerCoords[] pointerCoords, int metaState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeGetPointerCoords(long nativePtr, int pointerIndex, int historyPos, PointerCoords outPointerCoords)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeGetPointerProperties(long nativePtr, int pointerIndex, PointerProperties outPointerProperties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadFromParcel(long nativePtr, Parcel parcel)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteToParcel(long nativePtr, Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeAxisToString(int axis)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeAxisFromString(String label)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetPointerId(long nativePtr, int pointerIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetToolType(long nativePtr, int pointerIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetEventTimeNanos(long nativePtr, int historyPos)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetRawAxisValue(long nativePtr, int axis, int pointerIndex, int historyPos)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetAxisValue(long nativePtr, int axis, int pointerIndex, int historyPos)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeTransform(long nativePtr, Matrix matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCopy(long destNativePtr, long sourceNativePtr, boolean keepHistory)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetId(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetDeviceId(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetSource(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetSource(long nativePtr, int source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetDisplayId(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayId(long nativePtr, int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetAction(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAction(long nativePtr, int action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsTouchEvent(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetFlags(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFlags(long nativePtr, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetEdgeFlags(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetEdgeFlags(long nativePtr, int action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetMetaState(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetButtonState(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetButtonState(long nativePtr, int buttonState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetClassification(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetActionButton(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetActionButton(long nativePtr, int actionButton)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeOffsetLocation(long nativePtr, float deltaX, float deltaY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetXOffset(long nativePtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetYOffset(long nativePtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetXPrecision(long nativePtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetYPrecision(long nativePtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetXCursorPosition(long nativePtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetYCursorPosition(long nativePtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetCursorPosition(long nativePtr, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetDownTimeNanos(long nativePtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDownTimeNanos(long nativePtr, long downTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetPointerCount(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeFindPointerIndex(long nativePtr, int pointerId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetHistorySize(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeScale(long nativePtr, float scale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MotionEvent obtain()",
    "returnType" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int displayId, int flags)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in all of the basic values that\n     * define the motion.\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param pointerCount The number of pointers that will be in this event.\n     * @param pointerProperties An array of <em>pointerCount</em> values providing\n     * a {@link PointerProperties} property object for each pointer, which must\n     * include the pointer identifier.\n     * @param pointerCoords An array of <em>pointerCount</em> values providing\n     * a {@link PointerCoords} coordinate object for each pointer.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     * @param buttonState The state of buttons that are pressed.\n     * @param xPrecision The precision of the X coordinate being reported.\n     * @param yPrecision The precision of the Y coordinate being reported.\n     * @param deviceId The id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device; other\n     * numbers are arbitrary and you shouldn't depend on the values.\n     * @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     * @param source The source of this event.\n     * @param displayId The display ID associated with this event.\n     * @param flags The motion event flags.\n     * @hide\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN", "PointerProperties", "PointerCoords" ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in all of the basic values that\n     * define the motion.\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param pointerCount The number of pointers that will be in this event.\n     * @param pointerProperties An array of <em>pointerCount</em> values providing\n     * a {@link PointerProperties} property object for each pointer, which must\n     * include the pointer identifier.\n     * @param pointerCoords An array of <em>pointerCount</em> values providing\n     * a {@link PointerCoords} coordinate object for each pointer.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     * @param buttonState The state of buttons that are pressed.\n     * @param xPrecision The precision of the X coordinate being reported.\n     * @param yPrecision The precision of the Y coordinate being reported.\n     * @param deviceId The id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device; other\n     * numbers are arbitrary and you shouldn't depend on the values.\n     * @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     * @param source The source of this event.\n     * @param flags The motion event flags.\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN", "PointerProperties", "PointerCoords" ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in all of the basic values that\n     * define the motion.\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param pointerCount The number of pointers that will be in this event.\n     * @param pointerIds An array of <em>pointerCount</em> values providing\n     * an identifier for each pointer.\n     * @param pointerCoords An array of <em>pointerCount</em> values providing\n     * a {@link PointerCoords} coordinate object for each pointer.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     * @param xPrecision The precision of the X coordinate being reported.\n     * @param yPrecision The precision of the Y coordinate being reported.\n     * @param deviceId The id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device; other\n     * numbers are arbitrary and you shouldn't depend on the values.\n     * @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     * @param source The source of this event.\n     * @param flags The motion event flags.\n     *\n     * @deprecated Use {@link #obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)}\n     * instead.\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN", "PointerCoords", "#obtain" ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in all of the basic values that\n     * define the motion.\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime  The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param x The X coordinate of this event.\n     * @param y The Y coordinate of this event.\n     * @param pressure The current pressure of this event.  The pressure generally\n     * ranges from 0 (no pressure at all) to 1 (normal pressure), however\n     * values higher than 1 may be generated depending on the calibration of\n     * the input device.\n     * @param size A scaled value of the approximate size of the area being pressed when\n     * touched with the finger. The actual value in pixels corresponding to the finger\n     * touch is normalized with a device specific range of values\n     * and scaled to a value between 0 and 1.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     * @param xPrecision The precision of the X coordinate being reported.\n     * @param yPrecision The precision of the Y coordinate being reported.\n     * @param deviceId The id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device; other\n     * numbers are arbitrary and you shouldn't depend on the values.\n     * @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN" ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int displayId)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in all of the basic values that\n     * define the motion.\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime  The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param x The X coordinate of this event.\n     * @param y The Y coordinate of this event.\n     * @param pressure The current pressure of this event.  The pressure generally\n     * ranges from 0 (no pressure at all) to 1 (normal pressure), however\n     * values higher than 1 may be generated depending on the calibration of\n     * the input device.\n     * @param size A scaled value of the approximate size of the area being pressed when\n     * touched with the finger. The actual value in pixels corresponding to the finger\n     * touch is normalized with a device specific range of values\n     * and scaled to a value between 0 and 1.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     * @param xPrecision The precision of the X coordinate being reported.\n     * @param yPrecision The precision of the Y coordinate being reported.\n     * @param deviceId The id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device; other\n     * numbers are arbitrary and you shouldn't depend on the values.\n     * @param source The source of this event.\n     * @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     * @param displayId The display ID associated with this event.\n     * @hide\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN" ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in all of the basic values that\n     * define the motion.\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime  The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param pointerCount The number of pointers that are active in this event.\n     * @param x The X coordinate of this event.\n     * @param y The Y coordinate of this event.\n     * @param pressure The current pressure of this event.  The pressure generally\n     * ranges from 0 (no pressure at all) to 1 (normal pressure), however\n     * values higher than 1 may be generated depending on the calibration of\n     * the input device.\n     * @param size A scaled value of the approximate size of the area being pressed when\n     * touched with the finger. The actual value in pixels corresponding to the finger\n     * touch is normalized with a device specific range of values\n     * and scaled to a value between 0 and 1.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     * @param xPrecision The precision of the X coordinate being reported.\n     * @param yPrecision The precision of the Y coordinate being reported.\n     * @param deviceId The id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device; other\n     * numbers are arbitrary and you shouldn't depend on the values.\n     * @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     *\n     * @deprecated Use {@link #obtain(long, long, int, float, float, float, float, int, float, float, int, int)}\n     * instead.\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN", "#obtain" ]
  }, {
    "name" : "public static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, int metaState)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, filling in a subset of the basic motion\n     * values.  Those not specified here are: device id (always 0), pressure\n     * and size (always 1), x and y precision (always 1), and edgeFlags (always 0).\n     *\n     * @param downTime The time (in ms) when the user originally pressed down to start\n     * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param eventTime  The the time (in ms) when this specific event was generated.  This\n     * must be obtained from {@link SystemClock#uptimeMillis()}.\n     * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n     * @param x The X coordinate of this event.\n     * @param y The Y coordinate of this event.\n     * @param metaState The state of any meta / modifier keys that were in effect when\n     * the event was generated.\n     ",
    "links" : [ "SystemClock#uptimeMillis", "SystemClock#uptimeMillis", "#ACTION_DOWN" ]
  }, {
    "name" : "public static MotionEvent obtain(MotionEvent other)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, copying from an existing one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MotionEvent obtainNoHistory(MotionEvent other)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Create a new MotionEvent, copying from an existing one, but not including\n     * any historical point information.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean initialize(int deviceId, int source, int displayId, int action, int flags, int edgeFlags, int metaState, int buttonState, @Classification int classification, float xOffset, float yOffset, float xPrecision, float yPrecision, long downTimeNanos, long eventTimeNanos, int pointerCount, PointerProperties[] pointerIds, PointerCoords[] pointerCoords)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MotionEvent copy()",
    "returnType" : "MotionEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycle the MotionEvent, to be re-used by a later caller.  After calling\n     * this function you must not ever touch the event again.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void scale(float scale)",
    "returnType" : "void",
    "comment" : "\n     * Applies a scale factor to all points within this event.\n     *\n     * This method is used to adjust touch events to simulate different density\n     * displays for compatibility mode.  The values returned by {@link #getRawX()},\n     * {@link #getRawY()}, {@link #getXPrecision()} and {@link #getYPrecision()}\n     * are also affected by the scale factor.\n     *\n     * @param scale The scale factor to apply.\n     * @hide\n     ",
    "links" : [ "#getRawX", "#getRawY", "#getXPrecision", "#getYPrecision" ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getDeviceId()",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public final int getSource()",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public final void setSource(int source)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayId(int displayId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getAction()",
    "returnType" : "int",
    "comment" : "\n     * Return the kind of action being performed.\n     * Consider using {@link #getActionMasked} and {@link #getActionIndex} to retrieve\n     * the separate masked action and pointer index.\n     * @return The action, such as {@link #ACTION_DOWN} or\n     * the combination of {@link #ACTION_POINTER_DOWN} with a shifted pointer index.\n     ",
    "links" : [ "#getActionMasked", "#getActionIndex", "#ACTION_DOWN", "#ACTION_POINTER_DOWN" ]
  }, {
    "name" : "public final int getActionMasked()",
    "returnType" : "int",
    "comment" : "\n     * Return the masked action being performed, without pointer index information.\n     * Use {@link #getActionIndex} to return the index associated with pointer actions.\n     * @return The action, such as {@link #ACTION_DOWN} or {@link #ACTION_POINTER_DOWN}.\n     ",
    "links" : [ "#getActionIndex", "#ACTION_DOWN", "#ACTION_POINTER_DOWN" ]
  }, {
    "name" : "public final int getActionIndex()",
    "returnType" : "int",
    "comment" : "\n     * For {@link #ACTION_POINTER_DOWN} or {@link #ACTION_POINTER_UP}\n     * as returned by {@link #getActionMasked}, this returns the associated\n     * pointer index.\n     * The index may be used with {@link #getPointerId(int)},\n     * {@link #getX(int)}, {@link #getY(int)}, {@link #getPressure(int)},\n     * and {@link #getSize(int)} to get information about the pointer that has\n     * gone down or up.\n     * @return The index associated with the action.\n     ",
    "links" : [ "#ACTION_POINTER_DOWN", "#ACTION_POINTER_UP", "#getActionMasked", "#getPointerId", "#getX", "#getY", "#getPressure", "#getSize" ]
  }, {
    "name" : "public final boolean isTouchEvent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this motion event is a touch event.\n     * <p>\n     * Specifically excludes pointer events with action {@link #ACTION_HOVER_MOVE},\n     * {@link #ACTION_HOVER_ENTER}, {@link #ACTION_HOVER_EXIT}, or {@link #ACTION_SCROLL}\n     * because they are not actually touch events (the pointer is not down).\n     * </p>\n     * @return True if this motion event is a touch event.\n     * @hide\n     ",
    "links" : [ "#ACTION_HOVER_MOVE", "#ACTION_HOVER_ENTER", "#ACTION_HOVER_EXIT", "#ACTION_SCROLL" ]
  }, {
    "name" : "public final int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets the motion event flags.\n     *\n     * @see #FLAG_WINDOW_IS_OBSCURED\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isTainted()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setTainted(boolean tainted)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTargetAccessibilityFocus()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetAccessibilityFocus(boolean targetsFocus)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isHoverExitPending()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setHoverExitPending(boolean hoverExitPending)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final long getDownTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time (in ms) when the user originally pressed down to start\n     * a stream of position events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDownTime(long downTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time (in ms) when the user originally pressed down to start\n     * a stream of position events.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getEventTime()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     *\n     * @return Returns the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final long getEventTimeNano()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond precision.\n     * <p>\n     * The value is in nanosecond precision but it may not have nanosecond accuracy.\n     * </p>\n     *\n     * @return Returns the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond precision.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final float getX()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getX(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_X\n     ",
    "links" : [ "#getX" ]
  }, {
    "name" : "public final float getY()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getY(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getY" ]
  }, {
    "name" : "public final float getPressure()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getPressure(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_PRESSURE\n     ",
    "links" : [ "#getPressure" ]
  }, {
    "name" : "public final float getSize()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getSize(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_SIZE\n     ",
    "links" : [ "#getSize" ]
  }, {
    "name" : "public final float getTouchMajor()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getTouchMajor(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_TOUCH_MAJOR\n     ",
    "links" : [ "#getTouchMajor" ]
  }, {
    "name" : "public final float getTouchMinor()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getTouchMinor(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_TOUCH_MINOR\n     ",
    "links" : [ "#getTouchMinor" ]
  }, {
    "name" : "public final float getToolMajor()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getToolMajor(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_TOOL_MAJOR\n     ",
    "links" : [ "#getToolMajor" ]
  }, {
    "name" : "public final float getToolMinor()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getToolMinor(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_TOOL_MINOR\n     ",
    "links" : [ "#getToolMinor" ]
  }, {
    "name" : "public final float getOrientation()",
    "returnType" : "float",
    "comment" : "\n     * {@link #getOrientation(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @see #AXIS_ORIENTATION\n     ",
    "links" : [ "#getOrientation" ]
  }, {
    "name" : "public final float getAxisValue(int axis)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getAxisValue(int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param axis The axis identifier for the axis value to retrieve.\n     *\n     * @see #AXIS_X\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getAxisValue" ]
  }, {
    "name" : "public final int getPointerCount()",
    "returnType" : "int",
    "comment" : "\n     * The number of pointers of data contained in this event.  Always\n     * >= 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getPointerId(int pointerIndex)",
    "returnType" : "int",
    "comment" : "\n     * Return the pointer identifier associated with a particular pointer\n     * data index in this event.  The identifier tells you the actual pointer\n     * number associated with the data, accounting for individual pointers\n     * going up and down since the start of the current gesture.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     ",
    "links" : [ "#getPointerCount" ]
  }, {
    "name" : "public final int getToolType(int pointerIndex)",
    "returnType" : "int",
    "comment" : "\n     * Gets the tool type of a pointer for the given pointer index.\n     * The tool type indicates the type of tool used to make contact such\n     * as a finger or stylus, if known.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @return The tool type of the pointer.\n     *\n     * @see #TOOL_TYPE_UNKNOWN\n     * @see #TOOL_TYPE_FINGER\n     * @see #TOOL_TYPE_STYLUS\n     * @see #TOOL_TYPE_MOUSE\n     ",
    "links" : [ "#getPointerCount" ]
  }, {
    "name" : "public final int findPointerIndex(int pointerId)",
    "returnType" : "int",
    "comment" : "\n     * Given a pointer identifier, find the index of its data in the event.\n     *\n     * @param pointerId The identifier of the pointer to be found.\n     * @return Returns either the index of the pointer (for use with\n     * {@link #getX(int)} et al.), or -1 if there is no data available for\n     * that pointer identifier.\n     ",
    "links" : [ "#getX" ]
  }, {
    "name" : "public final float getX(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the X coordinate of this event for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * Whole numbers are pixels; the\n     * value may have a fraction for input devices that are sub-pixel precise.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_X\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getY(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the Y coordinate of this event for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * Whole numbers are pixels; the\n     * value may have a fraction for input devices that are sub-pixel precise.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getPressure(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the current pressure of this event for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * The pressure generally\n     * ranges from 0 (no pressure at all) to 1 (normal pressure), however\n     * values higher than 1 may be generated depending on the calibration of\n     * the input device.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_PRESSURE\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getSize(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns a scaled value of the approximate size for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * This represents some approximation of the area of the screen being\n     * pressed; the actual value in pixels corresponding to the\n     * touch is normalized with the device specific range of values\n     * and scaled to a value between 0 and 1. The value of size can be used to\n     * determine fat touch events.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_SIZE\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getTouchMajor(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the length of the major axis of an ellipse that describes the touch\n     * area at the point of contact for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_TOUCH_MAJOR\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getTouchMinor(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the length of the minor axis of an ellipse that describes the touch\n     * area at the point of contact for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_TOUCH_MINOR\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getToolMajor(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the length of the major axis of an ellipse that describes the size of\n     * the approaching tool for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * The tool area represents the estimated size of the finger or pen that is\n     * touching the device independent of its actual touch area at the point of contact.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_TOOL_MAJOR\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getToolMinor(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the length of the minor axis of an ellipse that describes the size of\n     * the approaching tool for the given pointer\n     * <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * The tool area represents the estimated size of the finger or pen that is\n     * touching the device independent of its actual touch area at the point of contact.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_TOOL_MINOR\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getOrientation(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the orientation of the touch area and tool area in radians clockwise from vertical\n     * for the given pointer <em>index</em> (use {@link #getPointerId(int)} to find the pointer\n     * identifier for this index).\n     * An angle of 0 radians indicates that the major axis of contact is oriented\n     * upwards, is perfectly circular or is of unknown orientation.  A positive angle\n     * indicates that the major axis of contact is oriented to the right.  A negative angle\n     * indicates that the major axis of contact is oriented to the left.\n     * The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians\n     * (finger pointing fully right).\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #AXIS_ORIENTATION\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final float getAxisValue(int axis, int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of the requested axis for the given pointer <em>index</em>\n     * (use {@link #getPointerId(int)} to find the pointer identifier for this index).\n     *\n     * @param axis The axis identifier for the axis value to retrieve.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @return The value of the axis, or 0 if the axis is not available.\n     *\n     * @see #AXIS_X\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getPointerId", "#getPointerCount" ]
  }, {
    "name" : "public final void getPointerCoords(int pointerIndex, PointerCoords outPointerCoords)",
    "returnType" : "void",
    "comment" : "\n     * Populates a {@link PointerCoords} object with pointer coordinate data for\n     * the specified pointer index.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param outPointerCoords The pointer coordinate object to populate.\n     *\n     * @see PointerCoords\n     ",
    "links" : [ "PointerCoords", "#getPointerCount" ]
  }, {
    "name" : "public final void getPointerProperties(int pointerIndex, PointerProperties outPointerProperties)",
    "returnType" : "void",
    "comment" : "\n     * Populates a {@link PointerProperties} object with pointer properties for\n     * the specified pointer index.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param outPointerProperties The pointer properties object to populate.\n     *\n     * @see PointerProperties\n     ",
    "links" : [ "PointerProperties", "#getPointerCount" ]
  }, {
    "name" : "public final int getMetaState()",
    "returnType" : "int",
    "comment" : "\n     * Returns the state of any meta / modifier keys that were in effect when\n     * the event was generated.  This is the same values as those\n     * returned by {@link KeyEvent#getMetaState() KeyEvent.getMetaState}.\n     *\n     * @return an integer in which each bit set to 1 represents a pressed\n     *         meta key\n     *\n     * @see KeyEvent#getMetaState()\n     ",
    "links" : [ "KeyEvent#getMetaState" ]
  }, {
    "name" : "public final int getButtonState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of all buttons that are pressed such as a mouse or stylus button.\n     *\n     * @return The button state.\n     *\n     * @see #BUTTON_PRIMARY\n     * @see #BUTTON_SECONDARY\n     * @see #BUTTON_TERTIARY\n     * @see #BUTTON_FORWARD\n     * @see #BUTTON_BACK\n     * @see #BUTTON_STYLUS_PRIMARY\n     * @see #BUTTON_STYLUS_SECONDARY\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setButtonState(int buttonState)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bitfield indicating which buttons are pressed.\n     *\n     * @see #getButtonState()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getClassification()",
    "returnType" : "int",
    "comment" : "\n     * Returns the classification for the current gesture.\n     * The classification may change as more events become available for the same gesture.\n     *\n     * @see #CLASSIFICATION_NONE\n     * @see #CLASSIFICATION_AMBIGUOUS_GESTURE\n     * @see #CLASSIFICATION_DEEP_PRESS\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getActionButton()",
    "returnType" : "int",
    "comment" : "\n     * Gets which button has been modified during a press or release action.\n     *\n     * For actions other than {@link #ACTION_BUTTON_PRESS} and {@link #ACTION_BUTTON_RELEASE}\n     * the returned value is undefined.\n     *\n     * @see #getButtonState()\n     ",
    "links" : [ "#ACTION_BUTTON_PRESS", "#ACTION_BUTTON_RELEASE" ]
  }, {
    "name" : "public final void setActionButton(int button)",
    "returnType" : "void",
    "comment" : "\n     * Sets the action button for the event.\n     *\n     * @see #getActionButton()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float getRawX()",
    "returnType" : "float",
    "comment" : "\n     * Returns the original raw X coordinate of this event.  For touch\n     * events on the screen, this is the original location of the event\n     * on the screen, before it had been adjusted for the containing window\n     * and views.\n     *\n     * @see #getX(int)\n     * @see #AXIS_X\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float getRawY()",
    "returnType" : "float",
    "comment" : "\n     * Returns the original raw Y coordinate of this event.  For touch\n     * events on the screen, this is the original location of the event\n     * on the screen, before it had been adjusted for the containing window\n     * and views.\n     *\n     * @see #getY(int)\n     * @see #AXIS_Y\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getRawX(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the original raw X coordinate of this event.  For touch\n     * events on the screen, this is the original location of the event\n     * on the screen, before it had been adjusted for the containing window\n     * and views.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #getX(int)\n     * @see #AXIS_X\n     ",
    "links" : [ "#getPointerCount" ]
  }, {
    "name" : "public float getRawY(int pointerIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the original raw Y coordinate of this event.  For touch\n     * events on the screen, this is the original location of the event\n     * on the screen, before it had been adjusted for the containing window\n     * and views.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     *\n     * @see #getY(int)\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getPointerCount" ]
  }, {
    "name" : "public final float getXPrecision()",
    "returnType" : "float",
    "comment" : "\n     * Return the precision of the X coordinates being reported.  You can\n     * multiply this number with {@link #getX} to find the actual hardware\n     * value of the X coordinate.\n     * @return Returns the precision of X coordinates being reported.\n     *\n     * @see #AXIS_X\n     ",
    "links" : [ "#getX" ]
  }, {
    "name" : "public final float getYPrecision()",
    "returnType" : "float",
    "comment" : "\n     * Return the precision of the Y coordinates being reported.  You can\n     * multiply this number with {@link #getY} to find the actual hardware\n     * value of the Y coordinate.\n     * @return Returns the precision of Y coordinates being reported.\n     *\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getY" ]
  }, {
    "name" : "public float getXCursorPosition()",
    "returnType" : "float",
    "comment" : "\n     * Returns the x coordinate of mouse cursor position when this event is\n     * reported. This value is only valid if {@link #getSource()} returns\n     * {@link InputDevice#SOURCE_MOUSE}.\n     *\n     * @hide\n     ",
    "links" : [ "#getSource", "InputDevice#SOURCE_MOUSE" ]
  }, {
    "name" : "public float getYCursorPosition()",
    "returnType" : "float",
    "comment" : "\n     * Returns the y coordinate of mouse cursor position when this event is\n     * reported. This value is only valid if {@link #getSource()} returns\n     * {@link InputDevice#SOURCE_MOUSE}.\n     *\n     * @hide\n     ",
    "links" : [ "#getSource", "InputDevice#SOURCE_MOUSE" ]
  }, {
    "name" : "private void setCursorPosition(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Sets cursor position to given coordinates. The coordinate in parameters should be after\n     * offsetting. In other words, the effect of this function is {@link #getXCursorPosition()} and\n     * {@link #getYCursorPosition()} will return the same value passed in the parameters.\n     *\n     * @hide\n     ",
    "links" : [ "#getXCursorPosition", "#getYCursorPosition" ]
  }, {
    "name" : "public final int getHistorySize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of historical points in this event.  These are\n     * movements that have occurred between this event and the previous event.\n     * This only applies to ACTION_MOVE events -- all other actions will have\n     * a size of 0.\n     *\n     * @return Returns the number of historical points in the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getHistoricalEventTime(int pos)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time that a historical movement occurred between this event\n     * and the previous event, in the {@link android.os.SystemClock#uptimeMillis} time base.\n     * <p>\n     * This only applies to ACTION_MOVE events.\n     * </p>\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     * @return Returns the time that a historical movement occurred between this\n     * event and the previous event,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     *\n     * @see #getHistorySize\n     * @see #getEventTime\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis", "#getHistorySize", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final long getHistoricalEventTimeNano(int pos)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time that a historical movement occurred between this event\n     * and the previous event, in the {@link android.os.SystemClock#uptimeMillis} time base\n     * but with nanosecond (instead of millisecond) precision.\n     * <p>\n     * This only applies to ACTION_MOVE events.\n     * </p><p>\n     * The value is in nanosecond precision but it may not have nanosecond accuracy.\n     * </p>\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     * @return Returns the time that a historical movement occurred between this\n     * event and the previous event,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond (instead of millisecond) precision.\n     *\n     * @see #getHistorySize\n     * @see #getEventTime\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis", "#getHistorySize", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final float getHistoricalX(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalX(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getX()\n     * @see #AXIS_X\n     ",
    "links" : [ "#getHistoricalX", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalY(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalY(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getY()\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getHistoricalY", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalPressure(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalPressure(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getPressure()\n     * @see #AXIS_PRESSURE\n     ",
    "links" : [ "#getHistoricalPressure", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalSize(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalSize(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getSize()\n     * @see #AXIS_SIZE\n     ",
    "links" : [ "#getHistoricalSize", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalTouchMajor(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalTouchMajor(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getTouchMajor()\n     * @see #AXIS_TOUCH_MAJOR\n     ",
    "links" : [ "#getHistoricalTouchMajor", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalTouchMinor(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalTouchMinor(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getTouchMinor()\n     * @see #AXIS_TOUCH_MINOR\n     ",
    "links" : [ "#getHistoricalTouchMinor", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalToolMajor(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalToolMajor(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getToolMajor()\n     * @see #AXIS_TOOL_MAJOR\n     ",
    "links" : [ "#getHistoricalToolMajor", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalToolMinor(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalToolMinor(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getToolMinor()\n     * @see #AXIS_TOOL_MINOR\n     ",
    "links" : [ "#getHistoricalToolMinor", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalOrientation(int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalOrientation(int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getOrientation()\n     * @see #AXIS_ORIENTATION\n     ",
    "links" : [ "#getHistoricalOrientation", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalAxisValue(int axis, int pos)",
    "returnType" : "float",
    "comment" : "\n     * {@link #getHistoricalAxisValue(int, int, int)} for the first pointer index (may be an\n     * arbitrary pointer identifier).\n     *\n     * @param axis The axis identifier for the axis value to retrieve.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getAxisValue(int)\n     * @see #AXIS_X\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getHistoricalAxisValue", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalX(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical X coordinate, as per {@link #getX(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getX(int)\n     * @see #AXIS_X\n     ",
    "links" : [ "#getX", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalY(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical Y coordinate, as per {@link #getY(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getY(int)\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getY", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalPressure(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical pressure coordinate, as per {@link #getPressure(int)},\n     * that occurred between this event and the previous event for the given\n     * pointer.  Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getPressure(int)\n     * @see #AXIS_PRESSURE\n     ",
    "links" : [ "#getPressure", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalSize(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical size coordinate, as per {@link #getSize(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getSize(int)\n     * @see #AXIS_SIZE\n     ",
    "links" : [ "#getSize", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalTouchMajor(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical touch major axis coordinate, as per {@link #getTouchMajor(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getTouchMajor(int)\n     * @see #AXIS_TOUCH_MAJOR\n     ",
    "links" : [ "#getTouchMajor", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalTouchMinor(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical touch minor axis coordinate, as per {@link #getTouchMinor(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getTouchMinor(int)\n     * @see #AXIS_TOUCH_MINOR\n     ",
    "links" : [ "#getTouchMinor", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalToolMajor(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical tool major axis coordinate, as per {@link #getToolMajor(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getToolMajor(int)\n     * @see #AXIS_TOOL_MAJOR\n     ",
    "links" : [ "#getToolMajor", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalToolMinor(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical tool minor axis coordinate, as per {@link #getToolMinor(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getToolMinor(int)\n     * @see #AXIS_TOOL_MINOR\n     ",
    "links" : [ "#getToolMinor", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalOrientation(int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns a historical orientation coordinate, as per {@link #getOrientation(int)}, that\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     *\n     * @see #getHistorySize\n     * @see #getOrientation(int)\n     * @see #AXIS_ORIENTATION\n     ",
    "links" : [ "#getOrientation", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final float getHistoricalAxisValue(int axis, int pointerIndex, int pos)",
    "returnType" : "float",
    "comment" : "\n     * Returns the historical value of the requested axis, as per {@link #getAxisValue(int, int)},\n     * occurred between this event and the previous event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param axis The axis identifier for the axis value to retrieve.\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     * @return The value of the axis, or 0 if the axis is not available.\n     *\n     * @see #AXIS_X\n     * @see #AXIS_Y\n     ",
    "links" : [ "#getAxisValue", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final void getHistoricalPointerCoords(int pointerIndex, int pos, PointerCoords outPointerCoords)",
    "returnType" : "void",
    "comment" : "\n     * Populates a {@link PointerCoords} object with historical pointer coordinate data,\n     * as per {@link #getPointerCoords}, that occurred between this event and the previous\n     * event for the given pointer.\n     * Only applies to ACTION_MOVE events.\n     *\n     * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0\n     * (the first pointer that is down) to {@link #getPointerCount()}-1.\n     * @param pos Which historical value to return; must be less than\n     * {@link #getHistorySize}\n     * @param outPointerCoords The pointer coordinate object to populate.\n     *\n     * @see #getHistorySize\n     * @see #getPointerCoords\n     * @see PointerCoords\n     ",
    "links" : [ "PointerCoords", "#getPointerCoords", "#getPointerCount", "#getHistorySize" ]
  }, {
    "name" : "public final int getEdgeFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns a bitfield indicating which edges, if any, were touched by this\n     * MotionEvent. For touch events, clients can use this to determine if the\n     * user's finger was touching the edge of the display.\n     *\n     * This property is only set for {@link #ACTION_DOWN} events.\n     *\n     * @see #EDGE_LEFT\n     * @see #EDGE_TOP\n     * @see #EDGE_RIGHT\n     * @see #EDGE_BOTTOM\n     ",
    "links" : [ "#ACTION_DOWN" ]
  }, {
    "name" : "public final void setEdgeFlags(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bitfield indicating which edges, if any, were touched by this\n     * MotionEvent.\n     *\n     * @see #getEdgeFlags()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setAction(int action)",
    "returnType" : "void",
    "comment" : "\n     * Sets this event's action.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void offsetLocation(float deltaX, float deltaY)",
    "returnType" : "void",
    "comment" : "\n     * Adjust this event's location.\n     * @param deltaX Amount to add to the current X coordinate of the event.\n     * @param deltaY Amount to add to the current Y coordinate of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setLocation(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Set this event's location.  Applies {@link #offsetLocation} with a\n     * delta from the current location to the given new location.\n     *\n     * @param x New absolute X location.\n     * @param y New absolute Y location.\n     ",
    "links" : [ "#offsetLocation" ]
  }, {
    "name" : "public final void transform(Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Applies a transformation matrix to all of the points in the event.\n     *\n     * @param matrix The transformation matrix to apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void addBatch(long eventTime, float x, float y, float pressure, float size, int metaState)",
    "returnType" : "void",
    "comment" : "\n     * Add a new movement to the batch of movements in this event.  The event's\n     * current location, position and size is updated to the new values.\n     * The current values in the event are added to a list of historical values.\n     *\n     * Only applies to {@link #ACTION_MOVE} or {@link #ACTION_HOVER_MOVE} events.\n     *\n     * @param eventTime The time stamp (in ms) for this data.\n     * @param x The new X position.\n     * @param y The new Y position.\n     * @param pressure The new pressure.\n     * @param size The new size.\n     * @param metaState Meta key state.\n     ",
    "links" : [ "#ACTION_MOVE", "#ACTION_HOVER_MOVE" ]
  }, {
    "name" : "public final void addBatch(long eventTime, PointerCoords[] pointerCoords, int metaState)",
    "returnType" : "void",
    "comment" : "\n     * Add a new movement to the batch of movements in this event.  The event's\n     * current location, position and size is updated to the new values.\n     * The current values in the event are added to a list of historical values.\n     *\n     * Only applies to {@link #ACTION_MOVE} or {@link #ACTION_HOVER_MOVE} events.\n     *\n     * @param eventTime The time stamp (in ms) for this data.\n     * @param pointerCoords The new pointer coordinates.\n     * @param metaState Meta key state.\n     ",
    "links" : [ "#ACTION_MOVE", "#ACTION_HOVER_MOVE" ]
  }, {
    "name" : "public final boolean addBatch(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the movement samples of the specified event to this one if\n     * it is compatible.  To be compatible, the event must have the same device id,\n     * source, display id, action, flags, classification, pointer count, pointer properties.\n     *\n     * Only applies to {@link #ACTION_MOVE} or {@link #ACTION_HOVER_MOVE} events.\n     *\n     * @param event The event whose movements samples should be added to this one\n     * if possible.\n     * @return True if batching was performed or false if batching was not possible.\n     * @hide\n     ",
    "links" : [ "#ACTION_MOVE", "#ACTION_HOVER_MOVE" ]
  }, {
    "name" : "public final boolean isWithinBoundsNoHistory(float left, float top, float right, float bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if all points in the motion event are completely within the specified bounds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final float clamp(float value, float low, float high)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final MotionEvent clampNoHistory(float left, float top, float right, float bottom)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Returns a new motion events whose points have been clamped to the specified bounds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getPointerIdBits()",
    "returnType" : "int",
    "comment" : "\n     * Gets an integer where each pointer id present in the event is marked as a bit.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final MotionEvent split(int idBits)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Splits a motion event such that it includes only a subset of pointer ids.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateCursorPosition()",
    "returnType" : "void",
    "comment" : "\n     * Calculate new cursor position for events from mouse. This is used to split, clamp and inject\n     * events.\n     *\n     * <p>If the source is mouse, it sets cursor position to the centroid of all pointers because\n     * InputReader maps multiple fingers on a touchpad to locations around cursor position in screen\n     * coordinates so that the mouse cursor is at the centroid of all pointers.\n     *\n     * <p>If the source is not mouse it sets cursor position to NaN.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendUnless(T defValue, StringBuilder sb, String key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String actionToString(int action)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified unmasked action\n     * such as \"ACTION_DOWN\", \"ACTION_POINTER_DOWN(3)\" or an equivalent numeric constant\n     * such as \"35\" if unknown.\n     *\n     * @param action The unmasked action.\n     * @return The symbolic name of the specified action.\n     * @see #getAction()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String axisToString(int axis)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified axis\n     * such as \"AXIS_X\" or an equivalent numeric constant such as \"42\" if unknown.\n     *\n     * @param axis The axis.\n     * @return The symbolic name of the specified axis.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int axisFromString(String symbolicName)",
    "returnType" : "int",
    "comment" : "\n     * Gets an axis by its symbolic name such as \"AXIS_X\" or an\n     * equivalent numeric constant such as \"42\".\n     *\n     * @param symbolicName The symbolic name of the axis.\n     * @return The axis or -1 if not found.\n     * @see KeyEvent#keyCodeToString(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String buttonStateToString(int buttonState)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified combined\n     * button state flags such as \"0\", \"BUTTON_PRIMARY\",\n     * \"BUTTON_PRIMARY|BUTTON_SECONDARY\" or an equivalent numeric constant such as \"0x10000000\"\n     * if unknown.\n     *\n     * @param buttonState The button state.\n     * @return The symbolic name of the specified combined button state flags.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String classificationToString(@Classification int classification)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified classification.\n     *\n     * @param classification The classification type.\n     * @return The symbolic name of this classification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toolTypeToString(int toolType)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the symbolic name of the specified tool type\n     * such as \"TOOL_TYPE_FINGER\" or an equivalent numeric constant such as \"42\" if unknown.\n     *\n     * @param toolType The tool type.\n     * @return The symbolic name of the specified tool type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isButtonPressed(int button)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a mouse or stylus button (or combination of buttons) is pressed.\n     * @param button Button (or combination of buttons).\n     * @return True if specified buttons are pressed.\n     *\n     * @see #BUTTON_PRIMARY\n     * @see #BUTTON_SECONDARY\n     * @see #BUTTON_TERTIARY\n     * @see #BUTTON_FORWARD\n     * @see #BUTTON_BACK\n     * @see #BUTTON_STYLUS_PRIMARY\n     * @see #BUTTON_STYLUS_SECONDARY\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MotionEvent createFromParcelBody(Parcel in)",
    "returnType" : "MotionEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void cancel()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "NS_PER_MS", "LABEL_PREFIX", "DEBUG_CONCISE_TOSTRING", "INVALID_POINTER_ID", "ACTION_MASK", "ACTION_DOWN", "ACTION_UP", "ACTION_MOVE", "ACTION_CANCEL", "ACTION_OUTSIDE", "ACTION_POINTER_DOWN", "ACTION_POINTER_UP", "ACTION_HOVER_MOVE", "ACTION_SCROLL", "ACTION_HOVER_ENTER", "ACTION_HOVER_EXIT", "ACTION_BUTTON_PRESS", "ACTION_BUTTON_RELEASE", "ACTION_POINTER_INDEX_MASK", "ACTION_POINTER_INDEX_SHIFT", "ACTION_POINTER_1_DOWN", "ACTION_POINTER_2_DOWN", "ACTION_POINTER_3_DOWN", "ACTION_POINTER_1_UP", "ACTION_POINTER_2_UP", "ACTION_POINTER_3_UP", "ACTION_POINTER_ID_MASK", "ACTION_POINTER_ID_SHIFT", "FLAG_WINDOW_IS_OBSCURED", "FLAG_WINDOW_IS_PARTIALLY_OBSCURED", "FLAG_HOVER_EXIT_PENDING", "FLAG_IS_GENERATED_GESTURE", "FLAG_TAINTED", "FLAG_TARGET_ACCESSIBILITY_FOCUS", "EDGE_TOP", "EDGE_BOTTOM", "EDGE_LEFT", "EDGE_RIGHT", "AXIS_X", "AXIS_Y", "AXIS_PRESSURE", "AXIS_SIZE", "AXIS_TOUCH_MAJOR", "AXIS_TOUCH_MINOR", "AXIS_TOOL_MAJOR", "AXIS_TOOL_MINOR", "AXIS_ORIENTATION", "AXIS_VSCROLL", "AXIS_HSCROLL", "AXIS_Z", "AXIS_RX", "AXIS_RY", "AXIS_RZ", "AXIS_HAT_X", "AXIS_HAT_Y", "AXIS_LTRIGGER", "AXIS_RTRIGGER", "AXIS_THROTTLE", "AXIS_RUDDER", "AXIS_WHEEL", "AXIS_GAS", "AXIS_BRAKE", "AXIS_DISTANCE", "AXIS_TILT", "AXIS_SCROLL", "AXIS_RELATIVE_X", "AXIS_RELATIVE_Y", "AXIS_GENERIC_1", "AXIS_GENERIC_2", "AXIS_GENERIC_3", "AXIS_GENERIC_4", "AXIS_GENERIC_5", "AXIS_GENERIC_6", "AXIS_GENERIC_7", "AXIS_GENERIC_8", "AXIS_GENERIC_9", "AXIS_GENERIC_10", "AXIS_GENERIC_11", "AXIS_GENERIC_12", "AXIS_GENERIC_13", "AXIS_GENERIC_14", "AXIS_GENERIC_15", "AXIS_GENERIC_16", "AXIS_SYMBOLIC_NAMES", "BUTTON_PRIMARY", "BUTTON_SECONDARY", "BUTTON_TERTIARY", "BUTTON_BACK", "BUTTON_FORWARD", "BUTTON_STYLUS_PRIMARY", "BUTTON_STYLUS_SECONDARY", "BUTTON_SYMBOLIC_NAMES", "CLASSIFICATION_NONE", "CLASSIFICATION_AMBIGUOUS_GESTURE", "CLASSIFICATION_DEEP_PRESS", "TOOL_TYPE_UNKNOWN", "TOOL_TYPE_FINGER", "TOOL_TYPE_STYLUS", "TOOL_TYPE_MOUSE", "TOOL_TYPE_ERASER", "TOOL_TYPE_SYMBOLIC_NAMES", "HISTORY_CURRENT", "INVALID_CURSOR_POSITION", "MAX_RECYCLED", "gRecyclerLock", "gRecyclerUsed", "gRecyclerTop", "gSharedTempLock", "gSharedTempPointerCoords", "gSharedTempPointerProperties", "gSharedTempPointerIndexMap", "mNativePtr", "mNext", "CREATOR" ],
  "methodNames" : [ "private static final void ensureSharedTempPointerCapacity(int desiredCapacity)", "private static native long nativeInitialize(long nativePtr, int deviceId, int source, int displayId, int action, int flags, int edgeFlags, int metaState, int buttonState, @Classification int classification, float xOffset, float yOffset, float xPrecision, float yPrecision, long downTimeNanos, long eventTimeNanos, int pointerCount, PointerProperties[] pointerIds, PointerCoords[] pointerCoords)", "private static native void nativeDispose(long nativePtr)", "private static native void nativeAddBatch(long nativePtr, long eventTimeNanos, PointerCoords[] pointerCoords, int metaState)", "private static native void nativeGetPointerCoords(long nativePtr, int pointerIndex, int historyPos, PointerCoords outPointerCoords)", "private static native void nativeGetPointerProperties(long nativePtr, int pointerIndex, PointerProperties outPointerProperties)", "private static native long nativeReadFromParcel(long nativePtr, Parcel parcel)", "private static native void nativeWriteToParcel(long nativePtr, Parcel parcel)", "private static native String nativeAxisToString(int axis)", "private static native int nativeAxisFromString(String label)", "private static native int nativeGetPointerId(long nativePtr, int pointerIndex)", "private static native int nativeGetToolType(long nativePtr, int pointerIndex)", "private static native long nativeGetEventTimeNanos(long nativePtr, int historyPos)", "private static native float nativeGetRawAxisValue(long nativePtr, int axis, int pointerIndex, int historyPos)", "private static native float nativeGetAxisValue(long nativePtr, int axis, int pointerIndex, int historyPos)", "private static native void nativeTransform(long nativePtr, Matrix matrix)", "private static native long nativeCopy(long destNativePtr, long sourceNativePtr, boolean keepHistory)", "private static native int nativeGetId(long nativePtr)", "private static native int nativeGetDeviceId(long nativePtr)", "private static native int nativeGetSource(long nativePtr)", "private static native void nativeSetSource(long nativePtr, int source)", "private static native int nativeGetDisplayId(long nativePtr)", "private static native void nativeSetDisplayId(long nativePtr, int displayId)", "private static native int nativeGetAction(long nativePtr)", "private static native void nativeSetAction(long nativePtr, int action)", "private static native boolean nativeIsTouchEvent(long nativePtr)", "private static native int nativeGetFlags(long nativePtr)", "private static native void nativeSetFlags(long nativePtr, int flags)", "private static native int nativeGetEdgeFlags(long nativePtr)", "private static native void nativeSetEdgeFlags(long nativePtr, int action)", "private static native int nativeGetMetaState(long nativePtr)", "private static native int nativeGetButtonState(long nativePtr)", "private static native void nativeSetButtonState(long nativePtr, int buttonState)", "private static native int nativeGetClassification(long nativePtr)", "private static native int nativeGetActionButton(long nativePtr)", "private static native void nativeSetActionButton(long nativePtr, int actionButton)", "private static native void nativeOffsetLocation(long nativePtr, float deltaX, float deltaY)", "private static native float nativeGetXOffset(long nativePtr)", "private static native float nativeGetYOffset(long nativePtr)", "private static native float nativeGetXPrecision(long nativePtr)", "private static native float nativeGetYPrecision(long nativePtr)", "private static native float nativeGetXCursorPosition(long nativePtr)", "private static native float nativeGetYCursorPosition(long nativePtr)", "private static native void nativeSetCursorPosition(long nativePtr, float x, float y)", "private static native long nativeGetDownTimeNanos(long nativePtr)", "private static native void nativeSetDownTimeNanos(long nativePtr, long downTime)", "private static native int nativeGetPointerCount(long nativePtr)", "private static native int nativeFindPointerIndex(long nativePtr, int pointerId)", "private static native int nativeGetHistorySize(long nativePtr)", "private static native void nativeScale(long nativePtr, float scale)", "protected void finalize() throws Throwable", "private static MotionEvent obtain()", "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int displayId, int flags)", "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)", "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)", "public static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)", "public static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int displayId)", "public static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)", "public static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, int metaState)", "public static MotionEvent obtain(MotionEvent other)", "public static MotionEvent obtainNoHistory(MotionEvent other)", "private boolean initialize(int deviceId, int source, int displayId, int action, int flags, int edgeFlags, int metaState, int buttonState, @Classification int classification, float xOffset, float yOffset, float xPrecision, float yPrecision, long downTimeNanos, long eventTimeNanos, int pointerCount, PointerProperties[] pointerIds, PointerCoords[] pointerCoords)", "public MotionEvent copy()", "public final void recycle()", "public final void scale(float scale)", "public int getId()", "public final int getDeviceId()", "public final int getSource()", "public final void setSource(int source)", "public int getDisplayId()", "public void setDisplayId(int displayId)", "public final int getAction()", "public final int getActionMasked()", "public final int getActionIndex()", "public final boolean isTouchEvent()", "public final int getFlags()", "public final boolean isTainted()", "public final void setTainted(boolean tainted)", "public boolean isTargetAccessibilityFocus()", "public void setTargetAccessibilityFocus(boolean targetsFocus)", "public final boolean isHoverExitPending()", "public void setHoverExitPending(boolean hoverExitPending)", "public final long getDownTime()", "public final void setDownTime(long downTime)", "public final long getEventTime()", "public final long getEventTimeNano()", "public final float getX()", "public final float getY()", "public final float getPressure()", "public final float getSize()", "public final float getTouchMajor()", "public final float getTouchMinor()", "public final float getToolMajor()", "public final float getToolMinor()", "public final float getOrientation()", "public final float getAxisValue(int axis)", "public final int getPointerCount()", "public final int getPointerId(int pointerIndex)", "public final int getToolType(int pointerIndex)", "public final int findPointerIndex(int pointerId)", "public final float getX(int pointerIndex)", "public final float getY(int pointerIndex)", "public final float getPressure(int pointerIndex)", "public final float getSize(int pointerIndex)", "public final float getTouchMajor(int pointerIndex)", "public final float getTouchMinor(int pointerIndex)", "public final float getToolMajor(int pointerIndex)", "public final float getToolMinor(int pointerIndex)", "public final float getOrientation(int pointerIndex)", "public final float getAxisValue(int axis, int pointerIndex)", "public final void getPointerCoords(int pointerIndex, PointerCoords outPointerCoords)", "public final void getPointerProperties(int pointerIndex, PointerProperties outPointerProperties)", "public final int getMetaState()", "public final int getButtonState()", "public final void setButtonState(int buttonState)", "public int getClassification()", "public final int getActionButton()", "public final void setActionButton(int button)", "public final float getRawX()", "public final float getRawY()", "public float getRawX(int pointerIndex)", "public float getRawY(int pointerIndex)", "public final float getXPrecision()", "public final float getYPrecision()", "public float getXCursorPosition()", "public float getYCursorPosition()", "private void setCursorPosition(float x, float y)", "public final int getHistorySize()", "public final long getHistoricalEventTime(int pos)", "public final long getHistoricalEventTimeNano(int pos)", "public final float getHistoricalX(int pos)", "public final float getHistoricalY(int pos)", "public final float getHistoricalPressure(int pos)", "public final float getHistoricalSize(int pos)", "public final float getHistoricalTouchMajor(int pos)", "public final float getHistoricalTouchMinor(int pos)", "public final float getHistoricalToolMajor(int pos)", "public final float getHistoricalToolMinor(int pos)", "public final float getHistoricalOrientation(int pos)", "public final float getHistoricalAxisValue(int axis, int pos)", "public final float getHistoricalX(int pointerIndex, int pos)", "public final float getHistoricalY(int pointerIndex, int pos)", "public final float getHistoricalPressure(int pointerIndex, int pos)", "public final float getHistoricalSize(int pointerIndex, int pos)", "public final float getHistoricalTouchMajor(int pointerIndex, int pos)", "public final float getHistoricalTouchMinor(int pointerIndex, int pos)", "public final float getHistoricalToolMajor(int pointerIndex, int pos)", "public final float getHistoricalToolMinor(int pointerIndex, int pos)", "public final float getHistoricalOrientation(int pointerIndex, int pos)", "public final float getHistoricalAxisValue(int axis, int pointerIndex, int pos)", "public final void getHistoricalPointerCoords(int pointerIndex, int pos, PointerCoords outPointerCoords)", "public final int getEdgeFlags()", "public final void setEdgeFlags(int flags)", "public final void setAction(int action)", "public final void offsetLocation(float deltaX, float deltaY)", "public final void setLocation(float x, float y)", "public final void transform(Matrix matrix)", "public final void addBatch(long eventTime, float x, float y, float pressure, float size, int metaState)", "public final void addBatch(long eventTime, PointerCoords[] pointerCoords, int metaState)", "public final boolean addBatch(MotionEvent event)", "public final boolean isWithinBoundsNoHistory(float left, float top, float right, float bottom)", "private static final float clamp(float value, float low, float high)", "public final MotionEvent clampNoHistory(float left, float top, float right, float bottom)", "public final int getPointerIdBits()", "public final MotionEvent split(int idBits)", "private void updateCursorPosition()", "public String toString()", "private static void appendUnless(T defValue, StringBuilder sb, String key, T value)", "public static String actionToString(int action)", "public static String axisToString(int axis)", "public static int axisFromString(String symbolicName)", "public static String buttonStateToString(int buttonState)", "public static String classificationToString(@Classification int classification)", "public static String toolTypeToString(int toolType)", "public final boolean isButtonPressed(int button)", "public static MotionEvent createFromParcelBody(Parcel in)", "public final void cancel()", "public void writeToParcel(Parcel out, int flags)" ]
}