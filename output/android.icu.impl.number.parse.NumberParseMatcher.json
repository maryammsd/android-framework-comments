{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/parse/NumberParseMatcher.java",
  "packageName" : "android.icu.impl.number.parse",
  "className" : "NumberParseMatcher",
  "comment" : "\n * The core interface implemented by all matchers used for number parsing.\n *\n * Given a string, there should NOT be more than one way to consume the string with the same matcher\n * applied multiple times. If there is, the non-greedy parsing algorithm will be unhappy and may enter an\n * exponential-time loop. For example, consider the \"A Matcher\" that accepts \"any number of As\". Given\n * the string \"AAAA\", there are 2^N = 8 ways to apply the A Matcher to this string: you could have the A\n * Matcher apply 4 times to each character; you could have it apply just once to all the characters; you\n * could have it apply to the first 2 characters and the second 2 characters; and so on. A better version\n * of the \"A Matcher\" would be for it to accept exactly one A, and allow the algorithm to run it\n * repeatedly to consume a string of multiple As. The A Matcher can implement the Flexible interface\n * below to signal that it can be applied multiple times in a row.\n *\n * @author sffc\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean match(StringSegment segment, ParsedNumber result)",
    "returnType" : "boolean",
    "comment" : "\n     * Runs this matcher starting at the beginning of the given StringSegment. If this matcher finds\n     * something interesting in the StringSegment, it should update the offset of the StringSegment\n     * corresponding to how many chars were matched.\n     *\n     * @param segment\n     *            The StringSegment to match against. Matches always start at the beginning of the\n     *            segment. The segment is guaranteed to contain at least one char.\n     * @param result\n     *            The data structure to store results if the match succeeds.\n     * @return Whether this matcher thinks there may be more interesting chars beyond the end of the\n     *         string segment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean smokeTest(StringSegment segment)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs a fast \"smoke check\" for whether or not this matcher could possibly match against the\n     * given string segment. The test should be as fast as possible but also as restrictive as possible.\n     * For example, matchers can maintain a UnicodeSet of all code points that count possibly start a\n     * match. Matchers should use the {@link StringSegment#startsWith} method in order to correctly\n     * handle case folding.\n     *\n     * @param segment\n     *            The segment to check against.\n     * @return true if the matcher might be able to match against this segment; false if it definitely\n     *         will not be able to match.\n     ",
    "links" : [ "android.icu.impl.StringSegment#startsWith" ]
  }, {
    "name" : "public void postProcess(ParsedNumber result)",
    "returnType" : "void",
    "comment" : "\n     * Method called at the end of a parse, after all matchers have failed to consume any more chars.\n     * Allows a matcher to make final modifications to the result given the knowledge that no more\n     * matches are possible.\n     *\n     * @param result\n     *            The data structure to store results.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean match(StringSegment segment, ParsedNumber result)", "public boolean smokeTest(StringSegment segment)", "public void postProcess(ParsedNumber result)" ],
  "variableNames" : [ ]
}