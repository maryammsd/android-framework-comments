{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothSap.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothSap",
  "comment" : "\n * This class provides the APIs to control the Bluetooth SIM\n * Access Profile (SAP).\n *\n * <p>BluetoothSap is a proxy object for controlling the Bluetooth\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get\n * the BluetoothSap proxy object.\n *\n * <p>Each method is protected with its appropriate permission.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the profile.\n     *\n     * <p>This intent will have 4 extras:\n     * <ul>\n     * <li> {@link #EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of\n     * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},\n     * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "BluetoothDevice#EXTRA_DEVICE", "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "#STATE_DISCONNECTED", "#STATE_CONNECTING", "#STATE_CONNECTED", "#STATE_DISCONNECTING", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : "\n     * There was an error trying to obtain the state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Connection state change succceeded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELED",
    "type" : "int",
    "comment" : "\n     * Connection canceled before completion.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothSap>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service.\n     * Other public functions of BluetoothSap will return default error\n     * results once close() has been called. Multiple invocations of close()\n     * are ok.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothSap getService()",
    "returnType" : "IBluetoothSap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Get the current state of the BluetoothSap service.\n     *\n     * @return One of the STATE_ return codes, or STATE_ERROR if this proxy object is currently not\n     * connected to the Sap service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothDevice getClient()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the currently connected remote Bluetooth device (PCE).\n     *\n     * @return The remote Bluetooth device, or null if not in connected or connecting state, or if\n     * this proxy object is not connected to the Sap service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnected(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified Bluetooth device is connected.\n     * Returns false if not connected, or if this proxy object is not\n     * currently connected to the Sap service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection. Initiation of outgoing connections is not\n     * supported for SAP server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnect.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of connected devices. Currently at most one.\n     *\n     * @return list of connected devices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of devices matching specified states. Currently at most one.\n     *\n     * @return list of matching devices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get connection state of device\n     *\n     * @return device connection state\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p> The device should already be paired.\n     * Priority can be one of {@link #PRIORITY_ON} or {@link #PRIORITY_OFF},\n     *\n     * @param device Paired bluetooth device\n     * @param priority\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of {@link #CONNECTION_POLICY_ALLOWED},\n     * {@link #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p> The priority can be any of:\n     * {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_OFF", "#PRIORITY_ON", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p> The connection policy can be any of:\n     * {@link #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN},\n     * {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "STATE_ERROR", "RESULT_SUCCESS", "RESULT_CANCELED", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public synchronized void close()", "private IBluetoothSap getService()", "public int getState()", "public BluetoothDevice getClient()", "public boolean isConnected(BluetoothDevice device)", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(BluetoothDevice device)", "private static void log(String msg)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)" ]
}