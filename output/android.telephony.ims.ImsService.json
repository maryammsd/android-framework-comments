{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/ImsService.java",
  "packageName" : "android.telephony.ims",
  "className" : "ImsService",
  "comment" : "\n * Main ImsService implementation, which binds via the Telephony ImsResolver. Services that extend\n * ImsService must register the service in their AndroidManifest to be detected by the framework.\n * First, the application must declare that they use the \"android.permission.BIND_IMS_SERVICE\"\n * permission. Then, the ImsService definition in the manifest must follow the following format:\n *\n * ...\n * <service android:name=\".EgImsService\"\n *     android:permission=\"android.permission.BIND_IMS_SERVICE\" >\n *     ...\n *     <intent-filter>\n *         <action android:name=\"android.telephony.ims.ImsService\" />\n *     </intent-filter>\n * </service>\n * ...\n *\n * The telephony framework will then bind to the ImsService you have defined in your manifest\n * if you are either:\n * 1) Defined as the default ImsService for the device in the device overlay using\n *    \"config_ims_mmtel_package\" or \"config_ims_rcs_package\".\n * 2) Defined as a Carrier Provided ImsService in the Carrier Configuration using\n *    {@link CarrierConfigManager#KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING} or\n *    {@link CarrierConfigManager#KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING}.\n *\n * There are two ways to define to the platform which {@link ImsFeature}s this {@link ImsService}\n * supports, dynamic or static definitions.\n *\n * In the static definition, the {@link ImsFeature}s that are supported are defined in the service\n * definition of the AndroidManifest.xml file as metadata:\n * <!-- Apps must declare which features they support as metadata. The different categories are\n *      defined below. In this example, the MMTEL_FEATURE feature is supported. -->\n * <meta-data android:name=\"android.telephony.ims.MMTEL_FEATURE\" android:value=\"true\" />\n *\n * The features that are currently supported in an ImsService are:\n * - RCS_FEATURE: This ImsService implements the RcsFeature class.\n * - MMTEL_FEATURE: This ImsService implements the MmTelFeature class.\n * - EMERGENCY_MMTEL_FEATURE: This ImsService supports Emergency Calling for MMTEL, must be\n *   declared along with the MMTEL_FEATURE. If this is not specified, the framework will use\n *   circuit switch for emergency calling.\n *\n * In the dynamic definition, the supported features are not specified in the service definition\n * of the AndroidManifest. Instead, the framework binds to this service and calls\n * {@link #querySupportedImsFeatures()}. The {@link ImsService} then returns an\n * {@link ImsFeatureConfiguration}, which the framework uses to initialize the supported\n * {@link ImsFeature}s. If at any time, the list of supported {@link ImsFeature}s changes,\n * {@link #onUpdateSupportedImsFeatures(ImsFeatureConfiguration)} can be called to tell the\n * framework of the changes.\n *\n * @hide\n ",
  "links" : [ "android.telephony.CarrierConfigManager#KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING", "android.telephony.ims.feature.ImsFeature", "android.telephony.ims.stub.ImsFeatureConfiguration", "#querySupportedImsFeatures()", "#onUpdateSupportedImsFeatures(ImsFeatureConfiguration)", "android.telephony.CarrierConfigManager#KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING", "android.telephony.ims.ImsService" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_EMERGENCY_OVER_MMTEL",
    "type" : "long",
    "comment" : "\n     * This ImsService supports the capability to place emergency calls over MMTEL.\n     * <p>\n     * Note: This should never be set by {@link #getImsServiceCapabilities()}, as whether it is\n     * there or not depends on whether or not {@link ImsFeature#FEATURE_EMERGENCY_MMTEL} is defined\n     * for this ImsService. If it is set, it will be removed during sanitization before the final\n     * capabilities bitfield is sent back to the framework.\n     * @hide This is encoded into the {@link ImsFeature#FEATURE_EMERGENCY_MMTEL}, but we will be\n     * adding other capabilities in a central location, so track this capability here as well.\n     ",
    "links" : [ "#getImsServiceCapabilities()", "android.telephony.ims.feature.ImsFeature#FEATURE_EMERGENCY_MMTEL" ]
  }, {
    "name" : "CAPABILITY_SIP_DELEGATE_CREATION",
    "type" : "long",
    "comment" : "\n     * This ImsService supports the capability to create SIP delegates for other IMS applications\n     * to use to proxy SIP messaging traffic through it.\n     * <p>\n     * In order for the framework to report SipDelegate creation as being available for this\n     * ImsService implementation, this ImsService must report this capability flag in\n     * {@link #getImsServiceCapabilities()}, {@link #getSipTransport(int)} must not return null, and\n     * this ImsService MUST report the ability to create both {@link ImsFeature#FEATURE_MMTEL} and\n     * {@link ImsFeature#FEATURE_RCS} features.\n     ",
    "links" : [ "#getImsServiceCapabilities()", "#getSipTransport(int)", "android.telephony.ims.feature.ImsFeature#FEATURE_RCS", "android.telephony.ims.feature.ImsFeature#FEATURE_MMTEL" ]
  }, {
    "name" : "CAPABILITY_TERMINAL_BASED_CALL_WAITING",
    "type" : "long",
    "comment" : "\n     * This ImsService supports the terminal based call waiting service.\n     * <p>\n     * In order for the IMS service to support the service, IMS service shall\n     * override {@link MmTelFeature#setTerminalBasedCallWaitingStatus}.\n     * If ImsService has this capability, Android platform will handle the synchronization\n     * between the network based call waiting service over circuit-switched networks and the\n     * terminal based call waiting service of IMS service, and will handle the received\n     * circuit-switched waiting calls. Otherwise, this functionality of Android platform shall\n     * be disabled.\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsMmTelFeature#setTerminalBasedCallWaitingStatus" ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_SIMULTANEOUS_CALLING",
    "type" : "long",
    "comment" : "\n     * This ImsService supports the capability to manage calls on multiple subscriptions at the same\n     * time.\n     * <p>\n     * When set, this ImsService supports managing calls on multiple subscriptions at the same time\n     * for all WLAN network configurations. Telephony will allow new outgoing/incoming IMS calls to\n     * be set up on other subscriptions while there is an ongoing call. The ImsService must also\n     * support managing calls on WWAN + WWAN configurations whenever the modem also reports\n     * simultaneous calling availability, which can be listened to using the\n     * {@link android.telephony.TelephonyCallback.SimultaneousCellularCallingSupportListener} API.\n     * Telephony will only allow additional ongoing/incoming IMS calls on another subscription to be\n     * set up on WWAN + WWAN configurations when the modem reports that simultaneous cellular\n     * calling is allowed at the current time on both subscriptions where there are ongoing calls.\n     * <p>\n     * When unset (default), this ImsService can not support calls on multiple subscriptions at the\n     * same time for any WLAN or WWAN configurations, so pending outgoing call placed on another\n     * cellular subscription while there is an ongoing call will be cancelled by Telephony.\n     * Similarly, any incoming call notification on another cellular subscription while there is an\n     * ongoing call will be rejected.\n     * @hide TODO: move this to system API when we have a backing implementation + CTS testing\n     ",
    "links" : [ "android.telephony.TelephonyCallback.SimultaneousCellularCallingSupportListener" ]
  }, {
    "name" : "CAPABILITY_MAX_INDEX",
    "type" : "long",
    "comment" : "\n     * Used for internal correctness checks of capabilities set by the ImsService implementation and\n     * tracks the index of the largest defined flag in the capabilities long.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITIES_LOG_MAP",
    "type" : "Map<Long, String>",
    "comment" : "\n     * Used for logging purposes, see {@link #getCapabilitiesString(long)}\n     * @hide\n     ",
    "links" : [ "#getCapabilitiesString(long)" ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The intent that must be defined as an intent-filter in the AndroidManifest of the ImsService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mFeaturesBySlot",
    "type" : "SparseArray<SparseArray<ImsFeature>>",
    "comment" : " call ImsFeature#onFeatureRemoved.",
    "links" : [ ]
  }, {
    "name" : "mCreateImsFeatureWithSlotIdFlagMap",
    "type" : "SparseArray<SparseBooleanArray>",
    "comment" : " purposes.",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "IImsServiceControllerListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutorLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImsServiceController",
    "type" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeathRecipient",
    "type" : "IBinder.DeathRecipient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Executor getCachedExecutor()",
    "returnType" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IImsMmTelFeature createMmTelFeatureInternal(int slotId, int subscriptionId)",
    "returnType" : "IImsMmTelFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IImsMmTelFeature createEmergencyOnlyMmTelFeatureInternal(int slotId)",
    "returnType" : "IImsMmTelFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IImsRcsFeature createRcsFeatureInternal(int slotId, int subId)",
    "returnType" : "IImsRcsFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupFeature(ImsFeature f, int slotId, int featureType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addImsFeatureStatusCallback(int slotId, int featureType, IImsFeatureStatusCallback c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeImsFeatureStatusCallback(int slotId, int featureType, IImsFeatureStatusCallback c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addImsFeature(int slotId, int featureType, ImsFeature f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeImsFeature(int slotId, int featureType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ImsFeature getImsFeature(int slotId, int featureType)",
    "returnType" : "ImsFeature",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setImsFeatureCreatedForSlot(int slotId, @ImsFeature.FeatureType int featureType, boolean createdForSlot)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isImsFeatureCreatedForSlot(int slotId, @ImsFeature.FeatureType int featureType)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private SparseBooleanArray getImsFeatureCreatedForSlot(int slotId)",
    "returnType" : "SparseBooleanArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseResource()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeMethodAsync(Runnable r, String errorLogName)",
    "returnType" : "void",
    "comment" : " the future to return.",
    "links" : [ ]
  }, {
    "name" : "private T executeMethodAsyncForResult(Supplier<T> r, String errorLogName)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetImsInternal(int slotId, int subId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ImsFeatureConfiguration querySupportedImsFeatures()",
    "returnType" : "ImsFeatureConfiguration",
    "comment" : "\n     * When called, provide the {@link ImsFeatureConfiguration} that this {@link ImsService}\n     * currently supports. This will trigger the framework to set up the {@link ImsFeature}s that\n     * correspond to the {@link ImsFeature}s configured here.\n     *\n     * Use {@link #onUpdateSupportedImsFeatures(ImsFeatureConfiguration)} to change the supported\n     * {@link ImsFeature}s.\n     *\n     * @return an {@link ImsFeatureConfiguration} containing Features this ImsService supports.\n     ",
    "links" : [ "android.telephony.ims.feature.ImsFeature", "android.telephony.ims.stub.ImsFeatureConfiguration", "#onUpdateSupportedImsFeatures(ImsFeatureConfiguration)", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public final void onUpdateSupportedImsFeatures(ImsFeatureConfiguration c) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Updates the framework with a new {@link ImsFeatureConfiguration} containing the updated\n     * features, that this {@link ImsService} supports. This may trigger the framework to add/remove\n     * new ImsFeatures, depending on the configuration.\n     ",
    "links" : [ "android.telephony.ims.stub.ImsFeatureConfiguration", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public long getImsServiceCapabilities()",
    "returnType" : "long",
    "comment" : " final and call back into the framework with a state update.",
    "links" : [ ]
  }, {
    "name" : "public void readyForFeatureCreation()",
    "returnType" : "void",
    "comment" : "\n     * The ImsService has been bound and is ready for ImsFeature creation based on the Features that\n     * the ImsService has registered for with the framework, either in the manifest or via\n     * {@link #querySupportedImsFeatures()}.\n     *\n     * The ImsService should use this signal instead of onCreate/onBind or similar to perform\n     * feature initialization because the framework may bind to this service multiple times to\n     * query the ImsService's {@link ImsFeatureConfiguration} via\n     * {@link #querySupportedImsFeatures()}before creating features.\n     ",
    "links" : [ "android.telephony.ims.stub.ImsFeatureConfiguration", "#querySupportedImsFeatures()" ]
  }, {
    "name" : "public void enableImsForSubscription(int slotId, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has enabled IMS for the subscription specified, the ImsService should register\n     * for IMS and perform all appropriate initialization to bring up all ImsFeatures.\n     *\n     * @param slotId The slot ID that IMS will be enabled for.\n     * @param subscriptionId The subscription ID that IMS will be enabled for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableImsForSubscription(int slotId, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has disabled IMS for the subscription specified. The ImsService must deregister\n     * for IMS and set capability status to false for all ImsFeatures.\n     * @param slotId The slot ID that IMS will be disabled for.\n     * @param subscriptionId The subscription ID that IMS will be disabled for.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void notifySubscriptionRemoved(int slotId)",
    "returnType" : "void",
    "comment" : "\n     * The subscription has removed. The ImsService should notify ImsRegistrationImplBase and\n     * ImsConfigImplBase the SIM state was changed.\n     * @param slotId The slot ID which has removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableIms(int slotId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has enabled IMS for the slot specified, the ImsService should register for IMS\n     * and perform all appropriate initialization to bring up all ImsFeatures.\n     * @deprecated Use {@link #enableImsForSubscription} instead.\n     ",
    "links" : [ "#enableImsForSubscription" ]
  }, {
    "name" : "public void disableIms(int slotId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has disabled IMS for the slot specified. The ImsService must deregister for IMS\n     * and set capability status to false for all ImsFeatures.\n     * @deprecated Use {@link #disableImsForSubscription} instead.\n     ",
    "links" : [ "#disableImsForSubscription" ]
  }, {
    "name" : "public void resetIms(int slotId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has reset IMS for the slot specified. The ImsService must deregister\n     * and release all resources for IMS. After resetIms is called, either\n     * {@link #enableImsForSubscription(int, int)} or {@link #disableImsForSubscription(int, int)}\n     * will be called for the same slotId.\n     *\n     * @param slotId The slot ID that IMS will be reset for.\n     * @hide\n     ",
    "links" : [ "#enableImsForSubscription(int", "#disableImsForSubscription(int" ]
  }, {
    "name" : "public MmTelFeature createMmTelFeatureForSubscription(int slotId, int subscriptionId)",
    "returnType" : "MmTelFeature",
    "comment" : "\n     * When called, the framework is requesting that a new {@link MmTelFeature} is created for the\n     * specified subscription.\n     *\n     * @param subscriptionId The subscription ID that the MMTEL Feature is being created for.\n     * @return The newly created {@link MmTelFeature} associated with the subscription or null if\n     * the feature is not supported.\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsMmTelFeature" ]
  }, {
    "name" : "public RcsFeature createRcsFeatureForSubscription(int slotId, int subscriptionId)",
    "returnType" : "RcsFeature",
    "comment" : "\n     * When called, the framework is requesting that a new {@link RcsFeature} is created for the\n     * specified subscription.\n     *\n     * @param subscriptionId The subscription ID that the RCS Feature is being created for.\n     * @return The newly created {@link RcsFeature} associated with the subscription or null if the\n     * feature is not supported.\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsRcsFeature" ]
  }, {
    "name" : "public MmTelFeature createEmergencyOnlyMmTelFeature(int slotId)",
    "returnType" : "MmTelFeature",
    "comment" : "\n     * When called, the framework is requesting that a new emergency-only {@link MmTelFeature} is\n     * created for the specified slot. For emergency calls, there is no known Subscription Id.\n     *\n     * @param slotId The slot ID that the MMTEL Feature is being created for.\n     * @return An MmTelFeature instance to be used for the slot ID when there is not\n     * subscription inserted. Only requested when there is no subscription active on\n     * the specified slot.\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsMmTelFeature" ]
  }, {
    "name" : "public MmTelFeature createMmTelFeature(int slotId)",
    "returnType" : "MmTelFeature",
    "comment" : "\n     * When called, the framework is requesting that a new {@link MmTelFeature} is created for the\n     * specified slot.\n     * @deprecated Use {@link #createMmTelFeatureForSubscription} instead\n     *\n     * @param slotId The slot ID that the MMTEL Feature is being created for.\n     * @return The newly created {@link MmTelFeature} associated with the slot or null if the\n     * feature is not supported.\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsMmTelFeature", "#createMmTelFeatureForSubscription" ]
  }, {
    "name" : "public RcsFeature createRcsFeature(int slotId)",
    "returnType" : "RcsFeature",
    "comment" : "\n     * When called, the framework is requesting that a new {@link RcsFeature} is created for the\n     * specified slot.\n     * @deprecated Use {@link #createRcsFeatureForSubscription} instead\n     *\n     * @param slotId The slot ID that the RCS Feature is being created for.\n     * @return The newly created {@link RcsFeature} associated with the slot or null if the feature\n     * is not supported.\n     ",
    "links" : [ "#createRcsFeatureForSubscription", "android.telephony.ims.aidl.IImsRcsFeature" ]
  }, {
    "name" : "public ImsConfigImplBase getConfigForSubscription(int slotId, int subscriptionId)",
    "returnType" : "ImsConfigImplBase",
    "comment" : "\n     * Return the {@link ImsConfigImplBase} implementation associated with the provided\n     * subscription. This will be used by the platform to get/set specific IMS related\n     * configurations.\n     *\n     * @param subscriptionId The subscription ID that the IMS configuration is associated with.\n     * @return ImsConfig implementation that is associated with the specified subscription.\n     ",
    "links" : [ "android.telephony.ims.stub.ImsConfigImplBase" ]
  }, {
    "name" : "public ImsRegistrationImplBase getRegistrationForSubscription(int slotId, int subscriptionId)",
    "returnType" : "ImsRegistrationImplBase",
    "comment" : "\n     * Return the {@link ImsRegistrationImplBase} implementation associated with the provided\n     * subscription.\n     *\n     * @param subscriptionId The subscription ID that is associated with the IMS Registration.\n     * @return the ImsRegistration implementation associated with the subscription.\n     ",
    "links" : [ "android.telephony.ims.stub.ImsRegistrationImplBase" ]
  }, {
    "name" : "public ImsConfigImplBase getConfig(int slotId)",
    "returnType" : "ImsConfigImplBase",
    "comment" : "\n     * Return the {@link ImsConfigImplBase} implementation associated with the provided slot. This\n     * will be used by the platform to get/set specific IMS related configurations.\n     * @deprecated use {@link #getConfigForSubscription} instead.\n     *\n     * @param slotId The slot that the IMS configuration is associated with.\n     * @return ImsConfig implementation that is associated with the specified slot.\n     ",
    "links" : [ "android.telephony.ims.stub.ImsConfigImplBase", "#getConfigForSubscription" ]
  }, {
    "name" : "public ImsRegistrationImplBase getRegistration(int slotId)",
    "returnType" : "ImsRegistrationImplBase",
    "comment" : "\n     * Return the {@link ImsRegistrationImplBase} implementation associated with the provided slot.\n     * @deprecated use  {@link #getRegistrationForSubscription} instead.\n     *\n     * @param slotId The slot that is associated with the IMS Registration.\n     * @return the ImsRegistration implementation associated with the slot.\n     ",
    "links" : [ "#getRegistrationForSubscription", "android.telephony.ims.stub.ImsRegistrationImplBase" ]
  }, {
    "name" : "public SipTransportImplBase getSipTransport(int slotId)",
    "returnType" : "SipTransportImplBase",
    "comment" : " final and call back into the framework with a state update.",
    "links" : [ ]
  }, {
    "name" : "private static long sanitizeCapabilities(@ImsServiceCapability long caps)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getCapabilitiesString(@ImsServiceCapability long caps)",
    "returnType" : "String",
    "comment" : "\n     * @return A string representation of the ImsService capabilities for logging.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * The ImsService will now be able to define an Executor that the ImsService can be used to\n     * execute the methods. By default all ImsService level method calls will use this Executor.\n     * The ImsService has set the default executor as Runnable::run,\n     * Should be override or default executor will be used.\n     *  @return an Executor used to execute methods called remotely by the framework.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public IBinder onBind(Intent intent)", "private Executor getCachedExecutor()", "private IImsMmTelFeature createMmTelFeatureInternal(int slotId, int subscriptionId)", "private IImsMmTelFeature createEmergencyOnlyMmTelFeatureInternal(int slotId)", "private IImsRcsFeature createRcsFeatureInternal(int slotId, int subId)", "private void setupFeature(ImsFeature f, int slotId, int featureType)", "private void addImsFeatureStatusCallback(int slotId, int featureType, IImsFeatureStatusCallback c)", "private void removeImsFeatureStatusCallback(int slotId, int featureType, IImsFeatureStatusCallback c)", "private void addImsFeature(int slotId, int featureType, ImsFeature f)", "private void removeImsFeature(int slotId, int featureType)", "public ImsFeature getImsFeature(int slotId, int featureType)", "private void setImsFeatureCreatedForSlot(int slotId, @ImsFeature.FeatureType int featureType, boolean createdForSlot)", "public boolean isImsFeatureCreatedForSlot(int slotId, @ImsFeature.FeatureType int featureType)", "private SparseBooleanArray getImsFeatureCreatedForSlot(int slotId)", "private void releaseResource()", "private void executeMethodAsync(Runnable r, String errorLogName)", "private T executeMethodAsyncForResult(Supplier<T> r, String errorLogName)", "private void resetImsInternal(int slotId, int subId)", "public ImsFeatureConfiguration querySupportedImsFeatures()", "public final void onUpdateSupportedImsFeatures(ImsFeatureConfiguration c) throws RemoteException", "public long getImsServiceCapabilities()", "public void readyForFeatureCreation()", "public void enableImsForSubscription(int slotId, int subscriptionId)", "public void disableImsForSubscription(int slotId, int subscriptionId)", "private void notifySubscriptionRemoved(int slotId)", "public void enableIms(int slotId)", "public void disableIms(int slotId)", "public void resetIms(int slotId)", "public MmTelFeature createMmTelFeatureForSubscription(int slotId, int subscriptionId)", "public RcsFeature createRcsFeatureForSubscription(int slotId, int subscriptionId)", "public MmTelFeature createEmergencyOnlyMmTelFeature(int slotId)", "public MmTelFeature createMmTelFeature(int slotId)", "public RcsFeature createRcsFeature(int slotId)", "public ImsConfigImplBase getConfigForSubscription(int slotId, int subscriptionId)", "public ImsRegistrationImplBase getRegistrationForSubscription(int slotId, int subscriptionId)", "public ImsConfigImplBase getConfig(int slotId)", "public ImsRegistrationImplBase getRegistration(int slotId)", "public SipTransportImplBase getSipTransport(int slotId)", "private static long sanitizeCapabilities(@ImsServiceCapability long caps)", "public static String getCapabilitiesString(@ImsServiceCapability long caps)", "public Executor getExecutor()" ],
  "variableNames" : [ "LOG_TAG", "CAPABILITY_EMERGENCY_OVER_MMTEL", "CAPABILITY_SIP_DELEGATE_CREATION", "CAPABILITY_TERMINAL_BASED_CALL_WAITING", "CAPABILITY_SUPPORTS_SIMULTANEOUS_CALLING", "CAPABILITY_MAX_INDEX", "CAPABILITIES_LOG_MAP", "SERVICE_INTERFACE", "mFeaturesBySlot", "mCreateImsFeatureWithSlotIdFlagMap", "mListener", "mListenerLock", "mExecutorLock", "mExecutor", "mImsServiceController", "mDeathRecipient" ]
}