{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/Signature.java",
  "packageName" : "java.security",
  "className" : "Signature",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "algorithm",
    "type" : "String",
    "comment" : "\n     * The algorithm for this signature object.\n     * This value is used to map an OID to the particular algorithm.\n     * The mapping is done in AlgorithmObject.algOID(String algorithm)\n     ",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "UNINITIALIZED",
    "type" : "int",
    "comment" : "\n     * Possible {@link #state} value, signifying that\n     * this signature object has not yet been initialized.\n     ",
    "links" : [ "#state" ]
  }, {
    "name" : "SIGN",
    "type" : "int",
    "comment" : "\n     * Possible {@link #state} value, signifying that\n     * this signature object has been initialized for signing.\n     ",
    "links" : [ "#state" ]
  }, {
    "name" : "VERIFY",
    "type" : "int",
    "comment" : "\n     * Possible {@link #state} value, signifying that\n     * this signature object has been initialized for verification.\n     ",
    "links" : [ "#state" ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "\n     * Current state of this signature object.\n     ",
    "links" : [ ]
  }, {
    "name" : "RSA_SIGNATURE",
    "type" : "String",
    "comment" : " name of the special signature alg",
    "links" : [ ]
  }, {
    "name" : "RSA_CIPHER",
    "type" : "String",
    "comment" : " name of the equivalent cipher alg",
    "links" : [ ]
  }, {
    "name" : "rsaIds",
    "type" : "List<ServiceId>",
    "comment" : " all the services we need to lookup for compatibility with Cipher",
    "links" : [ ]
  }, {
    "name" : "signatureInfo",
    "type" : "Map<String, Boolean>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Signature getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "Signature",
    "comment" : "\n     * Returns a Signature object that implements the specified signature\n     * algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new Signature object encapsulating the\n     * SignatureSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the algorithm requested.\n     * See the Signature section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new Signature object.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          Signature implementation for the\n     *          specified algorithm.\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "private static Signature getInstance(Instance instance, String algorithm)",
    "returnType" : "Signature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSpi(Service s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Signature getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "Signature",
    "comment" : "\n     * Returns a Signature object that implements the specified signature\n     * algorithm.\n     *\n     * <p> A new Signature object encapsulating the\n     * SignatureSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the Signature section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new Signature object.\n     *\n     * @exception NoSuchAlgorithmException if a SignatureSpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the provider name is null\n     *          or empty.\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static Signature getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "Signature",
    "comment" : "\n     * Returns a Signature object that implements the specified\n     * signature algorithm.\n     *\n     * <p> A new Signature object encapsulating the\n     * SignatureSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the Signature section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new Signature object.\n     *\n     * @exception NoSuchAlgorithmException if a SignatureSpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the provider is null.\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Signature getInstanceRSA(Provider p) throws NoSuchAlgorithmException",
    "returnType" : "Signature",
    "comment" : " because of the Cipher.RSA/ECB/PKCS1Padding compatibility wrapper",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this signature object.\n     *\n     * @return the provider of this signature object\n     ",
    "links" : [ ]
  }, {
    "name" : " void chooseFirstProvider()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void initVerify(PublicKey publicKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this object for verification. If this method is called\n     * again with a different argument, it negates the effect\n     * of this call.\n     *\n     * @param publicKey the public key of the identity whose signature is\n     * going to be verified.\n     *\n     * @exception InvalidKeyException if the key is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void initVerify(Certificate certificate) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this object for verification, using the public key from\n     * the given certificate.\n     * <p>If the certificate is of type X.509 and has a <i>key usage</i>\n     * extension field marked as critical, and the value of the <i>key usage</i>\n     * extension field implies that the public key in\n     * the certificate and its corresponding private key are not\n     * supposed to be used for digital signatures, an\n     * {@code InvalidKeyException} is thrown.\n     *\n     * @param certificate the certificate of the identity whose signature is\n     * going to be verified.\n     *\n     * @exception InvalidKeyException  if the public key in the certificate\n     * is not encoded properly or does not include required  parameter\n     * information or cannot be used for digital signature purposes.\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void initSign(PrivateKey privateKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initialize this object for signing. If this method is called\n     * again with a different argument, it negates the effect\n     * of this call.\n     *\n     * @param privateKey the private key of the identity whose signature\n     * is going to be generated.\n     *\n     * @exception InvalidKeyException if the key is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void initSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initialize this object for signing. If this method is called\n     * again with a different argument, it negates the effect\n     * of this call.\n     *\n     * @param privateKey the private key of the identity whose signature\n     * is going to be generated.\n     *\n     * @param random the source of randomness for this signature.\n     *\n     * @exception InvalidKeyException if the key is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] sign() throws SignatureException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the signature bytes of all the data updated.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>A call to this method resets this signature object to the state\n     * it was in when previously initialized for signing via a\n     * call to {@code initSign(PrivateKey)}. That is, the object is\n     * reset and available to generate another signature from the same\n     * signer, if desired, via new calls to {@code update} and\n     * {@code sign}.\n     *\n     * @return the signature bytes of the signing operation's result.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly or if this signature algorithm is unable to\n     * process the input data provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int sign(byte[] outbuf, int offset, int len) throws SignatureException",
    "returnType" : "int",
    "comment" : "\n     * Finishes the signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>This signature object is reset to its initial state (the state it\n     * was in after a call to one of the {@code initSign} methods) and\n     * can be reused to generate further signatures with the same private key.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     *\n     * @return the number of bytes placed into {@code outbuf}.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean verify(byte[] signature) throws SignatureException",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies the passed-in signature.\n     *\n     * <p>A call to this method resets this signature object to the state\n     * it was in when previously initialized for verification via a\n     * call to {@code initVerify(PublicKey)}. That is, the object is\n     * reset and available to verify another signature from the identity\n     * whose public key was specified in the call to {@code initVerify}.\n     *\n     * @param signature the signature bytes to be verified.\n     *\n     * @return true if the signature was verified, false if not.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, the passed-in signature is improperly\n     * encoded or of the wrong type, if this signature algorithm is unable to\n     * process the input data provided, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean verify(byte[] signature, int offset, int length) throws SignatureException",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies the passed-in signature in the specified array\n     * of bytes, starting at the specified offset.\n     *\n     * <p>A call to this method resets this signature object to the state\n     * it was in when previously initialized for verification via a\n     * call to {@code initVerify(PublicKey)}. That is, the object is\n     * reset and available to verify another signature from the identity\n     * whose public key was specified in the call to {@code initVerify}.\n     *\n     *\n     * @param signature the signature bytes to be verified.\n     * @param offset the offset to start from in the array of bytes.\n     * @param length the number of bytes to use, starting at offset.\n     *\n     * @return true if the signature was verified, false if not.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, the passed-in signature is improperly\n     * encoded or of the wrong type, if this signature algorithm is unable to\n     * process the input data provided, etc.\n     * @exception IllegalArgumentException if the {@code signature}\n     * byte array is null, or the {@code offset} or {@code length}\n     * is less than 0, or the sum of the {@code offset} and\n     * {@code length} is greater than the length of the\n     * {@code signature} byte array.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(byte b) throws SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified by a byte.\n     *\n     * @param b the byte to use for the update.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(byte[] data) throws SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified, using the specified\n     * array of bytes.\n     *\n     * @param data the byte array to use for the update.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(byte[] data, int off, int len) throws SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified, using the specified\n     * array of bytes, starting at the specified offset.\n     *\n     * @param data the array of bytes.\n     * @param off the offset to start from in the array of bytes.\n     * @param len the number of bytes to use, starting at offset.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(ByteBuffer data) throws SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified using the specified\n     * ByteBuffer. Processes the {@code data.remaining()} bytes\n     * starting at at {@code data.position()}.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param data the ByteBuffer\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the algorithm for this signature object.\n     *\n     * @return the name of the algorithm for this signature object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this signature object,\n     * providing information that includes the state of the object\n     * and the name of the algorithm used.\n     *\n     * @return a string representation of this signature object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setParameter(String param, Object value) throws InvalidParameterException",
    "returnType" : "void",
    "comment" : "\n     * Sets the specified algorithm parameter to the specified value.\n     * This method supplies a general-purpose mechanism through\n     * which it is possible to set the various parameters of this object.\n     * A parameter may be any settable parameter for the algorithm, such as\n     * a parameter size, or a source of random bits for signature generation\n     * (if appropriate), or an indication of whether or not to perform\n     * a specific but optional computation. A uniform algorithm-specific\n     * naming scheme for each parameter is desirable but left unspecified\n     * at this time.\n     *\n     * @param param the string identifier of the parameter.\n     * @param value the parameter value.\n     *\n     * @exception InvalidParameterException if {@code param} is an\n     * invalid parameter for this signature algorithm engine,\n     * the parameter is already set\n     * and cannot be set again, a security exception occurs, and so on.\n     *\n     * @see #getParameter\n     *\n     * @deprecated Use\n     * {@link #setParameter(java.security.spec.AlgorithmParameterSpec)\n     * setParameter}.\n     ",
    "links" : [ "#setParameter(java.security.spec.AlgorithmParameterSpec)" ]
  }, {
    "name" : "public final void setParameter(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this signature engine with the specified parameter set.\n     *\n     * @param params the parameters\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this signature engine\n     *\n     * @see #getParameters\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AlgorithmParameters getParameters()",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Returns the parameters used with this signature object.\n     *\n     * <p>The returned parameters may be the same that were used to initialize\n     * this signature, or may contain a combination of default and randomly\n     * generated parameter values used by the underlying signature\n     * implementation if this signature requires algorithm parameters but\n     * was not initialized with any.\n     *\n     * @return the parameters used with this signature, or null if this\n     * signature does not use any parameters.\n     *\n     * @see #setParameter(AlgorithmParameterSpec)\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object getParameter(String param) throws InvalidParameterException",
    "returnType" : "Object",
    "comment" : "\n     * Gets the value of the specified algorithm parameter. This method\n     * supplies a general-purpose mechanism through which it is possible to\n     * get the various parameters of this object. A parameter may be any\n     * settable parameter for the algorithm, such as a parameter size, or\n     * a source of random bits for signature generation (if appropriate),\n     * or an indication of whether or not to perform a specific but optional\n     * computation. A uniform algorithm-specific naming scheme for each\n     * parameter is desirable but left unspecified at this time.\n     *\n     * @param param the string name of the parameter.\n     *\n     * @return the object that represents the parameter value, or null if\n     * there is none.\n     *\n     * @exception InvalidParameterException if {@code param} is an invalid\n     * parameter for this engine, or another exception occurs while\n     * trying to get this parameter.\n     *\n     * @see #setParameter(String, Object)\n     *\n     * @deprecated Deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone if the implementation is cloneable.\n     *\n     * @return a clone if the implementation is cloneable.\n     *\n     * @exception CloneNotSupportedException if this is called\n     * on an implementation that does not support {@code Cloneable}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SignatureSpi getCurrentSpi()",
    "returnType" : "SignatureSpi",
    "comment" : "\n     * Returns the {@code SignatureSpi} backing this {@code Signature}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Signature getInstance(String algorithm) throws NoSuchAlgorithmException", "private static Signature getInstance(Instance instance, String algorithm)", "private static boolean isSpi(Service s)", "public static Signature getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static Signature getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "private static Signature getInstanceRSA(Provider p) throws NoSuchAlgorithmException", "public final Provider getProvider()", " void chooseFirstProvider()", "public final void initVerify(PublicKey publicKey) throws InvalidKeyException", "public final void initVerify(Certificate certificate) throws InvalidKeyException", "public final void initSign(PrivateKey privateKey) throws InvalidKeyException", "public final void initSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException", "public final byte[] sign() throws SignatureException", "public final int sign(byte[] outbuf, int offset, int len) throws SignatureException", "public final boolean verify(byte[] signature) throws SignatureException", "public final boolean verify(byte[] signature, int offset, int length) throws SignatureException", "public final void update(byte b) throws SignatureException", "public final void update(byte[] data) throws SignatureException", "public final void update(byte[] data, int off, int len) throws SignatureException", "public final void update(ByteBuffer data) throws SignatureException", "public final String getAlgorithm()", "public String toString()", "public final void setParameter(String param, Object value) throws InvalidParameterException", "public final void setParameter(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException", "public final AlgorithmParameters getParameters()", "public final Object getParameter(String param) throws InvalidParameterException", "public Object clone() throws CloneNotSupportedException", "public SignatureSpi getCurrentSpi()" ],
  "variableNames" : [ "algorithm", "provider", "UNINITIALIZED", "SIGN", "VERIFY", "state", "RSA_SIGNATURE", "RSA_CIPHER", "rsaIds", "signatureInfo" ]
}