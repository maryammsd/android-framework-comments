{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/CombinedVibration.java",
  "packageName" : "android.os",
  "className" : "CombinedVibration",
  "comment" : "\n * A CombinedVibration describes a combination of haptic effects to be performed by one or more\n * {@link Vibrator Vibrators}.\n *\n * These effects may be any number of things, from single shot vibrations to complex waveforms.\n *\n * @see VibrationEffect\n ",
  "links" : [ "android.os.Vibrator" ],
  "variables" : [ {
    "name" : "PARCEL_TOKEN_MONO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARCEL_TOKEN_STEREO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARCEL_TOKEN_SEQUENTIAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<CombinedVibration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CombinedVibration createParallel(@NonNull VibrationEffect effect)",
    "returnType" : "CombinedVibration",
    "comment" : "\n     * Create a vibration that plays a single effect in parallel on all vibrators.\n     *\n     * A parallel vibration that takes a single {@link VibrationEffect} to be performed by multiple\n     * vibrators at the same time.\n     *\n     * @param effect The {@link VibrationEffect} to perform.\n     * @return The combined vibration representing the single effect to be played in all vibrators.\n     ",
    "links" : [ "android.os.VibrationEffect" ]
  }, {
    "name" : "public static ParallelCombination startParallel()",
    "returnType" : "ParallelCombination",
    "comment" : "\n     * Start creating a vibration that plays effects in parallel on one or more vibrators.\n     *\n     * A parallel vibration takes one or more {@link VibrationEffect VibrationEffects} associated to\n     * individual vibrators to be performed at the same time.\n     *\n     * @see CombinedVibration.ParallelCombination\n     ",
    "links" : [ "android.os.VibrationEffect" ]
  }, {
    "name" : "public static SequentialCombination startSequential()",
    "returnType" : "SequentialCombination",
    "comment" : "\n     * Start creating a vibration that plays effects in sequence on one or more vibrators.\n     *\n     * A sequential vibration takes one or more {@link CombinedVibration CombinedVibrations} to be\n     * performed by one or more vibrators in order. Each {@link CombinedVibration} starts only after\n     * the previous one is finished.\n     *\n     * @hide\n     * @see CombinedVibration.SequentialCombination\n     ",
    "links" : [ "android.os.CombinedVibration" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the estimated duration of the combined vibration in milliseconds.\n     *\n     * <p>For parallel combinations this means the maximum duration of any individual {@link\n     * VibrationEffect}. For sequential combinations, this is a sum of each step and delays.\n     *\n     * <p>For combinations of effects without a defined end (e.g. a Waveform with a non-negative\n     * repeat index), this returns Long.MAX_VALUE. For effects with an unknown duration (e.g.\n     * Prebaked effects where the length is device and potentially run-time dependent), this returns\n     * -1.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationEffect" ]
  }, {
    "name" : "public boolean isHapticFeedbackCandidate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this effect could represent a touch haptic feedback.\n     *\n     * <p>It is strongly recommended that an instance of {@link VibrationAttributes} is specified\n     * for each vibration, with the correct usage. When a vibration is played with usage UNKNOWN,\n     * then this method will be used to classify the most common use case and make sure they are\n     * covered by the user settings for \"Touch feedback\".\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationAttributes" ]
  }, {
    "name" : "public abstract void validate()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract CombinedVibration transform(VibrationEffect.Transformation<ParamT> transformation, ParamT param)",
    "returnType" : "CombinedVibration",
    "comment" : "\n     * Applies given effect transformation with a fixed parameter to each effect in this vibration.\n     *\n     * @param transformation The vibration effect transformation to be applied to all effects\n     * @param param          The fixed parameter to be applied in all effect transformations\n     * @return the result of running the given transformation on all effects of this vibration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CombinedVibration adapt(VibratorAdapter adapter)",
    "returnType" : "CombinedVibration",
    "comment" : "\n     * Applies given vibrator adapter to each effect in this combined vibration.\n     *\n     * @param adapter The vibrator adapter to be used on this vibration\n     * @return the result of running the given adapter on all effects of this vibration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasVibrator(int vibratorId)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toDebugString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a compact version of the {@link #toString()} result for debugging purposes.\n     *\n     * @hide\n     ",
    "links" : [ "#toString()" ]
  } ],
  "methodNames" : [ "public static CombinedVibration createParallel(@NonNull VibrationEffect effect)", "public static ParallelCombination startParallel()", "public static SequentialCombination startSequential()", "public int describeContents()", "public abstract long getDuration()", "public boolean isHapticFeedbackCandidate()", "public abstract void validate()", "public abstract CombinedVibration transform(VibrationEffect.Transformation<ParamT> transformation, ParamT param)", "public abstract CombinedVibration adapt(VibratorAdapter adapter)", "public abstract boolean hasVibrator(int vibratorId)", "public abstract String toDebugString()" ],
  "variableNames" : [ "PARCEL_TOKEN_MONO", "PARCEL_TOKEN_STEREO", "PARCEL_TOKEN_SEQUENTIAL", "CREATOR" ]
}