{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/pdf/PdfRenderer.java",
  "packageName" : "android.graphics.pdf",
  "className" : "PdfRenderer",
  "comment" : "\n * <p>\n * This class enables rendering a PDF document and selecting, searching, fast scrolling,\n * annotations, etc. from Android V. This class is thread safe and can be called by\n * multiple threads however only one thread will be executed at a time as the access is\n * synchronized by internal locking.\n * <p>\n * If you want to render a PDF, you create a renderer and for every page you want\n * to render, you open the page, render it, and close the page. After you are done\n * with rendering, you close the renderer. After the renderer is closed it should not\n * be used anymore. Note that the pages are rendered one by one, i.e. you can have\n * only a single page opened at any given time.\n * <p>\n * A typical use of the APIs to render a PDF looks like this:\n * <pre>\n * // create a new renderer\n * PdfRenderer renderer = new PdfRenderer(getSeekableFileDescriptor());\n *\n * // let us just render all pages\n * final int pageCount = renderer.getPageCount();\n * for (int i = 0; i < pageCount; i++) {\n *     Page page = renderer.openPage(i);\n *\n *     // say we render for showing on the screen\n *     page.render(mBitmap, null, null, Page.RENDER_MODE_FOR_DISPLAY);\n *\n *     // do stuff with the bitmap\n *\n *     // close the page\n *     page.close();\n * }\n *\n * // close the renderer\n * renderer.close();\n * </pre>\n *\n * <h3>Print preview and print output</h3>\n * <p>\n * If you are using this class to rasterize a PDF for printing or show a print\n * preview, it is recommended that you respect the following contract in order\n * to provide a consistent user experience when seeing a preview and printing,\n * i.e. the user sees a preview that is the same as the printout.\n * <ul>\n * <li>\n * Respect the property whether the document would like to be scaled for printing\n * as per {@link #shouldScaleForPrinting()}.\n * </li>\n * <li>\n * When scaling a document for printing the aspect ratio should be preserved.\n * </li>\n * <li>\n * Do not inset the content with any margins from the {@link android.print.PrintAttributes}\n * as the application is responsible to render it such that the margins are respected.\n * </li>\n * <li>\n * If document page size is greater than the printed media size the content should\n * be anchored to the upper left corner of the page for left-to-right locales and\n * top right corner for right-to-left locales.\n * </li>\n * </ul>\n *\n * @see #close()\n ",
  "links" : [ "android.print.PrintAttributes", "#shouldScaleForPrinting()" ],
  "variables" : [ {
    "name" : "DOCUMENT_LINEARIZED_TYPE_NON_LINEARIZED",
    "type" : "int",
    "comment" : " Represents a non-linearized PDF document. ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_LINEARIZED_TYPE_LINEARIZED",
    "type" : "int",
    "comment" : " Represents a linearized PDF document. ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_NONE",
    "type" : "int",
    "comment" : " Represents a PDF without form fields ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_ACRO_FORM",
    "type" : "int",
    "comment" : " Represents a PDF with form fields specified using the AcroForm spec ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_XFA_FULL",
    "type" : "int",
    "comment" : " Represents a PDF with form fields specified using the entire XFA spec ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_XFA_FOREGROUND",
    "type" : "int",
    "comment" : " Represents a PDF with form fields specified using the XFAF subset of the XFA spec ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInput",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPdfProcessor",
    "type" : "PdfProcessor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this renderer. You should not use this instance\n     * after this method is called.\n     *\n     * @throws IllegalStateException If {@link #close()} is called before invoking this or if any\n     *                               page is opened and not closed\n     * @see Page#close()\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int getPageCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of pages in the document.\n     *\n     * @return The page count.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public boolean shouldScaleForPrinting()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the document prefers to be scaled for printing.\n     * You should take this info account if the document is rendered\n     * for printing and the target media size differs from the page\n     * size.\n     *\n     * @return If to scale the document.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int getDocumentLinearizationType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of the PDF document.\n     *\n     * @return The PDF document type.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public Page openPage(@IntRange(from = 0) int index)",
    "returnType" : "Page",
    "comment" : "\n     * Opens a page for rendering.\n     *\n     * @param index The page index to open, starting from index 0.\n     * @return A page that can be rendered.\n     * @throws IllegalStateException    If {@link #close()} is called before invoking this.\n     * @throws IllegalArgumentException If the page number is less than 0 or greater than or equal\n     *                                  to the total page count.\n     * @see Page#close()\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int getPdfFormType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the form type of the loaded PDF\n     *\n     * @throws IllegalStateException    if the renderer is closed\n     * @throws IllegalArgumentException if an unexpected PDF form type is returned\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(@NonNull ParcelFileDescriptor destination, boolean removePasswordProtection) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves the current state of the loaded PDF document to the given writable\n     * {@link ParcelFileDescriptor}. If the document is password-protected then setting\n     * {@code removePasswordProtection} removes the protection before saving. The PDF document\n     * should already be decrypted with the correct password before writing. Useful for printing or\n     * sharing.\n     * <strong>Note:</strong> This method closes the provided file descriptor.\n     *\n     * @param destination              The writable {@link ParcelFileDescriptor}\n     * @param removePasswordProtection If true, removes password protection from the PDF before\n     *                                 saving.\n     * @throws IOException           If there's a write error, or if 'removePasswordSecurity' is\n     *                               {@code true} but the document remains encrypted.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "android.os.ParcelFileDescriptor", "#close()" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " gracefully",
    "links" : [ ]
  }, {
    "name" : "private void doClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void closeQuietly(@NonNull AutoCloseable closeable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfDocumentClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPageNotInDocument(int pageIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public int getPageCount()", "public boolean shouldScaleForPrinting()", "public int getDocumentLinearizationType()", "public Page openPage(@IntRange(from = 0) int index)", "public int getPdfFormType()", "public void write(@NonNull ParcelFileDescriptor destination, boolean removePasswordProtection) throws IOException", "protected void finalize() throws Throwable", "private void doClose()", "private void closeQuietly(@NonNull AutoCloseable closeable)", "private void throwIfDocumentClosed()", "private void throwIfPageNotInDocument(int pageIndex)" ],
  "variableNames" : [ "DOCUMENT_LINEARIZED_TYPE_NON_LINEARIZED", "DOCUMENT_LINEARIZED_TYPE_LINEARIZED", "PDF_FORM_TYPE_NONE", "PDF_FORM_TYPE_ACRO_FORM", "PDF_FORM_TYPE_XFA_FULL", "PDF_FORM_TYPE_XFA_FOREGROUND", "TAG", "mCloseGuard", "mPageCount", "mInput", "mPdfProcessor" ]
}