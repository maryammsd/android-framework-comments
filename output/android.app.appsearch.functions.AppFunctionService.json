{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/functions/AppFunctionService.java",
  "packageName" : "android.app.appsearch.functions",
  "className" : "AppFunctionService",
  "comment" : "\n * Abstract base class to provide app functions to the system.\n *\n * <p>Include the following in the manifest:\n *\n * <pre>\n * {@literal\n * <service android:name=\".YourService\"\n *      android:permission=\"android.permission.BIND_APP_FUNCTION_SERVICE\">\n *    <intent-filter>\n *      <action android:name=\"android.app.appsearch.functions.AppFunctionService\" />\n *    </intent-filter>\n * </service>\n * }\n * </pre>\n *\n * @see AppFunctionManager\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service. To be supported, the\n     * service must also require the {@link AppFunctionManager#PERMISSION_BIND_APP_FUNCTION_SERVICE}\n     * permission so that other applications can not abuse it.\n     ",
    "links" : [ "android.app.appsearch.functions.AppFunctionManager#PERMISSION_BIND_APP_FUNCTION_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "mBinder",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onExecuteFunction(@NonNull ExecuteAppFunctionRequest request, @NonNull Consumer<AppSearchResult<ExecuteAppFunctionResponse>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by the system to execute a specific app function.\n     *\n     * <p>This method is triggered when the system requests your AppFunctionService to handle a\n     * particular function you have registered and made available.\n     *\n     * <p>To ensure proper routing of function requests, assign a unique identifier to each\n     * function. This identifier doesn't need to be globally unique, but it must be unique within\n     * your app. For example, a function to order food could be identified as \"orderFood\". You can\n     * determine the specific function to invoke by calling {@link\n     * ExecuteAppFunctionRequest#getFunctionIdentifier()}.\n     *\n     * <p>This method is always triggered in the main thread. You should run heavy tasks on a worker\n     * thread and dispatch the result with the given callback. You should always report back the\n     * result using the callback, no matter if the execution was successful or not.\n     *\n     * @param request The function execution request.\n     * @param callback A callback to report back the result.\n     ",
    "links" : [ "android.app.appsearch.functions.ExecuteAppFunctionRequest#getFunctionIdentifier()" ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@Nullable Intent intent)", "public abstract void onExecuteFunction(@NonNull ExecuteAppFunctionRequest request, @NonNull Consumer<AppSearchResult<ExecuteAppFunctionResponse>> callback)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "mBinder" ]
}