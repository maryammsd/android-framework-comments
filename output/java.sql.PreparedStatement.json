{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/PreparedStatement.java",
  "packageName" : "java.sql",
  "className" : "PreparedStatement",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " ResultSet executeQuery() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Executes the SQL query in this <code>PreparedStatement</code> object\n     * and returns the <code>ResultSet</code> object generated by the query.\n     *\n     * @return a <code>ResultSet</code> object that contains the data produced by the\n     *         query; never <code>null</code>\n     * @exception SQLException if a database access error occurs;\n     * this method is called on a closed  <code>PreparedStatement</code> or the SQL\n     *            statement does not return a <code>ResultSet</code> object\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     ",
    "links" : [ ]
  }, {
    "name" : " int executeUpdate() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Executes the SQL statement in this <code>PreparedStatement</code> object,\n     * which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n     * <code>DELETE</code>; or an SQL statement that returns nothing,\n     * such as a DDL statement.\n     *\n     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n     *         or (2) 0 for SQL statements that return nothing\n     * @exception SQLException if a database access error occurs;\n     * this method is called on a closed  <code>PreparedStatement</code>\n     * or the SQL statement returns a <code>ResultSet</code> object\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNull(int parameterIndex, int sqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to SQL <code>NULL</code>.\n     *\n     * <P><B>Note:</B> You must specify the parameter's SQL type.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param sqlType the SQL type code defined in <code>java.sql.Types</code>\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBoolean(int parameterIndex, boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>boolean</code> value.\n     * The driver converts this\n     * to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement;\n     * if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setByte(int parameterIndex, byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>byte</code> value.\n     * The driver converts this\n     * to an SQL <code>TINYINT</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setShort(int parameterIndex, short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>short</code> value.\n     * The driver converts this\n     * to an SQL <code>SMALLINT</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setInt(int parameterIndex, int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>int</code> value.\n     * The driver converts this\n     * to an SQL <code>INTEGER</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setLong(int parameterIndex, long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>long</code> value.\n     * The driver converts this\n     * to an SQL <code>BIGINT</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFloat(int parameterIndex, float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>float</code> value.\n     * The driver converts this\n     * to an SQL <code>REAL</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDouble(int parameterIndex, double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>double</code> value.\n     * The driver converts this\n     * to an SQL <code>DOUBLE</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.\n     * The driver converts this to an SQL <code>NUMERIC</code> value when\n     * it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setString(int parameterIndex, String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>String</code> value.\n     * The driver converts this\n     * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value\n     * (depending on the argument's\n     * size relative to the driver's limits on <code>VARCHAR</code> values)\n     * when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBytes(int parameterIndex, byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java array of bytes.  The driver converts\n     * this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>\n     * (depending on the argument's size relative to the driver's limits on\n     * <code>VARBINARY</code> values) when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDate(int parameterIndex, java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Date</code> value\n     * using the default time zone of the virtual machine that is running\n     * the application.\n     * The driver converts this\n     * to an SQL <code>DATE</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTime(int parameterIndex, java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Time</code> value.\n     * The driver converts this\n     * to an SQL <code>TIME</code> value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.\n     * The driver\n     * converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the\n     * database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the\n     * stream as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the java input stream which contains the binary parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void clearParameters() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Clears the current parameter values immediately.\n     * <P>In general, parameter values remain in force for repeated use of a\n     * statement. Setting a parameter value automatically clears its\n     * previous value.  However, in some cases it is useful to immediately\n     * release the resources used by the current parameter values; this can\n     * be done by calling the method <code>clearParameters</code>.\n     *\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n    * Sets the value of the designated parameter with the given object.\n    * This method is like the method <code>setObject</code>\n    * above, except that it assumes a scale of zero.\n    *\n    * @param parameterIndex the first parameter is 1, the second is 2, ...\n    * @param x the object containing the input parameter value\n    * @param targetSqlType the SQL type (as defined in java.sql.Types) to be\n    *                      sent to the database\n    * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n    * this method is called on a closed <code>PreparedStatement</code>\n    * @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n    * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n    * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n    * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n    *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n    * or  <code>STRUCT</code> data type and the JDBC driver does not support\n    * this data type\n    * @see Types\n    ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int parameterIndex, Object x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the value of the designated parameter using the given object.\n     * The second parameter must be of type <code>Object</code>; therefore, the\n     * <code>java.lang</code> equivalent objects should be used for built-in types.\n     *\n     * <p>The JDBC specification specifies a standard mapping from\n     * Java <code>Object</code> types to SQL types.  The given argument\n     * will be converted to the corresponding SQL type before being\n     * sent to the database.\n     *\n     * <p>Note that this method may be used to pass datatabase-\n     * specific abstract data types, by using a driver-specific Java\n     * type.\n     *\n     * If the object is of a class implementing the interface <code>SQLData</code>,\n     * the JDBC driver should call the method <code>SQLData.writeSQL</code>\n     * to write it to the SQL data stream.\n     * If, on the other hand, the object is of a class implementing\n     * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n     *  <code>Struct</code>, <code>java.net.URL</code>, <code>RowId</code>, <code>SQLXML</code>\n     * or <code>Array</code>, the driver should pass it to the database as a\n     * value of the corresponding SQL type.\n     * <P>\n     *<b>Note:</b> Not all databases allow for a non-typed Null to be sent to\n     * the backend. For maximum portability, the <code>setNull</code> or the\n     * <code>setObject(int parameterIndex, Object x, int sqlType)</code>\n     * method should be used\n     * instead of <code>setObject(int parameterIndex, Object x)</code>.\n     *<p>\n     * <b>Note:</b> This method throws an exception if there is an ambiguity, for example, if the\n     * object is of a class implementing more than one of the interfaces named above.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the object containing the input parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs;\n     *  this method is called on a closed <code>PreparedStatement</code>\n     * or the type of the given object is ambiguous\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean execute() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the SQL statement in this <code>PreparedStatement</code> object,\n     * which may be any kind of SQL statement.\n     * Some prepared statements return multiple results; the <code>execute</code>\n     * method handles these complex statements as well as the simpler\n     * form of statements handled by the methods <code>executeQuery</code>\n     * and <code>executeUpdate</code>.\n     * <P>\n     * The <code>execute</code> method returns a <code>boolean</code> to\n     * indicate the form of the first result.  You must call either the method\n     * <code>getResultSet</code> or <code>getUpdateCount</code>\n     * to retrieve the result; you must call <code>getMoreResults</code> to\n     * move to any subsequent result(s).\n     *\n     * @return <code>true</code> if the first result is a <code>ResultSet</code>\n     *         object; <code>false</code> if the first result is an update\n     *         count or there is no result\n     * @exception SQLException if a database access error occurs;\n     * this method is called on a closed <code>PreparedStatement</code>\n     * or an argument is supplied to this method\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @see Statement#execute\n     * @see Statement#getResultSet\n     * @see Statement#getUpdateCount\n     * @see Statement#getMoreResults\n\n     ",
    "links" : [ ]
  }, {
    "name" : " void addBatch() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Adds a set of parameters to this <code>PreparedStatement</code>\n     * object's batch of commands.\n     *\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @see Statement#addBatch\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(int parameterIndex, java.io.Reader reader, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param reader the <code>java.io.Reader</code> object that contains the\n     *        Unicode data\n     * @param length the number of characters in the stream\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRef(int parameterIndex, Ref x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given\n     *  <code>REF(&lt;structured-type&gt;)</code> value.\n     * The driver converts this to an SQL <code>REF</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x an SQL <code>REF</code> value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(int parameterIndex, Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Blob</code> object.\n     * The driver converts this to an SQL <code>BLOB</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(int parameterIndex, Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Clob</code> object.\n     * The driver converts this to an SQL <code>CLOB</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setArray(int parameterIndex, Array x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Array</code> object.\n     * The driver converts this to an SQL <code>ARRAY</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x an <code>Array</code> object that maps an SQL <code>ARRAY</code> value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSetMetaData getMetaData() throws SQLException",
    "returnType" : "ResultSetMetaData",
    "comment" : "\n     * Retrieves a <code>ResultSetMetaData</code> object that contains\n     * information about the columns of the <code>ResultSet</code> object\n     * that will be returned when this <code>PreparedStatement</code> object\n     * is executed.\n     * <P>\n     * Because a <code>PreparedStatement</code> object is precompiled, it is\n     * possible to know about the <code>ResultSet</code> object that it will\n     * return without having to execute it.  Consequently, it is possible\n     * to invoke the method <code>getMetaData</code> on a\n     * <code>PreparedStatement</code> object rather than waiting to execute\n     * it and then invoking the <code>ResultSet.getMetaData</code> method\n     * on the <code>ResultSet</code> object that is returned.\n     * <P>\n     * <B>NOTE:</B> Using this method may be expensive for some drivers due\n     * to the lack of underlying DBMS support.\n     *\n     * @return the description of a <code>ResultSet</code> object's columns or\n     *         <code>null</code> if the driver cannot return a\n     *         <code>ResultSetMetaData</code> object\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Date</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,\n     * which the driver then sends to the database.  With\n     * a <code>Calendar</code> object, the driver can calculate the date\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the date\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Time</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,\n     * which the driver then sends to the database.  With\n     * a <code>Calendar</code> object, the driver can calculate the time\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the time\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,\n     * which the driver then sends to the database.  With a\n     *  <code>Calendar</code> object, the driver can calculate the timestamp\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the timestamp\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to SQL <code>NULL</code>.\n     * This version of the method <code>setNull</code> should\n     * be used for user-defined types and REF type parameters.  Examples\n     * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and\n     * named array types.\n     *\n     * <P><B>Note:</B> To be portable, applications must give the\n     * SQL type code and the fully-qualified SQL type name when specifying\n     * a NULL user-defined or REF parameter.  In the case of a user-defined type\n     * the name is the type name of the parameter itself.  For a REF\n     * parameter, the name is the type name of the referenced type.  If\n     * a JDBC driver does not need the type code or type name information,\n     * it may ignore it.\n     *\n     * Although it is intended for user-defined and Ref parameters,\n     * this method may be used to set a null parameter of any JDBC type.\n     * If the parameter does not have a user-defined or REF type, the given\n     * typeName is ignored.\n     *\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param sqlType a value from <code>java.sql.Types</code>\n     * @param typeName the fully-qualified name of an SQL user-defined type;\n     *  ignored if the parameter is not a user-defined type or REF\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type or if the JDBC driver does not support this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setURL(int parameterIndex, java.net.URL x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.net.URL</code> value.\n     * The driver converts this to an SQL <code>DATALINK</code> value\n     * when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the <code>java.net.URL</code> object to be set\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " ParameterMetaData getParameterMetaData() throws SQLException",
    "returnType" : "ParameterMetaData",
    "comment" : "\n     * Retrieves the number, types and properties of this\n     * <code>PreparedStatement</code> object's parameters.\n     *\n     * @return a <code>ParameterMetaData</code> object that contains information\n     *         about the number, types and properties for each\n     *  parameter marker of this <code>PreparedStatement</code> object\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @see ParameterMetaData\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRowId(int parameterIndex, RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.RowId</code> object. The\n     * driver converts this to a SQL <code>ROWID</code> value when it sends it\n     * to the database\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNString(int parameterIndex, String value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated paramter to the given <code>String</code> object.\n     * The driver converts this to a SQL <code>NCHAR</code> or\n     * <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n     * (depending on the argument's\n     * size relative to the driver's limits on <code>NVARCHAR</code> values)\n     * when it sends it to the database.\n     *\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs; or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs; or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(int parameterIndex, NClob value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a\n     * SQL <code>NCLOB</code> value when it sends it to the database.\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs; or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(int parameterIndex, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>PreparedStatement</code> is executed.\n     *This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs; this method is called on\n     * a closed <code>PreparedStatement</code> or if the length specified is less than zero.\n     *\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>PreparedStatement</code> is executed.\n     * This method differs from the <code>setBinaryStream (int, InputStream, int)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     * @param parameterIndex index of the first parameter is 1,\n     * the second is 2, ...\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @param length the number of bytes in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs;\n     * this method is called on a closed <code>PreparedStatement</code>;\n     *  if the length specified\n     * is less than zero or if the number of bytes in the inputstream does not match\n     * the specfied length.\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(int parameterIndex, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>PreparedStatement</code> is executed.\n     * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the length specified is less than zero;\n     * if the driver does not support national character sets;\n     * if the driver can detect that a data conversion\n     *  error could occur;  if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException",
    "returnType" : "void",
    "comment" : "\n      * Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.\n      * The driver converts this to an\n      * SQL <code>XML</code> value when it sends it to the database.\n      * <p>\n      *\n      * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n      * @param xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value\n      * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs;\n      *  this method is called on a closed <code>PreparedStatement</code>\n      * or the <code>java.xml.transform.Result</code>,\n      *  <code>Writer</code> or <code>OutputStream</code> has not been closed for\n      * the <code>SQLXML</code> object\n      * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n      *\n      * @since 1.6\n      ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the value of the designated parameter with the given object. The second\n     * argument must be an object type; for integral values, the\n     * <code>java.lang</code> equivalent objects should be used.\n     *\n     * If the second argument is an <code>InputStream</code> then the stream must contain\n     * the number of bytes specified by scaleOrLength.  If the second argument is a\n     * <code>Reader</code> then the reader must contain the number of characters specified\n     * by scaleOrLength. If these conditions are not true the driver will generate a\n     * <code>SQLException</code> when the prepared statement is executed.\n     *\n     * <p>The given Java object will be converted to the given targetSqlType\n     * before being sent to the database.\n     *\n     * If the object has a custom mapping (is of a class implementing the\n     * interface <code>SQLData</code>),\n     * the JDBC driver should call the method <code>SQLData.writeSQL</code> to\n     * write it to the SQL data stream.\n     * If, on the other hand, the object is of a class implementing\n     * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n     *  <code>Struct</code>, <code>java.net.URL</code>,\n     * or <code>Array</code>, the driver should pass it to the database as a\n     * value of the corresponding SQL type.\n     *\n     * <p>Note that this method may be used to pass database-specific\n     * abstract data types.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the object containing the input parameter value\n     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be\n     * sent to the database. The scale argument may further qualify this type.\n     * @param scaleOrLength for <code>java.sql.Types.DECIMAL</code>\n     *          or <code>java.sql.Types.NUMERIC types</code>,\n     *          this is the number of digits after the decimal point. For\n     *          Java Object types <code>InputStream</code> and <code>Reader</code>,\n     *          this is the length\n     *          of the data in the stream or reader.  For all other types,\n     *          this value will be ignored.\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs;\n     * this method is called on a closed <code>PreparedStatement</code> or\n     *            if the Java Object specified by x is an InputStream\n     *            or Reader object and the value of the scale parameter is less\n     *            than zero\n     * @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see Types\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(int parameterIndex, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.6\n    ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(int parameterIndex, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the\n     * stream as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the java input stream which contains the binary parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(int parameterIndex, java.io.Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param reader the <code>java.io.Reader</code> object that contains the\n     *        Unicode data\n     * @param length the number of characters in the stream\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(int parameterIndex, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setAsciiStream</code> which takes a length parameter.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n       * @since 1.6\n    ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(int parameterIndex, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the\n     * stream as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBinaryStream</code> which takes a length parameter.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the java input stream which contains the binary parameter value\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(int parameterIndex, java.io.Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setCharacterStream</code> which takes a length parameter.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param reader the <code>java.io.Reader</code> object that contains the\n     *        Unicode data\n     * @exception SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(int parameterIndex, Reader value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNCharacterStream</code> which takes a length parameter.\n     *\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs; or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(int parameterIndex, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setClob</code> which takes a length parameter.\n     *\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs; this method is called on\n     * a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement\n     *\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(int parameterIndex, InputStream inputStream) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.\n     * This method differs from the <code>setBinaryStream (int, InputStream)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBlob</code> which takes a length parameter.\n     *\n     * @param parameterIndex index of the first parameter is 1,\n     * the second is 2, ...\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if a database access error occurs;\n     * this method is called on a closed <code>PreparedStatement</code> or\n     * if parameterIndex does not correspond\n     * to a parameter marker in the SQL statement,\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(int parameterIndex, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNClob</code> which takes a length parameter.\n     *\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement;\n     * if the driver does not support national character sets;\n     * if the driver can detect that a data conversion\n     *  error could occur;  if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " ResultSet executeQuery() throws SQLException", " int executeUpdate() throws SQLException", " void setNull(int parameterIndex, int sqlType) throws SQLException", " void setBoolean(int parameterIndex, boolean x) throws SQLException", " void setByte(int parameterIndex, byte x) throws SQLException", " void setShort(int parameterIndex, short x) throws SQLException", " void setInt(int parameterIndex, int x) throws SQLException", " void setLong(int parameterIndex, long x) throws SQLException", " void setFloat(int parameterIndex, float x) throws SQLException", " void setDouble(int parameterIndex, double x) throws SQLException", " void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException", " void setString(int parameterIndex, String x) throws SQLException", " void setBytes(int parameterIndex, byte[] x) throws SQLException", " void setDate(int parameterIndex, java.sql.Date x) throws SQLException", " void setTime(int parameterIndex, java.sql.Time x) throws SQLException", " void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException", " void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException", " void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException", " void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException", " void clearParameters() throws SQLException", " void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException", " void setObject(int parameterIndex, Object x) throws SQLException", " boolean execute() throws SQLException", " void addBatch() throws SQLException", " void setCharacterStream(int parameterIndex, java.io.Reader reader, int length) throws SQLException", " void setRef(int parameterIndex, Ref x) throws SQLException", " void setBlob(int parameterIndex, Blob x) throws SQLException", " void setClob(int parameterIndex, Clob x) throws SQLException", " void setArray(int parameterIndex, Array x) throws SQLException", " ResultSetMetaData getMetaData() throws SQLException", " void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException", " void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException", " void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException", " void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException", " void setURL(int parameterIndex, java.net.URL x) throws SQLException", " ParameterMetaData getParameterMetaData() throws SQLException", " void setRowId(int parameterIndex, RowId x) throws SQLException", " void setNString(int parameterIndex, String value) throws SQLException", " void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException", " void setNClob(int parameterIndex, NClob value) throws SQLException", " void setClob(int parameterIndex, Reader reader, long length) throws SQLException", " void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException", " void setNClob(int parameterIndex, Reader reader, long length) throws SQLException", " void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException", " void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException", " void setAsciiStream(int parameterIndex, java.io.InputStream x, long length) throws SQLException", " void setBinaryStream(int parameterIndex, java.io.InputStream x, long length) throws SQLException", " void setCharacterStream(int parameterIndex, java.io.Reader reader, long length) throws SQLException", " void setAsciiStream(int parameterIndex, java.io.InputStream x) throws SQLException", " void setBinaryStream(int parameterIndex, java.io.InputStream x) throws SQLException", " void setCharacterStream(int parameterIndex, java.io.Reader reader) throws SQLException", " void setNCharacterStream(int parameterIndex, Reader value) throws SQLException", " void setClob(int parameterIndex, Reader reader) throws SQLException", " void setBlob(int parameterIndex, InputStream inputStream) throws SQLException", " void setNClob(int parameterIndex, Reader reader) throws SQLException" ],
  "variableNames" : [ ]
}