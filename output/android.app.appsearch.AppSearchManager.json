{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/AppSearchManager.java",
  "packageName" : "android.app.appsearch",
  "className" : "AppSearchManager",
  "comment" : "\n * Provides access to the centralized AppSearch index maintained by the system.\n *\n * <p>AppSearch is an offline, on-device search library for managing structured data featuring:\n *\n * <ul>\n *   <li>APIs to index and retrieve data via full-text search.\n *   <li>An API for applications to explicitly grant read-access permission of their data to other\n *       applications. <b>See: {@link\n *       SetSchemaRequest.Builder#setSchemaTypeVisibilityForPackage}</b>\n *   <li>An API for applications to opt into or out of having their data displayed on System UI\n *       surfaces by the System-designated global querier. <b>See: {@link\n *       SetSchemaRequest.Builder#setSchemaTypeDisplayedBySystem}</b>\n * </ul>\n *\n * <p>Applications create a database by opening an {@link AppSearchSession}.\n *\n * <p>Example:\n *\n * <pre>\n * AppSearchManager appSearchManager = context.getSystemService(AppSearchManager.class);\n *\n * AppSearchManager.SearchContext searchContext = new AppSearchManager.SearchContext.Builder().\n *    setDatabaseName(dbName).build());\n * appSearchManager.createSearchSession(searchContext, mExecutor, appSearchSessionResult -&gt; {\n *      mAppSearchSession = appSearchSessionResult.getResultValue();\n * });</pre>\n *\n * <p>After opening the session, a schema must be set in order to define the organizational\n * structure of data. The schema is set by calling {@link AppSearchSession#setSchema}. The schema is\n * composed of a collection of {@link AppSearchSchema} objects, each of which defines a unique type\n * of data.\n *\n * <p>Example:\n *\n * <pre>\n * AppSearchSchema emailSchemaType = new AppSearchSchema.Builder(\"Email\")\n *     .addProperty(new StringPropertyConfig.Builder(\"subject\")\n *        .setCardinality(PropertyConfig.CARDINALITY_OPTIONAL)\n *        .setIndexingType(PropertyConfig.INDEXING_TYPE_PREFIXES)\n *        .setTokenizerType(PropertyConfig.TOKENIZER_TYPE_PLAIN)\n *    .build()\n * ).build();\n *\n * SetSchemaRequest request = new SetSchemaRequest.Builder().addSchema(emailSchemaType).build();\n * mAppSearchSession.set(request, mExecutor, appSearchResult -&gt; {\n *      if (appSearchResult.isSuccess()) {\n *           //Schema has been successfully set.\n *      }\n * });</pre>\n *\n * <p>The basic unit of data in AppSearch is represented as a {@link GenericDocument} object,\n * containing an ID, namespace, time-to-live, score, and properties. A namespace organizes a logical\n * group of documents. For example, a namespace can be created to group documents on a per-account\n * basis. An ID identifies a single document within a namespace. The combination of namespace and ID\n * uniquely identifies a {@link GenericDocument} in the database.\n *\n * <p>Once the schema has been set, {@link GenericDocument} objects can be put into the database and\n * indexed by calling {@link AppSearchSession#put}.\n *\n * <p>Example:\n *\n * <pre>\n * // Although for this example we use GenericDocument directly, we recommend extending\n * // GenericDocument to create specific types (i.e. Email) with specific setters/getters.\n * GenericDocument email = new GenericDocument.Builder<>(NAMESPACE, ID, EMAIL_SCHEMA_TYPE)\n *     .setPropertyString(“subject”, EMAIL_SUBJECT)\n *     .setScore(EMAIL_SCORE)\n *     .build();\n *\n * PutDocumentsRequest request = new PutDocumentsRequest.Builder().addGenericDocuments(email)\n *     .build();\n * mAppSearchSession.put(request, mExecutor, appSearchBatchResult -&gt; {\n *      if (appSearchBatchResult.isSuccess()) {\n *           //All documents have been successfully indexed.\n *      }\n * });</pre>\n *\n * <p>Searching within the database is done by calling {@link AppSearchSession#search} and providing\n * the query string to search for, as well as a {@link SearchSpec}.\n *\n * <p>Alternatively, {@link AppSearchSession#getByDocumentId} can be called to retrieve documents by\n * namespace and ID.\n *\n * <p>Document removal is done either by time-to-live expiration, or explicitly calling a remove\n * operation. Remove operations can be done by namespace and ID via {@link\n * AppSearchSession#remove(RemoveByDocumentIdRequest, Executor, BatchResultCallback)}, or by query\n * via {@link AppSearchSession#remove(String, SearchSpec, Executor, Consumer)}.\n ",
  "links" : [ "android.app.appsearch.AppSearchSession#remove(RemoveByDocumentIdRequest", "android.app.appsearch.AppSearchSession#put", "android.app.appsearch.AppSearchSchema", "SetSchemaRequest.Builder#setSchemaTypeDisplayedBySystem", "android.app.appsearch.AppSearchSession#setSchema", "android.app.appsearch.AppSearchSession#search", "android.app.appsearch.AppSearchSession", "android.app.appsearch.GenericDocument", "android.app.appsearch.AppSearchSession#getByDocumentId", "SetSchemaRequest.Builder#setSchemaTypeVisibilityForPackage", "android.app.appsearch.SearchSpec", "android.app.appsearch.AppSearchSession#remove(String" ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IAppSearchManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppFunctionManager",
    "type" : "AppFunctionManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void createSearchSession(@NonNull SearchContext searchContext, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<AppSearchSession>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new {@link AppSearchSession}.\n     *\n     * <p>This process requires an AppSearch native indexing file system. If it's not created, the\n     * initialization process will create one under the user's credential encrypted directory.\n     *\n     * @param searchContext The {@link SearchContext} contains all information to create a new\n     *     {@link AppSearchSession}\n     * @param executor Executor on which to invoke the callback.\n     * @param callback The {@link AppSearchResult}&lt;{@link AppSearchSession}&gt; of performing\n     *     this operation. Or a {@link AppSearchResult} with failure reason code and error\n     *     information.\n     ",
    "links" : [ "android.app.appsearch.AppSearchResult", "SearchContext", "android.app.appsearch.AppSearchSession" ]
  }, {
    "name" : "public void createGlobalSearchSession(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GlobalSearchSession>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new {@link GlobalSearchSession}.\n     *\n     * <p>This process requires an AppSearch native indexing file system. If it's not created, the\n     * initialization process will create one under the user's credential encrypted directory.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback The {@link AppSearchResult}&lt;{@link GlobalSearchSession}&gt; of performing\n     *     this operation. Or a {@link AppSearchResult} with failure reason code and error\n     *     information.\n     ",
    "links" : [ "android.app.appsearch.AppSearchResult", "android.app.appsearch.GlobalSearchSession" ]
  }, {
    "name" : "public void createEnterpriseGlobalSearchSession(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<EnterpriseGlobalSearchSession>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new {@link EnterpriseGlobalSearchSession}\n     *\n     * <p>EnterpriseGlobalSearchSession queries data from the user’s work profile, allowing apps\n     * running on the personal profile to access a limited subset of work profile data. Enterprise\n     * access must be explicitly enabled on schemas, and schemas may also specify additional\n     * permissions required for enterprise access.\n     *\n     * <p>This process requires an AppSearch native indexing file system. If it's not created, the\n     * initialization process will create one under the user's credential encrypted directory.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback The {@link AppSearchResult}&lt;{@link EnterpriseGlobalSearchSession}&gt; of\n     *     performing this operation. Or a {@link AppSearchResult} with failure reason code and\n     *     error information.\n     ",
    "links" : [ "android.app.appsearch.AppSearchResult", "android.app.appsearch.EnterpriseGlobalSearchSession" ]
  }, {
    "name" : "public AppFunctionManager getAppFunctionManager()",
    "returnType" : "AppFunctionManager",
    "comment" : " Returns an instance of {@link android.app.appsearch.functions.AppFunctionManager}. ",
    "links" : [ "android.app.appsearch.functions.AppFunctionManager" ]
  } ],
  "methodNames" : [ "public void createSearchSession(@NonNull SearchContext searchContext, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<AppSearchSession>> callback)", "public void createGlobalSearchSession(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GlobalSearchSession>> callback)", "public void createEnterpriseGlobalSearchSession(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<EnterpriseGlobalSearchSession>> callback)", "public AppFunctionManager getAppFunctionManager()" ],
  "variableNames" : [ "mService", "mContext", "mAppFunctionManager" ]
}