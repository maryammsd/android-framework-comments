{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothCodecConfig.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothCodecConfig",
  "comment" : "\n * Represents the codec configuration for a Bluetooth A2DP source device.\n *\n * <p>Contains the source codec type, the codec priority, the codec sample rate, the codec bits per\n * sample, and the codec channel mode.\n *\n * <p>The source codec type values are the same as those supported by the device hardware.\n *\n * @see BluetoothA2dp\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SOURCE_CODEC_TYPE_SBC",
    "type" : "int",
    "comment" : "\n     * Source codec type SBC. This is the mandatory source codec type.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_AAC",
    "type" : "int",
    "comment" : "\n     * Source codec type AAC.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_APTX",
    "type" : "int",
    "comment" : "\n     * Source codec type APTX.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_APTX_HD",
    "type" : "int",
    "comment" : "\n     * Source codec type APTX HD.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_LDAC",
    "type" : "int",
    "comment" : "\n     * Source codec type LDAC.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_LC3",
    "type" : "int",
    "comment" : "\n     * Source codec type LC3.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_OPUS",
    "type" : "int",
    "comment" : "\n     * Source codec type Opus.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_INVALID",
    "type" : "int",
    "comment" : "\n     * Source codec type invalid. This is the default value used for codec type.\n     *\n     * @deprecated Use the {@link BluetoothCodecType} values returned by {@link\n     *     BluetoothA2dp#getSupportedCodecTypes} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothA2dp#getSupportedCodecTypes", "android.bluetooth.BluetoothCodecType" ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_MAX",
    "type" : "int",
    "comment" : " Represents the count of valid source codec types. ",
    "links" : [ ]
  }, {
    "name" : "CODEC_PRIORITY_DISABLED",
    "type" : "int",
    "comment" : "\n     * Codec priority disabled. Used to indicate that this codec is disabled and should not be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "CODEC_PRIORITY_DEFAULT",
    "type" : "int",
    "comment" : " Codec priority default. Default value used for codec priority. ",
    "links" : [ ]
  }, {
    "name" : "CODEC_PRIORITY_HIGHEST",
    "type" : "int",
    "comment" : " Codec priority highest. Used to indicate the highest priority a codec can have. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_NONE",
    "type" : "int",
    "comment" : " Codec sample rate 0 Hz. Default value used for codec sample rate. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_44100",
    "type" : "int",
    "comment" : " Codec sample rate 44100 Hz. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_48000",
    "type" : "int",
    "comment" : " Codec sample rate 48000 Hz. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_88200",
    "type" : "int",
    "comment" : " Codec sample rate 88200 Hz. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_96000",
    "type" : "int",
    "comment" : " Codec sample rate 96000 Hz. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_176400",
    "type" : "int",
    "comment" : " Codec sample rate 176400 Hz. ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_192000",
    "type" : "int",
    "comment" : " Codec sample rate 192000 Hz. ",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_NONE",
    "type" : "int",
    "comment" : " Codec bits per sample 0. Default value of the codec bits per sample. ",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_16",
    "type" : "int",
    "comment" : " Codec bits per sample 16. ",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_24",
    "type" : "int",
    "comment" : " Codec bits per sample 24. ",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_32",
    "type" : "int",
    "comment" : " Codec bits per sample 32. ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MODE_NONE",
    "type" : "int",
    "comment" : " Codec channel mode NONE. Default value of the codec channel mode. ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MODE_MONO",
    "type" : "int",
    "comment" : " Codec channel mode MONO. ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MODE_STEREO",
    "type" : "int",
    "comment" : " Codec channel mode STEREO. ",
    "links" : [ ]
  }, {
    "name" : "mCodecType",
    "type" : "BluetoothCodecType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRate",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitsPerSample",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific1",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific2",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific3",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific4",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BluetoothCodecConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash representation of this BluetoothCodecConfig based on all the config values.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String appendCapabilityToString(@Nullable String prevStr, @NonNull String capStr)",
    "returnType" : "String",
    "comment" : "\n     * Adds capability string to an existing string.\n     *\n     * @param prevStr the previous string with the capabilities. Can be a {@code null} pointer\n     * @param capStr the capability string to append to prevStr argument\n     * @return the result string in the form \"prevStr|capStr\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@link String} that describes each BluetoothCodecConfig parameter current value.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * @return 0\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flattens the object to a parcel\n     *\n     * @param out The Parcel in which the object should be written\n     * @param flags Additional flags about how the object should be written\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCodecName(@SourceCodecType int codecType)",
    "returnType" : "String",
    "comment" : "\n     * Returns the codec name converted to {@link String}.\n     *\n     * @hide\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "public int getCodecType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the source codec type of this config.\n     *\n     * @deprecated use {@link BluetoothCodecConfig#getExtendedCodecType} instead.\n     ",
    "links" : [ "android.bluetooth.BluetoothCodecConfig#getExtendedCodecType" ]
  }, {
    "name" : "public BluetoothCodecType getExtendedCodecType()",
    "returnType" : "BluetoothCodecType",
    "comment" : " Returns the source codec type of this config. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMandatoryCodec()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the codec is mandatory.\n     *\n     * <p>The actual mandatory codec type for Android Bluetooth audio is SBC. See {@link\n     * #SOURCE_CODEC_TYPE_SBC}.\n     *\n     * @return {@code true} if the codec is mandatory, {@code false} otherwise\n     ",
    "links" : [ "#SOURCE_CODEC_TYPE_SBC" ]
  }, {
    "name" : "public int getCodecPriority()",
    "returnType" : "int",
    "comment" : "\n     * Returns the codec selection priority.\n     *\n     * <p>The codec selection priority is relative to other codecs: larger value means higher\n     * priority.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodecPriority(@CodecPriority int codecPriority)",
    "returnType" : "void",
    "comment" : "\n     * Sets the codec selection priority.\n     *\n     * <p>The codec selection priority is relative to other codecs: larger value means higher\n     * priority.\n     *\n     * @param codecPriority the priority this codec should have\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSampleRate()",
    "returnType" : "int",
    "comment" : "\n     * Returns the codec sample rate. The value can be a bitmask with all supported sample rates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBitsPerSample()",
    "returnType" : "int",
    "comment" : "\n     * Returns the codec bits per sample. The value can be a bitmask with all bits per sample\n     * supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChannelMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the codec channel mode. The value can be a bitmask with all supported channel modes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific1()",
    "returnType" : "long",
    "comment" : "\n     * Returns the codec specific value1. As the value and usage differ for each codec, please refer\n     * to the concerned codec specification to obtain the codec specific information.\n     *\n     * <p>See section 4.3.2 of the Bluetooth A2dp specification for SBC codec specific information\n     * elements.\n     *\n     * <p>See section 4.4.2 of the Bluetooth A2dp specification for MPEG-1,2 Audio codec specific\n     * information elements.\n     *\n     * <p>See section 4.5.2 of the Bluetooth A2dp specification for MPEG-2, 4 AAC codec specific\n     * information elements.\n     *\n     * <p>See section 4.6.2 of the Bluetooth A2dp specification for ATRAC family codec specific\n     * information elements.\n     *\n     * <p>See section 4.7.2 of the Bluetooth A2dp specification for Vendor Specific A2DP codec\n     * specific information elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific2()",
    "returnType" : "long",
    "comment" : "\n     * Returns the codec specific value2. As the value and usage differ for each codec, please refer\n     * to the concerned codec specification to obtain the codec specific information.\n     *\n     * <p>See section 4.3.2 of the Bluetooth A2dp specification for SBC codec specific information\n     * elements.\n     *\n     * <p>See section 4.4.2 of the Bluetooth A2dp specification for MPEG-1,2 Audio codec specific\n     * information elements.\n     *\n     * <p>See section 4.5.2 of the Bluetooth A2dp specification for MPEG-2, 4 AAC codec specific\n     * information elements.\n     *\n     * <p>See section 4.6.2 of the Bluetooth A2dp specification for ATRAC family codec specific\n     * information elements.\n     *\n     * <p>See section 4.7.2 of the Bluetooth A2dp specification for Vendor Specific A2DP codec\n     * specific information elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific3()",
    "returnType" : "long",
    "comment" : "\n     * Returns the codec specific value3. As the value and usage differ for each codec, please refer\n     * to the concerned codec specification to obtain the codec specific information.\n     *\n     * <p>See section 4.3.2 of the Bluetooth A2dp specification for SBC codec specific information\n     * elements.\n     *\n     * <p>See section 4.4.2 of the Bluetooth A2dp specification for MPEG-1,2 Audio codec specific\n     * information elements.\n     *\n     * <p>See section 4.5.2 of the Bluetooth A2dp specification for MPEG-2, 4 AAC codec specific\n     * information elements.\n     *\n     * <p>See section 4.6.2 of the Bluetooth A2dp specification for ATRAC family codec specific\n     * information elements.\n     *\n     * <p>See section 4.7.2 of the Bluetooth A2dp specification for Vendor Specific A2DP codec\n     * specific information elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific4()",
    "returnType" : "long",
    "comment" : "\n     * Returns the codec specific value4. As the value and usage differ for each codec, please refer\n     * to the concerned codec specification to obtain the codec specific information.\n     *\n     * <p>See section 4.3.2 of the Bluetooth A2dp specification for SBC codec specific information\n     * elements.\n     *\n     * <p>See section 4.4.2 of the Bluetooth A2dp specification for MPEG-1,2 Audio codec specific\n     * information elements.\n     *\n     * <p>See section 4.5.2 of the Bluetooth A2dp specification for MPEG-2, 4 AAC codec specific\n     * information elements.\n     *\n     * <p>See section 4.6.2 of the Bluetooth A2dp specification for ATRAC family codec specific\n     * information elements.\n     *\n     * <p>See section 4.7.2 of the Bluetooth A2dp specification for Vendor Specific A2DP codec\n     * specific information elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasSingleBit(int valueSet)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a value set presented by a bitmask has zero or single bit\n     *\n     * @param valueSet the value set presented by a bitmask\n     * @return {@code true} if the valueSet contains zero or single bit, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleSampleRate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the object contains none or single sample rate.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleBitsPerSample()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the object contains none or single bits per sample.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleChannelMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the object contains none or single channel mode.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameAudioFeedingParameters(BluetoothCodecConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the audio feeding parameters are the same.\n     *\n     * @param other the codec config to compare against\n     * @return {@code true} if the audio feeding parameters are same, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean similarCodecFeedingParameters(BluetoothCodecConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether another codec config has the similar feeding parameters. Any parameters with\n     * NONE value will be considered to be a wildcard matching.\n     *\n     * @param other the codec config to compare against\n     * @return {@code true} if the audio feeding parameters are similar, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameCodecSpecificParameters(BluetoothCodecConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the codec specific parameters are the same.\n     *\n     * <p>Currently, only AAC VBR and LDAC Playback Quality on CodecSpecific1 are compared.\n     *\n     * @param other the codec config to compare against\n     * @return {@code true} if the codec specific parameters are the same, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(@Nullable Object o)", "public int hashCode()", "private static String appendCapabilityToString(@Nullable String prevStr, @NonNull String capStr)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public static String getCodecName(@SourceCodecType int codecType)", "public int getCodecType()", "public BluetoothCodecType getExtendedCodecType()", "public boolean isMandatoryCodec()", "public int getCodecPriority()", "public void setCodecPriority(@CodecPriority int codecPriority)", "public int getSampleRate()", "public int getBitsPerSample()", "public int getChannelMode()", "public long getCodecSpecific1()", "public long getCodecSpecific2()", "public long getCodecSpecific3()", "public long getCodecSpecific4()", "private static boolean hasSingleBit(int valueSet)", "public boolean hasSingleSampleRate()", "public boolean hasSingleBitsPerSample()", "public boolean hasSingleChannelMode()", "public boolean sameAudioFeedingParameters(BluetoothCodecConfig other)", "public boolean similarCodecFeedingParameters(BluetoothCodecConfig other)", "public boolean sameCodecSpecificParameters(BluetoothCodecConfig other)" ],
  "variableNames" : [ "SOURCE_CODEC_TYPE_SBC", "SOURCE_CODEC_TYPE_AAC", "SOURCE_CODEC_TYPE_APTX", "SOURCE_CODEC_TYPE_APTX_HD", "SOURCE_CODEC_TYPE_LDAC", "SOURCE_CODEC_TYPE_LC3", "SOURCE_CODEC_TYPE_OPUS", "SOURCE_CODEC_TYPE_INVALID", "SOURCE_CODEC_TYPE_MAX", "CODEC_PRIORITY_DISABLED", "CODEC_PRIORITY_DEFAULT", "CODEC_PRIORITY_HIGHEST", "SAMPLE_RATE_NONE", "SAMPLE_RATE_44100", "SAMPLE_RATE_48000", "SAMPLE_RATE_88200", "SAMPLE_RATE_96000", "SAMPLE_RATE_176400", "SAMPLE_RATE_192000", "BITS_PER_SAMPLE_NONE", "BITS_PER_SAMPLE_16", "BITS_PER_SAMPLE_24", "BITS_PER_SAMPLE_32", "CHANNEL_MODE_NONE", "CHANNEL_MODE_MONO", "CHANNEL_MODE_STEREO", "mCodecType", "mCodecPriority", "mSampleRate", "mBitsPerSample", "mChannelMode", "mCodecSpecific1", "mCodecSpecific2", "mCodecSpecific3", "mCodecSpecific4", "CREATOR" ]
}