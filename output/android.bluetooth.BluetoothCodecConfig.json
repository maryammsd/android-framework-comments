{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothCodecConfig.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothCodecConfig",
  "comment" : "\n * Represents the codec configuration for a Bluetooth A2DP source device.\n *\n * {@see BluetoothA2dp}\n *\n * {@hide}\n ",
  "variables" : [ {
    "name" : "SOURCE_CODEC_TYPE_SBC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_AAC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_APTX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_APTX_HD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_LDAC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CODEC_TYPE_INVALID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CODEC_PRIORITY_DISABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CODEC_PRIORITY_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CODEC_PRIORITY_HIGHEST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_44100",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_48000",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_88200",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_96000",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_176400",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_RATE_192000",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_16",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_24",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_32",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MODE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MODE_MONO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MODE_STEREO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRate",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitsPerSample",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific1",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific2",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific3",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodecSpecific4",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BluetoothCodecConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash based on the config values\n     *\n     * @return a hash based on the config values\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the object contains valid codec configuration.\n     *\n     * @return true if the object contains valid codec configuration, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String appendCapabilityToString(String prevStr, String capStr)",
    "returnType" : "String",
    "comment" : "\n     * Adds capability string to an existing string.\n     *\n     * @param prevStr the previous string with the capabilities. Can be a null pointer.\n     * @param capStr the capability string to append to prevStr argument.\n     * @return the result string in the form \"prevStr|capStr\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Always returns 0\n     *\n     * @return 0\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flattens the object to a parcel\n     *\n     * @param out The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCodecName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the codec name.\n     *\n     * @return the codec name\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCodecType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the codec type.\n     * See {@link android.bluetooth.BluetoothCodecConfig#SOURCE_CODEC_TYPE_SBC}.\n     *\n     * @return the codec type\n     ",
    "links" : [ "android.bluetooth.BluetoothCodecConfig#SOURCE_CODEC_TYPE_SBC" ]
  }, {
    "name" : "public boolean isMandatoryCodec()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the codec is mandatory.\n     *\n     * @return true if the codec is mandatory, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCodecPriority()",
    "returnType" : "int",
    "comment" : "\n     * Gets the codec selection priority.\n     * The codec selection priority is relative to other codecs: larger value\n     * means higher priority. If 0, reset to default.\n     *\n     * @return the codec priority\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodecPriority(@CodecPriority int codecPriority)",
    "returnType" : "void",
    "comment" : "\n     * Sets the codec selection priority.\n     * The codec selection priority is relative to other codecs: larger value\n     * means higher priority. If 0, reset to default.\n     *\n     * @param codecPriority the codec priority\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSampleRate()",
    "returnType" : "int",
    "comment" : "\n     * Gets the codec sample rate. The value can be a bitmask with all\n     * supported sample rates:\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_NONE} or\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_44100} or\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_48000} or\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_88200} or\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_96000} or\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_176400} or\n     * {@link android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_192000}\n     *\n     * @return the codec sample rate\n     ",
    "links" : [ "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_48000", "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_192000", "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_44100", "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_176400", "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_NONE", "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_88200", "android.bluetooth.BluetoothCodecConfig#SAMPLE_RATE_96000" ]
  }, {
    "name" : "public int getBitsPerSample()",
    "returnType" : "int",
    "comment" : "\n     * Gets the codec bits per sample. The value can be a bitmask with all\n     * bits per sample supported:\n     * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_NONE} or\n     * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_16} or\n     * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_24} or\n     * {@link android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_32}\n     *\n     * @return the codec bits per sample\n     ",
    "links" : [ "android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_NONE", "android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_32", "android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_24", "android.bluetooth.BluetoothCodecConfig#BITS_PER_SAMPLE_16" ]
  }, {
    "name" : "public int getChannelMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the codec channel mode. The value can be a bitmask with all\n     * supported channel modes:\n     * {@link android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_NONE} or\n     * {@link android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_MONO} or\n     * {@link android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_STEREO}\n     *\n     * @return the codec channel mode\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_MONO", "android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_STEREO", "android.bluetooth.BluetoothCodecConfig#CHANNEL_MODE_NONE" ]
  }, {
    "name" : "public long getCodecSpecific1()",
    "returnType" : "long",
    "comment" : "\n     * Gets a codec specific value1.\n     *\n     * @return a codec specific value1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific2()",
    "returnType" : "long",
    "comment" : "\n     * Gets a codec specific value2.\n     *\n     * @return a codec specific value2\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific3()",
    "returnType" : "long",
    "comment" : "\n     * Gets a codec specific value3.\n     *\n     * @return a codec specific value3\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCodecSpecific4()",
    "returnType" : "long",
    "comment" : "\n     * Gets a codec specific value4.\n     *\n     * @return a codec specific value4\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasSingleBit(int valueSet)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a value set presented by a bitmask has zero or single bit\n     *\n     * @param valueSet the value set presented by a bitmask\n     * @return true if the valueSet contains zero or single bit, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleSampleRate()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the object contains none or single sample rate.\n     *\n     * @return true if the object contains none or single sample rate, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleBitsPerSample()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the object contains none or single bits per sample.\n     *\n     * @return true if the object contains none or single bits per sample, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleChannelMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the object contains none or single channel mode.\n     *\n     * @return true if the object contains none or single channel mode, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameAudioFeedingParameters(BluetoothCodecConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the audio feeding parameters are same.\n     *\n     * @param other the codec config to compare against\n     * @return true if the audio feeding parameters are same, otherwise false\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean similarCodecFeedingParameters(BluetoothCodecConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether another codec config has the similar feeding parameters.\n     * Any parameters with NONE value will be considered to be a wildcard matching.\n     *\n     * @param other the codec config to compare against\n     * @return true if the audio feeding parameters are similar, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameCodecSpecificParameters(BluetoothCodecConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the codec specific parameters are the same.\n     *\n     * @param other the codec config to compare against\n     * @return true if the codec specific parameters are the same, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SOURCE_CODEC_TYPE_SBC", "SOURCE_CODEC_TYPE_AAC", "SOURCE_CODEC_TYPE_APTX", "SOURCE_CODEC_TYPE_APTX_HD", "SOURCE_CODEC_TYPE_LDAC", "SOURCE_CODEC_TYPE_MAX", "SOURCE_CODEC_TYPE_INVALID", "CODEC_PRIORITY_DISABLED", "CODEC_PRIORITY_DEFAULT", "CODEC_PRIORITY_HIGHEST", "SAMPLE_RATE_NONE", "SAMPLE_RATE_44100", "SAMPLE_RATE_48000", "SAMPLE_RATE_88200", "SAMPLE_RATE_96000", "SAMPLE_RATE_176400", "SAMPLE_RATE_192000", "BITS_PER_SAMPLE_NONE", "BITS_PER_SAMPLE_16", "BITS_PER_SAMPLE_24", "BITS_PER_SAMPLE_32", "CHANNEL_MODE_NONE", "CHANNEL_MODE_MONO", "CHANNEL_MODE_STEREO", "mCodecType", "mCodecPriority", "mSampleRate", "mBitsPerSample", "mChannelMode", "mCodecSpecific1", "mCodecSpecific2", "mCodecSpecific3", "mCodecSpecific4", "CREATOR" ],
  "methodNames" : [ "public boolean equals(Object o)", "public int hashCode()", "public boolean isValid()", "private static String appendCapabilityToString(String prevStr, String capStr)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public String getCodecName()", "public int getCodecType()", "public boolean isMandatoryCodec()", "public int getCodecPriority()", "public void setCodecPriority(@CodecPriority int codecPriority)", "public int getSampleRate()", "public int getBitsPerSample()", "public int getChannelMode()", "public long getCodecSpecific1()", "public long getCodecSpecific2()", "public long getCodecSpecific3()", "public long getCodecSpecific4()", "private static boolean hasSingleBit(int valueSet)", "public boolean hasSingleSampleRate()", "public boolean hasSingleBitsPerSample()", "public boolean hasSingleChannelMode()", "public boolean sameAudioFeedingParameters(BluetoothCodecConfig other)", "public boolean similarCodecFeedingParameters(BluetoothCodecConfig other)", "public boolean sameCodecSpecificParameters(BluetoothCodecConfig other)" ]
}