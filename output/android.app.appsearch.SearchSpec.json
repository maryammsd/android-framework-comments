{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/SearchSpec.java",
  "packageName" : "android.app.appsearch",
  "className" : "SearchSpec",
  "comment" : "\n * This class represents the specification logic for AppSearch. It can be used to set the type of\n * search, like prefix or exact only or apply filters to search for a specific schema type only etc.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SearchSpec>",
    "comment" : " Creator class for {@link SearchSpec}. ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "PROJECTION_SCHEMA_TYPE_WILDCARD",
    "type" : "String",
    "comment" : "\n     * Schema type to be used in {@link SearchSpec.Builder#addProjection} to apply property paths to\n     * all results, excepting any types that have had their own, specific property paths set.\n     *\n     * @deprecated use {@link #SCHEMA_TYPE_WILDCARD} instead.\n     ",
    "links" : [ "#SCHEMA_TYPE_WILDCARD", "SearchSpec.Builder#addProjection" ]
  }, {
    "name" : "SCHEMA_TYPE_WILDCARD",
    "type" : "String",
    "comment" : "\n     * Schema type to be used in {@link SearchSpec.Builder#addFilterProperties(String, Collection)}\n     * and {@link SearchSpec.Builder#addProjection} to apply property paths to all results,\n     * excepting any types that have had their own, specific property paths set.\n     ",
    "links" : [ "SearchSpec.Builder#addProjection", "SearchSpec.Builder#addFilterProperties(String" ]
  }, {
    "name" : "mTermMatchType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSchemas",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNamespaces",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypePropertyFilters",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageNames",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultCountPerPage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRankingStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrder",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnippetCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnippetCountPerProperty",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxSnippetSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjectionTypePropertyMasks",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultGroupingTypeFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroupingLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypePropertyWeightsField",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJoinSpec",
    "type" : "JoinSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvancedRankingExpression",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabledFeatures",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchSourceLogTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_NUM_PER_PAGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAX_NUM_PER_PAGE",
    "type" : "int",
    "comment" : "  If that happens, the @IntRange() directives in this class may have to change.",
    "links" : [ ]
  }, {
    "name" : "MAX_SNIPPET_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SNIPPET_PER_PROPERTY_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SNIPPET_SIZE_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TERM_MATCH_EXACT_ONLY",
    "type" : "int",
    "comment" : "\n     * Query terms will only match exact tokens in the index.\n     *\n     * <p>For example, a query term \"foo\" will only match indexed token \"foo\", and not \"foot\" or\n     * \"football\".\n     ",
    "links" : [ ]
  }, {
    "name" : "TERM_MATCH_PREFIX",
    "type" : "int",
    "comment" : "\n     * Query terms will match indexed tokens when the query term is a prefix of the token.\n     *\n     * <p>For example, a query term \"foo\" will match indexed tokens like \"foo\", \"foot\", and\n     * \"football\".\n     ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_NONE",
    "type" : "int",
    "comment" : " No Ranking, results are returned in arbitrary order. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_DOCUMENT_SCORE",
    "type" : "int",
    "comment" : " Ranked by app-provided document scores. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_CREATION_TIMESTAMP",
    "type" : "int",
    "comment" : " Ranked by document creation timestamps. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_RELEVANCE_SCORE",
    "type" : "int",
    "comment" : " Ranked by document relevance score. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_USAGE_COUNT",
    "type" : "int",
    "comment" : " Ranked by number of usages, as reported by the app. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_USAGE_LAST_USED_TIMESTAMP",
    "type" : "int",
    "comment" : " Ranked by timestamp of last usage, as reported by the app. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_SYSTEM_USAGE_COUNT",
    "type" : "int",
    "comment" : " Ranked by number of usages from a system UI surface. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_SYSTEM_USAGE_LAST_USED_TIMESTAMP",
    "type" : "int",
    "comment" : " Ranked by timestamp of last usage from a system UI surface. ",
    "links" : [ ]
  }, {
    "name" : "RANKING_STRATEGY_JOIN_AGGREGATE_SCORE",
    "type" : "int",
    "comment" : "\n     * Ranked by the aggregated ranking signal of the joined documents.\n     *\n     * <p>Which aggregation strategy is used to determine a ranking signal is specified in the\n     * {@link JoinSpec} set by {@link Builder#setJoinSpec}. This ranking strategy may not be used if\n     * no {@link JoinSpec} is provided.\n     *\n     * @see Builder#build\n     ",
    "links" : [ "android.app.appsearch.JoinSpec", "#setJoinSpec" ]
  }, {
    "name" : "RANKING_STRATEGY_ADVANCED_RANKING_EXPRESSION",
    "type" : "int",
    "comment" : " Ranked by the advanced ranking expression provided. ",
    "links" : [ ]
  }, {
    "name" : "ORDER_DESCENDING",
    "type" : "int",
    "comment" : " Search results will be returned in a descending order. ",
    "links" : [ ]
  }, {
    "name" : "ORDER_ASCENDING",
    "type" : "int",
    "comment" : " Search results will be returned in an ascending order. ",
    "links" : [ ]
  }, {
    "name" : "GROUPING_TYPE_PER_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Results should be grouped together by package for the purpose of enforcing a limit on the\n     * number of results returned per package.\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUPING_TYPE_PER_NAMESPACE",
    "type" : "int",
    "comment" : "\n     * Results should be grouped together by namespace for the purpose of enforcing a limit on the\n     * number of results returned per namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUPING_TYPE_PER_SCHEMA",
    "type" : "int",
    "comment" : "\n     * Results should be grouped together by schema type for the purpose of enforcing a limit on the\n     * number of results returned per schema type.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getTermMatch()",
    "returnType" : "int",
    "comment" : " Returns how the query terms should match terms in the index. ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getFilterSchemas()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of schema types to search for.\n     *\n     * <p>If empty, the query will search over all schema types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getFilterProperties()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns the map of schema and target properties to search over.\n     *\n     * <p>If empty, will search over all schema and properties.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getFilterNamespaces()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of namespaces to search over.\n     *\n     * <p>If empty, the query will search over all namespaces.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getFilterPackageNames()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of package name filters to search over.\n     *\n     * <p>If empty, the query will search over all packages that the caller has access to. If\n     * package names are specified which caller doesn't have access to, then those package names\n     * will be ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResultCountPerPage()",
    "returnType" : "int",
    "comment" : " Returns the number of results per page in the result set. ",
    "links" : [ ]
  }, {
    "name" : "public int getRankingStrategy()",
    "returnType" : "int",
    "comment" : " Returns the ranking strategy. ",
    "links" : [ ]
  }, {
    "name" : "public int getOrder()",
    "returnType" : "int",
    "comment" : " Returns the order of returned search results (descending or ascending). ",
    "links" : [ ]
  }, {
    "name" : "public int getSnippetCount()",
    "returnType" : "int",
    "comment" : " Returns how many documents to generate snippets for. ",
    "links" : [ ]
  }, {
    "name" : "public int getSnippetCountPerProperty()",
    "returnType" : "int",
    "comment" : "\n     * Returns how many matches for each property of a matching document to generate snippets for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxSnippetSize()",
    "returnType" : "int",
    "comment" : " Returns the maximum size of a snippet in characters. ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getProjections()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns a map from schema type to property paths to be used for projection.\n     *\n     * <p>If the map is empty, then all properties will be retrieved for all results.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     *\n     * @return A mapping of schema types to lists of projection strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<PropertyPath>> getProjectionPaths()",
    "returnType" : "Map<String, List<PropertyPath>>",
    "comment" : "\n     * Returns a map from schema type to property paths to be used for projection.\n     *\n     * <p>If the map is empty, then all properties will be retrieved for all results.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     *\n     * @return A mapping of schema types to lists of projection {@link PropertyPath} objects.\n     ",
    "links" : [ "android.app.appsearch.PropertyPath" ]
  }, {
    "name" : "public Map<String, Map<String, Double>> getPropertyWeights()",
    "returnType" : "Map<String, Map<String, Double>>",
    "comment" : "\n     * Returns properties weights to be used for scoring.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the {@link Map} returned\n     * by this function, rather than calling it multiple times.\n     *\n     * @return a {@link Map} of schema type to an inner-map of property paths of the schema type to\n     *     the weight to set for that property.\n     ",
    "links" : [ "android.util.ArrayMap" ]
  }, {
    "name" : "public Map<String, Map<PropertyPath, Double>> getPropertyWeightPaths()",
    "returnType" : "Map<String, Map<PropertyPath, Double>>",
    "comment" : "\n     * Returns properties weights to be used for scoring.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the {@link Map} returned\n     * by this function, rather than calling it multiple times.\n     *\n     * @return a {@link Map} of schema type to an inner-map of property paths of the schema type to\n     *     the weight to set for that property.\n     ",
    "links" : [ "android.util.ArrayMap" ]
  }, {
    "name" : "public int getResultGroupingTypeFlags()",
    "returnType" : "int",
    "comment" : "\n     * Get the type of grouping limit to apply, or 0 if {@link Builder#setResultGrouping} was not\n     * called.\n     ",
    "links" : [ "#setResultGrouping" ]
  }, {
    "name" : "public int getResultGroupingLimit()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum number of results to return for each group.\n     *\n     * @return the maximum number of results to return for each group or Integer.MAX_VALUE if {@link\n     *     Builder#setResultGrouping(int, int)} was not called.\n     ",
    "links" : [ "#setResultGrouping(int" ]
  }, {
    "name" : "public JoinSpec getJoinSpec()",
    "returnType" : "JoinSpec",
    "comment" : " Returns specification on which documents need to be joined. ",
    "links" : [ ]
  }, {
    "name" : "public String getAdvancedRankingExpression()",
    "returnType" : "String",
    "comment" : "\n     * Get the advanced ranking expression, or \"\" if {@link Builder#setRankingStrategy(String)} was\n     * not called.\n     ",
    "links" : [ "#setRankingStrategy(String)" ]
  }, {
    "name" : "public String getSearchSourceLogTag()",
    "returnType" : "String",
    "comment" : "\n     * Gets a tag to indicate the source of this search, or {@code null} if {@link\n     * Builder#setSearchSourceLogTag(String)} was not called.\n     *\n     * <p>Some AppSearch implementations may log a hash of this tag using statsd. This tag may be\n     * used for tracing performance issues and crashes to a component of an app.\n     *\n     * <p>Call {@link Builder#setSearchSourceLogTag} and give a unique value if you want to\n     * distinguish this search scenario with other search scenarios during performance analysis.\n     *\n     * <p>Under no circumstances will AppSearch log the raw String value using statsd, but it will\n     * be provided as-is to custom {@code AppSearchLogger} implementations you have registered in\n     * your app.\n     ",
    "links" : [ "#setSearchSourceLogTag(String)", "#setSearchSourceLogTag" ]
  }, {
    "name" : "public boolean isNumericSearchEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the NUMERIC_SEARCH feature is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVerbatimSearchEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the VERBATIM_SEARCH feature is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isListFilterQueryLanguageEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the LIST_FILTER_QUERY_LANGUAGE feature is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isListFilterHasPropertyFunctionEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the LIST_FILTER_HAS_PROPERTY_FUNCTION feature is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getEnabledFeatures()",
    "returnType" : "List<String>",
    "comment" : "\n     * Get the list of enabled features that the caller is intending to use in this search call.\n     *\n     * @return the set of {@link Features} enabled in this {@link SearchSpec} Entry.\n     * @hide\n     ",
    "links" : [ "Features", "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getTermMatch()", "public List<String> getFilterSchemas()", "public Map<String, List<String>> getFilterProperties()", "public List<String> getFilterNamespaces()", "public List<String> getFilterPackageNames()", "public int getResultCountPerPage()", "public int getRankingStrategy()", "public int getOrder()", "public int getSnippetCount()", "public int getSnippetCountPerProperty()", "public int getMaxSnippetSize()", "public Map<String, List<String>> getProjections()", "public Map<String, List<PropertyPath>> getProjectionPaths()", "public Map<String, Map<String, Double>> getPropertyWeights()", "public Map<String, Map<PropertyPath, Double>> getPropertyWeightPaths()", "public int getResultGroupingTypeFlags()", "public int getResultGroupingLimit()", "public JoinSpec getJoinSpec()", "public String getAdvancedRankingExpression()", "public String getSearchSourceLogTag()", "public boolean isNumericSearchEnabled()", "public boolean isVerbatimSearchEnabled()", "public boolean isListFilterQueryLanguageEnabled()", "public boolean isListFilterHasPropertyFunctionEnabled()", "public List<String> getEnabledFeatures()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "CREATOR", "PROJECTION_SCHEMA_TYPE_WILDCARD", "SCHEMA_TYPE_WILDCARD", "mTermMatchType", "mSchemas", "mNamespaces", "mTypePropertyFilters", "mPackageNames", "mResultCountPerPage", "mRankingStrategy", "mOrder", "mSnippetCount", "mSnippetCountPerProperty", "mMaxSnippetSize", "mProjectionTypePropertyMasks", "mResultGroupingTypeFlags", "mGroupingLimit", "mTypePropertyWeightsField", "mJoinSpec", "mAdvancedRankingExpression", "mEnabledFeatures", "mSearchSourceLogTag", "DEFAULT_NUM_PER_PAGE", "MAX_NUM_PER_PAGE", "MAX_SNIPPET_COUNT", "MAX_SNIPPET_PER_PROPERTY_COUNT", "MAX_SNIPPET_SIZE_LIMIT", "TERM_MATCH_EXACT_ONLY", "TERM_MATCH_PREFIX", "RANKING_STRATEGY_NONE", "RANKING_STRATEGY_DOCUMENT_SCORE", "RANKING_STRATEGY_CREATION_TIMESTAMP", "RANKING_STRATEGY_RELEVANCE_SCORE", "RANKING_STRATEGY_USAGE_COUNT", "RANKING_STRATEGY_USAGE_LAST_USED_TIMESTAMP", "RANKING_STRATEGY_SYSTEM_USAGE_COUNT", "RANKING_STRATEGY_SYSTEM_USAGE_LAST_USED_TIMESTAMP", "RANKING_STRATEGY_JOIN_AGGREGATE_SCORE", "RANKING_STRATEGY_ADVANCED_RANKING_EXPRESSION", "ORDER_DESCENDING", "ORDER_ASCENDING", "GROUPING_TYPE_PER_PACKAGE", "GROUPING_TYPE_PER_NAMESPACE", "GROUPING_TYPE_PER_SCHEMA" ]
}