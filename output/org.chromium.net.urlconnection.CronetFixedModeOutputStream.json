{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/urlconnection/CronetFixedModeOutputStream.java",
  "packageName" : "org.chromium.net.urlconnection",
  "className" : "CronetFixedModeOutputStream",
  "comment" : "\n * An implementation of {@link java.io.OutputStream} to send data to a server,\n * when {@link CronetHttpURLConnection#setFixedLengthStreamingMode} is used.\n * This implementation does not buffer the entire request body in memory.\n * It does not support rewind. Note that {@link #write} should only be called\n * from the thread on which the {@link #mConnection} is created.\n ",
  "links" : [ "java.io.OutputStream", "#write", "#mConnection", "org.chromium.net.urlconnection.CronetHttpURLConnection#setFixedLengthStreamingMode" ],
  "variables" : [ {
    "name" : "sDefaultBufferLength",
    "type" : "int",
    "comment" : " 16384 for SPDY, and 16384 for normal HTTP/1.1 stream.",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "CronetHttpURLConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessageLoop",
    "type" : "MessageLoop",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentLength",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuffer",
    "type" : "ByteBuffer",
    "comment" : " so client can fill it again.",
    "links" : [ ]
  }, {
    "name" : "mUploadDataProvider",
    "type" : "UploadDataProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBytesWritten",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int oneByte) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] buffer, int offset, int count) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureBufferHasRemaining() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * If {@code mBuffer} is full, wait until it is consumed and there is\n     * space to write more data to it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void uploadIfComplete() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Waits for the native stack to upload {@code mBuffer}'s contents because\n     * the client has provided all bytes to be uploaded and there is no need to\n     * wait for or expect the client to provide more bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void uploadBufferInternal() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Helper function to upload {@code mBuffer} to the native stack. This\n     * function blocks until {@code mBuffer} is consumed and there is space to\n     * write more data.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkNotExceedContentLength(int numBytes) throws ProtocolException",
    "returnType" : "void",
    "comment" : "\n     * Throws {@link java.net.ProtocolException} if adding {@code numBytes} will\n     * exceed content length.\n     ",
    "links" : [ "java.net.ProtocolException" ]
  }, {
    "name" : " void setConnected() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void checkReceivedEnoughContent() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " UploadDataProvider getUploadDataProvider()",
    "returnType" : "UploadDataProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultBufferLengthForTesting(int length)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default buffer length for use in tests.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int oneByte) throws IOException", "public void write(byte[] buffer, int offset, int count) throws IOException", "private void ensureBufferHasRemaining() throws IOException", "private void uploadIfComplete() throws IOException", "private void uploadBufferInternal() throws IOException", "private void checkNotExceedContentLength(int numBytes) throws ProtocolException", " void setConnected() throws IOException", " void checkReceivedEnoughContent() throws IOException", " UploadDataProvider getUploadDataProvider()", "public static void setDefaultBufferLengthForTesting(int length)" ],
  "variableNames" : [ "sDefaultBufferLength", "mConnection", "mMessageLoop", "mContentLength", "mBuffer", "mUploadDataProvider", "mBytesWritten" ]
}