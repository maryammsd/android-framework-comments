{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/TimeZoneRule.java",
  "packageName" : "android.icu.util",
  "className" : "TimeZoneRule",
  "comment" : "\n * <code>TimeZoneRule</code> is an abstract class representing a rule for time zone.\n * <code>TimeZoneRule</code> has a set of time zone attributes, such as zone name,\n * raw offset (UTC offset for standard time) and daylight saving time offset.\n *\n * @see android.icu.util.TimeZoneTransition\n * @see android.icu.util.RuleBasedTimeZone\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rawOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dstSavings",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of this time zone.\n     *\n     * @return The name of this time zone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawOffset()",
    "returnType" : "int",
    "comment" : "\n     * Gets the standard time offset.\n     *\n     * @return The standard time offset from UTC in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDSTSavings()",
    "returnType" : "int",
    "comment" : "\n     * Gets the amount of daylight saving delta time from the standard time.\n     *\n     * @return  The amount of daylight saving offset used by this rule\n     *          in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEquivalentTo(TimeZoneRule other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if this rule represents the same rule and offsets as another.\n     * When two <code>TimeZoneRule</code> objects differ only its names, this method returns\n     * true.\n     *\n     * @param other The <code>TimeZoneRule</code> object to be compared with.\n     * @return true if the other <code>TimeZoneRule</code> is the same as this one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getFirstStart(int prevRawOffset, int prevDSTSavings)",
    "returnType" : "Date",
    "comment" : "\n     * Gets the very first time when this rule takes effect.\n     *\n     * @param prevRawOffset     The standard time offset from UTC before this rule\n     *                          takes effect in milliseconds.\n     * @param prevDSTSavings    The amount of daylight saving offset from the\n     *                          standard time.\n     *\n     * @return  The very first time when this rule takes effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getFinalStart(int prevRawOffset, int prevDSTSavings)",
    "returnType" : "Date",
    "comment" : "\n     * Gets the final time when this rule takes effect.\n     *\n     * @param prevRawOffset     The standard time offset from UTC before this rule\n     *                          takes effect in milliseconds.\n     * @param prevDSTSavings    The amount of daylight saving offset from the\n     *                          standard time.\n     *\n     * @return  The very last time when this rule takes effect,\n     *          or null if this rule is applied for future dates infinitely.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getNextStart(long base, int prevRawOffset, int prevDSTSavings, boolean inclusive)",
    "returnType" : "Date",
    "comment" : "\n     * Gets the first time when this rule takes effect after the specified time.\n     *\n     * @param base              The first time after this time is returned.\n     * @param prevRawOffset     The standard time offset from UTC before this rule\n     *                          takes effect in milliseconds.\n     * @param prevDSTSavings    The amount of daylight saving offset from the\n     *                          standard time.\n     * @param inclusive         Whether the base time is inclusive or not.\n     *\n     * @return  The first time when this rule takes effect after the specified time,\n     *          or null when this rule never takes effect after the specified time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getPreviousStart(long base, int prevRawOffset, int prevDSTSavings, boolean inclusive)",
    "returnType" : "Date",
    "comment" : "\n     * Gets the most recent time when this rule takes effect before the specified time.\n     *\n     * @param base              The most recent time when this rule takes effect before\n     *                          this time is returned.\n     * @param prevRawOffset     The standard time offset from UTC before this rule\n     *                          takes effect in milliseconds.\n     * @param prevDSTSavings    The amount of daylight saving offset from the\n     *                          standard time.\n     * @param inclusive         Whether the base time is inclusive or not.\n     *\n     * @return  The most recent time when this rule takes effect before the specified time,\n     *          or null when this rule never takes effect before the specified time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isTransitionRule()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if this <code>TimeZoneRule</code> has one or more start times.\n     *\n     * @return true if this <code>TimeZoneRule</code> has one or more start times.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a <code>String</code> representation of this <code>TimeZoneRule</code> object.\n     * This method is used for debugging purpose only.  The string representation can be changed\n     * in future version of ICU without any notice.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public int getRawOffset()", "public int getDSTSavings()", "public boolean isEquivalentTo(TimeZoneRule other)", "public abstract Date getFirstStart(int prevRawOffset, int prevDSTSavings)", "public abstract Date getFinalStart(int prevRawOffset, int prevDSTSavings)", "public abstract Date getNextStart(long base, int prevRawOffset, int prevDSTSavings, boolean inclusive)", "public abstract Date getPreviousStart(long base, int prevRawOffset, int prevDSTSavings, boolean inclusive)", "public abstract boolean isTransitionRule()", "public String toString()" ],
  "variableNames" : [ "serialVersionUID", "name", "rawOffset", "dstSavings" ]
}