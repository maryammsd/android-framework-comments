{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ProgressBar.java",
  "packageName" : "android.widget",
  "className" : "ProgressBar",
  "comment" : "\n * <p>\n * A user interface element that indicates the progress of an operation.\n * Progress bar supports two modes to represent progress: determinate, and indeterminate. For\n * a visual overview of the difference between determinate and indeterminate progress modes, see\n * <a href=\"https://material.io/guidelines/components/progress-activity.html#progress-activity-types-of-indicators\">\n * Progress & activity</a>.\n * Display progress bars to a user in a non-interruptive way.\n * Show the progress bar in your app's user interface or in a notification\n * instead of within a dialog.\n * </p>\n * <h3>Indeterminate Progress</h3>\n * <p>\n * Use indeterminate mode for the progress bar when you do not know how long an\n * operation will take.\n * Indeterminate mode is the default for progress bar and shows a cyclic animation without a\n * specific amount of progress indicated.\n * The following example shows an indeterminate progress bar:\n * <pre>\n * &lt;ProgressBar\n *      android:id=\"@+id/indeterminateBar\"\n *      android:layout_width=\"wrap_content\"\n *      android:layout_height=\"wrap_content\"\n *      /&gt;\n * </pre>\n * </p>\n * <h3>Determinate Progress</h3>\n * <p>\n * Use determinate mode for the progress bar when you want to show that a specific quantity of\n * progress has occurred.\n * For example, the percent remaining of a file being retrieved, the amount records in\n * a batch written to database, or the percent remaining of an audio file that is playing.\n * <p>\n * <p>\n * To indicate determinate progress, you set the style of the progress bar to\n * {@link android.R.style#Widget_ProgressBar_Horizontal} and set the amount of progress.\n * The following example shows a determinate progress bar that is 25% complete:\n * <pre>\n * &lt;ProgressBar\n *      android:id=\"@+id/determinateBar\"\n *      style=\"@android:style/Widget.ProgressBar.Horizontal\"\n *      android:layout_width=\"wrap_content\"\n *      android:layout_height=\"wrap_content\"\n *      android:progress=\"25\"/&gt;\n * </pre>\n * You can update the percentage of progress displayed by using the\n * {@link #setProgress(int)} method, or by calling\n * {@link #incrementProgressBy(int)} to increase the current progress completed\n * by a specified amount.\n * By default, the progress bar is full when the progress value reaches 100.\n * You can adjust this default by setting the\n * {@link android.R.styleable#ProgressBar_max android:max} attribute.\n * </p>\n * <p>Other progress bar styles provided by the system include:</p>\n * <ul>\n * <li>{@link android.R.style#Widget_ProgressBar_Horizontal Widget.ProgressBar.Horizontal}</li>\n * <li>{@link android.R.style#Widget_ProgressBar_Small Widget.ProgressBar.Small}</li>\n * <li>{@link android.R.style#Widget_ProgressBar_Large Widget.ProgressBar.Large}</li>\n * <li>{@link android.R.style#Widget_ProgressBar_Inverse Widget.ProgressBar.Inverse}</li>\n * <li>{@link android.R.style#Widget_ProgressBar_Small_Inverse\n * Widget.ProgressBar.Small.Inverse}</li>\n * <li>{@link android.R.style#Widget_ProgressBar_Large_Inverse\n * Widget.ProgressBar.Large.Inverse}</li>\n * </ul>\n * <p>The \"inverse\" styles provide an inverse color scheme for the spinner, which may be necessary\n * if your application uses a light colored theme (a white background).</p>\n *\n * <p><strong>XML attributes</b></strong>\n * <p>\n * See {@link android.R.styleable#ProgressBar ProgressBar Attributes},\n * {@link android.R.styleable#View View Attributes}\n * </p>\n *\n * @attr ref android.R.styleable#ProgressBar_animationResolution\n * @attr ref android.R.styleable#ProgressBar_indeterminate\n * @attr ref android.R.styleable#ProgressBar_indeterminateBehavior\n * @attr ref android.R.styleable#ProgressBar_indeterminateDrawable\n * @attr ref android.R.styleable#ProgressBar_indeterminateDuration\n * @attr ref android.R.styleable#ProgressBar_indeterminateOnly\n * @attr ref android.R.styleable#ProgressBar_interpolator\n * @attr ref android.R.styleable#ProgressBar_min\n * @attr ref android.R.styleable#ProgressBar_max\n * @attr ref android.R.styleable#ProgressBar_maxHeight\n * @attr ref android.R.styleable#ProgressBar_maxWidth\n * @attr ref android.R.styleable#ProgressBar_minHeight\n * @attr ref android.R.styleable#ProgressBar_minWidth\n * @attr ref android.R.styleable#ProgressBar_mirrorForRtl\n * @attr ref android.R.styleable#ProgressBar_progress\n * @attr ref android.R.styleable#ProgressBar_progressDrawable\n * @attr ref android.R.styleable#ProgressBar_secondaryProgress\n ",
  "variables" : [ {
    "name" : "MAX_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROGRESS_ANIM_INTERPOLATOR",
    "type" : "DecelerateInterpolator",
    "comment" : " Interpolator used for smooth progress animations. ",
    "links" : [ ]
  }, {
    "name" : "PROGRESS_ANIM_DURATION",
    "type" : "int",
    "comment" : " Duration of smooth progress animations. ",
    "links" : [ ]
  }, {
    "name" : "mMinWidth",
    "type" : "int",
    "comment" : "\n     * Outside the framework, please use {@link ProgressBar#getMinWidth()} and\n     * {@link ProgressBar#setMinWidth(int)} instead of accessing these directly.\n     ",
    "links" : [ "ProgressBar#getMinWidth", "ProgressBar#setMinWidth" ]
  }, {
    "name" : "mMaxWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinHeight",
    "type" : "int",
    "comment" : "\n     * Outside the framework, please use {@link ProgressBar#getMinHeight()} and\n     * {@link ProgressBar#setMinHeight(int)} instead of accessing these directly.\n     ",
    "links" : [ "ProgressBar#getMinHeight", "ProgressBar#setMinHeight" ]
  }, {
    "name" : "mMaxHeight",
    "type" : "int",
    "comment" : "\n     * Outside the framework, please use {@link ProgressBar#getMaxHeight()} ()} and\n     * {@link ProgressBar#setMaxHeight(int)} (int)} instead of accessing these directly.\n     ",
    "links" : [ "ProgressBar#getMaxHeight", "ProgressBar#setMaxHeight" ]
  }, {
    "name" : "mProgress",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryProgress",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMin",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBehavior",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "int",
    "comment" : " characteristics programatically.",
    "links" : [ ]
  }, {
    "name" : "mIndeterminate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnlyIndeterminate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransformation",
    "type" : "Transformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimation",
    "type" : "AlphaAnimation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAnimation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndeterminateDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentDrawable",
    "type" : "Drawable",
    "comment" : "\n     * Outside the framework, instead of accessing this directly, please use\n     * {@link #getCurrentDrawable()}, {@link #setProgressDrawable(Drawable)},\n     * {@link #setIndeterminateDrawable(Drawable)} and their tiled versions.\n     ",
    "links" : [ "#getCurrentDrawable", "#setProgressDrawable", "#setIndeterminateDrawable" ]
  }, {
    "name" : "mProgressTintInfo",
    "type" : "ProgressTintInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoInvalidate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefreshProgressRunnable",
    "type" : "RefreshProgressRunnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUiThreadId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldStartAnimationDrawable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInDrawing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttached",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefreshIsPosted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisualProgress",
    "type" : "float",
    "comment" : " Value used to track progress animation, in the range [0...1]. ",
    "links" : [ ]
  }, {
    "name" : "mMirrorForRtl",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAggregatedIsVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomStateDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefreshData",
    "type" : "ArrayList<RefreshData>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VISUAL_PROGRESS",
    "type" : "FloatProperty<ProgressBar>",
    "comment" : "\n     * Property wrapper around the visual state of the {@code progress} functionality\n     * handled by the {@link ProgressBar#setProgress(int, boolean)} method. This does\n     * not correspond directly to the actual progress -- only the visual state.\n     ",
    "links" : [ "ProgressBar#setProgress" ]
  } ],
  "methods" : [ {
    "name" : "public void setMinWidth(@Px int minWidth)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum width the progress bar can have.\n     * @param minWidth the minimum width to be set, in pixels\n     * @attr ref android.R.styleable#ProgressBar_minWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinWidth()",
    "returnType" : "int",
    "comment" : "\n     * @return the minimum width the progress bar can have, in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxWidth(@Px int maxWidth)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum width the progress bar can have.\n     * @param maxWidth the maximum width to be set, in pixels\n     * @attr ref android.R.styleable#ProgressBar_maxWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxWidth()",
    "returnType" : "int",
    "comment" : "\n     * @return the maximum width the progress bar can have, in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinHeight(@Px int minHeight)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum height the progress bar can have.\n     * @param minHeight the minimum height to be set, in pixels\n     * @attr ref android.R.styleable#ProgressBar_minHeight\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinHeight()",
    "returnType" : "int",
    "comment" : "\n     * @return the minimum height the progress bar can have, in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxHeight(@Px int maxHeight)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum height the progress bar can have.\n     * @param maxHeight the maximum height to be set, in pixels\n     * @attr ref android.R.styleable#ProgressBar_maxHeight\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxHeight()",
    "returnType" : "int",
    "comment" : "\n     * @return the maximum height the progress bar can have, in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean needsTileify(Drawable dr)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the target drawable needs to be tileified.\n     *\n     * @param dr the drawable to check\n     * @return {@code true} if the target drawable needs to be tileified,\n     *         {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable tileify(Drawable drawable, boolean clip)",
    "returnType" : "Drawable",
    "comment" : "\n     * Converts a drawable to a tiled version of itself. It will recursively\n     * traverse layer and state list drawables.\n     ",
    "links" : [ ]
  }, {
    "name" : " Shape getDrawableShape()",
    "returnType" : "Shape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable tileifyIndeterminate(Drawable drawable)",
    "returnType" : "Drawable",
    "comment" : "\n     * Convert a AnimationDrawable for use as a barberpole animation.\n     * Each frame of the animation is wrapped in a ClipDrawable and\n     * given a tiling BitmapShader.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initProgressBar()",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Initialize the progress bar's default values:\n     * </p>\n     * <ul>\n     * <li>progress = 0</li>\n     * <li>max = 100</li>\n     * <li>animation duration = 4000 ms</li>\n     * <li>indeterminate = false</li>\n     * <li>behavior = repeat</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isIndeterminate()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether this progress bar is in indeterminate mode.</p>\n     *\n     * @return true if the progress bar is in indeterminate mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setIndeterminate(boolean indeterminate)",
    "returnType" : "void",
    "comment" : "\n     * <p>Change the indeterminate mode for this progress bar. In indeterminate\n     * mode, the progress is ignored and the progress bar shows an infinite\n     * animation instead.</p>\n     *\n     * If this progress bar's style only supports indeterminate mode (such as the circular\n     * progress bars), then this will be ignored.\n     *\n     * @param indeterminate true to enable the indeterminate mode\n     ",
    "links" : [ ]
  }, {
    "name" : "private void swapCurrentDrawable(Drawable newDrawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getIndeterminateDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * <p>Get the drawable used to draw the progress bar in\n     * indeterminate mode.</p>\n     *\n     * @return a {@link android.graphics.drawable.Drawable} instance\n     *\n     * @see #setIndeterminateDrawable(android.graphics.drawable.Drawable)\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setIndeterminateDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Define the drawable used to draw the progress bar in indeterminate mode.\n     *\n     * <p>For the Drawable to animate, it must implement {@link Animatable}, or override\n     * {@link Drawable#onLevelChange(int)}.  A Drawable that implements Animatable will be animated\n     * via that interface and therefore provides the greatest amount of customization. A Drawable\n     * that only overrides onLevelChange(int) is animated directly by ProgressBar and only the\n     * animation {@link android.R.styleable#ProgressBar_indeterminateDuration duration},\n         * {@link android.R.styleable#ProgressBar_indeterminateBehavior repeating behavior}, and\n     * {@link #setInterpolator(Interpolator) interpolator} can be modified, and only before the\n     * indeterminate animation begins.\n     *\n     * @param d the new drawable\n     * @attr ref android.R.styleable#ProgressBar_indeterminateDrawable\n     * @see #getIndeterminateDrawable()\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ "Animatable", "Drawable#onLevelChange", "android.R.styleable#ProgressBar_indeterminateDuration", "android.R.styleable#ProgressBar_indeterminateBehavior", "#setInterpolator" ]
  }, {
    "name" : "public void setIndeterminateTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the indeterminate drawable. Does not modify the\n     * current tint mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setIndeterminateDrawable(Drawable)} will\n     * automatically mutate the drawable and apply the specified tint and\n     * tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#ProgressBar_indeterminateTint\n     * @see #getIndeterminateTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "PorterDuff.Mode#SRC_IN", "#setIndeterminateDrawable", "Drawable#setTintList" ]
  }, {
    "name" : "public ColorStateList getIndeterminateTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the indeterminate drawable\n     * @attr ref android.R.styleable#ProgressBar_indeterminateTint\n     * @see #setIndeterminateTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndeterminateTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setIndeterminateTintList(ColorStateList)} to the indeterminate\n     * drawable. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_indeterminateTintMode\n     * @see #setIndeterminateTintList(ColorStateList)\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     *\n     ",
    "links" : [ "#setIndeterminateTintList", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setIndeterminateTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setIndeterminateTintList(ColorStateList)} to the indeterminate\n     * drawable. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_indeterminateTintMode\n     * @see #setIndeterminateTintList(ColorStateList)\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setIndeterminateTintList", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getIndeterminateTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the indeterminate\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the indeterminate\n     *         drawable\n     * @attr ref android.R.styleable#ProgressBar_indeterminateTintMode\n     * @see #setIndeterminateTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getIndeterminateTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the indeterminate\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the indeterminate\n     *         drawable\n     * @attr ref android.R.styleable#ProgressBar_indeterminateTintMode\n     * @see #setIndeterminateTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyIndeterminateTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIndeterminateDrawableTiled(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Define the tileable drawable used to draw the progress bar in\n     * indeterminate mode.\n     * <p>\n     * If the drawable is a BitmapDrawable or contains BitmapDrawables, a\n     * tiled copy will be generated for display as a progress bar.\n     *\n     * @param d the new drawable\n     * @see #getIndeterminateDrawable()\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getProgressDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * <p>Get the drawable used to draw the progress bar in\n     * progress mode.</p>\n     *\n     * @return a {@link android.graphics.drawable.Drawable} instance\n     *\n     * @see #setProgressDrawable(android.graphics.drawable.Drawable)\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setProgressDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Define the drawable used to draw the progress bar in progress mode.\n     *\n     * @param d the new drawable\n     * @see #getProgressDrawable()\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getMirrorForRtl()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyProgressTints()",
    "returnType" : "void",
    "comment" : "\n     * Applies the progress tints in order of increasing specificity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyPrimaryProgressTint()",
    "returnType" : "void",
    "comment" : "\n     * Should only be called if we've already verified that mProgressDrawable\n     * and mProgressTintInfo are non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyProgressBackgroundTint()",
    "returnType" : "void",
    "comment" : "\n     * Should only be called if we've already verified that mProgressDrawable\n     * and mProgressTintInfo are non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applySecondaryProgressTint()",
    "returnType" : "void",
    "comment" : "\n     * Should only be called if we've already verified that mProgressDrawable\n     * and mProgressTintInfo are non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProgressTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the progress indicator, if one exists, or to the\n     * entire progress drawable otherwise. Does not modify the current tint\n     * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * The progress indicator should be specified as a layer with\n     * id {@link android.R.id#progress} in a {@link LayerDrawable}\n     * used as the progress drawable.\n     * <p>\n     * Subsequent calls to {@link #setProgressDrawable(Drawable)} will\n     * automatically mutate the drawable and apply the specified tint and\n     * tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#ProgressBar_progressTint\n     * @see #getProgressTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "PorterDuff.Mode#SRC_IN", "android.R.id#progress", "LayerDrawable", "#setProgressDrawable", "Drawable#setTintList" ]
  }, {
    "name" : "public ColorStateList getProgressTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the tint applied to the progress drawable, if specified.\n     *\n     * @return the tint applied to the progress drawable\n     * @attr ref android.R.styleable#ProgressBar_progressTint\n     * @see #setProgressTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProgressTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setProgressTintList(ColorStateList)}} to the progress\n     * indicator. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_progressTintMode\n     * @see #getProgressTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setProgressTintList", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setProgressTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setProgressTintList(ColorStateList)}} to the progress\n     * indicator. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_progressTintMode\n     * @see #getProgressTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setProgressTintList", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getProgressTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the progress\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the progress\n     *         drawable\n     * @attr ref android.R.styleable#ProgressBar_progressTintMode\n     * @see #setProgressTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getProgressTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the progress\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the progress\n     *         drawable\n     * @attr ref android.R.styleable#ProgressBar_progressTintMode\n     * @see #setProgressTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProgressBackgroundTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the progress background, if one exists. Does not\n     * modify the current tint mode, which is\n     * {@link PorterDuff.Mode#SRC_ATOP} by default.\n     * <p>\n     * The progress background must be specified as a layer with\n     * id {@link android.R.id#background} in a {@link LayerDrawable}\n     * used as the progress drawable.\n     * <p>\n     * Subsequent calls to {@link #setProgressDrawable(Drawable)} where the\n     * drawable contains a progress background will automatically mutate the\n     * drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#ProgressBar_progressBackgroundTint\n     * @see #getProgressBackgroundTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "PorterDuff.Mode#SRC_ATOP", "android.R.id#background", "LayerDrawable", "#setProgressDrawable", "Drawable#setTintList" ]
  }, {
    "name" : "public ColorStateList getProgressBackgroundTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the tint applied to the progress background, if specified.\n     *\n     * @return the tint applied to the progress background\n     * @attr ref android.R.styleable#ProgressBar_progressBackgroundTint\n     * @see #setProgressBackgroundTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProgressBackgroundTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setProgressBackgroundTintList(ColorStateList)}} to the progress\n     * background. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_progressBackgroundTintMode\n     * @see #setProgressBackgroundTintList(ColorStateList)\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setProgressBackgroundTintList", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setProgressBackgroundTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setProgressBackgroundTintList(ColorStateList)}} to the progress\n     * background. The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_progressBackgroundTintMode\n     * @see #setProgressBackgroundTintList(ColorStateList)\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setProgressBackgroundTintList", "BlendMode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getProgressBackgroundTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the progress\n     *         background\n     * @attr ref android.R.styleable#ProgressBar_progressBackgroundTintMode\n     * @see #setProgressBackgroundTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getProgressBackgroundTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the progress\n     *         background\n     * @attr ref android.R.styleable#ProgressBar_progressBackgroundTintMode\n     * @see #setProgressBackgroundTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecondaryProgressTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the secondary progress indicator, if one exists.\n     * Does not modify the current tint mode, which is\n     * {@link PorterDuff.Mode#SRC_ATOP} by default.\n     * <p>\n     * The secondary progress indicator must be specified as a layer with\n     * id {@link android.R.id#secondaryProgress} in a {@link LayerDrawable}\n     * used as the progress drawable.\n     * <p>\n     * Subsequent calls to {@link #setProgressDrawable(Drawable)} where the\n     * drawable contains a secondary progress indicator will automatically\n     * mutate the drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#ProgressBar_secondaryProgressTint\n     * @see #getSecondaryProgressTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "PorterDuff.Mode#SRC_ATOP", "android.R.id#secondaryProgress", "LayerDrawable", "#setProgressDrawable", "Drawable#setTintList" ]
  }, {
    "name" : "public ColorStateList getSecondaryProgressTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the tint applied to the secondary progress drawable, if\n     * specified.\n     *\n     * @return the tint applied to the secondary progress drawable\n     * @attr ref android.R.styleable#ProgressBar_secondaryProgressTint\n     * @see #setSecondaryProgressTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecondaryProgressTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setSecondaryProgressTintList(ColorStateList)}} to the secondary\n     * progress indicator. The default mode is\n     * {@link PorterDuff.Mode#SRC_ATOP}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_secondaryProgressTintMode\n     * @see #setSecondaryProgressTintList(ColorStateList)\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setSecondaryProgressTintList", "PorterDuff.Mode#SRC_ATOP" ]
  }, {
    "name" : "public void setSecondaryProgressTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setSecondaryProgressTintList(ColorStateList)}} to the secondary\n     * progress indicator. The default mode is\n     * {@link PorterDuff.Mode#SRC_ATOP}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ProgressBar_secondaryProgressTintMode\n     * @see #setSecondaryProgressTintList(ColorStateList)\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setSecondaryProgressTintList", "PorterDuff.Mode#SRC_ATOP" ]
  }, {
    "name" : "public PorterDuff.Mode getSecondaryProgressTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the secondary\n     * progress drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the secondary\n     *         progress drawable\n     * @attr ref android.R.styleable#ProgressBar_secondaryProgressTintMode\n     * @see #setSecondaryProgressTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getSecondaryProgressTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the secondary\n     * progress drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the secondary\n     *         progress drawable\n     * @attr ref android.R.styleable#ProgressBar_secondaryProgressTintMode\n     * @see #setSecondaryProgressTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getTintTarget(int layerId, boolean shouldFallback)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the drawable to which a tint or tint mode should be applied.\n     *\n     * @param layerId id of the layer to modify\n     * @param shouldFallback whether the base drawable should be returned\n     *                       if the id does not exist\n     * @return the drawable to modify\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProgressDrawableTiled(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Define the tileable drawable used to draw the progress bar in\n     * progress mode.\n     * <p>\n     * If the drawable is a BitmapDrawable or contains BitmapDrawables, a\n     * tiled copy will be generated for display as a progress bar.\n     *\n     * @param d the new drawable\n     * @see #getProgressDrawable()\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCurrentDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the drawable currently used to draw the progress bar. This will be\n     * either {@link #getProgressDrawable()} or {@link #getIndeterminateDrawable()}\n     * depending on whether the progress bar is in determinate or indeterminate mode.\n     *\n     * @return the drawable currently used to draw the progress bar\n     ",
    "links" : [ "#getProgressDrawable", "#getIndeterminateDrawable" ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onResolveDrawables(int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postInvalidate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void doRefreshProgress(int id, int progress, boolean fromUser, boolean callBackToApp, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getPercent(int progress)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence formatStateDescription(int progress)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Default percentage format of the state description based on progress, for example,\n     * \"50 percent\".\n     *\n     * @param progress the progress value, between {@link #getMin()} and {@link #getMax()}\n     * @return state description based on progress\n     ",
    "links" : [ "#getMin", "#getMax" ]
  }, {
    "name" : "public void setStateDescription(@Nullable CharSequence stateDescription)",
    "returnType" : "void",
    "comment" : "\n     * This function is called when an instance or subclass sets the state description. Once this\n     * is called and the argument is not null, the app developer will be responsible for updating\n     * state description when progress changes and the default state description will not be used.\n     * App developers can restore the default behavior by setting the argument to null. If set\n     * progress is called first and then setStateDescription is called, two state change events\n     * will be merged by event throttling and we can still get the correct state description.\n     *\n     * @param stateDescription The state description.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onProgressRefresh(float scale, boolean fromUser, int progress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setVisualProgress(int id, float progress)",
    "returnType" : "void",
    "comment" : "\n     * Sets the visual state of a progress indicator.\n     *\n     * @param id the identifier of the progress indicator\n     * @param progress the visual progress in the range [0...1]\n     ",
    "links" : [ ]
  }, {
    "name" : " void onVisualProgressChanged(int id, float progress)",
    "returnType" : "void",
    "comment" : "\n     * Called when the visual state of a progress indicator changes.\n     *\n     * @param id the identifier of the progress indicator\n     * @param progress the visual progress in the range [0...1]\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void refreshProgress(int id, int progress, boolean fromUser, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setProgress(int progress)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current progress to the specified value. Does not do anything\n     * if the progress bar is in indeterminate mode.\n     * <p>\n     * This method will immediately update the visual position of the progress\n     * indicator. To animate the visual position to the target value, use\n     * {@link #setProgress(int, boolean)}}.\n     *\n     * @param progress the new progress, between {@link #getMin()} and {@link #getMax()}\n     *\n     * @see #setIndeterminate(boolean)\n     * @see #isIndeterminate()\n     * @see #getProgress()\n     * @see #incrementProgressBy(int)\n     ",
    "links" : [ "#setProgress", "#getMin", "#getMax" ]
  }, {
    "name" : "public void setProgress(int progress, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current progress to the specified value, optionally animating\n     * the visual position between the current and target values.\n     * <p>\n     * Animation does not affect the result of {@link #getProgress()}, which\n     * will return the target value immediately after this method is called.\n     *\n     * @param progress the new progress value, between {@link #getMin()} and {@link #getMax()}\n     * @param animate {@code true} to animate between the current and target\n     *                values or {@code false} to not animate\n     ",
    "links" : [ "#getProgress", "#getMin", "#getMax" ]
  }, {
    "name" : " synchronized boolean setProgressInternal(int progress, boolean fromUser, boolean animate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSecondaryProgress(int secondaryProgress)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Set the current secondary progress to the specified value. Does not do\n     * anything if the progress bar is in indeterminate mode.\n     * </p>\n     *\n     * @param secondaryProgress the new secondary progress, between {@link #getMin()} and\n     * {@link #getMax()}\n     * @see #setIndeterminate(boolean)\n     * @see #isIndeterminate()\n     * @see #getSecondaryProgress()\n     * @see #incrementSecondaryProgressBy(int)\n     ",
    "links" : [ "#getMin", "#getMax" ]
  }, {
    "name" : "public synchronized int getProgress()",
    "returnType" : "int",
    "comment" : "\n     * <p>Get the progress bar's current level of progress. Return 0 when the\n     * progress bar is in indeterminate mode.</p>\n     *\n     * @return the current progress, between {@link #getMin()} and {@link #getMax()}\n     *\n     * @see #setIndeterminate(boolean)\n     * @see #isIndeterminate()\n     * @see #setProgress(int)\n     * @see #setMax(int)\n     * @see #getMax()\n     ",
    "links" : [ "#getMin", "#getMax" ]
  }, {
    "name" : "public synchronized int getSecondaryProgress()",
    "returnType" : "int",
    "comment" : "\n     * <p>Get the progress bar's current level of secondary progress. Return 0 when the\n     * progress bar is in indeterminate mode.</p>\n     *\n     * @return the current secondary progress, between {@link #getMin()} and {@link #getMax()}\n     *\n     * @see #setIndeterminate(boolean)\n     * @see #isIndeterminate()\n     * @see #setSecondaryProgress(int)\n     * @see #setMax(int)\n     * @see #getMax()\n     ",
    "links" : [ "#getMin", "#getMax" ]
  }, {
    "name" : "public synchronized int getMin()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return the lower limit of this progress bar's range.</p>\n     *\n     * @return a positive integer\n     *\n     * @see #setMin(int)\n     * @see #getProgress()\n     * @see #getSecondaryProgress()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getMax()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return the upper limit of this progress bar's range.</p>\n     *\n     * @return a positive integer\n     *\n     * @see #setMax(int)\n     * @see #getProgress()\n     * @see #getSecondaryProgress()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setMin(int min)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the lower range of the progress bar to <tt>min</tt>.</p>\n     *\n     * @param min the lower range of this progress bar\n     *\n     * @see #getMin()\n     * @see #setProgress(int)\n     * @see #setSecondaryProgress(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setMax(int max)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the upper range of the progress bar <tt>max</tt>.</p>\n     *\n     * @param max the upper range of this progress bar\n     *\n     * @see #getMax()\n     * @see #setProgress(int)\n     * @see #setSecondaryProgress(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized void incrementProgressBy(int diff)",
    "returnType" : "void",
    "comment" : "\n     * <p>Increase the progress bar's progress by the specified amount.</p>\n     *\n     * @param diff the amount by which the progress must be increased\n     *\n     * @see #setProgress(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized void incrementSecondaryProgressBy(int diff)",
    "returnType" : "void",
    "comment" : "\n     * <p>Increase the progress bar's secondary progress by the specified amount.</p>\n     *\n     * @param diff the amount by which the secondary progress must be increased\n     *\n     * @see #setSecondaryProgress(int)\n     ",
    "links" : [ ]
  }, {
    "name" : " void startAnimation()",
    "returnType" : "void",
    "comment" : "\n     * <p>Start the indeterminate progress animation.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : " void stopAnimation()",
    "returnType" : "void",
    "comment" : "\n     * <p>Stop the indeterminate progress animation.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInterpolator(Context context, @InterpolatorRes int resID)",
    "returnType" : "void",
    "comment" : "\n     * Sets the acceleration curve for the indeterminate animation.\n     *\n     * <p>The interpolator is loaded as a resource from the specified context. Defaults to a linear\n     * interpolation.\n     *\n     * <p>The interpolator only affects the indeterminate animation if the\n     * {@link #setIndeterminateDrawable(Drawable) supplied indeterminate drawable} does not\n     * implement {@link Animatable}.\n     *\n     * <p>This call must be made before the indeterminate animation starts for it to have an affect.\n     *\n     * @param context The application environment\n     * @param resID The resource identifier of the interpolator to load\n     * @attr ref android.R.styleable#ProgressBar_interpolator\n     * @see #setInterpolator(Interpolator)\n     * @see #getInterpolator()\n     ",
    "links" : [ "#setIndeterminateDrawable", "Animatable" ]
  }, {
    "name" : "public void setInterpolator(Interpolator interpolator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the acceleration curve for the indeterminate animation.\n     * Defaults to a linear interpolation.\n     *\n     * <p>The interpolator only affects the indeterminate animation if the\n     * {@link #setIndeterminateDrawable(Drawable) supplied indeterminate drawable} does not\n     * implement {@link Animatable}.\n     *\n     * <p>This call must be made before the indeterminate animation starts for it to have\n     * an affect.\n     *\n     * @param interpolator The interpolator which defines the acceleration curve\n     * @attr ref android.R.styleable#ProgressBar_interpolator\n     * @see #setInterpolator(Context, int)\n     * @see #getInterpolator()\n     ",
    "links" : [ "#setIndeterminateDrawable", "Animatable" ]
  }, {
    "name" : "public Interpolator getInterpolator()",
    "returnType" : "Interpolator",
    "comment" : "\n     * Gets the acceleration curve type for the indeterminate animation.\n     *\n     * @return the {@link Interpolator} associated to this animation\n     * @attr ref android.R.styleable#ProgressBar_interpolator\n     * @see #setInterpolator(Context, int)\n     * @see #setInterpolator(Interpolator)\n     ",
    "links" : [ "Interpolator" ]
  }, {
    "name" : "public void onVisibilityAggregated(boolean isVisible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable dr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDrawableBounds(int w, int h)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void drawTrack(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draws the progress bar track.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDrawableState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnimating()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the ProgressBar is animating or not. This is essentially the same\n     * as whether the ProgressBar is {@link #isIndeterminate() indeterminate} and visible,\n     * as indeterminate ProgressBars are always animating, and non-indeterminate\n     * ProgressBars are not animating.\n     *\n     * @return true if the ProgressBar is animating, false otherwise.\n     ",
    "links" : [ "#isIndeterminate" ]
  } ],
  "variableNames" : [ "MAX_LEVEL", "PROGRESS_ANIM_INTERPOLATOR", "PROGRESS_ANIM_DURATION", "mMinWidth", "mMaxWidth", "mMinHeight", "mMaxHeight", "mProgress", "mSecondaryProgress", "mMin", "mMinInitialized", "mMax", "mMaxInitialized", "mBehavior", "mDuration", "mIndeterminate", "mOnlyIndeterminate", "mTransformation", "mAnimation", "mHasAnimation", "mIndeterminateDrawable", "mProgressDrawable", "mCurrentDrawable", "mProgressTintInfo", "mSampleWidth", "mNoInvalidate", "mInterpolator", "mRefreshProgressRunnable", "mUiThreadId", "mShouldStartAnimationDrawable", "mInDrawing", "mAttached", "mRefreshIsPosted", "mVisualProgress", "mMirrorForRtl", "mAggregatedIsVisible", "mCustomStateDescription", "mRefreshData", "VISUAL_PROGRESS" ],
  "methodNames" : [ "public void setMinWidth(@Px int minWidth)", "public int getMinWidth()", "public void setMaxWidth(@Px int maxWidth)", "public int getMaxWidth()", "public void setMinHeight(@Px int minHeight)", "public int getMinHeight()", "public void setMaxHeight(@Px int maxHeight)", "public int getMaxHeight()", "private static boolean needsTileify(Drawable dr)", "private Drawable tileify(Drawable drawable, boolean clip)", " Shape getDrawableShape()", "private Drawable tileifyIndeterminate(Drawable drawable)", "private void initProgressBar()", "public synchronized boolean isIndeterminate()", "public synchronized void setIndeterminate(boolean indeterminate)", "private void swapCurrentDrawable(Drawable newDrawable)", "public Drawable getIndeterminateDrawable()", "public void setIndeterminateDrawable(Drawable d)", "public void setIndeterminateTintList(@Nullable ColorStateList tint)", "public ColorStateList getIndeterminateTintList()", "public void setIndeterminateTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setIndeterminateTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getIndeterminateTintMode()", "public BlendMode getIndeterminateTintBlendMode()", "private void applyIndeterminateTint()", "public void setIndeterminateDrawableTiled(Drawable d)", "public Drawable getProgressDrawable()", "public void setProgressDrawable(Drawable d)", "public boolean getMirrorForRtl()", "private void applyProgressTints()", "private void applyPrimaryProgressTint()", "private void applyProgressBackgroundTint()", "private void applySecondaryProgressTint()", "public void setProgressTintList(@Nullable ColorStateList tint)", "public ColorStateList getProgressTintList()", "public void setProgressTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setProgressTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getProgressTintMode()", "public BlendMode getProgressTintBlendMode()", "public void setProgressBackgroundTintList(@Nullable ColorStateList tint)", "public ColorStateList getProgressBackgroundTintList()", "public void setProgressBackgroundTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setProgressBackgroundTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getProgressBackgroundTintMode()", "public BlendMode getProgressBackgroundTintBlendMode()", "public void setSecondaryProgressTintList(@Nullable ColorStateList tint)", "public ColorStateList getSecondaryProgressTintList()", "public void setSecondaryProgressTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setSecondaryProgressTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getSecondaryProgressTintMode()", "public BlendMode getSecondaryProgressTintBlendMode()", "private Drawable getTintTarget(int layerId, boolean shouldFallback)", "public void setProgressDrawableTiled(Drawable d)", "public Drawable getCurrentDrawable()", "protected boolean verifyDrawable(@NonNull Drawable who)", "public void jumpDrawablesToCurrentState()", "public void onResolveDrawables(int layoutDirection)", "public void postInvalidate()", "private synchronized void doRefreshProgress(int id, int progress, boolean fromUser, boolean callBackToApp, boolean animate)", "private float getPercent(int progress)", "private CharSequence formatStateDescription(int progress)", "public void setStateDescription(@Nullable CharSequence stateDescription)", " void onProgressRefresh(float scale, boolean fromUser, int progress)", "private void setVisualProgress(int id, float progress)", " void onVisualProgressChanged(int id, float progress)", "private synchronized void refreshProgress(int id, int progress, boolean fromUser, boolean animate)", "public synchronized void setProgress(int progress)", "public void setProgress(int progress, boolean animate)", " synchronized boolean setProgressInternal(int progress, boolean fromUser, boolean animate)", "public synchronized void setSecondaryProgress(int secondaryProgress)", "public synchronized int getProgress()", "public synchronized int getSecondaryProgress()", "public synchronized int getMin()", "public synchronized int getMax()", "public synchronized void setMin(int min)", "public synchronized void setMax(int max)", "public final synchronized void incrementProgressBy(int diff)", "public final synchronized void incrementSecondaryProgressBy(int diff)", " void startAnimation()", " void stopAnimation()", "public void setInterpolator(Context context, @InterpolatorRes int resID)", "public void setInterpolator(Interpolator interpolator)", "public Interpolator getInterpolator()", "public void onVisibilityAggregated(boolean isVisible)", "public void invalidateDrawable(@NonNull Drawable dr)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "private void updateDrawableBounds(int w, int h)", "protected synchronized void onDraw(Canvas canvas)", " void drawTrack(Canvas canvas)", "protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void drawableStateChanged()", "private void updateDrawableState()", "public void drawableHotspotChanged(float x, float y)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)", "public boolean isAnimating()" ]
}