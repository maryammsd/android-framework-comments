{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/CookieManager.java",
  "packageName" : "android.webkit",
  "className" : "CookieManager",
  "comment" : "\n * Manages the cookies used by an application's {@link WebView} instances.\n * <p>\n * CookieManager represents cookies as strings in the same format as the\n * HTTP {@code Cookie} and {@code Set-Cookie} header fields (defined in\n * <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03\">RFC6265bis</a>).\n ",
  "links" : [ "android.webkit.WebView" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static CookieManager getInstance()",
    "returnType" : "CookieManager",
    "comment" : "\n     * Gets the singleton CookieManager instance.\n     *\n     * @return the singleton CookieManager instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAcceptCookie(boolean accept)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the application's {@link WebView} instances should send and\n     * accept cookies.\n     * By default this is set to {@code true} and the WebView accepts cookies.\n     * <p>\n     * When this is {@code true}\n     * {@link CookieManager#setAcceptThirdPartyCookies setAcceptThirdPartyCookies} and\n     * {@link CookieManager#setAcceptFileSchemeCookies setAcceptFileSchemeCookies}\n     * can be used to control the policy for those specific types of cookie.\n     *\n     * @param accept whether {@link WebView} instances should send and accept\n     *               cookies\n     ",
    "links" : [ "android.webkit.CookieManager#setAcceptThirdPartyCookies", "android.webkit.CookieManager#setAcceptFileSchemeCookies", "android.webkit.WebView" ]
  }, {
    "name" : "public abstract boolean acceptCookie()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the application's {@link WebView} instances send and accept\n     * cookies.\n     *\n     * @return {@code true} if {@link WebView} instances send and accept cookies\n     ",
    "links" : [ "android.webkit.WebView" ]
  }, {
    "name" : "public abstract void setAcceptThirdPartyCookies(WebView webview, boolean accept)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the {@link WebView} should allow third party cookies to be set.\n     * Allowing third party cookies is a per WebView policy and can be set\n     * differently on different WebView instances.\n     * <p>\n     * Apps that target {@link android.os.Build.VERSION_CODES#KITKAT} or below\n     * default to allowing third party cookies. Apps targeting\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP} or later default to disallowing\n     * third party cookies.\n     *\n     * @param webview the {@link WebView} instance to set the cookie policy on\n     * @param accept whether the {@link WebView} instance should accept\n     *               third party cookies\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP", "android.webkit.WebView", "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public abstract boolean acceptThirdPartyCookies(WebView webview)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the {@link WebView} should allow third party cookies to be set.\n     *\n     * @param webview the {@link WebView} instance to get the cookie policy for\n     * @return {@code true} if the {@link WebView} accepts third party cookies\n     ",
    "links" : [ "android.webkit.WebView" ]
  }, {
    "name" : "public abstract void setCookie(String url, String value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a single cookie (key-value pair) for the given URL. Any existing cookie with the same\n     * host, path and name will be replaced with the new cookie. The cookie being set\n     * will be ignored if it is expired. To set multiple cookies, your application should invoke\n     * this method multiple times.\n     *\n     * <p>The {@code value} parameter must follow the format of the {@code Set-Cookie} HTTP response\n     * header. This is a key-value pair of the form {@code \"key=value\"}, optionally followed by a\n     * list of cookie attributes delimited with semicolons (ex. {@code \"key=value; Max-Age=123\"}).\n     * For the header format and attributes supported by WebView, see the <a href=\n     * \"https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie\">{@code Set-Cookie}\n     * documentation on MDN</a>.\n     *\n     * <p class=\"note\">\n     * <b>Notes:</b>\n     * <ul>\n     * <li>If specifying a {@code value} containing the {@code \"Secure\"} attribute,\n     * {@code url} must use the {@code \"https://\"} scheme.</li>\n     * <li>if specifying a {@code value} containing the {@code \"Partitioned\"}\n     * attribute, the cookie will be set for the top-level partition of the\n     * {@code url}.</li>\n     * </ul>\n     *\n     * @param url the URL for which the cookie is to be set\n     * @param value the cookie as a string, using the format of the 'Set-Cookie'\n     *              HTTP response header\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setCookie(String url, String value, @Nullable ValueCallback<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a single cookie (key-value pair) for the given URL. Any existing cookie with the same\n     * host, path and name will be replaced with the new cookie. The cookie being set\n     * will be ignored if it is expired. To set multiple cookies, your application should invoke\n     * this method multiple times.\n     *\n     * <p>The {@code value} parameter must follow the format of the {@code Set-Cookie} HTTP response\n     * header. This is a key-value pair of the form {@code \"key=value\"}, optionally followed by a\n     * list of cookie attributes delimited with semicolons (ex. {@code \"key=value; Max-Age=123\"}).\n     * For the header format and attributes supported by WebView, see the <a href=\n     * \"https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie\">{@code Set-Cookie}\n     * documentation on MDN</a>.\n     *\n     * <p>This method is asynchronous. If a {@link ValueCallback} is provided,\n     * {@link ValueCallback#onReceiveValue} will be called on the current\n     * thread's {@link android.os.Looper} once the operation is complete.\n     * The value provided to the callback indicates whether the cookie was set successfully.\n     * You can pass {@code null} as the callback if you don't need to know when the operation\n     * completes or whether it succeeded, and in this case it is safe to call the method from a\n     * thread without a Looper.\n     *\n     * <p class=\"note\">\n     * <b>Notes:</b>\n     * <ul>\n     * <li>If specifying a {@code value} containing the {@code \"Secure\"} attribute,\n     * {@code url} must use the {@code \"https://\"} scheme.</li>\n     * <li>if specifying a {@code value} containing the {@code \"Partitioned\"}\n     * attribute, the cookie will be set for the top-level partition of the\n     * {@code url}.</li>\n     * </ul>\n     *\n     * @param url the URL for which the cookie is to be set\n     * @param value the cookie as a string, using the format of the 'Set-Cookie'\n     *              HTTP response header\n     * @param callback a callback to be executed when the cookie has been set\n     ",
    "links" : [ "android.webkit.ValueCallback", "android.os.Looper", "android.webkit.ValueCallback#onReceiveValue" ]
  }, {
    "name" : "public abstract String getCookie(String url)",
    "returnType" : "String",
    "comment" : "\n     * Gets all the cookies for the given URL. This may return multiple key-value pairs if multiple\n     * cookies are associated with this URL, in which case each cookie will be delimited by {@code\n     * \"; \"} characters (semicolon followed by a space). Each key-value pair will be of the form\n     * {@code \"key=value\"}.\n     *\n     * <p class=\"note\">\n     * <b>Note:</b> Any cookies set with the {@code \"Partitioned\"} attribute will only be returned\n     * for the top-level partition of {@code url}.\n     *\n     * @param url the URL for which the cookies are requested\n     * @return value the cookies as a string, using the format of the 'Cookie'\n     *               HTTP request header\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getCookie(String url, boolean privateBrowsing)",
    "returnType" : "String",
    "comment" : "\n     * See {@link #getCookie(String)}.\n     *\n     * @param url the URL for which the cookies are requested\n     * @param privateBrowsing whether to use the private browsing cookie jar\n     * @return value the cookies as a string, using the format of the 'Cookie'\n     *               HTTP request header\n     * @hide Used by Browser and by WebViewProvider implementations.\n     ",
    "links" : [ "#getCookie(String)" ]
  }, {
    "name" : "public synchronized String getCookie(WebAddress uri)",
    "returnType" : "String",
    "comment" : "\n     * Gets cookie(s) for a given uri so that it can be set to \"cookie:\" in http\n     * request header.\n     *\n     * @param uri the WebAddress for which the cookies are requested\n     * @return value the cookies as a string, using the format of the 'Cookie'\n     *               HTTP request header\n     * @hide Used by RequestHandle and by WebViewProvider implementations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeSessionCookie()",
    "returnType" : "void",
    "comment" : "\n     * Removes all session cookies, which are cookies without an expiration\n     * date.\n     * @deprecated use {@link #removeSessionCookies(ValueCallback)} instead.\n     ",
    "links" : [ "#removeSessionCookies(ValueCallback)" ]
  }, {
    "name" : "public abstract void removeSessionCookies(@Nullable ValueCallback<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes all session cookies, which are cookies without an expiration\n     * date.\n     * <p>\n     * This method is asynchronous.\n     * If a {@link ValueCallback} is provided,\n     * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current\n     * thread's {@link android.os.Looper} once the operation is complete.\n     * The value provided to the callback indicates whether any cookies were removed.\n     * You can pass {@code null} as the callback if you don't need to know when the operation\n     * completes or whether any cookie were removed, and in this case it is safe to call the\n     * method from a thread without a Looper.\n     * @param callback a callback which is executed when the session cookies have been removed\n     ",
    "links" : [ "android.webkit.ValueCallback", "android.os.Looper", "android.webkit.ValueCallback#onReceiveValue(T)" ]
  }, {
    "name" : "public abstract void removeAllCookie()",
    "returnType" : "void",
    "comment" : "\n     * Removes all cookies.\n     * @deprecated Use {@link #removeAllCookies(ValueCallback)} instead.\n     ",
    "links" : [ "#removeAllCookies(ValueCallback)" ]
  }, {
    "name" : "public abstract void removeAllCookies(@Nullable ValueCallback<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes all cookies.\n     * <p>\n     * This method is asynchronous.\n     * If a {@link ValueCallback} is provided,\n     * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current\n     * thread's {@link android.os.Looper} once the operation is complete.\n     * The value provided to the callback indicates whether any cookies were removed.\n     * You can pass {@code null} as the callback if you don't need to know when the operation\n     * completes or whether any cookies were removed, and in this case it is safe to call the\n     * method from a thread without a Looper.\n     * @param callback a callback which is executed when the cookies have been removed\n     ",
    "links" : [ "android.webkit.ValueCallback", "android.os.Looper", "android.webkit.ValueCallback#onReceiveValue(T)" ]
  }, {
    "name" : "public abstract boolean hasCookies()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether there are stored cookies.\n     *\n     * @return {@code true} if there are stored cookies\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasCookies(boolean privateBrowsing)",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link #hasCookies()}.\n     *\n     * @param privateBrowsing whether to use the private browsing cookie jar\n     * @hide Used by Browser and WebViewProvider implementations.\n     ",
    "links" : [ "#hasCookies()" ]
  }, {
    "name" : "public abstract void removeExpiredCookie()",
    "returnType" : "void",
    "comment" : "\n     * Removes all expired cookies.\n     * @deprecated The WebView handles removing expired cookies automatically.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void flush()",
    "returnType" : "void",
    "comment" : "\n     * Ensures all cookies currently accessible through the getCookie API are\n     * written to persistent storage.\n     * This call will block the caller until it is done and may perform I/O.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean allowFileSchemeCookies()",
    "returnType" : "boolean",
    "comment" : " Static for backward compatibility.",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean allowFileSchemeCookiesImpl()",
    "returnType" : "boolean",
    "comment" : "\n     * Implements {@link #allowFileSchemeCookies()}.\n     *\n     * @hide Only for use by WebViewProvider implementations\n     ",
    "links" : [ "#allowFileSchemeCookies()" ]
  }, {
    "name" : "public static void setAcceptFileSchemeCookies(boolean accept)",
    "returnType" : "void",
    "comment" : " Static for backward compatibility.",
    "links" : [ ]
  }, {
    "name" : "protected abstract void setAcceptFileSchemeCookiesImpl(boolean accept)",
    "returnType" : "void",
    "comment" : "\n     * Implements {@link #setAcceptFileSchemeCookies(boolean)}.\n     *\n     * @hide Only for use by WebViewProvider implementations\n     ",
    "links" : [ "#setAcceptFileSchemeCookies(boolean)" ]
  } ],
  "methodNames" : [ "protected Object clone() throws CloneNotSupportedException", "public static CookieManager getInstance()", "public abstract void setAcceptCookie(boolean accept)", "public abstract boolean acceptCookie()", "public abstract void setAcceptThirdPartyCookies(WebView webview, boolean accept)", "public abstract boolean acceptThirdPartyCookies(WebView webview)", "public abstract void setCookie(String url, String value)", "public abstract void setCookie(String url, String value, @Nullable ValueCallback<Boolean> callback)", "public abstract String getCookie(String url)", "public abstract String getCookie(String url, boolean privateBrowsing)", "public synchronized String getCookie(WebAddress uri)", "public abstract void removeSessionCookie()", "public abstract void removeSessionCookies(@Nullable ValueCallback<Boolean> callback)", "public abstract void removeAllCookie()", "public abstract void removeAllCookies(@Nullable ValueCallback<Boolean> callback)", "public abstract boolean hasCookies()", "public abstract boolean hasCookies(boolean privateBrowsing)", "public abstract void removeExpiredCookie()", "public abstract void flush()", "public static boolean allowFileSchemeCookies()", "protected abstract boolean allowFileSchemeCookiesImpl()", "public static void setAcceptFileSchemeCookies(boolean accept)", "protected abstract void setAcceptFileSchemeCookiesImpl(boolean accept)" ],
  "variableNames" : [ ]
}