{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeCallControl.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeCallControl",
  "comment" : "\n * This class provides the APIs to control the Call Control profile.\n *\n * <p>This class provides Bluetooth Telephone Bearer Service functionality, allowing applications to\n * expose a GATT Service based interface to control the state of the calls by remote devices such as\n * LE audio devices.\n *\n * <p>BluetoothLeCallControl is a proxy object for controlling the Bluetooth Telephone Bearer\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothLeCallControl\n * proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Opcode write was successful.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_UNKNOWN_CALL_ID",
    "type" : "int",
    "comment" : "\n     * Unknown call Id has been used in the operation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_URI",
    "type" : "int",
    "comment" : "\n     * The URI provided in {@link Callback#onPlaceCallRequest} is invalid.\n     *\n     * @hide\n     ",
    "links" : [ "#onPlaceCallRequest" ]
  }, {
    "name" : "RESULT_ERROR_APPLICATION",
    "type" : "int",
    "comment" : "\n     * Application internal error.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_INVALID_URI",
    "type" : "int",
    "comment" : "\n     * Remote Caller ID value used to place a call was formed improperly.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_FAIL",
    "type" : "int",
    "comment" : "\n     * Call fail.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_REMOTE_HANGUP",
    "type" : "int",
    "comment" : "\n     * Remote party ended call.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_SERVER_HANGUP",
    "type" : "int",
    "comment" : "\n     * Call ended from the server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_LINE_BUSY",
    "type" : "int",
    "comment" : "\n     * Line busy.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_NETWORK_CONGESTION",
    "type" : "int",
    "comment" : "\n     * Network congestion.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_CLIENT_HANGUP",
    "type" : "int",
    "comment" : "\n     * Client terminated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_NO_SERVICE",
    "type" : "int",
    "comment" : "\n     * No service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINATION_REASON_NO_ANSWER",
    "type" : "int",
    "comment" : "\n     * No answer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_HOLD_CALL",
    "type" : "int",
    "comment" : "\n     * Flag indicating support for hold/unhold call feature.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_JOIN_CALLS",
    "type" : "int",
    "comment" : "\n     * Flag indicating support for joining calls feature.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCcid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothLeCallControl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothLeCallControl getService()",
    "returnType" : "IBluetoothLeCallControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@Nullable BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Not supported\n     *\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported\n     *\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported\n     *\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerBearer(@Nullable String uci, @NonNull List<String> uriSchemes, int capabilities, @NonNull String provider, int technology, @NonNull Executor executor, @NonNull Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Register Telephone Bearer exposing the interface that allows remote devices to track and\n     * control the call states.\n     *\n     * <p>This is an asynchronous call. The callback is used to notify success or failure if the\n     * function returns true.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     * <!-- The UCI is a String identifier of the telephone bearer as defined at\n     * https://www.bluetooth.com/specifications/assigned-numbers/uniform-caller-identifiers\n     * (login required). -->\n     * <!-- The examples of common URI schemes can be found in\n     * https://iana.org/assignments/uri-schemes/uri-schemes.xhtml -->\n     * <!-- The Technology is an integer value. The possible values are defined at\n     * https://www.bluetooth.com/specifications/assigned-numbers (login required).\n     * -->\n     *\n     * @param uci Bearer Unique Client Identifier\n     * @param uriSchemes URI Schemes supported list\n     * @param capabilities bearer capabilities\n     * @param provider Network provider name\n     * @param technology Network technology\n     * @param executor {@link Executor} object on which callback will be executed. The Executor\n     *     object is required.\n     * @param callback {@link Callback} object to which callback messages will be sent. The Callback\n     *     object is required.\n     * @return true on success, false otherwise\n     * @hide\n     ",
    "links" : [ "Callback", "java.util.concurrent.Executor", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void unregisterBearer()",
    "returnType" : "void",
    "comment" : "\n     * Unregister Telephone Bearer Service and destroy all the associated data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentControlId()",
    "returnType" : "int",
    "comment" : "\n     * Get the Content Control ID (CCID) value.\n     *\n     * @return ccid Content Control ID value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCallAdded(@NonNull BluetoothLeCall call)",
    "returnType" : "void",
    "comment" : "\n     * Notify about the newly added call.\n     *\n     * <p>This shall be called as early as possible after the call has been added.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param call Newly added call\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void onCallRemoved(@NonNull UUID callId, @TerminationReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Notify about the removed call.\n     *\n     * <p>This shall be called as early as possible after the call has been removed.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param callId The Id of a call that has been removed\n     * @param reason Call termination reason\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void onCallStateChanged(@NonNull UUID callId, @BluetoothLeCall.State int state)",
    "returnType" : "void",
    "comment" : "\n     * Notify the call state change\n     *\n     * <p>This shall be called as early as possible after the state of the call has changed.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param callId The call Id that state has been changed\n     * @param state Call state\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void currentCallsList(@NonNull List<BluetoothLeCall> calls)",
    "returnType" : "void",
    "comment" : "\n     * Provide the current calls list\n     *\n     * <p>This function must be invoked after registration if application has any calls.\n     *\n     * @param calls current calls list\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void networkStateChanged(@NonNull String provider, int technology)",
    "returnType" : "void",
    "comment" : "\n     * Provide the network current status\n     *\n     * <p>This function must be invoked on change of network state.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     * <!-- The Technology is an integer value. The possible values are defined at\n     * https://www.bluetooth.com/specifications/assigned-numbers (login required).\n     * -->\n     *\n     * @param provider Network provider name\n     * @param technology Network technology\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void requestResult(int requestId, @Result int result)",
    "returnType" : "void",
    "comment" : "\n     * Send a response to a call control request to a remote device.\n     *\n     * <p>This function must be invoked in when a request is received by one of these callback\n     * methods:\n     *\n     * <ul>\n     *   <li>{@link Callback#onAcceptCall}\n     *   <li>{@link Callback#onTerminateCall}\n     *   <li>{@link Callback#onHoldCall}\n     *   <li>{@link Callback#onUnholdCall}\n     *   <li>{@link Callback#onPlaceCall}\n     *   <li>{@link Callback#onJoinCalls}\n     * </ul>\n     *\n     * @param requestId The ID of the request that was received with the callback\n     * @param result The result of the request to be sent to the remote devices\n     ",
    "links" : [ "#onUnholdCall", "#onJoinCalls", "#onAcceptCall", "#onHoldCall", "#onPlaceCall", "#onTerminateCall" ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothLeCallControl getService()", "public BluetoothAdapter getAdapter()", "public int getConnectionState(@Nullable BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public boolean registerBearer(@Nullable String uci, @NonNull List<String> uriSchemes, int capabilities, @NonNull String provider, int technology, @NonNull Executor executor, @NonNull Callback callback)", "public void unregisterBearer()", "public int getContentControlId()", "public void onCallAdded(@NonNull BluetoothLeCall call)", "public void onCallRemoved(@NonNull UUID callId, @TerminationReason int reason)", "public void onCallStateChanged(@NonNull UUID callId, @BluetoothLeCall.State int state)", "public void currentCallsList(@NonNull List<BluetoothLeCall> calls)", "public void networkStateChanged(@NonNull String provider, int technology)", "public void requestResult(int requestId, @Result int result)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "RESULT_SUCCESS", "RESULT_ERROR_UNKNOWN_CALL_ID", "RESULT_ERROR_INVALID_URI", "RESULT_ERROR_APPLICATION", "TERMINATION_REASON_INVALID_URI", "TERMINATION_REASON_FAIL", "TERMINATION_REASON_REMOTE_HANGUP", "TERMINATION_REASON_SERVER_HANGUP", "TERMINATION_REASON_LINE_BUSY", "TERMINATION_REASON_NETWORK_CONGESTION", "TERMINATION_REASON_CLIENT_HANGUP", "TERMINATION_REASON_NO_SERVICE", "TERMINATION_REASON_NO_ANSWER", "CAPABILITY_HOLD_CALL", "CAPABILITY_JOIN_CALLS", "mAdapter", "mAttributionSource", "mCcid", "mToken", "mCallback", "mService" ]
}