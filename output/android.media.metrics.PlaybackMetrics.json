{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/metrics/PlaybackMetrics.java",
  "packageName" : "android.media.metrics",
  "className" : "PlaybackMetrics",
  "comment" : "\n * This class is used to store playback data.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "STREAM_SOURCE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown stream source. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_SOURCE_NETWORK",
    "type" : "int",
    "comment" : " Stream from network. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_SOURCE_DEVICE",
    "type" : "int",
    "comment" : " Stream from device. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_SOURCE_MIXED",
    "type" : "int",
    "comment" : " Stream from more than one sources. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown stream type. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_OTHER",
    "type" : "int",
    "comment" : " Other stream type. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_PROGRESSIVE",
    "type" : "int",
    "comment" : " Progressive stream type. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_DASH",
    "type" : "int",
    "comment" : " DASH (Dynamic Adaptive Streaming over HTTP) stream type. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_HLS",
    "type" : "int",
    "comment" : " HLS (HTTP Live Streaming) stream type. ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_SS",
    "type" : "int",
    "comment" : " SS (HTTP Smooth Streaming) stream type. ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown playback type. ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_VOD",
    "type" : "int",
    "comment" : " VOD (Video on Demand) playback type. ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_LIVE",
    "type" : "int",
    "comment" : " Live playback type. ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_OTHER",
    "type" : "int",
    "comment" : " Other playback type. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_NONE",
    "type" : "int",
    "comment" : " DRM is not used. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_OTHER",
    "type" : "int",
    "comment" : " Other DRM type. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_PLAY_READY",
    "type" : "int",
    "comment" : " Play ready DRM type. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_WIDEVINE_L1",
    "type" : "int",
    "comment" : " Widevine L1 DRM type. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_WIDEVINE_L3",
    "type" : "int",
    "comment" : " Widevine L3 DRM type. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_WV_L3_FALLBACK",
    "type" : "int",
    "comment" : " Widevine L3 fallback DRM type. ",
    "links" : [ ]
  }, {
    "name" : "DRM_TYPE_CLEARKEY",
    "type" : "int",
    "comment" : " Clear key DRM type. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown content type. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_MAIN",
    "type" : "int",
    "comment" : " Main contents. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_AD",
    "type" : "int",
    "comment" : " Advertisement contents. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_OTHER",
    "type" : "int",
    "comment" : " Other contents. ",
    "links" : [ ]
  }, {
    "name" : "mMediaDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaybackType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrmType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayerName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayerVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExperimentIds",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoFramesPlayed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoFramesDropped",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioUnderrunCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkBytesRead",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalBytesRead",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkTransferDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrmSessionId",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetricsBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PlaybackMetrics>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getMediaDurationMillis()",
    "returnType" : "long",
    "comment" : "\n     * Gets the media duration in milliseconds.\n     * <p>Media duration is the length of the media.\n     * @return the media duration in milliseconds, or -1 if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStreamSource()",
    "returnType" : "int",
    "comment" : "\n     * Gets stream source type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStreamType()",
    "returnType" : "int",
    "comment" : "\n     * Gets stream type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPlaybackType()",
    "returnType" : "int",
    "comment" : "\n     * Gets playback type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDrmType()",
    "returnType" : "int",
    "comment" : "\n     * Gets DRM type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentType()",
    "returnType" : "int",
    "comment" : "\n     * Gets content type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPlayerName()",
    "returnType" : "String",
    "comment" : "\n     * Gets player name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPlayerVersion()",
    "returnType" : "String",
    "comment" : "\n     * Gets player version.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getExperimentIds()",
    "returnType" : "long[]",
    "comment" : "\n     * Gets experiment IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVideoFramesPlayed()",
    "returnType" : "int",
    "comment" : "\n     * Gets video frames played.\n     * @return the video frames played, or -1 if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVideoFramesDropped()",
    "returnType" : "int",
    "comment" : "\n     * Gets video frames dropped.\n     * @return the video frames dropped, or -1 if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioUnderrunCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets audio underrun count.\n     * @return the audio underrun count, or -1 if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNetworkBytesRead()",
    "returnType" : "long",
    "comment" : "\n     * Gets number of network bytes read.\n     * @return the number of network bytes read, or -1 if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLocalBytesRead()",
    "returnType" : "long",
    "comment" : "\n     * Gets number of local bytes read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNetworkTransferDurationMillis()",
    "returnType" : "long",
    "comment" : "\n     * Gets network transfer duration in milliseconds.\n     * <p>Total transfer time spent reading from the network in ms. For parallel requests, the\n     * overlapping time intervals are counted only once.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getDrmSessionId()",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets DRM session ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getMetricsBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets metrics-related information that is not supported by dedicated methods.\n     * <p>It is intended to be used for backwards compatibility by the metrics infrastructure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getMediaDurationMillis()", "public int getStreamSource()", "public int getStreamType()", "public int getPlaybackType()", "public int getDrmType()", "public int getContentType()", "public String getPlayerName()", "public String getPlayerVersion()", "public long[] getExperimentIds()", "public int getVideoFramesPlayed()", "public int getVideoFramesDropped()", "public int getAudioUnderrunCount()", "public long getNetworkBytesRead()", "public long getLocalBytesRead()", "public long getNetworkTransferDurationMillis()", "public byte[] getDrmSessionId()", "public Bundle getMetricsBundle()", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "STREAM_SOURCE_UNKNOWN", "STREAM_SOURCE_NETWORK", "STREAM_SOURCE_DEVICE", "STREAM_SOURCE_MIXED", "STREAM_TYPE_UNKNOWN", "STREAM_TYPE_OTHER", "STREAM_TYPE_PROGRESSIVE", "STREAM_TYPE_DASH", "STREAM_TYPE_HLS", "STREAM_TYPE_SS", "PLAYBACK_TYPE_UNKNOWN", "PLAYBACK_TYPE_VOD", "PLAYBACK_TYPE_LIVE", "PLAYBACK_TYPE_OTHER", "DRM_TYPE_NONE", "DRM_TYPE_OTHER", "DRM_TYPE_PLAY_READY", "DRM_TYPE_WIDEVINE_L1", "DRM_TYPE_WIDEVINE_L3", "DRM_TYPE_WV_L3_FALLBACK", "DRM_TYPE_CLEARKEY", "CONTENT_TYPE_UNKNOWN", "CONTENT_TYPE_MAIN", "CONTENT_TYPE_AD", "CONTENT_TYPE_OTHER", "mMediaDurationMillis", "mStreamSource", "mStreamType", "mPlaybackType", "mDrmType", "mContentType", "mPlayerName", "mPlayerVersion", "mExperimentIds", "mVideoFramesPlayed", "mVideoFramesDropped", "mAudioUnderrunCount", "mNetworkBytesRead", "mLocalBytesRead", "mNetworkTransferDurationMillis", "mDrmSessionId", "mMetricsBundle", "CREATOR" ]
}