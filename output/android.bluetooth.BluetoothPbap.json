{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothPbap.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothPbap",
  "comment" : "\n * Public API for controlling the Bluetooth Pbap Service. This includes Bluetooth Phone book Access\n * profile. BluetoothPbap is a proxy object for controlling the Bluetooth Pbap Service via IPC.\n *\n * <p>Creating a BluetoothPbap object will create a binding with the BluetoothPbap service. Users of\n * this object should call close() when they are finished with the BluetoothPbap, so that this proxy\n * object can unbind from the service.\n *\n * <p>This BluetoothPbap object is not immediately bound to the BluetoothPbap service. Use the\n * ServiceListener interface to obtain a notification when it is bound, this is especially important\n * if you wish to immediately call methods on BluetoothPbap after construction.\n *\n * <p>To get an instance of the BluetoothPbap class, you can call {@link\n * BluetoothAdapter#getProfileProxy(Context, ServiceListener, int)} with the final param being\n * {@link BluetoothProfile#PBAP}. The ServiceListener should be able to get the instance of\n * BluetoothPbap in {@link android.bluetooth.BluetoothProfile.ServiceListener#onServiceConnected}.\n *\n * <p>Android only supports one connected Bluetooth Pce at a time.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothProfile#PBAP", "android.bluetooth.BluetoothProfile.ServiceListener#onServiceConnected", "android.bluetooth.BluetoothAdapter#getProfileProxy(Context" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the PBAP profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link BluetoothProfile#EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link BluetoothProfile#EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link BluetoothProfile#EXTRA_STATE} or {@link BluetoothProfile#EXTRA_PREVIOUS_STATE} can\n     * be any of {@link BluetoothProfile#STATE_DISCONNECTED}, {@link\n     * BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_CONNECTED}, {@link\n     * BluetoothProfile#STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#EXTRA_PREVIOUS_STATE", "android.bluetooth.BluetoothProfile#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "android.bluetooth.BluetoothProfile#STATE_CONNECTED", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTING", "android.bluetooth.BluetoothProfile#STATE_CONNECTING", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTED" ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELED",
    "type" : "int",
    "comment" : "\n     * Connection canceled before completion.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothPbap",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothPbap getService()",
    "returnType" : "IBluetoothPbap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile and tries to disconnect it if connectionPolicy is {@link\n     * BluetoothProfile#CONNECTION_POLICY_FORBIDDEN}\n     *\n     * <p>The device should already be paired. Connection policy can be one of: {@link\n     * BluetoothProfile#CONNECTION_POLICY_ALLOWED}, {@link\n     * BluetoothProfile#CONNECTION_POLICY_FORBIDDEN}, {@link\n     * BluetoothProfile#CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#CONNECTION_POLICY_FORBIDDEN", "android.bluetooth.BluetoothProfile#CONNECTION_POLICY_UNKNOWN", "android.bluetooth.BluetoothProfile#CONNECTION_POLICY_ALLOWED" ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Disconnects the current Pbap client (PCE). Currently this call blocks, it may soon be made\n     * asynchronous. Returns false if this proxy object is not currently connected to the Pbap\n     * service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothPbap getService()", "public BluetoothAdapter getAdapter()", "public List<BluetoothDevice> getConnectedDevices()", "public int getConnectionState(@NonNull BluetoothDevice device)", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public boolean disconnect(BluetoothDevice device)", "private boolean isEnabled()", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "ACTION_CONNECTION_STATE_CHANGED", "mAttributionSource", "RESULT_FAILURE", "RESULT_SUCCESS", "RESULT_CANCELED", "mAdapter", "mService" ]
}