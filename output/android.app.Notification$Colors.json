{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "Colors",
  "comment" : "\n     * A utility which stores and calculates the palette of colors used to color notifications.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPaletteIsForRawColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaletteIsForColorized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaletteIsForNightMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundColor",
    "type" : "int",
    "comment" : " The following colors are the palette",
    "links" : [ ]
  }, {
    "name" : "mProtectionColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryAccentColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryAccentColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTertiaryAccentColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTertiaryAccentTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTertiaryFixedDimAccentColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTertiaryFixedAccentTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContrastColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRippleAlpha",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static TypedArray obtainDayNightAttributes(@NonNull Context ctx, @NonNull @StyleableRes int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "\n         * A utility for obtaining a TypedArray of the given DayNight-styled attributes, which\n         * returns null when the context is a mock with no theme.\n         *\n         * NOTE: Calling this method is expensive, as creating a new ContextThemeWrapper\n         * instances can allocate as much as 5MB of memory, so its important to call this method\n         * only when necessary, getting as many attributes as possible from each call.\n         *\n         * @see Resources.Theme#obtainStyledAttributes(int[])\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int getColor(@Nullable TypedArray ta, int index, @ColorInt int defValue)",
    "returnType" : "int",
    "comment" : " A null-safe wrapper of TypedArray.getColor because mocks return null ",
    "links" : [ ]
  }, {
    "name" : "public void resolvePalette(Context ctx, int rawColor, boolean isColorized, boolean nightMode)",
    "returnType" : "void",
    "comment" : "\n         * Resolve the palette.  If the inputs have not changed, this will be a no-op.\n         * This does not handle invalidating the resolved colors when the context itself changes,\n         * because that case does not happen in the current notification inflation pipeline; we will\n         * recreate a new builder (and thus a new palette) when reinflating notifications for a new\n         * theme (admittedly, we do the same for night mode, but that's easy to check).\n         *\n         * @param ctx the builder context.\n         * @param rawColor the notification's color; may be COLOR_DEFAULT, but may never have alpha.\n         * @param isColorized whether the notification is colorized.\n         * @param nightMode whether the UI is in night mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int calculateContrastColor(Context ctx, @ColorInt int rawColor, @ColorInt int accentColor, @ColorInt int backgroundColor, boolean nightMode)",
    "returnType" : "int",
    "comment" : " calculates the contrast color for the non-colorized notifications ",
    "links" : [ ]
  }, {
    "name" : "private static int flattenAlpha(@ColorInt int color, @ColorInt int background)",
    "returnType" : "int",
    "comment" : " remove any alpha by manually blending it with the given background. ",
    "links" : [ ]
  }, {
    "name" : "public int getBackgroundColor()",
    "returnType" : "int",
    "comment" : " @return the notification's background color ",
    "links" : [ ]
  }, {
    "name" : "public int getProtectionColor()",
    "returnType" : "int",
    "comment" : "\n         * @return the \"surface protection\" color from the theme,\n         * or a variant of the normal background color when colorized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getPrimaryTextColor()",
    "returnType" : "int",
    "comment" : " @return the color for the most prominent text ",
    "links" : [ ]
  }, {
    "name" : "public int getSecondaryTextColor()",
    "returnType" : "int",
    "comment" : " @return the color for less prominent text ",
    "links" : [ ]
  }, {
    "name" : "public int getPrimaryAccentColor()",
    "returnType" : "int",
    "comment" : " @return the theme's accent color for colored UI elements. ",
    "links" : [ ]
  }, {
    "name" : "public int getSecondaryAccentColor()",
    "returnType" : "int",
    "comment" : " @return the theme's secondary accent color for colored UI elements. ",
    "links" : [ ]
  }, {
    "name" : "public int getTertiaryAccentColor()",
    "returnType" : "int",
    "comment" : " @return the theme's tertiary accent color for colored UI elements. ",
    "links" : [ ]
  }, {
    "name" : "public int getOnTertiaryAccentTextColor()",
    "returnType" : "int",
    "comment" : " @return the theme's text color to be used on the tertiary accent color. ",
    "links" : [ ]
  }, {
    "name" : "public int getTertiaryFixedDimAccentColor()",
    "returnType" : "int",
    "comment" : " @return the theme's tertiary fixed dim accent color for colored UI elements. ",
    "links" : [ ]
  }, {
    "name" : "public int getOnTertiaryFixedAccentTextColor()",
    "returnType" : "int",
    "comment" : " @return the theme's text color to be used on the tertiary fixed accent color. ",
    "links" : [ ]
  }, {
    "name" : "public int getContrastColor()",
    "returnType" : "int",
    "comment" : "\n         * @return the contrast-adjusted version of the color provided by the app, or the\n         * primary text color when colorized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getErrorColor()",
    "returnType" : "int",
    "comment" : " @return the theme's error color, or the primary text color when colorized. ",
    "links" : [ ]
  }, {
    "name" : "public int getRippleAlpha()",
    "returnType" : "int",
    "comment" : " @return the alpha component of the current theme's control highlight color. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static TypedArray obtainDayNightAttributes(@NonNull Context ctx, @NonNull @StyleableRes int[] attrs)", "private static int getColor(@Nullable TypedArray ta, int index, @ColorInt int defValue)", "public void resolvePalette(Context ctx, int rawColor, boolean isColorized, boolean nightMode)", "private static int calculateContrastColor(Context ctx, @ColorInt int rawColor, @ColorInt int accentColor, @ColorInt int backgroundColor, boolean nightMode)", "private static int flattenAlpha(@ColorInt int color, @ColorInt int background)", "public int getBackgroundColor()", "public int getProtectionColor()", "public int getPrimaryTextColor()", "public int getSecondaryTextColor()", "public int getPrimaryAccentColor()", "public int getSecondaryAccentColor()", "public int getTertiaryAccentColor()", "public int getOnTertiaryAccentTextColor()", "public int getTertiaryFixedDimAccentColor()", "public int getOnTertiaryFixedAccentTextColor()", "public int getContrastColor()", "public int getErrorColor()", "public int getRippleAlpha()" ],
  "variableNames" : [ "mPaletteIsForRawColor", "mPaletteIsForColorized", "mPaletteIsForNightMode", "mBackgroundColor", "mProtectionColor", "mPrimaryTextColor", "mSecondaryTextColor", "mPrimaryAccentColor", "mSecondaryAccentColor", "mTertiaryAccentColor", "mOnTertiaryAccentTextColor", "mTertiaryFixedDimAccentColor", "mOnTertiaryFixedAccentTextColor", "mErrorColor", "mContrastColor", "mRippleAlpha" ]
}