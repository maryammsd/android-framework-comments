{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/UserProperties.java",
  "packageName" : "android.content.pm",
  "className" : "UserProperties",
  "comment" : "\n * Class holding the properties of a user that derive mostly from its user type.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_SHOW_IN_LAUNCHER",
    "type" : "String",
    "comment" : " Attribute strings for reading/writing properties to/from XML.",
    "links" : [ ]
  }, {
    "name" : "ATTR_START_WITH_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_SHOW_IN_SETTINGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_SHOW_IN_QUIET_MODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_SHOW_IN_SHARING_SURFACES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_INHERIT_DEVICE_POLICY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_USE_PARENTS_CONTACTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_UPDATE_CROSS_PROFILE_INTENT_FILTERS_ON_OTA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_CROSS_PROFILE_INTENT_FILTER_ACCESS_CONTROL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_MEDIA_SHARED_WITH_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_CREDENTIAL_SHAREABLE_WITH_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_AUTH_ALWAYS_REQUIRED_TO_DISABLE_QUIET_MODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_DELETE_APP_WITH_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_ALWAYS_VISIBLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_ALLOW_STOPPING_USER_WITH_DELAYED_LOCKING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_CROSS_PROFILE_CONTENT_SHARING_STRATEGY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_PROFILE_API_VISIBILITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITEMS_RESTRICTED_ON_HOME_SCREEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_SHOW_IN_LAUNCHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_START_WITH_PARENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_SHOW_IN_SETTINGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_INHERIT_DEVICE_POLICY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_USE_PARENTS_CONTACTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_UPDATE_CROSS_PROFILE_INTENT_FILTERS_ON_OTA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_CROSS_PROFILE_INTENT_FILTER_ACCESS_CONTROL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_MEDIA_SHARED_WITH_PARENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_CREDENTIAL_SHAREABLE_WITH_PARENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_DELETE_APP_WITH_PARENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_ALWAYS_VISIBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_SHOW_IN_QUIET_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_AUTH_ALWAYS_REQUIRED_TO_DISABLE_QUIET_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_SHOW_IN_SHARING_SURFACES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_CROSS_PROFILE_CONTENT_SHARING_STRATEGY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_ALLOW_STOPPING_USER_WITH_DELAYED_LOCKING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_PROFILE_API_VISIBILITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_ITEMS_RESTRICTED_ON_HOME_SCREEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropertiesPresent",
    "type" : "long",
    "comment" : " A bit set, mapping each PropertyIndex to whether it is present (1) or absent (0). ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_LAUNCHER_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the show in launcher value for this profile is unknown or unsupported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_LAUNCHER_WITH_PARENT",
    "type" : "int",
    "comment" : "\n     * Suggests that the launcher should show this user's apps in the main tab.\n     * That is, either this user is a full user, so its apps should be presented accordingly, or, if\n     * this user is a profile, then its apps should be shown alongside its parent's apps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_LAUNCHER_SEPARATE",
    "type" : "int",
    "comment" : "\n     * Suggests that the launcher should show this user's apps, but separately from the apps of this\n     * user's parent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_LAUNCHER_NO",
    "type" : "int",
    "comment" : "\n     * Suggests that the launcher should not show this user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SETTINGS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the show in settings value for this profile is unknown or unsupported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SETTINGS_WITH_PARENT",
    "type" : "int",
    "comment" : "\n     * Suggests that the Settings app should show this user's apps in the main tab.\n     * That is, either this user is a full user, so its apps should be presented accordingly, or, if\n     * this user is a profile, then its apps should be shown alongside its parent's apps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SETTINGS_SEPARATE",
    "type" : "int",
    "comment" : "\n     * Suggests that the Settings app should show this user's apps, but separately from the apps of\n     * this user's parent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SETTINGS_NO",
    "type" : "int",
    "comment" : "\n     * Suggests that the Settings app should not show this user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INHERIT_DEVICE_POLICY_NO",
    "type" : "int",
    "comment" : "\n     * Suggests that the given user profile should not inherit user restriction or device policy\n     * from any other user. This is the default value for any new user type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INHERIT_DEVICE_POLICY_FROM_PARENT",
    "type" : "int",
    "comment" : "\n     * Suggests that the given user profile should inherit select user restrictions or\n     * device policies from its parent profile.\n     *\n     *<p> All the user restrictions and device policies would be not propagated to the profile\n     * with this property value. The {@link com.android.server.devicepolicy.DevicePolicyEngine}\n     * uses this property to determine and propagate only select ones to the given profile.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.server.devicepolicy.DevicePolicyEngine" ]
  }, {
    "name" : "mDefaultProperties",
    "type" : "UserProperties",
    "comment" : "\n     * Reference to the default user properties for this user's user type.\n     * <li>If non-null, then any absent property will use the default property from here instead.\n     * <li>If null, then any absent property indicates that the caller lacks permission to see it,\n     *          so attempting to get that property will trigger a SecurityException.\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_ALL",
    "type" : "int",
    "comment" : "\n     * CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_ALL signifies that irrespective of user we would\n     * allow access (addition/modification/removal) for CrossProfileIntentFilter.\n     * This is the default access control level.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_SYSTEM",
    "type" : "int",
    "comment" : "\n     * CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_SYSTEM signifies that only system/root user would\n     * be able to access (addition/modification/removal) CrossProfileIntentFilter.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_SYSTEM_ADD_ONLY",
    "type" : "int",
    "comment" : "\n     * CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_SYSTEM_ADD_ONLY signifies that only system/root\n     * user would be able to add CrossProfileIntentFilter but not modify/remove. Once added, it\n     * cannot be modified or removed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Signifies to use {@link DefaultCrossProfileResolver} strategy, which\n     * check if it needs to skip the initiating profile, resolves intent in target profile.\n     * {@link DefaultCrossProfileResolver} also filters the {@link ResolveInfo} after intent\n     * resolution based on their domain approval level\n     *\n     * @hide\n     ",
    "links" : [ "DefaultCrossProfileResolver", "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY_NO_FILTERING",
    "type" : "int",
    "comment" : "\n     * Signifies that there is no need to filter {@link ResolveInfo} after cross profile intent\n     * resolution across. This strategy is for profile acting transparent to end-user and resolves\n     * all allowed intent without giving any profile priority.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "SHOW_IN_QUIET_MODE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the show in quiet mode value for this profile is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_QUIET_MODE_PAUSED",
    "type" : "int",
    "comment" : "\n     * Indicates that the profile should still be visible in quiet mode but should be shown as\n     * paused (e.g. by greying out its icons).\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_QUIET_MODE_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Indicates that the profile should not be visible when the profile is in quiet mode.\n     * For example, the profile should not be shown in tabbed views in Settings, files sharing\n     * surfaces etc when in quiet mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_QUIET_MODE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Indicates that quiet mode should not have any effect on the profile visibility. If the\n     * profile is meant to be visible, it will remain visible and vice versa.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SHARING_SURFACES_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the show in launcher value for this profile is unknown or unsupported.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SHARING_SURFACES_WITH_PARENT",
    "type" : "int",
    "comment" : "\n     * Indicates that the profile data and apps should be shown in sharing surfaces intermixed with\n     * parent user's data and apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SHARING_SURFACES_SEPARATE",
    "type" : "int",
    "comment" : "\n     * Indicates that the profile data and apps should be shown in sharing surfaces separate from\n     * parent user's data and apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IN_SHARING_SURFACES_NO",
    "type" : "int",
    "comment" : "\n     * Indicates that the profile data and apps should not be shown in sharing surfaces at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_CONTENT_SHARING_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Signifies that cross-profile content sharing strategy, both to and from this profile, is\n     * unknown/unsupported.\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_CONTENT_SHARING_NO_DELEGATION",
    "type" : "int",
    "comment" : "\n     * Signifies that cross-profile content sharing strategy, both to and from this profile, should\n     * not be delegated to any other user/profile.\n     * For ex:\n     * If this property is set for a profile, content sharing applications (such as Android\n     * Sharesheet), should not delegate the decision to share content between that profile and\n     * another profile to whether content sharing is allowed between any other profile/user related\n     * to those profiles. They should instead decide, based upon whether content sharing is\n     * specifically allowed between the two profiles in question.\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_CONTENT_SHARING_DELEGATE_FROM_PARENT",
    "type" : "int",
    "comment" : "\n     * Signifies that cross-profile content sharing strategy, both to and from this profile, should\n     * be based upon the strategy used by the parent user of the profile.\n     * For ex:\n     * If this property is set for a profile A, content sharing applications (such as Android\n     * Sharesheet), should share content between profile A and profile B, based upon whether content\n     * sharing is allowed between the parent of profile A and profile B.\n     * If it's also set for profile B, then decision should, in turn be made by considering content\n     * sharing strategy between the parents of both profiles.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_API_VISIBILITY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The api visibility value for this profile user is undefined or unknown.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_API_VISIBILITY_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Indicates that information about this profile user should be shown in API surfaces.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_API_VISIBILITY_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Indicates that information about this profile should be not be visible in API surfaces.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mShowInLauncher",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowInSettings",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowInQuietMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowInSharingSurfaces",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartWithParent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeleteAppWithParent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInheritDevicePolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseParentsContacts",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the current user should use parent user's contacts.\n     * If this property is set true, the user will be blocked from storing any contacts in its\n     * own contacts database and will serve all read contacts calls through the parent's contacts.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUpdateCrossProfileIntentFiltersOnOTA",
    "type" : "boolean",
    "comment" : "\n     Indicate if {@link com.android.server.pm.CrossProfileIntentFilter}s need to be updated during\n     OTA update between user-parent\n     ",
    "links" : [ "com.android.server.pm.CrossProfileIntentFilter" ]
  }, {
    "name" : "mMediaSharedWithParent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCredentialShareableWithParent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthAlwaysRequiredToDisableQuietMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowStoppingUserWithDelayedLocking",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCrossProfileIntentFilterAccessControl",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCrossProfileIntentResolutionStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCrossProfileContentSharingStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileApiVisibility",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemsRestrictedOnHomeScreen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<UserProperties>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean isPresent(@PropertyIndex long index)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates that the given property is being stored explicitly in this object.\n     * If false, it means that either\n     * <li>the default property for the user type should be used instead (for SystemServer callers)\n     * <li>the caller lacks permission to see this property (for all other callers)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setPresent(@PropertyIndex long index)",
    "returnType" : "void",
    "comment" : " Indicates that the given property is henceforth being explicitly stored in this object. ",
    "links" : [ ]
  }, {
    "name" : "public long getPropertiesPresent()",
    "returnType" : "long",
    "comment" : " @hide Returns the internal mPropertiesPresent value. Only for testing purposes. ",
    "links" : [ ]
  }, {
    "name" : "public int getShowInLauncher()",
    "returnType" : "int",
    "comment" : "\n     * Returns whether, and how, a user should be shown in the Launcher.\n     * This is generally inapplicable for non-profile users.\n     *\n     * Possible return values include\n     *    {@link #SHOW_IN_LAUNCHER_WITH_PARENT}},\n     *    {@link #SHOW_IN_LAUNCHER_SEPARATE},\n     *    and {@link #SHOW_IN_LAUNCHER_NO}.\n     *\n     * @return whether, and how, a profile should be shown in the Launcher.\n     * @hide\n     ",
    "links" : [ "#SHOW_IN_LAUNCHER_NO", "#SHOW_IN_LAUNCHER_WITH_PARENT", "#SHOW_IN_LAUNCHER_SEPARATE" ]
  }, {
    "name" : "public void setShowInLauncher(@ShowInLauncher int val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getShowInSettings()",
    "returnType" : "int",
    "comment" : "\n     * Returns whether, and how, a user should be shown in the Settings app.\n     * This is generally inapplicable for non-profile users.\n     *\n     * Possible return values include\n     *    {@link #SHOW_IN_SETTINGS_WITH_PARENT}},\n     *    {@link #SHOW_IN_SETTINGS_SEPARATE},\n     *    and {@link #SHOW_IN_SETTINGS_NO}.\n     *\n     * <p> The caller must have {@link android.Manifest.permission#MANAGE_USERS} to query this\n     * property.\n     *\n     * @return whether, and how, a profile should be shown in the Settings.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_USERS", "#SHOW_IN_SETTINGS_WITH_PARENT", "#SHOW_IN_SETTINGS_SEPARATE", "#SHOW_IN_SETTINGS_NO" ]
  }, {
    "name" : "public void setShowInSettings(@ShowInSettings int val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getShowInQuietMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns whether a user should be shown in the Settings and sharing surfaces depending on the\n     * {@link android.os.UserManager#requestQuietModeEnabled(boolean, android.os.UserHandle)\n     * quiet mode}. This is only applicable to profile users since the quiet mode concept is only\n     * applicable to profile users.\n     *\n     * <p> Please note that, in Settings, this property takes effect only if\n     * {@link #getShowInSettings()} does not return {@link #SHOW_IN_SETTINGS_NO}.\n     * Also note that in Sharing surfaces this property takes effect only if\n     * {@link #getShowInSharingSurfaces()} does not return {@link #SHOW_IN_SHARING_SURFACES_NO}.\n     *\n     * @return One of {@link #SHOW_IN_QUIET_MODE_HIDDEN},\n     *         {@link #SHOW_IN_QUIET_MODE_PAUSED}, or\n     *         {@link #SHOW_IN_QUIET_MODE_DEFAULT} depending on whether the profile should be\n     *         shown in quiet mode or not.\n     ",
    "links" : [ "#getShowInSettings()", "#SHOW_IN_SHARING_SURFACES_NO", "android.os.UserManager#requestQuietModeEnabled(boolean", "#getShowInSharingSurfaces()", "#SHOW_IN_QUIET_MODE_HIDDEN", "#SHOW_IN_SETTINGS_NO", "#SHOW_IN_QUIET_MODE_PAUSED", "#SHOW_IN_QUIET_MODE_DEFAULT" ]
  }, {
    "name" : "public void setShowInQuietMode(@ShowInQuietMode int showInQuietMode)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getShowInSharingSurfaces()",
    "returnType" : "int",
    "comment" : "\n     * Returns whether a user's data and apps should be shown in sharing surfaces in a separate tab\n     * or mixed with the parent user's data/apps. This is only applicable to profile users.\n     *\n     * @return One of {@link #SHOW_IN_SHARING_SURFACES_NO},\n     *         {@link #SHOW_IN_SHARING_SURFACES_SEPARATE}, or\n     *         {@link #SHOW_IN_SHARING_SURFACES_WITH_PARENT} depending on whether the profile\n     *         should be shown separate from its parent's data, mixed with the parent's data, or\n     *         not shown at all.\n     ",
    "links" : [ "#SHOW_IN_SHARING_SURFACES_SEPARATE", "#SHOW_IN_SHARING_SURFACES_NO", "#SHOW_IN_SHARING_SURFACES_WITH_PARENT" ]
  }, {
    "name" : "public void setShowInSharingSurfaces(@ShowInSharingSurfaces int showInSharingSurfaces)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getStartWithParent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a profile should be started when its parent starts (unless in quiet mode).\n     * This only applies for users that have parents (i.e. for profiles).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStartWithParent(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDeleteAppWithParent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether an app in the profile should be deleted when the same package in\n     * the parent user is being deleted.\n     * This only applies for users that have parents (i.e. for profiles).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDeleteAppWithParent(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAlwaysVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the user should always\n     * be {@link android.os.UserManager#isUserVisible() visible}.\n     * The intended usage is for the Communal Profile, which is running and accessible at all times.\n     * @hide\n     ",
    "links" : [ "android.os.UserManager#isUserVisible()" ]
  }, {
    "name" : "public void setAlwaysVisible(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getInheritDevicePolicy()",
    "returnType" : "int",
    "comment" : "\n     * Return whether, and how, select user restrictions or device policies should be inherited\n     * from other user.\n     *\n     * Possible return values include\n     * {@link #INHERIT_DEVICE_POLICY_FROM_PARENT} or {@link #INHERIT_DEVICE_POLICY_NO}\n     *\n     * @hide\n     ",
    "links" : [ "#INHERIT_DEVICE_POLICY_NO", "#INHERIT_DEVICE_POLICY_FROM_PARENT" ]
  }, {
    "name" : "public void setInheritDevicePolicy(@InheritDevicePolicy int val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getUseParentsContacts()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current user must use parent user's contacts. If true, writes to the\n     * ContactsProvider corresponding to the current user will be disabled and reads will be\n     * redirected to the parent.\n     *\n     * This only applies to users that have parents (i.e. profiles) and is used to ensure\n     * they can access contacts from the parent profile. This will be generally inapplicable for\n     * non-profile users.\n     *\n     * Please note that in case of the clone profiles, only the allow-listed apps would be allowed\n     * to access contacts across profiles and other apps will not see any contacts.\n     * TODO(b/256126819) Add link to the method returning apps allow-listed for app-cloning\n     *\n     * @return whether contacts access from an associated profile is enabled for the user\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUseParentsContacts(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getUpdateCrossProfileIntentFiltersOnOTA()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if user needs to update default\n     * {@link com.android.server.pm.CrossProfileIntentFilter} with its parents during an OTA update\n     * @hide\n     ",
    "links" : [ "com.android.server.pm.CrossProfileIntentFilter" ]
  }, {
    "name" : "public void setUpdateCrossProfileIntentFiltersOnOTA(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMediaSharedWithParent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a profile shares media with its parent user.\n     * This only applies for users that have parents (i.e. for profiles).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMediaSharedWithParent(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCredentialShareableWithParent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a profile can have shared lockscreen credential with its parent user.\n     * This only applies for users that have parents (i.e. for profiles).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCredentialShareableWithParent(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAuthAlwaysRequiredToDisableQuietMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the profile always requires user authentication to disable from quiet mode.\n     *\n     * <p> Settings this field to true will ensure that the credential confirmation activity is\n     * always shown whenever the user requests to disable quiet mode. The behavior of credential\n     * checks is not guaranteed when the property is false and may vary depending on user types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAuthAlwaysRequiredToDisableQuietMode(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAllowStoppingUserWithDelayedLocking()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a user (usually a profile) is allowed to leave the CE storage unlocked when\n     * stopped.\n     *\n     * <p> Setting this property to true will enable the user's CE storage to remain unlocked when\n     * the user is stopped using\n     * {@link com.android.server.am.ActivityManagerService#stopUserWithDelayedLocking(int,\n     * IStopUserCallback)}.\n     *\n     * <p> When this property is false, delayed locking may still be applicable at a global\n     * level for all users via the {@code config_multiuserDelayUserDataLocking}. That is, delayed\n     * locking for a user can happen if either the device configuration is set or if this property\n     * is set. When both, the config and the property value is false, the user storage is always\n     * locked when the user is stopped.\n     * @hide\n     ",
    "links" : [ "com.android.server.am.ActivityManagerService#stopUserWithDelayedLocking(int" ]
  }, {
    "name" : "public void setAllowStoppingUserWithDelayedLocking(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCrossProfileIntentFilterAccessControl()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user's {@link CrossProfileIntentFilterAccessControlLevel}.\n     * @hide\n     ",
    "links" : [ "CrossProfileIntentFilterAccessControlLevel" ]
  }, {
    "name" : "public void setCrossProfileIntentFilterAccessControl(@CrossProfileIntentFilterAccessControlLevel int val)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@link CrossProfileIntentFilterAccessControlLevel} for the user.\n     * @param val access control for user\n     * @hide\n     ",
    "links" : [ "CrossProfileIntentFilterAccessControlLevel" ]
  }, {
    "name" : "public int getCrossProfileIntentResolutionStrategy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user's {@link CrossProfileIntentResolutionStrategy}.\n     * @return user's {@link CrossProfileIntentResolutionStrategy}.\n     *\n     * @hide\n     ",
    "links" : [ "CrossProfileIntentResolutionStrategy" ]
  }, {
    "name" : "public void setCrossProfileIntentResolutionStrategy(@CrossProfileIntentResolutionStrategy int val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCrossProfileContentSharingStrategy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user's {@link CrossProfileContentSharingStrategy}.\n     *\n     * Content sharing applications, such as Android Sharesheet allow sharing of content\n     * (an image, for ex.) between profiles, based upon cross-profile access checks between the\n     * originating and destined profile.\n     * In some cases however, we may want another user (such as profile parent) to serve as the\n     * delegated user to be used for such checks.\n     * To effect the same, clients can fetch this property and accordingly replace the\n     * originating/destined profile by another user for cross-profile access checks.\n     *\n     * @return user's {@link CrossProfileContentSharingStrategy}.\n     ",
    "links" : [ "CrossProfileContentSharingStrategy" ]
  }, {
    "name" : "public void setCrossProfileContentSharingStrategy(@CrossProfileContentSharingStrategy int val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getProfileApiVisibility()",
    "returnType" : "int",
    "comment" : "\n     * Returns the visibility of the profile user in API surfaces. Any information linked to the\n     * profile (userId, package names) should be hidden API surfaces if a user is marked as hidden.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProfileApiVisibility(@ProfileApiVisibility int profileApiVisibility)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean areItemsRestrictedOnHomeScreen()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a user (usually a profile) is allowed to have items such as Apps Pending\n     * Installation, Widgets, Custom App Shortcuts, etc. on Launcher home screen.\n     *\n     * <p> For a typical user/profile, this property will be false, allowing framework APIs to\n     * provide information about such items to Launcher(s). When set true, framework APIs will\n     * restrict the same.\n     *\n     * <p> This property only restricts information about items that are accessed solely via the\n     * Launcher home screen. Information about items such as App Icons, Deep Links, which can also\n     * be accessed via other launcher components, such as All Apps Drawer is not restricted by this\n     * property.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setItemsRestrictedOnHomeScreen(boolean val)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void println(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Print the UserProperties to the given PrintWriter.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateFromXml(TypedXmlPullParser parser) throws IOException, XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Parses the given xml file and updates this UserProperties with its data.\n     * I.e., if a piece of data is present in the xml, it will overwrite whatever was\n     * previously stored in this UserProperties.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToXml(TypedXmlSerializer serializer) throws IOException, XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Writes the UserProperties, as used by the SystemServer, to the xml file.\n     *\n     * The serializer should already be inside a tag in which to write the user properties.\n     *\n     * @see  #UserProperties(TypedXmlPullParser, UserProperties)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : " For use only with an object that has already had any permission-lacking fields stripped out.",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean isPresent(@PropertyIndex long index)", "private void setPresent(@PropertyIndex long index)", "public long getPropertiesPresent()", "public int getShowInLauncher()", "public void setShowInLauncher(@ShowInLauncher int val)", "public int getShowInSettings()", "public void setShowInSettings(@ShowInSettings int val)", "public int getShowInQuietMode()", "public void setShowInQuietMode(@ShowInQuietMode int showInQuietMode)", "public int getShowInSharingSurfaces()", "public void setShowInSharingSurfaces(@ShowInSharingSurfaces int showInSharingSurfaces)", "public boolean getStartWithParent()", "public void setStartWithParent(boolean val)", "public boolean getDeleteAppWithParent()", "public void setDeleteAppWithParent(boolean val)", "public boolean getAlwaysVisible()", "public void setAlwaysVisible(boolean val)", "public int getInheritDevicePolicy()", "public void setInheritDevicePolicy(@InheritDevicePolicy int val)", "public boolean getUseParentsContacts()", "public void setUseParentsContacts(boolean val)", "public boolean getUpdateCrossProfileIntentFiltersOnOTA()", "public void setUpdateCrossProfileIntentFiltersOnOTA(boolean val)", "public boolean isMediaSharedWithParent()", "public void setMediaSharedWithParent(boolean val)", "public boolean isCredentialShareableWithParent()", "public void setCredentialShareableWithParent(boolean val)", "public boolean isAuthAlwaysRequiredToDisableQuietMode()", "public void setAuthAlwaysRequiredToDisableQuietMode(boolean val)", "public boolean getAllowStoppingUserWithDelayedLocking()", "public void setAllowStoppingUserWithDelayedLocking(boolean val)", "public int getCrossProfileIntentFilterAccessControl()", "public void setCrossProfileIntentFilterAccessControl(@CrossProfileIntentFilterAccessControlLevel int val)", "public int getCrossProfileIntentResolutionStrategy()", "public void setCrossProfileIntentResolutionStrategy(@CrossProfileIntentResolutionStrategy int val)", "public int getCrossProfileContentSharingStrategy()", "public void setCrossProfileContentSharingStrategy(@CrossProfileContentSharingStrategy int val)", "public int getProfileApiVisibility()", "public void setProfileApiVisibility(@ProfileApiVisibility int profileApiVisibility)", "public boolean areItemsRestrictedOnHomeScreen()", "public void setItemsRestrictedOnHomeScreen(boolean val)", "public String toString()", "public void println(PrintWriter pw, String prefix)", "public void updateFromXml(TypedXmlPullParser parser) throws IOException, XmlPullParserException", "public void writeToXml(TypedXmlSerializer serializer) throws IOException, XmlPullParserException", "public void writeToParcel(@NonNull Parcel dest, int parcelableFlags)", "public int describeContents()" ],
  "variableNames" : [ "LOG_TAG", "ATTR_SHOW_IN_LAUNCHER", "ATTR_START_WITH_PARENT", "ATTR_SHOW_IN_SETTINGS", "ATTR_SHOW_IN_QUIET_MODE", "ATTR_SHOW_IN_SHARING_SURFACES", "ATTR_INHERIT_DEVICE_POLICY", "ATTR_USE_PARENTS_CONTACTS", "ATTR_UPDATE_CROSS_PROFILE_INTENT_FILTERS_ON_OTA", "ATTR_CROSS_PROFILE_INTENT_FILTER_ACCESS_CONTROL", "ATTR_CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY", "ATTR_MEDIA_SHARED_WITH_PARENT", "ATTR_CREDENTIAL_SHAREABLE_WITH_PARENT", "ATTR_AUTH_ALWAYS_REQUIRED_TO_DISABLE_QUIET_MODE", "ATTR_DELETE_APP_WITH_PARENT", "ATTR_ALWAYS_VISIBLE", "ATTR_ALLOW_STOPPING_USER_WITH_DELAYED_LOCKING", "ATTR_CROSS_PROFILE_CONTENT_SHARING_STRATEGY", "ATTR_PROFILE_API_VISIBILITY", "ITEMS_RESTRICTED_ON_HOME_SCREEN", "INDEX_SHOW_IN_LAUNCHER", "INDEX_START_WITH_PARENT", "INDEX_SHOW_IN_SETTINGS", "INDEX_INHERIT_DEVICE_POLICY", "INDEX_USE_PARENTS_CONTACTS", "INDEX_UPDATE_CROSS_PROFILE_INTENT_FILTERS_ON_OTA", "INDEX_CROSS_PROFILE_INTENT_FILTER_ACCESS_CONTROL", "INDEX_CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY", "INDEX_MEDIA_SHARED_WITH_PARENT", "INDEX_CREDENTIAL_SHAREABLE_WITH_PARENT", "INDEX_DELETE_APP_WITH_PARENT", "INDEX_ALWAYS_VISIBLE", "INDEX_SHOW_IN_QUIET_MODE", "INDEX_AUTH_ALWAYS_REQUIRED_TO_DISABLE_QUIET_MODE", "INDEX_SHOW_IN_SHARING_SURFACES", "INDEX_CROSS_PROFILE_CONTENT_SHARING_STRATEGY", "INDEX_ALLOW_STOPPING_USER_WITH_DELAYED_LOCKING", "INDEX_PROFILE_API_VISIBILITY", "INDEX_ITEMS_RESTRICTED_ON_HOME_SCREEN", "mPropertiesPresent", "SHOW_IN_LAUNCHER_UNKNOWN", "SHOW_IN_LAUNCHER_WITH_PARENT", "SHOW_IN_LAUNCHER_SEPARATE", "SHOW_IN_LAUNCHER_NO", "SHOW_IN_SETTINGS_UNKNOWN", "SHOW_IN_SETTINGS_WITH_PARENT", "SHOW_IN_SETTINGS_SEPARATE", "SHOW_IN_SETTINGS_NO", "INHERIT_DEVICE_POLICY_NO", "INHERIT_DEVICE_POLICY_FROM_PARENT", "mDefaultProperties", "CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_ALL", "CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_SYSTEM", "CROSS_PROFILE_INTENT_FILTER_ACCESS_LEVEL_SYSTEM_ADD_ONLY", "CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY_DEFAULT", "CROSS_PROFILE_INTENT_RESOLUTION_STRATEGY_NO_FILTERING", "SHOW_IN_QUIET_MODE_UNKNOWN", "SHOW_IN_QUIET_MODE_PAUSED", "SHOW_IN_QUIET_MODE_HIDDEN", "SHOW_IN_QUIET_MODE_DEFAULT", "SHOW_IN_SHARING_SURFACES_UNKNOWN", "SHOW_IN_SHARING_SURFACES_WITH_PARENT", "SHOW_IN_SHARING_SURFACES_SEPARATE", "SHOW_IN_SHARING_SURFACES_NO", "CROSS_PROFILE_CONTENT_SHARING_UNKNOWN", "CROSS_PROFILE_CONTENT_SHARING_NO_DELEGATION", "CROSS_PROFILE_CONTENT_SHARING_DELEGATE_FROM_PARENT", "PROFILE_API_VISIBILITY_UNKNOWN", "PROFILE_API_VISIBILITY_VISIBLE", "PROFILE_API_VISIBILITY_HIDDEN", "mShowInLauncher", "mShowInSettings", "mShowInQuietMode", "mShowInSharingSurfaces", "mStartWithParent", "mDeleteAppWithParent", "mAlwaysVisible", "mInheritDevicePolicy", "mUseParentsContacts", "mUpdateCrossProfileIntentFiltersOnOTA", "mMediaSharedWithParent", "mCredentialShareableWithParent", "mAuthAlwaysRequiredToDisableQuietMode", "mAllowStoppingUserWithDelayedLocking", "mCrossProfileIntentFilterAccessControl", "mCrossProfileIntentResolutionStrategy", "mCrossProfileContentSharingStrategy", "mProfileApiVisibility", "mItemsRestrictedOnHomeScreen", "CREATOR" ]
}