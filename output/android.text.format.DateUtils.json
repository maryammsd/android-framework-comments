{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/format/DateUtils.java",
  "packageName" : "android.text.format",
  "className" : "DateUtils",
  "comment" : "\n * This class contains various date-related utilities for creating text for things like\n * elapsed time and date ranges, strings for days of the week and months, and AM/PM text etc.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLastConfig",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sElapsedFormatMMSS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sElapsedFormatHMMSS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECOND_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTE_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAY_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEEK_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR_IN_MILLIS",
    "type" : "long",
    "comment" : "\n     * @deprecated Not all years have the same number of days, and this constant is actually the\n     * length of 364 days. Please use other date/time constructs such as\n     * {@link java.util.concurrent.TimeUnit}, {@link java.util.Calendar} or\n     * {@link java.time.Duration} instead.\n     ",
    "links" : [ "java.util.concurrent.TimeUnit", "java.util.Calendar", "java.time.Duration" ]
  }, {
    "name" : "FORMAT_SHOW_TIME",
    "type" : "int",
    "comment" : " dates and times in the formatDateRange method.",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SHOW_WEEKDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SHOW_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_NO_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SHOW_DATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_NO_MONTH_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_12HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_24HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_CAP_AMPM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_NO_NOON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_CAP_NOON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_NO_MIDNIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_CAP_MIDNIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_UTC",
    "type" : "int",
    "comment" : "\n     * @deprecated Use\n     * {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}\n     * and pass in {@link Time#TIMEZONE_UTC Time.TIMEZONE_UTC} for the timeZone instead.\n     ",
    "links" : [ "#formatDateRange(Context", "java.time.LocalDateTime#TIMEZONE_UTC" ]
  }, {
    "name" : "FORMAT_ABBREV_TIME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_ABBREV_WEEKDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_ABBREV_MONTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_NUMERIC_DATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_ABBREV_RELATIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_ABBREV_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_CAP_NOON_MIDNIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_NO_NOON_MIDNIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR_MINUTE_24",
    "type" : "String",
    "comment" : "\n     * This is not actually the preferred 24-hour date format in all locales.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "java.text.SimpleDateFormat" ]
  }, {
    "name" : "MONTH_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ABBREV_MONTH_FORMAT",
    "type" : "String",
    "comment" : "\n     * This is not actually a useful month name in all locales.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "java.text.SimpleDateFormat" ]
  }, {
    "name" : "NUMERIC_MONTH_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_DAY_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR_FORMAT_TWO_DIGITS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEEKDAY_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ABBREV_WEEKDAY_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sameYearTable",
    "type" : "int[]",
    "comment" : " @deprecated Do not use. ",
    "links" : [ ]
  }, {
    "name" : "sameMonthTable",
    "type" : "int[]",
    "comment" : " @deprecated Do not use. ",
    "links" : [ ]
  }, {
    "name" : "LENGTH_LONG",
    "type" : "int",
    "comment" : "\n     * Request the full spelled-out name. For use with the 'abbrev' parameter of\n     * {@link #getDayOfWeekString} and {@link #getMonthString}.\n     *\n     * @more <p>\n     *       e.g. \"Sunday\" or \"January\"\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "#getDayOfWeekString", "java.text.SimpleDateFormat", "#getMonthString" ]
  }, {
    "name" : "LENGTH_MEDIUM",
    "type" : "int",
    "comment" : "\n     * Request an abbreviated version of the name. For use with the 'abbrev'\n     * parameter of {@link #getDayOfWeekString} and {@link #getMonthString}.\n     *\n     * @more <p>\n     *       e.g. \"Sun\" or \"Jan\"\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "#getDayOfWeekString", "java.text.SimpleDateFormat", "#getMonthString" ]
  }, {
    "name" : "LENGTH_SHORT",
    "type" : "int",
    "comment" : "\n     * Request a shorter abbreviated version of the name.\n     * For use with the 'abbrev' parameter of {@link #getDayOfWeekString} and {@link #getMonthString}.\n     * @more\n     * <p>e.g. \"Su\" or \"Jan\"\n     * <p>In most languages, the results returned for LENGTH_SHORT will be the same as\n     * the results returned for {@link #LENGTH_MEDIUM}.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "#getDayOfWeekString", "java.text.SimpleDateFormat", "#LENGTH_MEDIUM", "#getMonthString" ]
  }, {
    "name" : "LENGTH_SHORTER",
    "type" : "int",
    "comment" : "\n     * Request an even shorter abbreviated version of the name.\n     * Do not use this.  Currently this will always return the same result\n     * as {@link #LENGTH_SHORT}.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "java.text.SimpleDateFormat", "#LENGTH_SHORT" ]
  }, {
    "name" : "LENGTH_SHORTEST",
    "type" : "int",
    "comment" : "\n     * Request an even shorter abbreviated version of the name.\n     * For use with the 'abbrev' parameter of {@link #getDayOfWeekString} and {@link #getMonthString}.\n     * @more\n     * <p>e.g. \"S\", \"T\", \"T\" or \"J\"\n     * <p>In some languages, the results returned for LENGTH_SHORTEST will be the same as\n     * the results returned for {@link #LENGTH_SHORT}.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "#getDayOfWeekString", "java.text.SimpleDateFormat", "#getMonthString", "#LENGTH_SHORT" ]
  }, {
    "name" : "sNowTime",
    "type" : "Time",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThenTime",
    "type" : "Time",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getDayOfWeekString(int dayOfWeek, int abbrev)",
    "returnType" : "String",
    "comment" : "\n     * Return a string for the day of the week.\n     * @param dayOfWeek One of {@link Calendar#SUNDAY Calendar.SUNDAY},\n     *               {@link Calendar#MONDAY Calendar.MONDAY}, etc.\n     * @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_SHORT},\n     *               {@link #LENGTH_MEDIUM}, or {@link #LENGTH_SHORTEST}.\n     *               Note that in most languages, {@link #LENGTH_SHORT}\n     *               will return the same as {@link #LENGTH_MEDIUM}.\n     *               Undefined lengths will return {@link #LENGTH_MEDIUM}\n     *               but may return something different in the future.\n     * @throws IndexOutOfBoundsException if the dayOfWeek is out of bounds.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "java.util.Calendar#MONDAY", "#LENGTH_SHORTEST", "java.util.Calendar#SUNDAY", "java.text.SimpleDateFormat", "#LENGTH_MEDIUM", "#LENGTH_LONG", "#LENGTH_SHORT" ]
  }, {
    "name" : "public static String getAMPMString(int ampm)",
    "returnType" : "String",
    "comment" : "\n     * Return a localized string for AM or PM.\n     * @param ampm Either {@link Calendar#AM Calendar.AM} or {@link Calendar#PM Calendar.PM}.\n     * @throws IndexOutOfBoundsException if the ampm is out of bounds.\n     * @return Localized version of \"AM\" or \"PM\".\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "java.text.SimpleDateFormat", "java.util.Calendar#PM", "java.util.Calendar#AM" ]
  }, {
    "name" : "public static String getMonthString(int month, int abbrev)",
    "returnType" : "String",
    "comment" : "\n     * Return a localized string for the month of the year.\n     * @param month One of {@link Calendar#JANUARY Calendar.JANUARY},\n     *               {@link Calendar#FEBRUARY Calendar.FEBRUARY}, etc.\n     * @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_MEDIUM},\n     *               or {@link #LENGTH_SHORTEST}.\n     *               Undefined lengths will return {@link #LENGTH_MEDIUM}\n     *               but may return something different in the future.\n     * @return Localized month of the year.\n     * @deprecated Use {@link java.text.SimpleDateFormat} instead.\n     ",
    "links" : [ "#LENGTH_SHORTEST", "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY", "java.text.SimpleDateFormat", "#LENGTH_MEDIUM", "#LENGTH_LONG" ]
  }, {
    "name" : "public static CharSequence getRelativeTimeSpanString(long startTime)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a string describing the elapsed time since startTime.\n     * <p>\n     * The minimum timespan to report is set to {@link #MINUTE_IN_MILLIS}.\n     * @param startTime some time in the past.\n     * @return a String object containing the elapsed time.\n     * @see #getRelativeTimeSpanString(long, long, long)\n     ",
    "links" : [ "#MINUTE_IN_MILLIS" ]
  }, {
    "name" : "public static CharSequence getRelativeTimeSpanString(long time, long now, long minResolution)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a string describing 'time' as a time relative to 'now'.\n     * <p>\n     * Time spans in the past are formatted like \"42 minutes ago\".\n     * Time spans in the future are formatted like \"In 42 minutes\".\n     *\n     * @param time the time to describe, in milliseconds\n     * @param now the current time in milliseconds\n     * @param minResolution the minimum timespan to report. For example, a time 3 seconds in the\n     *     past will be reported as \"0 minutes ago\" if this is set to MINUTE_IN_MILLIS. Pass one of\n     *     0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, WEEK_IN_MILLIS\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence getRelativeTimeSpanString(long time, long now, long minResolution, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a string describing 'time' as a time relative to 'now'.\n     * <p>\n     * Time spans in the past are formatted like \"42 minutes ago\". Time spans in\n     * the future are formatted like \"In 42 minutes\".\n     * <p>\n     * Can use {@link #FORMAT_ABBREV_RELATIVE} flag to use abbreviated relative\n     * times, like \"42 mins ago\".\n     *\n     * @param time the time to describe, in milliseconds\n     * @param now the current time in milliseconds\n     * @param minResolution the minimum timespan to report. For example, a time\n     *            3 seconds in the past will be reported as \"0 minutes ago\" if\n     *            this is set to MINUTE_IN_MILLIS. Pass one of 0,\n     *            MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS,\n     *            WEEK_IN_MILLIS\n     * @param flags a bit mask of formatting options, such as\n     *            {@link #FORMAT_NUMERIC_DATE} or\n     *            {@link #FORMAT_ABBREV_RELATIVE}\n     ",
    "links" : [ "#FORMAT_ABBREV_RELATIVE", "#FORMAT_NUMERIC_DATE" ]
  }, {
    "name" : "public static CharSequence getRelativeDateTimeString(Context c, long time, long minResolution, long transitionResolution, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return string describing the elapsed time since startTime formatted like\n     * \"[relative time/date], [time]\".\n     * <p>\n     * Example output strings for the US date format.\n     * <ul>\n     * <li>3 min. ago, 10:15 AM</li>\n     * <li>Yesterday, 12:20 PM</li>\n     * <li>Dec 12, 4:12 AM</li>\n     * <li>11/14/2007, 8:20 AM</li>\n     * </ul>\n     *\n     * @param time some time in the past.\n     * @param minResolution the minimum elapsed time (in milliseconds) to report\n     *            when showing relative times. For example, a time 3 seconds in\n     *            the past will be reported as \"0 minutes ago\" if this is set to\n     *            {@link #MINUTE_IN_MILLIS}.\n     * @param transitionResolution the elapsed time (in milliseconds) at which\n     *            to stop reporting relative measurements. Elapsed times greater\n     *            than this resolution will default to normal date formatting.\n     *            For example, will transition from \"7 days ago\" to \"Dec 12\"\n     *            when using {@link #WEEK_IN_MILLIS}.\n     ",
    "links" : [ "#MINUTE_IN_MILLIS", "#WEEK_IN_MILLIS" ]
  }, {
    "name" : "private static void initFormatStrings()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void initFormatStringsLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence formatDuration(long millis)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the given duration in a human-friendly format. For example,\n     * \"4 minutes\" or \"1 second\". Returns only the largest meaningful unit of time,\n     * from seconds up to hours.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence formatDuration(long millis, int abbrev)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the given duration in a human-friendly format. For example,\n     * \"4 minutes\" or \"1 second\". Returns only the largest meaningful unit of time,\n     * from seconds up to hours.\n     * <p>\n     * You can use abbrev to specify a preference for abbreviations (but note that some\n     * locales may not have abbreviations). Use LENGTH_LONG for the full spelling (e.g. \"2 hours\"),\n     * LENGTH_SHORT for the abbreviated spelling if available (e.g. \"2 hr\"), and LENGTH_SHORTEST for\n     * the briefest form available (e.g. \"2h\").\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatElapsedTime(long elapsedSeconds)",
    "returnType" : "String",
    "comment" : "\n     * Formats an elapsed time in the form \"MM:SS\" or \"H:MM:SS\"\n     * for display on the call-in-progress screen.\n     * @param elapsedSeconds the elapsed time in seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatElapsedTime(StringBuilder recycle, long elapsedSeconds)",
    "returnType" : "String",
    "comment" : "\n     * Formats an elapsed time in a format like \"MM:SS\" or \"H:MM:SS\" (using a form\n     * suited to the current locale), similar to that used on the call-in-progress\n     * screen.\n     *\n     * @param recycle {@link StringBuilder} to recycle, or null to use a temporary one.\n     * @param elapsedSeconds the elapsed time in seconds.\n     ",
    "links" : [ "StringBuilder" ]
  }, {
    "name" : "public static final CharSequence formatSameDayTime(long then, long now, int dateStyle, int timeStyle)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Format a date / time such that if the then is on the same day as now, it shows\n     * just the time and if it's a different day, it shows just the date.\n     *\n     * <p>The parameters dateFormat and timeFormat should each be one of\n     * {@link java.text.DateFormat#DEFAULT},\n     * {@link java.text.DateFormat#FULL},\n     * {@link java.text.DateFormat#LONG},\n     * {@link java.text.DateFormat#MEDIUM}\n     * or\n     * {@link java.text.DateFormat#SHORT}\n     *\n     * @param then the date to format\n     * @param now the base time\n     * @param dateStyle how to format the date portion.\n     * @param timeStyle how to format the time portion.\n     ",
    "links" : [ "java.text.DateFormat#DEFAULT", "java.text.DateFormat#SHORT", "java.text.DateFormat#MEDIUM", "java.text.DateFormat#FULL", "java.text.DateFormat#LONG" ]
  }, {
    "name" : "public static boolean isToday(long when)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the supplied when is today else false\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSameDate(long oneMillis, long twoMillis)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String formatDateRange(Context context, long startMillis, long endMillis, int flags)",
    "returnType" : "String",
    "comment" : "\n     * Formats a date or a time range according to the local conventions.\n     * <p>\n     * Note that this is a convenience method. Using it involves creating an\n     * internal {@link java.util.Formatter} instance on-the-fly, which is\n     * somewhat costly in terms of memory and time. This is probably acceptable\n     * if you use the method only rarely, but if you rely on it for formatting a\n     * large number of dates, consider creating and reusing your own\n     * {@link java.util.Formatter} instance and use the version of\n     * {@link #formatDateRange(Context, long, long, int) formatDateRange}\n     * that takes a {@link java.util.Formatter}.\n     *\n     * @param context the context is required only if the time is shown\n     * @param startMillis the start time in UTC milliseconds\n     * @param endMillis the end time in UTC milliseconds\n     * @param flags a bit mask of options See\n     * {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}\n     * @return a string containing the formatted date/time range.\n     ",
    "links" : [ "#formatDateRange(Context", "java.util.Formatter" ]
  }, {
    "name" : "public static Formatter formatDateRange(Context context, Formatter formatter, long startMillis, long endMillis, int flags)",
    "returnType" : "Formatter",
    "comment" : "\n     * Formats a date or a time range according to the local conventions.\n     * <p>\n     * Note that this is a convenience method for formatting the date or\n     * time range in the local time zone. If you want to specify the time\n     * zone please use\n     * {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}.\n     *\n     * @param context the context is required only if the time is shown\n     * @param formatter the Formatter used for formatting the date range.\n     * Note: be sure to call setLength(0) on StringBuilder passed to\n     * the Formatter constructor unless you want the results to accumulate.\n     * @param startMillis the start time in UTC milliseconds\n     * @param endMillis the end time in UTC milliseconds\n     * @param flags a bit mask of options See\n     * {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}\n     * @return a string containing the formatted date/time range.\n     ",
    "links" : [ "#formatDateRange(Context" ]
  }, {
    "name" : "public static Formatter formatDateRange(Context context, Formatter formatter, long startMillis, long endMillis, int flags, String timeZone)",
    "returnType" : "Formatter",
    "comment" : "\n     * Formats a date or a time range according to the local conventions.\n     *\n     * <p>\n     * Example output strings (date formats in these examples are shown using\n     * the US date format convention but that may change depending on the\n     * local settings):\n     * <ul>\n     *   <li>10:15am</li>\n     *   <li>3:00pm - 4:00pm</li>\n     *   <li>3pm - 4pm</li>\n     *   <li>3PM - 4PM</li>\n     *   <li>08:00 - 17:00</li>\n     *   <li>Oct 9</li>\n     *   <li>Tue, Oct 9</li>\n     *   <li>October 9, 2007</li>\n     *   <li>Oct 9 - 10</li>\n     *   <li>Oct 9 - 10, 2007</li>\n     *   <li>Oct 28 - Nov 3, 2007</li>\n     *   <li>Dec 31, 2007 - Jan 1, 2008</li>\n     *   <li>Oct 9, 8:00am - Oct 10, 5:00pm</li>\n     *   <li>12/31/2007 - 01/01/2008</li>\n     * </ul>\n     *\n     * <p>\n     * The flags argument is a bitmask of options from the following list:\n     *\n     * <ul>\n     *   <li>FORMAT_SHOW_TIME</li>\n     *   <li>FORMAT_SHOW_WEEKDAY</li>\n     *   <li>FORMAT_SHOW_YEAR</li>\n     *   <li>FORMAT_SHOW_DATE</li>\n     *   <li>FORMAT_NO_MONTH_DAY</li>\n     *   <li>FORMAT_12HOUR</li>\n     *   <li>FORMAT_24HOUR</li>\n     *   <li>FORMAT_CAP_AMPM</li>\n     *   <li>FORMAT_NO_NOON</li>\n     *   <li>FORMAT_CAP_NOON</li>\n     *   <li>FORMAT_NO_MIDNIGHT</li>\n     *   <li>FORMAT_CAP_MIDNIGHT</li>\n     *   <li>FORMAT_UTC</li>\n     *   <li>FORMAT_ABBREV_TIME</li>\n     *   <li>FORMAT_ABBREV_WEEKDAY</li>\n     *   <li>FORMAT_ABBREV_MONTH</li>\n     *   <li>FORMAT_ABBREV_ALL</li>\n     *   <li>FORMAT_NUMERIC_DATE</li>\n     * </ul>\n     *\n     * <p>\n     * If FORMAT_SHOW_TIME is set, the time is shown as part of the date range.\n     * If the start and end time are the same, then just the start time is\n     * shown.\n     *\n     * <p>\n     * If FORMAT_SHOW_WEEKDAY is set, then the weekday is shown.\n     *\n     * <p>\n     * If FORMAT_SHOW_YEAR is set, then the year is always shown.\n     * If FORMAT_SHOW_YEAR is not set, then the year\n     * is shown only if it is different from the current year, or if the start\n     * and end dates fall on different years.\n     *\n     * <p>\n     * Normally the date is shown unless the start and end day are the same.\n     * If FORMAT_SHOW_DATE is set, then the date is always shown, even for\n     * same day ranges.\n     *\n     * <p>\n     * If FORMAT_NO_MONTH_DAY is set, then if the date is shown, just the\n     * month name will be shown, not the day of the month.  For example,\n     * \"January, 2008\" instead of \"January 6 - 12, 2008\".\n     *\n     * <p>\n     * If FORMAT_CAP_AMPM is set and 12-hour time is used, then the \"AM\"\n     * and \"PM\" are capitalized.  You should not use this flag\n     * because in some locales these terms cannot be capitalized, and in\n     * many others it doesn't make sense to do so even though it is possible.\n     *\n     * <p>\n     * If FORMAT_NO_NOON is set and 12-hour time is used, then \"12pm\" is\n     * shown instead of \"noon\".\n     *\n     * <p>\n     * If FORMAT_CAP_NOON is set and 12-hour time is used, then \"Noon\" is\n     * shown instead of \"noon\".  You should probably not use this flag\n     * because in many locales it will not make sense to capitalize\n     * the term.\n     *\n     * <p>\n     * If FORMAT_NO_MIDNIGHT is set and 12-hour time is used, then \"12am\" is\n     * shown instead of \"midnight\".\n     *\n     * <p>\n     * If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used, then \"Midnight\"\n     * is shown instead of \"midnight\".  You should probably not use this\n     * flag because in many locales it will not make sense to capitalize\n     * the term.\n     *\n     * <p>\n     * If FORMAT_12HOUR is set and the time is shown, then the time is\n     * shown in the 12-hour time format. You should not normally set this.\n     * Instead, let the time format be chosen automatically according to the\n     * system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then\n     * FORMAT_24HOUR takes precedence.\n     *\n     * <p>\n     * If FORMAT_24HOUR is set and the time is shown, then the time is\n     * shown in the 24-hour time format. You should not normally set this.\n     * Instead, let the time format be chosen automatically according to the\n     * system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then\n     * FORMAT_24HOUR takes precedence.\n     *\n     * <p>\n     * If FORMAT_UTC is set, then the UTC time zone is used for the start\n     * and end milliseconds unless a time zone is specified. If a time zone\n     * is specified it will be used regardless of the FORMAT_UTC flag.\n     *\n     * <p>\n     * If FORMAT_ABBREV_TIME is set and 12-hour time format is used, then the\n     * start and end times (if shown) are abbreviated by not showing the minutes\n     * if they are zero.  For example, instead of \"3:00pm\" the time would be\n     * abbreviated to \"3pm\".\n     *\n     * <p>\n     * If FORMAT_ABBREV_WEEKDAY is set, then the weekday (if shown) is\n     * abbreviated to a 3-letter string.\n     *\n     * <p>\n     * If FORMAT_ABBREV_MONTH is set, then the month (if shown) is abbreviated\n     * to a 3-letter string.\n     *\n     * <p>\n     * If FORMAT_ABBREV_ALL is set, then the weekday and the month (if shown)\n     * are abbreviated to 3-letter strings.\n     *\n     * <p>\n     * If FORMAT_NUMERIC_DATE is set, then the date is shown in numeric format\n     * instead of using the name of the month.  For example, \"12/31/2008\"\n     * instead of \"December 31, 2008\".\n     *\n     * <p>\n     * If the end date ends at 12:00am at the beginning of a day, it is\n     * formatted as the end of the previous day in two scenarios:\n     * <ul>\n     *   <li>For single day events. This results in \"8pm - midnight\" instead of\n     *       \"Nov 10, 8pm - Nov 11, 12am\".</li>\n     *   <li>When the time is not displayed. This results in \"Nov 10 - 11\" for\n     *       an event with a start date of Nov 10 and an end date of Nov 12 at\n     *       00:00.</li>\n     * </ul>\n     *\n     * @param context the context is required only if the time is shown\n     * @param formatter the Formatter used for formatting the date range.\n     * Note: be sure to call setLength(0) on StringBuilder passed to\n     * the Formatter constructor unless you want the results to accumulate.\n     * @param startMillis the start time in UTC milliseconds\n     * @param endMillis the end time in UTC milliseconds\n     * @param flags a bit mask of options\n     * @param timeZone the id of the time zone to compute the string in. Use null for local\n     * or if the FORMAT_UTC flag is being used.\n     *\n     * @return the formatter with the formatted date/time range appended to the string buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatDateTime(Context context, long millis, int flags)",
    "returnType" : "String",
    "comment" : "\n     * Formats a date or a time according to the local conventions. There are\n     * lots of options that allow the caller to control, for example, if the\n     * time is shown, if the day of the week is shown, if the month name is\n     * abbreviated, if noon is shown instead of 12pm, and so on. For the\n     * complete list of options, see the documentation for\n     * {@link #formatDateRange}.\n     * <p>\n     * Example output strings (date formats in these examples are shown using\n     * the US date format convention but that may change depending on the\n     * local settings):\n     * <ul>\n     *   <li>10:15am</li>\n     *   <li>3:00pm</li>\n     *   <li>3pm</li>\n     *   <li>3PM</li>\n     *   <li>08:00</li>\n     *   <li>17:00</li>\n     *   <li>noon</li>\n     *   <li>Noon</li>\n     *   <li>midnight</li>\n     *   <li>Midnight</li>\n     *   <li>Oct 31</li>\n     *   <li>Oct 31, 2007</li>\n     *   <li>October 31, 2007</li>\n     *   <li>10am, Oct 31</li>\n     *   <li>17:00, Oct 31</li>\n     *   <li>Wed</li>\n     *   <li>Wednesday</li>\n     *   <li>10am, Wed, Oct 31</li>\n     *   <li>Wed, Oct 31</li>\n     *   <li>Wednesday, Oct 31</li>\n     *   <li>Wed, Oct 31, 2007</li>\n     *   <li>Wed, October 31</li>\n     *   <li>10/31/2007</li>\n     * </ul>\n     *\n     * @param context the context is required only if the time is shown\n     * @param millis a point in time in UTC milliseconds\n     * @param flags a bit mask of formatting options\n     * @return a string containing the formatted date/time.\n     ",
    "links" : [ "#formatDateRange" ]
  }, {
    "name" : "public static CharSequence getRelativeTimeSpanString(Context c, long millis, boolean withPreposition)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return a relative time string to display the time expressed by millis.  Times\n     * are counted starting at midnight, which means that assuming that the current\n     * time is March 31st, 0:30:\n     * <ul>\n     *   <li>\"millis=0:10 today\" will be displayed as \"0:10\"</li>\n     *   <li>\"millis=11:30pm the day before\" will be displayed as \"Mar 30\"</li>\n     * </ul>\n     * If the given millis is in a different year, then the full date is\n     * returned in numeric format (e.g., \"10/12/2008\").\n     *\n     * @param withPreposition If true, the string returned will include the correct\n     * preposition (\"at 9:20am\", \"on 10/12/2008\" or \"on May 29\").\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence getRelativeTimeSpanString(Context c, long millis)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Convenience function to return relative time string without preposition.\n     * @param c context for resources\n     * @param millis time in milliseconds\n     * @return {@link CharSequence} containing relative time.\n     * @see #getRelativeTimeSpanString(Context, long, boolean)\n     ",
    "links" : [ "CharSequence" ]
  } ],
  "methodNames" : [ "public static String getDayOfWeekString(int dayOfWeek, int abbrev)", "public static String getAMPMString(int ampm)", "public static String getMonthString(int month, int abbrev)", "public static CharSequence getRelativeTimeSpanString(long startTime)", "public static CharSequence getRelativeTimeSpanString(long time, long now, long minResolution)", "public static CharSequence getRelativeTimeSpanString(long time, long now, long minResolution, int flags)", "public static CharSequence getRelativeDateTimeString(Context c, long time, long minResolution, long transitionResolution, int flags)", "private static void initFormatStrings()", "private static void initFormatStringsLocked()", "public static CharSequence formatDuration(long millis)", "public static CharSequence formatDuration(long millis, int abbrev)", "public static String formatElapsedTime(long elapsedSeconds)", "public static String formatElapsedTime(StringBuilder recycle, long elapsedSeconds)", "public static final CharSequence formatSameDayTime(long then, long now, int dateStyle, int timeStyle)", "public static boolean isToday(long when)", "private static boolean isSameDate(long oneMillis, long twoMillis)", "public static String formatDateRange(Context context, long startMillis, long endMillis, int flags)", "public static Formatter formatDateRange(Context context, Formatter formatter, long startMillis, long endMillis, int flags)", "public static Formatter formatDateRange(Context context, Formatter formatter, long startMillis, long endMillis, int flags, String timeZone)", "public static String formatDateTime(Context context, long millis, int flags)", "public static CharSequence getRelativeTimeSpanString(Context c, long millis, boolean withPreposition)", "public static CharSequence getRelativeTimeSpanString(Context c, long millis)" ],
  "variableNames" : [ "sLock", "sLastConfig", "sElapsedFormatMMSS", "sElapsedFormatHMMSS", "SECOND_IN_MILLIS", "MINUTE_IN_MILLIS", "HOUR_IN_MILLIS", "DAY_IN_MILLIS", "WEEK_IN_MILLIS", "YEAR_IN_MILLIS", "FORMAT_SHOW_TIME", "FORMAT_SHOW_WEEKDAY", "FORMAT_SHOW_YEAR", "FORMAT_NO_YEAR", "FORMAT_SHOW_DATE", "FORMAT_NO_MONTH_DAY", "FORMAT_12HOUR", "FORMAT_24HOUR", "FORMAT_CAP_AMPM", "FORMAT_NO_NOON", "FORMAT_CAP_NOON", "FORMAT_NO_MIDNIGHT", "FORMAT_CAP_MIDNIGHT", "FORMAT_UTC", "FORMAT_ABBREV_TIME", "FORMAT_ABBREV_WEEKDAY", "FORMAT_ABBREV_MONTH", "FORMAT_NUMERIC_DATE", "FORMAT_ABBREV_RELATIVE", "FORMAT_ABBREV_ALL", "FORMAT_CAP_NOON_MIDNIGHT", "FORMAT_NO_NOON_MIDNIGHT", "HOUR_MINUTE_24", "MONTH_FORMAT", "ABBREV_MONTH_FORMAT", "NUMERIC_MONTH_FORMAT", "MONTH_DAY_FORMAT", "YEAR_FORMAT", "YEAR_FORMAT_TWO_DIGITS", "WEEKDAY_FORMAT", "ABBREV_WEEKDAY_FORMAT", "sameYearTable", "sameMonthTable", "LENGTH_LONG", "LENGTH_MEDIUM", "LENGTH_SHORT", "LENGTH_SHORTER", "LENGTH_SHORTEST", "sNowTime", "sThenTime" ]
}