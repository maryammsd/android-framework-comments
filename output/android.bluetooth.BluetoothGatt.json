{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothGatt.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothGatt",
  "comment" : "\n * Public API for the Bluetooth GATT Profile.\n *\n * <p>This class provides Bluetooth GATT functionality to enable communication with Bluetooth Smart\n * or Smart Ready devices.\n *\n * <p>To connect to a remote peripheral device, create a {@link BluetoothGattCallback} and call\n * {@link BluetoothDevice#connectGatt} to get a instance of this class. GATT capable devices can be\n * discovered using the Bluetooth device discovery or BLE scan process.\n ",
  "links" : [ "android.bluetooth.BluetoothGattCallback", "android.bluetooth.BluetoothDevice#connectGatt" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothGatt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "BluetoothGattCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientIf",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevice",
    "type" : "BluetoothDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoConnect",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthRetryState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceBusyLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceBusy",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransport",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpportunistic",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTH_RETRY_STATE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTH_RETRY_STATE_MITM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONN_STATE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONN_STATE_CONNECTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONN_STATE_CONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONN_STATE_CLOSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WRITE_CHARACTERISTIC_MAX_RETRIES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WRITE_CHARACTERISTIC_TIME_TO_WAIT",
    "type" : "int",
    "comment" : " milliseconds",
    "links" : [ ]
  }, {
    "name" : "GATT_MAX_ATTR_LEN",
    "type" : "int",
    "comment" : " Max length of an attribute value, defined in gatt_api.h",
    "links" : [ ]
  }, {
    "name" : "mServices",
    "type" : "List<BluetoothGattService>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GATT_SUCCESS",
    "type" : "int",
    "comment" : " A GATT operation completed successfully ",
    "links" : [ ]
  }, {
    "name" : "GATT_READ_NOT_PERMITTED",
    "type" : "int",
    "comment" : " GATT read operation is not permitted ",
    "links" : [ ]
  }, {
    "name" : "GATT_WRITE_NOT_PERMITTED",
    "type" : "int",
    "comment" : " GATT write operation is not permitted ",
    "links" : [ ]
  }, {
    "name" : "GATT_INSUFFICIENT_AUTHENTICATION",
    "type" : "int",
    "comment" : " Insufficient authentication for a given operation ",
    "links" : [ ]
  }, {
    "name" : "GATT_REQUEST_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " The given request is not supported ",
    "links" : [ ]
  }, {
    "name" : "GATT_INSUFFICIENT_ENCRYPTION",
    "type" : "int",
    "comment" : " Insufficient encryption for a given operation ",
    "links" : [ ]
  }, {
    "name" : "GATT_INVALID_OFFSET",
    "type" : "int",
    "comment" : " A read or write operation was requested with an invalid offset ",
    "links" : [ ]
  }, {
    "name" : "GATT_INSUFFICIENT_AUTHORIZATION",
    "type" : "int",
    "comment" : " Insufficient authorization for a given operation ",
    "links" : [ ]
  }, {
    "name" : "GATT_INVALID_ATTRIBUTE_LENGTH",
    "type" : "int",
    "comment" : " A write operation exceeds the maximum length of the attribute ",
    "links" : [ ]
  }, {
    "name" : "GATT_CONNECTION_CONGESTED",
    "type" : "int",
    "comment" : " A remote device connection is congested. ",
    "links" : [ ]
  }, {
    "name" : "GATT_CONNECTION_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * GATT connection timed out, likely due to the remote device being out of range or not\n     * advertising as connectable.\n     ",
    "links" : [ ]
  }, {
    "name" : "GATT_FAILURE",
    "type" : "int",
    "comment" : " A GATT operation failed, errors other than the above ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_PRIORITY_BALANCED",
    "type" : "int",
    "comment" : "\n     * Connection parameter update - Use the connection parameters recommended by the Bluetooth SIG.\n     * This is the default value if no connection parameter update is requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_PRIORITY_HIGH",
    "type" : "int",
    "comment" : "\n     * Connection parameter update - Request a high priority, low latency connection. An application\n     * should only request high priority connection parameters to transfer large amounts of data\n     * over LE quickly. Once the transfer is complete, the application should request {@link\n     * BluetoothGatt#CONNECTION_PRIORITY_BALANCED} connection parameters to reduce energy use.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#CONNECTION_PRIORITY_BALANCED" ]
  }, {
    "name" : "CONNECTION_PRIORITY_LOW_POWER",
    "type" : "int",
    "comment" : " Connection parameter update - Request low power, reduced data rate connection parameters. ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_PRIORITY_DCK",
    "type" : "int",
    "comment" : "\n     * Connection parameter update - Request the priority preferred for Digital Car Key for a lower\n     * latency connection. This connection parameter will consume more power than {@link\n     * BluetoothGatt#CONNECTION_PRIORITY_BALANCED}, so it is recommended that apps do not use this\n     * unless it specifically fits their use case.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#CONNECTION_PRIORITY_BALANCED" ]
  }, {
    "name" : "SUBRATE_REQUEST_MODE_BALANCED",
    "type" : "int",
    "comment" : "\n     * Connection subrate request - Balanced.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBRATE_REQUEST_MODE_HIGH",
    "type" : "int",
    "comment" : "\n     * Connection subrate request - High.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBRATE_REQUEST_MODE_LOW_POWER",
    "type" : "int",
    "comment" : "\n     * Connection Subrate Request - Low Power.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATION_NONE",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATION_NO_MITM",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATION_MITM",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "mBluetoothGattCallback",
    "type" : "IBluetoothGattCallback",
    "comment" : " Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close this Bluetooth GATT client.\n     *\n     * <p>Application should call this method as early as possible after it is done with this GATT\n     * client.\n     ",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattService getService(BluetoothDevice device, UUID uuid, int instanceId)",
    "returnType" : "BluetoothGattService",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattCharacteristic getCharacteristicById(BluetoothDevice device, int instanceId)",
    "returnType" : "BluetoothGattCharacteristic",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattDescriptor getDescriptorById(BluetoothDevice device, int instanceId)",
    "returnType" : "BluetoothGattDescriptor",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private void runOrQueueCallback(final Runnable cb)",
    "returnType" : "void",
    "comment" : "\n     * Queue the runnable on a {@link Handler} provided by the user, or execute the runnable\n     * immediately if no Handler was provided.\n     ",
    "links" : [ "android.os.Handler" ]
  }, {
    "name" : "private boolean registerApp(BluetoothGattCallback callback, Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Register an application callback to start using GATT.\n     *\n     * <p>This is an asynchronous call. The callback {@link BluetoothGattCallback#onAppRegistered}\n     * is used to notify success or failure if the function returns true.\n     *\n     * @param callback GATT callback handler that will receive asynchronous callbacks.\n     * @return If true, the callback will be called to notify success or failure, false on immediate\n     *     error\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onAppRegistered" ]
  }, {
    "name" : "private boolean registerApp(BluetoothGattCallback callback, Handler handler, boolean eattSupport)",
    "returnType" : "boolean",
    "comment" : "\n     * Register an application callback to start using GATT.\n     *\n     * <p>This is an asynchronous call. The callback {@link BluetoothGattCallback#onAppRegistered}\n     * is used to notify success or failure if the function returns true.\n     *\n     * @param callback GATT callback handler that will receive asynchronous callbacks.\n     * @param eattSupport indicate to allow for eatt support\n     * @return If true, the callback will be called to notify success or failure, false on immediate\n     *     error\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onAppRegistered" ]
  }, {
    "name" : "private void unregisterApp()",
    "returnType" : "void",
    "comment" : " Unregister the current application and callbacks. ",
    "links" : [ ]
  }, {
    "name" : " boolean connect(Boolean autoConnect, BluetoothGattCallback callback, Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate a connection to a Bluetooth GATT capable device.\n     *\n     * <p>The connection may not be established right away, but will be completed when the remote\n     * device is available. A {@link BluetoothGattCallback#onConnectionStateChange} callback will be\n     * invoked when the connection state changes as a result of this function.\n     *\n     * <p>The autoConnect parameter determines whether to actively connect to the remote device, or\n     * rather passively scan and finalize the connection when the remote device is in\n     * range/available. Generally, the first ever connection to a device should be direct\n     * (autoConnect set to false) and subsequent connections to known devices should be invoked with\n     * the autoConnect parameter set to true.\n     *\n     * @param autoConnect Whether to directly connect to the remote device (false) or to\n     *     automatically connect as soon as the remote device becomes available (true).\n     * @return true, if the connection attempt was initiated successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onConnectionStateChange" ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects an established connection, or cancels a connection attempt currently in progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect()",
    "returnType" : "boolean",
    "comment" : "\n     * Connect back to remote device.\n     *\n     * <p>This method is used to re-connect to a remote device after the connection has been\n     * dropped. If the device is not in range, the re-connection will be triggered once the device\n     * is back in range.\n     *\n     * @return true, if the connection attempt was initiated successfully\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPreferredPhy(int txPhy, int rxPhy, int phyOptions)",
    "returnType" : "void",
    "comment" : "\n     * Set the preferred connection PHY for this app. Please note that this is just a\n     * recommendation, whether the PHY change will happen depends on other applications preferences,\n     * local and remote controller capabilities. Controller can override these settings.\n     *\n     * <p>{@link BluetoothGattCallback#onPhyUpdate} will be triggered as a result of this call, even\n     * if no PHY change happens. It is also triggered when remote device updates the PHY.\n     *\n     * @param txPhy preferred transmitter PHY. Bitwise OR of any of {@link\n     *     BluetoothDevice#PHY_LE_1M_MASK}, {@link BluetoothDevice#PHY_LE_2M_MASK}, and {@link\n     *     BluetoothDevice#PHY_LE_CODED_MASK}.\n     * @param rxPhy preferred receiver PHY. Bitwise OR of any of {@link\n     *     BluetoothDevice#PHY_LE_1M_MASK}, {@link BluetoothDevice#PHY_LE_2M_MASK}, and {@link\n     *     BluetoothDevice#PHY_LE_CODED_MASK}.\n     * @param phyOptions preferred coding to use when transmitting on the LE Coded PHY. Can be one\n     *     of {@link BluetoothDevice#PHY_OPTION_NO_PREFERRED}, {@link BluetoothDevice#PHY_OPTION_S2}\n     *     or {@link BluetoothDevice#PHY_OPTION_S8}\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#PHY_OPTION_S8", "android.bluetooth.BluetoothDevice#PHY_LE_2M_MASK", "android.bluetooth.BluetoothDevice#PHY_OPTION_NO_PREFERRED", "android.bluetooth.BluetoothDevice#PHY_OPTION_S2", "android.bluetooth.BluetoothDevice#PHY_LE_1M_MASK", "android.bluetooth.BluetoothDevice#PHY_LE_CODED_MASK", "android.bluetooth.BluetoothGattCallback#onPhyUpdate" ]
  }, {
    "name" : "public void readPhy()",
    "returnType" : "void",
    "comment" : "\n     * Read the current transmitter PHY and receiver PHY of the connection. The values are returned\n     * in {@link BluetoothGattCallback#onPhyRead}\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onPhyRead" ]
  }, {
    "name" : "public BluetoothDevice getDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Return the remote bluetooth device this GATT client targets to\n     *\n     * @return remote bluetooth device\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean discoverServices()",
    "returnType" : "boolean",
    "comment" : "\n     * Discovers services offered by a remote device as well as their characteristics and\n     * descriptors.\n     *\n     * <p>This is an asynchronous operation. Once service discovery is completed, the {@link\n     * BluetoothGattCallback#onServicesDiscovered} callback is triggered. If the discovery was\n     * successful, the remote services can be retrieved using the {@link #getServices} function.\n     *\n     * @return true, if the remote service discovery has been started\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onServicesDiscovered", "#getServices" ]
  }, {
    "name" : "public boolean discoverServiceByUuid(UUID uuid)",
    "returnType" : "boolean",
    "comment" : "\n     * Discovers a service by UUID. This is exposed only for passing PTS tests. It should never be\n     * used by real applications. The service is not searched for characteristics and descriptors,\n     * or returned in any callback.\n     *\n     * @return true, if the remote service discovery has been started\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothGattService> getServices()",
    "returnType" : "List<BluetoothGattService>",
    "comment" : "\n     * Returns a list of GATT services offered by the remote device.\n     *\n     * <p>This function requires that service discovery has been completed for the given device.\n     *\n     * @return List of services on the remote device. Returns an empty list if service discovery has\n     *     not yet been performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothGattService getService(UUID uuid)",
    "returnType" : "BluetoothGattService",
    "comment" : "\n     * Returns a {@link BluetoothGattService}, if the requested UUID is supported by the remote\n     * device.\n     *\n     * <p>This function requires that service discovery has been completed for the given device.\n     *\n     * <p>If multiple instances of the same service (as identified by UUID) exist, the first\n     * instance of the service is returned.\n     *\n     * @param uuid UUID of the requested service\n     * @return BluetoothGattService if supported, or null if the requested service is not offered by\n     *     the remote device.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattService" ]
  }, {
    "name" : "public boolean readCharacteristic(BluetoothGattCharacteristic characteristic)",
    "returnType" : "boolean",
    "comment" : "\n     * Reads the requested characteristic from the associated remote device.\n     *\n     * <p>This is an asynchronous operation. The result of the read operation is reported by the\n     * {@link BluetoothGattCallback#onCharacteristicRead(BluetoothGatt, BluetoothGattCharacteristic,\n     * byte[], int)} callback.\n     *\n     * @param characteristic Characteristic to read from the remote device\n     * @return true, if the read operation was initiated successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onCharacteristicRead(BluetoothGatt" ]
  }, {
    "name" : "public boolean readUsingCharacteristicUuid(UUID uuid, int startHandle, int endHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Reads the characteristic using its UUID from the associated remote device.\n     *\n     * <p>This is an asynchronous operation. The result of the read operation is reported by the\n     * {@link BluetoothGattCallback#onCharacteristicRead(BluetoothGatt, BluetoothGattCharacteristic,\n     * byte[], int)} callback.\n     *\n     * @param uuid UUID of characteristic to read from the remote device\n     * @return true, if the read operation was initiated successfully\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onCharacteristicRead(BluetoothGatt" ]
  }, {
    "name" : "public boolean writeCharacteristic(BluetoothGattCharacteristic characteristic)",
    "returnType" : "boolean",
    "comment" : "\n     * Writes a given characteristic and its values to the associated remote device.\n     *\n     * <p>Once the write operation has been completed, the {@link\n     * BluetoothGattCallback#onCharacteristicWrite} callback is invoked, reporting the result of the\n     * operation.\n     *\n     * @param characteristic Characteristic to write on the remote device\n     * @return true, if the write operation was initiated successfully\n     * @throws IllegalArgumentException if characteristic or its value are null\n     * @deprecated Use {@link BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[],\n     *     int)} as this is not memory safe because it relies on a {@link\n     *     BluetoothGattCharacteristic} object whose underlying fields are subject to change outside\n     *     this method.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCharacteristic", "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "android.bluetooth.BluetoothGattCallback#onCharacteristicWrite" ]
  }, {
    "name" : "public int writeCharacteristic(@NonNull BluetoothGattCharacteristic characteristic, @NonNull byte[] value, @WriteType int writeType)",
    "returnType" : "int",
    "comment" : "\n     * Writes a given characteristic and its values to the associated remote device.\n     *\n     * <p>Once the write operation has been completed, the {@link\n     * BluetoothGattCallback#onCharacteristicWrite} callback is invoked, reporting the result of the\n     * operation.\n     *\n     * @param characteristic Characteristic to write on the remote device\n     * @return whether the characteristic was successfully written to\n     * @throws IllegalArgumentException if characteristic or value are null\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onCharacteristicWrite" ]
  }, {
    "name" : "public boolean readDescriptor(BluetoothGattDescriptor descriptor)",
    "returnType" : "boolean",
    "comment" : "\n     * Reads the value for a given descriptor from the associated remote device.\n     *\n     * <p>Once the read operation has been completed, the {@link\n     * BluetoothGattCallback#onDescriptorRead} callback is triggered, signaling the result of the\n     * operation.\n     *\n     * @param descriptor Descriptor value to read from the remote device\n     * @return true, if the read operation was initiated successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onDescriptorRead" ]
  }, {
    "name" : "public boolean writeDescriptor(BluetoothGattDescriptor descriptor)",
    "returnType" : "boolean",
    "comment" : "\n     * Write the value of a given descriptor to the associated remote device.\n     *\n     * <p>A {@link BluetoothGattCallback#onDescriptorWrite} callback is triggered to report the\n     * result of the write operation.\n     *\n     * @param descriptor Descriptor to write to the associated remote device\n     * @return true, if the write operation was initiated successfully\n     * @throws IllegalArgumentException if descriptor or its value are null\n     * @deprecated Use {@link BluetoothGatt#writeDescriptor(BluetoothGattDescriptor, byte[])} as\n     *     this is not memory safe because it relies on a {@link BluetoothGattDescriptor} object\n     *     whose underlying fields are subject to change outside this method.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattDescriptor", "android.bluetooth.BluetoothGatt#writeDescriptor(BluetoothGattDescriptor", "android.bluetooth.BluetoothGattCallback#onDescriptorWrite" ]
  }, {
    "name" : "public int writeDescriptor(@NonNull BluetoothGattDescriptor descriptor, @NonNull byte[] value)",
    "returnType" : "int",
    "comment" : "\n     * Write the value of a given descriptor to the associated remote device.\n     *\n     * <p>A {@link BluetoothGattCallback#onDescriptorWrite} callback is triggered to report the\n     * result of the write operation.\n     *\n     * @param descriptor Descriptor to write to the associated remote device\n     * @return true, if the write operation was initiated successfully\n     * @throws IllegalArgumentException if descriptor or value are null\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onDescriptorWrite" ]
  }, {
    "name" : "public boolean beginReliableWrite()",
    "returnType" : "boolean",
    "comment" : "\n     * Initiates a reliable write transaction for a given remote device.\n     *\n     * <p>Once a reliable write transaction has been initiated, all calls to {@link\n     * #writeCharacteristic} are sent to the remote device for verification and queued up for atomic\n     * execution. The application will receive a {@link BluetoothGattCallback#onCharacteristicWrite}\n     * callback in response to every {@link #writeCharacteristic(BluetoothGattCharacteristic,\n     * byte[], int)} call and is responsible for verifying if the value has been transmitted\n     * accurately.\n     *\n     * <p>After all characteristics have been queued up and verified, {@link #executeReliableWrite}\n     * will execute all writes. If a characteristic was not written correctly, calling {@link\n     * #abortReliableWrite} will cancel the current transaction without committing any values on the\n     * remote device.\n     *\n     * @return true, if the reliable write transaction has been initiated\n     ",
    "links" : [ "#writeCharacteristic(BluetoothGattCharacteristic", "#executeReliableWrite", "#abortReliableWrite", "#writeCharacteristic", "android.bluetooth.BluetoothGattCallback#onCharacteristicWrite" ]
  }, {
    "name" : "public boolean executeReliableWrite()",
    "returnType" : "boolean",
    "comment" : "\n     * Executes a reliable write transaction for a given remote device.\n     *\n     * <p>This function will commit all queued up characteristic write operations for a given remote\n     * device.\n     *\n     * <p>A {@link BluetoothGattCallback#onReliableWriteCompleted} callback is invoked to indicate\n     * whether the transaction has been executed correctly.\n     *\n     * @return true, if the request to execute the transaction has been sent\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onReliableWriteCompleted" ]
  }, {
    "name" : "public void abortReliableWrite()",
    "returnType" : "void",
    "comment" : "\n     * Cancels a reliable write transaction for a given device.\n     *\n     * <p>Calling this function will discard all queued characteristic write operations for a given\n     * remote device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void abortReliableWrite(BluetoothDevice mDevice)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #abortReliableWrite()}\n     ",
    "links" : [ "#abortReliableWrite()" ]
  }, {
    "name" : "public boolean setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enable)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable or disable notifications/indications for a given characteristic.\n     *\n     * <p>Once notifications are enabled for a characteristic, a {@link\n     * BluetoothGattCallback#onCharacteristicChanged(BluetoothGatt, BluetoothGattCharacteristic,\n     * byte[])} callback will be triggered if the remote device indicates that the given\n     * characteristic has changed.\n     *\n     * @param characteristic The characteristic for which to enable notifications\n     * @param enable Set to true to enable notifications/indications\n     * @return true, if the requested notification status was set successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onCharacteristicChanged(BluetoothGatt" ]
  }, {
    "name" : "public boolean refresh()",
    "returnType" : "boolean",
    "comment" : "\n     * Clears the internal cache and forces a refresh of the services from the remote device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean readRemoteRssi()",
    "returnType" : "boolean",
    "comment" : "\n     * Read the RSSI for a connected remote device.\n     *\n     * <p>The {@link BluetoothGattCallback#onReadRemoteRssi} callback will be invoked when the RSSI\n     * value has been read.\n     *\n     * @return true, if the RSSI value has been requested successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onReadRemoteRssi" ]
  }, {
    "name" : "public boolean requestMtu(int mtu)",
    "returnType" : "boolean",
    "comment" : "\n     * Request an MTU size used for a given connection. Please note that starting from Android 14,\n     * the Android Bluetooth stack requests the BLE ATT MTU to 517 bytes when the first GATT client\n     * requests an MTU, and disregards all subsequent MTU requests. Check out <a\n     * href=\"{@docRoot}about/versions/14/behavior-changes-all#mtu-set-to-517\">MTU is set to 517 for\n     * the first GATT client requesting an MTU</a> for more information.\n     *\n     * <p>When performing a write request operation (write without response), the data sent is\n     * truncated to the MTU size. This function may be used to request a larger MTU size to be able\n     * to send more data at once.\n     *\n     * <p>A {@link BluetoothGattCallback#onMtuChanged} callback will indicate whether this operation\n     * was successful.\n     *\n     * @return true, if the new MTU value has been requested successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onMtuChanged" ]
  }, {
    "name" : "public boolean requestConnectionPriority(int connectionPriority)",
    "returnType" : "boolean",
    "comment" : "\n     * Request a connection parameter update.\n     *\n     * <p>This function will send a connection parameter update request to the remote device.\n     *\n     * @param connectionPriority Request a specific connection priority. Must be one of {@link\n     *     BluetoothGatt#CONNECTION_PRIORITY_BALANCED}, {@link\n     *     BluetoothGatt#CONNECTION_PRIORITY_HIGH} {@link\n     *     BluetoothGatt#CONNECTION_PRIORITY_LOW_POWER}, or {@link\n     *     BluetoothGatt#CONNECTION_PRIORITY_DCK}.\n     * @throws IllegalArgumentException If the parameters are outside of their specified range.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#CONNECTION_PRIORITY_BALANCED", "android.bluetooth.BluetoothGatt#CONNECTION_PRIORITY_LOW_POWER", "android.bluetooth.BluetoothGatt#CONNECTION_PRIORITY_DCK", "android.bluetooth.BluetoothGatt#CONNECTION_PRIORITY_HIGH" ]
  }, {
    "name" : "public boolean requestLeConnectionUpdate(int minConnectionInterval, int maxConnectionInterval, int slaveLatency, int supervisionTimeout, int minConnectionEventLen, int maxConnectionEventLen)",
    "returnType" : "boolean",
    "comment" : "\n     * Request an LE connection parameter update.\n     *\n     * <p>This function will send an LE connection parameters update request to the remote device.\n     *\n     * @return true, if the request is send to the Bluetooth stack.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestSubrateMode(@SubrateRequestMode int subrateMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Request LE subrate mode.\n     *\n     * <p>This function will send a LE subrate request to the remote device.\n     *\n     * @param subrateMode Request a specific subrate mode.\n     * @throws IllegalArgumentException If the parameters are outside of their specified range.\n     * @return true, if the request is send to the Bluetooth stack.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean bleSubrateRequest(int subrateMin, int subrateMax, int maxLatency, int contNumber, int supervisionTimeout)",
    "returnType" : "boolean",
    "comment" : "\n     * Request a LE subrate request.\n     *\n     * <p>This function will send a LE subrate request to the remote device.\n     *\n     * @return true, if the request is send to the Bluetooth stack.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Not supported - please use {@link BluetoothManager#getConnectedDevices(int)} with\n     *     {@link BluetoothProfile#GATT} as argument\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ "android.bluetooth.BluetoothManager#getConnectedDevices(int)", "android.bluetooth.BluetoothProfile#GATT" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * @deprecated Not supported - please use {@link BluetoothManager#getConnectedDevices(int)} with\n     *     {@link BluetoothProfile#GATT} as argument\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ "android.bluetooth.BluetoothManager#getConnectedDevices(int)", "android.bluetooth.BluetoothProfile#GATT" ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * @deprecated Not supported - please use {@link\n     *     BluetoothManager#getDevicesMatchingConnectionStates(int, int[])} with {@link\n     *     BluetoothProfile#GATT} as first argument\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ "android.bluetooth.BluetoothManager#getDevicesMatchingConnectionStates(int", "android.bluetooth.BluetoothProfile#GATT" ]
  } ],
  "methodNames" : [ "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "public BluetoothAdapter getAdapter()", "public void close()", " BluetoothGattService getService(BluetoothDevice device, UUID uuid, int instanceId)", " BluetoothGattCharacteristic getCharacteristicById(BluetoothDevice device, int instanceId)", " BluetoothGattDescriptor getDescriptorById(BluetoothDevice device, int instanceId)", "private void runOrQueueCallback(final Runnable cb)", "private boolean registerApp(BluetoothGattCallback callback, Handler handler)", "private boolean registerApp(BluetoothGattCallback callback, Handler handler, boolean eattSupport)", "private void unregisterApp()", " boolean connect(Boolean autoConnect, BluetoothGattCallback callback, Handler handler)", "public void disconnect()", "public boolean connect()", "public void setPreferredPhy(int txPhy, int rxPhy, int phyOptions)", "public void readPhy()", "public BluetoothDevice getDevice()", "public boolean discoverServices()", "public boolean discoverServiceByUuid(UUID uuid)", "public List<BluetoothGattService> getServices()", "public BluetoothGattService getService(UUID uuid)", "public boolean readCharacteristic(BluetoothGattCharacteristic characteristic)", "public boolean readUsingCharacteristicUuid(UUID uuid, int startHandle, int endHandle)", "public boolean writeCharacteristic(BluetoothGattCharacteristic characteristic)", "public int writeCharacteristic(@NonNull BluetoothGattCharacteristic characteristic, @NonNull byte[] value, @WriteType int writeType)", "public boolean readDescriptor(BluetoothGattDescriptor descriptor)", "public boolean writeDescriptor(BluetoothGattDescriptor descriptor)", "public int writeDescriptor(@NonNull BluetoothGattDescriptor descriptor, @NonNull byte[] value)", "public boolean beginReliableWrite()", "public boolean executeReliableWrite()", "public void abortReliableWrite()", "public void abortReliableWrite(BluetoothDevice mDevice)", "public boolean setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enable)", "public boolean refresh()", "public boolean readRemoteRssi()", "public boolean requestMtu(int mtu)", "public boolean requestConnectionPriority(int connectionPriority)", "public boolean requestLeConnectionUpdate(int minConnectionInterval, int maxConnectionInterval, int slaveLatency, int supervisionTimeout, int minConnectionEventLen, int maxConnectionEventLen)", "public boolean requestSubrateMode(@SubrateRequestMode int subrateMode)", "public boolean bleSubrateRequest(int subrateMin, int subrateMax, int maxLatency, int contNumber, int supervisionTimeout)", "public int getConnectionState(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mService", "mCallback", "mHandler", "mClientIf", "mDevice", "mAutoConnect", "mAuthRetryState", "mConnState", "mStateLock", "mDeviceBusyLock", "mDeviceBusy", "mTransport", "mPhy", "mOpportunistic", "mAttributionSource", "AUTH_RETRY_STATE_IDLE", "AUTH_RETRY_STATE_MITM", "CONN_STATE_IDLE", "CONN_STATE_CONNECTING", "CONN_STATE_CONNECTED", "CONN_STATE_CLOSED", "WRITE_CHARACTERISTIC_MAX_RETRIES", "WRITE_CHARACTERISTIC_TIME_TO_WAIT", "GATT_MAX_ATTR_LEN", "mServices", "GATT_SUCCESS", "GATT_READ_NOT_PERMITTED", "GATT_WRITE_NOT_PERMITTED", "GATT_INSUFFICIENT_AUTHENTICATION", "GATT_REQUEST_NOT_SUPPORTED", "GATT_INSUFFICIENT_ENCRYPTION", "GATT_INVALID_OFFSET", "GATT_INSUFFICIENT_AUTHORIZATION", "GATT_INVALID_ATTRIBUTE_LENGTH", "GATT_CONNECTION_CONGESTED", "GATT_CONNECTION_TIMEOUT", "GATT_FAILURE", "CONNECTION_PRIORITY_BALANCED", "CONNECTION_PRIORITY_HIGH", "CONNECTION_PRIORITY_LOW_POWER", "CONNECTION_PRIORITY_DCK", "SUBRATE_REQUEST_MODE_BALANCED", "SUBRATE_REQUEST_MODE_HIGH", "SUBRATE_REQUEST_MODE_LOW_POWER", "AUTHENTICATION_NONE", "AUTHENTICATION_NO_MITM", "AUTHENTICATION_MITM", "mBluetoothGattCallback" ]
}