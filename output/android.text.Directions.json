{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/Layout.java",
  "packageName" : "android.text",
  "className" : "Directions",
  "comment" : "\n     * Stores information about bidirectional (left-to-right or right-to-left)\n     * text within the layout of a line.\n     ",
  "variables" : [ {
    "name" : "mDirections",
    "type" : "int[]",
    "comment" : "\n         * Directions represents directional runs within a line of text. Runs are pairs of ints\n         * listed in visual order, starting from the leading margin.  The first int of each pair is\n         * the offset from the first character of the line to the start of the run.  The second int\n         * represents both the length and level of the run. The length is in the lower bits,\n         * accessed by masking with RUN_LENGTH_MASK.  The level is in the higher bits, accessed by\n         * shifting by RUN_LEVEL_SHIFT and masking by RUN_LEVEL_MASK. To simply test for an RTL\n         * direction, test the bit using RUN_RTL_FLAG, if set then the direction is rtl.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getRunCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns number of BiDi runs.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRunStart(@IntRange(from = 0) int runIndex)",
    "returnType" : "int",
    "comment" : "\n         * Returns the start offset of the BiDi run.\n         *\n         * @param runIndex the index of the BiDi run\n         * @return the start offset of the BiDi run.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRunLength(@IntRange(from = 0) int runIndex)",
    "returnType" : "int",
    "comment" : "\n         * Returns the length of the BiDi run.\n         *\n         * Note that this method may return too large number due to reducing the number of object\n         * allocations. The too large number means the remaining part is assigned to this run. The\n         * caller must clamp the returned value.\n         *\n         * @param runIndex the index of the BiDi run\n         * @return the length of the BiDi run.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunRtl(int runIndex)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the BiDi run is RTL.\n         *\n         * @param runIndex the index of the BiDi run\n         * @return true if the BiDi run is RTL.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDirections" ],
  "methodNames" : [ "public int getRunCount()", "public int getRunStart(@IntRange(from = 0) int runIndex)", "public int getRunLength(@IntRange(from = 0) int runIndex)", "public boolean isRunRtl(int runIndex)" ]
}