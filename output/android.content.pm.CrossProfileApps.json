{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/CrossProfileApps.java",
  "packageName" : "android.content.pm",
  "className" : "CrossProfileApps",
  "comment" : "\n * Class for handling cross profile operations. Apps can use this class to interact with its\n * instance in any profile that is in {@link #getTargetUserProfiles()}. For example, app can\n * use this class to start its main activity in managed profile.\n ",
  "links" : [ "#getTargetUserProfiles()" ],
  "variables" : [ {
    "name" : "ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast signalling that the receiving app's permission to interact across profiles has\n     * changed. This includes the user, admin, or OEM changing their consent such that the\n     * permission for the app to interact across profiles has changed.\n     *\n     * <p>This broadcast is not sent when other circumstances result in a change to being able to\n     * interact across profiles in practice, such as the profile being turned off or removed, apps\n     * being uninstalled, etc. The methods {@link #canInteractAcrossProfiles()} and {@link\n     * #canRequestInteractAcrossProfiles()} can be used by apps prior to attempting to interact\n     * across profiles or attempting to request user consent to interact across profiles.\n     *\n     * <p>Apps that have set the {@code android:crossProfile} manifest attribute to {@code true}\n     * can receive this broadcast in manifest broadcast receivers. Otherwise, it can only be\n     * received by dynamically-registered broadcast receivers.\n     ",
    "links" : [ "#canRequestInteractAcrossProfiles()", "#canInteractAcrossProfiles()" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ICrossProfileApps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserManager",
    "type" : "UserManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startMainActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser)",
    "returnType" : "void",
    "comment" : "\n     * Starts the specified main activity of the caller package in the specified profile.\n     *\n     * @param component The ComponentName of the activity to launch, it must be exported and has\n     *        action {@link android.content.Intent#ACTION_MAIN}, category\n     *        {@link android.content.Intent#CATEGORY_LAUNCHER}. Otherwise, SecurityException will\n     *        be thrown.\n     * @param targetUser The UserHandle of the profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     ",
    "links" : [ "android.content.Intent#ACTION_MAIN", "android.content.Intent#CATEGORY_LAUNCHER", "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public void startMainActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser, @Nullable Activity callingActivity, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Starts the specified main activity of the caller package in the specified profile, launching\n     * in the specified activity.\n     *\n     * @param component The ComponentName of the activity to launch, it must be exported and has\n     *        action {@link android.content.Intent#ACTION_MAIN}, category\n     *        {@link android.content.Intent#CATEGORY_LAUNCHER}. Otherwise, SecurityException will\n     *        be thrown.\n     * @param targetUser The UserHandle of the profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @param callingActivity The activity to start the new activity from for the purposes of\n     *        deciding which task the new activity should belong to. If {@code null}, the activity\n     *        will always be started in a new task.\n     * @param options The activity options or {@code null}. See {@link android.app.ActivityOptions}.\n     ",
    "links" : [ "android.app.ActivityOptions", "android.content.Intent#ACTION_MAIN", "android.content.Intent#CATEGORY_LAUNCHER", "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public void startActivity(@NonNull Intent intent, @NonNull UserHandle targetUser, @Nullable Activity callingActivity)",
    "returnType" : "void",
    "comment" : "\n     * Starts the specified activity of the caller package in the specified profile.\n     *\n     * <p>The caller must have the {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES},\n     * {@code android.Manifest.permission#INTERACT_ACROSS_USERS}, or {@code\n     * android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission. Both the caller and\n     * target user profiles must be in the same profile group. The target user must be a valid user\n     * returned from {@link #getTargetUserProfiles()}.\n     *\n     * @param intent The intent to launch. A component in the caller package must be specified.\n     * @param targetUser The {@link UserHandle} of the profile; must be one of the users returned by\n     *        {@link #getTargetUserProfiles()} if different to the calling user, otherwise a\n     *        {@link SecurityException} will be thrown.\n     * @param callingActivity The activity to start the new activity from for the purposes of\n     *        passing back any result and deciding which task the new activity should belong to. If\n     *        {@code null}, the activity will always be started in a new task and no result will be\n     *        returned.\n     ",
    "links" : [ "android.os.UserHandle", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public void startActivity(@NonNull Intent intent, @NonNull UserHandle targetUser, @Nullable Activity callingActivity, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Starts the specified activity of the caller package in the specified profile.\n     *\n     * <p>The caller must have the {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES},\n     * {@code android.Manifest.permission#INTERACT_ACROSS_USERS}, or {@code\n     * android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission. Both the caller and\n     * target user profiles must be in the same profile group. The target user must be a valid user\n     * returned from {@link #getTargetUserProfiles()}.\n     *\n     * @param intent The intent to launch. A component in the caller package must be specified.\n     * @param targetUser The {@link UserHandle} of the profile; must be one of the users returned by\n     *        {@link #getTargetUserProfiles()} if different to the calling user, otherwise a\n     *        {@link SecurityException} will be thrown.\n     * @param callingActivity The activity to start the new activity from for the purposes of\n     *        passing back any result and deciding which task the new activity should belong to. If\n     *        {@code null}, the activity will always be started in a new task and no result will be\n     *        returned.\n     * @param options The activity options or {@code null}. See {@link android.app.ActivityOptions}.\n     ",
    "links" : [ "android.app.ActivityOptions", "android.os.UserHandle", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public void startActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser, @Nullable Activity callingActivity, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Starts the specified activity of the caller package in the specified profile. Unlike\n     * {@link #startMainActivity}, this can start any activity of the caller package, not just\n     * the main activity.\n     * The caller must have the {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES}\n     * or {@link android.Manifest.permission#START_CROSS_PROFILE_ACTIVITIES}\n     * permission and both the caller and target user profiles must be in the same profile group.\n     *\n     * @param component The ComponentName of the activity to launch. It must be exported.\n     * @param targetUser The UserHandle of the profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @param callingActivity The activity to start the new activity from for the purposes of\n     *        deciding which task the new activity should belong to. If {@code null}, the activity\n     *        will always be started in a new task.\n     * @param options The activity options or {@code null}. See {@link android.app.ActivityOptions}.\n     * @hide\n     ",
    "links" : [ "android.app.ActivityOptions", "#startMainActivity", "android.Manifest.permission#START_CROSS_PROFILE_ACTIVITIES", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public void startActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser)",
    "returnType" : "void",
    "comment" : "\n     * Starts the specified activity of the caller package in the specified profile. Unlike\n     * {@link #startMainActivity}, this can start any activity of the caller package, not just\n     * the main activity.\n     * The caller must have the {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES}\n     * or {@link android.Manifest.permission#START_CROSS_PROFILE_ACTIVITIES}\n     * permission and both the caller and target user profiles must be in the same profile group.\n     *\n     * @param component The ComponentName of the activity to launch. It must be exported.\n     * @param targetUser The UserHandle of the profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @hide\n     ",
    "links" : [ "#startMainActivity", "android.Manifest.permission#START_CROSS_PROFILE_ACTIVITIES", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public List<UserHandle> getTargetUserProfiles()",
    "returnType" : "List<UserHandle>",
    "comment" : "\n     * Return a list of user profiles that that the caller can use when calling other APIs in this\n     * class.\n     * <p>\n     * A user profile would be considered as a valid target user profile, provided that:\n     * <ul>\n     * <li>It gets caller app installed</li>\n     * <li>It is not equal to the calling user</li>\n     * <li>It is in the same profile group of calling user profile</li>\n     * <li>It is enabled</li>\n     * </ul>\n     *\n     * @see UserManager#getUserProfiles()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfile(@NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified user is a profile, i.e. not the parent user.\n     *\n     * @param userHandle The UserHandle of the target profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @return whether the specified user is a profile.\n     ",
    "links" : [ "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public boolean isManagedProfile(@NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified user is a managed profile.\n     *\n     * @param userHandle The UserHandle of the target profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @return whether the specified user is a managed profile.\n     ",
    "links" : [ "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public CharSequence getProfileSwitchingLabel(@NonNull UserHandle userHandle)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return a label that calling app can show to user for the semantic of profile switching --\n     * launching its own activity in specified user profile. For example, it may return\n     * \"Switch to work\" if the given user handle is the managed profile one.\n     *\n     * @param userHandle The UserHandle of the target profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @return a label that calling app can show user for the semantic of launching its own\n     *         activity in the specified user profile.\n     *\n     * @see #startMainActivity(ComponentName, UserHandle)\n     ",
    "links" : [ "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "private CharSequence getCallingApplicationLabel()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getDefaultCallingApplicationLabel()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getUpdatableProfileSwitchingLabelId(boolean isManagedProfile)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getDefaultProfileSwitchingLabel(boolean isManagedProfile, String label)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getProfileSwitchingIconDrawable(@NonNull UserHandle userHandle)",
    "returnType" : "Drawable",
    "comment" : "\n     * Return a drawable that calling app can show to user for the semantic of profile switching --\n     * launching its own activity in specified user profile. For example, it may return a briefcase\n     * icon if the given user handle is the managed profile one.\n     *\n     * @param userHandle The UserHandle of the target profile, must be one of the users returned by\n     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will\n     *        be thrown.\n     * @return an icon that calling app can show user for the semantic of launching its own\n     *         activity in specified user profile.\n     *\n     * @see #startMainActivity(ComponentName, UserHandle)\n     ",
    "links" : [ "SecurityException", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public boolean canRequestInteractAcrossProfiles()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the calling package can request to navigate the user to\n     * the relevant settings page to request user consent to interact across profiles.\n     *\n     * <p>If {@code true}, the navigation intent can be obtained via {@link\n     * #createRequestInteractAcrossProfilesIntent()}. The package can then listen to {@link\n     * #ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED} broadcasts.\n     *\n     * <p>Specifically, returns whether the following are all true:\n     * <ul>\n     * <li>{@code UserManager#getEnabledProfileIds(int)} returns at least one other profile for the\n     * calling user.</li>\n     * <li>The calling app has requested\n     * {@code android.Manifest.permission.INTERACT_ACROSS_PROFILES} in its manifest.</li>\n     * <li>The calling app is not a profile owner within the profile group of the calling user.</li>\n     * </ul>\n     *\n     * <p>Note that in order for the user to be able to grant the consent, the requesting package\n     * must be allowlisted by the admin or the OEM and installed in the other profile. If this is\n     * not the case the user will be shown a message explaining why they can't grant the consent.\n     *\n     * <p>Note that user consent could already be granted if given a return value of {@code true}.\n     * The package's current ability to interact across profiles can be checked with {@link\n     * #canInteractAcrossProfiles()}.\n     *\n     * @return true if the calling package can request to interact across profiles.\n     ",
    "links" : [ "#createRequestInteractAcrossProfilesIntent()", "#ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED", "#canInteractAcrossProfiles()" ]
  }, {
    "name" : "public boolean canInteractAcrossProfiles()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the calling package can interact across profiles.\n\n     * <p>Specifically, returns whether the following are all true:\n     * <ul>\n     * <li>{@link #getTargetUserProfiles()} returns a non-empty list for the calling user.</li>\n     * <li>The user has previously consented to cross-profile communication for the calling\n     * package.</li>\n     * <li>The calling package has either been allowlisted by default by the OEM or has been\n     * explicitly allowlisted by the admin via\n     * {@link android.app.admin.DevicePolicyManager#setCrossProfilePackages(ComponentName, Set)}.\n     * </li>\n     * </ul>\n     *\n     * <p>If {@code false}, the package's current ability to request user consent to interact across\n     * profiles can be checked with {@link #canRequestInteractAcrossProfiles()}. If {@code true},\n     * user consent can be obtained via {@link #createRequestInteractAcrossProfilesIntent()}. The\n     * package can then listen to {@link #ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED} broadcasts.\n     *\n     * @return true if the calling package can interact across profiles.\n     * @throws SecurityException if {@code mContext.getPackageName()} does not belong to the\n     * calling UID.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#setCrossProfilePackages(ComponentName", "#canRequestInteractAcrossProfiles()", "#createRequestInteractAcrossProfilesIntent()", "#ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED", "#getTargetUserProfiles()" ]
  }, {
    "name" : "public Intent createRequestInteractAcrossProfilesIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@link Intent} to open the settings page that allows the user to decide whether\n     * the calling app can interact across profiles.\n     *\n     * <p>The method {@link #canRequestInteractAcrossProfiles()} must be returning {@code true}.\n     *\n     * <p>Note that the user may already have given consent and the app may already be able to\n     * interact across profiles, even if {@link #canRequestInteractAcrossProfiles()} is {@code\n     * true}. The current ability to interact across profiles is given by {@link\n     * #canInteractAcrossProfiles()}.\n     *\n     * @return an {@link Intent} to open the settings page that allows the user to decide whether\n     * the app can interact across profiles\n     *\n     * @throws SecurityException if {@code mContext.getPackageName()} does not belong to the\n     * calling UID, or {@link #canRequestInteractAcrossProfiles()} is {@code false}.\n     ",
    "links" : [ "#canRequestInteractAcrossProfiles()", "android.content.Intent", "#canInteractAcrossProfiles()" ]
  }, {
    "name" : "public void setInteractAcrossProfilesAppOp(@NonNull String packageName, @Mode int newMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the app-op for {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES} that is\n     * configurable by users in Settings. This configures it for the profile group of the calling\n     * package.\n     *\n     * <p>Before calling, check {@link #canConfigureInteractAcrossProfiles(String)} and do not call\n     * if it is {@code false}. If presenting a user interface, do not allow the user to configure\n     * the app-op in that case.\n     *\n     * <p>The underlying app-op {@link android.app.AppOpsManager#OP_INTERACT_ACROSS_PROFILES} should\n     * never be set directly. This method ensures that the app-op is kept in sync for the app across\n     * each user in the profile group and that those apps are sent a broadcast when their ability to\n     * interact across profiles changes.\n     *\n     * <p>This method should be used directly whenever a user's action results in a change in an\n     * app's ability to interact across profiles, as defined by the return value of {@link\n     * #canInteractAcrossProfiles()}. This includes user consent changes in Settings or during\n     * provisioning.\n     *\n     * <p>If other changes could have affected the app's ability to interact across profiles, as\n     * defined by the return value of {@link #canInteractAcrossProfiles()}, such as changes to the\n     * admin or OEM consent whitelists, then {@link #resetInteractAcrossProfilesAppOps(Collection,\n     * Set)} should be used.\n     *\n     * <p>If the caller does not have the {@link android.Manifest.permission\n     * #CONFIGURE_INTERACT_ACROSS_PROFILES} permission, then they must have the permissions that\n     * would have been required to call {@link android.app.AppOpsManager#setMode(int, int, String,\n     * int)}, which includes {@link android.Manifest.permission#MANAGE_APP_OPS_MODES}.\n     *\n     * <p>Also requires either {@link android.Manifest.permission#INTERACT_ACROSS_USERS} or {@link\n     * android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_APP_OPS_MODES", "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.app.AppOpsManager#OP_INTERACT_ACROSS_PROFILES", "android.Manifest.permission#CONFIGURE_INTERACT_ACROSS_PROFILES", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "#canInteractAcrossProfiles()", "android.app.AppOpsManager#setMode(int", "#resetInteractAcrossProfilesAppOps(Collection", "android.Manifest.permission#INTERACT_ACROSS_USERS", "#canConfigureInteractAcrossProfiles(String)" ]
  }, {
    "name" : "public boolean canConfigureInteractAcrossProfiles(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given package can have its ability to interact across profiles configured\n     * by the user. This means that every other condition to interact across profiles has been set.\n     *\n     * <p>This differs from {@link #canRequestInteractAcrossProfiles()} since it will not return\n     * {@code false} simply when the target profile is disabled.\n     *\n     * @hide\n     ",
    "links" : [ "#canRequestInteractAcrossProfiles()" ]
  }, {
    "name" : "public boolean canUserAttemptToConfigureInteractAcrossProfiles(String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given package has requested\n     * {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES} and the user has at least one\n     * other profile in the same profile group.\n     *\n     * <p>This differs from {@link #canConfigureInteractAcrossProfiles(String)} since it will\n     * not return {@code false} if the app is not allowlisted or not installed in the other profile.\n     *\n     * <p>Note that platform-signed apps that are automatically granted the permission and are not\n     * allowlisted by the OEM will not be included in this list.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "#canConfigureInteractAcrossProfiles(String)" ]
  }, {
    "name" : "public void resetInteractAcrossProfilesAppOps(@NonNull Collection<String> previousCrossProfilePackages, @NonNull Set<String> newCrossProfilePackages)",
    "returnType" : "void",
    "comment" : "\n     * For each of the packages defined in {@code previousCrossProfilePackages} but not included in\n     * {@code newCrossProfilePackages}, resets the app-op for {@link android.Manifest.permission\n     * #INTERACT_ACROSS_PROFILES} back to its default value if it can no longer be configured by\n     * users in Settings, as defined by {@link #canConfigureInteractAcrossProfiles(String)}.\n     *\n     * <p>This method should be used whenever an app's ability to interact across profiles could\n     * have changed as a result of non-user actions, such as changes to admin or OEM consent\n     * whitelists.\n     *\n     * <p>If the caller does not have the {@link android.Manifest.permission\n     * #CONFIGURE_INTERACT_ACROSS_PROFILES} permission, then they must have the permissions that\n     * would have been required to call {@link android.app.AppOpsManager#setMode(int, int, String,\n     * int)}, which includes {@link android.Manifest.permission#MANAGE_APP_OPS_MODES}.\n     *\n     * <p>Also requires either {@link android.Manifest.permission#INTERACT_ACROSS_USERS} or {@link\n     * android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_APP_OPS_MODES", "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.Manifest.permission#CONFIGURE_INTERACT_ACROSS_PROFILES", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "android.app.AppOpsManager#setMode(int", "android.Manifest.permission#INTERACT_ACROSS_USERS", "#canConfigureInteractAcrossProfiles(String)" ]
  }, {
    "name" : "public void clearInteractAcrossProfilesAppOps()",
    "returnType" : "void",
    "comment" : "\n     * Clears the app-op for {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES} back to\n     * its default value for every package on the device.\n     *\n     * <p>This method can be used to ensure that app-op state is not left around on existing users\n     * for previously-configured profiles.\n     *\n     * <p>If the caller does not have the {@link android.Manifest.permission\n     * #CONFIGURE_INTERACT_ACROSS_PROFILES} permission, then they must have the permissions that\n     * would have been required to call {@link android.app.AppOpsManager#setMode(int, int, String,\n     * int)}, which includes {@link android.Manifest.permission#MANAGE_APP_OPS_MODES}.\n     *\n     * <p>Also requires either {@link android.Manifest.permission#INTERACT_ACROSS_USERS} or {@link\n     * android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_APP_OPS_MODES", "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.Manifest.permission#CONFIGURE_INTERACT_ACROSS_PROFILES", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "android.app.AppOpsManager#setMode(int", "android.Manifest.permission#INTERACT_ACROSS_USERS" ]
  }, {
    "name" : "private void verifyCanAccessUser(UserHandle userHandle)",
    "returnType" : "void",
    "comment" : "\n     * A validation method to check that the methods in this class are only being applied to user\n     * handles returned by {@link #getTargetUserProfiles()}. As this is run client-side for\n     * input validation purposes, this should never replace a real security check service-side.\n     ",
    "links" : [ "#getTargetUserProfiles()" ]
  } ],
  "methodNames" : [ "public void startMainActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser)", "public void startMainActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser, @Nullable Activity callingActivity, @Nullable Bundle options)", "public void startActivity(@NonNull Intent intent, @NonNull UserHandle targetUser, @Nullable Activity callingActivity)", "public void startActivity(@NonNull Intent intent, @NonNull UserHandle targetUser, @Nullable Activity callingActivity, @Nullable Bundle options)", "public void startActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser, @Nullable Activity callingActivity, @Nullable Bundle options)", "public void startActivity(@NonNull ComponentName component, @NonNull UserHandle targetUser)", "public List<UserHandle> getTargetUserProfiles()", "public boolean isProfile(@NonNull UserHandle userHandle)", "public boolean isManagedProfile(@NonNull UserHandle userHandle)", "public CharSequence getProfileSwitchingLabel(@NonNull UserHandle userHandle)", "private CharSequence getCallingApplicationLabel()", "private CharSequence getDefaultCallingApplicationLabel()", "private String getUpdatableProfileSwitchingLabelId(boolean isManagedProfile)", "private String getDefaultProfileSwitchingLabel(boolean isManagedProfile, String label)", "public Drawable getProfileSwitchingIconDrawable(@NonNull UserHandle userHandle)", "public boolean canRequestInteractAcrossProfiles()", "public boolean canInteractAcrossProfiles()", "public Intent createRequestInteractAcrossProfilesIntent()", "public void setInteractAcrossProfilesAppOp(@NonNull String packageName, @Mode int newMode)", "public boolean canConfigureInteractAcrossProfiles(@NonNull String packageName)", "public boolean canUserAttemptToConfigureInteractAcrossProfiles(String packageName)", "public void resetInteractAcrossProfilesAppOps(@NonNull Collection<String> previousCrossProfilePackages, @NonNull Set<String> newCrossProfilePackages)", "public void clearInteractAcrossProfilesAppOps()", "private void verifyCanAccessUser(UserHandle userHandle)" ],
  "variableNames" : [ "ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED", "mContext", "mService", "mUserManager", "mResources" ]
}