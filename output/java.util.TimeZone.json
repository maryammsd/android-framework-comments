{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/TimeZone.java",
  "packageName" : "java.util",
  "className" : "TimeZone",
  "comment" : "\n * {@code TimeZone} represents a time zone offset, and also figures out daylight\n * savings.\n *\n * <p>\n * Typically, you get a {@code TimeZone} using {@code getDefault}\n * which creates a {@code TimeZone} based on the time zone where the program\n * is running. For example, for a program running in Japan, {@code getDefault}\n * creates a {@code TimeZone} object based on Japanese Standard Time.\n *\n * <p>\n * You can also get a {@code TimeZone} using {@code getTimeZone}\n * along with a time zone ID. For instance, the time zone ID for the\n * U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a\n * U.S. Pacific Time {@code TimeZone} object with:\n * <blockquote><pre>\n * TimeZone tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n * </pre></blockquote>\n * You can use the {@code getAvailableIDs} method to iterate through\n * all the supported time zone IDs. You can then choose a\n * supported ID to get a {@code TimeZone}.\n * If the time zone you want is not represented by one of the\n * supported IDs, then a custom time zone ID can be specified to\n * produce a TimeZone. The syntax of a custom time zone ID is:\n *\n * <blockquote><pre>\n * <a id=\"CustomID\"><i>CustomID:</i></a>\n *         {@code GMT} <i>Sign</i> <i>Hours</i> {@code :} <i>Minutes</i>\n *         {@code GMT} <i>Sign</i> <i>Hours</i> <i>Minutes</i>\n *         {@code GMT} <i>Sign</i> <i>Hours</i>\n * <i>Sign:</i> one of\n *         {@code + -}\n * <i>Hours:</i>\n *         <i>Digit</i>\n *         <i>Digit</i> <i>Digit</i>\n * <i>Minutes:</i>\n *         <i>Digit</i> <i>Digit</i>\n * <i>Digit:</i> one of\n *         {@code 0 1 2 3 4 5 6 7 8 9}\n * </pre></blockquote>\n *\n * <i>Hours</i> must be between 0 to 23 and <i>Minutes</i> must be\n * between 00 to 59.  For example, \"GMT+10\" and \"GMT+0010\" mean ten\n * hours and ten minutes ahead of GMT, respectively.\n * <p>\n * The format is locale independent and digits must be taken from the\n * Basic Latin block of the Unicode standard. No daylight saving time\n * transition schedule can be specified with a custom time zone ID. If\n * the specified string doesn't match the syntax, {@code \"GMT\"}\n * is used.\n * <p>\n * When creating a {@code TimeZone}, the specified custom time\n * zone ID is normalized in the following syntax:\n * <blockquote><pre>\n * <a id=\"NormalizedCustomID\"><i>NormalizedCustomID:</i></a>\n *         {@code GMT} <i>Sign</i> <i>TwoDigitHours</i> {@code :} <i>Minutes</i>\n * <i>Sign:</i> one of\n *         {@code + -}\n * <i>TwoDigitHours:</i>\n *         <i>Digit</i> <i>Digit</i>\n * <i>Minutes:</i>\n *         <i>Digit</i> <i>Digit</i>\n * <i>Digit:</i> one of\n *         {@code 0 1 2 3 4 5 6 7 8 9}\n * </pre></blockquote>\n * For example, TimeZone.getTimeZone(\"GMT-8\").getID() returns \"GMT-08:00\".\n *\n * <h2>Three-letter time zone IDs</h2>\n *\n * For compatibility with JDK 1.1.x, some other three-letter time zone IDs\n * (such as \"PST\", \"CTT\", \"AST\") are also supported. However, <strong>their\n * use is deprecated</strong> because the same abbreviation is often used\n * for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard\n * Time\" and \"China Standard Time\"), and the Java platform can then only\n * recognize one of them.\n *\n *\n * @see          Calendar\n * @see          GregorianCalendar\n * @see          SimpleTimeZone\n * @author       Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu\n * @since        1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SHORT",
    "type" : "int",
    "comment" : "\n     * A style specifier for {@code getDisplayName()} indicating\n     * a short name, such as \"PST.\"\n     * @see #LONG\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG",
    "type" : "int",
    "comment" : "\n     * A style specifier for {@code getDisplayName()} indicating\n     * a long name, such as \"Pacific Standard Time.\"\n     * @see #SHORT\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Proclaim serialization compatibility with JDK 1.1",
    "links" : [ ]
  }, {
    "name" : "GMT",
    "type" : "TimeZone",
    "comment" : " Android-changed: common timezone instances.",
    "links" : [ ]
  }, {
    "name" : "UTC",
    "type" : "TimeZone",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_TIMEZONE",
    "type" : "TimeZone",
    "comment" : "\n     * The null constant as a TimeZone.\n     ",
    "links" : [ ]
  }, {
    "name" : "ID",
    "type" : "String",
    "comment" : "\n     * The string identifier of this {@code TimeZone}.  This is a\n     * programmatic identifier used internally to look up {@code TimeZone}\n     * objects from the system table and also to map them to their localized\n     * display names.  {@code ID} values are unique in the system\n     * table but may not be for dynamically created zones.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultTimeZone",
    "type" : "TimeZone",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",
    "returnType" : "int",
    "comment" : "\n     * Gets the time zone offset, for current date, modified in case of\n     * daylight savings. This is the offset to add to UTC to get local time.\n     * <p>\n     * This method returns a historically correct offset if an\n     * underlying {@code TimeZone} implementation subclass\n     * supports historical Daylight Saving Time schedule and GMT\n     * offset changes.\n     *\n     * @param era the era of the given date.\n     * @param year the year in the given date.\n     * @param month the month in the given date.\n     * Month is 0-based. e.g., 0 for January.\n     * @param day the day-in-month of the given date.\n     * @param dayOfWeek the day-of-week of the given date.\n     * @param milliseconds the milliseconds in day in <em>standard</em>\n     * local time.\n     *\n     * @return the offset in milliseconds to add to GMT to get local time.\n     *\n     * @see Calendar#ZONE_OFFSET\n     * @see Calendar#DST_OFFSET\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(long date)",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset of this time zone from UTC at the specified\n     * date. If Daylight Saving Time is in effect at the specified\n     * date, the offset value is adjusted with the amount of daylight\n     * saving.\n     * <p>\n     * This method returns a historically correct offset value if an\n     * underlying TimeZone implementation subclass supports historical\n     * Daylight Saving Time schedule and GMT offset changes.\n     *\n     * @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT\n     * @return the amount of time in milliseconds to add to UTC to get local time.\n     *\n     * @see Calendar#ZONE_OFFSET\n     * @see Calendar#DST_OFFSET\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getOffsets(long date, int[] offsets)",
    "returnType" : "int",
    "comment" : "\n     * Gets the raw GMT offset and the amount of daylight saving of this\n     * time zone at the given time.\n     * @param date the milliseconds (since January 1, 1970,\n     * 00:00:00.000 GMT) at which the time zone offset and daylight\n     * saving amount are found\n     * @param offsets an array of int where the raw GMT offset\n     * (offset[0]) and daylight saving amount (offset[1]) are stored,\n     * or null if those values are not needed. The method assumes that\n     * the length of the given array is two or larger.\n     * @return the total amount of the raw GMT offset and daylight\n     * saving at the specified date.\n     *\n     * @see Calendar#ZONE_OFFSET\n     * @see Calendar#DST_OFFSET\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the base time zone offset to GMT.\n     * This is the offset to add to UTC to get local time.\n     * <p>\n     * If an underlying {@code TimeZone} implementation subclass\n     * supports historical GMT offset changes, the specified GMT\n     * offset is set as the latest GMT offset and the difference from\n     * the known latest GMT offset value is used to adjust all\n     * historical GMT offset values.\n     *\n     * @param offsetMillis the given base time zone offset to GMT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getRawOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of time in milliseconds to add to UTC to get\n     * standard time in this time zone. Because this value is not\n     * affected by daylight saving time, it is called <I>raw\n     * offset</I>.\n     * <p>\n     * If an underlying {@code TimeZone} implementation subclass\n     * supports historical GMT offset changes, the method returns the\n     * raw offset value of the current date. In Honolulu, for example,\n     * its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and\n     * this method always returns -36000000 milliseconds (i.e., -10\n     * hours).\n     *\n     * @return the amount of raw offset time in milliseconds to add to UTC.\n     * @see Calendar#ZONE_OFFSET\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getID()",
    "returnType" : "String",
    "comment" : "\n     * Gets the ID of this time zone.\n     * @return the ID of this time zone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setID(String ID)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time zone ID. This does not change any other data in\n     * the time zone object.\n     * @param ID the new time zone ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Returns a long standard time name of this {@code TimeZone} suitable for\n     * presentation to the user in the default locale.\n     *\n     * <p>This method is equivalent to:\n     * <blockquote><pre>\n     * getDisplayName(false, {@link #LONG},\n     *                Locale.getDefault({@link Locale.Category#DISPLAY}))\n     * </pre></blockquote>\n     *\n     * @return the human-readable name of this time zone in the default locale.\n     * @since 1.2\n     * @see #getDisplayName(boolean, int, Locale)\n     * @see Locale#getDefault(Locale.Category)\n     * @see Locale.Category\n     ",
    "links" : [ "#LONG", "Locale.Category#DISPLAY" ]
  }, {
    "name" : "public final String getDisplayName(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a long standard time name of this {@code TimeZone} suitable for\n     * presentation to the user in the specified {@code locale}.\n     *\n     * <p>This method is equivalent to:\n     * <blockquote><pre>\n     * getDisplayName(false, {@link #LONG}, locale)\n     * </pre></blockquote>\n     *\n     * @param locale the locale in which to supply the display name.\n     * @return the human-readable name of this time zone in the given locale.\n     * @throws    NullPointerException if {@code locale} is {@code null}.\n     * @since 1.2\n     * @see #getDisplayName(boolean, int, Locale)\n     ",
    "links" : [ "#LONG" ]
  }, {
    "name" : "public final String getDisplayName(boolean daylight, int style)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name in the specified {@code style} of this {@code TimeZone}\n     * suitable for presentation to the user in the default locale. If the\n     * specified {@code daylight} is {@code true}, a Daylight Saving Time name\n     * is returned (even if this {@code TimeZone} doesn't observe Daylight Saving\n     * Time). Otherwise, a Standard Time name is returned.\n     *\n     * <p>This method is equivalent to:\n     * <blockquote><pre>\n     * getDisplayName(daylight, style,\n     *                Locale.getDefault({@link Locale.Category#DISPLAY}))\n     * </pre></blockquote>\n     *\n     * @param daylight {@code true} specifying a Daylight Saving Time name, or\n     *                 {@code false} specifying a Standard Time name\n     * @param style either {@link #LONG} or {@link #SHORT}\n     * @return the human-readable name of this time zone in the default locale.\n     * @throws    IllegalArgumentException if {@code style} is invalid.\n     * @since 1.2\n     * @see #getDisplayName(boolean, int, Locale)\n     * @see Locale#getDefault(Locale.Category)\n     * @see Locale.Category\n     * @see java.text.DateFormatSymbols#getZoneStrings()\n     ",
    "links" : [ "#SHORT", "Locale.Category#DISPLAY", "#LONG" ]
  }, {
    "name" : "public String getDisplayName(boolean daylightTime, int style, Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link #SHORT short} or {@link #LONG long} name of this time\n     * zone with either standard or daylight time, as written in {@code locale}.\n     * If the name is not available, the result is in the format\n     * {@code GMT[+-]hh:mm}.\n     *\n     * @param daylightTime true for daylight time, false for standard time.\n     * @param style either {@link TimeZone#LONG} or {@link TimeZone#SHORT}.\n     * @param locale the display locale.\n     ",
    "links" : [ "#SHORT", "com.android.icu.util.ExtendedTimeZone#LONG", "com.android.icu.util.ExtendedTimeZone#SHORT", "#LONG" ]
  }, {
    "name" : "public static String createGmtOffsetString(boolean includeGmt, boolean includeMinuteSeparator, int offsetMillis)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of an offset from UTC.\n     *\n     * <p>The format is \"[GMT](+|-)HH[:]MM\". The output is not localized.\n     *\n     * @param includeGmt true to include \"GMT\", false to exclude\n     * @param includeMinuteSeparator true to include the separator between hours and minutes, false\n     *     to exclude.\n     * @param offsetMillis the offset from UTC\n     *\n     * @hide used internally by SimpleDateFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void appendNumber(StringBuilder builder, int count, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDSTSavings()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of time to be added to local standard time\n     * to get local wall clock time.\n     *\n     * <p>The default implementation returns 3600000 milliseconds\n     * (i.e., one hour) if a call to {@link #useDaylightTime()}\n     * returns {@code true}. Otherwise, 0 (zero) is returned.\n     *\n     * <p>If an underlying {@code TimeZone} implementation subclass\n     * supports historical and future Daylight Saving Time schedule\n     * changes, this method returns the amount of saving time of the\n     * last known Daylight Saving Time rule that can be a future\n     * prediction.\n     *\n     * <p>If the amount of saving time at any given time stamp is\n     * required, construct a {@link Calendar} with this {@code\n     * TimeZone} and the time stamp, and call {@link Calendar#get(int)\n     * Calendar.get}{@code (}{@link Calendar#DST_OFFSET}{@code )}.\n     *\n     * @return the amount of saving time in milliseconds\n     * @since 1.4\n     * @see #inDaylightTime(Date)\n     * @see #getOffset(long)\n     * @see #getOffset(int,int,int,int,int,int)\n     * @see Calendar#ZONE_OFFSET\n     ",
    "links" : [ "java.util.Calendar", "java.util.Calendar#DST_OFFSET", "#useDaylightTime()", "java.util.Calendar#get(int)" ]
  }, {
    "name" : "public abstract boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if this {@code TimeZone} uses Daylight Saving Time.\n     *\n     * <p>If an underlying {@code TimeZone} implementation subclass\n     * supports historical and future Daylight Saving Time schedule\n     * changes, this method refers to the last known Daylight Saving Time\n     * rule that can be a future prediction and may not be the same as\n     * the current rule. Consider calling {@link #observesDaylightTime()}\n     * if the current rule should also be taken into account.\n     *\n     * @return {@code true} if this {@code TimeZone} uses Daylight Saving Time,\n     *         {@code false}, otherwise.\n     * @see #inDaylightTime(Date)\n     * @see Calendar#DST_OFFSET\n     ",
    "links" : [ "#observesDaylightTime()" ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this {@code TimeZone} is currently in\n     * Daylight Saving Time, or if a transition from Standard Time to\n     * Daylight Saving Time occurs at any future time.\n     *\n     * <p>The default implementation returns {@code true} if\n     * {@code useDaylightTime()} or {@code inDaylightTime(new Date())}\n     * returns {@code true}.\n     *\n     * @return {@code true} if this {@code TimeZone} is currently in\n     * Daylight Saving Time, or if a transition from Standard Time to\n     * Daylight Saving Time occurs at any future time; {@code false}\n     * otherwise.\n     * @since 1.7\n     * @see #useDaylightTime()\n     * @see #inDaylightTime(Date)\n     * @see Calendar#DST_OFFSET\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if the given {@code date} is in Daylight Saving Time in\n     * this time zone.\n     *\n     * @param date the given Date.\n     * @return {@code true} if the given date is in Daylight Saving Time,\n     *         {@code false}, otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized TimeZone getTimeZone(String id)",
    "returnType" : "TimeZone",
    "comment" : " Android-changed: param s/ID/id; use ZoneInfoDb instead of ZoneInfo class.",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone getTimeZone(ZoneId zoneId)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the {@code TimeZone} for the given {@code zoneId}.\n     *\n     * @param zoneId a {@link ZoneId} from which the time zone ID is obtained\n     * @return the specified {@code TimeZone}, or the GMT zone if the given ID\n     *         cannot be understood.\n     * @throws NullPointerException if {@code zoneId} is {@code null}\n     * @since 1.8\n     ",
    "links" : [ "java.time.ZoneId" ]
  }, {
    "name" : "public ZoneId toZoneId()",
    "returnType" : "ZoneId",
    "comment" : "\n     * Converts this {@code TimeZone} object to a {@code ZoneId}.\n     *\n     * @return a {@code ZoneId} representing the same time zone as this\n     *         {@code TimeZone}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TimeZone getCustomTimeZone(String id)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns a new SimpleTimeZone for an ID of the form \"GMT[+|-]hh[[:]mm]\", or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized String[] getAvailableIDs(int rawOffset)",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the available IDs according to the given time zone offset in milliseconds.\n     *\n     * @param rawOffset the given time zone GMT offset in milliseconds.\n     * @return an array of IDs, where the time zone for that ID has\n     * the specified GMT offset. For example, \"America/Phoenix\" and \"America/Denver\"\n     * both have GMT-07:00, but differ in daylight saving behavior.\n     * @see #getRawOffset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized String[] getAvailableIDs()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets all the available IDs supported.\n     * @return an array of IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native String getSystemTimeZoneID(String javaHome, String country)",
    "returnType" : "String",
    "comment" : "\n     * Gets the platform defined TimeZone ID.\n     *",
    "links" : [ ]
  }, {
    "name" : "private static native String getSystemGMTOffsetID()",
    "returnType" : "String",
    "comment" : "\n     * Gets the custom time zone ID based on the GMT offset of the\n     * platform. (e.g., \"GMT+08:00\")\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZone getDefault()",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the default <code>TimeZone</code> for this host.\n     * The source of the default <code>TimeZone</code>\n     * may vary with implementation.\n     * @return a default <code>TimeZone</code>.\n     * @see #setDefault\n     ",
    "links" : [ ]
  }, {
    "name" : " static synchronized TimeZone getDefaultRef()",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns the reference to the default TimeZone object. This\n     * method doesn't create a clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setDefault(TimeZone timeZone)",
    "returnType" : "void",
    "comment" : " Android-changed: s/zone/timeZone, synchronized, removed mention of SecurityException",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSameRules(TimeZone other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this zone has the same rule and offset as another zone.\n     * That is, if this zone differs only in ID, if at all.  Returns false\n     * if the other zone is null.\n     * @param other the {@code TimeZone} object to be compared with\n     * @return true if the other zone is not null and is the same as this one,\n     * with the possible exception of the ID\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Creates a copy of this {@code TimeZone}.\n     *\n     * @return a clone of this {@code TimeZone}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)", "public int getOffset(long date)", " int getOffsets(long date, int[] offsets)", "public abstract void setRawOffset(int offsetMillis)", "public abstract int getRawOffset()", "public String getID()", "public void setID(String ID)", "public final String getDisplayName()", "public final String getDisplayName(Locale locale)", "public final String getDisplayName(boolean daylight, int style)", "public String getDisplayName(boolean daylightTime, int style, Locale locale)", "public static String createGmtOffsetString(boolean includeGmt, boolean includeMinuteSeparator, int offsetMillis)", "private static void appendNumber(StringBuilder builder, int count, int value)", "public int getDSTSavings()", "public abstract boolean useDaylightTime()", "public boolean observesDaylightTime()", "public abstract boolean inDaylightTime(Date date)", "public static synchronized TimeZone getTimeZone(String id)", "public static TimeZone getTimeZone(ZoneId zoneId)", "public ZoneId toZoneId()", "private static TimeZone getCustomTimeZone(String id)", "public static synchronized String[] getAvailableIDs(int rawOffset)", "public static synchronized String[] getAvailableIDs()", "private static native String getSystemTimeZoneID(String javaHome, String country)", "private static native String getSystemGMTOffsetID()", "public static TimeZone getDefault()", " static synchronized TimeZone getDefaultRef()", "public static synchronized void setDefault(TimeZone timeZone)", "public boolean hasSameRules(TimeZone other)", "public Object clone()" ],
  "variableNames" : [ "SHORT", "LONG", "serialVersionUID", "GMT", "UTC", "NO_TIMEZONE", "ID", "defaultTimeZone" ]
}