{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/BluetoothLeAdvertiser.java",
  "packageName" : "android.bluetooth.le",
  "className" : "BluetoothLeAdvertiser",
  "comment" : "\n * This class provides a way to perform Bluetooth LE advertise operations, such as starting and\n * stopping advertising. An advertiser can broadcast up to 31 bytes of advertisement data\n * represented by {@link AdvertiseData}.\n * <p>\n * To get an instance of {@link BluetoothLeAdvertiser}, call the\n * {@link BluetoothAdapter#getBluetoothLeAdvertiser()} method.\n * <p>\n * <b>Note:</b> Most of the methods here require {@link android.Manifest.permission#BLUETOOTH_ADMIN}\n * permission.\n *\n * @see AdvertiseData\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ADVERTISING_DATA_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LEGACY_ADVERTISING_DATA_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OVERHEAD_BYTES_PER_FIELD",
    "type" : "int",
    "comment" : " Each fields need one byte for field length and another byte for field type.",
    "links" : [ ]
  }, {
    "name" : "FLAGS_FIELD_BYTES",
    "type" : "int",
    "comment" : " Flags field will be set by system.",
    "links" : [ ]
  }, {
    "name" : "MANUFACTURER_SPECIFIC_DATA_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothManager",
    "type" : "IBluetoothManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyAdvertisers",
    "type" : "Map<AdvertiseCallback, AdvertisingSetCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackWrappers",
    "type" : "Map<AdvertisingSetCallback, IAdvertisingSetCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertisingSets",
    "type" : "Map<Integer, AdvertisingSet>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startAdvertising(AdvertiseSettings settings, AdvertiseData advertiseData, final AdvertiseCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start Bluetooth LE Advertising. On success, the {@code advertiseData} will be broadcasted.\n     * Returns immediately, the operation status is delivered through {@code callback}.\n     * <p>\n     * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param settings Settings for Bluetooth LE advertising.\n     * @param advertiseData Advertisement data to be broadcasted.\n     * @param callback Callback for advertising status.\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public void startAdvertising(AdvertiseSettings settings, AdvertiseData advertiseData, AdvertiseData scanResponse, final AdvertiseCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start Bluetooth LE Advertising. The {@code advertiseData} will be broadcasted if the\n     * operation succeeds. The {@code scanResponse} is returned when a scanning device sends an\n     * active scan request. This method returns immediately, the operation status is delivered\n     * through {@code callback}.\n     * <p>\n     * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}\n     *\n     * @param settings Settings for Bluetooth LE advertising.\n     * @param advertiseData Advertisement data to be advertised in advertisement packet.\n     * @param scanResponse Scan response associated with the advertisement data.\n     * @param callback Callback for advertising status.\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : " AdvertisingSetCallback wrapOldCallback(AdvertiseCallback callback, AdvertiseSettings settings)",
    "returnType" : "AdvertisingSetCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopAdvertising(final AdvertiseCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Stop Bluetooth LE advertising. The {@code callback} must be the same one use in\n     * {@link BluetoothLeAdvertiser#startAdvertising}.\n     * <p>\n     * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param callback {@link AdvertiseCallback} identifies the advertising instance to stop.\n     ",
    "links" : [ "BluetoothLeAdvertiser#startAdvertising", "android.Manifest.permission#BLUETOOTH_ADMIN", "AdvertiseCallback" ]
  }, {
    "name" : "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, AdvertisingSetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new advertising set. If operation succeed, device will start advertising. This\n     * method returns immediately, the operation status is delivered through\n     * {@code callback.onAdvertisingSetStarted()}.\n     * <p>\n     *\n     * @param parameters advertising set parameters.\n     * @param advertiseData Advertisement data to be broadcasted. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the advertisement is connectable,\n     * three bytes will be added for flags.\n     * @param scanResponse Scan response associated with the advertisement data. Size must not\n     * exceed {@link BluetoothAdapter#getLeMaximumAdvertisingDataLength}.\n     * @param periodicParameters periodic advertisng parameters. If null, periodic advertising will\n     * not be started.\n     * @param periodicData Periodic advertising data. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}.\n     * @param callback Callback for advertising set.\n     * @throws IllegalArgumentException when any of the data parameter exceed the maximum allowable\n     * size, or unsupported advertising PHY is selected, or when attempt to use Periodic Advertising\n     * feature is made when it's not supported by the controller.\n     ",
    "links" : [ "BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, AdvertisingSetCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new advertising set. If operation succeed, device will start advertising. This\n     * method returns immediately, the operation status is delivered through\n     * {@code callback.onAdvertisingSetStarted()}.\n     * <p>\n     *\n     * @param parameters advertising set parameters.\n     * @param advertiseData Advertisement data to be broadcasted. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the advertisement is connectable,\n     * three bytes will be added for flags.\n     * @param scanResponse Scan response associated with the advertisement data. Size must not\n     * exceed {@link BluetoothAdapter#getLeMaximumAdvertisingDataLength}.\n     * @param periodicParameters periodic advertisng parameters. If null, periodic advertising will\n     * not be started.\n     * @param periodicData Periodic advertising data. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}.\n     * @param callback Callback for advertising set.\n     * @param handler thread upon which the callbacks will be invoked.\n     * @throws IllegalArgumentException when any of the data parameter exceed the maximum allowable\n     * size, or unsupported advertising PHY is selected, or when attempt to use Periodic Advertising\n     * feature is made when it's not supported by the controller.\n     ",
    "links" : [ "BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, int duration, int maxExtendedAdvertisingEvents, AdvertisingSetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new advertising set. If operation succeed, device will start advertising. This\n     * method returns immediately, the operation status is delivered through\n     * {@code callback.onAdvertisingSetStarted()}.\n     * <p>\n     *\n     * @param parameters advertising set parameters.\n     * @param advertiseData Advertisement data to be broadcasted. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the advertisement is connectable,\n     * three bytes will be added for flags.\n     * @param scanResponse Scan response associated with the advertisement data. Size must not\n     * exceed {@link BluetoothAdapter#getLeMaximumAdvertisingDataLength}.\n     * @param periodicParameters periodic advertisng parameters. If null, periodic advertising will\n     * not be started.\n     * @param periodicData Periodic advertising data. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}.\n     * @param duration advertising duration, in 10ms unit. Valid range is from 1 (10ms) to 65535\n     * (655,350 ms). 0 means advertising should continue until stopped.\n     * @param maxExtendedAdvertisingEvents maximum number of extended advertising events the\n     * controller shall attempt to send prior to terminating the extended advertising, even if the\n     * duration has not expired. Valid range is from 1 to 255. 0 means no maximum.\n     * @param callback Callback for advertising set.\n     * @throws IllegalArgumentException when any of the data parameter exceed the maximum allowable\n     * size, or unsupported advertising PHY is selected, or when attempt to use Periodic Advertising\n     * feature is made when it's not supported by the controller.\n     ",
    "links" : [ "BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, int duration, int maxExtendedAdvertisingEvents, AdvertisingSetCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new advertising set. If operation succeed, device will start advertising. This\n     * method returns immediately, the operation status is delivered through\n     * {@code callback.onAdvertisingSetStarted()}.\n     * <p>\n     *\n     * @param parameters Advertising set parameters.\n     * @param advertiseData Advertisement data to be broadcasted. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the advertisement is connectable,\n     * three bytes will be added for flags.\n     * @param scanResponse Scan response associated with the advertisement data. Size must not\n     * exceed {@link BluetoothAdapter#getLeMaximumAdvertisingDataLength}\n     * @param periodicParameters Periodic advertisng parameters. If null, periodic advertising will\n     * not be started.\n     * @param periodicData Periodic advertising data. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}\n     * @param duration advertising duration, in 10ms unit. Valid range is from 1 (10ms) to 65535\n     * (655,350 ms). 0 means advertising should continue until stopped.\n     * @param maxExtendedAdvertisingEvents maximum number of extended advertising events the\n     * controller shall attempt to send prior to terminating the extended advertising, even if the\n     * duration has not expired. Valid range is from 1 to 255. 0 means no maximum.\n     * @param callback Callback for advertising set.\n     * @param handler Thread upon which the callbacks will be invoked.\n     * @throws IllegalArgumentException When any of the data parameter exceed the maximum allowable\n     * size, or unsupported advertising PHY is selected, or when attempt to use Periodic Advertising\n     * feature is made when it's not supported by the controller, or when\n     * maxExtendedAdvertisingEvents is used on a controller that doesn't support the LE Extended\n     * Advertising\n     ",
    "links" : [ "BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void stopAdvertisingSet(AdvertisingSetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Used to dispose of a {@link AdvertisingSet} object, obtained with {@link\n     * BluetoothLeAdvertiser#startAdvertisingSet}.\n     ",
    "links" : [ "AdvertisingSet" ]
  }, {
    "name" : "public void cleanup()",
    "returnType" : "void",
    "comment" : "\n     * Cleans up advertisers. Should be called when bluetooth is down.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int totalBytes(AdvertiseData data, boolean isFlagsIncluded)",
    "returnType" : "int",
    "comment" : " Compute the size of advertisement data or scan resp",
    "links" : [ ]
  }, {
    "name" : "private int byteLength(byte[] array)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " IAdvertisingSetCallback wrap(AdvertisingSetCallback callback, Handler handler)",
    "returnType" : "IAdvertisingSetCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postStartSetFailure(Handler handler, final AdvertisingSetCallback callback, final int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postStartFailure(final AdvertiseCallback callback, final int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postStartSuccess(final AdvertiseCallback callback, final AdvertiseSettings settings)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MAX_ADVERTISING_DATA_BYTES", "MAX_LEGACY_ADVERTISING_DATA_BYTES", "OVERHEAD_BYTES_PER_FIELD", "FLAGS_FIELD_BYTES", "MANUFACTURER_SPECIFIC_DATA_LENGTH", "mBluetoothManager", "mHandler", "mBluetoothAdapter", "mLegacyAdvertisers", "mCallbackWrappers", "mAdvertisingSets" ],
  "methodNames" : [ "public void startAdvertising(AdvertiseSettings settings, AdvertiseData advertiseData, final AdvertiseCallback callback)", "public void startAdvertising(AdvertiseSettings settings, AdvertiseData advertiseData, AdvertiseData scanResponse, final AdvertiseCallback callback)", " AdvertisingSetCallback wrapOldCallback(AdvertiseCallback callback, AdvertiseSettings settings)", "public void stopAdvertising(final AdvertiseCallback callback)", "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, AdvertisingSetCallback callback)", "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, AdvertisingSetCallback callback, Handler handler)", "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, int duration, int maxExtendedAdvertisingEvents, AdvertisingSetCallback callback)", "public void startAdvertisingSet(AdvertisingSetParameters parameters, AdvertiseData advertiseData, AdvertiseData scanResponse, PeriodicAdvertisingParameters periodicParameters, AdvertiseData periodicData, int duration, int maxExtendedAdvertisingEvents, AdvertisingSetCallback callback, Handler handler)", "public void stopAdvertisingSet(AdvertisingSetCallback callback)", "public void cleanup()", "private int totalBytes(AdvertiseData data, boolean isFlagsIncluded)", "private int byteLength(byte[] array)", " IAdvertisingSetCallback wrap(AdvertisingSetCallback callback, Handler handler)", "private void postStartSetFailure(Handler handler, final AdvertisingSetCallback callback, final int error)", "private void postStartFailure(final AdvertiseCallback callback, final int error)", "private void postStartSuccess(final AdvertiseCallback callback, final AdvertiseSettings settings)" ]
}