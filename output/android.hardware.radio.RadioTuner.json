{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/radio/RadioTuner.java",
  "packageName" : "android.hardware.radio",
  "className" : "RadioTuner",
  "comment" : "\n * RadioTuner interface provides methods to control a radio tuner on the device: selecting and\n * configuring the active band, muting/unmuting, scanning and tuning, etc...\n *\n * Obtain a RadioTuner interface by calling {@link RadioManager#openTuner(int,\n * RadioManager.BandConfig, boolean, RadioTuner.Callback, Handler)}.\n * @hide\n ",
  "links" : [ "android.hardware.radio.RadioManager#openTuner(int" ],
  "variables" : [ {
    "name" : "DIRECTION_UP",
    "type" : "int",
    "comment" : " Scanning direction UP for {@link #step(int, boolean)}, {@link #scan(int, boolean)} ",
    "links" : [ "#scan(int", "#step(int" ]
  }, {
    "name" : "DIRECTION_DOWN",
    "type" : "int",
    "comment" : " Scanning directions DOWN for {@link #step(int, boolean)}, {@link #scan(int, boolean)} ",
    "links" : [ "#scan(int", "#step(int" ]
  }, {
    "name" : "ERROR_HARDWARE_FAILURE",
    "type" : "int",
    "comment" : " Indicates a failure of radio IC or driver.\n     *\n     * <p>The application must close and re open the tuner\n     *\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "ERROR_SERVER_DIED",
    "type" : "int",
    "comment" : " Indicates a failure of the radio service.\n     *\n     * <p>The application must close and re open the tuner\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "ERROR_CANCELLED",
    "type" : "int",
    "comment" : " A pending seek or tune operation was cancelled\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "ERROR_SCAN_TIMEOUT",
    "type" : "int",
    "comment" : " A pending seek or tune operation timed out\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "ERROR_CONFIG",
    "type" : "int",
    "comment" : " The requested configuration could not be applied\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "ERROR_BACKGROUND_SCAN_UNAVAILABLE",
    "type" : "int",
    "comment" : " Background scan was interrupted due to hardware becoming temporarily unavailable.\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "ERROR_BACKGROUND_SCAN_FAILED",
    "type" : "int",
    "comment" : " Background scan failed due to other error, ie. HW failure.\n     * @deprecated See {@link RadioTuner.Callback#onError(int)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onError(int)" ]
  }, {
    "name" : "TUNER_RESULT_OK",
    "type" : "int",
    "comment" : " Result when a tune, seek, or step operation runs without error.\n     ",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESULT_INTERNAL_ERROR",
    "type" : "int",
    "comment" : " Result when internal error occurs in HAL.\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "TUNER_RESULT_INVALID_ARGUMENTS",
    "type" : "int",
    "comment" : " Result used when the input argument for the method is invalid.\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "TUNER_RESULT_INVALID_STATE",
    "type" : "int",
    "comment" : " Result when HAL is of invalid state.\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "TUNER_RESULT_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " Result when the operation is not supported.\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "TUNER_RESULT_TIMEOUT",
    "type" : "int",
    "comment" : " Result when a tune, seek, or step operation is timeout\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "TUNER_RESULT_CANCELED",
    "type" : "int",
    "comment" : " Result when a tune, seek, or step operation is canceled before processed.\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "TUNER_RESULT_UNKNOWN_ERROR",
    "type" : "int",
    "comment" : " Result when a tune, seek, or step operation fails due to unknown error.\n     * See {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} callback.\n     ",
    "links" : [ "RadioTuner.Callback#onTuneFailed(int" ]
  } ],
  "methods" : [ {
    "name" : "public abstract void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the tuner interface.\n     *\n     * <p>The {@link Callback} callback will not be called anymore and associated resources will be\n     * released. Must be called when the tuner is not needed to make hardware resources available\n     * to others.\n     * ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public abstract int setConfiguration(RadioManager.BandConfig config)",
    "returnType" : "int",
    "comment" : "\n     * Set the active band configuration for this module.\n     *\n     * <p>Must be a valid configuration obtained via buildConfig() from a valid BandDescriptor\n     * listed in the ModuleProperties of the module with the specified ID.\n     *\n     * @param config The desired band configuration (FmBandConfig or AmBandConfig).\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     * @deprecated Only applicable for HAL 1.x.\n     ",
    "links" : [ "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE" ]
  }, {
    "name" : "public abstract int getConfiguration(RadioManager.BandConfig[] config)",
    "returnType" : "int",
    "comment" : "\n     * Get current configuration.\n     *\n     * @param config a BandConfig array of lengh 1 where the configuration is returned.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     *\n     * @deprecated Only applicable for HAL 1.x.\n     ",
    "links" : [ "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE" ]
  }, {
    "name" : "public abstract int setMute(boolean mute)",
    "returnType" : "int",
    "comment" : "\n     * Set mute state.\n     *\n     * <p>When muted, the radio tuner audio source is not available for playback on\n     * any audio device. when unmuted, the radio tuner audio source is output as a media source\n     * and renderd over the audio device selected for media use case.\n     * The radio tuner audio source is muted by default when the tuner is first attached.\n     * Only effective if the tuner is attached with audio enabled.\n     *\n     * @param mute the requested mute state.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     ",
    "links" : [ "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR" ]
  }, {
    "name" : "public abstract boolean getMute()",
    "returnType" : "boolean",
    "comment" : "\n     * Get mute state.\n     *\n     * @return {@code true} if the radio tuner audio source is muted or a problem occured\n     * retrieving the mute state, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int step(int direction, boolean skipSubChannel)",
    "returnType" : "int",
    "comment" : "\n     * Step up or down by one channel spacing.\n     *\n     * <p>The operation is asynchronous and {@link Callback#onProgramInfoChanged}\n     * will be called when step completes or {@link Callback#onTuneFailed}\n     * when timeout or canceled.\n     *\n     * <p>When this operation is called by users other than current user or system user, it is\n     * ignored silently.\n     *\n     * @param direction {@link #DIRECTION_UP} or {@link #DIRECTION_DOWN}.\n     * @param skipSubChannel indicates to skip sub channels when the configuration currently\n     * selected supports sub channel (e.g HD Radio). N/A otherwise.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     ",
    "links" : [ "#onTuneFailed", "#DIRECTION_DOWN", "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE", "#DIRECTION_UP", "#onProgramInfoChanged" ]
  }, {
    "name" : "public abstract int scan(int direction, boolean skipSubChannel)",
    "returnType" : "int",
    "comment" : "\n     * Scan up or down to next valid station.\n     *\n     * <p>The operation is asynchronous and {@link Callback#onProgramInfoChanged}\n     * will be called when scan completes or {@link Callback#onTuneFailed}\n     * when timeout or canceled.\n     *\n     * <p>When this operation is called by users other than current user or system user, it is\n     * ignored silently.\n     *\n     * @param direction {@link #DIRECTION_UP} or {@link #DIRECTION_DOWN}.\n     * @param skipSubChannel indicates to skip sub channels when the configuration currently\n     * selected supports sub channel (e.g HD Radio). N/A otherwise.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     * @deprecated Use {@link #seek(int, boolean)} instead.\n     ",
    "links" : [ "#onTuneFailed", "#DIRECTION_DOWN", "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "#seek(int", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE", "#DIRECTION_UP", "#onProgramInfoChanged" ]
  }, {
    "name" : "public int seek(int direction, boolean skipSubChannel)",
    "returnType" : "int",
    "comment" : "\n     * Seek up or down to next valid station.\n     *\n     * <p>The operation is asynchronous and {@link Callback#onProgramInfoChanged}\n     * will be called when seek completes or {@link Callback#onTuneFailed}\n     * when timeout or canceled.\n     *\n     * <p>When this operation is called by users other than current user or system user, it is\n     * ignore silently.\n     *\n     * @param direction {@link #DIRECTION_UP} or {@link #DIRECTION_DOWN}.\n     * @param skipSubChannel indicates to skip sub channels when the configuration currently\n     * selected supports sub channel (e.g HD Radio). N/A otherwise.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     ",
    "links" : [ "#onTuneFailed", "#DIRECTION_DOWN", "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE", "#DIRECTION_UP", "#onProgramInfoChanged" ]
  }, {
    "name" : "public abstract int tune(int channel, int subChannel)",
    "returnType" : "int",
    "comment" : "\n     * Tune to a specific frequency.\n     *\n     * <p>The operation is asynchronous and {@link Callback#onProgramInfoChanged}\n     * will be called when tune completes or {@link Callback#onTuneFailed}\n     * when timeout or canceled.\n     *\n     * <p>When this operation is called by users other than current user or system user, it is\n     * ignored silently.\n     *\n     * @param channel the specific channel or frequency to tune to.\n     * @param subChannel the specific sub-channel to tune to. N/A if the selected configuration\n     * does not support cub channels.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     * @deprecated Use {@link #tune(ProgramSelector)} instead.\n     ",
    "links" : [ "#onTuneFailed", "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE", "#onProgramInfoChanged", "#tune(ProgramSelector)" ]
  }, {
    "name" : "public abstract void tune(@NonNull ProgramSelector selector)",
    "returnType" : "void",
    "comment" : "\n     * Tune to a program.\n     *\n     * <p>The operation is asynchronous and {@link Callback#onProgramInfoChanged}\n     * will be called when tune completes or {@link Callback#onTuneFailed}\n     * when timeout or canceled.\n     *\n     * <p>When this operation is called by users other than current user or system user, it is\n     * ignored silently.\n     *\n     * @throws IllegalArgumentException if the provided selector is invalid\n     ",
    "links" : [ "#onTuneFailed", "#onProgramInfoChanged" ]
  }, {
    "name" : "public abstract int cancel()",
    "returnType" : "int",
    "comment" : "\n     * Cancel a pending scan or tune operation.\n     *\n     * <p>If an operation is pending, {@link Callback#onTuneFailed} will be called with\n     * {@link #ERROR_CANCELLED}.\n     *\n     * <p>When this operation is called by users other than current user or system\n     * user, it is ignored silently.\n     *\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     ",
    "links" : [ "#onTuneFailed", "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "android.hardware.radio.RadioManager#STATUS_ERROR", "#ERROR_CANCELLED", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE" ]
  }, {
    "name" : "public abstract void cancelAnnouncement()",
    "returnType" : "void",
    "comment" : "\n     * Cancels traffic or emergency announcement.\n     *\n     * <p>If there was no announcement to cancel, no action is taken.\n     *\n     * <p>There is a race condition between calling cancelAnnouncement and the actual announcement\n     * being finished, so onTrafficAnnouncement / onEmergencyAnnouncement callback should be\n     * tracked with proper locking.\n     * @deprecated Only applicable for HAL 1.x.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getProgramInformation(RadioManager.ProgramInfo[] info)",
    "returnType" : "int",
    "comment" : "\n     * Get current station information.\n     *\n     * @param info a ProgramInfo array of lengh 1 where the information is returned.\n     * @return\n     * <ul>\n     *  <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n     *  <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n     *  <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n     *  <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *  service fails, </li>\n     * </ul>\n     * @deprecated Use {@link Callback#onProgramInfoChanged(RadioManager.ProgramInfo)} callback\n     * instead.\n     ",
    "links" : [ "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#STATUS_NO_INIT", "android.hardware.radio.RadioManager#STATUS_DEAD_OBJECT", "android.hardware.radio.RadioManager#STATUS_OK", "#onProgramInfoChanged(RadioManager.ProgramInfo)", "android.hardware.radio.RadioManager#STATUS_ERROR", "android.hardware.radio.RadioManager#STATUS_BAD_VALUE" ]
  }, {
    "name" : "public Bitmap getMetadataImage(int id)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Retrieves a {@link Bitmap} for the given image ID or throw {@link IllegalArgumentException},\n     * if the image was missing from the tuner.\n     *\n     * <p>This involves doing a call to the tuner, so the bitmap should be cached\n     * on the application side.\n     *\n     * <p>If the method throws {@link IllegalArgumentException} for non-zero ID, it\n     * means the image was updated on the tuner side. There is a race condition between\n     * fetching image for an old ID and tuner updating the image (and cleaning up the\n     * old image). In such case, a new ProgramInfo with updated image id will\n     * be sent with a {@link Callback#onProgramInfoChanged(RadioManager.ProgramInfo)}\n     * callback.\n     *\n     * @param id The image identifier, retrieved with\n     *           {@link RadioMetadata#getBitmapId(String)}.\n     * @return A {@link Bitmap} for the given image ID.\n     * @throws IllegalArgumentException if id is 0 or the referenced image id no longer exists.\n     ",
    "links" : [ "#onProgramInfoChanged(RadioManager.ProgramInfo)", "android.hardware.radio.RadioMetadata#getBitmapId(String)", "android.graphics.Bitmap", "IllegalArgumentException" ]
  }, {
    "name" : "public abstract boolean startBackgroundScan()",
    "returnType" : "boolean",
    "comment" : "\n     * Initiates a background scan to update internally cached program list.\n     *\n     * <p>It may not be necessary to initiate the scan explicitly - the scan MAY be performed on\n     * boot.\n     *\n     * <p>The operation is asynchronous and {@link Callback} backgroundScanComplete or onError will\n     * be called if the return value of this call was {@code true}. As result of this call\n     * programListChanged may be triggered (if the scanned list differs).\n     *\n     * @return {@code true} if the scan was properly scheduled, {@code false} if the scan feature\n     * is unavailable; ie. temporarily due to ongoing foreground playback in single-tuner device\n     * or permanently if the feature is not supported\n     * (see ModuleProperties#isBackgroundScanningSupported()).\n     * @deprecated Only applicable for HAL 1.x.\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public abstract List<RadioManager.ProgramInfo> getProgramList(@Nullable Map<String, String> vendorFilter)",
    "returnType" : "List<RadioManager.ProgramInfo>",
    "comment" : "\n     * Get the list of discovered radio stations.\n     *\n     * <p>To get the full list, set filter to null or empty map.\n     * Keys must be prefixed with unique vendor Java-style namespace,\n     * eg. 'com.somecompany.parameter1'.\n     *\n     * @param vendorFilter vendor-specific selector for radio stations.\n     * @return a list of radio stations.\n     * @throws IllegalStateException if the scan is in progress or has not been started,\n     *         startBackgroundScan() call may fix it.\n     * @throws IllegalArgumentException if the vendorFilter argument is not valid.\n     * @deprecated Use {@link #getDynamicProgramList(ProgramList.Filter)} instead.\n     ",
    "links" : [ "#getDynamicProgramList(ProgramList.Filter)" ]
  }, {
    "name" : "public ProgramList getDynamicProgramList(@Nullable ProgramList.Filter filter)",
    "returnType" : "ProgramList",
    "comment" : "\n     * Get the dynamic list of discovered radio stations.\n     *\n     * <p>The list object is updated asynchronously; to get the updates register\n     * with {@link ProgramList#registerListCallback(ProgramList.ListCallback)}\n     * or {@link ProgramList#registerListCallback(Executor, ProgramList.ListCallback)}.\n     *\n     * <p>When the returned object is no longer used, it must be closed.\n     *\n     * @param filter filter for the list, or null to get the full list.\n     * @return the dynamic program list object, close it after use\n     *         or {@code null} if program list is not supported by the tuner\n     ",
    "links" : [ "android.hardware.radio.ProgramList#registerListCallback(ProgramList.ListCallback)", "android.hardware.radio.ProgramList#registerListCallback(Executor" ]
  }, {
    "name" : "public abstract boolean isAnalogForced()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks, if the analog playback is forced, see setAnalogForced.\n     *\n     * @throws IllegalStateException if the switch is not supported at current\n     *         configuration.\n     * @return {@code true} if analog is forced, {@code false} otherwise.\n     * @deprecated Use {@link #isConfigFlagSet(int)} instead.\n     ",
    "links" : [ "#isConfigFlagSet(int)" ]
  }, {
    "name" : "public abstract void setAnalogForced(boolean isForced)",
    "returnType" : "void",
    "comment" : "\n     * Forces the analog playback for the supporting radio technology.\n     *\n     * <p>User may disable digital playback for FM HD Radio or hybrid FM/DAB with\n     * this option. This is purely user choice, ie. does not reflect digital-\n     * analog handover managed from the HAL implementation side.\n     *\n     * <p>Some radio technologies may not support this, ie. DAB.\n     *\n     * @param isForced {@code true} to force analog, {@code false} for a default behaviour.\n     * @throws IllegalStateException if the switch is not supported at current\n     *         configuration.\n     * @deprecated Use {@link #setConfigFlag(int, boolean)}  instead.\n     ",
    "links" : [ "#setConfigFlag(int" ]
  }, {
    "name" : "public boolean isConfigFlagSupported(@RadioManager.ConfigFlag int flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks, if a given config flag is supported\n     *\n     * @param flag Flag to check.\n     * @return True, if the flag is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConfigFlagSet(@RadioManager.ConfigFlag int flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Fetches the current setting of a given config flag.\n     *\n     * <p>The success/failure result is consistent with isConfigFlagSupported.\n     *\n     * @param flag Flag to fetch.\n     * @return The current value of the flag.\n     * @throws IllegalStateException if the flag is not applicable right now.\n     * @throws UnsupportedOperationException if the flag is not supported at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConfigFlag(@RadioManager.ConfigFlag int flag, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the config flag.\n     *\n     * <p>The success/failure result is consistent with isConfigFlagSupported.\n     *\n     * <p>When this operation is called by users other than current user or system user,\n     * it is ignored silently.\n     *\n     * @param flag Flag to set.\n     * @param value The new value of a given flag.\n     * @throws IllegalStateException if the flag is not applicable right now.\n     * @throws UnsupportedOperationException if the flag is not supported at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> setParameters(@NonNull Map<String, String> parameters)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Generic method for setting vendor-specific parameter values.\n     * The framework does not interpret the parameters, they are passed\n     * in an opaque manner between a vendor application and HAL.\n     *\n     * <p>Framework does not make any assumptions on the keys or values, other than\n     * ones stated in VendorKeyValue documentation (a requirement of key\n     * prefixes).\n     * See VendorKeyValue at hardware/interfaces/broadcastradio/2.0/types.hal for\n     * HIDL 2.0 HAL or\n     * hardware/interfaces/broadcastradio/aidl/android/hardware/broadcastradio/VendorKeyValue.aidl\n     * for AIDL HAL.\n     *\n     * <p>For each pair in the result map, the key will be one of the keys\n     * contained in the input (possibly with wildcards expanded), and the value\n     * will be a vendor-specific result status (such as \"OK\" or an error code).\n     * The implementation may choose to return an empty map, or only return\n     * a status for a subset of the provided inputs, at its discretion.\n     *\n     * <p>Application and HAL must not use keys with unknown prefix. In particular,\n     * it must not place a key-value pair in results vector for unknown key from\n     * parameters vector - instead, an unknown key should simply be ignored.\n     * In other words, results vector may contain a subset of parameter keys\n     * (however, the framework doesn't enforce a strict subset - the only\n     * formal requirement is vendor domain prefix for keys).\n     *\n     * <p>When this operation is called by users other than current user or system user,\n     * it is ignored silently.\n     *\n     * @param parameters Vendor-specific key-value pairs.\n     * @return Operation completion status for parameters being set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getParameters(@NonNull List<String> keys)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Generic method for retrieving vendor-specific parameter values.\n     * The framework does not interpret the parameters, they are passed\n     * in an opaque manner between a vendor application and HAL.\n     *\n     * <p>Framework does not cache set/get requests, so it's possible for\n     * getParameter to return a different value than previous setParameter call.\n     *\n     * <p>The syntax and semantics of keys are up to the vendor (as long as prefix\n     * rules are obeyed). For instance, vendors may include some form of\n     * wildcard support. In such case, result vector may be of different size\n     * than requested keys vector. However, wildcards are not recognized by\n     * framework and they are passed as-is to the HAL implementation.\n     *\n     * <p>Unknown keys must be ignored and not placed into results vector.\n     *\n     * @param keys Parameter keys to fetch.\n     * @return Vendor-specific key-value pairs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAntennaConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Get current antenna connection state for current configuration.\n     * Only valid if a configuration has been applied.\n     * @return {@code true} if the antenna is connected, {@code false} otherwise.\n     *\n     * @deprecated Use {@link Callback#onAntennaState(boolean)} callback instead\n     ",
    "links" : [ "#onAntennaState(boolean)" ]
  }, {
    "name" : "public abstract boolean hasControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this client actually controls the tuner.\n     *\n     * <p>Control is always granted after\n     * {@link RadioManager#openTuner(int,\n     * RadioManager.BandConfig, boolean, Callback, Handler)}\n     * returns a non null tuner interface.\n     * Control is lost when another client opens an interface on the same tuner.\n     * When this happens, {@link Callback#onControlChanged(boolean)} is received.\n     * The client can either wait for control to be returned (which is indicated by the same\n     * callback) or close and reopen the tuner interface.\n     *\n     * @return {@code true} if this interface controls the tuner,\n     * {@code false} otherwise or if a problem occured retrieving the state.\n     ",
    "links" : [ "#onControlChanged(boolean)", "android.hardware.radio.RadioManager#openTuner(int" ]
  } ],
  "methodNames" : [ "public abstract void close()", "public abstract int setConfiguration(RadioManager.BandConfig config)", "public abstract int getConfiguration(RadioManager.BandConfig[] config)", "public abstract int setMute(boolean mute)", "public abstract boolean getMute()", "public abstract int step(int direction, boolean skipSubChannel)", "public abstract int scan(int direction, boolean skipSubChannel)", "public int seek(int direction, boolean skipSubChannel)", "public abstract int tune(int channel, int subChannel)", "public abstract void tune(@NonNull ProgramSelector selector)", "public abstract int cancel()", "public abstract void cancelAnnouncement()", "public abstract int getProgramInformation(RadioManager.ProgramInfo[] info)", "public Bitmap getMetadataImage(int id)", "public abstract boolean startBackgroundScan()", "public abstract List<RadioManager.ProgramInfo> getProgramList(@Nullable Map<String, String> vendorFilter)", "public ProgramList getDynamicProgramList(@Nullable ProgramList.Filter filter)", "public abstract boolean isAnalogForced()", "public abstract void setAnalogForced(boolean isForced)", "public boolean isConfigFlagSupported(@RadioManager.ConfigFlag int flag)", "public boolean isConfigFlagSet(@RadioManager.ConfigFlag int flag)", "public void setConfigFlag(@RadioManager.ConfigFlag int flag, boolean value)", "public Map<String, String> setParameters(@NonNull Map<String, String> parameters)", "public Map<String, String> getParameters(@NonNull List<String> keys)", "public abstract boolean isAntennaConnected()", "public abstract boolean hasControl()" ],
  "variableNames" : [ "DIRECTION_UP", "DIRECTION_DOWN", "ERROR_HARDWARE_FAILURE", "ERROR_SERVER_DIED", "ERROR_CANCELLED", "ERROR_SCAN_TIMEOUT", "ERROR_CONFIG", "ERROR_BACKGROUND_SCAN_UNAVAILABLE", "ERROR_BACKGROUND_SCAN_FAILED", "TUNER_RESULT_OK", "TUNER_RESULT_INTERNAL_ERROR", "TUNER_RESULT_INVALID_ARGUMENTS", "TUNER_RESULT_INVALID_STATE", "TUNER_RESULT_NOT_SUPPORTED", "TUNER_RESULT_TIMEOUT", "TUNER_RESULT_CANCELED", "TUNER_RESULT_UNKNOWN_ERROR" ]
}