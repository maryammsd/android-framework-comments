{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/duration/PeriodBuilderFactory.java",
  "packageName" : "android.icu.impl.duration",
  "className" : "PeriodBuilderFactory",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " PeriodBuilderFactory setAvailableUnitRange(TimeUnit minUnit, TimeUnit maxUnit)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets the time units available for use.  Default is all units.\n   * @param minUnit the smallest time unit available for use\n   * @param maxUnit the largest time unit available for use\n   * @return this factory\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setUnitIsAvailable(TimeUnit unit, boolean available)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets whether the time unit is available for use.\n   * @param unit the time unit\n   * @param available true if the unit is available for use\n   * @return this factory\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setMaxLimit(float maxLimit)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets the maximum value for the largest available time unit (as\n   * set in setUnits).  Periods that represent a longer duration than\n   * this will be pinned to this value of that time unit and return\n   * true for 'isMoreThan'.  Default is no limit.  Setting a value of\n   * zero restores the default.\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setMinLimit(float minLimit)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets the minimum value for the smallest available time unit (as\n   * set in setUnits).  Periods that represent a shorter duration than\n   * this will be pinned to this value of that time unit and return\n   * true for 'isLessThan'.  Default is no limit.  Setting a value of\n   * zero restores the default.\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setAllowZero(boolean allow)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets whether units with a value of zero are represented in a\n   * period when 'gaps' appear between time units, e.g. \n   * '2 hours, 0 minutes, and 33 seconds'.  Default is to\n   * not represent these explicitly ('2 hours and 33 seconds').\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setWeeksAloneOnly(boolean aloneOnly)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets whether weeks are used with other units, or only when\n   * weeks are the only unit.  For example '3 weeks and 2 days'\n   * versus '23 days'.  Default is to use them alone only.\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setAllowMilliseconds(boolean allow)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets whether milliseconds are allowed.  This is only examined\n   * when milliseconds are an available field. The default is to allow \n   * milliseconds to display normally.\n   * <p>\n   * This is intended to be used to set locale-specific behavior.  Typically clients will\n   * not call this API and instead call {@link #setLocale}.\n   *\n   * @param allow whether milliseconds should be allowed.\n   * @return a builder\n   ",
    "links" : [ "#setLocale" ]
  }, {
    "name" : " PeriodBuilderFactory setLocale(String localeName)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets the locale for the factory.  Setting the locale can adjust\n   * the values for some or all of the other properties to reflect\n   * language or cultural conventions.  Default is to use\n   * the default locale.\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilderFactory setTimeZone(TimeZone timeZone)",
    "returnType" : "PeriodBuilderFactory",
    "comment" : "\n   * Sets the time zone for the factory.  This can affect the timezone\n   * used for date computations.\n   * @param timeZone the timeZone\n   * @return a builder\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilder getFixedUnitBuilder(TimeUnit unit)",
    "returnType" : "PeriodBuilder",
    "comment" : "\n   * Returns a builder that represents durations in terms of the single\n   * given TimeUnit.  If the factory settings don't make the given unit\n   * available, this will return null.\n   *\n   * @param unit the single TimeUnit with which to represent times\n   * @return a builder\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilder getSingleUnitBuilder()",
    "returnType" : "PeriodBuilder",
    "comment" : "\n   * Returns a builder that represents durations in terms of the\n   * single largest period less than or equal to the duration.\n   *\n   * @return a builder\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilder getOneOrTwoUnitBuilder()",
    "returnType" : "PeriodBuilder",
    "comment" : "\n   * Returns a builder that formats the largest one or two time units,\n   * starting with the largest period less than or equal to the duration.\n   * It formats two periods if the first period has a count &lt; 2\n   * and the next period has a count &gt;= 1.\n   *\n   * @return a builder\n   ",
    "links" : [ ]
  }, {
    "name" : " PeriodBuilder getMultiUnitBuilder(int unitCount)",
    "returnType" : "PeriodBuilder",
    "comment" : "\n   * Returns a builder that formats up to the given number of time units,\n   * starting with the largest unit less than or equal to the\n   * duration.\n   *\n   * @return a builder\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " PeriodBuilderFactory setAvailableUnitRange(TimeUnit minUnit, TimeUnit maxUnit)", " PeriodBuilderFactory setUnitIsAvailable(TimeUnit unit, boolean available)", " PeriodBuilderFactory setMaxLimit(float maxLimit)", " PeriodBuilderFactory setMinLimit(float minLimit)", " PeriodBuilderFactory setAllowZero(boolean allow)", " PeriodBuilderFactory setWeeksAloneOnly(boolean aloneOnly)", " PeriodBuilderFactory setAllowMilliseconds(boolean allow)", " PeriodBuilderFactory setLocale(String localeName)", " PeriodBuilderFactory setTimeZone(TimeZone timeZone)", " PeriodBuilder getFixedUnitBuilder(TimeUnit unit)", " PeriodBuilder getSingleUnitBuilder()", " PeriodBuilder getOneOrTwoUnitBuilder()", " PeriodBuilder getMultiUnitBuilder(int unitCount)" ],
  "variableNames" : [ ]
}