{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/RBBIDataWrapper.java",
  "packageName" : "android.icu.impl",
  "className" : "RBBIDataWrapper",
  "comment" : "\n* <p>Internal class used for Rule Based Break Iterators.</p>\n* <p>This class provides access to the compiled break rule data, as\n* it is stored in a .brk file. Refer to the file common/rbbidata.h from\n* ICU4C for further details.\n * @hide Only a subset of ICU is exposed in Android\n",
  "links" : [ ],
  "variables" : [ {
    "name" : "fHeader",
    "type" : "RBBIDataHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fFTable",
    "type" : "RBBIStateTable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fRTable",
    "type" : "RBBIStateTable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fTrie",
    "type" : "CodePointTrie",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fRuleSource",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fStatusTable",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_FORMAT",
    "type" : "int",
    "comment" : " \"Brk \"",
    "links" : [ ]
  }, {
    "name" : "FORMAT_VERSION",
    "type" : "int",
    "comment" : " 6.0.0.0",
    "links" : [ ]
  }, {
    "name" : "IS_ACCEPTABLE",
    "type" : "IsAcceptable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_MAGIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_FORMATVERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_CATCOUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_FTABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_FTABLELEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_RTABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_RTABLELEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_TRIE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_TRIELEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_RULESOURCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_RULESOURCELEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_STATUSTABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DH_STATUSTABLELEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCEPTING",
    "type" : "int",
    "comment" : "\n     * offset to the \"accepting\" field in a state table row.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOOKAHEAD",
    "type" : "int",
    "comment" : "\n     * offset to the \"lookahead\" field in a state table row.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAGSIDX",
    "type" : "int",
    "comment" : "\n     * offset to the \"tagIndex\" field in a state table row.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEXTSTATES",
    "type" : "int",
    "comment" : "\n     * offset to the start of the next states array in a state table row.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCEPTING_UNCONDITIONAL",
    "type" : "int",
    "comment" : "\n     *  value constant for the ACCEPTING field of a state table row.\n     ",
    "links" : [ ]
  }, {
    "name" : "RBBI_LOOKAHEAD_HARD_BREAK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RBBI_BOF_REQUIRED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RBBI_8BITS_ROWS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean equals(RBBIStateTable left, RBBIStateTable right)",
    "returnType" : "boolean",
    "comment" : "\n     * Equals helper for state tables, including null handling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRowIndex(int state)",
    "returnType" : "int",
    "comment" : "\n     * RBBI State Table Indexing Function.  Given a state number, return the\n     * array index of the start of the state table row for that state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RBBIDataWrapper get(ByteBuffer bytes) throws IOException",
    "returnType" : "RBBIDataWrapper",
    "comment" : "\n     *  Get an RBBIDataWrapper from an InputStream onto a pre-compiled set\n     *  of RBBI rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(java.io.PrintStream out)",
    "returnType" : "void",
    "comment" : " Debug function to display the break iterator data. ",
    "links" : [ ]
  }, {
    "name" : "public static String intToString(int n, int width)",
    "returnType" : "String",
    "comment" : " Fixed width int-to-string conversion. ",
    "links" : [ ]
  }, {
    "name" : "public static String charToString(char n, int width)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String intToHexString(int n, int width)",
    "returnType" : "String",
    "comment" : " Fixed width int-to-string conversion. ",
    "links" : [ ]
  }, {
    "name" : "private void dumpTable(java.io.PrintStream out, RBBIStateTable table)",
    "returnType" : "void",
    "comment" : " Dump a state table.  (A full set of RBBI rules has 4 state tables.)  ",
    "links" : [ ]
  }, {
    "name" : "private void dumpRow(java.io.PrintStream out, RBBIStateTable table, char state)",
    "returnType" : "void",
    "comment" : "\n     * Dump (for debug) a single row of an RBBI state table\n     * @param table\n     * @param state\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dumpCharCategories(java.io.PrintStream out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean equals(RBBIStateTable left, RBBIStateTable right)", "public int getRowIndex(int state)", "public static RBBIDataWrapper get(ByteBuffer bytes) throws IOException", "public void dump(java.io.PrintStream out)", "public static String intToString(int n, int width)", "public static String charToString(char n, int width)", "public static String intToHexString(int n, int width)", "private void dumpTable(java.io.PrintStream out, RBBIStateTable table)", "private void dumpRow(java.io.PrintStream out, RBBIStateTable table, char state)", "private void dumpCharCategories(java.io.PrintStream out)" ],
  "variableNames" : [ "fHeader", "fFTable", "fRTable", "fTrie", "fRuleSource", "fStatusTable", "DATA_FORMAT", "FORMAT_VERSION", "IS_ACCEPTABLE", "DH_SIZE", "DH_MAGIC", "DH_FORMATVERSION", "DH_LENGTH", "DH_CATCOUNT", "DH_FTABLE", "DH_FTABLELEN", "DH_RTABLE", "DH_RTABLELEN", "DH_TRIE", "DH_TRIELEN", "DH_RULESOURCE", "DH_RULESOURCELEN", "DH_STATUSTABLE", "DH_STATUSTABLELEN", "ACCEPTING", "LOOKAHEAD", "TAGSIDX", "NEXTSTATES", "ACCEPTING_UNCONDITIONAL", "RBBI_LOOKAHEAD_HARD_BREAK", "RBBI_BOF_REQUIRED", "RBBI_8BITS_ROWS" ]
}