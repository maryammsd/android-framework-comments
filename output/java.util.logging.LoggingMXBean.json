{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/LoggingMXBean.java",
  "packageName" : "java.util.logging",
  "className" : "LoggingMXBean",
  "comment" : "\n * The management interface for the logging facility.\n *\n * <p>There is a single global instance of the <tt>LoggingMXBean</tt>.\n *\n * The {@code javax.management.ObjectName ObjectName} that uniquely identifies\n * the management interface for logging within the {@code MBeanServer} is:\n * <pre>\n *    {@link LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging}\n * </pre>\n * <p>\n *\n * @author  Ron Mann\n * @author  Mandy Chung\n * @since   1.5\n *\n ",
  "links" : [ "java.util.logging.LogManager#LOGGING_MXBEAN_NAME" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public java.util.List<String> getLoggerNames()",
    "returnType" : "java.util.List<String>",
    "comment" : "\n     * Returns the list of currently registered logger names. This method\n     * calls {@link LogManager#getLoggerNames} and returns a list\n     * of the logger names.\n     *\n     * @return A list of <tt>String</tt> each of which is a\n     *         currently registered <tt>Logger</tt> name.\n     ",
    "links" : [ "java.util.logging.LogManager#getLoggerNames" ]
  }, {
    "name" : "public String getLoggerLevel(String loggerName)",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the log level associated with the specified logger.\n     * If the specified logger does not exist, <tt>null</tt>\n     * is returned.\n     * This method first finds the logger of the given name and\n     * then returns the name of the log level by calling:\n     * <blockquote>\n     *   {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};\n     * </blockquote>\n     *\n     * <p>\n     * If the <tt>Level</tt> of the specified logger is <tt>null</tt>,\n     * which means that this logger's effective level is inherited\n     * from its parent, an empty string will be returned.\n     *\n     * @param loggerName The name of the <tt>Logger</tt> to be retrieved.\n     *\n     * @return The name of the log level of the specified logger; or\n     *         an empty string if the log level of the specified logger\n     *         is <tt>null</tt>.  If the specified logger does not\n     *         exist, <tt>null</tt> is returned.\n     *\n     * @see Logger#getLevel\n     ",
    "links" : [ "java.util.logging.Logger#getLevel", "java.util.logging.Level#getName" ]
  }, {
    "name" : "public void setLoggerLevel(String loggerName, String levelName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the specified logger to the specified new level.\n     * If the <tt>levelName</tt> is not <tt>null</tt>, the level\n     * of the specified logger is set to the parsed <tt>Level</tt>\n     * matching the <tt>levelName</tt>.\n     * If the <tt>levelName</tt> is <tt>null</tt>, the level\n     * of the specified logger is set to <tt>null</tt> and\n     * the effective level of the logger is inherited from\n     * its nearest ancestor with a specific (non-null) level value.\n     *\n     * @param loggerName The name of the <tt>Logger</tt> to be set.\n     *                   Must be non-null.\n     * @param levelName The name of the level to set on the specified logger,\n     *                 or <tt>null</tt> if setting the level to inherit\n     *                 from its nearest ancestor.\n     *\n     * @throws IllegalArgumentException if the specified logger\n     * does not exist, or <tt>levelName</tt> is not a valid level name.\n     *\n     * @throws SecurityException if a security manager exists and if\n     * the caller does not have LoggingPermission(\"control\").\n     *\n     * @see Logger#setLevel\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getParentLoggerName(String loggerName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the parent for the specified logger.\n     * If the specified logger does not exist, <tt>null</tt> is returned.\n     * If the specified logger is the root <tt>Logger</tt> in the namespace,\n     * the result will be an empty string.\n     *\n     * @param loggerName The name of a <tt>Logger</tt>.\n     *\n     * @return the name of the nearest existing parent logger;\n     *         an empty string if the specified logger is the root logger.\n     *         If the specified logger does not exist, <tt>null</tt>\n     *         is returned.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public java.util.List<String> getLoggerNames()", "public String getLoggerLevel(String loggerName)", "public void setLoggerLevel(String loggerName, String levelName)", "public String getParentLoggerName(String loggerName)" ],
  "variableNames" : [ ]
}