{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/Promise.java",
  "packageName" : "org.chromium.base",
  "className" : "Promise",
  "comment" : "\n * A Promise class to be used as a placeholder for a result that will be provided asynchronously.\n * It must only be accessed from a single thread.\n * @param <T> The type the Promise will be fulfilled with.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResult",
    "type" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFulfillCallbacks",
    "type" : "List<Callback<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRejectReason",
    "type" : "Exception",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRejectCallbacks",
    "type" : "List<Callback<Exception>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThread",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThrowingRejectionHandler",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void then(Callback<T> onFulfill)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method that calls {@link #then(Callback, Callback)} providing a rejection\n     * {@link Callback} that throws a {@link UnhandledRejectionException}. Only use this on\n     * Promises that do not have rejection handlers or dependant Promises.\n     ",
    "links" : [ "#then(Callback", "UnhandledRejectionException", "org.chromium.base.Callback" ]
  }, {
    "name" : "public void then(Callback<T> onFulfill, Callback<Exception> onReject)",
    "returnType" : "void",
    "comment" : "\n     * Queues {@link Callback}s to be run when the Promise is either fulfilled or rejected. If the\n     * Promise is already fulfilled or rejected, the appropriate callback will be run on the next\n     * iteration of the message loop.\n     *\n     * @param onFulfill The Callback to be called on fulfillment.\n     * @param onReject The Callback to be called on rejection. The argument to onReject will\n     *         may be null if the Promise was rejected manually.\n     ",
    "links" : [ "org.chromium.base.Callback" ]
  }, {
    "name" : "public void except(Callback<Exception> onReject)",
    "returnType" : "void",
    "comment" : "\n     * Adds a rejection handler to the Promise. This handler will be called if this Promise or any\n     * Promises this Promise depends on is rejected or fails. The {@link Callback} will be given\n     * the exception that caused the rejection, or null if the rejection was manual (caused by a\n     * call to {@link #reject()}.\n     ",
    "links" : [ "#reject()", "org.chromium.base.Callback" ]
  }, {
    "name" : "private void thenInner(Callback<T> onFulfill)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void exceptInner(Callback<Exception> onReject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Promise<RT> then(final Function<T, RT> function)",
    "returnType" : "Promise<RT>",
    "comment" : "\n     * Queues a {@link Function} to be run when the Promise is fulfilled. When this Promise is\n     * fulfilled, the function will be run and its result will be place in the returned Promise.\n     ",
    "links" : [ "java.util.function.Function" ]
  }, {
    "name" : "public Promise<RT> then(final AsyncFunction<T, RT> function)",
    "returnType" : "Promise<RT>",
    "comment" : "\n     * Queues a {@link Promise.AsyncFunction} to be run when the Promise is fulfilled. When this\n     * Promise is fulfilled, the AsyncFunction will be run. When the result of the AsyncFunction is\n     * available, it will be placed in the returned Promise.\n     ",
    "links" : [ "Promise.AsyncFunction" ]
  }, {
    "name" : "public void fulfill(final T result)",
    "returnType" : "void",
    "comment" : "\n     * Fulfills the Promise with the result and passes it to any {@link Callback}s previously queued\n     * on the next iteration of the message loop.\n     ",
    "links" : [ "org.chromium.base.Callback" ]
  }, {
    "name" : "public void reject(final Exception reason)",
    "returnType" : "void",
    "comment" : "\n     * Rejects the Promise, rejecting all those Promises that rely on it.\n     *\n     * This may throw an exception if a dependent Promise fails to handle the rejection, so it is\n     * important to make it explicit when a Promise may be rejected, so that users of that Promise\n     * know to provide rejection handling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reject()",
    "returnType" : "void",
    "comment" : " Rejects a Promise, see {@link #reject(Exception)}. ",
    "links" : [ "#reject(Exception)" ]
  }, {
    "name" : "public boolean isFulfilled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the promise is fulfilled. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRejected()",
    "returnType" : "boolean",
    "comment" : " Returns whether the promise is rejected. ",
    "links" : [ ]
  }, {
    "name" : "public T getResult()",
    "returnType" : "T",
    "comment" : "\n     * Must be called after the promise has been fulfilled.\n     *\n     * @return The promised result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Promise<T> fulfilled(T result)",
    "returnType" : "Promise<T>",
    "comment" : " Convenience method to return a Promise fulfilled with the given result. ",
    "links" : [ ]
  }, {
    "name" : "public static Promise<T> rejected()",
    "returnType" : "Promise<T>",
    "comment" : " Convenience method to return a rejected Promise. ",
    "links" : [ ]
  }, {
    "name" : "private void checkThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postCallbackToLooper(final Callback<S> callback, final S result)",
    "returnType" : "void",
    "comment" : " We use a different template parameter here so this can be used for both T and Throwables.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void then(Callback<T> onFulfill)", "public void then(Callback<T> onFulfill, Callback<Exception> onReject)", "public void except(Callback<Exception> onReject)", "private void thenInner(Callback<T> onFulfill)", "private void exceptInner(Callback<Exception> onReject)", "public Promise<RT> then(final Function<T, RT> function)", "public Promise<RT> then(final AsyncFunction<T, RT> function)", "public void fulfill(final T result)", "public void reject(final Exception reason)", "public void reject()", "public boolean isFulfilled()", "public boolean isRejected()", "public T getResult()", "public static Promise<T> fulfilled(T result)", "public static Promise<T> rejected()", "private void checkThread()", "private void postCallbackToLooper(final Callback<S> callback, final S result)" ],
  "variableNames" : [ "mState", "mResult", "mFulfillCallbacks", "mRejectReason", "mRejectCallbacks", "mThread", "mHandler", "mThrowingRejectionHandler" ]
}