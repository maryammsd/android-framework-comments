{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/ext/Attributes2.java",
  "packageName" : "org.xml.sax.ext",
  "className" : "Attributes2",
  "comment" : "\n * SAX2 extension to augment the per-attribute information\n * provided though {@link Attributes}.\n * If an implementation supports this extension, the attributes\n * provided in {@link org.xml.sax.ContentHandler#startElement\n * ContentHandler.startElement() } will implement this interface,\n * and the <em>http://xml.org/sax/features/use-attributes2</em>\n * feature flag will have the value <em>true</em>.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * </blockquote>\n *\n * <p> XMLReader implementations are not required to support this\n * information, and it is not part of core-only SAX2 distributions.</p>\n *\n * <p>Note that if an attribute was defaulted (<em>!isSpecified()</em>)\n * it will of necessity also have been declared (<em>isDeclared()</em>)\n * in the DTD.\n * Similarly if an attribute's type is anything except CDATA, then it\n * must have been declared.\n * </p>\n *\n * @since SAX 2.0 (extensions 1.1 alpha)\n * @author David Brownell\n * @version TBS\n ",
  "links" : [ "org.xml.sax.Attributes", "org.xml.sax.ContentHandler#startElementContentHandler.startElement()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean isDeclared(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns false unless the attribute was declared in the DTD.\n     * This helps distinguish two kinds of attributes that SAX reports\n     * as CDATA:  ones that were declared (and hence are usually valid),\n     * and those that were not (and which are never valid).\n     *\n     * @param index The attribute index (zero-based).\n     * @return true if the attribute was declared in the DTD,\n     *        false otherwise.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeclared(String qName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns false unless the attribute was declared in the DTD.\n     * This helps distinguish two kinds of attributes that SAX reports\n     * as CDATA:  ones that were declared (and hence are usually valid),\n     * and those that were not (and which are never valid).\n     *\n     * @param qName The XML qualified (prefixed) name.\n     * @return true if the attribute was declared in the DTD,\n     *        false otherwise.\n     * @exception java.lang.IllegalArgumentException When the\n     *            supplied name does not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeclared(String uri, String localName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns false unless the attribute was declared in the DTD.\n     * This helps distinguish two kinds of attributes that SAX reports\n     * as CDATA:  ones that were declared (and hence are usually valid),\n     * and those that were not (and which are never valid).\n     *\n     * <p>Remember that since DTDs do not \"understand\" namespaces, the\n     * namespace URI associated with an attribute may not have come from\n     * the DTD.  The declaration will have applied to the attribute's\n     * <em>qName</em>.\n     *\n     * @param uri The Namespace URI, or the empty string if\n     *        the name has no Namespace URI.\n     * @param localName The attribute's local name.\n     * @return true if the attribute was declared in the DTD,\n     *        false otherwise.\n     * @exception java.lang.IllegalArgumentException When the\n     *            supplied names do not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpecified(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true unless the attribute value was provided\n     * by DTD defaulting.\n     *\n     * @param index The attribute index (zero-based).\n     * @return true if the value was found in the XML text,\n     *        false if the value was provided by DTD defaulting.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpecified(String uri, String localName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true unless the attribute value was provided\n     * by DTD defaulting.\n     *\n     * <p>Remember that since DTDs do not \"understand\" namespaces, the\n     * namespace URI associated with an attribute may not have come from\n     * the DTD.  The declaration will have applied to the attribute's\n     * <em>qName</em>.\n     *\n     * @param uri The Namespace URI, or the empty string if\n     *        the name has no Namespace URI.\n     * @param localName The attribute's local name.\n     * @return true if the value was found in the XML text,\n     *        false if the value was provided by DTD defaulting.\n     * @exception java.lang.IllegalArgumentException When the\n     *            supplied names do not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpecified(String qName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true unless the attribute value was provided\n     * by DTD defaulting.\n     *\n     * @param qName The XML qualified (prefixed) name.\n     * @return true if the value was found in the XML text,\n     *        false if the value was provided by DTD defaulting.\n     * @exception java.lang.IllegalArgumentException When the\n     *            supplied name does not identify an attribute.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isDeclared(int index)", "public boolean isDeclared(String qName)", "public boolean isDeclared(String uri, String localName)", "public boolean isSpecified(int index)", "public boolean isSpecified(String uri, String localName)", "public boolean isSpecified(String qName)" ],
  "variableNames" : [ ]
}