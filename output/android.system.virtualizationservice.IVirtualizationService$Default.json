{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/system/virtualizationservice/IVirtualizationService.java",
  "packageName" : "android.system.virtualizationservice",
  "className" : "Default",
  "comment" : " Default implementation for IVirtualizationService. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public android.system.virtualizationservice.IVirtualMachine createVm(android.system.virtualizationservice.VirtualMachineConfig config, android.os.ParcelFileDescriptor consoleOutFd, android.os.ParcelFileDescriptor consoleInFd, android.os.ParcelFileDescriptor osLogFd) throws android.os.RemoteException",
    "returnType" : "android.system.virtualizationservice.IVirtualMachine",
    "comment" : "\n     * Create the VM with the given config file, and return a handle to it ready to start it. If\n     * `consoleOutFd` is provided then console output from the VM will be sent to it. If\n     * `consoleInFd` is provided then console input to the VM will be read from it. If `osLogFd` is\n     * provided then the OS-level logs will be sent to it. `osLogFd` is supported only when the OS\n     * running in the VM has the logging system. In case of Microdroid, the logging system is logd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] allocateInstanceId() throws android.os.RemoteException",
    "returnType" : "byte[]",
    "comment" : " Allocate an instance_id to the (newly created) VM. ",
    "links" : [ ]
  }, {
    "name" : "public void initializeWritablePartition(android.os.ParcelFileDescriptor imageFd, long sizeBytes, int type) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Initialise an empty partition image of the given size to be used as a writable partition.\n     * \n     * The file must be open with both read and write permissions, and should be a new empty file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void createOrUpdateIdsigFile(android.os.ParcelFileDescriptor inputFd, android.os.ParcelFileDescriptor idsigFd) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Create or update an idsig file that digests the given APK file. The idsig file follows the\n     * idsig format that is defined by the APK Signature Scheme V4. The idsig file is not updated\n     * when it is up to date with the input file, which is checked by comparing the\n     * signing_info.apk_digest field in the idsig file with the signer.signed_data.digests.digest\n     * field in the input APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public android.system.virtualizationservice.VirtualMachineDebugInfo[] debugListVms() throws android.os.RemoteException",
    "returnType" : "android.system.virtualizationservice.VirtualMachineDebugInfo[]",
    "comment" : "\n     * Get a list of all currently running VMs. This method is only intended for debug purposes,\n     * and as such is only permitted from the shell user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public android.system.virtualizationservice.AssignableDevice[] getAssignableDevices() throws android.os.RemoteException",
    "returnType" : "android.system.virtualizationservice.AssignableDevice[]",
    "comment" : " Get a list of assignable device types. ",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String[] getSupportedOSList() throws android.os.RemoteException",
    "returnType" : "java.lang.String[]",
    "comment" : " Get a list of supported OSes. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFeatureEnabled(java.lang.String feature) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : " Returns whether given feature is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public void enableTestAttestation() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Provisions a key pair for the VM attestation testing, a fake certificate will be\n     * associated to the fake key pair when the VM requests attestation in testing mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRemoteAttestationSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if the pVM remote attestation feature is supported ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpdatableVmSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Check if Updatable VM feature is supported by AVF. Updatable VM allows secrets and data of\n     * a VM instance to be accessible even after updates of boot images and apks.\n     * For more info see packages/modules/Virtualization/docs/updatable_vm.md\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeVmInstance(byte[] instanceId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Notification that state associated with a VM should be removed.\n     * \n     * @param instanceId The ID for the VM.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void claimVmInstance(byte[] instanceId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Notification that ownership of a VM has been claimed by the caller.  Note that no permission\n     * checks (with respect to the previous owner) are performed.\n     * \n     * @param instanceId The ID for the VM.\n     ",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.system.virtualizationservice.IVirtualMachine createVm(android.system.virtualizationservice.VirtualMachineConfig config, android.os.ParcelFileDescriptor consoleOutFd, android.os.ParcelFileDescriptor consoleInFd, android.os.ParcelFileDescriptor osLogFd) throws android.os.RemoteException", "public byte[] allocateInstanceId() throws android.os.RemoteException", "public void initializeWritablePartition(android.os.ParcelFileDescriptor imageFd, long sizeBytes, int type) throws android.os.RemoteException", "public void createOrUpdateIdsigFile(android.os.ParcelFileDescriptor inputFd, android.os.ParcelFileDescriptor idsigFd) throws android.os.RemoteException", "public android.system.virtualizationservice.VirtualMachineDebugInfo[] debugListVms() throws android.os.RemoteException", "public android.system.virtualizationservice.AssignableDevice[] getAssignableDevices() throws android.os.RemoteException", "public java.lang.String[] getSupportedOSList() throws android.os.RemoteException", "public boolean isFeatureEnabled(java.lang.String feature) throws android.os.RemoteException", "public void enableTestAttestation() throws android.os.RemoteException", "public boolean isRemoteAttestationSupported() throws android.os.RemoteException", "public boolean isUpdatableVmSupported() throws android.os.RemoteException", "public void removeVmInstance(byte[] instanceId) throws android.os.RemoteException", "public void claimVmInstance(byte[] instanceId) throws android.os.RemoteException", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}