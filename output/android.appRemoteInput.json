{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/RemoteInput.java",
  "packageName" : "android.app",
  "className" : "RemoteInput",
  "comment" : "\n * A {@code RemoteInput} object specifies input to be collected from a user to be passed along with\n * an intent inside a {@link android.app.PendingIntent} that is sent.\n * Always use {@link RemoteInput.Builder} to create instances of this class.\n * <p class=\"note\"> See\n * <a href=\"{@docRoot}guide/topics/ui/notifiers/notifications.html#direct\">Replying\n * to notifications</a> for more information on how to use this class.\n *\n * <p>The following example adds a {@code RemoteInput} to a {@link Notification.Action},\n * sets the result key as {@code quick_reply}, and sets the label as {@code Quick reply}.\n * Users are prompted to input a response when they trigger the action. The results are sent along\n * with the intent and can be retrieved with the result key (provided to the {@link Builder}\n * constructor) from the Bundle returned by {@link #getResultsFromIntent}.\n *\n * <pre class=\"prettyprint\">\n * public static final String KEY_QUICK_REPLY_TEXT = \"quick_reply\";\n * Notification.Action action = new Notification.Action.Builder(\n *         R.drawable.reply, &quot;Reply&quot;, actionIntent)\n *         <b>.addRemoteInput(new RemoteInput.Builder(KEY_QUICK_REPLY_TEXT)\n *                 .setLabel(\"Quick reply\").build()</b>)\n *         .build();</pre>\n *\n * <p>When the {@link android.app.PendingIntent} is fired, the intent inside will contain the\n * input results if collected. To access these results, use the {@link #getResultsFromIntent}\n * function. The result values will present under the result key passed to the {@link Builder}\n * constructor.\n *\n * <pre class=\"prettyprint\">\n * public static final String KEY_QUICK_REPLY_TEXT = \"quick_reply\";\n * Bundle results = RemoteInput.getResultsFromIntent(intent);\n * if (results != null) {\n *     CharSequence quickReplyResult = results.getCharSequence(KEY_QUICK_REPLY_TEXT);\n * }</pre>\n ",
  "variables" : [ {
    "name" : "RESULTS_CLIP_LABEL",
    "type" : "String",
    "comment" : " Label used to denote the clip data type used for remote input transport ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESULTS_DATA",
    "type" : "String",
    "comment" : " Extra added to a clip data intent object to hold the text results bundle. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DATA_TYPE_RESULTS_DATA",
    "type" : "String",
    "comment" : " Extra added to a clip data intent object to hold the data results bundle. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESULTS_SOURCE",
    "type" : "String",
    "comment" : " Extra added to a clip data intent object identifying the {@link Source} of the results. ",
    "links" : [ "Source" ]
  }, {
    "name" : "SOURCE_FREE_FORM_INPUT",
    "type" : "int",
    "comment" : " The user manually entered the data. ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CHOICE",
    "type" : "int",
    "comment" : " The user selected one of the choices from {@link #getChoices}. ",
    "links" : [ "#getChoices" ]
  }, {
    "name" : "EDIT_CHOICES_BEFORE_SENDING_AUTO",
    "type" : "int",
    "comment" : " The platform will determine whether choices will be edited before being sent to the app. ",
    "links" : [ ]
  }, {
    "name" : "EDIT_CHOICES_BEFORE_SENDING_DISABLED",
    "type" : "int",
    "comment" : " Tapping on a choice should send the input immediately, without letting the user edit it. ",
    "links" : [ ]
  }, {
    "name" : "EDIT_CHOICES_BEFORE_SENDING_ENABLED",
    "type" : "int",
    "comment" : " Tapping on a choice should let the user edit the input before it is sent to the app. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALLOW_FREE_FORM_INPUT",
    "type" : "int",
    "comment" : " Flags bitwise-ored to mFlags",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FLAGS",
    "type" : "int",
    "comment" : " Default value for flags integer",
    "links" : [ ]
  }, {
    "name" : "mResultKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChoices",
    "type" : "CharSequence[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEditChoicesBeforeSending",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedDataTypes",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RemoteInput>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getResultKey()",
    "returnType" : "String",
    "comment" : "\n     * Get the key that the result of this input will be set in from the Bundle returned by\n     * {@link #getResultsFromIntent} when the {@link android.app.PendingIntent} is sent.\n     ",
    "links" : [ "#getResultsFromIntent", "android.app.PendingIntent" ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the label to display to users when collecting this input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getChoices()",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Get possible input choices. This can be {@code null} if there are no choices to present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getAllowedDataTypes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get possible non-textual inputs that are accepted.\n     * This can be {@code null} if the input does not accept non-textual values.\n     * See {@link Builder#setAllowDataType}.\n     ",
    "links" : [ "Builder#setAllowDataType" ]
  }, {
    "name" : "public boolean isDataOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the input only accepts data, meaning {@link #getAllowFreeFormInput}\n     * is false, {@link #getChoices} is null or empty, and {@link #getAllowedDataTypes} is\n     * non-null and not empty.\n     ",
    "links" : [ "#getAllowFreeFormInput", "#getChoices", "#getAllowedDataTypes" ]
  }, {
    "name" : "public boolean getAllowFreeFormInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether or not users can provide an arbitrary value for\n     * input. If you set this to {@code false}, users must select one of the\n     * choices in {@link #getChoices}. An {@link IllegalArgumentException} is thrown\n     * if you set this to false and {@link #getChoices} returns {@code null} or empty.\n     ",
    "links" : [ "#getChoices", "IllegalArgumentException", "#getChoices" ]
  }, {
    "name" : "public int getEditChoicesBeforeSending()",
    "returnType" : "int",
    "comment" : "\n     * Gets whether tapping on a choice should let the user edit the input before it is sent to the\n     * app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Get additional metadata carried around with this remote input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, Uri> getDataResultsFromIntent(Intent intent, String remoteInputResultKey)",
    "returnType" : "Map<String, Uri>",
    "comment" : "\n     * Similar as {@link #getResultsFromIntent} but retrieves data results for a\n     * specific RemoteInput result. To retrieve a value use:\n     * <pre>\n     * {@code\n     * Map<String, Uri> results =\n     *     RemoteInput.getDataResultsFromIntent(intent, REMOTE_INPUT_KEY);\n     * if (results != null) {\n     *   Uri data = results.get(MIME_TYPE_OF_INTEREST);\n     * }\n     * }\n     * </pre>\n     * @param intent The intent object that fired in response to an action or content intent\n     *               which also had one or more remote input requested.\n     * @param remoteInputResultKey The result key for the RemoteInput you want results for.\n     ",
    "links" : [ "#getResultsFromIntent" ]
  }, {
    "name" : "public static Bundle getResultsFromIntent(Intent intent)",
    "returnType" : "Bundle",
    "comment" : "\n     * Get the remote input text results bundle from an intent. The returned Bundle will\n     * contain a key/value for every result key populated with text by remote input collector.\n     * Use the {@link Bundle#getCharSequence(String)} method to retrieve a value. For non-text\n     * results use {@link #getDataResultsFromIntent}.\n     * @param intent The intent object that fired in response to an action or content intent\n     *               which also had one or more remote input requested.\n     ",
    "links" : [ "Bundle#getCharSequence", "#getDataResultsFromIntent" ]
  }, {
    "name" : "public static void addResultsToIntent(RemoteInput[] remoteInputs, Intent intent, Bundle results)",
    "returnType" : "void",
    "comment" : "\n     * Populate an intent object with the text results gathered from remote input. This method\n     * should only be called by remote input collection services when sending results to a\n     * pending intent.\n     * @param remoteInputs The remote inputs for which results are being provided\n     * @param intent The intent to add remote inputs to. The {@link ClipData}\n     *               field of the intent will be modified to contain the results.\n     * @param results A bundle holding the remote input results. This bundle should\n     *                be populated with keys matching the result keys specified in\n     *                {@code remoteInputs} with values being the CharSequence results per key.\n     ",
    "links" : [ "ClipData" ]
  }, {
    "name" : "public static void addDataResultToIntent(RemoteInput remoteInput, Intent intent, Map<String, Uri> results)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #addResultsToIntent} but for setting data results. This is used\n     * for inputs that accept non-textual results (see {@link Builder#setAllowDataType}).\n     * Only one result can be provided for every mime type accepted by the RemoteInput.\n     * If multiple inputs of the same mime type are expected then multiple RemoteInputs\n     * should be used.\n     *\n     * @param remoteInput The remote input for which results are being provided\n     * @param intent The intent to add remote input results to. The {@link ClipData}\n     *               field of the intent will be modified to contain the results.\n     * @param results A map of mime type to the Uri result for that mime type.\n     ",
    "links" : [ "#addResultsToIntent", "Builder#setAllowDataType", "ClipData" ]
  }, {
    "name" : "public static void setResultsSource(Intent intent, @Source int source)",
    "returnType" : "void",
    "comment" : "\n     * Set the source of the RemoteInput results. This method should only be called by remote\n     * input collection services (e.g.\n     * {@link android.service.notification.NotificationListenerService})\n     * when sending results to a pending intent.\n     *\n     * @see #SOURCE_FREE_FORM_INPUT\n     * @see #SOURCE_CHOICE\n     *\n     * @param intent The intent to add remote input source to. The {@link ClipData}\n     *               field of the intent will be modified to contain the source.\n     * @param source The source of the results.\n     ",
    "links" : [ "android.service.notification.NotificationListenerService", "ClipData" ]
  }, {
    "name" : "public static int getResultsSource(Intent intent)",
    "returnType" : "int",
    "comment" : "\n     * Get the source of the RemoteInput results.\n     *\n     * @see #SOURCE_FREE_FORM_INPUT\n     * @see #SOURCE_CHOICE\n     *\n     * @param intent The intent object that fired in response to an action or content intent\n     *               which also had one or more remote input requested.\n     * @return The source of the results. If no source was set, {@link #SOURCE_FREE_FORM_INPUT} will\n     * be returned.\n     ",
    "links" : [ "#SOURCE_FREE_FORM_INPUT" ]
  }, {
    "name" : "private static String getExtraResultsKeyForData(String mimeType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Intent getClipDataIntentFromIntent(Intent intent)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "RESULTS_CLIP_LABEL", "EXTRA_RESULTS_DATA", "EXTRA_DATA_TYPE_RESULTS_DATA", "EXTRA_RESULTS_SOURCE", "SOURCE_FREE_FORM_INPUT", "SOURCE_CHOICE", "EDIT_CHOICES_BEFORE_SENDING_AUTO", "EDIT_CHOICES_BEFORE_SENDING_DISABLED", "EDIT_CHOICES_BEFORE_SENDING_ENABLED", "FLAG_ALLOW_FREE_FORM_INPUT", "DEFAULT_FLAGS", "mResultKey", "mLabel", "mChoices", "mFlags", "mEditChoicesBeforeSending", "mExtras", "mAllowedDataTypes", "CREATOR" ],
  "methodNames" : [ "public String getResultKey()", "public CharSequence getLabel()", "public CharSequence[] getChoices()", "public Set<String> getAllowedDataTypes()", "public boolean isDataOnly()", "public boolean getAllowFreeFormInput()", "public int getEditChoicesBeforeSending()", "public Bundle getExtras()", "public static Map<String, Uri> getDataResultsFromIntent(Intent intent, String remoteInputResultKey)", "public static Bundle getResultsFromIntent(Intent intent)", "public static void addResultsToIntent(RemoteInput[] remoteInputs, Intent intent, Bundle results)", "public static void addDataResultToIntent(RemoteInput remoteInput, Intent intent, Map<String, Uri> results)", "public static void setResultsSource(Intent intent, @Source int source)", "public static int getResultsSource(Intent intent)", "private static String getExtraResultsKeyForData(String mimeType)", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "private static Intent getClipDataIntentFromIntent(Intent intent)" ]
}