{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/CallDiagnostics.java",
  "packageName" : "android.telecom",
  "className" : "CallDiagnostics",
  "comment" : "\n * {@link CallDiagnostics} provides a way for a {@link CallDiagnosticService} to receive diagnostic\n * information about a mobile call on the device.  A {@link CallDiagnostics} instance is similar to\n * a {@link Call}, however it does not expose call control capabilities and exposes extra diagnostic\n * and messaging capabilities not present on a {@link Call}.  The {@link CallDiagnosticService}\n * creates a {@link CallDiagnostics} for each {@link Call} on the device.  This means that for each\n * in progress call on the device, the {@link CallDiagnosticService} will create an instance of\n * {@link CallDiagnostics}.\n * <p>\n * The {@link CallDiagnosticService} can generate mid-call diagnostic messages using the\n * {@link #displayDiagnosticMessage(int, CharSequence)} API which provides the user with valuable\n * information about conditions impacting their call and corrective actions.  For example, if the\n * {@link CallDiagnosticService} determines that conditions on the call are degrading, it can inform\n * the user that the call may soon drop and that they can try using a different calling method\n * (e.g. VOIP or WIFI).\n * <h2>Threading Model</h2>\n * All incoming IPC from Telecom in this class will use the same {@link Executor} as the\n * {@link CallDiagnosticService}. See {@link CallDiagnosticService#setExecutor(Executor)} for more\n * information.\n * @hide\n ",
  "links" : [ "android.telecom.CallDiagnosticService", "#displayDiagnosticMessage(int", "android.telecom.CallDiagnosticService#setExecutor(Executor)", "java.util.concurrent.Executor", "android.telecom.CallDiagnostics", "android.telecom.Call" ],
  "variables" : [ {
    "name" : "MESSAGE_CALL_NETWORK_TYPE",
    "type" : "int",
    "comment" : "\n     * Device to device message sent via {@link #sendDeviceToDeviceMessage(int, int)} (received via\n     * {@link #onReceiveDeviceToDeviceMessage(int, int)}) which communicates the radio access type\n     * used for the current call.  The call network type communicated here is an intentional\n     * simplification of the {@link android.telephony.TelephonyManager#getNetworkType(int)} which\n     * removes some of the resolution inherent in those values; the\n     * {@link android.telephony.TelephonyManager#NETWORK_TYPE_LTE_CA} value, for example is\n     * collapsed into the {@link android.telephony.TelephonyManager#NETWORK_TYPE_LTE} value for\n     * efficiency of transport.  For a discussion on the necessity of this simplification, see\n     * {@link #sendDeviceToDeviceMessage(int, int)}.\n     * <p>\n     * Valid values are below:\n     * <UL>\n     *     <LI>{@link android.telephony.TelephonyManager#NETWORK_TYPE_LTE}</LI>\n     *     <LI>{@link android.telephony.TelephonyManager#NETWORK_TYPE_IWLAN}</LI>\n     *     <LI>{@link android.telephony.TelephonyManager#NETWORK_TYPE_NR}</LI>\n     * </UL>\n     ",
    "links" : [ "android.telephony.TelephonyManager#NETWORK_TYPE_LTE", "android.telephony.TelephonyManager#NETWORK_TYPE_NR", "#onReceiveDeviceToDeviceMessage(int", "#sendDeviceToDeviceMessage(int", "android.telephony.TelephonyManager#NETWORK_TYPE_LTE_CA", "android.telephony.TelephonyManager#NETWORK_TYPE_IWLAN", "android.telephony.TelephonyManager#getNetworkType(int)" ]
  }, {
    "name" : "MESSAGE_CALL_AUDIO_CODEC",
    "type" : "int",
    "comment" : "\n     * Device to device message sent via {@link #sendDeviceToDeviceMessage(int, int)} (received via\n     * {@link #onReceiveDeviceToDeviceMessage(int, int)}) which communicates the call audio codec\n     * used for the current call.\n     * <p>\n     * The audio codec communicated here is an intentional simplification of the\n     * {@link Connection#EXTRA_AUDIO_CODEC} for a call and focuses on communicating the most common\n     * variants of these audio codecs.  Other variants of these codecs are reported as the next\n     * closest variant.  For example, the {@link Connection#AUDIO_CODEC_EVS_FB} full band codec\n     * is reported via device to device communication as {@link Connection#AUDIO_CODEC_EVS_WB}.\n     * For a discussion on the necessity of this simplification, see\n     * {@link #sendDeviceToDeviceMessage(int, int)}.\n     * <p>\n     * Valid values:\n     * <UL>\n     *     <LI>{@link Connection#AUDIO_CODEC_EVS_WB}</LI>\n     *     <LI>{@link Connection#AUDIO_CODEC_AMR_WB}</LI>\n     *     <LI>{@link Connection#AUDIO_CODEC_AMR}</LI>\n     * </UL>\n     ",
    "links" : [ "android.telecom.Connection#EXTRA_AUDIO_CODEC", "android.telecom.Connection#AUDIO_CODEC_AMR_WB", "android.telecom.Connection#AUDIO_CODEC_AMR", "#onReceiveDeviceToDeviceMessage(int", "#sendDeviceToDeviceMessage(int", "android.telecom.Connection#AUDIO_CODEC_EVS_FB", "android.telecom.Connection#AUDIO_CODEC_EVS_WB" ]
  }, {
    "name" : "MESSAGE_DEVICE_BATTERY_STATE",
    "type" : "int",
    "comment" : "\n     * Device to device message sent via {@link #sendDeviceToDeviceMessage(int, int)} (received via\n     * {@link #onReceiveDeviceToDeviceMessage(int, int)}) which communicates the battery state of\n     * the device.  Will typically mirror battery state reported via intents such as\n     * {@link android.content.Intent#ACTION_BATTERY_LOW}.\n     * <p>\n     * Valid values:\n     * <UL>\n     *     <LI>{@link #BATTERY_STATE_LOW}</LI>\n     *     <LI>{@link #BATTERY_STATE_GOOD}</LI>\n     *     <LI>{@link #BATTERY_STATE_CHARGING}</LI>\n     * </UL>\n     ",
    "links" : [ "#BATTERY_STATE_CHARGING", "#onReceiveDeviceToDeviceMessage(int", "#sendDeviceToDeviceMessage(int", "android.content.Intent#ACTION_BATTERY_LOW", "#BATTERY_STATE_GOOD", "#BATTERY_STATE_LOW" ]
  }, {
    "name" : "MESSAGE_DEVICE_NETWORK_COVERAGE",
    "type" : "int",
    "comment" : "\n     * Device to device message sent via {@link #sendDeviceToDeviceMessage(int, int)} (received via\n     * {@link #onReceiveDeviceToDeviceMessage(int, int)}) which communicates the overall network\n     * coverage as it pertains to the current call.  A {@link CallDiagnosticService} should signal\n     * poor coverage if the network coverage reaches a level where there is a high probability of\n     * the call dropping as a result.\n     * <p>\n     * Valid values:\n     * <UL>\n     *     <LI>{@link #COVERAGE_POOR}</LI>\n     *     <LI>{@link #COVERAGE_GOOD}</LI>\n     * </UL>\n     ",
    "links" : [ "android.telecom.CallDiagnosticService", "#onReceiveDeviceToDeviceMessage(int", "#sendDeviceToDeviceMessage(int", "#COVERAGE_POOR", "#COVERAGE_GOOD" ]
  }, {
    "name" : "BATTERY_STATE_LOW",
    "type" : "int",
    "comment" : "\n     * Used with {@link #MESSAGE_DEVICE_BATTERY_STATE} to indicate that the battery is low.\n     ",
    "links" : [ "#MESSAGE_DEVICE_BATTERY_STATE" ]
  }, {
    "name" : "BATTERY_STATE_GOOD",
    "type" : "int",
    "comment" : "\n     * Used with {@link #MESSAGE_DEVICE_BATTERY_STATE} to indicate that the battery is not low.\n     ",
    "links" : [ "#MESSAGE_DEVICE_BATTERY_STATE" ]
  }, {
    "name" : "BATTERY_STATE_CHARGING",
    "type" : "int",
    "comment" : "\n     * Used with {@link #MESSAGE_DEVICE_BATTERY_STATE} to indicate that the battery is charging.\n     ",
    "links" : [ "#MESSAGE_DEVICE_BATTERY_STATE" ]
  }, {
    "name" : "COVERAGE_POOR",
    "type" : "int",
    "comment" : "\n     * Used with {@link #MESSAGE_DEVICE_NETWORK_COVERAGE} to indicate that the coverage is poor.\n     ",
    "links" : [ "#MESSAGE_DEVICE_NETWORK_COVERAGE" ]
  }, {
    "name" : "COVERAGE_GOOD",
    "type" : "int",
    "comment" : "\n     * Used with {@link #MESSAGE_DEVICE_NETWORK_COVERAGE} to indicate that the coverage is good.\n     ",
    "links" : [ "#MESSAGE_DEVICE_NETWORK_COVERAGE" ]
  }, {
    "name" : "mListener",
    "type" : "Listener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setListener(@NonNull Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallId(@NonNull String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the call ID for this {@link CallDiagnostics}.\n     * @param callId\n     * @hide\n     ",
    "links" : [ "android.telecom.CallDiagnostics" ]
  }, {
    "name" : "public String getCallId()",
    "returnType" : "String",
    "comment" : "\n     * @return the Telecom call ID for this {@link CallDiagnostics}.\n     * @hide\n     ",
    "links" : [ "android.telecom.CallDiagnostics" ]
  }, {
    "name" : "public abstract void onCallDetailsChanged(@NonNull android.telecom.Call.Details details)",
    "returnType" : "void",
    "comment" : "\n     * Telecom calls this method when the details of a call changes.\n     * <p>\n     * Calls to this method will use the same {@link Executor} as the {@link CallDiagnosticService};\n     * see {@link CallDiagnosticService#getExecutor()} for more information.\n     ",
    "links" : [ "android.telecom.CallDiagnosticService", "java.util.concurrent.Executor", "android.telecom.CallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "public abstract void onReceiveDeviceToDeviceMessage(@MessageType int message, int value)",
    "returnType" : "void",
    "comment" : "\n     * The {@link CallDiagnosticService} implements this method to handle messages received via\n     * device to device communication.\n     * <p>\n     * See {@link #sendDeviceToDeviceMessage(int, int)} for background on device to device\n     * communication.\n     * <p>\n     * The underlying device to device communication protocol assumes that where there the two\n     * devices communicating are using a different version of the protocol, messages the recipient\n     * are not aware of are silently discarded.  This means an older client talking to a new client\n     * will not receive newer messages and values sent by the new client.\n     * <p>\n     * Calls to this method will use the same {@link Executor} as the {@link CallDiagnosticService};\n     * see {@link CallDiagnosticService#getExecutor()} for more information.\n     ",
    "links" : [ "android.telecom.CallDiagnosticService", "java.util.concurrent.Executor", "#sendDeviceToDeviceMessage(int", "android.telecom.CallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "public final void sendDeviceToDeviceMessage(int message, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sends a device to device message to the device on the other end of this call.\n     * <p>\n     * Device to device communication is an Android platform feature which supports low bandwidth\n     * communication between Android devices while they are in a call.  The device to device\n     * communication leverages DTMF tones or RTP header extensions to pass messages.  The\n     * messages are unacknowledged and sent in a best-effort manner.  The protocols assume that the\n     * nature of the message are informational only and are used only to convey basic state\n     * information between devices.\n     * <p>\n     * Device to device messages are intentional simplifications of more rich indicators in the\n     * platform due to the extreme bandwidth constraints inherent with underlying device to device\n     * communication transports used by the telephony framework.  Device to device communication is\n     * either accomplished by adding RFC8285 compliant RTP header extensions to the audio packets\n     * for a call, or using the DTMF digits A-D as a communication pathway.  RTP header extension\n     * packets ride alongside a the audio for a call, and are thus limited to roughly a byte for\n     * a message.  Signalling requirements for DTMF digits place even more significant limitations\n     * on the amount of information which can be communicated during a call, offering only a few\n     * bits of potential information per message.  The messages and values are constrained in order\n     * to meet the limited bandwidth inherent with DTMF signalling.\n     * <p>\n     * Allowed message types are:\n     * <ul>\n     *     <li>{@link #MESSAGE_CALL_NETWORK_TYPE}</LI>\n     *     <li>{@link #MESSAGE_CALL_AUDIO_CODEC}</LI>\n     *     <li>{@link #MESSAGE_DEVICE_BATTERY_STATE}</LI>\n     *     <li>{@link #MESSAGE_DEVICE_NETWORK_COVERAGE}</LI>\n     * </ul>\n     * @param message The message type to send.\n     * @param value The message value corresponding to the type.\n     ",
    "links" : [ "#MESSAGE_CALL_NETWORK_TYPE", "#MESSAGE_DEVICE_BATTERY_STATE", "#MESSAGE_CALL_AUDIO_CODEC", "#MESSAGE_DEVICE_NETWORK_COVERAGE" ]
  }, {
    "name" : "public abstract CharSequence onCallDisconnected(@Annotation.DisconnectCauses int disconnectCause, @Annotation.PreciseDisconnectCauses int preciseDisconnectCause)",
    "returnType" : "CharSequence",
    "comment" : " TODO: Wire in Telephony support for this.",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence onCallDisconnected(@NonNull ImsReasonInfo disconnectReason)",
    "returnType" : "CharSequence",
    "comment" : " TODO: Wire in Telephony support for this.",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCallQualityReceived(@NonNull CallQuality callQuality)",
    "returnType" : "void",
    "comment" : "\n     * Telecom calls this method when a {@link CallQuality} report is received from the telephony\n     * stack for a call.\n     * @param callQuality The call quality report for this call.\n     * <p>\n     * Calls to this method will use the same {@link Executor} as the {@link CallDiagnosticService};\n     * see {@link CallDiagnosticService#getExecutor()} for more information.\n     ",
    "links" : [ "android.telecom.CallDiagnosticService", "android.telephony.CallQuality", "java.util.concurrent.Executor", "android.telecom.CallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "public final void displayDiagnosticMessage(int messageId, @NonNull CharSequence message)",
    "returnType" : "void",
    "comment" : "\n      * Signals the active default dialer app to display a call diagnostic message.  This can be\n      * used to report problems encountered during the span of a call.\n      * <p>\n      * The {@link CallDiagnosticService} provides a unique client-specific identifier used to\n      * identify the specific diagnostic message type.\n      * <p>\n      * The {@link CallDiagnosticService} should call {@link #clearDiagnosticMessage(int)} when the\n      * diagnostic condition has cleared.\n      * @param messageId the unique message identifier.\n      * @param message a human-readable, localized message to be shown to the user indicating a\n      *                call issue which has occurred, along with potential mitigating actions.\n     ",
    "links" : [ "android.telecom.CallDiagnosticService", "#clearDiagnosticMessage(int)" ]
  }, {
    "name" : "public final void clearDiagnosticMessage(int messageId)",
    "returnType" : "void",
    "comment" : "\n     * Signals to the active default dialer that the diagnostic message previously signalled using\n     * {@link #displayDiagnosticMessage(int, CharSequence)} with the specified messageId is no\n     * longer applicable (e.g. service has improved, for example.\n     * @param messageId the message identifier for a message previously shown via\n     *                  {@link #displayDiagnosticMessage(int, CharSequence)}.\n     ",
    "links" : [ "#displayDiagnosticMessage(int" ]
  }, {
    "name" : "public void handleCallUpdated(@NonNull Call.Details newDetails)",
    "returnType" : "void",
    "comment" : "\n     * Called by the {@link CallDiagnosticService} to update the call details for this\n     * {@link CallDiagnostics} based on an update received from Telecom.\n     * @param newDetails the new call details.\n     * @hide\n     ",
    "links" : [ "android.telecom.CallDiagnosticService", "android.telecom.CallDiagnostics" ]
  } ],
  "methodNames" : [ "public void setListener(@NonNull Listener listener)", "public void setCallId(@NonNull String callId)", "public String getCallId()", "public abstract void onCallDetailsChanged(@NonNull android.telecom.Call.Details details)", "public abstract void onReceiveDeviceToDeviceMessage(@MessageType int message, int value)", "public final void sendDeviceToDeviceMessage(int message, int value)", "public abstract CharSequence onCallDisconnected(@Annotation.DisconnectCauses int disconnectCause, @Annotation.PreciseDisconnectCauses int preciseDisconnectCause)", "public abstract CharSequence onCallDisconnected(@NonNull ImsReasonInfo disconnectReason)", "public abstract void onCallQualityReceived(@NonNull CallQuality callQuality)", "public final void displayDiagnosticMessage(int messageId, @NonNull CharSequence message)", "public final void clearDiagnosticMessage(int messageId)", "public void handleCallUpdated(@NonNull Call.Details newDetails)" ],
  "variableNames" : [ "MESSAGE_CALL_NETWORK_TYPE", "MESSAGE_CALL_AUDIO_CODEC", "MESSAGE_DEVICE_BATTERY_STATE", "MESSAGE_DEVICE_NETWORK_COVERAGE", "BATTERY_STATE_LOW", "BATTERY_STATE_GOOD", "BATTERY_STATE_CHARGING", "COVERAGE_POOR", "COVERAGE_GOOD", "mListener", "mCallId" ]
}