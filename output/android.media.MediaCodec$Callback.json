{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodec.java",
  "packageName" : "android.media",
  "className" : "Callback",
  "comment" : "\n     * MediaCodec callback interface. Used to notify the user asynchronously\n     * of various MediaCodec events.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onInputBufferAvailable(@NonNull MediaCodec codec, int index)",
    "returnType" : "void",
    "comment" : "\n         * Called when an input buffer becomes available.\n         *\n         * @param codec The MediaCodec object.\n         * @param index The index of the available input buffer.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onOutputBufferAvailable(@NonNull MediaCodec codec, int index, @NonNull BufferInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Called when an output buffer becomes available.\n         *\n         * @param codec The MediaCodec object.\n         * @param index The index of the available output buffer.\n         * @param info Info regarding the available output buffer {@link MediaCodec.BufferInfo}.\n         ",
    "links" : [ "MediaCodec.BufferInfo" ]
  }, {
    "name" : "public void onOutputBuffersAvailable(@NonNull MediaCodec codec, int index, @NonNull ArrayDeque<BufferInfo> infos)",
    "returnType" : "void",
    "comment" : "\n         * Called when multiple access-units are available in the output.\n         *\n         * @param codec The MediaCodec object.\n         * @param index The index of the available output buffer.\n         * @param infos Infos describing the available output buffer {@link MediaCodec.BufferInfo}.\n         *              Access units present in the output buffer are laid out contiguously\n         *              without gaps and in order.\n         ",
    "links" : [ "MediaCodec.BufferInfo" ]
  }, {
    "name" : "public abstract void onError(@NonNull MediaCodec codec, @NonNull CodecException e)",
    "returnType" : "void",
    "comment" : "\n         * Called when the MediaCodec encountered an error\n         *\n         * @param codec The MediaCodec object.\n         * @param e The {@link MediaCodec.CodecException} object describing the error.\n         ",
    "links" : [ "MediaCodec.CodecException" ]
  }, {
    "name" : "public void onCryptoError(@NonNull MediaCodec codec, @NonNull CryptoException e)",
    "returnType" : "void",
    "comment" : "\n         * Called only when MediaCodec encountered a crypto(decryption) error when using\n         * a decoder configured with CONFIGURE_FLAG_USE_CRYPTO_ASYNC flag along with crypto\n         * or descrambler object.\n         *\n         * @param codec The MediaCodec object\n         * @param e The {@link MediaCodec.CryptoException} object with error details.\n         ",
    "links" : [ "MediaCodec.CryptoException" ]
  }, {
    "name" : "public abstract void onOutputFormatChanged(@NonNull MediaCodec codec, @NonNull MediaFormat format)",
    "returnType" : "void",
    "comment" : "\n         * Called when the output format has changed\n         *\n         * @param codec The MediaCodec object.\n         * @param format The new output format.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onInputBufferAvailable(@NonNull MediaCodec codec, int index)", "public abstract void onOutputBufferAvailable(@NonNull MediaCodec codec, int index, @NonNull BufferInfo info)", "public void onOutputBuffersAvailable(@NonNull MediaCodec codec, int index, @NonNull ArrayDeque<BufferInfo> infos)", "public abstract void onError(@NonNull MediaCodec codec, @NonNull CodecException e)", "public void onCryptoError(@NonNull MediaCodec codec, @NonNull CryptoException e)", "public abstract void onOutputFormatChanged(@NonNull MediaCodec codec, @NonNull MediaFormat format)" ],
  "variableNames" : [ ]
}