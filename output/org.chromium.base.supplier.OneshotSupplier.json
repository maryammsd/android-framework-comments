{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/OneshotSupplier.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "OneshotSupplier",
  "comment" : "\n * OneshotSupplier wraps an asynchronously provided, non-null object {@code T}, notifying\n * observers a single time when the dependency becomes available. Note that null is the un-set\n * value; a fulfilled supplier will never have a null underlying value.\n *\n * <p>This allows classes dependent on {@code T} to be provided with a\n * OneshotSupplier during construction and register a {@code Callback<T>} to be notified when the\n * needed dependency is available, but without the need to un-register that Callback upon\n * destruction. Contrast to {@link ObservableSupplier}, which requires un-registration to prevent\n * post-destruction callback invocation because the object can change an arbitrary number of times.\n *\n *\n * <p>This class must only be accessed from a single thread. Unless a particular thread designation\n * is given by the owner of the OneshotSupplier, clients should assume it must only be accessed on\n * the UI thread.\n *\n * <p>If you want to create a supplier, see an implementation in {@link OneshotSupplierImpl}.\n *\n * <p>For classes using a OneshotSupplier to receive a dependency:\n * <ul>\n *    <li>To be notified when the object is available, call {@link #onAvailable(Callback)}.\n *    <li>If the object is already available, the Callback will be posted immediately on the handler\n *    for the thread the supplier was created on.\n *    <li>The object held by this supplier will also be returned at the end of {@link\n *    #onAvailable(Callback)}.\n *    <li>The Callback will be called at most once. It's still\n * recommended to use {@link org.chromium.base.CallbackController} for safety.\n * </ul>\n *\n * @param <T> The type of the wrapped object.\n ",
  "links" : [ "org.chromium.base.supplier.OneshotSupplierImpl", "#onAvailable(Callback)", "org.chromium.base.CallbackController", "org.chromium.base.supplier.ObservableSupplier" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " T onAvailable(Callback<T> callback)",
    "returnType" : "T",
    "comment" : "\n     * Add a callback that's called when the object owned by this supplier is available.\n     * If the object is already available, the callback will be called at the end of the\n     * current message loop.\n     *\n     * @param callback The callback to be called.\n     * @return The value for this supplier if already available. Null otherwise.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " T onAvailable(Callback<T> callback)" ],
  "variableNames" : [ ]
}