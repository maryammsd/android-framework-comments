{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/tts/AbstractEventLogger.java",
  "packageName" : "android.speech.tts",
  "className" : "AbstractEventLogger",
  "comment" : "\n * Base class for storing data about a given speech synthesis request to the\n * event logs. The data that is logged depends on actual implementation. Note\n * that {@link AbstractEventLogger#onAudioDataWritten()} and\n * {@link AbstractEventLogger#onEngineComplete()} must be called from a single\n * thread (usually the audio playback thread}.\n ",
  "links" : [ "android.speech.tts.AbstractEventLogger#onAudioDataWritten()", "android.speech.tts.AbstractEventLogger#onEngineComplete()" ],
  "variables" : [ {
    "name" : "mServiceApp",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerPid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceivedTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaybackStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestProcessingStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEngineStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEngineCompleteTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogWritten",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onRequestProcessingStart()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the logger that this request has been selected from\n     * the processing queue for processing. Engine latency / total time\n     * is measured from this baseline.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onEngineDataReceived()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the logger that a chunk of data has been received from\n     * the engine. Might be called multiple times.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onEngineComplete()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the logger that the engine has finished processing data.\n     * Will be called exactly once.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAudioDataWritten()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the logger that audio playback has started for some section\n     * of the synthesis. This is normally some amount of time after the engine\n     * has synthesized data and varies depending on utterances and\n     * other audio currently in the queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCompleted(int statusCode)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the logger that the current synthesis has completed.\n     * All available data is not logged.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void logFailure(int statusCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void logSuccess(long audioLatency, long engineLatency, long engineTotal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onRequestProcessingStart()", "public void onEngineDataReceived()", "public void onEngineComplete()", "public void onAudioDataWritten()", "public void onCompleted(int statusCode)", "protected abstract void logFailure(int statusCode)", "protected abstract void logSuccess(long audioLatency, long engineLatency, long engineTotal)" ],
  "variableNames" : [ "mServiceApp", "mCallerUid", "mCallerPid", "mReceivedTime", "mPlaybackStartTime", "mRequestProcessingStartTime", "mEngineStartTime", "mEngineCompleteTime", "mLogWritten" ]
}