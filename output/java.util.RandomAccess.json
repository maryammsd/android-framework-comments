{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/RandomAccess.java",
  "packageName" : "java.util",
  "className" : "RandomAccess",
  "comment" : "\n * Marker interface used by {@code List} implementations to indicate that\n * they support fast (generally constant time) random access.  The primary\n * purpose of this interface is to allow generic algorithms to alter their\n * behavior to provide good performance when applied to either random or\n * sequential access lists.\n *\n * <p>The best algorithms for manipulating random access lists (such as\n * {@code ArrayList}) can produce quadratic behavior when applied to\n * sequential access lists (such as {@code LinkedList}).  Generic list\n * algorithms are encouraged to check whether the given list is an\n * {@code instanceof} this interface before applying an algorithm that would\n * provide poor performance if it were applied to a sequential access list,\n * and to alter their behavior if necessary to guarantee acceptable\n * performance.\n *\n * <p>It is recognized that the distinction between random and sequential\n * access is often fuzzy.  For example, some {@code List} implementations\n * provide asymptotically linear access times if they get huge, but constant\n * access times in practice.  Such a {@code List} implementation\n * should generally implement this interface.  As a rule of thumb, a\n * {@code List} implementation should implement this interface if,\n * for typical instances of the class, this loop:\n * <pre>\n *     for (int i=0, n=list.size(); i &lt; n; i++)\n *         list.get(i);\n * </pre>\n * runs faster than this loop:\n * <pre>\n *     for (Iterator i=list.iterator(); i.hasNext(); )\n *         i.next();\n * </pre>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ ]
}