{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/XMLFilterImpl.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "XMLFilterImpl",
  "comment" : "\n * Base class for deriving an XML filter.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class is designed to sit between an {@link org.xml.sax.XMLReader\n * XMLReader} and the client application's event handlers.  By default, it\n * does nothing but pass requests up to the reader and events\n * on to the handlers unmodified, but subclasses can override\n * specific methods to modify the event stream or the configuration\n * requests as they pass through.</p>\n *\n * @since SAX 2.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.XMLFilter\n * @see org.xml.sax.XMLReader\n * @see org.xml.sax.EntityResolver\n * @see org.xml.sax.DTDHandler\n * @see org.xml.sax.ContentHandler\n * @see org.xml.sax.ErrorHandler\n ",
  "links" : [ "org.xml.sax.XMLReaderXMLReader" ],
  "variables" : [ {
    "name" : "parent",
    "type" : "XMLReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locator",
    "type" : "Locator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entityResolver",
    "type" : "EntityResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dtdHandler",
    "type" : "DTDHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contentHandler",
    "type" : "ContentHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errorHandler",
    "type" : "ErrorHandler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setParent(XMLReader parent)",
    "returnType" : "void",
    "comment" : "\n     * Set the parent reader.\n     *\n     * <p>This is the {@link org.xml.sax.XMLReader XMLReader} from which\n     * this filter will obtain its events and to which it will pass its\n     * configuration requests.  The parent may itself be another filter.</p>\n     *\n     * <p>If there is no parent reader set, any attempt to parse\n     * or to set or get a feature or property will fail.</p>\n     *\n     * @param parent The parent XML reader.\n     * @see #getParent\n     ",
    "links" : [ "org.xml.sax.XMLReader" ]
  }, {
    "name" : "public XMLReader getParent()",
    "returnType" : "XMLReader",
    "comment" : "\n     * Get the parent reader.\n     *\n     * @return The parent XML reader, or null if none is set.\n     * @see #setParent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a feature.\n     *\n     * <p>This will always fail if the parent is null.</p>\n     *\n     * @param name The feature name.\n     * @param value The requested feature value.\n     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved from the parent.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            parent recognizes the feature name but\n     *            cannot set the requested value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "boolean",
    "comment" : "\n     * Look up the value of a feature.\n     *\n     * <p>This will always fail if the parent is null.</p>\n     *\n     * @param name The feature name.\n     * @return The current value of the feature.\n     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved from the parent.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            parent recognizes the feature name but\n     *            cannot determine its value at this time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a property.\n     *\n     * <p>This will always fail if the parent is null.</p>\n     *\n     * @param name The property name.\n     * @param value The requested property value.\n     * @exception org.xml.sax.SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved from the parent.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            parent recognizes the property name but\n     *            cannot set the requested value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Look up the value of a property.\n     *\n     * @param name The property name.\n     * @return The current value of the property.\n     * @exception org.xml.sax.SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved from the parent.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            parent recognizes the property name but\n     *            cannot determine its value at this time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Set the entity resolver.\n     *\n     * @param resolver The new entity resolver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public EntityResolver getEntityResolver()",
    "returnType" : "EntityResolver",
    "comment" : "\n     * Get the current entity resolver.\n     *\n     * @return The current entity resolver, or null if none was set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDTDHandler(DTDHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the DTD event handler.\n     *\n     * @param handler the new DTD handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public DTDHandler getDTDHandler()",
    "returnType" : "DTDHandler",
    "comment" : "\n     * Get the current DTD event handler.\n     *\n     * @return The current DTD handler, or null if none was set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the content event handler.\n     *\n     * @param handler the new content handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentHandler getContentHandler()",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Get the content event handler.\n     *\n     * @return The current content handler, or null if none was set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the error event handler.\n     *\n     * @param handler the new error handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public ErrorHandler getErrorHandler()",
    "returnType" : "ErrorHandler",
    "comment" : "\n     * Get the current error event handler.\n     *\n     * @return The current error handler, or null if none was set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parse(InputSource input) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse a document.\n     *\n     * @param input The input source for the document entity.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @exception java.io.IOException An IO exception from the parser,\n     *            possibly from a byte stream or character stream\n     *            supplied by the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parse(String systemId) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse a document.\n     *\n     * @param systemId The system identifier as a fully-qualified URI.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @exception java.io.IOException An IO exception from the parser,\n     *            possibly from a byte stream or character stream\n     *            supplied by the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException",
    "returnType" : "InputSource",
    "comment" : "\n     * Filter an external entity resolution.\n     *\n     * @param publicId The entity's public identifier, or null.\n     * @param systemId The entity's system identifier.\n     * @return A new InputSource or null for the default.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     * @exception java.io.IOException The client may throw an\n     *            I/O-related exception while obtaining the\n     *            new InputSource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a notation declaration event.\n     *\n     * @param name The notation name.\n     * @param publicId The notation's public identifier, or null.\n     * @param systemId The notation's system identifier, or null.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter an unparsed entity declaration event.\n     *\n     * @param name The entity name.\n     * @param publicId The entity's public identifier, or null.\n     * @param systemId The entity's system identifier, or null.\n     * @param notationName The name of the associated notation.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n     * Filter a new document locator event.\n     *\n     * @param locator The document locator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a start document event.\n     *\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter an end document event.\n     *\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a start Namespace prefix mapping event.\n     *\n     * @param prefix The Namespace prefix.\n     * @param uri The Namespace URI.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter an end Namespace prefix mapping event.\n     *\n     * @param prefix The Namespace prefix.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a start element event.\n     *\n     * @param uri The element's Namespace URI, or the empty string.\n     * @param localName The element's local name, or the empty string.\n     * @param qName The element's qualified (prefixed) name, or the empty\n     *        string.\n     * @param atts The element's attributes.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter an end element event.\n     *\n     * @param uri The element's Namespace URI, or the empty string.\n     * @param localName The element's local name, or the empty string.\n     * @param qName The element's qualified (prefixed) name, or the empty\n     *        string.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a character data event.\n     *\n     * @param ch An array of characters.\n     * @param start The starting position in the array.\n     * @param length The number of characters to use from the array.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter an ignorable whitespace event.\n     *\n     * @param ch An array of characters.\n     * @param start The starting position in the array.\n     * @param length The number of characters to use from the array.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a processing instruction event.\n     *\n     * @param target The processing instruction target.\n     * @param data The text following the target.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a skipped entity event.\n     *\n     * @param name The name of the skipped entity.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a warning event.\n     *\n     * @param e The warning as an exception.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter an error event.\n     *\n     * @param e The error as an exception.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Filter a fatal error event.\n     *\n     * @param e The error as an exception.\n     * @exception org.xml.sax.SAXException The client may throw\n     *            an exception during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupParse()",
    "returnType" : "void",
    "comment" : "\n     * Set up before a parse.\n     *\n     * <p>Before every parse, check whether the parent is\n     * non-null, and re-register the filter for all of the\n     * events.</p>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setParent(XMLReader parent)", "public XMLReader getParent()", "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException", "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException", "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setEntityResolver(EntityResolver resolver)", "public EntityResolver getEntityResolver()", "public void setDTDHandler(DTDHandler handler)", "public DTDHandler getDTDHandler()", "public void setContentHandler(ContentHandler handler)", "public ContentHandler getContentHandler()", "public void setErrorHandler(ErrorHandler handler)", "public ErrorHandler getErrorHandler()", "public void parse(InputSource input) throws SAXException, IOException", "public void parse(String systemId) throws SAXException, IOException", "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException", "public void notationDecl(String name, String publicId, String systemId) throws SAXException", "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void skippedEntity(String name) throws SAXException", "public void warning(SAXParseException e) throws SAXException", "public void error(SAXParseException e) throws SAXException", "public void fatalError(SAXParseException e) throws SAXException", "private void setupParse()" ],
  "variableNames" : [ "parent", "locator", "entityResolver", "dtdHandler", "contentHandler", "errorHandler" ]
}