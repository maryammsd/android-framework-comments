{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/textclassifier/TextClassifier.java",
  "packageName" : "android.view.textclassifier",
  "className" : "TextClassifier",
  "comment" : "\n * Interface for providing text classification related features.\n * <p>\n * The TextClassifier may be used to understand the meaning of text, as well as generating predicted\n * next actions based on the text.\n *\n * <p><strong>NOTE: </strong>Unless otherwise stated, methods of this interface are blocking\n * operations. Call on a worker thread.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOCAL",
    "type" : "int",
    "comment" : " Specifies a TextClassifier that runs locally in the app's process. @hide ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM",
    "type" : "int",
    "comment" : " Specifies a TextClassifier that runs in the system process and serves all apps. @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SYSTEM",
    "type" : "int",
    "comment" : " Specifies the default TextClassifier that runs in the system process. @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "String",
    "comment" : " The TextClassifier failed to run. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_OTHER",
    "type" : "String",
    "comment" : " The classifier ran, but didn't recognize a known entity. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_EMAIL",
    "type" : "String",
    "comment" : " E-mail address (e.g. \"noreply@android.com\"). ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PHONE",
    "type" : "String",
    "comment" : " Phone number (e.g. \"555-123 456\"). ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ADDRESS",
    "type" : "String",
    "comment" : " Physical address. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_URL",
    "type" : "String",
    "comment" : " Web URL. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DATE",
    "type" : "String",
    "comment" : " Time reference that is no more specific than a date. May be absolute such as \"01/01/2000\" or\n     * relative like \"tomorrow\". *",
    "links" : [ ]
  }, {
    "name" : "TYPE_DATE_TIME",
    "type" : "String",
    "comment" : " Time reference that includes a specific time. May be absolute such as \"01/01/2000 5:30pm\" or\n     * relative like \"tomorrow at 5:30pm\". *",
    "links" : [ ]
  }, {
    "name" : "TYPE_FLIGHT_NUMBER",
    "type" : "String",
    "comment" : " Flight number in IATA format. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DICTIONARY",
    "type" : "String",
    "comment" : "\n     * Word that users may be interested to look up for meaning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HINT_TEXT_IS_EDITABLE",
    "type" : "String",
    "comment" : " Designates that the text in question is editable. *",
    "links" : [ ]
  }, {
    "name" : "HINT_TEXT_IS_NOT_EDITABLE",
    "type" : "String",
    "comment" : " Designates that the text in question is not editable. *",
    "links" : [ ]
  }, {
    "name" : "WIDGET_TYPE_TEXTVIEW",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a standard\n     * {@link android.widget.TextView}. ",
    "links" : [ "android.widget.TextView" ]
  }, {
    "name" : "WIDGET_TYPE_EDITTEXT",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a standard\n     * {@link android.widget.EditText}. ",
    "links" : [ "android.widget.EditText" ]
  }, {
    "name" : "WIDGET_TYPE_UNSELECTABLE_TEXTVIEW",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a standard non-selectable\n     * {@link android.widget.TextView}. ",
    "links" : [ "android.widget.TextView" ]
  }, {
    "name" : "WIDGET_TYPE_WEBVIEW",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a standard\n     * {@link android.webkit.WebView}. ",
    "links" : [ "android.webkit.WebView" ]
  }, {
    "name" : "WIDGET_TYPE_EDIT_WEBVIEW",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a standard editable\n     * {@link android.webkit.WebView}. ",
    "links" : [ "android.webkit.WebView" ]
  }, {
    "name" : "WIDGET_TYPE_CUSTOM_TEXTVIEW",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a custom text widget. ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_TYPE_CUSTOM_EDITTEXT",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a custom editable text widget. ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a custom non-selectable text\n     * widget. ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_TYPE_NOTIFICATION",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is a notification ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_TYPE_CLIPBOARD",
    "type" : "String",
    "comment" : " The text classification context is for use with the system clipboard. ",
    "links" : [ ]
  }, {
    "name" : "WIDGET_TYPE_UNKNOWN",
    "type" : "String",
    "comment" : " The widget involved in the text classification context is of an unknown/unspecified type. ",
    "links" : [ ]
  }, {
    "name" : "NO_OP",
    "type" : "TextClassifier",
    "comment" : "\n     * No-op TextClassifier.\n     * This may be used to turn off TextClassifier features.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FROM_TEXT_CLASSIFIER",
    "type" : "String",
    "comment" : "\n     * Extra that is included on activity intents coming from a TextClassifier when\n     * it suggests actions to its caller.\n     * <p>\n     * All {@link TextClassifier} implementations should make sure this extra exists in their\n     * generated intents.\n     ",
    "links" : [ "android.view.textclassifier.TextClassifier" ]
  } ],
  "methods" : [ {
    "name" : " static String typeToString(@TextClassifierType int type)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " TextSelection suggestSelection(@NonNull TextSelection.Request request)",
    "returnType" : "TextSelection",
    "comment" : "\n     * Returns suggested text selection start and end indices, recognized entity types, and their\n     * associated confidence scores. The entity types are ordered from highest to lowest scoring.\n     *\n     * <p><strong>NOTE: </strong>Call on a worker thread.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * @param request the text selection request\n     ",
    "links" : [ "IllegalStateException", "#isDestroyed()" ]
  }, {
    "name" : " TextSelection suggestSelection(@NonNull CharSequence text, @IntRange(from = 0) int selectionStartIndex, @IntRange(from = 0) int selectionEndIndex, @Nullable LocaleList defaultLocales)",
    "returnType" : "TextSelection",
    "comment" : "\n     * Returns suggested text selection start and end indices, recognized entity types, and their\n     * associated confidence scores. The entity types are ordered from highest to lowest scoring.\n     *\n     * <p><strong>NOTE: </strong>Call on a worker thread.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * <p><b>NOTE:</b> Do not implement. The default implementation of this method calls\n     * {@link #suggestSelection(TextSelection.Request)}. If that method calls this method,\n     * a stack overflow error will happen.\n     *\n     * @param text text providing context for the selected text (which is specified\n     *      by the sub sequence starting at selectionStartIndex and ending at selectionEndIndex)\n     * @param selectionStartIndex start index of the selected part of text\n     * @param selectionEndIndex end index of the selected part of text\n     * @param defaultLocales ordered list of locale preferences that may be used to\n     *      disambiguate the provided text. If no locale preferences exist, set this to null\n     *      or an empty locale list.\n     *\n     * @throws IllegalArgumentException if text is null; selectionStartIndex is negative;\n     *      selectionEndIndex is greater than text.length() or not greater than selectionStartIndex\n     *\n     * @see #suggestSelection(TextSelection.Request)\n     ",
    "links" : [ "IllegalStateException", "#suggestSelection(TextSelection.Request)", "#isDestroyed()" ]
  }, {
    "name" : " TextClassification classifyText(@NonNull TextClassification.Request request)",
    "returnType" : "TextClassification",
    "comment" : "\n     * Classifies the specified text and returns a {@link TextClassification} object that can be\n     * used to generate a widget for handling the classified text.\n     *\n     * <p><strong>NOTE: </strong>Call on a worker thread.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * @param request the text classification request\n     ",
    "links" : [ "IllegalStateException", "android.view.textclassifier.TextClassification", "#isDestroyed()" ]
  }, {
    "name" : " TextClassification classifyText(@NonNull CharSequence text, @IntRange(from = 0) int startIndex, @IntRange(from = 0) int endIndex, @Nullable LocaleList defaultLocales)",
    "returnType" : "TextClassification",
    "comment" : "\n     * Classifies the specified text and returns a {@link TextClassification} object that can be\n     * used to generate a widget for handling the classified text.\n     *\n     * <p><strong>NOTE: </strong>Call on a worker thread.\n     *\n     * <p><b>NOTE:</b> Do not implement. The default implementation of this method calls\n     * {@link #classifyText(TextClassification.Request)}. If that method calls this method,\n     * a stack overflow error will happen.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * @param text text providing context for the text to classify (which is specified\n     *      by the sub sequence starting at startIndex and ending at endIndex)\n     * @param startIndex start index of the text to classify\n     * @param endIndex end index of the text to classify\n     * @param defaultLocales ordered list of locale preferences that may be used to\n     *      disambiguate the provided text. If no locale preferences exist, set this to null\n     *      or an empty locale list.\n     *\n     * @throws IllegalArgumentException if text is null; startIndex is negative;\n     *      endIndex is greater than text.length() or not greater than startIndex\n     *\n     * @see #classifyText(TextClassification.Request)\n     ",
    "links" : [ "IllegalStateException", "android.view.textclassifier.TextClassification", "#classifyText(TextClassification.Request)", "#isDestroyed()" ]
  }, {
    "name" : " TextLinks generateLinks(@NonNull TextLinks.Request request)",
    "returnType" : "TextLinks",
    "comment" : "\n     * Generates and returns a {@link TextLinks} that may be applied to the text to annotate it with\n     * links information.\n     *\n     * <p><strong>NOTE: </strong>Call on a worker thread.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * @param request the text links request\n     *\n     * @see #getMaxGenerateLinksTextLength()\n     ",
    "links" : [ "android.view.textclassifier.TextLinks", "IllegalStateException", "#isDestroyed()" ]
  }, {
    "name" : " int getMaxGenerateLinksTextLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximal length of text that can be processed by generateLinks.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * @see #generateLinks(TextLinks.Request)\n     ",
    "links" : [ "IllegalStateException", "#isDestroyed()" ]
  }, {
    "name" : " TextLanguage detectLanguage(@NonNull TextLanguage.Request request)",
    "returnType" : "TextLanguage",
    "comment" : "\n     * Detects the language of the text in the given request.\n     *\n     * <p><strong>NOTE: </strong>Call on a worker thread.\n     *\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * @param request the {@link TextLanguage} request.\n     * @return the {@link TextLanguage} result.\n     ",
    "links" : [ "IllegalStateException", "#isDestroyed()", "android.view.textclassifier.TextLanguage" ]
  }, {
    "name" : " ConversationActions suggestConversationActions(@NonNull ConversationActions.Request request)",
    "returnType" : "ConversationActions",
    "comment" : "\n     * Suggests and returns a list of actions according to the given conversation.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onSelectionEvent(@NonNull SelectionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * <strong>NOTE: </strong>Use {@link #onTextClassifierEvent(TextClassifierEvent)} instead.\n     * <p>\n     * Reports a selection event.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to this method should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     ",
    "links" : [ "IllegalStateException", "#isDestroyed()", "#onTextClassifierEvent(TextClassifierEvent)" ]
  }, {
    "name" : " void onTextClassifierEvent(@NonNull TextClassifierEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Reports a text classifier event.\n     * <p>\n     * <strong>NOTE: </strong>Call on a worker thread.\n     *\n     * @throws IllegalStateException if this TextClassifier has been destroyed.\n     * @see #isDestroyed()\n     ",
    "links" : [ ]
  }, {
    "name" : " void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys this TextClassifier.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, calls to its methods should\n     * throw an {@link IllegalStateException}. See {@link #isDestroyed()}.\n     *\n     * <p>Subsequent calls to this method are no-ops.\n     ",
    "links" : [ "IllegalStateException", "#isDestroyed()" ]
  }, {
    "name" : " boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this TextClassifier has been destroyed.\n     *\n     * <p><strong>NOTE: </strong>If a TextClassifier has been destroyed, caller should not interact\n     * with the classifier and an attempt to do so would throw an {@link IllegalStateException}.\n     * However, this method should never throw an {@link IllegalStateException}.\n     *\n     * @see #destroy()\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : " void dump(@NonNull IndentingPrintWriter printWriter)",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  } ],
  "methodNames" : [ " static String typeToString(@TextClassifierType int type)", " TextSelection suggestSelection(@NonNull TextSelection.Request request)", " TextSelection suggestSelection(@NonNull CharSequence text, @IntRange(from = 0) int selectionStartIndex, @IntRange(from = 0) int selectionEndIndex, @Nullable LocaleList defaultLocales)", " TextClassification classifyText(@NonNull TextClassification.Request request)", " TextClassification classifyText(@NonNull CharSequence text, @IntRange(from = 0) int startIndex, @IntRange(from = 0) int endIndex, @Nullable LocaleList defaultLocales)", " TextLinks generateLinks(@NonNull TextLinks.Request request)", " int getMaxGenerateLinksTextLength()", " TextLanguage detectLanguage(@NonNull TextLanguage.Request request)", " ConversationActions suggestConversationActions(@NonNull ConversationActions.Request request)", " void onSelectionEvent(@NonNull SelectionEvent event)", " void onTextClassifierEvent(@NonNull TextClassifierEvent event)", " void destroy()", " boolean isDestroyed()", " void dump(@NonNull IndentingPrintWriter printWriter)" ],
  "variableNames" : [ "LOG_TAG", "LOCAL", "SYSTEM", "DEFAULT_SYSTEM", "TYPE_UNKNOWN", "TYPE_OTHER", "TYPE_EMAIL", "TYPE_PHONE", "TYPE_ADDRESS", "TYPE_URL", "TYPE_DATE", "TYPE_DATE_TIME", "TYPE_FLIGHT_NUMBER", "TYPE_DICTIONARY", "HINT_TEXT_IS_EDITABLE", "HINT_TEXT_IS_NOT_EDITABLE", "WIDGET_TYPE_TEXTVIEW", "WIDGET_TYPE_EDITTEXT", "WIDGET_TYPE_UNSELECTABLE_TEXTVIEW", "WIDGET_TYPE_WEBVIEW", "WIDGET_TYPE_EDIT_WEBVIEW", "WIDGET_TYPE_CUSTOM_TEXTVIEW", "WIDGET_TYPE_CUSTOM_EDITTEXT", "WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW", "WIDGET_TYPE_NOTIFICATION", "WIDGET_TYPE_CLIPBOARD", "WIDGET_TYPE_UNKNOWN", "NO_OP", "EXTRA_FROM_TEXT_CLASSIFIER" ]
}