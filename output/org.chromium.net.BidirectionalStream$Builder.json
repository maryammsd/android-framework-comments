{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/BidirectionalStream.java",
  "packageName" : "org.chromium.net",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link BidirectionalStream}s. Allows configuring stream before constructing it\n     * via\n     * {@link Builder#build}. Created by {@link CronetEngine#newBidirectionalStreamBuilder}.\n     ",
  "links" : [ "org.chromium.net.CronetEngine#newBidirectionalStreamBuilder", "#build", "org.chromium.net.BidirectionalStream" ],
  "variables" : [ {
    "name" : "STREAM_PRIORITY_IDLE",
    "type" : "int",
    "comment" : " Lowest stream priority. Passed to {@link #setPriority}. ",
    "links" : [ "#setPriority" ]
  }, {
    "name" : "STREAM_PRIORITY_LOWEST",
    "type" : "int",
    "comment" : " Very low stream priority. Passed to {@link #setPriority}. ",
    "links" : [ "#setPriority" ]
  }, {
    "name" : "STREAM_PRIORITY_LOW",
    "type" : "int",
    "comment" : " Low stream priority. Passed to {@link #setPriority}. ",
    "links" : [ "#setPriority" ]
  }, {
    "name" : "STREAM_PRIORITY_MEDIUM",
    "type" : "int",
    "comment" : "\n         * Medium stream priority. Passed to {@link #setPriority}. This is the default priority\n         * given to the stream.\n         ",
    "links" : [ "#setPriority" ]
  }, {
    "name" : "STREAM_PRIORITY_HIGHEST",
    "type" : "int",
    "comment" : " Highest stream priority. Passed to {@link #setPriority}. ",
    "links" : [ "#setPriority" ]
  } ],
  "methods" : [ {
    "name" : "public abstract Builder setHttpMethod(String method)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the HTTP method for the request. Returns builder to facilitate chaining.\n         *\n         * @param method the method to use for request. Default is 'POST'\n         * @return the builder to facilitate chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder addHeader(String header, String value)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a request header. Returns builder to facilitate chaining.\n         *\n         * @param header the header name\n         * @param value the header value\n         * @return the builder to facilitate chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder setPriority(int priority)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets priority of the stream which should be one of the {@link #STREAM_PRIORITY_IDLE\n         * STREAM_PRIORITY_*} values. The stream is given {@link #STREAM_PRIORITY_MEDIUM} priority\n         * if this method is not called.\n         *\n         * @param priority priority of the stream which should be one of the {@link\n         * #STREAM_PRIORITY_IDLE STREAM_PRIORITY_*} values.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#STREAM_PRIORITY_MEDIUM", "#STREAM_PRIORITY_IDLE", "#STREAM_PRIORITY_IDLESTREAM_PRIORITY_" ]
  }, {
    "name" : "public abstract Builder delayRequestHeadersUntilFirstFlush(boolean delayRequestHeadersUntilFirstFlush)",
    "returnType" : "Builder",
    "comment" : "\n         * Delays sending request headers until {@link BidirectionalStream#flush()} is called. This\n         * flag is currently only respected when QUIC is negotiated. When true, QUIC will send\n         * request header frame along with data frame(s) as a single packet when possible.\n         *\n         * @param delayRequestHeadersUntilFirstFlush if true, sending request headers will be\n         *         delayed\n         * until flush() is called.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "org.chromium.net.BidirectionalStream#flush()" ]
  }, {
    "name" : "public Builder addRequestAnnotation(Object annotation)",
    "returnType" : "Builder",
    "comment" : "\n         * Associates the annotation object with this request. May add more than one. Passed through\n         * to a {@link RequestFinishedInfo.Listener}, see {@link\n         * RequestFinishedInfo#getAnnotations}.\n         *\n         * @param annotation an object to pass on to the {@link RequestFinishedInfo.Listener} with a\n         * {@link RequestFinishedInfo}.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "org.chromium.net.RequestFinishedInfo", "RequestFinishedInfo.Listener", "org.chromium.net.RequestFinishedInfo#getAnnotations" ]
  }, {
    "name" : "public Builder setTrafficStatsTag(int tag)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets {@link android.net.TrafficStats} tag to use when accounting socket traffic caused by\n         * this request. See {@link android.net.TrafficStats} for more information. If no tag is set\n         * (e.g. this method isn't called), then Android accounts for the socket traffic caused by\n         * this request as if the tag value were set to 0. <p> <b>NOTE:</b>Setting a tag disallows\n         * sharing of sockets with requests with other tags, which may adversely effect performance\n         * by prohibiting connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n         * and QUIC) will only be allowed if all requests have the same socket tag.\n         *\n         * @param tag the tag value used to when accounting for socket traffic caused by this\n         *         request.\n         * Tags between 0xFFFFFF00 and 0xFFFFFFFF are reserved and used internally by system\n         * services like {@link android.app.DownloadManager} when performing traffic on behalf of an\n         * application.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.app.DownloadManager", "android.net.TrafficStats" ]
  }, {
    "name" : "public Builder setTrafficStatsUid(int uid)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets specific UID to use when accounting socket traffic caused by this request. See\n         * {@link android.net.TrafficStats} for more information. Designed for use when performing\n         * an operation on behalf of another application. Caller must hold {@code\n         * MODIFY_NETWORK_ACCOUNTING} permission. By default traffic is attributed to UID of caller.\n         *\n         * <p><b>NOTE:</b>Setting a UID disallows sharing of sockets with requests with other UIDs,\n         * which may adversely effect performance by prohibiting connection sharing. In other words\n         * use of multiplexed sockets (e.g. HTTP/2 and QUIC) will only be allowed if all requests\n         * have the same UID set.\n         *\n         * @param uid the UID to attribute socket traffic caused by this request.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.net.TrafficStats" ]
  }, {
    "name" : "public Builder bindToNetwork(long networkHandle)",
    "returnType" : "Builder",
    "comment" : "\n         * Binds the request to the specified network handle. Cronet will send this request only\n         * using the network associated to this handle. If this network disconnects the request will\n         * fail, the exact error will depend on the stage of request processing when the network\n         * disconnects. Network handles can be obtained through {@code Network#getNetworkHandle}.\n         * Only available starting from Android Marshmallow.\n         *\n         * @param networkHandle the network handle to bind the request to. Specify {@link\n         * CronetEngine#UNBIND_NETWORK_HANDLE} to unbind.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "org.chromium.net.CronetEngine#UNBIND_NETWORK_HANDLE" ]
  }, {
    "name" : "public abstract BidirectionalStream build()",
    "returnType" : "BidirectionalStream",
    "comment" : "\n         * Creates a {@link BidirectionalStream} using configuration from this {@link Builder}. The\n         * returned {@code BidirectionalStream} can then be started by calling {@link\n         * BidirectionalStream#start}.\n         *\n         * @return constructed {@link BidirectionalStream} using configuration from this {@link\n         *         Builder}\n         ",
    "links" : [ "Builder", "org.chromium.net.BidirectionalStream#start", "org.chromium.net.BidirectionalStream" ]
  } ],
  "methodNames" : [ "public abstract Builder setHttpMethod(String method)", "public abstract Builder addHeader(String header, String value)", "public abstract Builder setPriority(int priority)", "public abstract Builder delayRequestHeadersUntilFirstFlush(boolean delayRequestHeadersUntilFirstFlush)", "public Builder addRequestAnnotation(Object annotation)", "public Builder setTrafficStatsTag(int tag)", "public Builder setTrafficStatsUid(int uid)", "public Builder bindToNetwork(long networkHandle)", "public abstract BidirectionalStream build()" ],
  "variableNames" : [ "STREAM_PRIORITY_IDLE", "STREAM_PRIORITY_LOWEST", "STREAM_PRIORITY_LOW", "STREAM_PRIORITY_MEDIUM", "STREAM_PRIORITY_HIGHEST" ]
}