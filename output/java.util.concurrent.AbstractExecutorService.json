{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/AbstractExecutorService.java",
  "packageName" : "java.util.concurrent",
  "className" : "AbstractExecutorService",
  "comment" : "\n * Provides default implementations of {@link ExecutorService}\n * execution methods. This class implements the {@code submit},\n * {@code invokeAny} and {@code invokeAll} methods using a\n * {@link RunnableFuture} returned by {@code newTaskFor}, which defaults\n * to the {@link FutureTask} class provided in this package.  For example,\n * the implementation of {@code submit(Runnable)} creates an\n * associated {@code RunnableFuture} that is executed and\n * returned. Subclasses may override the {@code newTaskFor} methods\n * to return {@code RunnableFuture} implementations other than\n * {@code FutureTask}.\n *\n * <p><b>Extension example.</b> Here is a sketch of a class\n * that customizes {@link ThreadPoolExecutor} to use\n * a {@code CustomTask} class instead of the default {@code FutureTask}:\n * <pre> {@code\n * public class CustomThreadPoolExecutor extends ThreadPoolExecutor {\n *\n *   static class CustomTask<V> implements RunnableFuture<V> { ... }\n *\n *   protected <V> RunnableFuture<V> newTaskFor(Callable<V> c) {\n *       return new CustomTask<V>(c);\n *   }\n *   protected <V> RunnableFuture<V> newTaskFor(Runnable r, V v) {\n *       return new CustomTask<V>(r, v);\n *   }\n *   // ... add constructors, etc.\n * }}</pre>\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.RunnableFuture", "java.util.concurrent.ThreadPoolExecutor", "java.util.concurrent.FutureTask", "java.util.concurrent.ExecutorService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected RunnableFuture<T> newTaskFor(Runnable runnable, T value)",
    "returnType" : "RunnableFuture<T>",
    "comment" : "\n     * Returns a {@code RunnableFuture} for the given runnable and default\n     * value.\n     *\n     * @param runnable the runnable task being wrapped\n     * @param value the default value for the returned future\n     * @param <T> the type of the given value\n     * @return a {@code RunnableFuture} which, when run, will run the\n     * underlying runnable and which, as a {@code Future}, will yield\n     * the given value as its result and provide for cancellation of\n     * the underlying task\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "protected RunnableFuture<T> newTaskFor(Callable<T> callable)",
    "returnType" : "RunnableFuture<T>",
    "comment" : "\n     * Returns a {@code RunnableFuture} for the given callable task.\n     *\n     * @param callable the callable task being wrapped\n     * @param <T> the type of the callable's result\n     * @return a {@code RunnableFuture} which, when run, will call the\n     * underlying callable and which, as a {@code Future}, will yield\n     * the callable's result as its result and provide for\n     * cancellation of the underlying task\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public Future<?> submit(Runnable task)",
    "returnType" : "Future<?>",
    "comment" : "\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Future<T> submit(Runnable task, T result)",
    "returnType" : "Future<T>",
    "comment" : "\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Future<T> submit(Callable<T> task)",
    "returnType" : "Future<T>",
    "comment" : "\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private T doInvokeAny(Collection<? extends Callable<T>> tasks, boolean timed, long nanos) throws InterruptedException, ExecutionException, TimeoutException",
    "returnType" : "T",
    "comment" : "\n     * the main mechanics of invokeAny.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException",
    "returnType" : "List<Future<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "List<Future<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void cancelAll(ArrayList<Future<T>> futures)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void cancelAll(ArrayList<Future<T>> futures, int j)",
    "returnType" : "void",
    "comment" : " Cancels all futures with index at least j. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected RunnableFuture<T> newTaskFor(Runnable runnable, T value)", "protected RunnableFuture<T> newTaskFor(Callable<T> callable)", "public Future<?> submit(Runnable task)", "public Future<T> submit(Runnable task, T result)", "public Future<T> submit(Callable<T> task)", "private T doInvokeAny(Collection<? extends Callable<T>> tasks, boolean timed, long nanos) throws InterruptedException, ExecutionException, TimeoutException", "public T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException", "public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException", "public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException", "public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException", "private static void cancelAll(ArrayList<Future<T>> futures)", "private static void cancelAll(ArrayList<Future<T>> futures, int j)" ],
  "variableNames" : [ ]
}