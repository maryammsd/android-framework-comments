{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/VariableStack.java",
  "packageName" : "org.apache.xpath",
  "className" : "VariableStack",
  "comment" : "\n * Defines a class to keep track of a stack for\n * template arguments and variables.\n *\n * <p>This has been changed from the previous incarnations of this\n * class to be fairly low level.</p>\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CLEARLIMITATION",
    "type" : "int",
    "comment" : "\n   * limitation for 1K\n   ",
    "links" : [ ]
  }, {
    "name" : "_stackFrames",
    "type" : "XObject[]",
    "comment" : "\n   * The stack frame where all variables and params will be kept.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "_frameTop",
    "type" : "int",
    "comment" : "\n   * The top of the stack frame (<code>_stackFrames</code>).\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "_currentFrameBottom",
    "type" : "int",
    "comment" : "\n   * The bottom index of the current frame (relative to <code>_stackFrames</code>).\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "_links",
    "type" : "int[]",
    "comment" : "\n   * The stack of frame positions.  I call 'em links because of distant\n   * <a href=\"http://math.millikin.edu/mprogers/Courses/currentCourses/CS481-ComputerArchitecture/cs481.Motorola68000.html\">\n   * Motorola 68000 assembler</a> memories.  :-)\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "_linksTop",
    "type" : "int",
    "comment" : "\n   * The top of the links stack.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_nulls",
    "type" : "XObject[]",
    "comment" : " NEEDSDOC Field m_nulls          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Returns a clone of this variable stack.\n   *\n   * @return  a clone of this variable stack.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject elementAt(final int i)",
    "returnType" : "XObject",
    "comment" : "\n   * Get the element at the given index, regardless of stackframe.\n   *\n   * @param i index from zero.\n   *\n   * @return The item at the given index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n   * Get size of the stack.\n   *\n   * @return the total size of the execution stack.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the stack to a start position.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void reset(int linksSize, int varArraySize)",
    "returnType" : "void",
    "comment" : "\n   * Reset the stack to a start position.\n   * @param linksSize Initial stack size to use\n   * @param varArraySize Initial variable array size to use\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStackFrame(int sf)",
    "returnType" : "void",
    "comment" : "\n   * Set the current stack frame.\n   *\n   * @param sf The new stack frame position.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getStackFrame()",
    "returnType" : "int",
    "comment" : "\n   * Get the position from where the search should start,\n   * which is either the searchStart property, or the top\n   * of the stack if that value is -1.\n   *\n   * @return The current stack frame position.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int link(final int size)",
    "returnType" : "int",
    "comment" : "\n   * Allocates memory (called a stackframe) on the stack; used to store\n   * local variables and parameter arguments.\n   *\n   * <p>I use the link/unlink concept because of distant\n   * <a href=\"http://math.millikin.edu/mprogers/Courses/currentCourses/CS481-ComputerArchitecture/cs481.Motorola68000.html\">\n   * Motorola 68000 assembler</a> memories.</p>\n   *\n   * @param size The size of the stack frame allocation.  This ammount should\n   * normally be the maximum number of variables that you can have allocated\n   * at one time in the new stack frame.\n   *\n   * @return The bottom of the stack frame, from where local variable addressing\n   * should start from.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void unlink()",
    "returnType" : "void",
    "comment" : "\n   * Free up the stack frame that was last allocated with\n   * {@link #link(int size)}.\n   ",
    "links" : [ "#link(int" ]
  }, {
    "name" : "public void unlink(int currentFrame)",
    "returnType" : "void",
    "comment" : "\n   * Free up the stack frame that was last allocated with\n   * {@link #link(int size)}.\n   * @param currentFrame The current frame to set to \n   * after the unlink.\n   ",
    "links" : [ "#link(int" ]
  }, {
    "name" : "public void setLocalVariable(int index, XObject val)",
    "returnType" : "void",
    "comment" : "\n   * Set a local variable or parameter in the current stack frame.\n   *\n   *\n   * @param index Local variable index relative to the current stack\n   * frame bottom.\n   *\n   * @param val The value of the variable that is being set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalVariable(int index, XObject val, int stackFrame)",
    "returnType" : "void",
    "comment" : "\n   * Set a local variable or parameter in the specified stack frame.\n   *\n   *\n   * @param index Local variable index relative to the current stack\n   * frame bottom.\n   * NEEDSDOC @param stackFrame\n   *\n   * @param val The value of the variable that is being set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getLocalVariable(XPathContext xctxt, int index) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get a local variable or parameter in the current stack frame.\n   *\n   *\n   * @param xctxt The XPath context, which must be passed in order to\n   * lazy evaluate variables.\n   *\n   * @param index Local variable index relative to the current stack\n   * frame bottom.\n   *\n   * @return The value of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getLocalVariable(int index, int frame) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get a local variable or parameter in the current stack frame.\n   *\n   *\n   * @param index Local variable index relative to the given\n   * frame bottom.\n   * NEEDSDOC @param frame\n   *\n   * @return The value of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getLocalVariable(XPathContext xctxt, int index, boolean destructiveOK) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get a local variable or parameter in the current stack frame.\n   *\n   *\n   * @param xctxt The XPath context, which must be passed in order to\n   * lazy evaluate variables.\n   *\n   * @param index Local variable index relative to the current stack\n   * frame bottom.\n   *\n   * @return The value of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLocalSet(int index) throws TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if a local variable has been set or not.\n   *\n   * @param index Local variable index relative to the current stack\n   * frame bottom.\n   *\n   * @return true if the value at the index is not null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void clearLocalSlots(int start, int len)",
    "returnType" : "void",
    "comment" : "\n   * Use this to clear the variables in a section of the stack.  This is\n   * used to clear the parameter section of the stack, so that default param\n   * values can tell if they've already been set.  It is important to note that\n   * this function has a 1K limitation.\n   *\n   * @param start The start position, relative to the current local stack frame.\n   * @param len The number of slots to be cleared.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setGlobalVariable(final int index, final XObject val)",
    "returnType" : "void",
    "comment" : "\n   * Set a global variable or parameter in the global stack frame.\n   *\n   *\n   * @param index Local variable index relative to the global stack frame\n   * bottom.\n   *\n   * @param val The value of the variable that is being set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getGlobalVariable(XPathContext xctxt, final int index) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get a global variable or parameter from the global stack frame.\n   *\n   *\n   * @param xctxt The XPath context, which must be passed in order to\n   * lazy evaluate variables.\n   *\n   * @param index Global variable index relative to the global stack\n   * frame bottom.\n   *\n   * @return The value of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getGlobalVariable(XPathContext xctxt, final int index, boolean destructiveOK) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get a global variable or parameter from the global stack frame.\n   *\n   *\n   * @param xctxt The XPath context, which must be passed in order to\n   * lazy evaluate variables.\n   *\n   * @param index Global variable index relative to the global stack\n   * frame bottom.\n   *\n   * @return The value of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getVariableOrParam(XPathContext xctxt, org.apache.xml.utils.QName qname) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get a variable based on it's qualified name.\n   * This is for external use only.\n   *\n   * @param xctxt The XPath context, which must be passed in order to\n   * lazy evaluate variables.\n   * \n   * @param qname The qualified name of the variable.\n   *\n   * @return The evaluated value of the variable.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized Object clone() throws CloneNotSupportedException", "public XObject elementAt(final int i)", "public int size()", "public void reset()", "protected void reset(int linksSize, int varArraySize)", "public void setStackFrame(int sf)", "public int getStackFrame()", "public int link(final int size)", "public void unlink()", "public void unlink(int currentFrame)", "public void setLocalVariable(int index, XObject val)", "public void setLocalVariable(int index, XObject val, int stackFrame)", "public XObject getLocalVariable(XPathContext xctxt, int index) throws TransformerException", "public XObject getLocalVariable(int index, int frame) throws TransformerException", "public XObject getLocalVariable(XPathContext xctxt, int index, boolean destructiveOK) throws TransformerException", "public boolean isLocalSet(int index) throws TransformerException", "public void clearLocalSlots(int start, int len)", "public void setGlobalVariable(final int index, final XObject val)", "public XObject getGlobalVariable(XPathContext xctxt, final int index) throws TransformerException", "public XObject getGlobalVariable(XPathContext xctxt, final int index, boolean destructiveOK) throws TransformerException", "public XObject getVariableOrParam(XPathContext xctxt, org.apache.xml.utils.QName qname) throws javax.xml.transform.TransformerException" ],
  "variableNames" : [ "CLEARLIMITATION", "_stackFrames", "_frameTop", "_currentFrameBottom", "_links", "_linksTop", "m_nulls" ]
}