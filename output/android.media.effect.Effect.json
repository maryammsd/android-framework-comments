{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/effect/Effect.java",
  "packageName" : "android.media.effect",
  "className" : "Effect",
  "comment" : "\n * <p>Effects are high-performance transformations that can be applied to image frames. These are\n * passed in the form of OpenGL ES 2.0 texture names. Typical frames could be images loaded from\n * disk, or frames from the camera or other video streams.</p>\n *\n * <p>To create an Effect you must first create an EffectContext. You can obtain an instance of the\n * context's EffectFactory by calling\n * {@link android.media.effect.EffectContext#getFactory() getFactory()}. The EffectFactory allows\n * you to instantiate specific Effects.</p>\n *\n * <p>The application is responsible for creating an EGL context, and making it current before\n * applying an effect. An effect is bound to a single EffectContext, which in turn is bound to a\n * single EGL context. If your EGL context is destroyed, the EffectContext becomes invalid and any\n * effects bound to this context can no longer be used.</p>\n *\n ",
  "links" : [ "android.media.effect.EffectContext#getFactory()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String getName()",
    "returnType" : "String",
    "comment" : "\n     * Get the effect name.\n     *\n     * Returns the unique name of the effect, which matches the name used for instantiating this\n     * effect by the EffectFactory.\n     *\n     * @return The name of the effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void apply(int inputTexId, int width, int height, int outputTexId)",
    "returnType" : "void",
    "comment" : "\n     * Apply an effect to GL textures.\n     *\n     * <p>Apply the Effect on the specified input GL texture, and write the result into the\n     * output GL texture. The texture names passed must be valid in the current GL context.</p>\n     *\n     * <p>The input texture must be a valid texture name with the given width and height and must be\n     * bound to a GL_TEXTURE_2D texture image (usually done by calling the glTexImage2D() function).\n     * Multiple mipmap levels may be provided.</p>\n     *\n     * <p>If the output texture has not been bound to a texture image, it will be automatically\n     * bound by the effect as a GL_TEXTURE_2D. It will contain one mipmap level (0), which will have\n     * the same size as the input. No other mipmap levels are defined. If the output texture was\n     * bound already, and its size does not match the input texture size, the result may be clipped\n     * or only partially fill the texture.</p>\n     *\n     * <p>Note, that regardless of whether a texture image was originally provided or not, both the\n     * input and output textures are owned by the caller. That is, the caller is responsible for\n     * calling glDeleteTextures() to deallocate the input and output textures.</p>\n     *\n     * @param inputTexId The GL texture name of a valid and bound input texture.\n     * @param width The width of the input texture in pixels.\n     * @param height The height of the input texture in pixels.\n     * @param outputTexId The GL texture name of the output texture.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setParameter(String parameterKey, Object value)",
    "returnType" : "void",
    "comment" : "\n     * Set a filter parameter.\n     *\n     * Consult the effect documentation for a list of supported parameter keys for each effect.\n     *\n     * @param parameterKey The name of the parameter to adjust.\n     * @param value The new value to set the parameter to.\n     * @throws InvalidArgumentException if parameterName is not a recognized name, or the value is\n     *         not a valid value for this parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUpdateListener(EffectUpdateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set an effect listener.\n     *\n     * Some effects may report state changes back to the host, if a listener is set. Consult the\n     * individual effect documentation for more details.\n     *\n     * @param listener The listener to receive update callbacks on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void release()",
    "returnType" : "void",
    "comment" : "\n     * Release an effect.\n     *\n     * <p>Releases the effect and any resources associated with it. You may call this if you need to\n     * make sure acquired resources are no longer held by the effect. Releasing an effect makes it\n     * invalid for reuse.</p>\n     *\n     * <p>Note that this method must be called with the EffectContext and EGL context current, as\n     * the effect may release internal GL resources.</p>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String getName()", "public abstract void apply(int inputTexId, int width, int height, int outputTexId)", "public abstract void setParameter(String parameterKey, Object value)", "public void setUpdateListener(EffectUpdateListener listener)", "public abstract void release()" ],
  "variableNames" : [ ]
}