{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/soundtrigger_middleware/ISoundTriggerInjection.java",
  "packageName" : "android.media.soundtrigger_middleware",
  "className" : "Proxy",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInterfaceDescriptor()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerGlobalEventInjection(android.media.soundtrigger_middleware.IInjectGlobalEvent globalInjection) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called following attachment via\n       * {@link ISoundTriggerMiddlewareService#attachMockHalInjection(ISoundTriggerInjection)}.\n       * Provides the client an injection interface for events which are always (globally) valid.\n       * @param globalInjection - Interface used to inject global events to the fake HAL.\n       * Used as a session object for further callbacks associated with the HAL globally.\n       ",
    "links" : [ "android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService#attachMockHalInjection(ISoundTriggerInjection)" ]
  }, {
    "name" : "public void onRestarted(android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when the HAL has been restarted by the framework. Not called after a\n       * {@link IInjectGlobalEvent#triggerRestart()}.\n       * @param globalSession - The interface previously provided by a\n       * {@link registerGlobalEventInjection} call which this restart is associated with.\n       * Used to disambiguate stale restart events from a subsequent global session.\n       ",
    "links" : [ "android.media.soundtrigger_middleware.IInjectGlobalEvent#triggerRestart()", "registerGlobalEventInjection" ]
  }, {
    "name" : "public void onFrameworkDetached(android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when the HAL has been detached by the framework.\n       * @param globalSession - The interface previously provided by a\n       * {@link registerGlobalEventInjection} call which this detach is associated with.\n       * Used to disambiguate stale detach events from a subsequent global session.\n       ",
    "links" : [ "registerGlobalEventInjection" ]
  }, {
    "name" : "public void onClientAttached(android.os.IBinder token, android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when a client is attached to the framework. This event is not actually\n       * delivered to the HAL, but is useful to understand the framework state.\n       * @param token - An opaque token representing the framework client session.\n       * Associated with a subsequent call to {@link onClientDetached(IBinder)}.\n       * @param globalSession - The global STHAL session this attach is associated with.\n       ",
    "links" : [ "onClientDetached(IBinder)" ]
  }, {
    "name" : "public void onClientDetached(android.os.IBinder token) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when a client detaches from the framework. This event is not actually\n       * delivered to the HAL, but is useful to understand the framework state.\n       * @param token - The opaque token returned by a previous\n       * {@link onClientAttached(IBinder, IInjectGlobalEvent} call.\n       ",
    "links" : [ "onClientAttached(IBinder" ]
  }, {
    "name" : "public void onSoundModelLoaded(android.media.soundtrigger.SoundModel model, android.media.soundtrigger.Phrase[] phrases, android.media.soundtrigger_middleware.IInjectModelEvent modelInjection, android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when a sound model is loaded into the fake STHAL by the framework.\n       * @param model - The model data for the newly loaded model.\n       * @param phrases - The phrase data for the newly loaded model, if it is a keyphrase model.\n       *                  Null otherwise.\n       * @param modelInjection - Interface used to inject events associated with the newly loaded\n       * model into the fake STHAL.\n       * Used as a session object for further callbacks associated with this newly loaded model.\n       * @param globalSession - The session object representing the global STHAL instance this load\n       * is associated with.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void onParamSet(int modelParam, int value, android.media.soundtrigger_middleware.IInjectModelEvent modelSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when the fake STHAL receives a set parameter call from the framework on a previously\n       * loaded model.\n       * @param modelParam - Code of the parameter being set, see\n       * {@link android.media.soundtrigger.ModelParameter}\n       * @param value - Value to set the modelParam to\n       * @param modelSession - Session object of the loaded model the set param call is associated\n       * with.\n       ",
    "links" : [ "android.media.soundtrigger.ModelParameter" ]
  }, {
    "name" : "public void onRecognitionStarted(int audioSessionToken, android.media.soundtrigger.RecognitionConfig config, android.media.soundtrigger_middleware.IInjectRecognitionEvent recognitionInjection, android.media.soundtrigger_middleware.IInjectModelEvent modelSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when a previously loaded model in the fake STHAL has recognition started by the\n       * framework.\n       * @param audioSessionToken - The audio session token passed by the framework which will be\n       * contained within a received recognition event.\n       * @param config - The recognition config passed by the framework for this recognition.\n       * @param recognitionInjection - A new injection interface which allows the client to\n       * trigger events associated with this newly started recognition.\n       * @param modelSession - The session object representing the loaded model that this\n       * recognition is associated with.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void onRecognitionStopped(android.media.soundtrigger_middleware.IInjectRecognitionEvent recognitionSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when a previously started recognition in the fake STHAL is stopped by the framework.\n       * Not called following any calls on {@link IInjectRecognitionEvent}.\n       * @param recognitionSession - The session object received via a previous call to\n       * {@link recognitionStarted(int, RecognitionConfig, IInjectModelEvent,\n       * IInjectRecognitionEvent} which has been unloaded.\n       * This session is invalidated subsequent to this call, and no triggers will be respected.\n       ",
    "links" : [ "recognitionStarted(int", "android.media.soundtrigger_middleware.IInjectRecognitionEvent" ]
  }, {
    "name" : "public void onSoundModelUnloaded(android.media.soundtrigger_middleware.IInjectModelEvent modelSession) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when a previously loaded model in the fake STHAL is unloaded by the framework.\n       * Not called following {@link IInjectModelEvent#triggerUnloadModel()}.\n       * @param modelSession - The session object received via a previous call to\n       * {@link soundModelLoaded(SoundModel, Phrase[], IInjectModelEvent} which has been unloaded.\n       * This session is invalidated subsequent to this call, and no triggers will be respected.\n       ",
    "links" : [ "android.media.soundtrigger_middleware.IInjectModelEvent#triggerUnloadModel()", "soundModelLoaded(SoundModel" ]
  }, {
    "name" : "public void onPreempted() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Called when this injection interface has been preempted by a subsequent call to\n       * {@link ISoundTriggerMiddleware#attachFakeHal(ISoundTriggerInjection)}.\n       * No more events will be delivered, and any further injection will be ignored.\n       ",
    "links" : [ "#attachFakeHal(ISoundTriggerInjection)" ]
  } ],
  "methodNames" : [ "public android.os.IBinder asBinder()", "public java.lang.String getInterfaceDescriptor()", "public void registerGlobalEventInjection(android.media.soundtrigger_middleware.IInjectGlobalEvent globalInjection) throws android.os.RemoteException", "public void onRestarted(android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException", "public void onFrameworkDetached(android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException", "public void onClientAttached(android.os.IBinder token, android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException", "public void onClientDetached(android.os.IBinder token) throws android.os.RemoteException", "public void onSoundModelLoaded(android.media.soundtrigger.SoundModel model, android.media.soundtrigger.Phrase[] phrases, android.media.soundtrigger_middleware.IInjectModelEvent modelInjection, android.media.soundtrigger_middleware.IInjectGlobalEvent globalSession) throws android.os.RemoteException", "public void onParamSet(int modelParam, int value, android.media.soundtrigger_middleware.IInjectModelEvent modelSession) throws android.os.RemoteException", "public void onRecognitionStarted(int audioSessionToken, android.media.soundtrigger.RecognitionConfig config, android.media.soundtrigger_middleware.IInjectRecognitionEvent recognitionInjection, android.media.soundtrigger_middleware.IInjectModelEvent modelSession) throws android.os.RemoteException", "public void onRecognitionStopped(android.media.soundtrigger_middleware.IInjectRecognitionEvent recognitionSession) throws android.os.RemoteException", "public void onSoundModelUnloaded(android.media.soundtrigger_middleware.IInjectModelEvent modelSession) throws android.os.RemoteException", "public void onPreempted() throws android.os.RemoteException" ],
  "variableNames" : [ "mRemote" ]
}