{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/validation/TypeInfoProvider.java",
  "packageName" : "javax.xml.validation",
  "className" : "TypeInfoProvider",
  "comment" : "\n * This class provides access to the type information determined\n * by {@link ValidatorHandler}.\n *\n * <p>\n * Some schema languages, such as W3C XML Schema, encourages a validator\n * to report the \"type\" it assigns to each attribute/element.\n * Those applications who wish to access this type information can invoke\n * methods defined on this \"interface\" to access such type information.\n *\n * <p>\n * Implementation of this \"interface\" can be obtained through the\n * {@link ValidatorHandler#getTypeInfoProvider()} method.\n *\n * @author  <a href=\"mailto:Kohsuke.Kawaguchi@Sun.com\">Kohsuke Kawaguchi</a>\n * @version $Revision: 884939 $, $Date: 2009-11-27 10:20:46 -0800 (Fri, 27 Nov 2009) $\n * @see org.w3c.dom.TypeInfo\n * @since 1.5\n ",
  "links" : [ "javax.xml.validation.ValidatorHandler#getTypeInfoProvider()", "javax.xml.validation.ValidatorHandler" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract TypeInfo getElementTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "\n     * <p>Returns the immutable {@link TypeInfo} object for the current element.</p>\n     *\n     * <p>\n     * The method may only be called by the startElement and endElement event of\n     * the {@link org.xml.sax.ContentHandler} that the application sets to the\n     * {@link ValidatorHandler}.</p>\n     *\n     * @throws IllegalStateException\n     *      If this method is called from other {@link org.xml.sax.ContentHandler}\n     *      methods.\n     * @return\n     *      An immutable {@link TypeInfo} object that represents the\n     *      type of the current element.\n     *      Note that the caller can keep references to the obtained\n     *      {@link TypeInfo} longer than the callback scope.\n     *\n     *      Otherwise, this method returns\n     *      null if the validator is unable to\n     *      determine the type of the current element for some reason\n     *      (for example, if the validator is recovering from\n     *      an earlier error.)\n     *\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "org.w3c.dom.TypeInfo", "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public abstract TypeInfo getAttributeTypeInfo(int index)",
    "returnType" : "TypeInfo",
    "comment" : "\n     * Returns the immutable {@link TypeInfo} object for the specified\n     * attribute of the current element.\n     *\n     * <p>\n     * The method may only be called by the startElement event of\n     * the {@link org.xml.sax.ContentHandler} that the application sets to the\n     * {@link ValidatorHandler}.\n     *\n     * @param index\n     *      The index of the attribute. The same index for\n     *      the {@link org.xml.sax.Attributes} object passed to the\n     *      <tt>startElement</tt> callback.\n     *\n     * @throws IndexOutOfBoundsException\n     *      If the index is invalid.\n     * @throws IllegalStateException\n     *      If this method is called from other {@link org.xml.sax.ContentHandler}\n     *      methods.\n     *\n     * @return\n     *      An immutable {@link TypeInfo} object that represents the\n     *      type of the specified attribute.\n     *      Note that the caller can keep references to the obtained\n     *      {@link TypeInfo} longer than the callback scope.\n     *\n     *      Otherwise, this method returns\n     *      null if the validator is unable to\n     *      determine the type.\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "org.xml.sax.Attributes", "org.w3c.dom.TypeInfo", "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public abstract boolean isIdAttribute(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <tt>true</tt> if the specified attribute is determined\n     * to be ID.\n     *\n     * <p>\n     * Exactly how an attribute is \"determined to be ID\" is up to the\n     * schema language. In case of W3C XML Schema, this means\n     * that the actual type of the attribute is the built-in ID type\n     * or its derived type.\n     *\n     * <p>\n     * A {@link javax.xml.parsers.DocumentBuilder} uses this information\n     * to properly implement {@link org.w3c.dom.Attr#isId()}.\n     *\n     * <p>\n     * The method may only be called by the startElement event of\n     * the {@link org.xml.sax.ContentHandler} that the application sets to the\n     * {@link ValidatorHandler}.\n     *\n     * @param index\n     *      The index of the attribute. The same index for\n     *      the {@link org.xml.sax.Attributes} object passed to the\n     *      <tt>startElement</tt> callback.\n     *\n     * @throws IndexOutOfBoundsException\n     *      If the index is invalid.\n     * @throws IllegalStateException\n     *      If this method is called from other {@link org.xml.sax.ContentHandler}\n     *      methods.\n     *\n     * @return true\n     *      if the type of the specified attribute is ID.\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "javax.xml.parsers.DocumentBuilder", "org.w3c.dom.Attr#isId()", "org.xml.sax.Attributes", "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public abstract boolean isSpecified(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <tt>false</tt> if the attribute was added by the validator.\n     *\n     * <p>\n     * This method provides information necessary for\n     * a {@link javax.xml.parsers.DocumentBuilder} to determine what\n     * the DOM tree should return from the {@link org.w3c.dom.Attr#getSpecified()} method.\n     *\n     * <p>\n     * The method may only be called by the startElement event of\n     * the {@link org.xml.sax.ContentHandler} that the application sets to the\n     * {@link ValidatorHandler}.\n     *\n     * <p>\n     * A general guideline for validators is to return true if\n     * the attribute was originally present in the pipeline, and\n     * false if it was added by the validator.\n     *\n     * @param index\n     *      The index of the attribute. The same index for\n     *      the {@link org.xml.sax.Attributes} object passed to the\n     *      <tt>startElement</tt> callback.\n     *\n     * @throws IndexOutOfBoundsException\n     *      If the index is invalid.\n     * @throws IllegalStateException\n     *      If this method is called from other {@link org.xml.sax.ContentHandler}\n     *      methods.\n     *\n     * @return\n     *      <tt>true</tt> if the attribute was present before the validator\n     *      processes input. <tt>false</tt> if the attribute was added\n     *      by the validator.\n     ",
    "links" : [ "javax.xml.validation.ValidatorHandler", "javax.xml.parsers.DocumentBuilder", "org.xml.sax.Attributes", "org.xml.sax.ContentHandler", "org.w3c.dom.Attr#getSpecified()" ]
  } ],
  "methodNames" : [ "public abstract TypeInfo getElementTypeInfo()", "public abstract TypeInfo getAttributeTypeInfo(int index)", "public abstract boolean isIdAttribute(int index)", "public abstract boolean isSpecified(int index)" ],
  "variableNames" : [ ]
}