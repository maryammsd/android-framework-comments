{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothGattServerCallback.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothGattServerCallback",
  "comment" : " This abstract class is used to implement {@link BluetoothGattServer} callbacks. ",
  "links" : [ "android.bluetooth.BluetoothGattServer" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onConnectionStateChange(BluetoothDevice device, int status, int newState)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating when a remote device has been connected or disconnected.\n     *\n     * @param device Remote device that has been connected or disconnected.\n     * @param status Status of the connect or disconnect operation.\n     * @param newState Returns the new connection state. Can be one of {@link\n     *     BluetoothProfile#STATE_DISCONNECTED} or {@link BluetoothProfile#STATE_CONNECTED}\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#STATE_CONNECTED", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTED" ]
  }, {
    "name" : "public void onServiceAdded(int status, BluetoothGattService service)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether a local service has been added successfully.\n     *\n     * @param status Returns {@link BluetoothGatt#GATT_SUCCESS} if the service was added\n     *     successfully.\n     * @param service The service that has been added\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onCharacteristicReadRequest(BluetoothDevice device, int requestId, int offset, BluetoothGattCharacteristic characteristic)",
    "returnType" : "void",
    "comment" : "\n     * A remote client has requested to read a local characteristic.\n     *\n     * <p>An application must call {@link BluetoothGattServer#sendResponse} to complete the request.\n     *\n     * @param device The remote device that has requested the read operation\n     * @param requestId The Id of the request\n     * @param offset Offset into the value of the characteristic\n     * @param characteristic Characteristic to be read\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#sendResponse" ]
  }, {
    "name" : "public void onCharacteristicWriteRequest(BluetoothDevice device, int requestId, BluetoothGattCharacteristic characteristic, boolean preparedWrite, boolean responseNeeded, int offset, byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * A remote client has requested to write to a local characteristic.\n     *\n     * <p>An application must call {@link BluetoothGattServer#sendResponse} to complete the request.\n     *\n     * @param device The remote device that has requested the write operation\n     * @param requestId The Id of the request\n     * @param characteristic Characteristic to be written to.\n     * @param preparedWrite true, if this write operation should be queued for later execution.\n     * @param responseNeeded true, if the remote device requires a response\n     * @param offset The offset given for the value\n     * @param value The value the client wants to assign to the characteristic\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#sendResponse" ]
  }, {
    "name" : "public void onDescriptorReadRequest(BluetoothDevice device, int requestId, int offset, BluetoothGattDescriptor descriptor)",
    "returnType" : "void",
    "comment" : "\n     * A remote client has requested to read a local descriptor.\n     *\n     * <p>An application must call {@link BluetoothGattServer#sendResponse} to complete the request.\n     *\n     * @param device The remote device that has requested the read operation\n     * @param requestId The Id of the request\n     * @param offset Offset into the value of the characteristic\n     * @param descriptor Descriptor to be read\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#sendResponse" ]
  }, {
    "name" : "public void onDescriptorWriteRequest(BluetoothDevice device, int requestId, BluetoothGattDescriptor descriptor, boolean preparedWrite, boolean responseNeeded, int offset, byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * A remote client has requested to write to a local descriptor.\n     *\n     * <p>An application must call {@link BluetoothGattServer#sendResponse} to complete the request.\n     *\n     * @param device The remote device that has requested the write operation\n     * @param requestId The Id of the request\n     * @param descriptor Descriptor to be written to.\n     * @param preparedWrite true, if this write operation should be queued for later execution.\n     * @param responseNeeded true, if the remote device requires a response\n     * @param offset The offset given for the value\n     * @param value The value the client wants to assign to the descriptor\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#sendResponse" ]
  }, {
    "name" : "public void onExecuteWrite(BluetoothDevice device, int requestId, boolean execute)",
    "returnType" : "void",
    "comment" : "\n     * Execute all pending write operations for this device.\n     *\n     * <p>An application must call {@link BluetoothGattServer#sendResponse} to complete the request.\n     *\n     * @param device The remote device that has requested the write operations\n     * @param requestId The Id of the request\n     * @param execute Whether the pending writes should be executed (true) or cancelled (false)\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#sendResponse" ]
  }, {
    "name" : "public void onNotificationSent(BluetoothDevice device, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a notification or indication has been sent to a remote device.\n     *\n     * <p>When multiple notifications are to be sent, an application must wait for this callback to\n     * be received before sending additional notifications.\n     *\n     * @param device The remote device the notification has been sent to\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the operation was successful\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onMtuChanged(BluetoothDevice device, int mtu)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the MTU for a given device connection has changed.\n     *\n     * <p>This callback will be invoked if a remote client has requested to change the MTU for a\n     * given connection.\n     *\n     * @param device The remote device that requested the MTU change\n     * @param mtu The new MTU size\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPhyUpdate(BluetoothDevice device, int txPhy, int rxPhy, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered as result of {@link BluetoothGattServer#setPreferredPhy}, or as a result\n     * of remote device changing the PHY.\n     *\n     * @param device The remote device\n     * @param txPhy the transmitter PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}\n     * @param rxPhy the receiver PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}\n     * @param status Status of the PHY update operation. {@link BluetoothGatt#GATT_SUCCESS} if the\n     *     operation succeeds.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#setPreferredPhy", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_2M", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public void onPhyRead(BluetoothDevice device, int txPhy, int rxPhy, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered as result of {@link BluetoothGattServer#readPhy}\n     *\n     * @param device The remote device that requested the PHY read\n     * @param txPhy the transmitter PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}\n     * @param rxPhy the receiver PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}\n     * @param status Status of the PHY read operation. {@link BluetoothGatt#GATT_SUCCESS} if the\n     *     operation succeeds.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#readPhy", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_2M", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public void onConnectionUpdated(BluetoothDevice device, int interval, int latency, int timeout, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the connection parameters were updated.\n     *\n     * @param device The remote device involved\n     * @param interval Connection interval used on this connection, 1.25ms unit. Valid range is from\n     *     6 (7.5ms) to 3200 (4000ms).\n     * @param latency Worker latency for the connection in number of connection events. Valid range\n     *     is from 0 to 499\n     * @param timeout Supervision timeout for this connection, in 10ms unit. Valid range is from 10\n     *     (0.1s) to 3200 (32s)\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the connection has been updated\n     *     successfully\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onSubrateChange(BluetoothDevice device, int subrateFactor, int latency, int contNum, int timeout, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the LE connection's subrate parameters were updated.\n     *\n     * @param device The remote device involved\n     * @param subrateFactor for the LE connection.\n     * @param latency for the LE connection in number of subrated connection events. Valid range is\n     *     from 0 to 499.\n     * @param contNum Valid range is from 0 to 499.\n     * @param timeout Supervision timeout for this connection, in 10ms unit. Valid range is from 10\n     *     (0.1s) to 3200 (32s)\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if LE connection subrating has been changed\n     *     successfully.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  } ],
  "methodNames" : [ "public void onConnectionStateChange(BluetoothDevice device, int status, int newState)", "public void onServiceAdded(int status, BluetoothGattService service)", "public void onCharacteristicReadRequest(BluetoothDevice device, int requestId, int offset, BluetoothGattCharacteristic characteristic)", "public void onCharacteristicWriteRequest(BluetoothDevice device, int requestId, BluetoothGattCharacteristic characteristic, boolean preparedWrite, boolean responseNeeded, int offset, byte[] value)", "public void onDescriptorReadRequest(BluetoothDevice device, int requestId, int offset, BluetoothGattDescriptor descriptor)", "public void onDescriptorWriteRequest(BluetoothDevice device, int requestId, BluetoothGattDescriptor descriptor, boolean preparedWrite, boolean responseNeeded, int offset, byte[] value)", "public void onExecuteWrite(BluetoothDevice device, int requestId, boolean execute)", "public void onNotificationSent(BluetoothDevice device, int status)", "public void onMtuChanged(BluetoothDevice device, int mtu)", "public void onPhyUpdate(BluetoothDevice device, int txPhy, int rxPhy, int status)", "public void onPhyRead(BluetoothDevice device, int txPhy, int rxPhy, int status)", "public void onConnectionUpdated(BluetoothDevice device, int interval, int latency, int timeout, int status)", "public void onSubrateChange(BluetoothDevice device, int subrateFactor, int latency, int contNum, int timeout, int status)" ],
  "variableNames" : [ ]
}