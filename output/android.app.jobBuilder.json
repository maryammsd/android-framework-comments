{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/job/JobInfo.java",
  "packageName" : "android.app.job",
  "className" : "Builder",
  "comment" : " Builder class for constructing {@link JobInfo} objects. ",
  "variables" : [ {
    "name" : "mJobId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJobService",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransientExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipGrantFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstraintFlags",
    "type" : "int",
    "comment" : " Requirements.",
    "links" : [ ]
  }, {
    "name" : "mNetworkRequest",
    "type" : "NetworkRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkDownloadBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkUploadBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerContentUris",
    "type" : "ArrayList<TriggerContentUri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerContentUpdateDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerContentMaxDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPersisted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinLatencyMillis",
    "type" : "long",
    "comment" : " One-off parameters.",
    "links" : [ ]
  }, {
    "name" : "mMaxExecutionDelayMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPeriodic",
    "type" : "boolean",
    "comment" : " Periodic parameters.",
    "links" : [ ]
  }, {
    "name" : "mHasEarlyConstraint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasLateConstraint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlexMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialBackoffMillis",
    "type" : "long",
    "comment" : " Back-off parameters.",
    "links" : [ ]
  }, {
    "name" : "mBackoffPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackoffPolicySet",
    "type" : "boolean",
    "comment" : " Easy way to track whether the client has tried to set a back-off policy. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setPriority(int priority)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFlags(int flags)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder setExtras(@NonNull PersistableBundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Set optional extras. This is persisted, so we only allow primitive types.\n         * @param extras Bundle containing extras you want the scheduler to hold on to for you.\n         * @see JobInfo#getExtras()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransientExtras(@NonNull Bundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Set optional transient extras.\n         *\n         * <p>Because setting this property is not compatible with persisted\n         * jobs, doing so will throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.</p>\n         *\n         * @param extras Bundle containing extras you want the scheduler to hold on to for you.\n         * @see JobInfo#getTransientExtras()\n         ",
    "links" : [ "java.lang.IllegalArgumentException", "android.app.job.JobInfo.Builder#build" ]
  }, {
    "name" : "public Builder setClipData(@Nullable ClipData clip, int grantFlags)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a {@link ClipData} associated with this Job.\n         *\n         * <p>The main purpose of providing a ClipData is to allow granting of\n         * URI permissions for data associated with the clip.  The exact kind\n         * of permission grant to perform is specified through <var>grantFlags</var>.\n         *\n         * <p>If the ClipData contains items that are Intents, any\n         * grant flags in those Intents will be ignored.  Only flags provided as an argument\n         * to this method are respected, and will be applied to all Uri or\n         * Intent items in the clip (or sub-items of the clip).\n         *\n         * <p>Because setting this property is not compatible with persisted\n         * jobs, doing so will throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.</p>\n         *\n         * @param clip The new clip to set.  May be null to clear the current clip.\n         * @param grantFlags The desired permissions to grant for any URIs.  This should be\n         * a combination of {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION},\n         * {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION}, and\n         * {@link android.content.Intent#FLAG_GRANT_PREFIX_URI_PERMISSION}.\n         * @see JobInfo#getClipData()\n         * @see JobInfo#getClipGrantFlags()\n         ",
    "links" : [ "ClipData", "java.lang.IllegalArgumentException", "android.app.job.JobInfo.Builder#build", "android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION", "android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION", "android.content.Intent#FLAG_GRANT_PREFIX_URI_PERMISSION" ]
  }, {
    "name" : "public Builder setRequiredNetworkType(@NetworkType int networkType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set basic description of the kind of network your job requires. If\n         * you need more precise control over network capabilities, see\n         * {@link #setRequiredNetwork(NetworkRequest)}.\n         * <p>\n         * If your job doesn't need a network connection, you don't need to call\n         * this method, as the default value is {@link #NETWORK_TYPE_NONE}.\n         * <p>\n         * Calling this method defines network as a strict requirement for your\n         * job. If the network requested is not available your job will never\n         * run. See {@link #setOverrideDeadline(long)} to change this behavior.\n         * Calling this method will override any requirements previously defined\n         * by {@link #setRequiredNetwork(NetworkRequest)}; you typically only\n         * want to call one of these methods.\n         * <p class=\"note\">\n         * When your job executes in\n         * {@link JobService#onStartJob(JobParameters)}, be sure to use the\n         * specific network returned by {@link JobParameters#getNetwork()},\n         * otherwise you'll use the default network which may not meet this\n         * constraint.\n         *\n         * @see #setRequiredNetwork(NetworkRequest)\n         * @see JobInfo#getNetworkType()\n         * @see JobParameters#getNetwork()\n         ",
    "links" : [ "#setRequiredNetwork", "#NETWORK_TYPE_NONE", "#setOverrideDeadline", "#setRequiredNetwork", "JobService#onStartJob", "JobParameters#getNetwork" ]
  }, {
    "name" : "public Builder setRequiredNetwork(@Nullable NetworkRequest networkRequest)",
    "returnType" : "Builder",
    "comment" : "\n         * Set detailed description of the kind of network your job requires.\n         * <p>\n         * If your job doesn't need a network connection, you don't need to call\n         * this method, as the default is {@code null}.\n         * <p>\n         * Calling this method defines network as a strict requirement for your\n         * job. If the network requested is not available your job will never\n         * run. See {@link #setOverrideDeadline(long)} to change this behavior.\n         * Calling this method will override any requirements previously defined\n         * by {@link #setRequiredNetworkType(int)}; you typically only want to\n         * call one of these methods.\n         * <p class=\"note\">\n         * When your job executes in\n         * {@link JobService#onStartJob(JobParameters)}, be sure to use the\n         * specific network returned by {@link JobParameters#getNetwork()},\n         * otherwise you'll use the default network which may not meet this\n         * constraint.\n         *\n         * @param networkRequest The detailed description of the kind of network\n         *            this job requires, or {@code null} if no specific kind of\n         *            network is required. Defining a {@link NetworkSpecifier}\n         *            is only supported for jobs that aren't persisted.\n         * @see #setRequiredNetworkType(int)\n         * @see JobInfo#getRequiredNetwork()\n         * @see JobParameters#getNetwork()\n         ",
    "links" : [ "#setOverrideDeadline", "#setRequiredNetworkType", "JobService#onStartJob", "JobParameters#getNetwork", "NetworkSpecifier" ]
  }, {
    "name" : "public Builder setEstimatedNetworkBytes(@BytesLong long downloadBytes, @BytesLong long uploadBytes)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the estimated size of network traffic that will be performed by\n         * this job, in bytes.\n         * <p>\n         * Apps are encouraged to provide values that are as accurate as\n         * possible, but when the exact size isn't available, an\n         * order-of-magnitude estimate can be provided instead. Here are some\n         * specific examples:\n         * <ul>\n         * <li>A job that is backing up a photo knows the exact size of that\n         * photo, so it should provide that size as the estimate.\n         * <li>A job that refreshes top news stories wouldn't know an exact\n         * size, but if the size is expected to be consistently around 100KB, it\n         * can provide that order-of-magnitude value as the estimate.\n         * <li>A job that synchronizes email could end up using an extreme range\n         * of data, from under 1KB when nothing has changed, to dozens of MB\n         * when there are new emails with attachments. Jobs that cannot provide\n         * reasonable estimates should use the sentinel value\n         * {@link JobInfo#NETWORK_BYTES_UNKNOWN}.\n         * </ul>\n         * Note that the system may choose to delay jobs with large network\n         * usage estimates when the device has a poor network connection, in\n         * order to save battery.\n         * <p>\n         * The values provided here only reflect the traffic that will be\n         * performed by the base job; if you're using {@link JobWorkItem} then\n         * you also need to define the network traffic used by each work item\n         * when constructing them.\n         *\n         * @param downloadBytes The estimated size of network traffic that will\n         *            be downloaded by this job, in bytes.\n         * @param uploadBytes The estimated size of network traffic that will be\n         *            uploaded by this job, in bytes.\n         * @see JobInfo#getEstimatedNetworkDownloadBytes()\n         * @see JobInfo#getEstimatedNetworkUploadBytes()\n         * @see JobWorkItem#JobWorkItem(android.content.Intent, long, long)\n         ",
    "links" : [ "JobInfo#NETWORK_BYTES_UNKNOWN", "JobWorkItem" ]
  }, {
    "name" : "public Builder setRequiresCharging(boolean requiresCharging)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that to run this job, the device must be charging (or be a\n         * non-battery-powered device connected to permanent power, such as Android TV\n         * devices). This defaults to {@code false}.\n         *\n         * <p class=\"note\">For purposes of running jobs, a battery-powered device\n         * \"charging\" is not quite the same as simply being connected to power.  If the\n         * device is so busy that the battery is draining despite a power connection, jobs\n         * with this constraint will <em>not</em> run.  This can happen during some\n         * common use cases such as video chat, particularly if the device is plugged in\n         * to USB rather than to wall power.\n         *\n         * @param requiresCharging Pass {@code true} to require that the device be\n         *     charging in order to run the job.\n         * @see JobInfo#isRequireCharging()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequiresBatteryNotLow(boolean batteryNotLow)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that to run this job, the device's battery level must not be low.\n         * This defaults to false.  If true, the job will only run when the battery level\n         * is not low, which is generally the point where the user is given a \"low battery\"\n         * warning.\n         * @param batteryNotLow Whether or not the device's battery level must not be low.\n         * @see JobInfo#isRequireBatteryNotLow()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle)",
    "returnType" : "Builder",
    "comment" : "\n         * When set {@code true}, ensure that this job will not run if the device is in active use.\n         * The default state is {@code false}: that is, the for the job to be runnable even when\n         * someone is interacting with the device.\n         *\n         * <p>This state is a loose definition provided by the system. In general, it means that\n         * the device is not currently being used interactively, and has not been in use for some\n         * time. As such, it is a good time to perform resource heavy jobs. Bear in mind that\n         * battery usage will still be attributed to your application, and surfaced to the user in\n         * battery stats.</p>\n         *\n         * <p class=\"note\">Despite the similar naming, this job constraint is <em>not</em>\n         * related to the system's \"device idle\" or \"doze\" states.  This constraint only\n         * determines whether a job is allowed to run while the device is directly in use.\n         *\n         * @param requiresDeviceIdle Pass {@code true} to prevent the job from running\n         *     while the device is being used interactively.\n         * @see JobInfo#isRequireDeviceIdle()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequiresStorageNotLow(boolean storageNotLow)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that to run this job, the device's available storage must not be low.\n         * This defaults to false.  If true, the job will only run when the device is not\n         * in a low storage state, which is generally the point where the user is given a\n         * \"low storage\" warning.\n         * @param storageNotLow Whether or not the device's available storage must not be low.\n         * @see JobInfo#isRequireStorageNotLow()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addTriggerContentUri(@NonNull TriggerContentUri uri)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a new content: URI that will be monitored with a\n         * {@link android.database.ContentObserver}, and will cause the job to execute if changed.\n         * If you have any trigger content URIs associated with a job, it will not execute until\n         * there has been a change report for one or more of them.\n         *\n         * <p>Note that trigger URIs can not be used in combination with\n         * {@link #setPeriodic(long)} or {@link #setPersisted(boolean)}.  To continually monitor\n         * for content changes, you need to schedule a new JobInfo observing the same URIs\n         * before you finish execution of the JobService handling the most recent changes.\n         * Following this pattern will ensure you do not lose any content changes: while your\n         * job is running, the system will continue monitoring for content changes, and propagate\n         * any it sees over to the next job you schedule.</p>\n         *\n         * <p>Because setting this property is not compatible with periodic or\n         * persisted jobs, doing so will throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.</p>\n         *\n         * <p>The following example shows how this feature can be used to monitor for changes\n         * in the photos on a device.</p>\n         *\n         * {@sample development/samples/ApiDemos/src/com/example/android/apis/content/PhotosContentJob.java\n         *      job}\n         *\n         * @param uri The content: URI to monitor.\n         * @see JobInfo#getTriggerContentUris()\n         ",
    "links" : [ "android.database.ContentObserver", "#setPeriodic", "#setPersisted", "java.lang.IllegalArgumentException", "android.app.job.JobInfo.Builder#build" ]
  }, {
    "name" : "public Builder setTriggerContentUpdateDelay(long durationMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the delay (in milliseconds) from when a content change is detected until\n         * the job is scheduled.  If there are more changes during that time, the delay\n         * will be reset to start at the time of the most recent change.\n         * @param durationMs Delay after most recent content change, in milliseconds.\n         * @see JobInfo#getTriggerContentUpdateDelay()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTriggerContentMaxDelay(long durationMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the maximum total delay (in milliseconds) that is allowed from the first\n         * time a content change is detected until the job is scheduled.\n         * @param durationMs Delay after initial content change, in milliseconds.\n         * @see JobInfo#getTriggerContentMaxDelay()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPeriodic(long intervalMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that this job should recur with the provided interval, not more than once per\n         * period. You have no control over when within this interval this job will be executed,\n         * only the guarantee that it will be executed at most once within this interval.\n         * Setting this function on the builder with {@link #setMinimumLatency(long)} or\n         * {@link #setOverrideDeadline(long)} will result in an error.\n         * @param intervalMillis Millisecond interval for which this job will repeat.\n         * @see JobInfo#getIntervalMillis()\n         * @see JobInfo#getFlexMillis()\n         ",
    "links" : [ "#setMinimumLatency", "#setOverrideDeadline" ]
  }, {
    "name" : "public Builder setPeriodic(long intervalMillis, long flexMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that this job should recur with the provided interval and flex. The job can\n         * execute at any time in a window of flex length at the end of the period.\n         * @param intervalMillis Millisecond interval for which this job will repeat. A minimum\n         *                       value of {@link #getMinPeriodMillis()} is enforced.\n         * @param flexMillis Millisecond flex for this job. Flex is clamped to be at least\n         *                   {@link #getMinFlexMillis()} or 5 percent of the period, whichever is\n         *                   higher.\n         * @see JobInfo#getIntervalMillis()\n         * @see JobInfo#getFlexMillis()\n         ",
    "links" : [ "#getMinPeriodMillis", "#getMinFlexMillis" ]
  }, {
    "name" : "public Builder setMinimumLatency(long minLatencyMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that this job should be delayed by the provided amount of time.\n         * Because it doesn't make sense setting this property on a periodic job, doing so will\n         * throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.\n         * @param minLatencyMillis Milliseconds before which this job will not be considered for\n         *                         execution.\n         * @see JobInfo#getMinLatencyMillis()\n         ",
    "links" : [ "java.lang.IllegalArgumentException", "android.app.job.JobInfo.Builder#build" ]
  }, {
    "name" : "public Builder setOverrideDeadline(long maxExecutionDelayMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set deadline which is the maximum scheduling latency. The job will be run by this\n         * deadline even if other requirements are not met. Because it doesn't make sense setting\n         * this property on a periodic job, doing so will throw an\n         * {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.\n         * @see JobInfo#getMaxExecutionDelayMillis()\n         ",
    "links" : [ "java.lang.IllegalArgumentException", "android.app.job.JobInfo.Builder#build" ]
  }, {
    "name" : "public Builder setBackoffCriteria(long initialBackoffMillis, @BackoffPolicy int backoffPolicy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set up the back-off/retry policy.\n         * This defaults to some respectable values: {30 seconds, Exponential}. We cap back-off at\n         * 5hrs.\n         * Note that trying to set a backoff criteria for a job with\n         * {@link #setRequiresDeviceIdle(boolean)} will throw an exception when you call build().\n         * This is because back-off typically does not make sense for these types of jobs. See\n         * {@link android.app.job.JobService#jobFinished(android.app.job.JobParameters, boolean)}\n         * for more description of the return value for the case of a job executing while in idle\n         * mode.\n         * @param initialBackoffMillis Millisecond time interval to wait initially when job has\n         *                             failed.\n         * @see JobInfo#getInitialBackoffMillis()\n         * @see JobInfo#getBackoffPolicy()\n         ",
    "links" : [ "#setRequiresDeviceIdle", "android.app.job.JobService#jobFinished" ]
  }, {
    "name" : "public Builder setImportantWhileForeground(boolean importantWhileForeground)",
    "returnType" : "Builder",
    "comment" : "\n         * Setting this to true indicates that this job is important while the scheduling app\n         * is in the foreground or on the temporary whitelist for background restrictions.\n         * This means that the system will relax doze restrictions on this job during this time.\n         *\n         * Apps should use this flag only for short jobs that are essential for the app to function\n         * properly in the foreground.\n         *\n         * Note that once the scheduling app is no longer whitelisted from background restrictions\n         * and in the background, or the job failed due to unsatisfied constraints,\n         * this job should be expected to behave like other jobs without this flag.\n         *\n         * @param importantWhileForeground whether to relax doze restrictions for this job when the\n         *                                 app is in the foreground. False by default.\n         * @see JobInfo#isImportantWhileForeground()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPrefetch(boolean prefetch)",
    "returnType" : "Builder",
    "comment" : "\n         * Setting this to true indicates that this job is designed to prefetch\n         * content that will make a material improvement to the experience of\n         * the specific user of this device. For example, fetching top headlines\n         * of interest to the current user.\n         * <p>\n         * The system may use this signal to relax the network constraints you\n         * originally requested, such as allowing a\n         * {@link JobInfo#NETWORK_TYPE_UNMETERED} job to run over a metered\n         * network when there is a surplus of metered data available. The system\n         * may also use this signal in combination with end user usage patterns\n         * to ensure data is prefetched before the user launches your app.\n         * @see JobInfo#isPrefetch()\n         ",
    "links" : [ "JobInfo#NETWORK_TYPE_UNMETERED" ]
  }, {
    "name" : "public Builder setPersisted(boolean isPersisted)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether or not to persist this job across device reboots.\n         *\n         * @param isPersisted True to indicate that the job will be written to\n         *            disk and loaded at boot.\n         * @see JobInfo#isPersisted()\n         ",
    "links" : [ ]
  }, {
    "name" : "public JobInfo build()",
    "returnType" : "JobInfo",
    "comment" : "\n         * @return The job object to hand to the JobScheduler. This object is immutable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String summarize()",
    "returnType" : "String",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mJobId", "mJobService", "mExtras", "mTransientExtras", "mClipData", "mClipGrantFlags", "mPriority", "mFlags", "mConstraintFlags", "mNetworkRequest", "mNetworkDownloadBytes", "mNetworkUploadBytes", "mTriggerContentUris", "mTriggerContentUpdateDelay", "mTriggerContentMaxDelay", "mIsPersisted", "mMinLatencyMillis", "mMaxExecutionDelayMillis", "mIsPeriodic", "mHasEarlyConstraint", "mHasLateConstraint", "mIntervalMillis", "mFlexMillis", "mInitialBackoffMillis", "mBackoffPolicy", "mBackoffPolicySet" ],
  "methodNames" : [ "public Builder setPriority(int priority)", "public Builder setFlags(int flags)", "public Builder setExtras(@NonNull PersistableBundle extras)", "public Builder setTransientExtras(@NonNull Bundle extras)", "public Builder setClipData(@Nullable ClipData clip, int grantFlags)", "public Builder setRequiredNetworkType(@NetworkType int networkType)", "public Builder setRequiredNetwork(@Nullable NetworkRequest networkRequest)", "public Builder setEstimatedNetworkBytes(@BytesLong long downloadBytes, @BytesLong long uploadBytes)", "public Builder setRequiresCharging(boolean requiresCharging)", "public Builder setRequiresBatteryNotLow(boolean batteryNotLow)", "public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle)", "public Builder setRequiresStorageNotLow(boolean storageNotLow)", "public Builder addTriggerContentUri(@NonNull TriggerContentUri uri)", "public Builder setTriggerContentUpdateDelay(long durationMs)", "public Builder setTriggerContentMaxDelay(long durationMs)", "public Builder setPeriodic(long intervalMillis)", "public Builder setPeriodic(long intervalMillis, long flexMillis)", "public Builder setMinimumLatency(long minLatencyMillis)", "public Builder setOverrideDeadline(long maxExecutionDelayMillis)", "public Builder setBackoffCriteria(long initialBackoffMillis, @BackoffPolicy int backoffPolicy)", "public Builder setImportantWhileForeground(boolean importantWhileForeground)", "public Builder setPrefetch(boolean prefetch)", "public Builder setPersisted(boolean isPersisted)", "public JobInfo build()", "public String summarize()" ]
}