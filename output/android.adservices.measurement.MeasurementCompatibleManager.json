{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/measurement/MeasurementCompatibleManager.java",
  "packageName" : "android.adservices.measurement",
  "className" : "MeasurementCompatibleManager",
  "comment" : "\n * MeasurementManager provides APIs to manage source and trigger registrations.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "AD_ID_TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceBinder",
    "type" : "ServiceBinder<IMeasurementService>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdIdManager",
    "type" : "AdIdCompatibleManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdIdExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_API_WARNING_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MeasurementCompatibleManager get(@NonNull Context context)",
    "returnType" : "MeasurementCompatibleManager",
    "comment" : "\n     * This is for test purposes, it helps to mock the adIdManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasurementCompatibleManager get(@NonNull Context context, @NonNull AdIdCompatibleManager adIdManager)",
    "returnType" : "MeasurementCompatibleManager",
    "comment" : "\n     * This is for test purposes, it helps to mock the adIdManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IMeasurementService getService() throws IllegalStateException",
    "returnType" : "IMeasurementService",
    "comment" : "\n     * Retrieves an {@link IMeasurementService} implementation\n     *\n     * @hide\n     ",
    "links" : [ "IMeasurementService" ]
  }, {
    "name" : "private boolean isAdIdPermissionEnabled(AdId adId)",
    "returnType" : "boolean",
    "comment" : " Checks if Ad ID permission is enabled. ",
    "links" : [ ]
  }, {
    "name" : "private void register(@NonNull RegistrationRequest registrationRequest, @NonNull IMeasurementService service, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source / trigger.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerSource(@NonNull Uri attributionSource, @Nullable InputEvent inputEvent, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source (click or view).\n     *\n     * @param attributionSource the platform issues a request to this URI in order to fetch metadata\n     *     associated with the attribution source. The source metadata is stored on device, making\n     *     it eligible to be matched to future triggers.\n     * @param inputEvent either an {@link InputEvent} object (for a click event) or null (for a view\n     *     event).\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.view.InputEvent" ]
  }, {
    "name" : "public void registerSource(@NonNull SourceRegistrationRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register attribution sources(click or view) from an app context. This API will not process\n     * any redirects, all registration URLs should be supplied with the request.\n     *\n     * @param request app source registration request\n     * @param executor used by callback to dispatch results\n     * @param callback intended to notify asynchronously the API result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerWebSource(@NonNull WebSourceRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source(click or view) from web context. This API will not process any\n     * redirects, all registration URLs should be supplied with the request. At least one of\n     * appDestination or webDestination parameters are required to be provided. If the registration\n     * is successful, {@code callback}'s {@link AdServicesOutcomeReceiver#onResult} is invoked with\n     * null. In case of failure, a {@link Exception} is sent through {@code callback}'s {@link\n     * AdServicesOutcomeReceiver#onError}. Both success and failure feedback are executed on the\n     * provided {@link Executor}.\n     *\n     * @param request source registration request\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.os.RemoteException", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "private void registerWebSourceWrapper(@NonNull WebSourceRegistrationRequestInternal request, @NonNull IMeasurementService service, @Nullable Executor executor, @NonNull CallerMetadata callerMetadata, @NonNull IMeasurementCallback measurementCallback, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : " Wrapper method for registerWebSource. ",
    "links" : [ ]
  }, {
    "name" : "public void registerWebTrigger(@NonNull WebTriggerRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution trigger(click or view) from web context. This API will not process\n     * any redirects, all registration URLs should be supplied with the request. If the registration\n     * is successful, {@code callback}'s {@link AdServicesOutcomeReceiver#onResult} is invoked with\n     * null. In case of failure, a {@link Exception} is sent through {@code callback}'s {@link\n     * AdServicesOutcomeReceiver#onError}. Both success and failure feedback are executed on the\n     * provided {@link Executor}.\n     *\n     * @param request trigger registration request\n     * @param executor used by callback to dispatch results\n     * @param callback intended to notify asynchronously the API result\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.os.RemoteException", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "private void registerWebTriggerWrapper(@NonNull WebTriggerRegistrationRequestInternal request, @NonNull IMeasurementService service, @Nullable Executor executor, @NonNull CallerMetadata callerMetadata, @NonNull IMeasurementCallback measurementCallback, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : " Wrapper method for registerWebTrigger. ",
    "links" : [ ]
  }, {
    "name" : "public void registerTrigger(@NonNull Uri trigger, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a trigger (conversion).\n     *\n     * @param trigger the API issues a request to this URI to fetch metadata associated with the\n     *     trigger. The trigger metadata is stored on-device, and is eligible to be matched with\n     *     sources during the attribution process.\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void deleteRegistrations(@NonNull DeletionParam deletionParam, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Delete previously registered data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteRegistrations(@NonNull DeletionRequest deletionRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Delete previous registrations. If the deletion is successful, the callback's {@link\n     * AdServicesOutcomeReceiver#onResult} is invoked with null. In case of failure, a {@link\n     * Exception} is sent through the callback's {@link AdServicesOutcomeReceiver#onError}. Both\n     * success and failure feedback are executed on the provided {@link Executor}.\n     *\n     * @param deletionRequest The request for deleting data.\n     * @param executor The executor to run callback.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.os.RemoteException", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void getMeasurementApiStatus(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Integer, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get Measurement API status.\n     *\n     * <p>The callback's {@code Integer} value is one of {@code MeasurementApiState}.\n     *\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unbindFromService()",
    "returnType" : "void",
    "comment" : "\n     * If the service is in an APK (as opposed to the system service), unbind it from the service to\n     * allow the APK process to die.\n     *\n     * @hide Not sure if we'll need this functionality in the final API. For now, we need it for\n     *     performance testing to simulate \"cold-start\" situations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAppPackageName()",
    "returnType" : "String",
    "comment" : " Returns the package name of the app from the SDK or app context ",
    "links" : [ ]
  }, {
    "name" : "private String getSdkPackageName()",
    "returnType" : "String",
    "comment" : " Returns the package name of the sdk from the SDK or empty if no SDK found ",
    "links" : [ ]
  }, {
    "name" : "private CallerMetadata generateCallerMetadataWithCurrentTime()",
    "returnType" : "CallerMetadata",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IMeasurementService getServiceWrapper(@Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "IMeasurementService",
    "comment" : " Get Service wrapper, propagates error to the caller ",
    "links" : [ ]
  }, {
    "name" : "private static void requireExecutorForCallback(Executor executor, AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getAdId(MeasurementAdIdCallback measurementAdIdCallback)",
    "returnType" : "void",
    "comment" : " Make AdId call with timeout ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MeasurementCompatibleManager get(@NonNull Context context)", "public static MeasurementCompatibleManager get(@NonNull Context context, @NonNull AdIdCompatibleManager adIdManager)", "public IMeasurementService getService() throws IllegalStateException", "private boolean isAdIdPermissionEnabled(AdId adId)", "private void register(@NonNull RegistrationRequest registrationRequest, @NonNull IMeasurementService service, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerSource(@NonNull Uri attributionSource, @Nullable InputEvent inputEvent, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerSource(@NonNull SourceRegistrationRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerWebSource(@NonNull WebSourceRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "private void registerWebSourceWrapper(@NonNull WebSourceRegistrationRequestInternal request, @NonNull IMeasurementService service, @Nullable Executor executor, @NonNull CallerMetadata callerMetadata, @NonNull IMeasurementCallback measurementCallback, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerWebTrigger(@NonNull WebTriggerRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "private void registerWebTriggerWrapper(@NonNull WebTriggerRegistrationRequestInternal request, @NonNull IMeasurementService service, @Nullable Executor executor, @NonNull CallerMetadata callerMetadata, @NonNull IMeasurementCallback measurementCallback, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerTrigger(@NonNull Uri trigger, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "private void deleteRegistrations(@NonNull DeletionParam deletionParam, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Object, Exception> callback)", "public void deleteRegistrations(@NonNull DeletionRequest deletionRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Object, Exception> callback)", "public void getMeasurementApiStatus(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Integer, Exception> callback)", "public void unbindFromService()", "private String getAppPackageName()", "private String getSdkPackageName()", "private CallerMetadata generateCallerMetadataWithCurrentTime()", "private IMeasurementService getServiceWrapper(@Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "private static void requireExecutorForCallback(Executor executor, AdServicesOutcomeReceiver<Object, Exception> callback)", "private void getAdId(MeasurementAdIdCallback measurementAdIdCallback)" ],
  "variableNames" : [ "AD_ID_TIMEOUT_MS", "mContext", "mServiceBinder", "mAdIdManager", "mAdIdExecutor", "DEBUG_API_WARNING_MESSAGE" ]
}