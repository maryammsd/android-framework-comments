{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemValueOf.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemValueOf",
  "comment" : "\n * Implement xsl:value-of.\n * <pre>\n * <!ELEMENT xsl:value-of EMPTY>\n * <!ATTLIST xsl:value-of\n *   select %expr; #REQUIRED\n *   disable-output-escaping (yes|no) \"no\"\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#value-of\">value-of in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_selectExpression",
    "type" : "XPath",
    "comment" : "\n   * The select expression to be executed.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isDot",
    "type" : "boolean",
    "comment" : "\n   * True if the pattern is a simple \".\".\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_disableOutputEscaping",
    "type" : "boolean",
    "comment" : "\n   * Tells if this element should disable escaping.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSelect(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"select\" attribute.\n   * The required select attribute is an expression; this expression\n   * is evaluated and the resulting object is converted to a\n   * string as if by a call to the string function.\n   *\n   * @param v The value to set for the \"select\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getSelect()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"select\" attribute.\n   * The required select attribute is an expression; this expression\n   * is evaluated and the resulting object is converted to a\n   * string as if by a call to the string function.\n   *\n   * @return The value of the \"select\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDisableOutputEscaping(boolean v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"disable-output-escaping\" attribute.\n   * Normally, the xml output method escapes & and < (and\n   * possibly other characters) when outputting text nodes.\n   * This ensures that the output is well-formed XML. However,\n   * it is sometimes convenient to be able to produce output\n   * that is almost, but not quite well-formed XML; for\n   * example, the output may include ill-formed sections\n   * which are intended to be transformed into well-formed\n   * XML by a subsequent non-XML aware process. For this reason,\n   * XSLT provides a mechanism for disabling output escaping.\n   * An xsl:value-of or xsl:text element may have a\n   * disable-output-escaping attribute; the allowed values\n   * are yes or no; the default is no; if the value is yes,\n   * then a text node generated by instantiating the xsl:value-of\n   * or xsl:text element should be output without any escaping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>\n   *\n   * @param v The value to set for the \"disable-output-escaping\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDisableOutputEscaping()",
    "returnType" : "boolean",
    "comment" : "\n   * Get the \"disable-output-escaping\" attribute.\n   * Normally, the xml output method escapes & and < (and\n   * possibly other characters) when outputting text nodes.\n   * This ensures that the output is well-formed XML. However,\n   * it is sometimes convenient to be able to produce output\n   * that is almost, but not quite well-formed XML; for\n   * example, the output may include ill-formed sections\n   * which are intended to be transformed into well-formed\n   * XML by a subsequent non-XML aware process. For this reason,\n   * XSLT provides a mechanism for disabling output escaping.\n   * An xsl:value-of or xsl:text element may have a\n   * disable-output-escaping attribute; the allowed values\n   * are yes or no; the default is no; if the value is yes,\n   * then a text node generated by instantiating the xsl:value-of\n   * or xsl:text element should be output without any escaping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>\n   *\n   * @return The value of the \"disable-output-escaping\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   *\n   * NEEDSDOC @param sroot\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The node name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute the string expression and copy the text to the\n   * result tree.\n   * The required select attribute is an expression; this expression\n   * is evaluated and the resulting object is converted to a string\n   * as if by a call to the string function. The string specifies\n   * the string-value of the created text node. If the string is\n   * empty, no text node will be created. The created text node will\n   * be merged with any adjacent text nodes.\n   * @see <a href=\"http://www.w3.org/TR/xslt#value-of\">value-of in XSLT Specification</a>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   *\n   * @param newChild Child to add to children list\n   *\n   * @return Child just added to children list\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSelect(XPath v)", "public XPath getSelect()", "public void setDisableOutputEscaping(boolean v)", "public boolean getDisableOutputEscaping()", "public int getXSLToken()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)" ],
  "variableNames" : [ "serialVersionUID", "m_selectExpression", "m_isDot", "m_disableOutputEscaping" ]
}