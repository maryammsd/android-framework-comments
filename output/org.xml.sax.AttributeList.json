{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/AttributeList.java",
  "packageName" : "org.xml.sax",
  "className" : "AttributeList",
  "comment" : "\n * Interface for an element's attribute specifications.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This is the original SAX1 interface for reporting an element's\n * attributes.  Unlike the new {@link org.xml.sax.Attributes Attributes}\n * interface, it does not support Namespace-related information.</p>\n *\n * <p>When an attribute list is supplied as part of a\n * {@link org.xml.sax.DocumentHandler#startElement startElement}\n * event, the list will return valid results only during the\n * scope of the event; once the event handler returns control\n * to the parser, the attribute list is invalid.  To save a\n * persistent copy of the attribute list, use the SAX1\n * {@link org.xml.sax.helpers.AttributeListImpl AttributeListImpl}\n * helper class.</p>\n *\n * <p>An attribute list includes only attributes that have been\n * specified or defaulted: #IMPLIED attributes will not be included.</p>\n *\n * <p>There are two ways for the SAX application to obtain information\n * from the AttributeList.  First, it can iterate through the entire\n * list:</p>\n *\n * <pre>\n * public void startElement (String name, AttributeList atts) {\n *   for (int i = 0; i < atts.getLength(); i++) {\n *     String name = atts.getName(i);\n *     String type = atts.getType(i);\n *     String value = atts.getValue(i);\n *     [...]\n *   }\n * }\n * </pre>\n *\n * <p>(Note that the result of getLength() will be zero if there\n * are no attributes.)\n *\n * <p>As an alternative, the application can request the value or\n * type of specific attributes:</p>\n *\n * <pre>\n * public void startElement (String name, AttributeList atts) {\n *   String identifier = atts.getValue(\"id\");\n *   String label = atts.getValue(\"label\");\n *   [...]\n * }\n * </pre>\n *\n * @deprecated This interface has been replaced by the SAX2\n *             {@link org.xml.sax.Attributes Attributes}\n *             interface, which includes Namespace support.\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.DocumentHandler#startElement startElement\n * @see org.xml.sax.helpers.AttributeListImpl AttributeListImpl\n ",
  "links" : [ "org.xml.sax.DocumentHandler#startElement", "org.xml.sax.Attributes", "org.xml.sax.helpers.AttributeListImpl" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of attributes in this list.\n     *\n     * <p>The SAX parser may provide attributes in any\n     * arbitrary order, regardless of the order in which they were\n     * declared or specified.  The number of attributes may be\n     * zero.</p>\n     *\n     * @return The number of attributes in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getName(int i)",
    "returnType" : "String",
    "comment" : "\n     * Return the name of an attribute in this list (by position).\n     *\n     * <p>The names must be unique: the SAX parser shall not include the\n     * same attribute twice.  Attributes without values (those declared\n     * #IMPLIED without a value specified in the start tag) will be\n     * omitted from the list.</p>\n     *\n     * <p>If the attribute name has a namespace prefix, the prefix\n     * will still be attached.</p>\n     *\n     * @param i The index of the attribute in the list (starting at 0).\n     * @return The name of the indexed attribute, or null\n     *         if the index is out of range.\n     * @see #getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getType(int i)",
    "returnType" : "String",
    "comment" : "\n     * Return the type of an attribute in the list (by position).\n     *\n     * <p>The attribute type is one of the strings \"CDATA\", \"ID\",\n     * \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\",\n     * or \"NOTATION\" (always in upper case).</p>\n     *\n     * <p>If the parser has not read a declaration for the attribute,\n     * or if the parser does not report attribute types, then it must\n     * return the value \"CDATA\" as stated in the XML 1.0 Recommentation\n     * (clause 3.3.3, \"Attribute-Value Normalization\").</p>\n     *\n     * <p>For an enumerated attribute that is not a notation, the\n     * parser will report the type as \"NMTOKEN\".</p>\n     *\n     * @param i The index of the attribute in the list (starting at 0).\n     * @return The attribute type as a string, or\n     *         null if the index is out of range.\n     * @see #getLength\n     * @see #getType(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getValue(int i)",
    "returnType" : "String",
    "comment" : "\n     * Return the value of an attribute in the list (by position).\n     *\n     * <p>If the attribute value is a list of tokens (IDREFS,\n     * ENTITIES, or NMTOKENS), the tokens will be concatenated\n     * into a single string separated by whitespace.</p>\n     *\n     * @param i The index of the attribute in the list (starting at 0).\n     * @return The attribute value as a string, or\n     *         null if the index is out of range.\n     * @see #getLength\n     * @see #getValue(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getType(String name)",
    "returnType" : "String",
    "comment" : "\n     * Return the type of an attribute in the list (by name).\n     *\n     * <p>The return value is the same as the return value for\n     * getType(int).</p>\n     *\n     * <p>If the attribute name has a namespace prefix in the document,\n     * the application must include the prefix here.</p>\n     *\n     * @param name The name of the attribute.\n     * @return The attribute type as a string, or null if no\n     *         such attribute exists.\n     * @see #getType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getValue(String name)",
    "returnType" : "String",
    "comment" : "\n     * Return the value of an attribute in the list (by name).\n     *\n     * <p>The return value is the same as the return value for\n     * getValue(int).</p>\n     *\n     * <p>If the attribute name has a namespace prefix in the document,\n     * the application must include the prefix here.</p>\n     *\n     * @param name the name of the attribute to return\n     * @return The attribute value as a string, or null if\n     *         no such attribute exists.\n     * @see #getValue(int)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getLength()", "public abstract String getName(int i)", "public abstract String getType(int i)", "public abstract String getValue(int i)", "public abstract String getType(String name)", "public abstract String getValue(String name)" ],
  "variableNames" : [ ]
}