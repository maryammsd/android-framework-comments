{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/DateFormatSymbols.java",
  "packageName" : "java.text",
  "className" : "DateFormatSymbols",
  "comment" : "\n * {@code DateFormatSymbols} is a public class for encapsulating\n * localizable date-time formatting data, such as the names of the\n * months, the names of the days of the week, and the time zone data.\n * {@code SimpleDateFormat} uses\n * {@code DateFormatSymbols} to encapsulate this information.\n *\n * <p>\n * Typically you shouldn't use {@code DateFormatSymbols} directly.\n * Rather, you are encouraged to create a date-time formatter with the\n * {@code DateFormat} class's factory methods: {@code getTimeInstance},\n * {@code getDateInstance}, or {@code getDateTimeInstance}.\n * These methods automatically create a {@code DateFormatSymbols} for\n * the formatter so that you don't have to. After the\n * formatter is created, you may modify its format pattern using the\n * {@code setPattern} method. For more information about\n * creating formatters using {@code DateFormat}'s factory methods,\n * see {@link DateFormat}.\n *\n * <p>\n * If you decide to create a date-time formatter with a specific\n * format pattern for a specific locale, you can do so with:\n * <blockquote>\n * <pre>\n * new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).\n * </pre>\n * </blockquote>\n *\n * <p>\n * {@code DateFormatSymbols} objects are cloneable. When you obtain\n * a {@code DateFormatSymbols} object, feel free to modify the\n * date-time formatting data. For instance, you can replace the localized\n * date-time format pattern characters with the ones that you feel easy\n * to remember. Or you can change the representative cities\n * to your favorite ones.\n *\n * <p>\n * New {@code DateFormatSymbols} subclasses may be added to support\n * {@code SimpleDateFormat} for date-time formatting for additional locales.\n *\n * @see          DateFormat\n * @see          SimpleDateFormat\n * @see          java.util.SimpleTimeZone\n * @author       Chen-Lieh Huang\n * @since 1.1\n ",
  "links" : [ "java.text.DateFormat" ],
  "variables" : [ {
    "name" : "eras",
    "type" : "String[]",
    "comment" : "\n     * Era strings. For example: \"AD\" and \"BC\".  An array of 2 strings,\n     * indexed by {@code Calendar.BC} and {@code Calendar.AD}.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "months",
    "type" : "String[]",
    "comment" : "\n     * Month strings. For example: \"January\", \"February\", etc.  An array\n     * of 13 strings (some calendars have 13 months), indexed by\n     * {@code Calendar.JANUARY}, {@code Calendar.FEBRUARY}, etc.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortMonths",
    "type" : "String[]",
    "comment" : "\n     * Short month strings. For example: \"Jan\", \"Feb\", etc.  An array of\n     * 13 strings (some calendars have 13 months), indexed by\n     * {@code Calendar.JANUARY}, {@code Calendar.FEBRUARY}, etc.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "weekdays",
    "type" : "String[]",
    "comment" : "\n     * Weekday strings. For example: \"Sunday\", \"Monday\", etc.  An array\n     * of 8 strings, indexed by {@code Calendar.SUNDAY},\n     * {@code Calendar.MONDAY}, etc.\n     * The element {@code weekdays[0]} is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Short weekday strings. For example: \"Sun\", \"Mon\", etc.  An array\n     * of 8 strings, indexed by {@code Calendar.SUNDAY},\n     * {@code Calendar.MONDAY}, etc.\n     * The element {@code shortWeekdays[0]} is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "ampms",
    "type" : "String[]",
    "comment" : "\n     * AM and PM strings. For example: \"AM\" and \"PM\".  An array of\n     * 2 strings, indexed by {@code Calendar.AM} and\n     * {@code Calendar.PM}.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "zoneStrings",
    "type" : "String[][]",
    "comment" : "\n     * Localized names of time zones in this locale.  This is a\n     * two-dimensional array of strings of size <em>n</em> by <em>m</em>,\n     * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an\n     * entry containing the localized names for a single {@code TimeZone}.\n     * Each such row contains (with {@code i} ranging from\n     * 0..<em>n</em>-1):\n     * <ul>\n     * <li>{@code zoneStrings[i][0]} - time zone ID</li>\n     * <li>{@code zoneStrings[i][1]} - long name of zone in standard\n     * time</li>\n     * <li>{@code zoneStrings[i][2]} - short name of zone in\n     * standard time</li>\n     * <li>{@code zoneStrings[i][3]} - long name of zone in daylight\n     * saving time</li>\n     * <li>{@code zoneStrings[i][4]} - short name of zone in daylight\n     * saving time</li>\n     * </ul>\n     * The zone ID is <em>not</em> localized; it's one of the valid IDs of\n     * the {@link java.util.TimeZone TimeZone} class that are not\n     * <a href=\"../util/TimeZone.html#CustomID\">custom IDs</a>.\n     * All other entries are localized names.\n     * @see java.util.TimeZone\n     * @serial\n     ",
    "links" : [ "java.util.TimeZone" ]
  }, {
    "name" : "isZoneStringsSet",
    "type" : "boolean",
    "comment" : "\n     * Indicates that zoneStrings is set externally with setZoneStrings() method.\n     ",
    "links" : [ ]
  }, {
    "name" : "patternChars",
    "type" : "String",
    "comment" : "   'B' (flexible day period)",
    "links" : [ ]
  }, {
    "name" : "PATTERN_ERA",
    "type" : "int",
    "comment" : " G",
    "links" : [ ]
  }, {
    "name" : "PATTERN_YEAR",
    "type" : "int",
    "comment" : " y",
    "links" : [ ]
  }, {
    "name" : "PATTERN_MONTH",
    "type" : "int",
    "comment" : " M",
    "links" : [ ]
  }, {
    "name" : "PATTERN_DAY_OF_MONTH",
    "type" : "int",
    "comment" : " d",
    "links" : [ ]
  }, {
    "name" : "PATTERN_HOUR_OF_DAY1",
    "type" : "int",
    "comment" : " k",
    "links" : [ ]
  }, {
    "name" : "PATTERN_HOUR_OF_DAY0",
    "type" : "int",
    "comment" : " H",
    "links" : [ ]
  }, {
    "name" : "PATTERN_MINUTE",
    "type" : "int",
    "comment" : " m",
    "links" : [ ]
  }, {
    "name" : "PATTERN_SECOND",
    "type" : "int",
    "comment" : " s",
    "links" : [ ]
  }, {
    "name" : "PATTERN_MILLISECOND",
    "type" : "int",
    "comment" : " S",
    "links" : [ ]
  }, {
    "name" : "PATTERN_DAY_OF_WEEK",
    "type" : "int",
    "comment" : " E",
    "links" : [ ]
  }, {
    "name" : "PATTERN_DAY_OF_YEAR",
    "type" : "int",
    "comment" : " D",
    "links" : [ ]
  }, {
    "name" : "PATTERN_DAY_OF_WEEK_IN_MONTH",
    "type" : "int",
    "comment" : " F",
    "links" : [ ]
  }, {
    "name" : "PATTERN_WEEK_OF_YEAR",
    "type" : "int",
    "comment" : " w",
    "links" : [ ]
  }, {
    "name" : "PATTERN_WEEK_OF_MONTH",
    "type" : "int",
    "comment" : " W",
    "links" : [ ]
  }, {
    "name" : "PATTERN_AM_PM",
    "type" : "int",
    "comment" : " a",
    "links" : [ ]
  }, {
    "name" : "PATTERN_HOUR1",
    "type" : "int",
    "comment" : " h",
    "links" : [ ]
  }, {
    "name" : "PATTERN_HOUR0",
    "type" : "int",
    "comment" : " K",
    "links" : [ ]
  }, {
    "name" : "PATTERN_ZONE_NAME",
    "type" : "int",
    "comment" : " z",
    "links" : [ ]
  }, {
    "name" : "PATTERN_ZONE_VALUE",
    "type" : "int",
    "comment" : " Z",
    "links" : [ ]
  }, {
    "name" : "PATTERN_WEEK_YEAR",
    "type" : "int",
    "comment" : " Y",
    "links" : [ ]
  }, {
    "name" : "PATTERN_ISO_DAY_OF_WEEK",
    "type" : "int",
    "comment" : " u",
    "links" : [ ]
  }, {
    "name" : "PATTERN_ISO_ZONE",
    "type" : "int",
    "comment" : " X",
    "links" : [ ]
  }, {
    "name" : "PATTERN_MONTH_STANDALONE",
    "type" : "int",
    "comment" : " L",
    "links" : [ ]
  }, {
    "name" : "PATTERN_STANDALONE_DAY_OF_WEEK",
    "type" : "int",
    "comment" : " c",
    "links" : [ ]
  }, {
    "name" : "PATTERN_DAY_PERIOD",
    "type" : "int",
    "comment" : " b",
    "links" : [ ]
  }, {
    "name" : "PATTERN_FLEXIBLE_DAY_PERIOD",
    "type" : "int",
    "comment" : " B",
    "links" : [ ]
  }, {
    "name" : "localPatternChars",
    "type" : "String",
    "comment" : "\n     * Localized date-time pattern characters. For example, a locale may\n     * wish to use 'u' rather than 'y' to represent years in its date format\n     * pattern strings.\n     * This string must be exactly 18 characters long, with the index of\n     * the characters described by {@code DateFormat.ERA_FIELD},\n     * {@code DateFormat.YEAR_FIELD}, etc.  Thus, if the string were\n     * \"Xz...\", then localized patterns would use 'X' for era and 'z' for year.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "\n     * The locale which is used for initializing this DateFormatSymbols object.\n     *\n     * @since 1.6\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.1.4 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "currentSerialVersion",
    "type" : "int",
    "comment" : " - 1 Android version that contains a whole bunch of new fields.",
    "links" : [ ]
  }, {
    "name" : "serialVersionOnStream",
    "type" : "int",
    "comment" : "\n     * The version of the serialized data on the stream.  Possible values:\n     * <ul>\n     * <li><b>0</b> or not present on stream: JDK 1.1.4.\n     * <li><b>1</b> Android:\n     * </ul>\n     * When streaming out this class, the most recent format\n     * and the highest allowable <code>serialVersionOnStream</code>\n     * is written.\n     * @serial\n     * @since JDK1.1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "tinyMonths",
    "type" : "String[]",
    "comment" : "\n     * Tiny month strings; \"J\", \"F\", \"M\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "tinyWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Tiny weekday strings: \"M\", \"F\", \"W\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standAloneMonths",
    "type" : "String[]",
    "comment" : "\n     * Standalone month strings; \"January\", \"February\", \"March\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortStandAloneMonths",
    "type" : "String[]",
    "comment" : "\n     * Short standalone month strings: \"Jan\", \"Feb\", \"Mar\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "tinyStandAloneMonths",
    "type" : "String[]",
    "comment" : "\n     * Tiny standalone month strings: \"J\", \"F\", \"M\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standAloneWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Standalone weekday strings; \"Monday\", \"Tuesday\", \"Wednesday\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortStandAloneWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Short standalone weekday strings; \"Mon\", \"Tue\", \"Wed\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "tinyStandAloneWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Tiny standalone weekday strings; \"M\", \"T\", \"W\" etc.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "millisPerHour",
    "type" : "int",
    "comment" : "\n     * Useful constant for defining time zone offsets.\n     ",
    "links" : [ ]
  }, {
    "name" : "cachedInstances",
    "type" : "ConcurrentMap<Locale, SoftReference<DateFormatSymbols>>",
    "comment" : "\n     * Cache to hold DateFormatSymbols instances per Locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "lastZoneIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cachedHashCode",
    "type" : "int",
    "comment" : "\n     * Cached hash code\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the\n     * {@code getInstance} methods of this class can return\n     * localized instances. It must contain at least a {@code Locale}\n     * instance equal to {@link java.util.Locale#US Locale.US}.\n     *\n     * @return An array of locales for which localized\n     *         {@code DateFormatSymbols} instances are available.\n     * @since 1.6\n     ",
    "links" : [ "java.util.Locale#US" ]
  }, {
    "name" : "public static final DateFormatSymbols getInstance()",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * Gets the {@code DateFormatSymbols} instance for the default\n     * locale.\n     * <p>This is equivalent to calling {@link #getInstance(Locale)\n     *     getInstance(Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @return a {@code DateFormatSymbols} instance.\n     * @since 1.6\n     ",
    "links" : [ "#getInstance(Locale)" ]
  }, {
    "name" : "public static final DateFormatSymbols getInstance(Locale locale)",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * Gets the {@code DateFormatSymbols} instance for the specified\n     * locale.\n     * @param locale the given locale.\n     * @return a {@code DateFormatSymbols} instance.\n     * @throws    NullPointerException if {@code locale} is null\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " static final DateFormatSymbols getInstanceRef(Locale locale)",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * Returns a DateFormatSymbols provided by a provider or found in\n     * the cache. Note that this method returns a cached instance,\n     * not its clone. Therefore, the instance should never be given to\n     * an application.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static DateFormatSymbols getCachedInstance(Locale locale)",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * Returns a cached DateFormatSymbols if it's found in the\n     * cache. Otherwise, this method returns a newly cached instance\n     * for the given locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getEras()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets era strings. For example: \"AD\" and \"BC\".\n     * @return the era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEras(String[] newEras)",
    "returnType" : "void",
    "comment" : "\n     * Sets era strings. For example: \"AD\" and \"BC\".\n     * @param newEras the new era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getMonths()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets month strings. For example: \"January\", \"February\", etc.\n     * An array with either 12 or 13 elements will be returned depending\n     * on whether or not {@link java.util.Calendar#UNDECIMBER Calendar.UNDECIMBER}\n     * is supported. Use\n     * {@link java.util.Calendar#JANUARY Calendar.JANUARY},\n     * {@link java.util.Calendar#FEBRUARY Calendar.FEBRUARY},\n     * etc. to index the result array.\n     *\n     * <p>If the language requires different forms for formatting and\n     * stand-alone usages, this method returns month names in the\n     * formatting form. For example, the preferred month name for\n     * January in the Czech language is <em>ledna</em> in the\n     * formatting form, while it is <em>leden</em> in the stand-alone\n     * form. This method returns {@code \"ledna\"} in this case. Refer\n     * to the <a href=\"http://unicode.org/reports/tr35/#Calendar_Elements\">\n     * Calendar Elements in the Unicode Locale Data Markup Language\n     * (LDML) specification</a> for more details.\n     *\n     * @implSpec This method returns 13 elements since\n     * {@link java.util.Calendar#UNDECIMBER Calendar.UNDECIMBER} is supported.\n     * @return the month strings.\n     ",
    "links" : [ "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY", "java.util.Calendar#UNDECIMBER" ]
  }, {
    "name" : "public void setMonths(String[] newMonths)",
    "returnType" : "void",
    "comment" : "\n     * Sets month strings. For example: \"January\", \"February\", etc.\n     * @param newMonths the new month strings. The array should\n     * be indexed by {@link java.util.Calendar#JANUARY Calendar.JANUARY},\n     * {@link java.util.Calendar#FEBRUARY Calendar.FEBRUARY}, etc.\n     ",
    "links" : [ "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY" ]
  }, {
    "name" : "public String[] getShortMonths()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets short month strings. For example: \"Jan\", \"Feb\", etc.\n     * An array with either 12 or 13 elements will be returned depending\n     * on whether or not {@link java.util.Calendar#UNDECIMBER Calendar.UNDECIMBER}\n     * is supported. Use\n     * {@link java.util.Calendar#JANUARY Calendar.JANUARY},\n     * {@link java.util.Calendar#FEBRUARY Calendar.FEBRUARY},\n     * etc. to index the result array.\n     *\n     * <p>If the language requires different forms for formatting and\n     * stand-alone usages, this method returns short month names in\n     * the formatting form. For example, the preferred abbreviation\n     * for January in the Catalan language is <em>de gen.</em> in the\n     * formatting form, while it is <em>gen.</em> in the stand-alone\n     * form. This method returns {@code \"de gen.\"} in this case. Refer\n     * to the <a href=\"http://unicode.org/reports/tr35/#Calendar_Elements\">\n     * Calendar Elements in the Unicode Locale Data Markup Language\n     * (LDML) specification</a> for more details.\n     *\n     * @implSpec This method returns 13 elements since\n     * {@link java.util.Calendar#UNDECIMBER Calendar.UNDECIMBER} is supported.\n     * @return the short month strings.\n     ",
    "links" : [ "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY", "java.util.Calendar#UNDECIMBER" ]
  }, {
    "name" : "public void setShortMonths(String[] newShortMonths)",
    "returnType" : "void",
    "comment" : "\n     * Sets short month strings. For example: \"Jan\", \"Feb\", etc.\n     * @param newShortMonths the new short month strings. The array should\n     * be indexed by {@link java.util.Calendar#JANUARY Calendar.JANUARY},\n     * {@link java.util.Calendar#FEBRUARY Calendar.FEBRUARY}, etc.\n     ",
    "links" : [ "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY" ]
  }, {
    "name" : "public String[] getWeekdays()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * @return the weekday strings. Use\n     * {@link java.util.Calendar#SUNDAY Calendar.SUNDAY},\n     * {@link java.util.Calendar#MONDAY Calendar.MONDAY}, etc. to index\n     * the result array.\n     ",
    "links" : [ "java.util.Calendar#MONDAY", "java.util.Calendar#SUNDAY" ]
  }, {
    "name" : "public void setWeekdays(String[] newWeekdays)",
    "returnType" : "void",
    "comment" : "\n     * Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * @param newWeekdays the new weekday strings. The array should\n     * be indexed by {@link java.util.Calendar#SUNDAY Calendar.SUNDAY},\n     * {@link java.util.Calendar#MONDAY Calendar.MONDAY}, etc.\n     ",
    "links" : [ "java.util.Calendar#MONDAY", "java.util.Calendar#SUNDAY" ]
  }, {
    "name" : "public String[] getShortWeekdays()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets short weekday strings. For example: \"Sun\", \"Mon\", etc.\n     * @return the short weekday strings. Use\n     * {@link java.util.Calendar#SUNDAY Calendar.SUNDAY},\n     * {@link java.util.Calendar#MONDAY Calendar.MONDAY}, etc. to index\n     * the result array.\n     ",
    "links" : [ "java.util.Calendar#MONDAY", "java.util.Calendar#SUNDAY" ]
  }, {
    "name" : "public void setShortWeekdays(String[] newShortWeekdays)",
    "returnType" : "void",
    "comment" : "\n     * Sets short weekday strings. For example: \"Sun\", \"Mon\", etc.\n     * @param newShortWeekdays the new short weekday strings. The array should\n     * be indexed by {@link java.util.Calendar#SUNDAY Calendar.SUNDAY},\n     * {@link java.util.Calendar#MONDAY Calendar.MONDAY}, etc.\n     ",
    "links" : [ "java.util.Calendar#MONDAY", "java.util.Calendar#SUNDAY" ]
  }, {
    "name" : "public String[] getAmPmStrings()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets ampm strings. For example: \"AM\" and \"PM\".\n     * @return the ampm strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAmPmStrings(String[] newAmpms)",
    "returnType" : "void",
    "comment" : "\n     * Sets ampm strings. For example: \"AM\" and \"PM\".\n     * @param newAmpms the new ampm strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[][] getZoneStrings()",
    "returnType" : "String[][]",
    "comment" : "\n     * Gets time zone strings.  Use of this method is discouraged; use\n     * {@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()}\n     * instead.\n     * <p>\n     * The value returned is a\n     * two-dimensional array of strings of size <em>n</em> by <em>m</em>,\n     * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an\n     * entry containing the localized names for a single {@code TimeZone}.\n     * Each such row contains (with {@code i} ranging from\n     * 0..<em>n</em>-1):\n     * <ul>\n     * <li>{@code zoneStrings[i][0]} - time zone ID</li>\n     * <li>{@code zoneStrings[i][1]} - long name of zone in standard\n     * time</li>\n     * <li>{@code zoneStrings[i][2]} - short name of zone in\n     * standard time</li>\n     * <li>{@code zoneStrings[i][3]} - long name of zone in daylight\n     * saving time</li>\n     * <li>{@code zoneStrings[i][4]} - short name of zone in daylight\n     * saving time</li>\n     * </ul>\n     * The zone ID is <em>not</em> localized; it's one of the valid IDs of\n     * the {@link java.util.TimeZone TimeZone} class that are not\n     * <a href=\"../util/TimeZone.html#CustomID\">custom IDs</a>.\n     * All other entries are localized names.  If a zone does not implement\n     * daylight saving time, the daylight saving time names should not be used.\n     * <p>\n     * If {@link #setZoneStrings(String[][]) setZoneStrings} has been called\n     * on this {@code DateFormatSymbols} instance, then the strings\n     * provided by that call are returned. Otherwise, the returned array\n     * contains names provided by the runtime.\n     *\n     * @return the time zone strings.\n     * @see #setZoneStrings(String[][])\n     ",
    "links" : [ "java.util.TimeZone", "java.util.TimeZone#getDisplayName()", "#setZoneStrings(String" ]
  }, {
    "name" : "public void setZoneStrings(String[][] newZoneStrings)",
    "returnType" : "void",
    "comment" : "\n     * Sets time zone strings.  The argument must be a\n     * two-dimensional array of strings of size <em>n</em> by <em>m</em>,\n     * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an\n     * entry containing the localized names for a single {@code TimeZone}.\n     * Each such row contains (with {@code i} ranging from\n     * 0..<em>n</em>-1):\n     * <ul>\n     * <li>{@code zoneStrings[i][0]} - time zone ID</li>\n     * <li>{@code zoneStrings[i][1]} - long name of zone in standard\n     * time</li>\n     * <li>{@code zoneStrings[i][2]} - short name of zone in\n     * standard time</li>\n     * <li>{@code zoneStrings[i][3]} - long name of zone in daylight\n     * saving time</li>\n     * <li>{@code zoneStrings[i][4]} - short name of zone in daylight\n     * saving time</li>\n     * </ul>\n     * The zone ID is <em>not</em> localized; it's one of the valid IDs of\n     * the {@link java.util.TimeZone TimeZone} class that are not\n     * <a href=\"../util/TimeZone.html#CustomID\">custom IDs</a>.\n     * All other entries are localized names.\n     *\n     * @param newZoneStrings the new time zone strings.\n     * @throws    IllegalArgumentException if the length of any row in\n     *    {@code newZoneStrings} is less than 5\n     * @throws    NullPointerException if {@code newZoneStrings} is null\n     * @see #getZoneStrings()\n     ",
    "links" : [ "java.util.TimeZone" ]
  }, {
    "name" : "public String getLocalPatternChars()",
    "returnType" : "String",
    "comment" : "\n     * Gets localized date-time pattern characters. For example: 'u', 't', etc.\n     * @return the localized date-time pattern characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalPatternChars(String newLocalPatternChars)",
    "returnType" : "void",
    "comment" : "\n     * Sets localized date-time pattern characters. For example: 'u', 't', etc.\n     * @param newLocalPatternChars the new localized date-time\n     * pattern characters.\n     ",
    "links" : [ ]
  }, {
    "name" : " String[] getTinyMonths()",
    "returnType" : "String[]",
    "comment" : " BEGIN Android-added: Support for tiny and standalone field names.",
    "links" : [ ]
  }, {
    "name" : " String[] getStandAloneMonths()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getShortStandAloneMonths()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getTinyStandAloneMonths()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getTinyWeekdays()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getStandAloneWeekdays()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getShortStandAloneWeekdays()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getTinyStandAloneWeekdays()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides Cloneable\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Override hashCode.\n     * Generates a hash code for the DateFormatSymbols object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Override equals\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeData(Locale locale)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this DateFormatSymbols with the locale data. This method uses\n     * a cached DateFormatSymbols instance for the given locale if available. If\n     * there's no cached one, this method populates this objects fields from an\n     * appropriate LocaleData object. Note: zoneStrings isn't initialized in this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeSupplementaryData(LocaleData localeData)",
    "returnType" : "void",
    "comment" : " BEGIN Android-added: initializeSupplementaryData(LocaleData) for tiny and standalone fields.",
    "links" : [ ]
  }, {
    "name" : " final int getZoneIndex(String ID)",
    "returnType" : "int",
    "comment" : "\n     * Package private: used by SimpleDateFormat\n     * Gets the index for the given time zone ID to obtain the time zone\n     * strings for formatting. The time zone ID is just for programmatic\n     * lookup. NOT LOCALIZED!!!\n     * @param ID the given time zone ID.\n     * @return the index of the given time zone ID.  Returns -1 if\n     * the given time zone ID can't be located in the DateFormatSymbols object.\n     * @see java.util.SimpleTimeZone\n     ",
    "links" : [ ]
  }, {
    "name" : " final String[][] getZoneStringsWrapper()",
    "returnType" : "String[][]",
    "comment" : "\n     * Wrapper method to the getZoneStrings(), which is called from inside\n     * the java.text package and not to mutate the returned arrays, so that\n     * it does not need to create a defensive copy.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized String[][] internalZoneStrings()",
    "returnType" : "String[][]",
    "comment" : " BEGIN Android-changed: extract initialization of zoneStrings to separate method.",
    "links" : [ ]
  }, {
    "name" : "private String[][] getZoneStringsImpl(boolean needsCopy)",
    "returnType" : "String[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSubclassObject()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void copyMembers(DateFormatSymbols src, DateFormatSymbols dst)",
    "returnType" : "void",
    "comment" : "\n     * Clones all the data members from the source DateFormatSymbols to\n     * the target DateFormatSymbols.\n     *\n     * @param src the source DateFormatSymbols.\n     * @param dst the target DateFormatSymbols.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : " BEGIN Android-added: support reading non-Android serialized DFS.",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write out the default serializable data, after ensuring the\n     * {@code zoneStrings} field is initialized in order to make\n     * sure the backward compatibility.\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Locale[] getAvailableLocales()", "public static final DateFormatSymbols getInstance()", "public static final DateFormatSymbols getInstance(Locale locale)", " static final DateFormatSymbols getInstanceRef(Locale locale)", "private static DateFormatSymbols getCachedInstance(Locale locale)", "public String[] getEras()", "public void setEras(String[] newEras)", "public String[] getMonths()", "public void setMonths(String[] newMonths)", "public String[] getShortMonths()", "public void setShortMonths(String[] newShortMonths)", "public String[] getWeekdays()", "public void setWeekdays(String[] newWeekdays)", "public String[] getShortWeekdays()", "public void setShortWeekdays(String[] newShortWeekdays)", "public String[] getAmPmStrings()", "public void setAmPmStrings(String[] newAmpms)", "public String[][] getZoneStrings()", "public void setZoneStrings(String[][] newZoneStrings)", "public String getLocalPatternChars()", "public void setLocalPatternChars(String newLocalPatternChars)", " String[] getTinyMonths()", " String[] getStandAloneMonths()", " String[] getShortStandAloneMonths()", " String[] getTinyStandAloneMonths()", " String[] getTinyWeekdays()", " String[] getStandAloneWeekdays()", " String[] getShortStandAloneWeekdays()", " String[] getTinyStandAloneWeekdays()", "public Object clone()", "public int hashCode()", "public boolean equals(Object obj)", "private void initializeData(Locale locale)", "private void initializeSupplementaryData(LocaleData localeData)", " final int getZoneIndex(String ID)", " final String[][] getZoneStringsWrapper()", "private synchronized String[][] internalZoneStrings()", "private String[][] getZoneStringsImpl(boolean needsCopy)", "private boolean isSubclassObject()", "private void copyMembers(DateFormatSymbols src, DateFormatSymbols dst)", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException", "private void writeObject(ObjectOutputStream stream) throws IOException" ],
  "variableNames" : [ "eras", "months", "shortMonths", "weekdays", "shortWeekdays", "ampms", "zoneStrings", "isZoneStringsSet", "patternChars", "PATTERN_ERA", "PATTERN_YEAR", "PATTERN_MONTH", "PATTERN_DAY_OF_MONTH", "PATTERN_HOUR_OF_DAY1", "PATTERN_HOUR_OF_DAY0", "PATTERN_MINUTE", "PATTERN_SECOND", "PATTERN_MILLISECOND", "PATTERN_DAY_OF_WEEK", "PATTERN_DAY_OF_YEAR", "PATTERN_DAY_OF_WEEK_IN_MONTH", "PATTERN_WEEK_OF_YEAR", "PATTERN_WEEK_OF_MONTH", "PATTERN_AM_PM", "PATTERN_HOUR1", "PATTERN_HOUR0", "PATTERN_ZONE_NAME", "PATTERN_ZONE_VALUE", "PATTERN_WEEK_YEAR", "PATTERN_ISO_DAY_OF_WEEK", "PATTERN_ISO_ZONE", "PATTERN_MONTH_STANDALONE", "PATTERN_STANDALONE_DAY_OF_WEEK", "PATTERN_DAY_PERIOD", "PATTERN_FLEXIBLE_DAY_PERIOD", "localPatternChars", "locale", "serialVersionUID", "currentSerialVersion", "serialVersionOnStream", "tinyMonths", "tinyWeekdays", "standAloneMonths", "shortStandAloneMonths", "tinyStandAloneMonths", "standAloneWeekdays", "shortStandAloneWeekdays", "tinyStandAloneWeekdays", "millisPerHour", "cachedInstances", "lastZoneIndex", "cachedHashCode" ]
}