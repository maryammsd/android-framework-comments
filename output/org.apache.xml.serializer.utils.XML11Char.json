{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/utils/XML11Char.java",
  "packageName" : "org.apache.xml.serializer.utils",
  "className" : "XML11Char",
  "comment" : "\r\n * THIS IS A COPY OF THE XERCES-2J CLASS org.apache.xerces.utls.XMLChar\r\n *  \r\n * This class defines the basic properties of characters in XML 1.1. The data\r\n * in this class can be used to verify that a character is a valid\r\n * XML 1.1 character or if the character is a space, name start, or name\r\n * character.\r\n * <p>\r\n * A series of convenience methods are supplied to ease the burden\r\n * of the developer.  Using the character as an index into the <code>XML11CHARS</code>\r\n * array and applying the appropriate mask flag (e.g.\r\n * <code>MASK_VALID</code>), yields the same results as calling the\r\n * convenience methods. There is one exception: check the comments\r\n * for the <code>isValid</code> method for details.\r\n *\r\n * @author Glenn Marcy, IBM\r\n * @author Andy Clark, IBM\r\n * @author Arnaud  Le Hors, IBM\r\n * @author Neil Graham, IBM\r\n * @author Michael Glavassevich, IBM\r\n *\r\n * @version $Id: $\r\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "XML11CHARS",
    "type" : "byte[]",
    "comment" : " Character flags for XML 1.1. ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_VALID",
    "type" : "int",
    "comment" : " XML 1.1 Valid character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_SPACE",
    "type" : "int",
    "comment" : " XML 1.1 Space character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_NAME_START",
    "type" : "int",
    "comment" : " XML 1.1 Name start character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_NAME",
    "type" : "int",
    "comment" : " XML 1.1 Name character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_CONTROL",
    "type" : "int",
    "comment" : " XML 1.1 control character mask ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_CONTENT",
    "type" : "int",
    "comment" : " XML 1.1 content for external entities (valid - \"special\" chars - control chars) ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_NCNAME_START",
    "type" : "int",
    "comment" : " XML namespaces 1.1 NCNameStart ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_NCNAME",
    "type" : "int",
    "comment" : " XML namespaces 1.1 NCName ",
    "links" : [ ]
  }, {
    "name" : "MASK_XML11_CONTENT_INTERNAL",
    "type" : "int",
    "comment" : " XML 1.1 content for internal entities (valid - \"special\" chars) ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isXML11Space(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a space character\r\n     * as amdended in the XML 1.1 specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11Valid(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is valid. This method\r\n     * also checks the surrogate character range from 0x10000 to 0x10FFFF.\r\n     * <p>\r\n     * If the program chooses to apply the mask directly to the\r\n     * <code>XML11CHARS</code> array, then they are responsible for checking\r\n     * the surrogate character range.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11Invalid(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is invalid.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11ValidLiteral(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is valid and permitted outside\r\n     * of a character reference.  \r\n     * That is, this method will return false for the same set as\r\n     * isXML11Valid, except it also reports false for \"control characters\".\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11Content(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character can be considered \r\n     * content in an external parsed entity.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11InternalEntityContent(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character can be considered \r\n     * content in an internal parsed entity.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11NameStart(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid name start\r\n     * character as defined by production [4] in the XML 1.1\r\n     * specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11Name(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid name\r\n     * character as defined by production [4a] in the XML 1.1\r\n     * specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11NCNameStart(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid NCName start\r\n     * character as defined by production [4] in Namespaces in XML\r\n     * 1.1 recommendation.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11NCName(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid NCName\r\n     * character as defined by production [5] in Namespaces in XML\r\n     * 1.1 recommendation.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11NameHighSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns whether the given character is a valid \r\n     * high surrogate for a name character. This includes\r\n     * all high surrogates for characters [0x10000-0xEFFFF].\r\n     * In other words everything excluding planes 15 and 16.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11ValidName(String name)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Check to see if a string is a valid Name according to [5]\r\n     * in the XML 1.1 Recommendation\r\n     *\r\n     * @param name string to check\r\n     * @return true if name is a valid Name\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11ValidNCName(String ncName)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Check to see if a string is a valid NCName according to [4]\r\n     * from the XML Namespaces 1.1 Recommendation\r\n     *\r\n     * @param ncName string to check\r\n     * @return true if name is a valid NCName\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXML11ValidNmtoken(String nmtoken)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Check to see if a string is a valid Nmtoken according to [7]\r\n     * in the XML 1.1 Recommendation\r\n     *\r\n     * @param nmtoken string to check\r\n     * @return true if nmtoken is a valid Nmtoken \r\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isXML11Space(int c)", "public static boolean isXML11Valid(int c)", "public static boolean isXML11Invalid(int c)", "public static boolean isXML11ValidLiteral(int c)", "public static boolean isXML11Content(int c)", "public static boolean isXML11InternalEntityContent(int c)", "public static boolean isXML11NameStart(int c)", "public static boolean isXML11Name(int c)", "public static boolean isXML11NCNameStart(int c)", "public static boolean isXML11NCName(int c)", "public static boolean isXML11NameHighSurrogate(int c)", "public static boolean isXML11ValidName(String name)", "public static boolean isXML11ValidNCName(String ncName)", "public static boolean isXML11ValidNmtoken(String nmtoken)" ],
  "variableNames" : [ "XML11CHARS", "MASK_XML11_VALID", "MASK_XML11_SPACE", "MASK_XML11_NAME_START", "MASK_XML11_NAME", "MASK_XML11_CONTROL", "MASK_XML11_CONTENT", "MASK_XML11_NCNAME_START", "MASK_XML11_NCNAME", "MASK_XML11_CONTENT_INTERNAL" ]
}