{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/ScreenCapture.java",
  "packageName" : "android.window",
  "className" : "Builder",
  "comment" : "\n         * The Builder class used to construct {@link CaptureArgs}\n         *\n         * @param <T> A builder that extends {@link CaptureArgs.Builder}\n         ",
  "links" : [ "CaptureArgs", "CaptureArgs.Builder" ],
  "variables" : [ {
    "name" : "mPixelFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceCrop",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameScaleX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameScaleY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureSecureLayers",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowProtected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGrayscale",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludeLayers",
    "type" : "SurfaceControl[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintForSeamlessTransition",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CaptureArgs build()",
    "returnType" : "CaptureArgs",
    "comment" : "\n             * Construct a new {@link CaptureArgs} with the set parameters. The builder remains\n             * valid.\n             ",
    "links" : [ "CaptureArgs" ]
  }, {
    "name" : "public T setPixelFormat(int pixelFormat)",
    "returnType" : "T",
    "comment" : "\n             * The desired pixel format of the returned buffer.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setSourceCrop(@Nullable Rect sourceCrop)",
    "returnType" : "T",
    "comment" : "\n             * The portion of the screen to capture into the buffer. Caller may pass  in\n             * 'new Rect()' or null if no cropping is desired.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setFrameScale(float frameScale)",
    "returnType" : "T",
    "comment" : "\n             * The desired scale of the returned buffer. The raw screen will be scaled up/down.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setFrameScale(float frameScaleX, float frameScaleY)",
    "returnType" : "T",
    "comment" : "\n             * The desired scale of the returned buffer, allowing separate values for x and y scale.\n             * The raw screen will be scaled up/down.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setCaptureSecureLayers(boolean captureSecureLayers)",
    "returnType" : "T",
    "comment" : "\n             * Whether to allow the screenshot of secure layers. Warning: This should only be done\n             * if the content will be placed in a secure SurfaceControl.\n             *\n             * @see ScreenshotHardwareBuffer#containsSecureLayers()\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setAllowProtected(boolean allowProtected)",
    "returnType" : "T",
    "comment" : "\n             * Whether to allow the screenshot of protected (DRM) content. Warning: The screenshot\n             * cannot be read in unprotected space.\n             *\n             * @see HardwareBuffer#USAGE_PROTECTED_CONTENT\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setUid(long uid)",
    "returnType" : "T",
    "comment" : "\n             * Set the uid of the content that should be screenshot. The code will skip any surfaces\n             * that don't belong to the specified uid.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setGrayscale(boolean grayscale)",
    "returnType" : "T",
    "comment" : "\n             * Set whether the screenshot should use grayscale or not.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setExcludeLayers(@Nullable SurfaceControl[] excludeLayers)",
    "returnType" : "T",
    "comment" : "\n             * An array of {@link SurfaceControl} layer handles to exclude.\n             ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public T setHintForSeamlessTransition(boolean hintForSeamlessTransition)",
    "returnType" : "T",
    "comment" : "\n             * Set whether the screenshot will be used in a system animation.\n             * This hint is used for picking the \"best\" colorspace for the screenshot, in particular\n             * for mixing HDR and SDR content.\n             * E.g., hintForSeamlessTransition is false, then a colorspace suitable for file\n             * encoding, such as BT2100, may be chosen. Otherwise, then the display's color space\n             * would be chosen, with the possibility of having an extended brightness range. This\n             * is important for screenshots that are directly re-routed to a SurfaceControl in\n             * order to preserve accurate colors.\n             ",
    "links" : [ ]
  }, {
    "name" : " T getThis()",
    "returnType" : "T",
    "comment" : "\n             * Each sub class should return itself to allow the builder to chain properly\n             ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CaptureArgs build()", "public T setPixelFormat(int pixelFormat)", "public T setSourceCrop(@Nullable Rect sourceCrop)", "public T setFrameScale(float frameScale)", "public T setFrameScale(float frameScaleX, float frameScaleY)", "public T setCaptureSecureLayers(boolean captureSecureLayers)", "public T setAllowProtected(boolean allowProtected)", "public T setUid(long uid)", "public T setGrayscale(boolean grayscale)", "public T setExcludeLayers(@Nullable SurfaceControl[] excludeLayers)", "public T setHintForSeamlessTransition(boolean hintForSeamlessTransition)", " T getThis()" ],
  "variableNames" : [ "mPixelFormat", "mSourceCrop", "mFrameScaleX", "mFrameScaleY", "mCaptureSecureLayers", "mAllowProtected", "mUid", "mGrayscale", "mExcludeLayers", "mHintForSeamlessTransition" ]
}