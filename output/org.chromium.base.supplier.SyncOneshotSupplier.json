{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/SyncOneshotSupplier.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "SyncOneshotSupplier",
  "comment" : "\n * SyncOneshotSupplier wraps an asynchronously provided, non-null object {@code T}, synchronously\n * notifying observers a single time when the dependency becomes available. Note that null is the\n * sentinel value; a fulfilled supplier will never have a null value.\n *\n * <p>See {@link OneshotSupplier} for more details on when this might be useful. The key distinction\n * between the two interfaces is that the callbacks registered to {@link #onAvailable(Callback)} are\n * called synchronously when the object becomes is available. This is critical in some applications\n * where the value might be needed immediately and the {@link Callback} cannot be posted. However,\n * generally prefer {@link OneshotSupplier} if either will work to avoid main thread congestion.\n *\n * <p>This class must only be accessed from a single thread. Unless a particular thread designation\n * is given by the owner of the OneshotSupplier, clients should assume it must only be accessed on\n * the UI thread.\n *\n * <p>If you want to create a supplier, see an implementation in {@link SyncOneshotSupplierImpl}.\n *\n * @param <T> The type of the wrapped object.\n ",
  "links" : [ "org.chromium.base.supplier.OneshotSupplier", "#onAvailable(Callback)", "org.chromium.base.Callback", "org.chromium.base.supplier.SyncOneshotSupplierImpl" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " T onAvailable(Callback<T> callback)",
    "returnType" : "T",
    "comment" : "\n     * Add a callback that's synchronously called when the object owned by this supplier is\n     * available. If the object is already available, the callback will be called immediately.\n     *\n     * @param callback The callback to be called.\n     * @return The value for this supplier if already available. Null otherwise.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " T onAvailable(Callback<T> callback)" ],
  "variableNames" : [ ]
}