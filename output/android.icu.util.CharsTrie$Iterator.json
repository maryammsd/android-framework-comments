{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/CharsTrie.java",
  "packageName" : "android.icu.util",
  "className" : "Iterator",
  "comment" : "\n     * Iterator for all of the (string, value) pairs in a CharsTrie.\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "chars_",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pos_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialPos_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "remainingMatchLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialRemainingMatchLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "skipValue_",
    "type" : "boolean",
    "comment" : " Skip intermediate value which was already delivered.",
    "links" : [ ]
  }, {
    "name" : "str_",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entry_",
    "type" : "Entry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stack_",
    "type" : "ArrayList<Long>",
    "comment" : " but the code looks more confusing that way.)",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Iterator reset()",
    "returnType" : "Iterator",
    "comment" : "\n         * Resets this iterator to its initial state.\n         * @return this\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n         * @return true if there are more elements.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Entry next()",
    "returnType" : "Entry",
    "comment" : "\n         * Finds the next (string, value) pair if there is one.\n         *\n         * If the string is truncated to the maximum length and does not\n         * have a real value, then the value is set to -1.\n         * In this case, this \"not a real value\" is indistinguishable from\n         * a real value of -1.\n         * @return An Entry with the string and value of the next element.\n         * @throws NoSuchElementException - iteration has no more elements.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "\n         * Iterator.remove() is not supported.\n         * @throws UnsupportedOperationException (always)\n         ",
    "links" : [ ]
  }, {
    "name" : "private Entry truncateAndStop()",
    "returnType" : "Entry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int branchNext(int pos, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Iterator reset()", "public boolean hasNext()", "public Entry next()", "public void remove()", "private Entry truncateAndStop()", "private int branchNext(int pos, int length)" ],
  "variableNames" : [ "chars_", "pos_", "initialPos_", "remainingMatchLength_", "initialRemainingMatchLength_", "skipValue_", "str_", "maxLength_", "entry_", "stack_" ]
}