{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/AttachedSurfaceControl.java",
  "packageName" : "android.view",
  "className" : "AttachedSurfaceControl",
  "comment" : "\n * Provides an interface to the root-Surface of a View Hierarchy or Window. This\n * is used in combination with the {@link android.view.SurfaceControl} API to enable\n * attaching app created SurfaceControl to the SurfaceControl hierarchy used\n * by the app, and enable SurfaceTransactions to be performed in sync with the\n * View hierarchy drawing.\n *\n * This object is obtained from {@link android.view.View#getRootSurfaceControl} and\n * {@link android.view.Window#getRootSurfaceControl}. It must be used from the UI thread of\n * the object it was obtained from.\n ",
  "links" : [ "android.view.View#getRootSurfaceControl", "android.view.SurfaceControl", "android.view.Window#getRootSurfaceControl" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " SurfaceControl.Transaction buildReparentTransaction(@NonNull SurfaceControl child)",
    "returnType" : "SurfaceControl.Transaction",
    "comment" : "\n     * Create a transaction which will reparent {@param child} to the View hierarchy\n     * root SurfaceControl. See\n     * {@link SurfaceControl.Transaction#reparent}. This transacton must be applied\n     * or merged in to another transaction by the caller, otherwise it will have\n     * no effect.\n     *\n     * @param child The SurfaceControl to reparent.\n     * @return A new transaction which performs the reparent operation when applied.\n     ",
    "links" : [ "SurfaceControl.Transaction#reparent" ]
  }, {
    "name" : " boolean applyTransactionOnDraw(@NonNull SurfaceControl.Transaction t)",
    "returnType" : "boolean",
    "comment" : "\n     * Consume the passed in transaction, and request the View hierarchy to apply it atomically\n     * with the next draw. This transaction will be merged with the buffer transaction from the\n     * ViewRoot and they will show up on-screen atomically synced.\n     *\n     * This will not cause a draw to be scheduled, and if there are no other changes\n     * to the View hierarchy you may need to call {@link android.view.View#invalidate}\n     ",
    "links" : [ "android.view.View#invalidate" ]
  }, {
    "name" : " int getBufferTransformHint()",
    "returnType" : "int",
    "comment" : "\n     * The transform hint can be used by a buffer producer to pre-rotate the rendering such that the\n     * final transformation in the system composer is identity. This can be very useful when used in\n     * conjunction with the h/w composer HAL in situations where it cannot handle rotations or\n     * handle them with an additional power cost.\n     *\n     * The transform hint should be used with ASurfaceControl APIs when submitting buffers.\n     * Example usage:\n     *\n     * 1. After a configuration change, before dequeuing a buffer, the buffer producer queries the\n     *    function for the transform hint.\n     *\n     * 2. The desired buffer width and height is rotated by the transform hint.\n     *\n     * 3. The producer dequeues a buffer of the new pre-rotated size.\n     *\n     * 4. The producer renders to the buffer such that the image is already transformed, that is\n     *    applying the transform hint to the rendering.\n     *\n     * 5. The producer applies the inverse transform hint to the buffer it just rendered.\n     *\n     * 6. The producer queues the pre-transformed buffer with the buffer transform.\n     *\n     * 7. The composer combines the buffer transform with the display transform.  If the buffer\n     *    transform happens to cancel out the display transform then no rotation is needed and there\n     *    will be no performance penalties.\n     *\n     * Note, when using ANativeWindow APIs in conjunction with a NativeActivity Surface or\n     * SurfaceView Surface, the buffer producer will already have access to the transform hint and\n     * no additional work is needed.\n     *\n     * If the root surface is not available, the API will return {@code BUFFER_TRANSFORM_IDENTITY}.\n     * The caller should register a listener to listen for any changes. @see\n     * {@link #addOnBufferTransformHintChangedListener(OnBufferTransformHintChangedListener)}.\n     * Warning: Calling this API in Android 14 (API Level 34) or earlier will crash if the root\n     * surface is not available.\n     *\n     * @see HardwareBuffer\n     ",
    "links" : [ "#addOnBufferTransformHintChangedListener(OnBufferTransformHintChangedListener)" ]
  }, {
    "name" : " void addOnBufferTransformHintChangedListener(@NonNull OnBufferTransformHintChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link OnBufferTransformHintChangedListener} to receive notifications about when\n     * the transform hint changes.\n     *\n     * @see #getBufferTransformHint\n     * @see #removeOnBufferTransformHintChangedListener\n     ",
    "links" : [ "OnBufferTransformHintChangedListener" ]
  }, {
    "name" : " void removeOnBufferTransformHintChangedListener(@NonNull OnBufferTransformHintChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link OnBufferTransformHintChangedListener}.\n     *\n     * @see #addOnBufferTransformHintChangedListener\n     ",
    "links" : [ "OnBufferTransformHintChangedListener" ]
  }, {
    "name" : " void setTouchableRegion(@Nullable Region r)",
    "returnType" : "void",
    "comment" : "\n     * Sets the touchable region for this SurfaceControl, expressed in surface local\n     * coordinates. By default the touchable region is the entire Layer, indicating\n     * that if the layer is otherwise eligible to receive touch it receives touch\n     * on the entire surface. Setting the touchable region allows the SurfaceControl\n     * to receive touch in some regions, while allowing for pass-through in others.\n     *\n     * @param r The region to use or null to use the entire Layer bounds\n     ",
    "links" : [ ]
  }, {
    "name" : " SurfaceSyncGroup getOrCreateSurfaceSyncGroup()",
    "returnType" : "SurfaceSyncGroup",
    "comment" : "\n     * Returns a SurfaceSyncGroup that can be used to sync {@link AttachedSurfaceControl} in a\n     * {@link SurfaceSyncGroup}\n     *\n     * @hide\n     ",
    "links" : [ "android.view.AttachedSurfaceControl", "android.window.SurfaceSyncGroup" ]
  }, {
    "name" : " void setChildBoundingInsets(@NonNull Rect insets)",
    "returnType" : "void",
    "comment" : "\n     * Set a crop region on all children parented to the layer represented by this\n     * AttachedSurfaceControl. This includes SurfaceView, and an example usage may\n     * be to ensure that SurfaceView with {@link android.view.SurfaceView#setZOrderOnTop}\n     * are cropped to a region not including the app bar.\n     * <p>\n     * This cropped is expressed in terms of insets in window-space. Negative insets\n     * are considered invalid and will produce an exception. Insets of zero will produce\n     * the same result as if this function had never been called.\n     *\n     * @param insets The insets in each direction by which to bound the children\n     *               expressed in window-space.\n     * @throws IllegalArgumentException If negative insets are provided.\n     ",
    "links" : [ "android.view.SurfaceView#setZOrderOnTop" ]
  }, {
    "name" : " InputTransferToken getInputTransferToken()",
    "returnType" : "InputTransferToken",
    "comment" : "\n     * Gets the token used for associating this {@link AttachedSurfaceControl} with an embedded\n     * {@link SurfaceControlViewHost} or {@link SurfaceControl}\n     *\n     * <p>This token should be passed to\n     * {@link SurfaceControlViewHost#SurfaceControlViewHost(Context, Display, InputTransferToken)}\n     * or\n     * {@link WindowManager#registerBatchedSurfaceControlInputReceiver(int, InputTransferToken,\n     * SurfaceControl, Choreographer, SurfaceControlInputReceiver)} or\n     * {@link WindowManager#registerUnbatchedSurfaceControlInputReceiver(int, InputTransferToken,\n     * SurfaceControl, Looper, SurfaceControlInputReceiver)}\n     *\n     * @return The {@link InputTransferToken} for the {@link AttachedSurfaceControl}\n     * @throws IllegalStateException if the {@link AttachedSurfaceControl} was created with no\n     * registered input\n     ",
    "links" : [ "android.view.AttachedSurfaceControl", "android.view.SurfaceControlViewHost#SurfaceControlViewHost(Context", "android.view.WindowManager#registerUnbatchedSurfaceControlInputReceiver(int", "android.view.SurfaceControl", "android.window.InputTransferToken", "android.view.SurfaceControlViewHost", "android.view.WindowManager#registerBatchedSurfaceControlInputReceiver(int" ]
  } ],
  "methodNames" : [ " SurfaceControl.Transaction buildReparentTransaction(@NonNull SurfaceControl child)", " boolean applyTransactionOnDraw(@NonNull SurfaceControl.Transaction t)", " int getBufferTransformHint()", " void addOnBufferTransformHintChangedListener(@NonNull OnBufferTransformHintChangedListener listener)", " void removeOnBufferTransformHintChangedListener(@NonNull OnBufferTransformHintChangedListener listener)", " void setTouchableRegion(@Nullable Region r)", " SurfaceSyncGroup getOrCreateSurfaceSyncGroup()", " void setChildBoundingInsets(@NonNull Rect insets)", " InputTransferToken getInputTransferToken()" ],
  "variableNames" : [ ]
}