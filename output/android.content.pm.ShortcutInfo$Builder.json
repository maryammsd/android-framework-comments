{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/ShortcutInfo.java",
  "packageName" : "android.content.pm",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link ShortcutInfo} objects.\n     *\n     * @see ShortcutManager\n     ",
  "links" : [ "android.content.pm.ShortcutInfo" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivity",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledMessageResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledMessage",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCategories",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntents",
    "type" : "Intent[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersons",
    "type" : "Person[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLongLived",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRank",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocusId",
    "type" : "LocusId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartingThemeResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilityBindings",
    "type" : "Map<String, Map<String, List<String>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludedSurfaces",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setId(@NonNull String id)",
    "returnType" : "Builder",
    "comment" : "\n         * Used with the old style constructor, kept for unit tests.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLocusId(@NonNull LocusId locusId)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link LocusId} associated with this shortcut.\n         *\n         * <p>This method should be called when the {@link LocusId} is used in other places (such\n         * as {@link Notification} and {@link ContentCaptureContext}) so the device's intelligence\n         * services can correlate them.\n         ",
    "links" : [ "android.app.Notification", "android.view.contentcapture.ContentCaptureContext", "android.content.LocusId" ]
  }, {
    "name" : "public Builder setActivity(@NonNull ComponentName activity)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the target activity.  A shortcut will be shown along with this activity's icon\n         * on the launcher.\n         *\n         * When selecting a target activity, keep the following in mind:\n         * <ul>\n         * <li>All dynamic shortcuts must have a target activity.  When a shortcut with no target\n         * activity is published using\n         * {@link ShortcutManager#addDynamicShortcuts(List)} or\n         * {@link ShortcutManager#setDynamicShortcuts(List)},\n         * the first main activity defined in the app's <code>AndroidManifest.xml</code>\n         * file is used.\n         *\n         * <li>Only \"main\" activities&mdash;ones that define the {@link Intent#ACTION_MAIN}\n         * and {@link Intent#CATEGORY_LAUNCHER} intent filters&mdash;can be target\n         * activities.\n         *\n         * <li>By default, the first main activity defined in the app's manifest is\n         * the target activity.\n         *\n         * <li>A target activity must belong to the publisher app.\n         * </ul>\n         *\n         * @see ShortcutInfo#getActivity()\n         ",
    "links" : [ "android.content.Intent#ACTION_MAIN", "android.content.pm.ShortcutManager#addDynamicShortcuts(List)", "android.content.Intent#CATEGORY_LAUNCHER", "android.content.pm.ShortcutManager#setDynamicShortcuts(List)" ]
  }, {
    "name" : "public Builder setIcon(Icon icon)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an icon of a shortcut.\n         *\n         * <p>Icons are not available on {@link ShortcutInfo} instances\n         * returned by {@link ShortcutManager} or {@link LauncherApps}.  The default launcher\n         * app can use {@link LauncherApps#getShortcutIconDrawable(ShortcutInfo, int)}\n         * or {@link LauncherApps#getShortcutBadgedIconDrawable(ShortcutInfo, int)} to fetch\n         * shortcut icons.\n         *\n         * <p>Tints set with {@link Icon#setTint} or {@link Icon#setTintList} are not supported\n         * and will be ignored.\n         *\n         * <p>Only icons created with {@link Icon#createWithBitmap(Bitmap)},\n         * {@link Icon#createWithAdaptiveBitmap(Bitmap)}\n         * and {@link Icon#createWithResource} are supported.\n         * Other types, such as URI-based icons, are not supported.\n         *\n         * @see LauncherApps#getShortcutIconDrawable(ShortcutInfo, int)\n         * @see LauncherApps#getShortcutBadgedIconDrawable(ShortcutInfo, int)\n         ",
    "links" : [ "android.content.pm.LauncherApps", "android.graphics.drawable.Icon#setTint", "android.graphics.drawable.Icon#createWithAdaptiveBitmap(Bitmap)", "android.content.pm.ShortcutInfo", "android.content.pm.LauncherApps#getShortcutIconDrawable(ShortcutInfo", "android.graphics.drawable.Icon#createWithBitmap(Bitmap)", "android.graphics.drawable.Icon#setTintList", "android.content.pm.ShortcutManager", "android.content.pm.LauncherApps#getShortcutBadgedIconDrawable(ShortcutInfo", "android.graphics.drawable.Icon#createWithResource" ]
  }, {
    "name" : "public Builder setStartingTheme(int themeResId)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a theme resource id for the splash screen.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShortLabelResId(int shortLabelResId)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests\n         * use it.)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShortLabel(@NonNull CharSequence shortLabel)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the short title of a shortcut.\n         *\n         * <p>This is a mandatory field when publishing a new shortcut with\n         * {@link ShortcutManager#addDynamicShortcuts(List)} or\n         * {@link ShortcutManager#setDynamicShortcuts(List)}.\n         *\n         * <p>This field is intended to be a concise description of a shortcut.\n         *\n         * <p>The recommended maximum length is 10 characters.\n         *\n         * @see ShortcutInfo#getShortLabel()\n         ",
    "links" : [ "android.content.pm.ShortcutManager#addDynamicShortcuts(List)", "android.content.pm.ShortcutManager#setDynamicShortcuts(List)" ]
  }, {
    "name" : "public Builder setLongLabelResId(int longLabelResId)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests\n         * use it.)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLongLabel(@NonNull CharSequence longLabel)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the text of a shortcut.\n         *\n         * <p>This field is intended to be more descriptive than the shortcut title.  The launcher\n         * shows this instead of the short title when it has enough space.\n         *\n         * <p>The recommend maximum length is 25 characters.\n         *\n         * @see ShortcutInfo#getLongLabel()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTitle(@NonNull CharSequence value)",
    "returnType" : "Builder",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTitleResId(int value)",
    "returnType" : "Builder",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setText(@NonNull CharSequence value)",
    "returnType" : "Builder",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTextResId(int value)",
    "returnType" : "Builder",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDisabledMessageResId(int disabledMessageResId)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests\n         * use it.)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDisabledMessage(@NonNull CharSequence disabledMessage)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the message that should be shown when the user attempts to start a shortcut that\n         * is disabled.\n         *\n         * @see ShortcutInfo#getDisabledMessage()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCategories(Set<String> categories)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets categories for a shortcut.\n         * <ul>\n         * <li>Launcher apps may use this information to categorize shortcuts\n         * <li> Used by the system to associate a published Sharing Shortcut with supported\n         * mimeTypes. Required for published Sharing Shortcuts with a matching category\n         * declared in share targets, defined in the app's manifest linked shortcuts xml file.\n         * </ul>\n         *\n         * @see #SHORTCUT_CATEGORY_CONVERSATION\n         * @see ShortcutInfo#getCategories()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIntent(@NonNull Intent intent)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the intent of a shortcut.  Alternatively, {@link #setIntents(Intent[])} can be used\n         * to launch an activity with other activities in the back stack.\n         *\n         * <p>This is a mandatory field when publishing a new shortcut with\n         * {@link ShortcutManager#addDynamicShortcuts(List)} or\n         * {@link ShortcutManager#setDynamicShortcuts(List)}.\n         *\n         * <p>A shortcut can launch any intent that the publisher app has permission to\n         * launch.  For example, a shortcut can launch an unexported activity within the publisher\n         * app.  A shortcut intent doesn't have to point at the target activity.\n         *\n         * <p>The given {@code intent} can contain extras, but these extras must contain values\n         * of primitive types in order for the system to persist these values.\n         *\n         * @see ShortcutInfo#getIntent()\n         * @see #setIntents(Intent[])\n         ",
    "links" : [ "android.content.pm.ShortcutManager#addDynamicShortcuts(List)", "#setIntents(Intent", "android.content.pm.ShortcutManager#setDynamicShortcuts(List)" ]
  }, {
    "name" : "public Builder setIntents(@NonNull Intent[] intents)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets multiple intents instead of a single intent, in order to launch an activity with\n         * other activities in back stack.  Use {@link TaskStackBuilder} to build intents. The\n         * last element in the list represents the only intent that doesn't place an activity on\n         * the back stack.\n         * See the {@link ShortcutManager} javadoc for details.\n         *\n         * @see Builder#setIntent(Intent)\n         * @see ShortcutInfo#getIntents()\n         * @see Context#startActivities(Intent[])\n         * @see TaskStackBuilder\n         ",
    "links" : [ "android.app.TaskStackBuilder", "android.content.pm.ShortcutManager" ]
  }, {
    "name" : "public Builder setPerson(@NonNull Person person)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a person that is relevant to this shortcut. Alternatively,\n         * {@link #setPersons(Person[])} can be used to add multiple persons to a shortcut.\n         *\n         * <p> This is an optional field, but the addition of person may cause this shortcut to\n         * appear more prominently in the user interface (e.g. ShareSheet).\n         *\n         * <p> A person should usually contain a uri in order to benefit from the ranking boost.\n         * However, even if no uri is provided, it's beneficial to provide people in the shortcut,\n         * such that listeners and voice only devices can announce and handle them properly.\n         *\n         * @see Person\n         * @see #setPersons(Person[])\n         ",
    "links" : [ "#setPersons(Person" ]
  }, {
    "name" : "public Builder setPersons(@NonNull Person[] persons)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets multiple persons instead of a single person.\n         *\n         * @see Person\n         * @see #setPerson(Person)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLongLived(boolean longLived)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets if a shortcut would be valid even if it has been unpublished/invisible by the app\n         * (as a dynamic or pinned shortcut). If it is long lived, it can be cached by various\n         * system services even after it has been unpublished as a dynamic shortcut.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRank(int rank)",
    "returnType" : "Builder",
    "comment" : "\n         * \"Rank\" of a shortcut, which is a non-negative value that's used by the launcher app\n         * to sort shortcuts.\n         *\n         * See {@link ShortcutInfo#getRank()} for details.\n         ",
    "links" : [ "android.content.pm.ShortcutInfo#getRank()" ]
  }, {
    "name" : "public Builder setExtras(@NonNull PersistableBundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Extras that the app can set for any purpose.\n         *\n         * <p>Apps can store arbitrary shortcut metadata in extras and retrieve the\n         * metadata later using {@link ShortcutInfo#getExtras()}.\n         ",
    "links" : [ "android.content.pm.ShortcutInfo#getExtras()" ]
  }, {
    "name" : "public Builder addCapabilityBinding(@NonNull final Capability capability, @Nullable final CapabilityParams capabilityParams)",
    "returnType" : "Builder",
    "comment" : "\n         * Associates a shortcut with a capability, and a parameter of that capability. Used when\n         * the shortcut is an instance of a capability.\n         *\n         * <P>This method can be called multiple times to add multiple parameters to the same\n         * capability.\n         *\n         * @param capability {@link Capability} associated with the shortcut.\n         * @param capabilityParams Optional {@link CapabilityParams} associated with given\n         *                        capability.\n         ",
    "links" : [ "android.content.pm.CapabilityParams", "android.content.pm.Capability" ]
  }, {
    "name" : "public Builder setExcludedFromSurfaces(final int surfaces)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets which surfaces a shortcut will be excluded from.\n         *\n         * This API is reserved for future extension. Currently, marking a shortcut to be\n         * excluded from {@link #SURFACE_LAUNCHER} will not publish the shortcut, thus\n         * the following operations will be a no-op:\n         * {@link android.content.pm.ShortcutManager#pushDynamicShortcut(android.content.pm.ShortcutInfo)},\n         * {@link android.content.pm.ShortcutManager#addDynamicShortcuts(List)}, and\n         * {@link android.content.pm.ShortcutManager#setDynamicShortcuts(List)}.\n         ",
    "links" : [ "android.content.pm.ShortcutManager#pushDynamicShortcut(android.content.pm.ShortcutInfo)", "android.content.pm.ShortcutManager#addDynamicShortcuts(List)", "android.content.pm.ShortcutManager#setDynamicShortcuts(List)", "#SURFACE_LAUNCHER" ]
  }, {
    "name" : "public ShortcutInfo build()",
    "returnType" : "ShortcutInfo",
    "comment" : "\n         * Creates a {@link ShortcutInfo} instance.\n         ",
    "links" : [ "android.content.pm.ShortcutInfo" ]
  } ],
  "methodNames" : [ "public Builder setId(@NonNull String id)", "public Builder setLocusId(@NonNull LocusId locusId)", "public Builder setActivity(@NonNull ComponentName activity)", "public Builder setIcon(Icon icon)", "public Builder setStartingTheme(int themeResId)", "public Builder setShortLabelResId(int shortLabelResId)", "public Builder setShortLabel(@NonNull CharSequence shortLabel)", "public Builder setLongLabelResId(int longLabelResId)", "public Builder setLongLabel(@NonNull CharSequence longLabel)", "public Builder setTitle(@NonNull CharSequence value)", "public Builder setTitleResId(int value)", "public Builder setText(@NonNull CharSequence value)", "public Builder setTextResId(int value)", "public Builder setDisabledMessageResId(int disabledMessageResId)", "public Builder setDisabledMessage(@NonNull CharSequence disabledMessage)", "public Builder setCategories(Set<String> categories)", "public Builder setIntent(@NonNull Intent intent)", "public Builder setIntents(@NonNull Intent[] intents)", "public Builder setPerson(@NonNull Person person)", "public Builder setPersons(@NonNull Person[] persons)", "public Builder setLongLived(boolean longLived)", "public Builder setRank(int rank)", "public Builder setExtras(@NonNull PersistableBundle extras)", "public Builder addCapabilityBinding(@NonNull final Capability capability, @Nullable final CapabilityParams capabilityParams)", "public Builder setExcludedFromSurfaces(final int surfaces)", "public ShortcutInfo build()" ],
  "variableNames" : [ "mContext", "mId", "mActivity", "mIcon", "mTitleResId", "mTitle", "mTextResId", "mText", "mDisabledMessageResId", "mDisabledMessage", "mCategories", "mIntents", "mPersons", "mIsLongLived", "mRank", "mExtras", "mLocusId", "mStartingThemeResId", "mCapabilityBindings", "mExcludedSurfaces" ]
}