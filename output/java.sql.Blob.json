{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Blob.java",
  "packageName" : "java.sql",
  "className" : "Blob",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " long length() throws SQLException",
    "returnType" : "long",
    "comment" : "\n   * Returns the number of bytes in the <code>BLOB</code> value\n   * designated by this <code>Blob</code> object.\n   * @return length of the <code>BLOB</code> in bytes\n   * @exception SQLException if there is an error accessing the\n   * length of the <code>BLOB</code>\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " byte[] getBytes(long pos, int length) throws SQLException",
    "returnType" : "byte[]",
    "comment" : "\n   * Retrieves all or part of the <code>BLOB</code>\n   * value that this <code>Blob</code> object represents, as an array of\n   * bytes.  This <code>byte</code> array contains up to <code>length</code>\n   * consecutive bytes starting at position <code>pos</code>.\n   *\n   * @param pos the ordinal position of the first byte in the\n   *        <code>BLOB</code> value to be extracted; the first byte is at\n   *        position 1\n   * @param length the number of consecutive bytes to be copied; the value\n   * for length must be 0 or greater\n   * @return a byte array containing up to <code>length</code>\n   *         consecutive bytes from the <code>BLOB</code> value designated\n   *         by this <code>Blob</code> object, starting with the\n   *         byte at position <code>pos</code>\n   * @exception SQLException if there is an error accessing the\n   *            <code>BLOB</code> value; if pos is less than 1 or length is\n   * less than 0\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @see #setBytes\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getBinaryStream() throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n   * Retrieves the <code>BLOB</code> value designated by this\n   * <code>Blob</code> instance as a stream.\n   *\n   * @return a stream containing the <code>BLOB</code> data\n   * @exception SQLException if there is an error accessing the\n   *            <code>BLOB</code> value\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @see #setBinaryStream\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " long position(byte[] pattern, long start) throws SQLException",
    "returnType" : "long",
    "comment" : "\n   * Retrieves the byte position at which the specified byte array\n   * <code>pattern</code> begins within the <code>BLOB</code>\n   * value that this <code>Blob</code> object represents.  The\n   * search for <code>pattern</code> begins at position\n   * <code>start</code>.\n   *\n   * @param pattern the byte array for which to search\n   * @param start the position at which to begin searching; the\n   *        first position is 1\n   * @return the position at which the pattern appears, else -1\n   * @exception SQLException if there is an error accessing the\n   * <code>BLOB</code> or if start is less than 1\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " long position(Blob pattern, long start) throws SQLException",
    "returnType" : "long",
    "comment" : "\n   * Retrieves the byte position in the <code>BLOB</code> value\n   * designated by this <code>Blob</code> object at which\n   * <code>pattern</code> begins.  The search begins at position\n   * <code>start</code>.\n   *\n   * @param pattern the <code>Blob</code> object designating\n   * the <code>BLOB</code> value for which to search\n   * @param start the position in the <code>BLOB</code> value\n   *        at which to begin searching; the first position is 1\n   * @return the position at which the pattern begins, else -1\n   * @exception SQLException if there is an error accessing the\n   *            <code>BLOB</code> value or if start is less than 1\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " int setBytes(long pos, byte[] bytes) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Writes the given array of bytes to the <code>BLOB</code> value that\n     * this <code>Blob</code> object represents, starting at position\n     * <code>pos</code>, and returns the number of bytes written.\n     * The array of bytes will overwrite the existing bytes\n     * in the <code>Blob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Blob</code> value is reached\n     * while writing the array of bytes, then the length of the <code>Blob</code>\n     * value will be increased to accomodate the extra bytes.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>BLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param pos the position in the <code>BLOB</code> object at which\n     *        to start writing; the first position is 1\n     * @param bytes the array of bytes to be written to the <code>BLOB</code>\n     *        value that this <code>Blob</code> object represents\n     * @return the number of bytes written\n     * @exception SQLException if there is an error accessing the\n     *            <code>BLOB</code> value or if pos is less than 1\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBytes\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Writes all or part of the given <code>byte</code> array to the\n     * <code>BLOB</code> value that this <code>Blob</code> object represents\n     * and returns the number of bytes written.\n     * Writing starts at position <code>pos</code> in the <code>BLOB</code>\n     * value; <code>len</code> bytes from the given byte array are written.\n     * The array of bytes will overwrite the existing bytes\n     * in the <code>Blob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Blob</code> value is reached\n     * while writing the array of bytes, then the length of the <code>Blob</code>\n     * value will be increased to accomodate the extra bytes.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>BLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param pos the position in the <code>BLOB</code> object at which\n     *        to start writing; the first position is 1\n     * @param bytes the array of bytes to be written to this <code>BLOB</code>\n     *        object\n     * @param offset the offset into the array <code>bytes</code> at which\n     *        to start reading the bytes to be set\n     * @param len the number of bytes to be written to the <code>BLOB</code>\n     *        value from the array of bytes <code>bytes</code>\n     * @return the number of bytes written\n     * @exception SQLException if there is an error accessing the\n     *            <code>BLOB</code> value or if pos is less than 1\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBytes\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.OutputStream setBinaryStream(long pos) throws SQLException",
    "returnType" : "java.io.OutputStream",
    "comment" : "\n     * Retrieves a stream that can be used to write to the <code>BLOB</code>\n     * value that this <code>Blob</code> object represents.  The stream begins\n     * at position <code>pos</code>.\n     * The  bytes written to the stream will overwrite the existing bytes\n     * in the <code>Blob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Blob</code> value is reached\n     * while writing to the stream, then the length of the <code>Blob</code>\n     * value will be increased to accomodate the extra bytes.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>BLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param pos the position in the <code>BLOB</code> value at which\n     *        to start writing; the first position is 1\n     * @return a <code>java.io.OutputStream</code> object to which data can\n     *         be written\n     * @exception SQLException if there is an error accessing the\n     *            <code>BLOB</code> value or if pos is less than 1\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBinaryStream\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void truncate(long len) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Truncates the <code>BLOB</code> value that this <code>Blob</code>\n     * object represents to be <code>len</code> bytes in length.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>BLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param len the length, in bytes, to which the <code>BLOB</code> value\n     *        that this <code>Blob</code> object represents should be truncated\n     * @exception SQLException if there is an error accessing the\n     *            <code>BLOB</code> value or if len is less than 0\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void free() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * This method frees the <code>Blob</code> object and releases the resources that\n     * it holds. The object is invalid once the <code>free</code>\n     * method is called.\n     *<p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     *<p>\n     *\n     * @throws SQLException if an error occurs releasing\n     * the Blob's resources\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " InputStream getBinaryStream(long pos, long length) throws SQLException",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an <code>InputStream</code> object that contains a partial <code>Blob</code> value,\n     * starting  with the byte specified by pos, which is length bytes in length.\n     *\n     * @param pos the offset to the first byte of the partial value to be retrieved.\n     *  The first byte in the <code>Blob</code> is at position 1\n     * @param length the length in bytes of the partial value to be retrieved\n     * @return <code>InputStream</code> through which the partial <code>Blob</code> value can be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the number of bytes\n     * in the <code>Blob</code> or if pos + length is greater than the number of bytes\n     * in the <code>Blob</code>\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " long length() throws SQLException", " byte[] getBytes(long pos, int length) throws SQLException", " java.io.InputStream getBinaryStream() throws SQLException", " long position(byte[] pattern, long start) throws SQLException", " long position(Blob pattern, long start) throws SQLException", " int setBytes(long pos, byte[] bytes) throws SQLException", " int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLException", " java.io.OutputStream setBinaryStream(long pos) throws SQLException", " void truncate(long len) throws SQLException", " void free() throws SQLException", " InputStream getBinaryStream(long pos, long length) throws SQLException" ],
  "variableNames" : [ ]
}