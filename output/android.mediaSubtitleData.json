{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/SubtitleData.java",
  "packageName" : "android.media",
  "className" : "SubtitleData",
  "comment" : "\n * Class encapsulating subtitle data, as received through the\n * {@link MediaPlayer.OnSubtitleDataListener} interface.\n * The subtitle data includes:\n * <ul>\n * <li> the track index</li>\n * <li> the start time (in microseconds) of the data</li>\n * <li> the duration (in microseconds) of the data</li>\n * <li> the actual data.</li>\n * </ul>\n * The data is stored in a byte-array, and is encoded in one of the supported in-band\n * subtitle formats. The subtitle encoding is determined by the MIME type of the\n * {@link MediaPlayer.TrackInfo} of the subtitle track, one of\n * {@link MediaFormat#MIMETYPE_TEXT_CEA_608}, {@link MediaFormat#MIMETYPE_TEXT_CEA_708},\n * {@link MediaFormat#MIMETYPE_TEXT_VTT}.\n * <p>\n * Here is an example of iterating over the tracks of a {@link MediaPlayer}, and checking which\n * encoding is used for the subtitle tracks:\n * <p>\n * <pre class=\"prettyprint\">\n * MediaPlayer mp = new MediaPlayer();\n * mp.setDataSource(myContentLocation);\n * mp.prepare(); // synchronous prepare, ready to use when method returns\n * final TrackInfo[] trackInfos = mp.getTrackInfo();\n * for (TrackInfo info : trackInfo) {\n *     if (info.getTrackType() == TrackInfo.MEDIA_TRACK_TYPE_SUBTITLE) {\n *         final String mime = info.getFormat().getString(MediaFormat.KEY_MIME);\n *         if (MediaFormat.MIMETYPE_TEXT_CEA_608.equals(mime) {\n *             // subtitle encoding is CEA 608\n *         } else if (MediaFormat.MIMETYPE_TEXT_CEA_708.equals(mime) {\n *             // subtitle encoding is CEA 708\n *         } else if (MediaFormat.MIMETYPE_TEXT_VTT.equals(mime) {\n *             // subtitle encoding is WebVTT\n *         }\n *     }\n * }\n * </pre>\n * <p>\n * See\n * {@link MediaPlayer#setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener, android.os.Handler)}\n * to receive subtitle data from a MediaPlayer object.\n *\n * @see android.media.MediaPlayer\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTimeUs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDurationUs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getTrackIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the media player track which contains this subtitle data.\n     * @return an index in the array returned by {@link MediaPlayer#getTrackInfo()}.\n     ",
    "links" : [ "MediaPlayer#getTrackInfo" ]
  }, {
    "name" : "public long getStartTimeUs()",
    "returnType" : "long",
    "comment" : "\n     * Returns the media time at which the subtitle should be displayed, expressed in microseconds.\n     * @return the display start time for the subtitle\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDurationUs()",
    "returnType" : "long",
    "comment" : "\n     * Returns the duration in microsecond during which the subtitle should be displayed.\n     * @return the display duration for the subtitle\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the encoded data for the subtitle content.\n     * Encoding format depends on the subtitle type, refer to\n     * <a href=\"https://en.wikipedia.org/wiki/CEA-708\">CEA 708</a>,\n     * <a href=\"https://en.wikipedia.org/wiki/EIA-608\">CEA/EIA 608</a> and\n     * <a href=\"https://www.w3.org/TR/webvtt1/\">WebVTT</a>, defined by the MIME type\n     * of the subtitle track.\n     * @return the encoded subtitle data\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean parseParcel(Parcel parcel)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mTrackIndex", "mStartTimeUs", "mDurationUs", "mData" ],
  "methodNames" : [ "public int getTrackIndex()", "public long getStartTimeUs()", "public long getDurationUs()", "public byte[] getData()", "private boolean parseParcel(Parcel parcel)" ]
}