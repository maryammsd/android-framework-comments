{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/recovery/KeyDerivationParams.java",
  "packageName" : "android.security.keystore.recovery",
  "className" : "KeyDerivationParams",
  "comment" : "\n * Collection of parameters which define a key derivation function.\n * Currently only supports salted SHA-256.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAlgorithm",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSalt",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMemoryDifficulty",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALGORITHM_SHA256",
    "type" : "int",
    "comment" : "\n     * Salted SHA256.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALGORITHM_SCRYPT",
    "type" : "int",
    "comment" : "\n     * SCRYPT.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<KeyDerivationParams>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static KeyDerivationParams createSha256Params(@NonNull byte[] salt)",
    "returnType" : "KeyDerivationParams",
    "comment" : "\n     * Creates instance of the class to to derive keys using salted SHA256 hash.\n     *\n     * <p>The salted SHA256 hash is computed over the concatenation of four byte strings, salt_len +\n     * salt + key_material_len + key_material, where salt_len and key_material_len are 4-byte, and\n     * denote the number of bytes for salt and key_material, respectively.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyDerivationParams createScryptParams(@NonNull byte[] salt, int memoryDifficulty)",
    "returnType" : "KeyDerivationParams",
    "comment" : "\n     * Creates instance of the class to to derive keys using the password hashing algorithm SCRYPT.\n     *\n     * <p>We expose only one tuning parameter of SCRYPT, which is the memory cost parameter (i.e. N\n     * in <a href=\"https://www.tarsnap.com/scrypt/scrypt.pdf\">the SCRYPT paper</a>). Regular/default\n     * values are used for the other parameters, to keep the overall running time low. Specifically,\n     * the parallelization parameter p is 1, the block size parameter r is 8, and the hashing output\n     * length is 32-byte.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAlgorithm()",
    "returnType" : "int",
    "comment" : "\n     * Gets algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSalt()",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets salt.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMemoryDifficulty()",
    "returnType" : "int",
    "comment" : "\n     * Gets the memory difficulty parameter for the hashing algorithm.\n     *\n     * <p>The effect of this parameter depends on the algorithm in use. For example, please see\n     * {@link #createScryptParams(byte[], int)} for choosing the parameter for SCRYPT.\n     *\n     * <p>If the specific algorithm does not support such a memory difficulty parameter, its value\n     * should be -1.\n     ",
    "links" : [ "#createScryptParams(byte" ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static KeyDerivationParams createSha256Params(@NonNull byte[] salt)", "public static KeyDerivationParams createScryptParams(@NonNull byte[] salt, int memoryDifficulty)", "public int getAlgorithm()", "public byte[] getSalt()", "public int getMemoryDifficulty()", "public void writeToParcel(Parcel out, int flags)", "public int describeContents()" ],
  "variableNames" : [ "mAlgorithm", "mSalt", "mMemoryDifficulty", "ALGORITHM_SHA256", "ALGORITHM_SCRYPT", "CREATOR" ]
}