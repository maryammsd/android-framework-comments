{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/LongArray.java",
  "packageName" : "android.util",
  "className" : "LongArray",
  "comment" : "\n * Implements a growing array of long primitives.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_CAPACITY_INCREMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LongArray wrap(long[] array)",
    "returnType" : "LongArray",
    "comment" : "\n     * Creates an LongArray wrapping the given primitive long array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LongArray fromArray(long[] array, int size)",
    "returnType" : "LongArray",
    "comment" : "\n     * Creates an LongArray from the given primitive long array, copying it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resize(int newSize)",
    "returnType" : "void",
    "comment" : "\n     * Changes the size of this LongArray. If this LongArray is shrinked, the backing array capacity\n     * is unchanged. If the new size is larger than backing array capacity, a new backing array is\n     * created from the current content of this LongArray padded with 0s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(long value)",
    "returnType" : "void",
    "comment" : "\n     * Appends the specified value to the end of this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int index, long value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a value at the specified position in this array. If the specified index is equal to\n     * the length of the array, the value is added at the end.\n     *\n     * @throws IndexOutOfBoundsException when index &lt; 0 || index &gt; size()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAll(LongArray values)",
    "returnType" : "void",
    "comment" : "\n     * Adds the values in the specified array to this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureCapacity(int count)",
    "returnType" : "void",
    "comment" : "\n     * Ensures capacity to append at least <code>count</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all values from this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongArray clone()",
    "returnType" : "LongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long get(int index)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value at the specified position in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(int index, long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value at the specified position in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(long value)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified value in this\n     * array, or -1 if this array does not contain the value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the value at the specified index from this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of values in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] toArray()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns a new array with the contents of this LongArray.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean elementsEqual(@Nullable LongArray a, @Nullable LongArray b)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if each element of {@code a} equals corresponding element from {@code b}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static LongArray wrap(long[] array)", "public static LongArray fromArray(long[] array, int size)", "public void resize(int newSize)", "public void add(long value)", "public void add(int index, long value)", "public void addAll(LongArray values)", "private void ensureCapacity(int count)", "public void clear()", "public LongArray clone()", "public long get(int index)", "public void set(int index, long value)", "public int indexOf(long value)", "public void remove(int index)", "public int size()", "public long[] toArray()", "public static boolean elementsEqual(@Nullable LongArray a, @Nullable LongArray b)" ],
  "variableNames" : [ "MIN_CAPACITY_INCREMENT", "mValues", "mSize" ]
}