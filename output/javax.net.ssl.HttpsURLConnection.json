{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/HttpsURLConnection.java",
  "packageName" : "javax.net.ssl",
  "className" : "HttpsURLConnection",
  "comment" : "\n * <code>HttpsURLConnection</code> extends <code>HttpURLConnection</code>\n * with support for https-specific features.\n * <P>\n * See <A HREF=\"http://www.w3.org/pub/WWW/Protocols/\">\n * http://www.w3.org/pub/WWW/Protocols/</A> and\n * <A HREF=\"http://www.ietf.org/\"> RFC 2818 </A>\n * for more details on the\n * https specification.\n * <P>\n * This class uses <code>HostnameVerifier</code> and\n * <code>SSLSocketFactory</code>.\n * There are default implementations defined for both classes.\n * However, the implementations can be replaced on a per-class (static) or\n * per-instance basis.  All new <code>HttpsURLConnection</code>s instances\n * will be assigned\n * the \"default\" static values at instance creation, but they can be overriden\n * by calling the appropriate per-instance set method(s) before\n * <code>connect</code>ing.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "OK_HOSTNAME_VERIFIER_CLASS",
    "type" : "String",
    "comment" : "\n     * Holds the default instance so class preloading doesn't create an instance of\n     * it.\n     ",
    "links" : [ ]
  }, {
    "name" : "hostnameVerifier",
    "type" : "HostnameVerifier",
    "comment" : "\n     * The <code>hostnameVerifier</code> for this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultSSLSocketFactory",
    "type" : "SSLSocketFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sslSocketFactory",
    "type" : "SSLSocketFactory",
    "comment" : "\n     * The <code>SSLSocketFactory</code> inherited when an instance\n     * of this class is created.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract String getCipherSuite()",
    "returnType" : "String",
    "comment" : "\n     * Returns the cipher suite in use on this connection.\n     *\n     * @return the cipher suite\n     * @throws IllegalStateException if this method is called before\n     *          the connection has been established.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract java.security.cert.Certificate[] getLocalCertificates()",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Returns the certificate(s) that were sent to the server during\n     * handshaking.\n     * <P>\n     * Note: This method is useful only when using certificate-based\n     * cipher suites.\n     * <P>\n     * When multiple certificates are available for use in a\n     * handshake, the implementation chooses what it considers the\n     * \"best\" certificate chain available, and transmits that to\n     * the other side.  This method allows the caller to know\n     * which certificate chain was actually sent.\n     *\n     * @return an ordered array of certificates,\n     *          with the client's own certificate first followed by any\n     *          certificate authorities.  If no certificates were sent,\n     *          then null is returned.\n     * @throws IllegalStateException if this method is called before\n     *          the connection has been established.\n     * @see #getLocalPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract java.security.cert.Certificate[] getServerCertificates() throws SSLPeerUnverifiedException",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Returns the server's certificate chain which was established\n     * as part of defining the session.\n     * <P>\n     * Note: This method can be used only when using certificate-based\n     * cipher suites; using it with non-certificate-based cipher suites,\n     * such as Kerberos, will throw an SSLPeerUnverifiedException.\n     *\n     * @return an ordered array of server certificates,\n     *          with the peer's own certificate first followed by\n     *          any certificate authorities.\n     * @throws SSLPeerUnverifiedException if the peer is not verified.\n     * @throws IllegalStateException if this method is called before\n     *          the connection has been established.\n     * @see #getPeerPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the server's principal which was established as part of\n     * defining the session.\n     * <P>\n     * Note: Subclasses should override this method. If not overridden, it\n     * will default to returning the X500Principal of the server's end-entity\n     * certificate for certificate-based ciphersuites, or throw an\n     * SSLPeerUnverifiedException for non-certificate based ciphersuites,\n     * such as Kerberos.\n     *\n     * @return the server's principal. Returns an X500Principal of the\n     * end-entity certiticate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites.\n     *\n     * @throws SSLPeerUnverifiedException if the peer was not verified\n     * @throws IllegalStateException if this method is called before\n     *          the connection has been established.\n     *\n     * @see #getServerCertificates()\n     * @see #getLocalPrincipal()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Principal getLocalPrincipal()",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the principal that was sent to the server during handshaking.\n     * <P>\n     * Note: Subclasses should override this method. If not overridden, it\n     * will default to returning the X500Principal of the end-entity certificate\n     * that was sent to the server for certificate-based ciphersuites or,\n     * return null for non-certificate based ciphersuites, such as Kerberos.\n     *\n     * @return the principal sent to the server. Returns an X500Principal\n     * of the end-entity certificate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites. If no principal was\n     * sent, then null is returned.\n     *\n     * @throws IllegalStateException if this method is called before\n     *          the connection has been established.\n     *\n     * @see #getLocalCertificates()\n     * @see #getPeerPrincipal()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultHostnameVerifier(HostnameVerifier v)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default <code>HostnameVerifier</code> inherited by a\n     * new instance of this class.\n     * <p>\n     * Developers are <em>strongly</em> discouraged from changing the default\n     * {@code HostnameVerifier} as {@link #getDefaultHostnameVerifier()} is used by several\n     * classes for hostname verification on Android.\n     * <table>\n     *     <tr>\n     *         <th>User</th>\n     *         <th>Effect</th>\n     *     </tr>\n     *     <tr>\n     *         <td>Android's default {@link TrustManager}, as used with Android's default\n     *         {@link SSLContext}, {@link SSLSocketFactory} and {@link SSLSocket} implementations.\n     *         </td>\n     *         <td>The {@code HostnameVerifier} is used to verify the peer's\n     *         certificate hostname after connecting if {@code\n     *         SSLParameters.setEndpointIdentificationAlgorithm(\"HTTPS\")} has been called.\n     *         Instances use the <em>current</em> default {@code HostnameVerifier} at verification\n     *         time.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>{@link android.net.SSLCertificateSocketFactory}</td>\n     *         <td>The current default {@code HostnameVerifier} is used from various {@code\n     *         createSocket} methods. See {@link android.net.SSLCertificateSocketFactory} for\n     *         details; for example {@link\n     *         android.net.SSLCertificateSocketFactory#createSocket(String, int)}.\n     *         </td>\n     *     </tr>\n     *     <tr>\n     *         <td>Android's default {@link HttpsURLConnection} implementation.</td>\n     *         <td>The {@code HostnameVerifier} is used after a successful TLS handshake to verify\n     *         the URI host against the TLS session server. Instances use the default {@code\n     *         HostnameVerifier} set <em>when they were created</em> unless overridden with {@link\n     *         #setHostnameVerifier(HostnameVerifier)}.\n     *         Android's <code>HttpsURLConnection</code> relies on the {@code HostnameVerifier}\n     *         for the <em>entire</em> hostname verification step.</td>\n     *     </tr>\n     * </table>\n     * <p>\n     * If this method is not called, the default <code>HostnameVerifier</code> will check the\n     * hostname according to RFC 2818.\n     *\n     * @param v the default host name verifier\n     * @throws IllegalArgumentException if the <code>HostnameVerifier</code>\n     *          parameter is null.\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkPermission</code> method does not allow\n     *         <code>SSLPermission(\"setHostnameVerifier\")</code>\n     * @see #getDefaultHostnameVerifier()\n     ",
    "links" : [ "#setHostnameVerifier(HostnameVerifier)", "javax.net.ssl.SSLContext", "android.net.SSLCertificateSocketFactory#createSocket(String", "javax.net.ssl.HttpsURLConnection", "javax.net.ssl.SSLSocket", "javax.net.ssl.TrustManager", "android.net.SSLCertificateSocketFactory", "#getDefaultHostnameVerifier()", "javax.net.ssl.SSLSocketFactory" ]
  }, {
    "name" : "public static HostnameVerifier getDefaultHostnameVerifier()",
    "returnType" : "HostnameVerifier",
    "comment" : "\n     * Gets the default <code>HostnameVerifier</code> that is inherited\n     * by new instances of this class.\n     *\n     * @return the default host name verifier\n     * @see #setDefaultHostnameVerifier(HostnameVerifier)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHostnameVerifier(HostnameVerifier v)",
    "returnType" : "void",
    "comment" : "\n     * Sets the <code>HostnameVerifier</code> for this instance.\n     * <P>\n     * New instances of this class inherit the default static hostname\n     * verifier set by {@link #setDefaultHostnameVerifier(HostnameVerifier)\n     * setDefaultHostnameVerifier}.  Calls to this method replace\n     * this object's <code>HostnameVerifier</code>.\n     * <p>\n     * Android's <code>HttpsURLConnection</code> relies on the {@code HostnameVerifier}\n     * for the <em>entire</em> hostname verification step.\n     *\n     * @param v the host name verifier\n     * @throws IllegalArgumentException if the <code>HostnameVerifier</code>\n     *  parameter is null.\n     * @see #getHostnameVerifier()\n     * @see #setDefaultHostnameVerifier(HostnameVerifier)\n     ",
    "links" : [ "#setDefaultHostnameVerifier(HostnameVerifier)" ]
  }, {
    "name" : "public static HostnameVerifier getStrictHostnameVerifier()",
    "returnType" : "HostnameVerifier",
    "comment" : "\n     * Obtains a stricter {@code HostnameVerifier}.\n     *\n     * The {@code HostnameVerifier} returned by this method will reject certificates\n     * with wildcards for top-level domains such \"*.com\".\n     *\n     * This is a vendor hook (called from Zygote init code) to allow stricter hostname\n     * checking on NIAP-certified devices.\n     *\n     * @see com.squareup.okhttp.internal.tls.OkHostnameVerifier\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public HostnameVerifier getHostnameVerifier()",
    "returnType" : "HostnameVerifier",
    "comment" : "\n     * Gets the <code>HostnameVerifier</code> in place on this instance.\n     *\n     * @return the host name verifier\n     * @see #setHostnameVerifier(HostnameVerifier)\n     * @see #setDefaultHostnameVerifier(HostnameVerifier)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultSSLSocketFactory(SSLSocketFactory sf)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default <code>SSLSocketFactory</code> inherited by new\n     * instances of this class.\n     * <P>\n     * The socket factories are used when creating sockets for secure\n     * https URL connections.\n     *\n     * @param sf the default SSL socket factory\n     * @throws IllegalArgumentException if the SSLSocketFactory\n     *          parameter is null.\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkSetFactory</code> method does not allow\n     *         a socket factory to be specified.\n     * @see #getDefaultSSLSocketFactory()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SSLSocketFactory getDefaultSSLSocketFactory()",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Gets the default static <code>SSLSocketFactory</code> that is\n     * inherited by new instances of this class.\n     * <P>\n     * The socket factories are used when creating sockets for secure\n     * https URL connections.\n     *\n     * @return the default <code>SSLSocketFactory</code>\n     * @see #setDefaultSSLSocketFactory(SSLSocketFactory)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSSLSocketFactory(SSLSocketFactory sf)",
    "returnType" : "void",
    "comment" : "\n     * Sets the <code>SSLSocketFactory</code> to be used when this instance\n     * creates sockets for secure https URL connections.\n     * <P>\n     * New instances of this class inherit the default static\n     * <code>SSLSocketFactory</code> set by\n     * {@link #setDefaultSSLSocketFactory(SSLSocketFactory)\n     * setDefaultSSLSocketFactory}.  Calls to this method replace\n     * this object's <code>SSLSocketFactory</code>.\n     *\n     * @param sf the SSL socket factory\n     * @throws IllegalArgumentException if the <code>SSLSocketFactory</code>\n     *          parameter is null.\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkSetFactory</code> method does not allow\n     *         a socket factory to be specified.\n     * @see #getSSLSocketFactory()\n     ",
    "links" : [ "#setDefaultSSLSocketFactory(SSLSocketFactory)" ]
  }, {
    "name" : "public SSLSocketFactory getSSLSocketFactory()",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Gets the SSL socket factory to be used when creating sockets\n     * for secure https URL connections.\n     *\n     * @return the <code>SSLSocketFactory</code>\n     * @see #setSSLSocketFactory(SSLSocketFactory)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String getCipherSuite()", "public abstract java.security.cert.Certificate[] getLocalCertificates()", "public abstract java.security.cert.Certificate[] getServerCertificates() throws SSLPeerUnverifiedException", "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException", "public Principal getLocalPrincipal()", "public static void setDefaultHostnameVerifier(HostnameVerifier v)", "public static HostnameVerifier getDefaultHostnameVerifier()", "public void setHostnameVerifier(HostnameVerifier v)", "public static HostnameVerifier getStrictHostnameVerifier()", "public HostnameVerifier getHostnameVerifier()", "public static void setDefaultSSLSocketFactory(SSLSocketFactory sf)", "public static SSLSocketFactory getDefaultSSLSocketFactory()", "public void setSSLSocketFactory(SSLSocketFactory sf)", "public SSLSocketFactory getSSLSocketFactory()" ],
  "variableNames" : [ "OK_HOSTNAME_VERIFIER_CLASS", "hostnameVerifier", "defaultSSLSocketFactory", "sslSocketFactory" ]
}