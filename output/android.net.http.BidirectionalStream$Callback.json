{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/http/BidirectionalStream.java",
  "packageName" : "android.net.http",
  "className" : "Callback",
  "comment" : "\n     * Callback interface used to receive callbacks from a {@link BidirectionalStream}.\n     ",
  "links" : [ "android.net.http.BidirectionalStream" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onStreamReady(@NonNull BidirectionalStream stream)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the stream is ready for reading and writing. Consumer may call {@link\n         * BidirectionalStream#read read()} to start reading data. Consumer may call {@link\n         * BidirectionalStream#write write()} to start writing data.\n         *\n         * @param stream the stream that is ready. <strong>This is not guaranteed to be the same\n         *        object as the one received by other callbacks, nor is it guaranteed to be the one\n         *        returned by {@link BidirectionalStream.Builder#build}.</strong> However, method\n         *        calls on this object will have the same effects as calls on the original\n         *        {@link BidirectionalStream}.\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream#read", "android.net.http.BidirectionalStream#write", "android.net.http.BidirectionalStream" ]
  }, {
    "name" : " void onResponseHeadersReceived(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when initial response headers are received. Headers are available from {@code\n         * info.}{@link UrlResponseInfo#getHeaders getHeaders()}. Consumer may call {@link\n         * BidirectionalStream#read read()} to start reading. Consumer may call {@link\n         * BidirectionalStream#write write()} to start writing or close the stream.\n         *\n         * @param stream the stream on which response headers were received. <strong>This is not\n         *        guaranteed to be the same object as the one received by other callbacks, nor is\n         *        it guaranteed to be the one returned by {@link BidirectionalStream.Builder#build}.\n         *        </strong> However, method calls on this object will have the same effects as\n         *        calls on the original {@link BidirectionalStream}.\n         * @param info the response information.\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream#read", "android.net.http.BidirectionalStream#write", "android.net.http.BidirectionalStream", "android.net.http.UrlResponseInfo#getHeaders" ]
  }, {
    "name" : " void onReadCompleted(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info, @NonNull ByteBuffer buffer, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when data is read into the buffer passed to {@link BidirectionalStream#read\n         * read()}. Only part of the buffer may be populated. To continue reading, call {@link\n         * BidirectionalStream#read read()}. It may be invoked after {@code\n         * onResponseTrailersReceived()}, if there was pending read data before trailers were\n         * received.\n         *\n         * @param stream the stream on which the read completed. <strong>This is not guaranteed to\n         *        be the same object as the one received by other callbacks, nor is it guaranteed\n         *        to be the one returned by {@link BidirectionalStream.Builder#build}.</strong>\n         *        However, method calls on this object will have the same effects as calls on the\n         *        original {@link BidirectionalStream}.\n         * @param info the response information\n         * @param buffer the buffer that was passed to {@link BidirectionalStream#read read()}, now\n         * set to the end of the received data. If position is not updated, it means the remote side\n         * has signaled that it will send no more data.\n         * @param endOfStream if true, this is the last read data, remote will not send more data,\n         *         and\n         * the read side is closed.\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream#read", "android.net.http.BidirectionalStream", "android.net.http.BidirectionalStream#readread()" ]
  }, {
    "name" : " void onWriteCompleted(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info, @NonNull ByteBuffer buffer, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the entire ByteBuffer passed to {@link BidirectionalStream#write write()} is\n         * sent. The buffer's position is updated to be the same as the buffer's limit. The buffer's\n         * limit is not changed. To continue writing, call {@link BidirectionalStream#write\n         * write()}.\n         *\n         * @param stream the stream on which the write completed. <strong>This is not guaranteed to\n         *        be the same object as the one received by other callbacks, nor is it guaranteed\n         *        to be the one returned by {@link BidirectionalStream.Builder#build}.</strong>\n         *        However, method calls on this object will have the same effects as calls on the\n         *        original {@link BidirectionalStream}.\n         * @param info the response information\n         * @param buffer the buffer that was passed to {@link BidirectionalStream#write write()}.\n         *         The\n         * buffer's position is set to the buffer's limit. The buffer's limit is not changed.\n         * @param endOfStream the endOfStream flag that was passed to the corresponding {@link\n         * BidirectionalStream#write write()}. If true, the write side is closed.\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream#write", "android.net.http.BidirectionalStream", "android.net.http.BidirectionalStream#writewrite()" ]
  }, {
    "name" : " void onResponseTrailersReceived(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info, @NonNull HeaderBlock trailers)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when trailers are received before closing the stream. Only invoked when server\n         * sends trailers, which it may not. May be invoked while there is read data remaining in\n         * local buffer.\n         *\n         * Default implementation takes no action.\n         *\n         * @param stream the stream on which response trailers were received. <strong>This is not\n         *        guaranteed to be the same object as the one received by other callbacks, nor is\n         *        it guaranteed to be the one returned by {@link BidirectionalStream.Builder#build}.\n         *        </strong> However, method calls on this object will have the same effects as calls\n         *        on the original {@link BidirectionalStream}.\n         * @param info the response information\n         * @param trailers the trailers received\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream" ]
  }, {
    "name" : " void onSucceeded(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when there is no data to be read or written and the stream is closed successfully\n         * remotely and locally. Once invoked, no further {@link BidirectionalStream.Callback}\n         * methods will be invoked.\n         *\n         * @param stream the stream which is closed successfully. <strong>This is not guaranteed to\n         *        be the same object as the one received by other callbacks, nor is it guaranteed\n         *        to be the one returned by {@link BidirectionalStream.Builder#build}.</strong>\n         *        However, method calls on this object will have the same effects as calls on the\n         *        original {@link BidirectionalStream}.\n         * @param info the response information\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream", "BidirectionalStream.Callback" ]
  }, {
    "name" : " void onFailed(@NonNull BidirectionalStream stream, @Nullable UrlResponseInfo info, @NonNull HttpException error)",
    "returnType" : "void",
    "comment" : "\n         * Invoked if the stream failed for any reason after {@link BidirectionalStream#start}.\n         * <a href=\"https://tools.ietf.org/html/rfc7540#section-7\">HTTP/2 error codes</a> are\n         * mapped to {@link NetworkException#getErrorCode} codes. Once invoked,\n         * no further {@link BidirectionalStream.Callback} methods will be invoked.\n         *\n         * @param stream the stream which has failed. <strong>This is not guaranteed to\n         *        be the same object as the one received by other callbacks, nor is it guaranteed\n         *        to be the one returned by {@link BidirectionalStream.Builder#build}.</strong>\n         *        However, method calls on this object will have the same effects as calls on the\n         *        original {@link BidirectionalStream}.\n         * @param info the response information. May be {@code null} if no response was received.\n         * @param error information about the failure\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.NetworkException#getErrorCode", "android.net.http.BidirectionalStream", "android.net.http.BidirectionalStream#start", "BidirectionalStream.Callback" ]
  }, {
    "name" : " void onCanceled(@NonNull BidirectionalStream stream, @Nullable UrlResponseInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Invoked if the stream was canceled via {@link BidirectionalStream#cancel}. Once invoked,\n         * no further {@link BidirectionalStream.Callback} methods will be invoked. Default\n         * implementation takes no action.\n         *\n         * @param stream the stream that was canceled. <strong>This is not guaranteed to\n         *        be the same object as the one received by other callbacks, nor is it guaranteed\n         *        to be the one returned by {@link BidirectionalStream.Builder#build}.</strong>\n         *        However, method calls on this object will have the same effects as calls on the\n         *        original {@link BidirectionalStream}.\n         * @param info the response information. May be {@code null} if no response was received.\n         ",
    "links" : [ "BidirectionalStream.Builder#build", "android.net.http.BidirectionalStream", "BidirectionalStream.Callback", "android.net.http.BidirectionalStream#cancel" ]
  } ],
  "methodNames" : [ " void onStreamReady(@NonNull BidirectionalStream stream)", " void onResponseHeadersReceived(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info)", " void onReadCompleted(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info, @NonNull ByteBuffer buffer, boolean endOfStream)", " void onWriteCompleted(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info, @NonNull ByteBuffer buffer, boolean endOfStream)", " void onResponseTrailersReceived(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info, @NonNull HeaderBlock trailers)", " void onSucceeded(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info)", " void onFailed(@NonNull BidirectionalStream stream, @Nullable UrlResponseInfo info, @NonNull HttpException error)", " void onCanceled(@NonNull BidirectionalStream stream, @Nullable UrlResponseInfo info)" ],
  "variableNames" : [ ]
}