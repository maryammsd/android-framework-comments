{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/Call.java",
  "packageName" : "android.telecom",
  "className" : "Details",
  "comment" : "",
  "variables" : [ {
    "name" : "DIRECTION_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is neither and incoming nor an outgoing call.  This can be the\n         * case for calls reported directly by a {@link ConnectionService} in special cases such as\n         * call handovers.\n         ",
    "links" : [ "ConnectionService" ]
  }, {
    "name" : "DIRECTION_INCOMING",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is an incoming call.\n         ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_OUTGOING",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is an outgoing call.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_HOLD",
    "type" : "int",
    "comment" : " Call can currently be put on hold or unheld. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORT_HOLD",
    "type" : "int",
    "comment" : " Call supports the hold feature. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_MERGE_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Calls within a conference can be merged. A {@link ConnectionService} has the option to\n         * add a {@link Conference} call before the child {@link Connection}s are merged. This is how\n         * CDMA-based {@link Connection}s are implemented. For these unmerged {@link Conference}s, this\n         * capability allows a merge button to be shown while the conference call is in the foreground\n         * of the in-call UI.\n         * <p>\n         * This is only intended for use by a {@link Conference}.\n         ",
    "links" : [ "ConnectionService", "Conference", "Connection", "Connection", "Conference", "Conference" ]
  }, {
    "name" : "CAPABILITY_SWAP_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Calls within a conference can be swapped between foreground and background.\n         * See {@link #CAPABILITY_MERGE_CONFERENCE} for additional information.\n         * <p>\n         * This is only intended for use by a {@link Conference}.\n         ",
    "links" : [ "#CAPABILITY_MERGE_CONFERENCE", "Conference" ]
  }, {
    "name" : "CAPABILITY_UNUSED_1",
    "type" : "int",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_RESPOND_VIA_TEXT",
    "type" : "int",
    "comment" : " Call supports responding via text option. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_MUTE",
    "type" : "int",
    "comment" : " Call can be muted. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_MANAGE_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Call supports conference call management. This capability only applies to {@link Conference}\n         * calls which can have {@link Connection}s as children.\n         ",
    "links" : [ "Conference", "Connection" ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VT_LOCAL_RX",
    "type" : "int",
    "comment" : "\n         * Local device supports receiving video.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VT_LOCAL_TX",
    "type" : "int",
    "comment" : "\n         * Local device supports transmitting video.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL",
    "type" : "int",
    "comment" : "\n         * Local device supports bidirectional video calling.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VT_REMOTE_RX",
    "type" : "int",
    "comment" : "\n         * Remote device supports receiving video.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VT_REMOTE_TX",
    "type" : "int",
    "comment" : "\n         * Remote device supports transmitting video.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL",
    "type" : "int",
    "comment" : "\n         * Remote device supports bidirectional video calling.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SEPARATE_FROM_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Call is able to be separated from its parent {@code Conference}, if any.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_DISCONNECT_FROM_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Call is able to be individually disconnected when in a {@code Conference}.\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SPEED_UP_MT_AUDIO",
    "type" : "int",
    "comment" : "\n         * Speed up audio setup for MT call.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_UPGRADE_TO_VIDEO",
    "type" : "int",
    "comment" : "\n         * Call can be upgraded to a video call.\n         * @hide\n         * @deprecated Use {@link #CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL} and\n         * {@link #CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL} to indicate for a call\n         * whether or not video calling is supported.\n         ",
    "links" : [ "#CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL", "#CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL" ]
  }, {
    "name" : "CAPABILITY_CAN_PAUSE_VIDEO",
    "type" : "int",
    "comment" : "\n         * For video calls, indicates whether the outgoing video for the call can be paused using\n         * the {@link android.telecom.VideoProfile#STATE_PAUSED} VideoState.\n         ",
    "links" : [ "android.telecom.VideoProfile#STATE_PAUSED" ]
  }, {
    "name" : "CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION",
    "type" : "int",
    "comment" : "\n         * Call sends responses through connection.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO",
    "type" : "int",
    "comment" : "\n         * When set, prevents a video {@code Call} from being downgraded to an audio-only call.\n         * <p>\n         * Should be set when the VideoState has the {@link VideoProfile#STATE_TX_ENABLED} or\n         * {@link VideoProfile#STATE_RX_ENABLED} bits set to indicate that the connection cannot be\n         * downgraded from a video call back to a VideoState of\n         * {@link VideoProfile#STATE_AUDIO_ONLY}.\n         * <p>\n         * Intuitively, a call which can be downgraded to audio should also have local and remote\n         * video\n         * capabilities (see {@link #CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL} and\n         * {@link #CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL}).\n         ",
    "links" : [ "VideoProfile#STATE_TX_ENABLED", "VideoProfile#STATE_RX_ENABLED", "VideoProfile#STATE_AUDIO_ONLY", "#CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL", "#CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL" ]
  }, {
    "name" : "CAPABILITY_CAN_PULL_CALL",
    "type" : "int",
    "comment" : "\n         * When set for an external call, indicates that this {@code Call} can be pulled from a\n         * remote device to the current device.\n         * <p>\n         * Should only be set on a {@code Call} where {@link #PROPERTY_IS_EXTERNAL_CALL} is set.\n         * <p>\n         * An {@link InCallService} will only see calls with this capability if it has the\n         * {@link TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS} metadata set to {@code true}\n         * in its manifest.\n         * <p>\n         * See {@link Connection#CAPABILITY_CAN_PULL_CALL} and\n         * {@link Connection#PROPERTY_IS_EXTERNAL_CALL}.\n         ",
    "links" : [ "#PROPERTY_IS_EXTERNAL_CALL", "InCallService", "TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS", "Connection#CAPABILITY_CAN_PULL_CALL", "Connection#PROPERTY_IS_EXTERNAL_CALL" ]
  }, {
    "name" : "CAPABILITY_SUPPORT_DEFLECT",
    "type" : "int",
    "comment" : " Call supports the deflect feature. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_ADD_PARTICIPANT",
    "type" : "int",
    "comment" : "\n         * Call supports adding participants to the call via\n         * {@link #addConferenceParticipants(List)}.\n         * @hide\n         ",
    "links" : [ "#addConferenceParticipants" ]
  }, {
    "name" : "CAPABILITY_TRANSFER",
    "type" : "int",
    "comment" : "\n         * When set for a call, indicates that this {@code Call} can be transferred to another\n         * number.\n         * Call supports the blind and assured call transfer feature.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_TRANSFER_CONSULTATIVE",
    "type" : "int",
    "comment" : "\n         * When set for a call, indicates that this {@code Call} can be transferred to another\n         * ongoing call.\n         * Call supports the consultative call transfer feature.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Whether the call is currently a conference.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GENERIC_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Whether the call is a generic conference, where we do not know the precise state of\n         * participants in the conference (eg. on CDMA).\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_EMERGENCY_CALLBACK_MODE",
    "type" : "int",
    "comment" : "\n         * Whether the call is made while the device is in emergency callback mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_WIFI",
    "type" : "int",
    "comment" : "\n         * Connection is using WIFI.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_HIGH_DEF_AUDIO",
    "type" : "int",
    "comment" : "\n         * When set, the UI should indicate to the user that a call is using high definition\n         * audio.\n         * <p>\n         * The underlying {@link ConnectionService} is responsible for reporting this\n         * property.  It is important to note that this property is not intended to report the\n         * actual audio codec being used for a Call, but whether the call should be indicated\n         * to the user as high definition.\n         * <p>\n         * The Android Telephony stack reports this property for calls based on a number\n         * of factors, including which audio codec is used and whether a call is using an HD\n         * codec end-to-end.  Some mobile operators choose to suppress display of an HD indication,\n         * and in these cases this property will not be set for a call even if the underlying audio\n         * codec is in fact \"high definition\".\n         ",
    "links" : [ "ConnectionService" ]
  }, {
    "name" : "PROPERTY_ENTERPRISE_CALL",
    "type" : "int",
    "comment" : "\n         * Whether the call is associated with the work profile.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_IS_EXTERNAL_CALL",
    "type" : "int",
    "comment" : "\n         * When set, indicates that this {@code Call} does not actually exist locally for the\n         * {@link ConnectionService}.\n         * <p>\n         * Consider, for example, a scenario where a user has two phones with the same phone number.\n         * When a user places a call on one device, the telephony stack can represent that call on\n         * the other device by adding it to the {@link ConnectionService} with the\n         * {@link Connection#PROPERTY_IS_EXTERNAL_CALL} property set.\n         * <p>\n         * An {@link InCallService} will only see calls with this property if it has the\n         * {@link TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS} metadata set to {@code true}\n         * in its manifest.\n         * <p>\n         * See {@link Connection#PROPERTY_IS_EXTERNAL_CALL}.\n         ",
    "links" : [ "ConnectionService", "ConnectionService", "Connection#PROPERTY_IS_EXTERNAL_CALL", "InCallService", "TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS", "Connection#PROPERTY_IS_EXTERNAL_CALL" ]
  }, {
    "name" : "PROPERTY_HAS_CDMA_VOICE_PRIVACY",
    "type" : "int",
    "comment" : "\n         * Indicates that the call has CDMA Enhanced Voice Privacy enabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_SELF_MANAGED",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is from a self-managed {@link ConnectionService}.\n         * <p>\n         * See also {@link Connection#PROPERTY_SELF_MANAGED}\n         ",
    "links" : [ "ConnectionService", "Connection#PROPERTY_SELF_MANAGED" ]
  }, {
    "name" : "PROPERTY_ASSISTED_DIALING",
    "type" : "int",
    "comment" : "\n         * Indicates the call used Assisted Dialing.\n         *\n         * @see TelecomManager#EXTRA_USE_ASSISTED_DIALING\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_RTT",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is an RTT call. Use {@link #getRttCall()} to get the\n         * {@link RttCall} object that is used to send and receive text.\n         ",
    "links" : [ "#getRttCall", "RttCall" ]
  }, {
    "name" : "PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL",
    "type" : "int",
    "comment" : "\n         * Indicates that the call has been identified as the network as an emergency call. This\n         * property may be set for both incoming and outgoing calls which the network identifies as\n         * emergency calls.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_VOIP_AUDIO_MODE",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is using VoIP audio mode.\n         * <p>\n         * When this property is set, the {@link android.media.AudioManager} audio mode for this\n         * call will be {@link android.media.AudioManager#MODE_IN_COMMUNICATION}.  When this\n         * property is not set, the audio mode for this call will be\n         * {@link android.media.AudioManager#MODE_IN_CALL}.\n         * <p>\n         * This property reflects changes made using {@link Connection#setAudioModeIsVoip(boolean)}.\n         * <p>\n         * You can use this property to determine whether an un-answered incoming call or a held\n         * call will use VoIP audio mode (if the call does not currently have focus, the system\n         * audio mode may not reflect the mode the call will use).\n         ",
    "links" : [ "android.media.AudioManager", "android.media.AudioManager#MODE_IN_COMMUNICATION", "android.media.AudioManager#MODE_IN_CALL", "Connection#setAudioModeIsVoip" ]
  }, {
    "name" : "PROPERTY_IS_ADHOC_CONFERENCE",
    "type" : "int",
    "comment" : "\n         * Indicates that the call is an adhoc conference call. This property can be set for both\n         * incoming and outgoing calls.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mTelecomCallId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandle",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlePresentation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayNamePresentation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccountHandle",
    "type" : "PhoneAccountHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedAudioRoutes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisconnectCause",
    "type" : "DisconnectCause",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGatewayInfo",
    "type" : "GatewayInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatusHints",
    "type" : "StatusHints",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntentExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCreationTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContactDisplayName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallDirection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerNumberVerificationStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean can(int capabilities, int capability)",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the supplied capabilities  supports the specified capability.\n         *\n         * @param capabilities A bit field of capabilities.\n         * @param capability The capability to check capabilities for.\n         * @return Whether the specified capability is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean can(int capability)",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the capabilities of this {@code Details} supports the specified capability.\n         *\n         * @param capability The capability to check capabilities for.\n         * @return Whether the specified capability is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String capabilitiesToString(int capabilities)",
    "returnType" : "String",
    "comment" : "\n         * Render a set of capability bits ({@code CAPABILITY_*}) as a human readable string.\n         *\n         * @param capabilities A capability bit field.\n         * @return A human readable string representation.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasProperty(int properties, int property)",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the supplied properties includes the specified property.\n         *\n         * @param properties A bit field of properties.\n         * @param property The property to check properties for.\n         * @return Whether the specified property is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasProperty(int property)",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the properties of this {@code Details} includes the specified property.\n         *\n         * @param property The property to check properties for.\n         * @return Whether the specified property is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String propertiesToString(int properties)",
    "returnType" : "String",
    "comment" : "\n         * Render a set of property bits ({@code PROPERTY_*}) as a human readable string.\n         *\n         * @param properties A property bit field.\n         * @return A human readable string representation.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getTelecomCallId()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Uri getHandle()",
    "returnType" : "Uri",
    "comment" : "\n         * @return The handle (e.g., phone number) to which the {@code Call} is currently\n         * connected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getHandlePresentation()",
    "returnType" : "int",
    "comment" : "\n         * @return The presentation requirements for the handle. See\n         * {@link TelecomManager} for valid values.\n         ",
    "links" : [ "TelecomManager" ]
  }, {
    "name" : "public String getCallerDisplayName()",
    "returnType" : "String",
    "comment" : "\n         * The display name for the caller.\n         * <p>\n         * This is the name as reported by the {@link ConnectionService} associated with this call.\n         *\n         * @return The display name for the caller.\n         ",
    "links" : [ "ConnectionService" ]
  }, {
    "name" : "public int getCallerDisplayNamePresentation()",
    "returnType" : "int",
    "comment" : "\n         * @return The presentation requirements for the caller display name. See\n         * {@link TelecomManager} for valid values.\n         ",
    "links" : [ "TelecomManager" ]
  }, {
    "name" : "public PhoneAccountHandle getAccountHandle()",
    "returnType" : "PhoneAccountHandle",
    "comment" : "\n         * @return The {@code PhoneAccountHandle} whereby the {@code Call} is currently being\n         * routed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCallCapabilities()",
    "returnType" : "int",
    "comment" : "\n         * @return A bitmask of the capabilities of the {@code Call}, as defined by the various\n         *         {@code CAPABILITY_*} constants in this class.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCallProperties()",
    "returnType" : "int",
    "comment" : "\n         * @return A bitmask of the properties of the {@code Call}, as defined by the various\n         *         {@code PROPERTY_*} constants in this class.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedAudioRoutes()",
    "returnType" : "int",
    "comment" : "\n         * @return a bitmask of the audio routes available for the call.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public DisconnectCause getDisconnectCause()",
    "returnType" : "DisconnectCause",
    "comment" : "\n         * @return For a {@link #STATE_DISCONNECTED} {@code Call}, the disconnect cause expressed\n         * by {@link android.telecom.DisconnectCause}.\n         ",
    "links" : [ "#STATE_DISCONNECTED", "android.telecom.DisconnectCause" ]
  }, {
    "name" : "public final long getConnectTimeMillis()",
    "returnType" : "long",
    "comment" : "\n         * Returns the time the {@link Call} connected (i.e. became active).  This information is\n         * updated periodically, but user interfaces should not rely on this to display the \"call\n         * time clock\".  For the time when the call was first added to Telecom, see\n         * {@link #getCreationTimeMillis()}.\n         *\n         * @return The time the {@link Call} connected in milliseconds since the epoch.\n         ",
    "links" : [ "Call", "#getCreationTimeMillis", "Call" ]
  }, {
    "name" : "public GatewayInfo getGatewayInfo()",
    "returnType" : "GatewayInfo",
    "comment" : "\n         * @return Information about any calling gateway the {@code Call} may be using.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVideoState()",
    "returnType" : "int",
    "comment" : "\n         * @return The video state of the {@code Call}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public StatusHints getStatusHints()",
    "returnType" : "StatusHints",
    "comment" : "\n         * @return The current {@link android.telecom.StatusHints}, or {@code null} if none\n         * have been set.\n         ",
    "links" : [ "android.telecom.StatusHints" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n         * @return The extras associated with this call.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getIntentExtras()",
    "returnType" : "Bundle",
    "comment" : "\n         * @return The extras used with the original intent to place this call.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getCreationTimeMillis()",
    "returnType" : "long",
    "comment" : "\n         * Returns the time when the call was first created and added to Telecom.  This is the same\n         * time that is logged as the start time in the Call Log (see\n         * {@link android.provider.CallLog.Calls#DATE}).  To determine when the call was connected\n         * (became active), see {@link #getConnectTimeMillis()}.\n         *\n         * @return The creation time of the call, in millis since the epoch.\n         ",
    "links" : [ "android.provider.CallLog.Calls#DATE", "#getConnectTimeMillis" ]
  }, {
    "name" : "public String getContactDisplayName()",
    "returnType" : "String",
    "comment" : "\n         * Returns the name of the caller on the remote end, as derived from a\n         * {@link android.provider.ContactsContract} lookup of the call's handle.\n         * @return The name of the caller, or {@code null} if the lookup is not yet complete, if\n         *         there's no contacts entry for the caller, or if the {@link InCallService} does\n         *         not hold the {@link android.Manifest.permission#READ_CONTACTS} permission.\n         ",
    "links" : [ "android.provider.ContactsContract", "InCallService", "android.Manifest.permission#READ_CONTACTS" ]
  }, {
    "name" : "public int getCallDirection()",
    "returnType" : "int",
    "comment" : "\n         * Indicates whether the call is an incoming or outgoing call.\n         * @return The call's direction.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCallerNumberVerificationStatus()",
    "returnType" : "int",
    "comment" : "\n         * Gets the verification status for the phone number of an incoming call as identified in\n         * ATIS-1000082.\n         * @return the verification status.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Details createFromParcelableCall(ParcelableCall parcelableCall)",
    "returnType" : "Details",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DIRECTION_UNKNOWN", "DIRECTION_INCOMING", "DIRECTION_OUTGOING", "CAPABILITY_HOLD", "CAPABILITY_SUPPORT_HOLD", "CAPABILITY_MERGE_CONFERENCE", "CAPABILITY_SWAP_CONFERENCE", "CAPABILITY_UNUSED_1", "CAPABILITY_RESPOND_VIA_TEXT", "CAPABILITY_MUTE", "CAPABILITY_MANAGE_CONFERENCE", "CAPABILITY_SUPPORTS_VT_LOCAL_RX", "CAPABILITY_SUPPORTS_VT_LOCAL_TX", "CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL", "CAPABILITY_SUPPORTS_VT_REMOTE_RX", "CAPABILITY_SUPPORTS_VT_REMOTE_TX", "CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL", "CAPABILITY_SEPARATE_FROM_CONFERENCE", "CAPABILITY_DISCONNECT_FROM_CONFERENCE", "CAPABILITY_SPEED_UP_MT_AUDIO", "CAPABILITY_CAN_UPGRADE_TO_VIDEO", "CAPABILITY_CAN_PAUSE_VIDEO", "CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION", "CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO", "CAPABILITY_CAN_PULL_CALL", "CAPABILITY_SUPPORT_DEFLECT", "CAPABILITY_ADD_PARTICIPANT", "CAPABILITY_TRANSFER", "CAPABILITY_TRANSFER_CONSULTATIVE", "PROPERTY_CONFERENCE", "PROPERTY_GENERIC_CONFERENCE", "PROPERTY_EMERGENCY_CALLBACK_MODE", "PROPERTY_WIFI", "PROPERTY_HIGH_DEF_AUDIO", "PROPERTY_ENTERPRISE_CALL", "PROPERTY_IS_EXTERNAL_CALL", "PROPERTY_HAS_CDMA_VOICE_PRIVACY", "PROPERTY_SELF_MANAGED", "PROPERTY_ASSISTED_DIALING", "PROPERTY_RTT", "PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL", "PROPERTY_VOIP_AUDIO_MODE", "PROPERTY_IS_ADHOC_CONFERENCE", "mTelecomCallId", "mHandle", "mHandlePresentation", "mCallerDisplayName", "mCallerDisplayNamePresentation", "mAccountHandle", "mCallCapabilities", "mCallProperties", "mSupportedAudioRoutes", "mDisconnectCause", "mConnectTimeMillis", "mGatewayInfo", "mVideoState", "mStatusHints", "mExtras", "mIntentExtras", "mCreationTimeMillis", "mContactDisplayName", "mCallDirection", "mCallerNumberVerificationStatus" ],
  "methodNames" : [ "public static boolean can(int capabilities, int capability)", "public boolean can(int capability)", "public static String capabilitiesToString(int capabilities)", "public static boolean hasProperty(int properties, int property)", "public boolean hasProperty(int property)", "public static String propertiesToString(int properties)", "public String getTelecomCallId()", "public Uri getHandle()", "public int getHandlePresentation()", "public String getCallerDisplayName()", "public int getCallerDisplayNamePresentation()", "public PhoneAccountHandle getAccountHandle()", "public int getCallCapabilities()", "public int getCallProperties()", "public int getSupportedAudioRoutes()", "public DisconnectCause getDisconnectCause()", "public final long getConnectTimeMillis()", "public GatewayInfo getGatewayInfo()", "public int getVideoState()", "public StatusHints getStatusHints()", "public Bundle getExtras()", "public Bundle getIntentExtras()", "public long getCreationTimeMillis()", "public String getContactDisplayName()", "public int getCallDirection()", "public int getCallerNumberVerificationStatus()", "public boolean equals(Object o)", "public int hashCode()", "public static Details createFromParcelableCall(ParcelableCall parcelableCall)", "public String toString()" ]
}