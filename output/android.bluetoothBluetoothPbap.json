{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothPbap.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothPbap",
  "comment" : "\n * Public API for controlling the Bluetooth Pbap Service. This includes\n * Bluetooth Phone book Access profile.\n * BluetoothPbap is a proxy object for controlling the Bluetooth Pbap\n * Service via IPC.\n *\n * Creating a BluetoothPbap object will create a binding with the\n * BluetoothPbap service. Users of this object should call close() when they\n * are finished with the BluetoothPbap, so that this proxy object can unbind\n * from the service.\n *\n * This BluetoothPbap object is not immediately bound to the\n * BluetoothPbap service. Use the ServiceListener interface to obtain a\n * notification when it is bound, this is especially important if you wish to\n * immediately call methods on BluetoothPbap after construction.\n *\n * To get an instance of the BluetoothPbap class, you can call\n * {@link BluetoothAdapter#getProfileProxy(Context, ServiceListener, int)} with the final param\n * being {@link BluetoothProfile#PBAP}. The ServiceListener should be able to get the instance of\n * BluetoothPbap in {@link android.bluetooth.BluetoothProfile.ServiceListener#onServiceConnected}.\n *\n * Android only supports one connected Bluetooth Pce at a time.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the PBAP\n     * profile.\n     *\n     * <p>This intent will have 3 extras:\n     * <ul>\n     * <li> {@link BluetoothProfile#EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link BluetoothProfile#EXTRA_PREVIOUS_STATE}- The previous state of the profile. </li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * </ul>\n     * <p>{@link BluetoothProfile#EXTRA_STATE} or {@link BluetoothProfile#EXTRA_PREVIOUS_STATE}\n     *  can be any of {@link BluetoothProfile#STATE_DISCONNECTED},\n     *  {@link BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_CONNECTED},\n     *  {@link BluetoothProfile#STATE_DISCONNECTING}.\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothProfile#EXTRA_STATE", "BluetoothProfile#EXTRA_PREVIOUS_STATE", "BluetoothDevice#EXTRA_DEVICE", "BluetoothProfile#EXTRA_STATE", "BluetoothProfile#EXTRA_PREVIOUS_STATE", "BluetoothProfile#STATE_DISCONNECTED", "BluetoothProfile#STATE_CONNECTING", "BluetoothProfile#STATE_CONNECTED", "BluetoothProfile#STATE_DISCONNECTING", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothPbap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceListener",
    "type" : "ServiceListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELED",
    "type" : "int",
    "comment" : "\n     * Connection canceled before completion.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mBluetoothStateChangeCallback",
    "type" : "IBluetoothStateChangeCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "ServiceConnection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean doBind()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doUnbind()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service.\n     * Other public functions of BluetoothPbap will return default error\n     * results once close() has been called. Multiple invocations of close()\n     * are ok.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile and tries to disconnect it if connectionPolicy is\n     * {@link BluetoothProfile#CONNECTION_POLICY_FORBIDDEN}\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of:\n     * {@link BluetoothProfile#CONNECTION_POLICY_ALLOWED},\n     * {@link BluetoothProfile#CONNECTION_POLICY_FORBIDDEN},\n     * {@link BluetoothProfile#CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothProfile#CONNECTION_POLICY_FORBIDDEN", "BluetoothProfile#CONNECTION_POLICY_ALLOWED", "BluetoothProfile#CONNECTION_POLICY_FORBIDDEN", "BluetoothProfile#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Disconnects the current Pbap client (PCE). Currently this call blocks,\n     * it may soon be made asynchronous. Returns false if this proxy object is\n     * not currently connected to the Pbap service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "ACTION_CONNECTION_STATE_CHANGED", "mService", "mContext", "mServiceListener", "mAdapter", "RESULT_FAILURE", "RESULT_SUCCESS", "RESULT_CANCELED", "mBluetoothStateChangeCallback", "mConnection" ],
  "methodNames" : [ " boolean doBind()", "private void doUnbind()", "protected void finalize() throws Throwable", "public synchronized void close()", "public List<BluetoothDevice> getConnectedDevices()", "public int getConnectionState(@NonNull BluetoothDevice device)", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public boolean disconnect(BluetoothDevice device)", "private boolean isEnabled()", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ]
}