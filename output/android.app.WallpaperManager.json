{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/WallpaperManager.java",
  "packageName" : "android.app",
  "className" : "WallpaperManager",
  "comment" : "\n * Provides access to the system wallpaper. With WallpaperManager, you can\n * get the current wallpaper, get the desired dimensions for the wallpaper, set\n * the wallpaper, and more.\n *\n * <p> An app can check whether wallpapers are supported for the current user, by calling\n * {@link #isWallpaperSupported()}, and whether setting of wallpapers is allowed, by calling\n * {@link #isSetWallpaperAllowed()}.\n ",
  "links" : [ "#isSetWallpaperAllowed()", "#isWallpaperSupported()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RETURN_DEFAULT_ON_SECURITY_EXCEPTION",
    "type" : "long",
    "comment" : "\n     * Trying to read the wallpaper file or bitmap in T will return\n     * the default wallpaper bitmap/file instead of throwing a SecurityException.\n     ",
    "links" : [ ]
  }, {
    "name" : "THROW_ON_SECURITY_EXCEPTION",
    "type" : "long",
    "comment" : "\n     * In U and later, attempting to read the wallpaper file or bitmap will throw an exception,\n     * (except with the READ_WALLPAPER_INTERNAL permission).\n     ",
    "links" : [ ]
  }, {
    "name" : "mWallpaperXStep",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWallpaperYStep",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_COLOR_BOUNDS",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROP_WALLPAPER",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PROP_LOCK_WALLPAPER",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PROP_WALLPAPER_COMPONENT",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "VALUE_CMF_COLOR",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "WALLPAPER_CMF_PATH",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CROP_AND_SET_WALLPAPER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show settings for choosing wallpaper. Do not use directly to construct\n     * an intent; instead, use {@link #getCropAndSetWallpaperIntent}.\n     * <p>Input:  {@link Intent#getData} is the URI of the image to crop and set as wallpaper.\n     * <p>Output: RESULT_OK if user decided to crop/set the wallpaper, RESULT_CANCEL otherwise\n     * Activities that support this intent should specify a MIME filter of \"image/*\"\n     ",
    "links" : [ "#getCropAndSetWallpaperIntent", "android.content.Intent#getData" ]
  }, {
    "name" : "ACTION_LIVE_WALLPAPER_CHOOSER",
    "type" : "String",
    "comment" : "\n     * Launch an activity for the user to pick the current global live\n     * wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHANGE_LIVE_WALLPAPER",
    "type" : "String",
    "comment" : "\n     * Directly launch live wallpaper preview, allowing the user to immediately\n     * confirm to switch to a specific live wallpaper.  You must specify\n     * {@link #EXTRA_LIVE_WALLPAPER_COMPONENT} with the ComponentName of\n     * a live wallpaper component that is to be shown.\n     ",
    "links" : [ "#EXTRA_LIVE_WALLPAPER_COMPONENT" ]
  }, {
    "name" : "EXTRA_LIVE_WALLPAPER_COMPONENT",
    "type" : "String",
    "comment" : "\n     * Extra in {@link #ACTION_CHANGE_LIVE_WALLPAPER} that specifies the\n     * ComponentName of a live wallpaper that should be shown as a preview,\n     * for the user to confirm.\n     ",
    "links" : [ "#ACTION_CHANGE_LIVE_WALLPAPER" ]
  }, {
    "name" : "WALLPAPER_PREVIEW_META_DATA",
    "type" : "String",
    "comment" : "\n     * Manifest entry for activities that respond to {@link Intent#ACTION_SET_WALLPAPER}\n     * which allows them to provide a custom large icon associated with this action.\n     ",
    "links" : [ "android.content.Intent#ACTION_SET_WALLPAPER" ]
  }, {
    "name" : "COMMAND_TAP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by the wallpaper\n     * host when the user taps on an empty area (not performing an action\n     * in the host).  The x and y arguments are the location of the tap in\n     * screen coordinates.\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_SECONDARY_TAP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by the wallpaper\n     * host when the user releases a secondary pointer on an empty area\n     * (not performing an action in the host).  The x and y arguments are\n     * the location of the secondary tap in screen coordinates.\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_DROP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by the wallpaper\n     * host when the user drops an object into an area of the host.  The x\n     * and y arguments are the location of the drop.\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_WAKING_UP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by System UI when the device is waking\n     * up. The x and y arguments are a location (possibly very roughly) corresponding to the action\n     * that caused the device to wake up. For example, if the power button was pressed, this will be\n     * the location on the screen nearest the power button.\n     *\n     * If the location is unknown or not applicable, x and y will be -1.\n     *\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_KEYGUARD_GOING_AWAY",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by System UI when the device keyguard\n     * starts going away.\n     * This command is triggered by {@link android.app.IActivityTaskManager#keyguardGoingAway(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand", "android.app.IActivityTaskManager#keyguardGoingAway(int)" ]
  }, {
    "name" : "COMMAND_GOING_TO_SLEEP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by System UI when the device is going to\n     * sleep. The x and y arguments are a location (possibly very roughly) corresponding to the\n     * action that caused the device to go to sleep. For example, if the power button was pressed,\n     * this will be the location on the screen nearest the power button.\n     *\n     * If the location is unknown or not applicable, x and y will be -1.\n     *\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_DISPLAY_SWITCH",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported when a physical display switch event\n     * happens, e.g. fold and unfold.\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_REAPPLY",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported when the wallpaper that was already\n     * set is re-applied by the user.\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_FREEZE",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported when the live wallpaper needs to be\n     * frozen.\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_UNFREEZE",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported when the live wallapper doesn't need\n     * to be frozen anymore.\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "EXTRA_NEW_WALLPAPER_ID",
    "type" : "String",
    "comment" : "\n     * Extra passed back from setWallpaper() giving the new wallpaper's assigned ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FROM_FOREGROUND_APP",
    "type" : "String",
    "comment" : "\n     * Extra passed on {@link Intent.ACTION_WALLPAPER_CHANGED} indicating if wallpaper was set from\n     * a foreground app.\n     * @hide\n     ",
    "links" : [ "Intent.ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "ORIENTATION_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PORTRAIT",
    "type" : "int",
    "comment" : "\n     * Portrait orientation of most screens\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LANDSCAPE",
    "type" : "int",
    "comment" : "\n     * Landscape orientation of most screens\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_PORTRAIT",
    "type" : "int",
    "comment" : "\n     * Portrait orientation with similar width and height (e.g. the inner screen of a foldable)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SQUARE_LANDSCAPE",
    "type" : "int",
    "comment" : "\n     * Landscape orientation with similar width and height (e.g. the inner screen of a foldable)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Flag: set or retrieve the general system wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LOCK",
    "type" : "int",
    "comment" : "\n     * Flag: set or retrieve the lock-screen-specific wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "sSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sGlobals",
    "type" : "Globals",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWcgEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCmProxy",
    "type" : "ColorManagementProxy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIsMultiCropEnabled",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getOrientation(Point screenSize)",
    "returnType" : "int",
    "comment" : "\n     * Converts a (width, height) screen size to a {@link ScreenOrientation}.\n     * @param screenSize the dimensions of a screen\n     * @return the corresponding {@link ScreenOrientation}.\n     * @hide\n     ",
    "links" : [ "ScreenOrientation" ]
  }, {
    "name" : "public static int getRotatedOrientation(@ScreenOrientation int orientation)",
    "returnType" : "int",
    "comment" : "\n     * Get the 90° rotation of a given orientation\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static void initGlobals(IWallpaperManager service, Looper looper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static WallpaperManager getInstance(Context context)",
    "returnType" : "WallpaperManager",
    "comment" : "\n     * Retrieve a WallpaperManager associated with the given Context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IWallpaperManager getIWallpaperManager()",
    "returnType" : "IWallpaperManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLockscreenLiveWallpaperEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * TODO (b/305908217) remove\n     * Temporary method for project b/197814683.\n     * @return true if the lockscreen wallpaper always uses a wallpaperService, not a static image\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMultiCropEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Temporary method for project b/270726737\n     * @return true if the wallpaper supports different crops for different display dimensions\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldEnableWideColorGamut()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether wcg (Wide Color Gamut) should be enabled.\n     * <p>\n     * Some devices lack of capability of mixed color spaces composition,\n     * enable wcg on such devices might cause memory or battery concern.\n     * <p>\n     * Therefore, in addition to {@link Configuration#isScreenWideColorGamut()},\n     * we also take mixed color spaces composition (config_enableWcgMode) into account.\n     *\n     * @see Configuration#isScreenWideColorGamut()\n     * @return True if wcg should be enabled for this device.\n     * @hide\n     ",
    "links" : [ "android.content.res.Configuration#isScreenWideColorGamut()" ]
  }, {
    "name" : "public Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong>\n     * <ul>\n     *     <li>Up to Android 12, this method requires the\n     *     {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.</li>\n     *     <li>Starting in Android 13, directly accessing the wallpaper is not possible anymore,\n     *     instead the default system wallpaper is returned\n     *     (some versions of Android 13 may throw a {@code SecurityException}).</li>\n     *     <li>From Android 14, this method should not be used\n     *     and will always throw a {@code SecurityException}.</li>\n     *     <li> Apps with {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE}\n     *     can still access the real wallpaper on all versions. </li>\n     * </ul>\n     *\n     * <p>\n     * Equivalent to {@link #getDrawable(int)} with {@code which=}{@link #FLAG_SYSTEM}.\n     * </p>\n     *\n     * @return A Drawable object for the requested wallpaper.\n     *\n     * @see #getDrawable(int)\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "android.Manifest.permission#READ_EXTERNAL_STORAGE", "#FLAG_SYSTEM", "#getDrawable(int)" ]
  }, {
    "name" : "public Drawable getDrawable(@SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong> only apps with\n     * {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} should use this method.\n     * Otherwise, a {@code SecurityException} will be thrown.\n     *\n     * <p>\n     * Retrieve the requested wallpaper for the specified wallpaper type if the wallpaper is not\n     * a live wallpaper. This method should not be used to display the user wallpaper on an app:\n     * {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER} should be used instead.\n     * </p>\n     * <p>\n     * When called with {@code which=}{@link #FLAG_SYSTEM},\n     * if there is a live wallpaper on home screen, the built-in default wallpaper is returned.\n     * </p>\n     * <p>\n     * When called with {@code which=}{@link #FLAG_LOCK}, if there is a live wallpaper\n     * on lock screen, or if the lock screen and home screen share the same wallpaper engine,\n     * {@code null} is returned.\n     * </p>\n     * <p>\n     * {@link #getWallpaperInfo(int)} can be used to determine whether there is a live wallpaper\n     * on a specified screen type.\n     * </p>\n     *\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type. Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return A Drawable object for the requested wallpaper.\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "#getWallpaperInfo(int)", "android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public Drawable getBuiltInDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Obtain a drawable for the built-in static system wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(@SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * Obtain a drawable for the specified built-in static system wallpaper.\n     *\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type.  Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return A Drawable presenting the specified wallpaper image, or {@code null}\n     *     if no built-in default image for that wallpaper type exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns a drawable for the system built-in static wallpaper. Based on the parameters, the\n     * drawable can be cropped and scaled\n     *\n     * @param outWidth The width of the returned drawable\n     * @param outWidth The height of the returned drawable\n     * @param scaleToFit If true, scale the wallpaper down rather than just cropping it\n     * @param horizontalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned\n     * @param verticalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned\n     * @return A Drawable presenting the built-in default system wallpaper image,\n     *        or {@code null} if no such default image is defined on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, @SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns a drawable for the built-in static wallpaper of the specified type.  Based on the\n     * parameters, the drawable can be cropped and scaled.\n     *\n     * @param outWidth The width of the returned drawable\n     * @param outWidth The height of the returned drawable\n     * @param scaleToFit If true, scale the wallpaper down rather than just cropping it\n     * @param horizontalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned\n     * @param verticalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type.  Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return A Drawable presenting the built-in default wallpaper image of the given type,\n     *        or {@code null} if no default image of that type is defined on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static RectF getMaxCropRect(int inWidth, int inHeight, int outWidth, int outHeight, float horizontalAlignment, float verticalAlignment)",
    "returnType" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong>\n     * <ul>\n     *     <li>Up to Android 12, this method requires the\n     *     {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.</li>\n     *     <li>Starting in Android 13, directly accessing the wallpaper is not possible anymore,\n     *     instead the default system wallpaper is returned\n     *     (some versions of Android 13 may throw a {@code SecurityException}).</li>\n     *     <li>From Android 14, this method should not be used\n     *     and will always throw a {@code SecurityException}.</li>\n     *     <li> Apps with {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE}\n     *     can still access the real wallpaper on all versions. </li>\n     * </ul>\n     *\n     * <p>\n     * Equivalent to {@link #getDrawable()}.\n     * </p>\n     *\n     * @return A Drawable object for the requested wallpaper.\n     *\n     * @see #getDrawable()\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "#getDrawable()", "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "android.Manifest.permission#READ_EXTERNAL_STORAGE" ]
  }, {
    "name" : "public Drawable peekDrawable(@SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong> only apps with\n     * {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} should use this method.\n     * Otherwise, a {@code SecurityException} will be thrown.\n     *\n     * <p>\n     * Equivalent to {@link #getDrawable(int)}.\n     * </p>\n     *\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type. Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return A Drawable object for the requested wallpaper.\n     *\n     * @see #getDrawable(int)\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "#getDrawable(int)" ]
  }, {
    "name" : "public Drawable getFastDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong>\n     * <ul>\n     *     <li>Up to Android 12, this method requires the\n     *     {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.</li>\n     *     <li>Starting in Android 13, directly accessing the wallpaper is not possible anymore,\n     *     instead the default wallpaper is returned\n     *     (some versions of Android 13 may throw a {@code SecurityException}).</li>\n     *     <li>From Android 14, this method should not be used\n     *     and will always throw a {@code SecurityException}.</li>\n     *     <li> Apps with {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE}\n     *     can still access the real wallpaper on all versions. </li>\n     * </ul>\n     *\n     * <p>\n     * Equivalent to {@link #getFastDrawable(int)} with {@code which=}{@link #FLAG_SYSTEM}.\n     * </p>\n     *\n     * @return A Drawable object for the requested wallpaper.\n     *\n     * @see #getFastDrawable(int)\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "#getFastDrawable(int)", "android.Manifest.permission#READ_EXTERNAL_STORAGE", "#FLAG_SYSTEM" ]
  }, {
    "name" : "public Drawable getFastDrawable(@SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong> only apps with\n     * {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} should use this method.\n     * Otherwise, a {@code SecurityException} will be thrown.\n     *\n     * Like {@link #getDrawable(int)}, but the returned Drawable has a number\n     * of limitations to reduce its overhead as much as possible. It will\n     * never scale the wallpaper (only centering it if the requested bounds\n     * do match the bitmap bounds, which should not be typical), doesn't\n     * allow setting an alpha, color filter, or other attributes, etc.  The\n     * bounds of the returned drawable will be initialized to the same bounds\n     * as the wallpaper, so normally you will not need to touch it.  The\n     * drawable also assumes that it will be used in a context running in\n     * the same density as the screen (not in density compatibility mode).\n     *\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type.  Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return An optimized Drawable object for the requested wallpaper, or {@code null}\n     *     in some cases as specified in {@link #getDrawable(int)}.\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "#getDrawable(int)" ]
  }, {
    "name" : "public Drawable peekFastDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong> only apps with\n     * {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} should use this method.\n     * Otherwise, a {@code SecurityException} will be thrown.\n     *\n     * <p>\n     * Equivalent to {@link #getFastDrawable()}.\n     * </p>\n     *\n     * @return An optimized Drawable object for the requested wallpaper.\n     *\n     * @see #getFastDrawable()\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "#getFastDrawable()" ]
  }, {
    "name" : "public Drawable peekFastDrawable(@SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * <strong> Important note: </strong> only apps with\n     * {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE}\n     * should use this method. Otherwise, a {@code SecurityException} will be thrown.\n     *\n     * <p>\n     * Equivalent to {@link #getFastDrawable(int)}.\n     * </p>\n     *\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type.  Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return An optimized Drawable object for the requested wallpaper.\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "#getFastDrawable(int)" ]
  }, {
    "name" : "public boolean wallpaperSupportsWcg(int which)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the wallpaper supports Wide Color Gamut or not. This is only meant to be used by\n     * ImageWallpaper, and will always return false if the wallpaper for the specified screen\n     * is not an ImageWallpaper. This will also return false when called with {@link #FLAG_LOCK} if\n     * the lock and home screen share the same wallpaper engine.\n     *\n     * @param which The wallpaper whose image file is to be retrieved. Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or {@link #FLAG_LOCK}.\n     * @return true when supported.\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     * @hide\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable()} but returns a Bitmap with default {@link Bitmap.Config}.\n     *\n     * @hide\n     ",
    "links" : [ "#getDrawable()", "Bitmap.Config" ]
  }, {
    "name" : "public Bitmap getBitmap(boolean hardware)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable()} but returns a Bitmap.\n     *\n     * @param hardware Asks for a hardware backed bitmap.\n     * @see Bitmap.Config#HARDWARE\n     * @hide\n     ",
    "links" : [ "#getDrawable()" ]
  }, {
    "name" : "public Bitmap getBitmap(boolean hardware, @SetWallpaperFlags int which)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable(int)} but returns a Bitmap.\n     *\n     * @param hardware Asks for a hardware backed bitmap.\n     * @param which Specifies home or lock screen\n     * @see Bitmap.Config#HARDWARE\n     * @hide\n     ",
    "links" : [ "#getDrawable(int)" ]
  }, {
    "name" : "public Bitmap getBitmapAsUser(int userId, boolean hardware)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable()} but returns a Bitmap for the provided user.\n     *\n     * @hide\n     ",
    "links" : [ "#getDrawable()" ]
  }, {
    "name" : "public Bitmap getBitmapAsUser(int userId, boolean hardware, @SetWallpaperFlags int which)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable(int)} but returns a Bitmap for the provided user.\n     *\n     * @param which Specifies home or lock screen\n     * @hide\n     ",
    "links" : [ "#getDrawable(int)" ]
  }, {
    "name" : "public Bitmap getBitmapAsUser(int userId, boolean hardware, @SetWallpaperFlags int which, boolean returnDefault)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Overload of {@link #getBitmapAsUser(int, boolean, int)} with a returnDefault argument.\n     *\n     * @param returnDefault If true, return the default static wallpaper if no custom static\n     *                      wallpaper is set on the specified screen.\n     *                      If false, return {@code null} in that case.\n     * @hide\n     ",
    "links" : [ "#getBitmapAsUser(int" ]
  }, {
    "name" : "public Rect peekBitmapDimensions()",
    "returnType" : "Rect",
    "comment" : "\n     * Peek the dimensions of system wallpaper of the user without decoding it.\n     * Equivalent to {@link #peekBitmapDimensions(int)} with {@code which=}{@link #FLAG_SYSTEM}.\n     *\n     * @return the dimensions of system wallpaper\n     * @hide\n     ",
    "links" : [ "#peekBitmapDimensions(int)", "#FLAG_SYSTEM" ]
  }, {
    "name" : "public Rect peekBitmapDimensions(@SetWallpaperFlags int which)",
    "returnType" : "Rect",
    "comment" : "\n     * Peek the dimensions of given wallpaper of the user without decoding it.\n     *\n     * <p>\n     * When called with {@code which=}{@link #FLAG_SYSTEM}, if there is a live wallpaper on\n     * home screen, the built-in default wallpaper dimensions are returned.\n     * </p>\n     * <p>\n     * When called with {@code which=}{@link #FLAG_LOCK}, if there is a live wallpaper\n     * on lock screen, or if the lock screen and home screen share the same wallpaper engine,\n     * {@code null} is returned.\n     * </p>\n     * <p>\n     * {@link #getWallpaperInfo(int)} can be used to determine whether there is a live wallpaper\n     * on a specified screen type.\n     * </p>\n     *\n     * @param which Wallpaper type. Must be either {@link #FLAG_SYSTEM} or {@link #FLAG_LOCK}.\n     * @return the dimensions of specified wallpaper\n     * @hide\n     ",
    "links" : [ "#getWallpaperInfo(int)", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public Rect peekBitmapDimensions(@SetWallpaperFlags int which, boolean returnDefault)",
    "returnType" : "Rect",
    "comment" : "\n     * Overload of {@link #peekBitmapDimensions(int)} with a returnDefault argument.\n     *\n     * @param which Wallpaper type. Must be either {@link #FLAG_SYSTEM} or {@link #FLAG_LOCK}.\n     * @param returnDefault If true, always return the default static wallpaper dimensions\n     *                      if no custom static wallpaper is set on the specified screen.\n     *                      If false, always return {@code null} in that case.\n     * @return the dimensions of specified wallpaper\n     * @hide\n     ",
    "links" : [ "#peekBitmapDimensions(int)", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public List<Rect> getBitmapCrops(@NonNull List<Point> displaySizes, @SetWallpaperFlags int which, boolean originalBitmap)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * For the current user, given a list of display sizes, return a list of rectangles representing\n     * the area of the current wallpaper that would be shown for each of these sizes.\n     *\n     * @param displaySizes the display sizes.\n     * @param which wallpaper type. Must be either {@link #FLAG_SYSTEM} or {@link #FLAG_LOCK}.\n     * @param originalBitmap If true, return areas relative to the original bitmap.\n     *                   If false, return areas relative to the cropped bitmap.\n     * @return A List of Rect where the Rect is within the cropped/original bitmap, and corresponds\n     *          to what is displayed. The Rect may have a larger width/height ratio than the screen\n     *          due to parallax. Return {@code null} if the wallpaper is not an ImageWallpaper.\n     *          Also return {@code null} when called with which={@link #FLAG_LOCK} if there is a\n     *          shared home + lock wallpaper.\n     * @hide\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public List<Rect> getBitmapCrops(@NonNull Point bitmapSize, @NonNull List<Point> displaySizes, @Nullable Map<Point, Rect> cropHints)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * For preview purposes.\n     * Return how a bitmap of a given size would be cropped for a given list of display sizes, if\n     * it was set as wallpaper via {@link #setBitmapWithCrops(Bitmap, Map, boolean, int)} or\n     * {@link #setStreamWithCrops(InputStream, Map, boolean, int)}.\n     *\n     * @return A List of Rect where the Rect is within the bitmap, and corresponds to what is\n     *          displayed for each display size. The Rect may have a larger width/height ratio than\n     *          the display due to parallax.\n     * @hide\n     ",
    "links" : [ "#setStreamWithCrops(InputStream", "#setBitmapWithCrops(Bitmap" ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(@NonNull Bitmap bitmap, @Nullable Map<Point, Rect> cropHints)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * For preview purposes.\n     * Compute the wallpaper colors of the given bitmap, if it was set as wallpaper via\n     * {@link #setBitmapWithCrops(Bitmap, Map, boolean, int)} or\n     * {@link #setStreamWithCrops(InputStream, Map, boolean, int)}.\n     *  Return {@code null} if an error occurred and the colors could not be computed.\n     *\n     * @hide\n     ",
    "links" : [ "#setStreamWithCrops(InputStream", "#setBitmapWithCrops(Bitmap" ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * <strong> Important note: </strong>\n     * <ul>\n     *     <li>Up to Android 12, this method requires the\n     *     {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.</li>\n     *     <li>Starting in Android 13, directly accessing the wallpaper is not possible anymore,\n     *     instead the default system wallpaper is returned\n     *     (some versions of Android 13 may throw a {@code SecurityException}).</li>\n     *     <li>From Android 14, this method should not be used\n     *     and will always throw a {@code SecurityException}.</li>\n     *     <li> Apps with {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE}\n     *     can still access the real wallpaper on all versions. </li>\n     * </ul>\n     * <br>\n     *\n     * Get an open, readable file descriptor to the given wallpaper image file.\n     * The caller is responsible for closing the file descriptor when done ingesting the file.\n     *\n     * <p>If no lock-specific wallpaper has been configured for the given user, then\n     * this method will return {@code null} when requesting {@link #FLAG_LOCK} rather than\n     * returning the system wallpaper's image file.\n     *\n     * @param which The wallpaper whose image file is to be retrieved.  Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @return An open, readable file descriptor to the requested wallpaper image file;\n     *     or {@code null} if no such wallpaper is configured or if the calling app does\n     *     not have permission to read the current wallpaper.\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @throws SecurityException as described in the note\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_EXTERNAL_STORAGE", "android.Manifest.permission#READ_EXTERNAL_STORAGE", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener to get notified when the wallpaper colors change.\n     * @param listener A listener to register\n     * @param handler Where to call it from. Will be called from the main thread\n     *                if null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener to get notified when the wallpaper colors change\n     * @param listener A listener to register\n     * @param handler Where to call it from. Will be called from the main thread\n     *                if null.\n     * @param userId Owner of the wallpaper or UserHandle.USER_ALL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening to color updates.\n     * @param callback A callback to unsubscribe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening to color updates.\n     * @param callback A callback to unsubscribe.\n     * @param userId Owner of the wallpaper or UserHandle.USER_ALL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(int which)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * Get the primary colors of a wallpaper.\n     *\n     * <p>This method can return {@code null} when:\n     * <ul>\n     * <li>Colors are still being processed by the system.</li>\n     * <li>The user has chosen to use a live wallpaper:  live wallpapers might not\n     * implement\n     * {@link android.service.wallpaper.WallpaperService.Engine#onComputeColors()\n     *     WallpaperService.Engine#onComputeColors()}.</li>\n     * </ul>\n     * <p>Please note that this API will go through IPC and may take some time to\n     * calculate the wallpaper color, which could block the caller thread, so it is\n     * not recommended to call this in the UI thread.</p>\n     *\n     * @param which Wallpaper type. Must be either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @return Current {@link WallpaperColors} or null if colors are unknown.\n     * @see #addOnColorsChangedListener(OnColorsChangedListener, Handler)\n     ",
    "links" : [ "android.app.WallpaperColors", "android.service.wallpaper.WallpaperService.Engine#onComputeColors()", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(int which, int userId)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * Get the primary colors of the wallpaper configured in the given user.\n     * @param which wallpaper type. Must be either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}\n     * @param userId Owner of the wallpaper.\n     * @return {@link WallpaperColors} or null if colors are unknown.\n     * @hide\n     ",
    "links" : [ "android.app.WallpaperColors", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback, List<RectF> regions, int which) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, int userId)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Version of {@link #getWallpaperFile(int)} that can access the wallpaper data\n     * for a given user.  The caller must hold the INTERACT_ACROSS_USERS_FULL\n     * permission to access another user's wallpaper data.\n     *\n     * @param which The wallpaper whose image file is to be retrieved.  Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @param userId The user or profile whose imagery is to be retrieved\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @hide\n     ",
    "links" : [ "#getWallpaperFile(int)", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, boolean getCropped)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Version of {@link #getWallpaperFile(int)} that allows specifying whether to get the\n     * cropped version of the wallpaper file or the original.\n     *\n     * @param which The wallpaper whose image file is to be retrieved.  Must be a single\n     *    defined kind of wallpaper, either {@link #FLAG_SYSTEM} or {@link #FLAG_LOCK}.\n     * @param getCropped If true the cropped file will be retrieved, if false the original will\n     *                   be retrieved.\n     *\n     * @hide\n     ",
    "links" : [ "#getWallpaperFile(int)", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "private ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, int userId, boolean getCropped)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forgetLoadedWallpaper()",
    "returnType" : "void",
    "comment" : "\n     * Remove all internal references to the last loaded wallpaper.  Useful\n     * for apps that want to reduce memory usage when they only temporarily\n     * need to have the wallpaper.  After calling, the next request for the\n     * wallpaper will require reloading it again from disk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo()",
    "returnType" : "WallpaperInfo",
    "comment" : "\n     * Returns the information about the home screen wallpaper if its current wallpaper is a live\n     * wallpaper component. Otherwise, if the wallpaper is a static image or is not set, or if the\n     * caller doesn't have the appropriate permissions, this returns {@code null}.\n     *\n     * <p>\n     * For devices running Android 13 or earlier, this method requires the\n     * {@link android.Manifest.permission#QUERY_ALL_PACKAGES} permission.\n     * </p>\n     *\n     * <p>\n     * For devices running Android 14 or later, in order to use this, apps should declare a\n     * {@code <queries>} tag with the action {@code \"android.service.wallpaper.WallpaperService\"}.\n     * Otherwise, this method will return {@code null} if the caller doesn't otherwise have\n     * <a href=\"{@docRoot}training/package-visibility\">visibility</a> of the wallpaper package.\n     * </p>\n     ",
    "links" : [ "android.Manifest.permission#QUERY_ALL_PACKAGES" ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfoForUser(int userId)",
    "returnType" : "WallpaperInfo",
    "comment" : "\n     * Returns the information about the home screen wallpaper if its current wallpaper is a live\n     * wallpaper component. Otherwise, if the wallpaper is a static image, this returns null.\n     *\n     * @param userId Owner of the wallpaper.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which)",
    "returnType" : "WallpaperInfo",
    "comment" : "\n     * Returns the information about the designated wallpaper if its current wallpaper is a live\n     * wallpaper component. Otherwise, if the wallpaper is a static image or is not set, or if\n     * the caller doesn't have the appropriate permissions, this returns {@code null}.\n     *\n     * <p>\n     * In order to use this, apps should declare a {@code <queries>} tag with the action\n     * {@code \"android.service.wallpaper.WallpaperService\"}. Otherwise, this method will return\n     * {@code null} if the caller doesn't otherwise have\n     * <a href=\"{@docRoot}training/package-visibility\">visibility</a> of the wallpaper package.\n     * </p>\n     *\n     * @param which Specifies wallpaper to request (home or lock).\n     * @throws IllegalArgumentException if {@code which} is not exactly one of\n     * {{@link #FLAG_SYSTEM},{@link #FLAG_LOCK}}.\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which, int userId)",
    "returnType" : "WallpaperInfo",
    "comment" : "\n     * Returns the information about the designated wallpaper if its current wallpaper is a live\n     * wallpaper component. Otherwise, if the wallpaper is a static image or is not set, or if the\n     * caller doesn't have the appropriate permissions, this returns {@code null}.\n     *\n     * <p>\n     * In order to use this, apps should declare a {@code <queries>} tag\n     * with the action {@code \"android.service.wallpaper.WallpaperService\"}. Otherwise,\n     * this method will return {@code null} if the caller doesn't otherwise have\n     * <a href=\"{@docRoot}training/package-visibility\">visibility</a> of the wallpaper package.\n     * </p>\n     *\n     * @param which Specifies wallpaper to request (home or lock).\n     * @param userId Owner of the wallpaper.\n     * @throws IllegalArgumentException if {@code which} is not exactly one of\n     * {{@link #FLAG_SYSTEM},{@link #FLAG_LOCK}}.\n     * @hide\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperInfoFile()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Get an open, readable file descriptor for the file that contains metadata about the\n     * context user's wallpaper.\n     *\n     * The caller is responsible for closing the file descriptor when done ingesting the file.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperId(@SetWallpaperFlags int which)",
    "returnType" : "int",
    "comment" : "\n     * Get the ID of the current wallpaper of the given kind.  If there is no\n     * such wallpaper configured, returns a negative number.\n     *\n     * <p>Every time the wallpaper image is set, a new ID is assigned to it.\n     * This method allows the caller to determine whether the wallpaper imagery\n     * has changed, regardless of how that change happened.\n     *\n     * @param which The wallpaper whose ID is to be returned.  Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @return The positive numeric ID of the current wallpaper of the given kind,\n     *     or a negative value if no such wallpaper is configured.\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public int getWallpaperIdForUser(@SetWallpaperFlags int which, int userId)",
    "returnType" : "int",
    "comment" : "\n     * Get the ID of the given user's current wallpaper of the given kind.  If there\n     * is no such wallpaper configured, returns a negative number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getCropAndSetWallpaperIntent(Uri imageUri)",
    "returnType" : "Intent",
    "comment" : "\n     * Gets an Intent that will launch an activity that crops the given\n     * image and sets the device's wallpaper. If there is a default HOME activity\n     * that supports cropping wallpapers, it will be preferred as the default.\n     * Use this method instead of directly creating a {@link #ACTION_CROP_AND_SET_WALLPAPER}\n     * intent.\n     *\n     * @param imageUri The image URI that will be set in the intent. The must be a content\n     *                 URI and its provider must resolve its type to \"image/*\"\n     *\n     * @throws IllegalArgumentException if the URI is not a content URI or its MIME type is\n     *         not \"image/*\"\n     ",
    "links" : [ "#ACTION_CROP_AND_SET_WALLPAPER" ]
  }, {
    "name" : "public void setResource(@RawRes int resid) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Change the current system wallpaper to the bitmap in the given resource.\n     * The resource is opened as a raw data stream and copied into the\n     * wallpaper; it must be a valid PNG or JPEG image.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param resid The resource ID of the bitmap to be used as the wallpaper image\n     *\n     * @throws IOException If an error occurs reverting to the built-in\n     * wallpaper.\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER", "android.content.Intent#ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "public int setResource(@RawRes int resid, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #setResource(int)} that allows the caller to specify which\n     * of the supported wallpaper categories to set.\n     *\n     * @param resid The resource ID of the bitmap to be used as the wallpaper image\n     * @param which Flags indicating which wallpaper(s) to configure with the new imagery\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @throws IOException\n     ",
    "links" : [ "#setResource(int)" ]
  }, {
    "name" : "public void setBitmap(Bitmap bitmap) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Change the current system wallpaper to a bitmap.  The given bitmap is\n     * converted to a PNG and stored as the wallpaper.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method is equivalent to calling\n     * {@link #setBitmap(Bitmap, Rect, boolean)} and passing {@code null} for the\n     * {@code visibleCrop} rectangle and {@code true} for the {@code allowBackup}\n     * parameter.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param bitmap The bitmap to be used as the new system wallpaper.\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     to the provided image.\n     ",
    "links" : [ "#setBitmap(Bitmap", "android.Manifest.permission#SET_WALLPAPER", "android.content.Intent#ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Change the current system wallpaper to a bitmap, specifying a hint about\n     * which subrectangle of the full image is to be visible.  The OS will then\n     * try to best present the given portion of the full image as the static system\n     * wallpaper image.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>Passing {@code null} as the {@code visibleHint} parameter is equivalent to\n     * passing (0, 0, {@code fullImage.getWidth()}, {@code fullImage.getHeight()}).\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param fullImage A bitmap that will supply the wallpaper imagery.\n     * @param visibleCropHint The rectangular subregion of {@code fullImage} that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     *\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     to the provided image.\n     * @throws IllegalArgumentException If the {@code visibleCropHint} rectangle is\n     *     empty or invalid.\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER", "android.content.Intent#ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #setBitmap(Bitmap, Rect, boolean)} that allows the caller\n     * to specify which of the supported wallpaper categories to set.\n     *\n     * @param fullImage A bitmap that will supply the wallpaper imagery.\n     * @param visibleCropHint The rectangular subregion of {@code fullImage} that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     * @param which Flags indicating which wallpaper(s) to configure with the new imagery.\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @throws IOException\n     ",
    "links" : [ "#setBitmap(Bitmap" ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which, int userId) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #setBitmap(Bitmap, Rect, boolean, int)}, but allows to pass in an explicit user\n     * id. If the user id doesn't match the user id the process is running under, calling this\n     * requires permission {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "#setBitmap(Bitmap" ]
  }, {
    "name" : "public int setBitmapWithCrops(@Nullable Bitmap fullImage, @NonNull Map<Point, Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of setBitmap that defines how the wallpaper will be positioned for different\n     * display sizes.\n     * Requires permission {@link android.Manifest.permission#SET_WALLPAPER}.\n     * @param cropHints map from screen dimensions to a sub-region of the image to display for those\n     *                  dimensions. The {@code Rect} sub-region may have a larger width/height ratio\n     *                  than the screen dimensions to apply a horizontal parallax effect. If the\n     *                  map is empty or some entries are missing, the system will apply a default\n     *                  strategy to position the wallpaper for any unspecified screen dimensions.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "private int setBitmapWithCrops(@Nullable Bitmap fullImage, @NonNull SparseArray<Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which, int userId) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void validateRect(Rect rect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStream(InputStream bitmapData) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Change the current system wallpaper to a specific byte stream.  The\n     * give InputStream is copied into persistent storage and will now be\n     * used as the wallpaper.  Currently it must be either a JPEG or PNG\n     * image.  On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED}\n     * is broadcast.\n     *\n     * <p>This method is equivalent to calling\n     * {@link #setStream(InputStream, Rect, boolean)} and passing {@code null} for the\n     * {@code visibleCrop} rectangle and {@code true} for the {@code allowBackup}\n     * parameter.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param bitmapData A stream containing the raw data to install as a wallpaper.  This\n     *     data can be in any format handled by {@link BitmapRegionDecoder}.\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     based on the provided image data.\n     ",
    "links" : [ "android.graphics.BitmapRegionDecoder", "#setStream(InputStream", "android.Manifest.permission#SET_WALLPAPER", "android.content.Intent#ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "private void copyStreamToWallpaperFile(InputStream data, FileOutputStream fos) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Change the current system wallpaper to a specific byte stream, specifying a\n     * hint about which subrectangle of the full image is to be visible.  The OS will\n     * then try to best present the given portion of the full image as the static system\n     * wallpaper image.  The data from the given InputStream is copied into persistent\n     * storage and will then be used as the system wallpaper.  Currently the data must\n     * be either a JPEG or PNG image.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param bitmapData A stream containing the raw data to install as a wallpaper.  This\n     *     data can be in any format handled by {@link BitmapRegionDecoder}.\n     * @param visibleCropHint The rectangular subregion of the streamed image that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @see #getWallpaperId(int)\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     based on the provided image data.\n     * @throws IllegalArgumentException If the {@code visibleCropHint} rectangle is\n     *     empty or invalid.\n     ",
    "links" : [ "android.graphics.BitmapRegionDecoder", "android.Manifest.permission#SET_WALLPAPER", "android.content.Intent#ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #setStream(InputStream, Rect, boolean)} that allows the caller\n     * to specify which of the supported wallpaper categories to set.\n     *\n     * @param bitmapData A stream containing the raw data to install as a wallpaper.  This\n     *     data can be in any format handled by {@link BitmapRegionDecoder}.\n     * @param visibleCropHint The rectangular subregion of the streamed image that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     * @param which Flags indicating which wallpaper(s) to configure with the new imagery.\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @see #getWallpaperId(int)\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @throws IOException\n     ",
    "links" : [ "android.graphics.BitmapRegionDecoder", "#setStream(InputStream" ]
  }, {
    "name" : "public int setStreamWithCrops(InputStream bitmapData, @NonNull Map<Point, Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of setStream that defines how the wallpaper will be positioned for different\n     * display sizes.\n     * Requires permission {@link android.Manifest.permission#SET_WALLPAPER}.\n     * @param cropHints map from screen dimensions to a sub-region of the image to display for those\n     *                  dimensions. The {@code Rect} sub-region may have a larger width/height ratio\n     *                  than the screen dimensions to apply a horizontal parallax effect. If the\n     *                  map is empty or some entries are missing, the system will apply a default\n     *                  strategy to position the wallpaper for any unspecified screen dimensions.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public int setStreamWithCrops(InputStream bitmapData, @NonNull SparseArray<Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Similar to {@link #setStreamWithCrops(InputStream, Map, boolean, int)}, but using\n     * {@link ScreenOrientation} as keys of the cropHints map. Used for backup & restore, since\n     * WallpaperBackupAgent stores orientations rather than the exact display size.\n     * Requires permission {@link android.Manifest.permission#SET_WALLPAPER}.\n     * @param cropHints map from {@link ScreenOrientation} to a sub-region of the image to display\n     *                  for that screen orientation.\n     * @hide\n     ",
    "links" : [ "ScreenOrientation", "#setStreamWithCrops(InputStream", "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public boolean hasResourceWallpaper(@RawRes int resid)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether any users are currently set to use the wallpaper\n     * with the given resource ID.  That is, their wallpaper has been\n     * set through {@link #setResource(int)} with the same resource id.\n     ",
    "links" : [ "#setResource(int)" ]
  }, {
    "name" : "public int getDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the desired minimum width for the wallpaper. Callers of\n     * {@link #setBitmap(android.graphics.Bitmap)} or\n     * {@link #setStream(java.io.InputStream)} should check this value\n     * beforehand to make sure the supplied wallpaper respects the desired\n     * minimum width.\n     *\n     * If the returned value is <= 0, the caller should use the width of\n     * the default display instead.\n     *\n     * @return The desired minimum width for the wallpaper. This value should\n     * be honored by applications that set the wallpaper but it is not\n     * mandatory.\n     *\n     * @see #getDesiredMinimumHeight()\n     ",
    "links" : [ "#setStream(java.io.InputStream)", "#setBitmap(android.graphics.Bitmap)" ]
  }, {
    "name" : "public int getDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the desired minimum height for the wallpaper. Callers of\n     * {@link #setBitmap(android.graphics.Bitmap)} or\n     * {@link #setStream(java.io.InputStream)} should check this value\n     * beforehand to make sure the supplied wallpaper respects the desired\n     * minimum height.\n     *\n     * If the returned value is <= 0, the caller should use the height of\n     * the default display instead.\n     *\n     * @return The desired minimum height for the wallpaper. This value should\n     * be honored by applications that set the wallpaper but it is not\n     * mandatory.\n     *\n     * @see #getDesiredMinimumWidth()\n     ",
    "links" : [ "#setStream(java.io.InputStream)", "#setBitmap(android.graphics.Bitmap)" ]
  }, {
    "name" : "public void suggestDesiredDimensions(int minimumWidth, int minimumHeight)",
    "returnType" : "void",
    "comment" : "\n     * For use only by the current home application, to specify the size of\n     * wallpaper it would like to use.  This allows such applications to have\n     * a virtual wallpaper that is larger than the physical screen, matching\n     * the size of their workspace.\n     *\n     * <p class=\"note\">Calling this method from apps other than the active\n     * home app is not guaranteed to work properly.  Other apps that supply\n     * wallpaper imagery should use {@link #getDesiredMinimumWidth()} and\n     * {@link #getDesiredMinimumHeight()} and construct a wallpaper that\n     * matches those dimensions.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER_HINTS}.\n     *\n     * @param minimumWidth Desired minimum width\n     * @param minimumHeight Desired minimum height\n     ",
    "links" : [ "#getDesiredMinimumHeight()", "android.Manifest.permission#SET_WALLPAPER_HINTS", "#getDesiredMinimumWidth()" ]
  }, {
    "name" : "public void setDisplayPadding(Rect padding)",
    "returnType" : "void",
    "comment" : "\n     * Specify extra padding that the wallpaper should have outside of the display.\n     * That is, the given padding supplies additional pixels the wallpaper should extend\n     * outside of the display itself.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER_HINTS}.\n     *\n     * @param padding The number of pixels the wallpaper should extend beyond the display,\n     * on its left, top, right, and bottom sides.\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER_HINTS" ]
  }, {
    "name" : "public void setDisplayOffset(IBinder windowToken, int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Apply a raw offset to the wallpaper window.  Should only be used in\n     * combination with {@link #setDisplayPadding(android.graphics.Rect)} when you\n     * have ensured that the wallpaper will extend outside of the display area so that\n     * it can be moved without leaving part of the display uncovered.\n     * @param x The offset, in pixels, to apply to the left edge.\n     * @param y The offset, in pixels, to apply to the top edge.\n     * @hide\n     ",
    "links" : [ "#setDisplayPadding(android.graphics.Rect)" ]
  }, {
    "name" : "public void clearWallpaper()",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to {@link #clear()}.\n     * @see #clear()\n     ",
    "links" : [ "#clear()" ]
  }, {
    "name" : "public void clearWallpaper(@SetWallpaperFlags int which, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Clear the wallpaper for a specific user.\n     * <ul>\n     *     <li> When called with {@code which=}{@link #FLAG_LOCK}, clear the lockscreen wallpaper.\n     *     The home screen wallpaper will become visible on the lock screen. </li>\n     *\n     *     <li> When called with {@code which=}{@link #FLAG_SYSTEM}, revert the home screen\n     *     wallpaper to default. The lockscreen wallpaper will be unchanged: if the previous\n     *     wallpaper was shared between home and lock screen, it will become lock screen only. </li>\n     *\n     *     <li> When called with {@code which=}({@link #FLAG_LOCK} | {@link #FLAG_SYSTEM}), put the\n     *     default wallpaper on both home and lock screen, removing any user defined wallpaper.</li>\n     * </ul>\n     * </p>\n     *\n     * The caller must hold the\n     * INTERACT_ACROSS_USERS_FULL permission to clear another user's\n     * wallpaper, and must hold the SET_WALLPAPER permission in all\n     * circumstances.\n     * @hide\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public boolean setWallpaperComponent(ComponentName name)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the implementation of {@link android.service.wallpaper.WallpaperService} used to render\n     * wallpaper, usually in order to set a live wallpaper.\n     *\n     * @param name Name of the component to use.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.wallpaper.WallpaperService" ]
  }, {
    "name" : "public void setWallpaperDimAmount(@FloatRange(from = 0f, to = 1f) float dimAmount)",
    "returnType" : "void",
    "comment" : "\n     * Sets the wallpaper dim amount between [0f, 1f] which would be blended with the system default\n     * dimming. 0f doesn't add any additional dimming and 1f makes the wallpaper fully black.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getWallpaperDimAmount()",
    "returnType" : "float",
    "comment" : "\n     * Gets the current additional dim amount set on the wallpaper. 0f means no application has\n     * added any dimming on top of the system default dim amount.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean lockScreenWallpaperExists()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the lock screen wallpaper is different from the system wallpaper.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setWallpaperComponent(ComponentName name, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the implementation of {@link android.service.wallpaper.WallpaperService} used to render\n     * wallpaper, usually in order to set a live wallpaper.\n     *\n     * This can only be called by packages with android.permission.SET_WALLPAPER_COMPONENT\n     * permission. The caller must hold the INTERACT_ACROSS_USERS_FULL permission to change\n     * another user's wallpaper.\n     *\n     * @param name Name of the component to use.\n     * @param userId User for whom the component should be set.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.wallpaper.WallpaperService" ]
  }, {
    "name" : "public boolean setWallpaperComponentWithFlags(@NonNull ComponentName name, @SetWallpaperFlags int which)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the implementation of {@link android.service.wallpaper.WallpaperService} used to render\n     * wallpaper, usually in order to set a live wallpaper, for a given wallpaper destination.\n     *\n     * This can only be called by packages with android.permission.SET_WALLPAPER_COMPONENT\n     * permission. The caller must hold the INTERACT_ACROSS_USERS_FULL permission to change\n     * another user's wallpaper.\n     *\n     * @param name Name of the component to use.\n     * @param which Specifies wallpaper destination (home and/or lock).\n     *\n     * @hide\n     ",
    "links" : [ "android.service.wallpaper.WallpaperService" ]
  }, {
    "name" : "public boolean setWallpaperComponentWithFlags(@NonNull ComponentName name, @SetWallpaperFlags int which, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the implementation of {@link android.service.wallpaper.WallpaperService} used to render\n     * wallpaper, usually in order to set a live wallpaper, for a given wallpaper destination.\n     *\n     * This can only be called by packages with android.permission.SET_WALLPAPER_COMPONENT\n     * permission. The caller must hold the INTERACT_ACROSS_USERS_FULL permission to change\n     * another user's wallpaper.\n     *\n     * @param name Name of the component to use.\n     * @param which Specifies wallpaper destination (home and/or lock).\n     * @param userId User for whom the component should be set.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.wallpaper.WallpaperService" ]
  }, {
    "name" : "public void setWallpaperOffsets(IBinder windowToken, float xOffset, float yOffset)",
    "returnType" : "void",
    "comment" : "\n     * Set the display position of the current wallpaper within any larger space, when\n     * that wallpaper is visible behind the given window.  The X and Y offsets\n     * are floating point numbers ranging from 0 to 1, representing where the\n     * wallpaper should be positioned within the screen space.  These only\n     * make sense when the wallpaper is larger than the display.\n     *\n     * @param windowToken The window who these offsets should be associated\n     * with, as returned by {@link android.view.View#getWindowToken()\n     * View.getWindowToken()}.\n     * @param xOffset The offset along the X dimension, from 0 to 1.\n     * @param yOffset The offset along the Y dimension, from 0 to 1.\n     ",
    "links" : [ "android.view.View#getWindowToken()" ]
  }, {
    "name" : "public void setWallpaperOffsetSteps(float xStep, float yStep)",
    "returnType" : "void",
    "comment" : "\n     * For applications that use multiple virtual screens showing a wallpaper,\n     * specify the step size between virtual screens. For example, if the\n     * launcher has 3 virtual screens, it would specify an xStep of 0.5,\n     * since the X offset for those screens are 0.0, 0.5 and 1.0\n     * @param xStep The X offset delta from one screen to the next one\n     * @param yStep The Y offset delta from one screen to the next one\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Send an arbitrary command to the current active wallpaper.\n     *\n     * @param windowToken The window who these offsets should be associated\n     * with, as returned by {@link android.view.View#getWindowToken()\n     * View.getWindowToken()}.\n     * @param action Name of the command to perform.  This must be a scoped\n     * name to avoid collisions, such as \"com.mycompany.wallpaper.DOIT\".\n     * @param x Arbitrary integer argument based on command.\n     * @param y Arbitrary integer argument based on command.\n     * @param z Arbitrary integer argument based on command.\n     * @param extras Optional additional information for the command, or null.\n     ",
    "links" : [ "android.view.View#getWindowToken()" ]
  }, {
    "name" : "public void setWallpaperZoomOut(@NonNull IBinder windowToken, float zoom)",
    "returnType" : "void",
    "comment" : "\n     * Set the current zoom out level of the wallpaper.\n     *\n     * @param windowToken window requesting wallpaper zoom. Zoom level will only be applier while\n     *                    such window is visible.\n     * @param zoom from 0 to 1 (inclusive) where 1 means fully zoomed out, 0 means fully zoomed in\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWallpaperSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether wallpapers are supported for the calling user. If this function returns\n     * {@code false}, any attempts to changing the wallpaper will have no effect,\n     * and any attempt to obtain of the wallpaper will return {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSetWallpaperAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the calling package is allowed to set the wallpaper for the calling user.\n     * If this function returns {@code false}, any attempts to change the wallpaper will have\n     * no effect. Always returns {@code true} for device owner and profile owner.\n     *\n     * @see android.os.UserManager#DISALLOW_SET_WALLPAPER\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaperOffsets(IBinder windowToken)",
    "returnType" : "void",
    "comment" : "\n     * Clear the offsets previously associated with this window through\n     * {@link #setWallpaperOffsets(IBinder, float, float)}.  This reverts\n     * the window to its default state, where it does not cause the wallpaper\n     * to scroll from whatever its last offsets were.\n     *\n     * @param windowToken The window who these offsets should be associated\n     * with, as returned by {@link android.view.View#getWindowToken()\n     * View.getWindowToken()}.\n     ",
    "links" : [ "android.view.View#getWindowToken()", "#setWallpaperOffsets(IBinder" ]
  }, {
    "name" : "public void clear() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove any currently set system wallpaper, reverting to the system's built-in\n     * wallpaper.\n     * On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @throws IOException If an error occurs reverting to the built-in\n     * wallpaper.\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER", "android.content.Intent#ACTION_WALLPAPER_CHANGED" ]
  }, {
    "name" : "public void clear(@SetWallpaperFlags int which) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove one or more currently set wallpapers, reverting to the system default\n     * display for each one. On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED}\n     * is broadcast.\n     * <ul>\n     *     <li> When called with {@code which=}{@link #FLAG_LOCK}, clear the lockscreen wallpaper.\n     *     The home screen wallpaper will become visible on the lock screen. </li>\n     *\n     *     <li> When called with {@code which=}{@link #FLAG_SYSTEM}, revert the home screen\n     *     wallpaper to default. The lockscreen wallpaper will be unchanged: if the previous\n     *     wallpaper was shared between home and lock screen, it will become lock screen only. </li>\n     *\n     *     <li> When called with {@code which=}({@link #FLAG_LOCK} | {@link #FLAG_SYSTEM}), put the\n     *     default wallpaper on both home and lock screen, removing any user defined wallpaper.</li>\n     * </ul>\n     *\n     * @param which A bitwise combination of {@link #FLAG_SYSTEM} or\n     *   {@link #FLAG_LOCK}\n     * @throws IOException If an error occurs reverting to the built-in wallpaper.\n     ",
    "links" : [ "#FLAG_SYSTEM", "android.content.Intent#ACTION_WALLPAPER_CHANGED", "#FLAG_LOCK" ]
  }, {
    "name" : "public static InputStream openDefaultWallpaper(Context context, @SetWallpaperFlags int which)",
    "returnType" : "InputStream",
    "comment" : "\n     * Open stream representing the default static image wallpaper.\n     *\n     * If the device defines no default wallpaper of the requested kind,\n     * {@code null} is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParcelFileDescriptor getDefaultSystemWallpaperFile()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * util used in T to return a default system wallpaper file\n     * when third party apps attempt to read the wallpaper with {@link #getWallpaperFile}\n     ",
    "links" : [ "#getWallpaperFile" ]
  }, {
    "name" : "private static InputStream getWallpaperInputStream(String path)",
    "returnType" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<String> getDefaultSystemWallpaperPaths()",
    "returnType" : "List<String>",
    "comment" : "\n     * @return a list of paths to the system default wallpapers, in order of priority:\n     * if the file exists for the first path of this list, the first path should be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getCmfWallpaperPath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName getDefaultWallpaperComponent(Context context)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return {@link ComponentName} of the default live wallpaper, or\n     * {@code null} if none is defined.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public static ComponentName getCmfDefaultWallpaperComponent(Context context)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return {@link ComponentName} of the CMF default wallpaper, or\n     * {@link #getDefaultWallpaperComponent(Context)} if none is defined.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName", "#getDefaultWallpaperComponent(Context)" ]
  }, {
    "name" : "private static boolean isComponentExist(Context context, ComponentName cn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWallpaperBackupEligible(int which)",
    "returnType" : "boolean",
    "comment" : "\n     * Is the current system wallpaper eligible for backup?\n     *\n     * Only the OS itself may use this method.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorManagementProxy getColorManagementProxy()",
    "returnType" : "ColorManagementProxy",
    "comment" : "\n     * Get the instance of {@link ColorManagementProxy}.\n     *\n     * @return instance of {@link ColorManagementProxy}.\n     * @hide\n     ",
    "links" : [ "ColorManagementProxy" ]
  }, {
    "name" : "private static void checkExactlyOneWallpaperFlagSet(@SetWallpaperFlags int which)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getOrientation(Point screenSize)", "public static int getRotatedOrientation(@ScreenOrientation int orientation)", " static void initGlobals(IWallpaperManager service, Looper looper)", "public static WallpaperManager getInstance(Context context)", "public IWallpaperManager getIWallpaperManager()", "public boolean isLockscreenLiveWallpaperEnabled()", "public static boolean isMultiCropEnabled()", "public boolean shouldEnableWideColorGamut()", "public Drawable getDrawable()", "public Drawable getDrawable(@SetWallpaperFlags int which)", "public Drawable getBuiltInDrawable()", "public Drawable getBuiltInDrawable(@SetWallpaperFlags int which)", "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)", "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, @SetWallpaperFlags int which)", "private static RectF getMaxCropRect(int inWidth, int inHeight, int outWidth, int outHeight, float horizontalAlignment, float verticalAlignment)", "public Drawable peekDrawable()", "public Drawable peekDrawable(@SetWallpaperFlags int which)", "public Drawable getFastDrawable()", "public Drawable getFastDrawable(@SetWallpaperFlags int which)", "public Drawable peekFastDrawable()", "public Drawable peekFastDrawable(@SetWallpaperFlags int which)", "public boolean wallpaperSupportsWcg(int which)", "public Bitmap getBitmap()", "public Bitmap getBitmap(boolean hardware)", "public Bitmap getBitmap(boolean hardware, @SetWallpaperFlags int which)", "public Bitmap getBitmapAsUser(int userId, boolean hardware)", "public Bitmap getBitmapAsUser(int userId, boolean hardware, @SetWallpaperFlags int which)", "public Bitmap getBitmapAsUser(int userId, boolean hardware, @SetWallpaperFlags int which, boolean returnDefault)", "public Rect peekBitmapDimensions()", "public Rect peekBitmapDimensions(@SetWallpaperFlags int which)", "public Rect peekBitmapDimensions(@SetWallpaperFlags int which, boolean returnDefault)", "public List<Rect> getBitmapCrops(@NonNull List<Point> displaySizes, @SetWallpaperFlags int which, boolean originalBitmap)", "public List<Rect> getBitmapCrops(@NonNull Point bitmapSize, @NonNull List<Point> displaySizes, @Nullable Map<Point, Rect> cropHints)", "public WallpaperColors getWallpaperColors(@NonNull Bitmap bitmap, @Nullable Map<Point, Rect> cropHints)", "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which)", "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler)", "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler, int userId)", "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback)", "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback, int userId)", "public WallpaperColors getWallpaperColors(int which)", "public WallpaperColors getWallpaperColors(int which, int userId)", "public void addOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback, List<RectF> regions, int which) throws IllegalArgumentException", "public void removeOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback)", "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, int userId)", "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, boolean getCropped)", "private ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, int userId, boolean getCropped)", "public void forgetLoadedWallpaper()", "public WallpaperInfo getWallpaperInfo()", "public WallpaperInfo getWallpaperInfoForUser(int userId)", "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which)", "public WallpaperInfo getWallpaperInfo(@SetWallpaperFlags int which, int userId)", "public ParcelFileDescriptor getWallpaperInfoFile()", "public int getWallpaperId(@SetWallpaperFlags int which)", "public int getWallpaperIdForUser(@SetWallpaperFlags int which, int userId)", "public Intent getCropAndSetWallpaperIntent(Uri imageUri)", "public void setResource(@RawRes int resid) throws IOException", "public int setResource(@RawRes int resid, @SetWallpaperFlags int which) throws IOException", "public void setBitmap(Bitmap bitmap) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which, int userId) throws IOException", "public int setBitmapWithCrops(@Nullable Bitmap fullImage, @NonNull Map<Point, Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "private int setBitmapWithCrops(@Nullable Bitmap fullImage, @NonNull SparseArray<Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which, int userId) throws IOException", "private final void validateRect(Rect rect)", "public void setStream(InputStream bitmapData) throws IOException", "private void copyStreamToWallpaperFile(InputStream data, FileOutputStream fos) throws IOException", "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup) throws IOException", "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "public int setStreamWithCrops(InputStream bitmapData, @NonNull Map<Point, Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "public int setStreamWithCrops(InputStream bitmapData, @NonNull SparseArray<Rect> cropHints, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "public boolean hasResourceWallpaper(@RawRes int resid)", "public int getDesiredMinimumWidth()", "public int getDesiredMinimumHeight()", "public void suggestDesiredDimensions(int minimumWidth, int minimumHeight)", "public void setDisplayPadding(Rect padding)", "public void setDisplayOffset(IBinder windowToken, int x, int y)", "public void clearWallpaper()", "public void clearWallpaper(@SetWallpaperFlags int which, int userId)", "public boolean setWallpaperComponent(ComponentName name)", "public void setWallpaperDimAmount(@FloatRange(from = 0f, to = 1f) float dimAmount)", "public float getWallpaperDimAmount()", "public boolean lockScreenWallpaperExists()", "public boolean setWallpaperComponent(ComponentName name, int userId)", "public boolean setWallpaperComponentWithFlags(@NonNull ComponentName name, @SetWallpaperFlags int which)", "public boolean setWallpaperComponentWithFlags(@NonNull ComponentName name, @SetWallpaperFlags int which, int userId)", "public void setWallpaperOffsets(IBinder windowToken, float xOffset, float yOffset)", "public void setWallpaperOffsetSteps(float xStep, float yStep)", "public void sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)", "public void setWallpaperZoomOut(@NonNull IBinder windowToken, float zoom)", "public boolean isWallpaperSupported()", "public boolean isSetWallpaperAllowed()", "public void clearWallpaperOffsets(IBinder windowToken)", "public void clear() throws IOException", "public void clear(@SetWallpaperFlags int which) throws IOException", "public static InputStream openDefaultWallpaper(Context context, @SetWallpaperFlags int which)", "private static ParcelFileDescriptor getDefaultSystemWallpaperFile()", "private static InputStream getWallpaperInputStream(String path)", "private static List<String> getDefaultSystemWallpaperPaths()", "private static String getCmfWallpaperPath()", "public static ComponentName getDefaultWallpaperComponent(Context context)", "public static ComponentName getCmfDefaultWallpaperComponent(Context context)", "private static boolean isComponentExist(Context context, ComponentName cn)", "public boolean isWallpaperBackupEligible(int which)", "public ColorManagementProxy getColorManagementProxy()", "private static void checkExactlyOneWallpaperFlagSet(@SetWallpaperFlags int which)" ],
  "variableNames" : [ "TAG", "DEBUG", "RETURN_DEFAULT_ON_SECURITY_EXCEPTION", "THROW_ON_SECURITY_EXCEPTION", "mWallpaperXStep", "mWallpaperYStep", "LOCAL_COLOR_BOUNDS", "PROP_WALLPAPER", "PROP_LOCK_WALLPAPER", "PROP_WALLPAPER_COMPONENT", "VALUE_CMF_COLOR", "WALLPAPER_CMF_PATH", "ACTION_CROP_AND_SET_WALLPAPER", "ACTION_LIVE_WALLPAPER_CHOOSER", "ACTION_CHANGE_LIVE_WALLPAPER", "EXTRA_LIVE_WALLPAPER_COMPONENT", "WALLPAPER_PREVIEW_META_DATA", "COMMAND_TAP", "COMMAND_SECONDARY_TAP", "COMMAND_DROP", "COMMAND_WAKING_UP", "COMMAND_KEYGUARD_GOING_AWAY", "COMMAND_GOING_TO_SLEEP", "COMMAND_DISPLAY_SWITCH", "COMMAND_REAPPLY", "COMMAND_FREEZE", "COMMAND_UNFREEZE", "EXTRA_NEW_WALLPAPER_ID", "EXTRA_FROM_FOREGROUND_APP", "ORIENTATION_UNKNOWN", "PORTRAIT", "LANDSCAPE", "SQUARE_PORTRAIT", "SQUARE_LANDSCAPE", "FLAG_SYSTEM", "FLAG_LOCK", "sSync", "sGlobals", "mContext", "mWcgEnabled", "mCmProxy", "sIsMultiCropEnabled" ]
}