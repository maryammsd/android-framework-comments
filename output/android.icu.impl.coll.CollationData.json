{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationData.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationData",
  "comment" : "\n * Collation data container.\n * Immutable data created by a CollationDataBuilder, or loaded from a file,\n * or deserialized from API-provided binary data.\n *\n * Includes data for the collation base (root/default), aliased if this is not the base.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "REORDER_RESERVED_BEFORE_LATIN",
    "type" : "int",
    "comment" : " The reordering builder code could clone the resulting template array.",
    "links" : [ ]
  }, {
    "name" : "REORDER_RESERVED_AFTER_LATIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_NUM_SPECIAL_REORDER_CODES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_INT_ARRAY",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JAMO_CE32S_LENGTH",
    "type" : "int",
    "comment" : " @see jamoCE32s ",
    "links" : [ ]
  }, {
    "name" : "trie",
    "type" : "Trie2_32",
    "comment" : " Main lookup trie. ",
    "links" : [ ]
  }, {
    "name" : "ce32s",
    "type" : "int[]",
    "comment" : "\n     * Array of CE32 values.\n     * At index 0 there must be CE32(U+0000)\n     * to support U+0000's special-tag for NUL-termination handling.\n     ",
    "links" : [ ]
  }, {
    "name" : "ces",
    "type" : "long[]",
    "comment" : " Array of CE values for expansions and OFFSET_TAG. ",
    "links" : [ ]
  }, {
    "name" : "contexts",
    "type" : "String",
    "comment" : " Array of prefix and contraction-suffix matching data. ",
    "links" : [ ]
  }, {
    "name" : "base",
    "type" : "CollationData",
    "comment" : " Base collation data, or null if this data itself is a base. ",
    "links" : [ ]
  }, {
    "name" : "jamoCE32s",
    "type" : "int[]",
    "comment" : "\n     * Simple array of JAMO_CE32S_LENGTH=19+21+27 CE32s, one per canonical Jamo L/V/T.\n     * They are normally simple CE32s, rarely expansions.\n     * For fast handling of HANGUL_TAG.\n     ",
    "links" : [ ]
  }, {
    "name" : "nfcImpl",
    "type" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numericPrimary",
    "type" : "long",
    "comment" : " The single-byte primary weight (xx000000) for numeric collation. ",
    "links" : [ ]
  }, {
    "name" : "compressibleBytes",
    "type" : "boolean[]",
    "comment" : " 256 flags for which primary-weight lead bytes are compressible. ",
    "links" : [ ]
  }, {
    "name" : "unsafeBackwardSet",
    "type" : "UnicodeSet",
    "comment" : "\n     * Set of code points that are unsafe for starting string comparison after an identical prefix,\n     * or in backwards CE iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "fastLatinTable",
    "type" : "char[]",
    "comment" : "\n     * Fast Latin table for common-Latin-text string comparisons.\n     * Data structure see class CollationFastLatin.\n     ",
    "links" : [ ]
  }, {
    "name" : "fastLatinTableHeader",
    "type" : "char[]",
    "comment" : "\n     * Header portion of the fastLatinTable.\n     * In C++, these are one array, and the header is skipped for mapping characters.\n     * In Java, two arrays work better.\n     ",
    "links" : [ ]
  }, {
    "name" : "numScripts",
    "type" : "int",
    "comment" : "\n     * Data for scripts and reordering groups.\n     * Uses include building a reordering permutation table and\n     * providing script boundaries to AlphabeticIndex.\n     ",
    "links" : [ ]
  }, {
    "name" : "scriptsIndex",
    "type" : "char[]",
    "comment" : "\n     * The length of scriptsIndex is numScripts+16.\n     * It maps from a UScriptCode or a special reorder code to an entry in scriptStarts.\n     * 16 special reorder codes (not all used) are mapped starting at numScripts.\n     * Up to MAX_NUM_SPECIAL_REORDER_CODES are codes for special groups like space/punct/digit.\n     * There are special codes at the end for reorder-reserved primary ranges.\n     *\n     * <p>Multiple scripts may share a range and index, for example Hira & Kana.\n     ",
    "links" : [ ]
  }, {
    "name" : "scriptStarts",
    "type" : "char[]",
    "comment" : "\n     * Start primary weight (top 16 bits only) for a group/script/reserved range\n     * indexed by scriptsIndex.\n     * The first range (separators & terminators) and the last range (trailing weights)\n     * are not reorderable, and no scriptsIndex entry points to them.\n     ",
    "links" : [ ]
  }, {
    "name" : "rootElements",
    "type" : "long[]",
    "comment" : "\n     * Collation elements in the root collator.\n     * Used by the CollationRootElements class. The data structure is described there.\n     * null in a tailoring.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getCE32(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getCE32FromSupplementary(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isDigit(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUnsafeBackward(int c, boolean numeric)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCompressibleLeadByte(int b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCompressiblePrimary(long p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getCE32FromContexts(int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the CE32 from two contexts words.\n     * Access to the defaultCE32 for contraction and prefix matching.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getIndirectCE32(int ce32)",
    "returnType" : "int",
    "comment" : "\n     * Returns the CE32 for an indirect special CE32 (e.g., with DIGIT_TAG).\n     * Requires that ce32 is special.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFinalCE32(int ce32)",
    "returnType" : "int",
    "comment" : "\n     * Returns the CE32 for an indirect special CE32 (e.g., with DIGIT_TAG),\n     * if ce32 is special.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getCEFromOffsetCE32(int c, int ce32)",
    "returnType" : "long",
    "comment" : "\n     * Computes a CE from c's ce32 which has the OFFSET_TAG.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getSingleCE(int c)",
    "returnType" : "long",
    "comment" : "\n     * Returns the single CE that c maps to.\n     * Throws UnsupportedOperationException if c does not map to a single CE.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFCD16(int c)",
    "returnType" : "int",
    "comment" : "\n     * Returns the FCD16 value for code point c. c must be >= 0.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getFirstPrimaryForGroup(int script)",
    "returnType" : "long",
    "comment" : "\n     * Returns the first primary for the script's reordering group.\n     * @return the primary with only the first primary lead byte of the group\n     *         (not necessarily an actual root collator primary weight),\n     *         or 0 if the script is unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastPrimaryForGroup(int script)",
    "returnType" : "long",
    "comment" : "\n     * Returns the last primary for the script's reordering group.\n     * @return the last primary of the group\n     *         (not an actual root collator primary weight),\n     *         or 0 if the script is unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGroupForPrimary(long p)",
    "returnType" : "int",
    "comment" : "\n     * Finds the reordering group which contains the primary weight.\n     * @return the first script of the group, or -1 if the weight is beyond the last group\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getScriptIndex(int script)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getEquivalentScripts(int script)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void makeReorderRanges(int[] reorder, UVector32 ranges)",
    "returnType" : "void",
    "comment" : "\n     * Writes the permutation of primary-weight ranges\n     * for the given reordering of scripts and groups.\n     * The caller checks for illegal arguments and\n     * takes care of [DEFAULT] and memory allocation.\n     *\n     * <p>Each list element will be a (limit, offset) pair as described\n     * for the CollationSettings.reorderRanges.\n     * The list will be empty if no ranges are reordered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void makeReorderRanges(int[] reorder, boolean latinMustMove, UVector32 ranges)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int addLowScriptRange(short[] table, int index, int lowStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int addHighScriptRange(short[] table, int index, int highLimit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String scriptCodeString(int script)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getCE32(int c)", " int getCE32FromSupplementary(int c)", " boolean isDigit(int c)", "public boolean isUnsafeBackward(int c, boolean numeric)", "public boolean isCompressibleLeadByte(int b)", "public boolean isCompressiblePrimary(long p)", " int getCE32FromContexts(int index)", " int getIndirectCE32(int ce32)", " int getFinalCE32(int ce32)", " long getCEFromOffsetCE32(int c, int ce32)", " long getSingleCE(int c)", " int getFCD16(int c)", " long getFirstPrimaryForGroup(int script)", "public long getLastPrimaryForGroup(int script)", "public int getGroupForPrimary(long p)", "private int getScriptIndex(int script)", "public int[] getEquivalentScripts(int script)", " void makeReorderRanges(int[] reorder, UVector32 ranges)", "private void makeReorderRanges(int[] reorder, boolean latinMustMove, UVector32 ranges)", "private int addLowScriptRange(short[] table, int index, int lowStart)", "private int addHighScriptRange(short[] table, int index, int highLimit)", "private static String scriptCodeString(int script)" ],
  "variableNames" : [ "REORDER_RESERVED_BEFORE_LATIN", "REORDER_RESERVED_AFTER_LATIN", "MAX_NUM_SPECIAL_REORDER_CODES", "EMPTY_INT_ARRAY", "JAMO_CE32S_LENGTH", "trie", "ce32s", "ces", "contexts", "base", "jamoCE32s", "nfcImpl", "numericPrimary", "compressibleBytes", "unsafeBackwardSet", "fastLatinTable", "fastLatinTableHeader", "numScripts", "scriptsIndex", "scriptStarts", "rootElements" ]
}