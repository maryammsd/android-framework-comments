{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/EventListenerProxy.java",
  "packageName" : "java.util",
  "className" : "EventListenerProxy",
  "comment" : "\n * An abstract wrapper class for an {@code EventListener} class\n * which associates a set of additional parameters with the listener.\n * Subclasses must provide the storage and accessor methods\n * for the additional arguments or parameters.\n * <p>\n * For example, a bean which supports named properties\n * would have a two argument method signature for adding\n * a {@code PropertyChangeListener} for a property:\n * <pre>\n * public void addPropertyChangeListener(String propertyName,\n *                                       PropertyChangeListener listener)\n * </pre>\n * If the bean also implemented the zero argument get listener method:\n * <pre>\n * public PropertyChangeListener[] getPropertyChangeListeners()\n * </pre>\n * then the array may contain inner {@code PropertyChangeListeners}\n * which are also {@code PropertyChangeListenerProxy} objects.\n * <p>\n * If the calling method is interested in retrieving the named property\n * then it would have to test the element to see if it is a proxy class.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "listener",
    "type" : "T",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T getListener()",
    "returnType" : "T",
    "comment" : "\n     * Returns the listener associated with the proxy.\n     *\n     * @return  the listener associated with the proxy\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T getListener()" ],
  "variableNames" : [ "listener" ]
}