{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/breakiter/MlBreakEngine.java",
  "packageName" : "android.icu.impl.breakiter",
  "className" : "MlBreakEngine",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_FEATURE",
    "type" : "int",
    "comment" : " {UW1, UW2, ... UW6, BW1, ... BW3, TW1, TW2, ... TW4} 6+3+4= 13",
    "links" : [ ]
  }, {
    "name" : "fDigitOrOpenPunctuationOrAlphabetSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fClosePunctuationSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fModel",
    "type" : "List<HashMap<String, Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fNegativeSum",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int divideUpRange(CharacterIterator inText, int startPos, int endPos, CharacterIterator inString, int codePointLength, int[] charPositions, DictionaryBreakEngine.DequeI foundBreaks)",
    "returnType" : "int",
    "comment" : "\n     * Divide up a range of characters handled by this break engine.\n     *\n     * @param inText          An input text.\n     * @param startPos        The start index of the input text.\n     * @param endPos          The end index of the input text.\n     * @param inString        A input string normalized from inText from startPos to endPos\n     * @param codePointLength The number of code points of inString\n     * @param charPositions   A map that transforms inString's code point index to code unit index.\n     * @param foundBreaks     A list to store the breakpoint.\n     * @return The number of breakpoints\n     ",
    "links" : [ ]
  }, {
    "name" : "private String transform(CharacterIterator inString)",
    "returnType" : "String",
    "comment" : "\n     * Transform a CharacterIterator into a String.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void evaluateBreakpoint(String inputStr, int[] indexList, int startIdx, int numCodeUnits, ArrayList<Integer> boundary)",
    "returnType" : "void",
    "comment" : "\n     * Evaluate whether the breakpointIdx is a potential breakpoint.\n     *\n     * @param inputStr     An input string to be segmented.\n     * @param indexList    A code unit index list of the inputStr.\n     * @param startIdx     The start index of the indexList.\n     * @param numCodeUnits The current code unit boundary of the indexList.\n     * @param boundary     A list including the index of the breakpoint.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int initIndexList(CharacterIterator inString, int[] indexList, int codePointLength)",
    "returnType" : "int",
    "comment" : "\n     * Initialize the index list from the input string.\n     *\n     * @param inString        An input string to be segmented.\n     * @param indexList       A code unit index list of the inString.\n     * @param codePointLength The number of code points of the input string\n     * @return The number of the code units of the first six characters in inString.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void loadMLModel()",
    "returnType" : "void",
    "comment" : "\n     * Load the machine learning's model file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initKeyValue(UResourceBundle rb, String keyName, String valueName, HashMap<String, Integer> map)",
    "returnType" : "void",
    "comment" : "\n     * In the machine learning's model file, specify the name of the key and value to load the\n     * corresponding feature and its score.\n     *\n     * @param rb        A RedouceBundle corresponding to the model file.\n     * @param keyName   The kay name in the model file.\n     * @param valueName The value name in the model file.\n     * @param map       A HashMap to store the pairs of the feature and its score.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int divideUpRange(CharacterIterator inText, int startPos, int endPos, CharacterIterator inString, int codePointLength, int[] charPositions, DictionaryBreakEngine.DequeI foundBreaks)", "private String transform(CharacterIterator inString)", "private void evaluateBreakpoint(String inputStr, int[] indexList, int startIdx, int numCodeUnits, ArrayList<Integer> boundary)", "private int initIndexList(CharacterIterator inString, int[] indexList, int codePointLength)", "private void loadMLModel()", "private void initKeyValue(UResourceBundle rb, String keyName, String valueName, HashMap<String, Integer> map)" ],
  "variableNames" : [ "MAX_FEATURE", "fDigitOrOpenPunctuationOrAlphabetSet", "fClosePunctuationSet", "fModel", "fNegativeSum" ]
}