{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/NinePatch_Delegate.java",
  "packageName" : "android.graphics",
  "className" : "NinePatch_Delegate",
  "comment" : "\n * Delegate implementing the native methods of android.graphics.NinePatch\n *\n * Through the layoutlib_create tool, the original native methods of NinePatch have been replaced\n * by calls to methods of the same name in this delegate class.\n *\n * Because it's a stateless class to start with, there's no need to keep a {@link DelegateManager}\n * around to map int to instance of the delegate.\n *\n ",
  "variables" : [ {
    "name" : "sManager",
    "type" : "DelegateManager<NinePatch_Delegate>",
    "comment" : " ---- delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sChunkCache",
    "type" : "Map<byte[], SoftReference<NinePatchChunk>>",
    "comment" : "\n     * Cache map for {@link NinePatchChunk}.\n     * When the chunks are created they are serialized into a byte[], and both are put\n     * in the cache, using a {@link SoftReference} for the chunk. The default Java classes\n     * for {@link NinePatch} and {@link NinePatchDrawable} only reference to the byte[] data, and\n     * provide this for drawing.\n     * Using the cache map allows us to not have to deserialize the byte[] back into a\n     * {@link NinePatchChunk} every time a rendering is done.\n     ",
    "links" : [ "android.graphics.drawable.NinePatchDrawable", "java.lang.ref.SoftReference", "com.android.ninepatch.NinePatchChunk", "android.graphics.NinePatch" ]
  }, {
    "name" : "chunk",
    "type" : "byte[]",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static byte[] serialize(NinePatchChunk chunk)",
    "returnType" : "byte[]",
    "comment" : "\n     * Serializes the given chunk.\n     *\n     * @return the serialized data for the chunk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NinePatchChunk getChunk(byte[] array)",
    "returnType" : "NinePatchChunk",
    "comment" : "\n     * Returns a {@link NinePatchChunk} object for the given serialized representation.\n     *\n     * If the chunk is present in the cache then the object from the cache is returned, otherwise\n     * the array is deserialized into a {@link NinePatchChunk} object.\n     *\n     * @param array the serialized representation of the chunk.\n     * @return the NinePatchChunk or null if deserialization failed.\n     ",
    "links" : [ "com.android.ninepatch.NinePatchChunk" ]
  }, {
    "name" : " static boolean isNinePatchChunk(byte[] chunk)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long validateNinePatchChunk(byte[] chunk)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeFinalize(long nativeNinePatch)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nativeGetTransparentRegion(long bitmapHandle, long chunk, Rect location)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] getChunk(long nativeNinePatch)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clearCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sManager", "sChunkCache", "chunk" ],
  "methodNames" : [ "public static byte[] serialize(NinePatchChunk chunk)", "public static NinePatchChunk getChunk(byte[] array)", " static boolean isNinePatchChunk(byte[] chunk)", " static long validateNinePatchChunk(byte[] chunk)", " static void nativeFinalize(long nativeNinePatch)", " static long nativeGetTransparentRegion(long bitmapHandle, long chunk, Rect location)", " static byte[] getChunk(long nativeNinePatch)", "public static void clearCache()" ]
}