{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/DeviceConfig.java",
  "packageName" : "android.provider",
  "className" : "DeviceConfig",
  "comment" : "\n * Device level configuration parameters which can be tuned by a separate configuration service.\n * Namespaces that end in \"_native\" such as {@link #NAMESPACE_NETD_NATIVE} are intended to be used\n * by native code and should be pushed to system properties to make them accessible.\n *\n * @hide\n ",
  "links" : [ "#NAMESPACE_NETD_NATIVE" ],
  "variables" : [ {
    "name" : "SERVICE_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the service that provides the logic to these APIs\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ACCESSIBILITY",
    "type" : "String",
    "comment" : "\n     * Namespace for all accessibility related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ACTIVITY_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for activity manager related features. These features will be applied\n     * immediately upon change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ACTIVITY_MANAGER_COMPONENT_ALIAS",
    "type" : "String",
    "comment" : "\n     * Namespace for activity manager, specific to the \"component alias\" feature. We needed a\n     * different namespace in order to avoid phonetype from resetting it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_AUTO_PIN_CONFIRMATION",
    "type" : "String",
    "comment" : "\n     * Namespace for features related to auto pin confirmation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ACTIVITY_MANAGER_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all activity manager related features that are used at the native level.\n     * These features are applied at reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ALARM_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for AlarmManager configurations.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APP_COMPAT",
    "type" : "String",
    "comment" : "\n     * Namespace for all app compat related features.  These features will be applied\n     * immediately upon change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APP_HIBERNATION",
    "type" : "String",
    "comment" : "\n     * Namespace for all app hibernation related features.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APPSEARCH",
    "type" : "String",
    "comment" : "\n     * Namespace for all AppSearch related features.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APP_STANDBY",
    "type" : "String",
    "comment" : "\n     * Namespace for app standby configurations.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APP_CLONING",
    "type" : "String",
    "comment" : "\n     * Namespace for all App Cloning related features.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ATTENTION_MANAGER_SERVICE",
    "type" : "String",
    "comment" : "\n     * Namespace for AttentionManagerService related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_AUTOFILL",
    "type" : "String",
    "comment" : "\n     * Namespace for autofill feature that provides suggestions across all apps when\n     * the user interacts with input fields.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BATTERY_SAVER",
    "type" : "String",
    "comment" : "\n     * Namespace for battery saver feature.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BATTERY_STATS",
    "type" : "String",
    "comment" : "\n     * Namespace for holding battery stats configuration.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BLOBSTORE",
    "type" : "String",
    "comment" : "\n     * Namespace for blobstore feature that allows apps to share data blobs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BLUETOOTH",
    "type" : "String",
    "comment" : "\n     * Namespace for all Bluetooth related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CORE_EXPERIMENTS_TEAM_INTERNAL",
    "type" : "String",
    "comment" : "\n     * Namespace for features relating to android core experiments team internal usage.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CAMERA_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all camera-related features that are used at the native level.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CELLULAR_SECURITY",
    "type" : "String",
    "comment" : "\n     * Namespace for cellular security related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CLIPBOARD",
    "type" : "String",
    "comment" : "\n     * Namespace for features relating to clipboard.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONNECTIVITY",
    "type" : "String",
    "comment" : "\n     * Namespace for all networking connectivity related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CAPTIVEPORTALLOGIN",
    "type" : "String",
    "comment" : "\n     * Namespace for CaptivePortalLogin module.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_EDGETPU_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all EdgeTpu related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_HEALTH_FITNESS",
    "type" : "String",
    "comment" : "\n     * Namespace for all HealthFitness related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TETHERING",
    "type" : "String",
    "comment" : "\n     * Namespace for Tethering module.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_NEARBY",
    "type" : "String",
    "comment" : "\n     * Namespace for Nearby module.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONTENT_CAPTURE",
    "type" : "String",
    "comment" : "\n     * Namespace for content capture feature used by on-device machine intelligence\n     * to provide suggestions in a privacy-safe manner.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CREDENTIAL",
    "type" : "String",
    "comment" : "\n     * Namespace for credential manager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DEVICE_IDLE",
    "type" : "String",
    "comment" : "\n     * Namespace for device idle configurations.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DEX_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for how dex runs. The feature requires a reboot to reach a clean state.\n     *\n     * @deprecated No longer used\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DISPLAY_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for display manager related features. The names to access the properties in this\n     * namespace should be defined in {@link android.hardware.display.DisplayManager}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.display.DisplayManager" ]
  }, {
    "name" : "NAMESPACE_GAME_DRIVER",
    "type" : "String",
    "comment" : "\n     * Namespace for all Game Driver features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_HDMI_CONTROL",
    "type" : "String",
    "comment" : "\n     * Namespace for all HDMI Control features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INPUT_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all input-related features that are used at the native level.\n     * These features are applied at reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INTELLIGENCE_ATTENTION",
    "type" : "String",
    "comment" : "\n     * Namespace for attention-based features provided by on-device machine intelligence.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INTELLIGENCE_CONTENT_SUGGESTIONS",
    "type" : "String",
    "comment" : "\n     * Definitions for properties related to Content Suggestions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_JOB_SCHEDULER",
    "type" : "String",
    "comment" : "\n     * Namespace for JobScheduler configurations.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_LMKD_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all lmkd related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_LOCATION",
    "type" : "String",
    "comment" : "\n     * Namespace for all location related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_MEDIA",
    "type" : "String",
    "comment" : "\n     * Namespace for all media related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_MEDIA_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all media native related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_MGLRU_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all Kernel Multi-Gen LRU feature.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_NETD_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all netd related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_NNAPI_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all Android NNAPI related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ON_DEVICE_PERSONALIZATION",
    "type" : "String",
    "comment" : "\n     * Namespace for all OnDevicePersonalization related feature.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PACKAGE_MANAGER_SERVICE",
    "type" : "String",
    "comment" : "\n     * Namespace for features related to the Package Manager Service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PROFCOLLECT_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for features related to the Profcollect native Service.\n     * These features are applied at reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_REBOOT_READINESS",
    "type" : "String",
    "comment" : "\n     * Namespace for features related to Reboot Readiness detection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_REMOTE_KEY_PROVISIONING_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for Remote Key Provisioning related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ROLLBACK",
    "type" : "String",
    "comment" : "\n     * Namespace for Rollback flags that are applied immediately.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ROLLBACK_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for Rollback flags that are applied after a reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ROTATION_RESOLVER",
    "type" : "String",
    "comment" : "\n     * Namespace for Rotation Resolver Manager Service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_RUNTIME",
    "type" : "String",
    "comment" : "\n     * Namespace for all runtime related features that don't require a reboot to become active.\n     * There are no feature flags using NAMESPACE_RUNTIME.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_RUNTIME_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all runtime related features that require system properties for accessing\n     * the feature flags from C++ or Java language code. One example is the app image startup\n     * cache feature use_app_image_startup_cache.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_RUNTIME_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all runtime native boot related features. Boot in this case refers to the\n     * fact that the properties only take effect after rebooting the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SCHEDULER",
    "type" : "String",
    "comment" : "\n     * Namespace for system scheduler related features. These features will be applied\n     * immediately upon change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SDK_SANDBOX",
    "type" : "String",
    "comment" : "\n     * Namespace for all SdkSandbox related features.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SETTINGS_STATS",
    "type" : "String",
    "comment" : "\n     * Namespace for settings statistics features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STATSD_JAVA",
    "type" : "String",
    "comment" : "\n     * Namespace for all statsd java features that can be applied immediately.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STATSD_JAVA_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all statsd java features that are applied on boot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STATSD_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all statsd native features that can be applied immediately.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STATSD_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all statsd native features that are applied on boot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STORAGE",
    "type" : "String",
    "comment" : "\n     * Namespace for storage-related features.\n     *\n     * @deprecated Replace storage namespace with storage_native_boot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STORAGE_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for storage-related features, including native and boot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ADSERVICES",
    "type" : "String",
    "comment" : "\n     * Namespace for all AdServices related features.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SURFACE_FLINGER_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all SurfaceFlinger features that are used at the native level.\n     * These features are applied on boot or after reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SWCODEC_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for swcodec native related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SYSTEMUI",
    "type" : "String",
    "comment" : "\n     * Namespace for System UI related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SYSTEM_TIME",
    "type" : "String",
    "comment" : "\n     * Namespace for system time and time zone detection related features / behavior.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TARE",
    "type" : "String",
    "comment" : "\n     * Namespace for TARE configurations.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TELEPHONY",
    "type" : "String",
    "comment" : "\n     * Telephony related properties.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TEXTCLASSIFIER",
    "type" : "String",
    "comment" : "\n     * Namespace for TextClassifier related features.\n     *\n     * @hide\n     * @see android.provider.Settings.Global.TEXT_CLASSIFIER_CONSTANTS\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONTACTS_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Namespace for contacts provider related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SETTINGS_UI",
    "type" : "String",
    "comment" : "\n     * Namespace for settings ui related features\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ANDROID",
    "type" : "String",
    "comment" : "\n     * Namespace for android related features, i.e. for flags that affect not just a single\n     * component, but the entire system.\n     *\n     * The keys for this namespace are defined in {@link AndroidDeviceConfig}.\n     *\n     * @hide\n     ",
    "links" : [ "android.provider.AndroidDeviceConfig" ]
  }, {
    "name" : "NAMESPACE_WINDOW_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for window manager related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WINDOW_MANAGER_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for window manager features accessible by native code and\n     * loaded once per boot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SELECTION_TOOLBAR",
    "type" : "String",
    "comment" : "\n     * Definitions for selection toolbar related functions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_VOICE_INTERACTION",
    "type" : "String",
    "comment" : "\n     * Definitions for voice interaction related functions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DEVICE_POLICY_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for DevicePolicyManager related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLIC_NAMESPACES",
    "type" : "List<String>",
    "comment" : "\n     * List of namespaces which can be read without READ_DEVICE_CONFIG permission\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PRIVACY",
    "type" : "String",
    "comment" : "\n     * Privacy related properties definitions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BIOMETRICS",
    "type" : "String",
    "comment" : "\n     * Namespace for biometrics related features\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Permission related properties definitions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_OTA",
    "type" : "String",
    "comment" : "\n     * Namespace for ota related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WIDGET",
    "type" : "String",
    "comment" : "\n     * Namespace for all widget related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONNECTIVITY_THERMAL_POWER_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for connectivity thermal power manager features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONFIGURATION",
    "type" : "String",
    "comment" : "\n     * Namespace for configuration related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_LATENCY_TRACKER",
    "type" : "String",
    "comment" : "\n     * LatencyTracker properties definitions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INTERACTION_JANK_MONITOR",
    "type" : "String",
    "comment" : "\n     * InteractionJankMonitor properties definitions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_GAME_OVERLAY",
    "type" : "String",
    "comment" : "\n     * Namespace for game overlay related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_VIRTUALIZATION_FRAMEWORK_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for Android Virtualization Framework related features accessible by native code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONSTRAIN_DISPLAY_APIS",
    "type" : "String",
    "comment" : "\n     * Namespace for Constrain Display APIs related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APP_COMPAT_OVERRIDES",
    "type" : "String",
    "comment" : "\n     * Namespace for App Compat Overrides related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_UWB",
    "type" : "String",
    "comment" : "\n     * Namespace for all ultra wideband (uwb) related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_AMBIENT_CONTEXT_MANAGER_SERVICE",
    "type" : "String",
    "comment" : "\n     * Namespace for AmbientContextEventManagerService related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WEARABLE_SENSING",
    "type" : "String",
    "comment" : "\n     * Namespace for WearableSensingManagerService related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_VENDOR_SYSTEM_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for Vendor System Native related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_VENDOR_SYSTEM_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for Vendor System Native Boot related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_MEMORY_SAFETY_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for memory safety related features (e.g. MTE) that need a reboot to be applied\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_MEMORY_SAFETY_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for memory safety related features (e.g. MTE)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WEAR",
    "type" : "String",
    "comment" : "\n     * Namespace for wear OS platform features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INPUT_METHOD_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for the input method manager platform features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BACKUP_AND_RESTORE",
    "type" : "String",
    "comment" : "\n     * Namespace for backup and restore service related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ARC_APP_COMPAT",
    "type" : "String",
    "comment" : "\n     * Namespace for ARC App Compat related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_REMOTE_AUTH",
    "type" : "String",
    "comment" : "\n     * Namespace for remote authentication features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TETHERING_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for tethering module native features.\n     * Flags defined in this namespace are only usable on\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and newer.\n     * On older Android releases, they will not be propagated to native code.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE" ]
  }, {
    "name" : "NAMESPACE_NFC",
    "type" : "String",
    "comment" : "\n     * Namespace for all near field communication (nfc) related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_DISABLED_MODE_NONE",
    "type" : "int",
    "comment" : "\n     * Sync is not disabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_DISABLED_MODE_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Disabling of Config bulk update / syncing is persistent, i.e. it survives a device\n     * reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_DISABLED_MODE_UNTIL_REBOOT",
    "type" : "int",
    "comment" : "\n     * Disabling of Config bulk update / syncing is not persistent, i.e. it will\n     * not survive a device reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sListeners",
    "type" : "ArrayMap<OnPropertiesChangedListener, Pair<String, Executor>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNamespaces",
    "type" : "Map<String, Pair<ContentObserver, Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDataStore",
    "type" : "DeviceConfigDataStore",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_OVERRIDES_NAMESPACE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getProperty(@NonNull String namespace, @NonNull String name)",
    "returnType" : "String",
    "comment" : "\n     * Look up the value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @return the corresponding value, or null if not present.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Properties getProperties(@NonNull String namespace, @NonNull String... names)",
    "returnType" : "Properties",
    "comment" : "\n     * Look up the values of multiple properties for a particular namespace. The lookup is atomic,\n     * such that the values of these properties cannot change between the time when the first is\n     * fetched and the time when the last is fetched.\n     * <p>\n     * Each call to {@link #setProperties(Properties)} is also atomic and ensures that either none\n     * or all of the change is picked up here, but never only part of it.\n     *\n     * If there are any local overrides applied, they will take precedence over underlying values.\n     *\n     * @param namespace The namespace containing the properties to look up.\n     * @param names     The names of properties to look up, or empty to fetch all properties for the\n     *                  given namespace.\n     * @return {@link Properties} object containing the requested properties. This reflects the\n     *     state of these properties at the time of the lookup, and is not updated to reflect any\n     *     future changes. The keyset of this Properties object will contain only the intersection\n     *     of properties already set and properties requested via the names parameter. Properties\n     *     that are already set but were not requested will not be contained here. Properties that\n     *     are not set, but were requested will not be contained here either.\n     * @hide\n     ",
    "links" : [ "#setProperties(Properties)", "Properties" ]
  }, {
    "name" : "private static Properties getPropertiesWithoutOverrides(@NonNull String namespace, @NonNull String... names)",
    "returnType" : "Properties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void applyOverrides(@NonNull Properties properties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Set<Properties> getAllProperties()",
    "returnType" : "Set<Properties>",
    "comment" : "\n     * List all stored flags.\n     *\n     * The keys take the form {@code namespace/name}, and the values are the flag values.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getString(@NonNull String namespace, @NonNull String name, @Nullable String defaultValue)",
    "returnType" : "String",
    "comment" : "\n     * Look up the String value of a property for a particular namespace.\n     *\n     * @param namespace    The namespace containing the property to look up.\n     * @param name         The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist or has no non-null\n     *                     value.\n     * @return the corresponding value, or defaultValue if none exists.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getBoolean(@NonNull String namespace, @NonNull String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Look up the boolean value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist or has no non-null\n     *                     value.\n     * @return the corresponding value, or defaultValue if none exists.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(@NonNull String namespace, @NonNull String name, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Look up the int value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist, has no non-null\n     *                     value, or fails to parse into an int.\n     * @return the corresponding value, or defaultValue if either none exists or it does not parse.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(@NonNull String namespace, @NonNull String name, long defaultValue)",
    "returnType" : "long",
    "comment" : "\n     * Look up the long value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist, has no non-null\n     *                     value, or fails to parse into a long.\n     * @return the corresponding value, or defaultValue if either none exists or it does not parse.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(@NonNull String namespace, @NonNull String name, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Look up the float value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist, has no non-null\n     *                     value, or fails to parse into a float.\n     * @return the corresponding value, or defaultValue if either none exists or it does not parse.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setLocalOverride(@NonNull String namespace, @NonNull String name, @NonNull String value)",
    "returnType" : "boolean",
    "comment" : "\n     * Set flag {@code namespace/name} to {@code value}, and ignores server-updates for this flag.\n     *\n     * Can still be called even if there is no underlying value set.\n     *\n     * Returns {@code true} if successful, or {@code false} if the storage implementation throws\n     * errors.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearAllLocalOverrides()",
    "returnType" : "void",
    "comment" : "\n     * Clear all local sticky overrides.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearLocalOverride(@NonNull String namespace, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Clear local sticky override for flag {@code namespace/name}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, Map<String, String>> getUnderlyingValuesForOverriddenFlags()",
    "returnType" : "Map<String, Map<String, String>>",
    "comment" : "\n     * Return a map containing all flags that have been overridden.\n     *\n     * The keys of the outer map are namespaces. They keys of the inner maps are\n     * flag names. The values of the inner maps are the underlying flag values\n     * (not to be confused with their overridden values).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setProperty(@NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)",
    "returnType" : "boolean",
    "comment" : "\n     * Create a new property with the provided name and value in the provided namespace, or\n     * update the value of such a property if it already exists. The same name can exist in multiple\n     * namespaces and might have different values in any or all namespaces.\n     * <p>\n     * The method takes an argument indicating whether to make the value the default for this\n     * property.\n     * <p>\n     * All properties stored for a particular scope can be reverted to their default values\n     * by passing the namespace to {@link #resetToDefaults(int, String)}.\n     *\n     * @param namespace   The namespace containing the property to create or update.\n     * @param name        The name of the property to create or update.\n     * @param value       The value to store for the property.\n     * @param makeDefault Whether to make the new value the default one.\n     * @return {@code true} if the value was set, {@code false} if the storage implementation throws\n     * errors.\n     * @hide\n     * @see #resetToDefaults(int, String).\n     ",
    "links" : [ "#resetToDefaults(int" ]
  }, {
    "name" : "public static boolean setProperties(@NonNull Properties properties) throws BadConfigException",
    "returnType" : "boolean",
    "comment" : "\n     * Set all of the properties for a specific namespace. Pre-existing properties will be updated\n     * and new properties will be added if necessary. Any pre-existing properties for the specific\n     * namespace which are not part of the provided {@link Properties} object will be deleted from\n     * the namespace. These changes are all applied atomically, such that no calls to read or reset\n     * these properties can happen in the middle of this update.\n     * <p>\n     * Each call to {@link #getProperties(String, String...)} is also atomic and ensures that either\n     * none or all of this update is picked up, but never only part of it.\n     *\n     * @param properties the complete set of properties to set for a specific namespace.\n     * @throws BadConfigException if the provided properties are banned by RescueParty.\n     * @return {@code true} if the values were set, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "#getProperties(String", "Properties" ]
  }, {
    "name" : "public static boolean deleteProperty(@NonNull String namespace, @NonNull String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete a property with the provided name and value in the provided namespace\n     *\n     * @param namespace   The namespace containing the property to delete.\n     * @param name        The name of the property to delete.\n     * @return {@code true} if the property was deleted or it did not exist in the first place.\n     * Return {@code false} if the storage implementation throws errors.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void resetToDefaults(int resetMode, @Nullable String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Reset properties to their default values by removing the underlying values.\n     * <p>\n     * The method accepts an optional namespace parameter. If provided, only properties set within\n     * that namespace will be reset. Otherwise, all properties will be reset.\n     * <p>\n     * Note: This method should only be used by {@link com.android.server.RescueParty}. It was\n     * designed to be used in the event of boot or crash loops caused by flag changes. It does not\n     * revert flag values to defaults - instead it removes the property entirely which causes the\n     * consumer of the flag to use hardcoded defaults upon retrieval.\n     * <p>\n     * To clear values for a namespace without removing the underlying properties, construct a\n     * {@link Properties} object with the caller's namespace and either an empty flag map, or some\n     * snapshot of flag values. Then use {@link #setProperties(Properties)} to remove all flags\n     * under the namespace, or set them to the values in the snapshot.\n     * <p>\n     * To revert values for testing, one should mock DeviceConfig using\n     * {@link com.android.server.testables.TestableDeviceConfig} where possible. Otherwise, fallback\n     * to using {@link #setProperties(Properties)} as outlined above.\n     *\n     * @param resetMode The reset mode to use.\n     * @param namespace Optionally, the specific namespace which resets will be limited to.\n     * @hide\n     * @see #setProperty(String, String, String, boolean)\n     ",
    "links" : [ "com.android.server.RescueParty", "#setProperties(Properties)", "com.android.server.testables.TestableDeviceConfig", "Properties" ]
  }, {
    "name" : "public static void setSyncDisabledMode(int syncDisabledMode)",
    "returnType" : "void",
    "comment" : "\n     * Disables or re-enables bulk modifications ({@link #setProperties(Properties)}) to device\n     * config values. This is intended for use during tests to prevent a sync operation clearing\n     * config values which could influence the outcome of the tests, i.e. by changing behavior.\n     *\n     * @param syncDisabledMode the mode to use, see {@link Settings.Config#SYNC_DISABLED_MODE_NONE},\n     *     {@link Settings.Config#SYNC_DISABLED_MODE_PERSISTENT} and {@link\n     *     Settings.Config#SYNC_DISABLED_MODE_UNTIL_REBOOT}\n     *\n     * @see #getSyncDisabledMode()\n     * @hide\n     ",
    "links" : [ "Settings.Config#SYNC_DISABLED_MODE_UNTIL_REBOOT", "#setProperties(Properties)", "Settings.Config#SYNC_DISABLED_MODE_PERSISTENT", "Settings.Config#SYNC_DISABLED_MODE_NONE" ]
  }, {
    "name" : "public static int getSyncDisabledMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current mode of sync disabling.\n     *\n     * @see #setSyncDisabledMode(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addOnPropertiesChangedListener(@NonNull String namespace, @NonNull @CallbackExecutor Executor executor, @NonNull OnPropertiesChangedListener onPropertiesChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener for property changes.\n     * <p>\n     * This listener will be called whenever properties in the specified namespace change. Callbacks\n     * will be made on the specified executor. Future calls to this method with the same listener\n     * will replace the old namespace and executor. Remove the listener entirely by calling\n     * {@link #removeOnPropertiesChangedListener(OnPropertiesChangedListener)}.\n     *\n     * @param namespace                   The namespace containing properties to monitor.\n     * @param executor                    The executor which will be used to run callbacks.\n     * @param onPropertiesChangedListener The listener to add.\n     * @hide\n     * @see #removeOnPropertiesChangedListener(OnPropertiesChangedListener)\n     ",
    "links" : [ "#removeOnPropertiesChangedListener(OnPropertiesChangedListener)" ]
  }, {
    "name" : "public static void removeOnPropertiesChangedListener(@NonNull OnPropertiesChangedListener onPropertiesChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener for property changes. The listener will receive no further notification of\n     * property changes.\n     *\n     * @param onPropertiesChangedListener The listener to remove.\n     * @hide\n     * @see #addOnPropertiesChangedListener(String, Executor, OnPropertiesChangedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setMonitorCallback(@NonNull ContentResolver resolver, @NonNull @CallbackExecutor Executor executor, @NonNull MonitorCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Setter callback for monitoring Config table.\n     *\n     * @param executor the {@link Executor} on which to invoke the callback\n     * @param callback callback to set\n     *\n     * @hide\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public static void clearMonitorCallback(@NonNull ContentResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Clear callback for monitoring Config table.\n     * this may only be used to clear callback function registered by\n     * {@link DeviceConfig#setMonitorCallback}\n     * @hide\n     ",
    "links" : [ "android.provider.DeviceConfig#setMonitorCallback" ]
  }, {
    "name" : "private static void incrementNamespace(@NonNull String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Increment the count used to represent the number of listeners subscribed to the given\n     * namespace. If this is the first (i.e. incrementing from 0 to 1) for the given namespace, a\n     * ContentObserver is registered.\n     *\n     * @param namespace The namespace to increment the count for.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void decrementNamespace(@NonNull String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Decrement the count used to represent the number of listeners subscribed to the given\n     * namespace. If this is the final decrement call (i.e. decrementing from 1 to 0) for the given\n     * namespace, the ContentObserver that had been tracking it will be removed.\n     *\n     * @param namespace The namespace to decrement the count for.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void handleChange(@NonNull Uri uri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<String> getPublicNamespaces()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns list of namespaces that can be read without READ_DEVICE_CONFIG_PERMISSION;\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getAdbWritableFlags()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns list of flags that can be written with adb as non-root.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getProperty(@NonNull String namespace, @NonNull String name)", "public static Properties getProperties(@NonNull String namespace, @NonNull String... names)", "private static Properties getPropertiesWithoutOverrides(@NonNull String namespace, @NonNull String... names)", "private static void applyOverrides(@NonNull Properties properties)", "public static Set<Properties> getAllProperties()", "public static String getString(@NonNull String namespace, @NonNull String name, @Nullable String defaultValue)", "public static boolean getBoolean(@NonNull String namespace, @NonNull String name, boolean defaultValue)", "public static int getInt(@NonNull String namespace, @NonNull String name, int defaultValue)", "public static long getLong(@NonNull String namespace, @NonNull String name, long defaultValue)", "public static float getFloat(@NonNull String namespace, @NonNull String name, float defaultValue)", "public static boolean setLocalOverride(@NonNull String namespace, @NonNull String name, @NonNull String value)", "public static void clearAllLocalOverrides()", "public static void clearLocalOverride(@NonNull String namespace, @NonNull String name)", "public static Map<String, Map<String, String>> getUnderlyingValuesForOverriddenFlags()", "public static boolean setProperty(@NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)", "public static boolean setProperties(@NonNull Properties properties) throws BadConfigException", "public static boolean deleteProperty(@NonNull String namespace, @NonNull String name)", "public static void resetToDefaults(int resetMode, @Nullable String namespace)", "public static void setSyncDisabledMode(int syncDisabledMode)", "public static int getSyncDisabledMode()", "public static void addOnPropertiesChangedListener(@NonNull String namespace, @NonNull @CallbackExecutor Executor executor, @NonNull OnPropertiesChangedListener onPropertiesChangedListener)", "public static void removeOnPropertiesChangedListener(@NonNull OnPropertiesChangedListener onPropertiesChangedListener)", "public static void setMonitorCallback(@NonNull ContentResolver resolver, @NonNull @CallbackExecutor Executor executor, @NonNull MonitorCallback callback)", "public static void clearMonitorCallback(@NonNull ContentResolver resolver)", "private static void incrementNamespace(@NonNull String namespace)", "private static void decrementNamespace(@NonNull String namespace)", "private static void handleChange(@NonNull Uri uri)", "public static List<String> getPublicNamespaces()", "public static Set<String> getAdbWritableFlags()" ],
  "variableNames" : [ "SERVICE_NAME", "NAMESPACE_ACCESSIBILITY", "NAMESPACE_ACTIVITY_MANAGER", "NAMESPACE_ACTIVITY_MANAGER_COMPONENT_ALIAS", "NAMESPACE_AUTO_PIN_CONFIRMATION", "NAMESPACE_ACTIVITY_MANAGER_NATIVE_BOOT", "NAMESPACE_ALARM_MANAGER", "NAMESPACE_APP_COMPAT", "NAMESPACE_APP_HIBERNATION", "NAMESPACE_APPSEARCH", "NAMESPACE_APP_STANDBY", "NAMESPACE_APP_CLONING", "NAMESPACE_ATTENTION_MANAGER_SERVICE", "NAMESPACE_AUTOFILL", "NAMESPACE_BATTERY_SAVER", "NAMESPACE_BATTERY_STATS", "NAMESPACE_BLOBSTORE", "NAMESPACE_BLUETOOTH", "NAMESPACE_CORE_EXPERIMENTS_TEAM_INTERNAL", "NAMESPACE_CAMERA_NATIVE", "NAMESPACE_CELLULAR_SECURITY", "NAMESPACE_CLIPBOARD", "NAMESPACE_CONNECTIVITY", "NAMESPACE_CAPTIVEPORTALLOGIN", "NAMESPACE_EDGETPU_NATIVE", "NAMESPACE_HEALTH_FITNESS", "NAMESPACE_TETHERING", "NAMESPACE_NEARBY", "NAMESPACE_CONTENT_CAPTURE", "NAMESPACE_CREDENTIAL", "NAMESPACE_DEVICE_IDLE", "NAMESPACE_DEX_BOOT", "NAMESPACE_DISPLAY_MANAGER", "NAMESPACE_GAME_DRIVER", "NAMESPACE_HDMI_CONTROL", "NAMESPACE_INPUT_NATIVE_BOOT", "NAMESPACE_INTELLIGENCE_ATTENTION", "NAMESPACE_INTELLIGENCE_CONTENT_SUGGESTIONS", "NAMESPACE_JOB_SCHEDULER", "NAMESPACE_LMKD_NATIVE", "NAMESPACE_LOCATION", "NAMESPACE_MEDIA", "NAMESPACE_MEDIA_NATIVE", "NAMESPACE_MGLRU_NATIVE", "NAMESPACE_NETD_NATIVE", "NAMESPACE_NNAPI_NATIVE", "NAMESPACE_ON_DEVICE_PERSONALIZATION", "NAMESPACE_PACKAGE_MANAGER_SERVICE", "NAMESPACE_PROFCOLLECT_NATIVE_BOOT", "NAMESPACE_REBOOT_READINESS", "NAMESPACE_REMOTE_KEY_PROVISIONING_NATIVE", "NAMESPACE_ROLLBACK", "NAMESPACE_ROLLBACK_BOOT", "NAMESPACE_ROTATION_RESOLVER", "NAMESPACE_RUNTIME", "NAMESPACE_RUNTIME_NATIVE", "NAMESPACE_RUNTIME_NATIVE_BOOT", "NAMESPACE_SCHEDULER", "NAMESPACE_SDK_SANDBOX", "NAMESPACE_SETTINGS_STATS", "NAMESPACE_STATSD_JAVA", "NAMESPACE_STATSD_JAVA_BOOT", "NAMESPACE_STATSD_NATIVE", "NAMESPACE_STATSD_NATIVE_BOOT", "NAMESPACE_STORAGE", "NAMESPACE_STORAGE_NATIVE_BOOT", "NAMESPACE_ADSERVICES", "NAMESPACE_SURFACE_FLINGER_NATIVE_BOOT", "NAMESPACE_SWCODEC_NATIVE", "NAMESPACE_SYSTEMUI", "NAMESPACE_SYSTEM_TIME", "NAMESPACE_TARE", "NAMESPACE_TELEPHONY", "NAMESPACE_TEXTCLASSIFIER", "NAMESPACE_CONTACTS_PROVIDER", "NAMESPACE_SETTINGS_UI", "NAMESPACE_ANDROID", "NAMESPACE_WINDOW_MANAGER", "NAMESPACE_WINDOW_MANAGER_NATIVE_BOOT", "NAMESPACE_SELECTION_TOOLBAR", "NAMESPACE_VOICE_INTERACTION", "NAMESPACE_DEVICE_POLICY_MANAGER", "PUBLIC_NAMESPACES", "NAMESPACE_PRIVACY", "NAMESPACE_BIOMETRICS", "NAMESPACE_PERMISSIONS", "NAMESPACE_OTA", "NAMESPACE_WIDGET", "NAMESPACE_CONNECTIVITY_THERMAL_POWER_MANAGER", "NAMESPACE_CONFIGURATION", "NAMESPACE_LATENCY_TRACKER", "NAMESPACE_INTERACTION_JANK_MONITOR", "NAMESPACE_GAME_OVERLAY", "NAMESPACE_VIRTUALIZATION_FRAMEWORK_NATIVE", "NAMESPACE_CONSTRAIN_DISPLAY_APIS", "NAMESPACE_APP_COMPAT_OVERRIDES", "NAMESPACE_UWB", "NAMESPACE_AMBIENT_CONTEXT_MANAGER_SERVICE", "NAMESPACE_WEARABLE_SENSING", "NAMESPACE_VENDOR_SYSTEM_NATIVE", "NAMESPACE_VENDOR_SYSTEM_NATIVE_BOOT", "NAMESPACE_MEMORY_SAFETY_NATIVE_BOOT", "NAMESPACE_MEMORY_SAFETY_NATIVE", "NAMESPACE_WEAR", "NAMESPACE_INPUT_METHOD_MANAGER", "NAMESPACE_BACKUP_AND_RESTORE", "NAMESPACE_ARC_APP_COMPAT", "NAMESPACE_REMOTE_AUTH", "NAMESPACE_TETHERING_NATIVE", "NAMESPACE_NFC", "SYNC_DISABLED_MODE_NONE", "SYNC_DISABLED_MODE_PERSISTENT", "SYNC_DISABLED_MODE_UNTIL_REBOOT", "sLock", "sListeners", "sNamespaces", "TAG", "sDataStore", "DEVICE_CONFIG_OVERRIDES_NAMESPACE" ]
}