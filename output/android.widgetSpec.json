{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/GridLayout.java",
  "packageName" : "android.widget",
  "className" : "Spec",
  "comment" : "\n     * A Spec defines the horizontal or vertical characteristics of a group of\n     * cells. Each spec. defines the <em>grid indices</em> and <em>alignment</em>\n     * along the appropriate axis.\n     * <p>\n     * The <em>grid indices</em> are the leading and trailing edges of this cell group.\n     * See {@link GridLayout} for a description of the conventions used by GridLayout\n     * for grid indices.\n     * <p>\n     * The <em>alignment</em> property specifies how cells should be aligned in this group.\n     * For row groups, this specifies the vertical alignment.\n     * For column groups, this specifies the horizontal alignment.\n     * <p>\n     * Use the following static methods to create specs:\n     * <ul>\n     *   <li>{@link #spec(int)}</li>\n     *   <li>{@link #spec(int, int)}</li>\n     *   <li>{@link #spec(int, Alignment)}</li>\n     *   <li>{@link #spec(int, int, Alignment)}</li>\n     *   <li>{@link #spec(int, float)}</li>\n     *   <li>{@link #spec(int, int, float)}</li>\n     *   <li>{@link #spec(int, Alignment, float)}</li>\n     *   <li>{@link #spec(int, int, Alignment, float)}</li>\n     * </ul>\n     *\n     ",
  "variables" : [ {
    "name" : "UNDEFINED",
    "type" : "Spec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_WEIGHT",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "startDefined",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "span",
    "type" : "Interval",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "alignment",
    "type" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "weight",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Alignment getAbsoluteAlignment(boolean horizontal)",
    "returnType" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Spec copyWriteSpan(Interval span)",
    "returnType" : "Spec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Spec copyWriteAlignment(Alignment alignment)",
    "returnType" : "Spec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getFlexibility()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if the {@code class}, {@code alignment} and {@code span}\n         * properties of this Spec and the supplied parameter are pairwise equal,\n         * {@code false} otherwise.\n         *\n         * @param that the object to compare this spec with\n         *\n         * @return {@code true} if the specified object is equal to this\n         *         {@code Spec}; {@code false} otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "UNDEFINED", "DEFAULT_WEIGHT", "startDefined", "span", "alignment", "weight" ],
  "methodNames" : [ "private Alignment getAbsoluteAlignment(boolean horizontal)", " final Spec copyWriteSpan(Interval span)", " final Spec copyWriteAlignment(Alignment alignment)", " final int getFlexibility()", "public boolean equals(Object that)", "public int hashCode()" ]
}