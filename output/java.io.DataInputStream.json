{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/DataInputStream.java",
  "packageName" : "java.io",
  "className" : "DataInputStream",
  "comment" : "\n * A data input stream lets an application read primitive Java data\n * types from an underlying input stream in a machine-independent\n * way. An application uses a data output stream to write data that\n * can later be read by a data input stream.\n * <p>\n * DataInputStream is not necessarily safe for multithreaded access.\n * Thread safety is optional and is the responsibility of users of\n * methods in this class.\n *\n * @author  Arthur van Hoff\n * @see     java.io.DataOutputStream\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "bytearr",
    "type" : "byte[]",
    "comment" : "\n     * working arrays initialized on demand by readUTF\n     ",
    "links" : [ ]
  }, {
    "name" : "chararr",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readBuffer",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lineBuffer",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads some number of bytes from the contained input stream and\n     * stores them into the buffer array <code>b</code>. The number of\n     * bytes actually read is returned as an integer. This method blocks\n     * until input data is available, end of file is detected, or an\n     * exception is thrown.\n     *\n     * <p>If <code>b</code> is null, a <code>NullPointerException</code> is\n     * thrown. If the length of <code>b</code> is zero, then no bytes are\n     * read and <code>0</code> is returned; otherwise, there is an attempt\n     * to read at least one byte. If no byte is available because the\n     * stream is at end of file, the value <code>-1</code> is returned;\n     * otherwise, at least one byte is read and stored into <code>b</code>.\n     *\n     * <p>The first byte read is stored into element <code>b[0]</code>, the\n     * next one into <code>b[1]</code>, and so on. The number of bytes read\n     * is, at most, equal to the length of <code>b</code>. Let <code>k</code>\n     * be the number of bytes actually read; these bytes will be stored in\n     * elements <code>b[0]</code> through <code>b[k-1]</code>, leaving\n     * elements <code>b[k]</code> through <code>b[b.length-1]</code>\n     * unaffected.\n     *\n     * <p>The <code>read(b)</code> method has the same effect as:\n     * <blockquote><pre>\n     * read(b, 0, b.length)\n     * </pre></blockquote>\n     *\n     * @param      b   the buffer into which the data is read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end\n     *             of the stream has been reached.\n     * @exception  IOException if the first byte cannot be read for any reason\n     * other than end of file, the stream has been closed and the underlying\n     * input stream does not support reading after close, or another I/O\n     * error occurs.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.InputStream#read(byte[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from the contained\n     * input stream into an array of bytes.  An attempt is made to read\n     * as many as <code>len</code> bytes, but a smaller number may be read,\n     * possibly zero. The number of bytes actually read is returned as an\n     * integer.\n     *\n     * <p> This method blocks until input data is available, end of file is\n     * detected, or an exception is thrown.\n     *\n     * <p> If <code>len</code> is zero, then no bytes are read and\n     * <code>0</code> is returned; otherwise, there is an attempt to read at\n     * least one byte. If no byte is available because the stream is at end of\n     * file, the value <code>-1</code> is returned; otherwise, at least one\n     * byte is read and stored into <code>b</code>.\n     *\n     * <p> The first byte read is stored into element <code>b[off]</code>, the\n     * next one into <code>b[off+1]</code>, and so on. The number of bytes read\n     * is, at most, equal to <code>len</code>. Let <i>k</i> be the number of\n     * bytes actually read; these bytes will be stored in elements\n     * <code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,\n     * leaving elements <code>b[off+</code><i>k</i><code>]</code> through\n     * <code>b[off+len-1]</code> unaffected.\n     *\n     * <p> In every case, elements <code>b[0]</code> through\n     * <code>b[off]</code> and elements <code>b[off+len]</code> through\n     * <code>b[b.length-1]</code> are unaffected.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param off the start offset in the destination array <code>b</code>\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end\n     *             of the stream has been reached.\n     * @exception  NullPointerException If <code>b</code> is <code>null</code>.\n     * @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n     * <code>len</code> is negative, or <code>len</code> is greater than\n     * <code>b.length - off</code>\n     * @exception  IOException if the first byte cannot be read for any reason\n     * other than end of file, the stream has been closed and the underlying\n     * input stream does not support reading after close, or another I/O\n     * error occurs.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.InputStream#read(byte[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void readFully(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * See the general contract of the {@code readFully}\n     * method of {@code DataInput}.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @param   b   the buffer into which the data is read.\n     * @throws  NullPointerException if {@code b} is {@code null}.\n     * @throws  EOFException  if this input stream reaches the end before\n     *          reading all the bytes.\n     * @throws  IOException   the stream has been closed and the contained\n     *          input stream does not support reading after close, or\n     *          another I/O error occurs.\n     * @see     java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void readFully(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * See the general contract of the {@code readFully}\n     * method of {@code DataInput}.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the data array {@code b}.\n     * @param      len   the number of bytes to read.\n     * @exception  NullPointerException if {@code b} is {@code null}.\n     * @exception  IndexOutOfBoundsException if {@code off} is negative,\n     *             {@code len} is negative, or {@code len} is greater than\n     *             {@code b.length - off}.\n     * @exception  EOFException  if this input stream reaches the end before\n     *             reading all the bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int skipBytes(int n) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * See the general contract of the <code>skipBytes</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes for this operation are read from the contained\n     * input stream.\n     *\n     * @param      n   the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     * @exception  IOException  if the contained input stream does not support\n     *             seek, or the stream has been closed and\n     *             the contained input stream does not support\n     *             reading after close, or another I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean readBoolean() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * See the general contract of the <code>readBoolean</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the <code>boolean</code> value read.\n     * @exception  EOFException  if this input stream has reached the end.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte readByte() throws IOException",
    "returnType" : "byte",
    "comment" : "\n     * See the general contract of the <code>readByte</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next byte of this input stream as a signed 8-bit\n     *             <code>byte</code>.\n     * @exception  EOFException  if this input stream has reached the end.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int readUnsignedByte() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * See the general contract of the <code>readUnsignedByte</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next byte of this input stream, interpreted as an\n     *             unsigned 8-bit number.\n     * @exception  EOFException  if this input stream has reached the end.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see         java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final short readShort() throws IOException",
    "returnType" : "short",
    "comment" : "\n     * See the general contract of the <code>readShort</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next two bytes of this input stream, interpreted as a\n     *             signed 16-bit number.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading two bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int readUnsignedShort() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * See the general contract of the <code>readUnsignedShort</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next two bytes of this input stream, interpreted as an\n     *             unsigned 16-bit integer.\n     * @exception  EOFException  if this input stream reaches the end before\n     *             reading two bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final char readChar() throws IOException",
    "returnType" : "char",
    "comment" : "\n     * See the general contract of the <code>readChar</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next two bytes of this input stream, interpreted as a\n     *             <code>char</code>.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading two bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int readInt() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * See the general contract of the <code>readInt</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next four bytes of this input stream, interpreted as an\n     *             <code>int</code>.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading four bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long readLong() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * See the general contract of the <code>readLong</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next eight bytes of this input stream, interpreted as a\n     *             <code>long</code>.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading eight bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float readFloat() throws IOException",
    "returnType" : "float",
    "comment" : "\n     * See the general contract of the <code>readFloat</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next four bytes of this input stream, interpreted as a\n     *             <code>float</code>.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading four bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.DataInputStream#readInt()\n     * @see        java.lang.Float#intBitsToFloat(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double readDouble() throws IOException",
    "returnType" : "double",
    "comment" : "\n     * See the general contract of the <code>readDouble</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     the next eight bytes of this input stream, interpreted as a\n     *             <code>double</code>.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading eight bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.DataInputStream#readLong()\n     * @see        java.lang.Double#longBitsToDouble(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String readLine() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * See the general contract of the <code>readLine</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @deprecated This method does not properly convert bytes to characters.\n     * As of JDK&nbsp;1.1, the preferred way to read lines of text is via the\n     * <code>BufferedReader.readLine()</code> method.  Programs that use the\n     * <code>DataInputStream</code> class to read lines can be converted to use\n     * the <code>BufferedReader</code> class by replacing code of the form:\n     * <blockquote><pre>\n     *     DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);\n     * </pre></blockquote>\n     * with:\n     * <blockquote><pre>\n     *     BufferedReader d\n     *          =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));\n     * </pre></blockquote>\n     *\n     * @return     the next line of text from this input stream.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.BufferedReader#readLine()\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String readUTF() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * See the general contract of the <code>readUTF</code>\n     * method of <code>DataInput</code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @return     a Unicode string.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading all the bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @exception  UTFDataFormatException if the bytes do not represent a valid\n     *             modified UTF-8 encoding of a string.\n     * @see        java.io.DataInputStream#readUTF(java.io.DataInput)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String readUTF(DataInput in) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Reads from the\n     * stream <code>in</code> a representation\n     * of a Unicode  character string encoded in\n     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a> format;\n     * this string of characters is then returned as a <code>String</code>.\n     * The details of the modified UTF-8 representation\n     * are  exactly the same as for the <code>readUTF</code>\n     * method of <code>DataInput</code>.\n     *\n     * @param      in   a data input stream.\n     * @return     a Unicode string.\n     * @exception  EOFException            if the input stream reaches the end\n     *               before all the bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @exception  UTFDataFormatException  if the bytes do not represent a\n     *               valid modified UTF-8 encoding of a Unicode string.\n     * @see        java.io.DataInputStream#readUnsignedShort()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int read(byte[] b) throws IOException", "public final int read(byte[] b, int off, int len) throws IOException", "public final void readFully(byte[] b) throws IOException", "public final void readFully(byte[] b, int off, int len) throws IOException", "public final int skipBytes(int n) throws IOException", "public final boolean readBoolean() throws IOException", "public final byte readByte() throws IOException", "public final int readUnsignedByte() throws IOException", "public final short readShort() throws IOException", "public final int readUnsignedShort() throws IOException", "public final char readChar() throws IOException", "public final int readInt() throws IOException", "public final long readLong() throws IOException", "public final float readFloat() throws IOException", "public final double readDouble() throws IOException", "public final String readLine() throws IOException", "public final String readUTF() throws IOException", "public static final String readUTF(DataInput in) throws IOException" ],
  "variableNames" : [ "bytearr", "chararr", "readBuffer", "lineBuffer" ]
}