{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/GnssStatus.java",
  "packageName" : "android.location",
  "className" : "GnssStatus",
  "comment" : "\n * This class represents the current state of the GNSS engine and is used in conjunction with\n * {@link GnssStatus.Callback}.\n *\n * @see LocationManager#registerGnssStatusCallback\n * @see GnssStatus.Callback\n ",
  "variables" : [ {
    "name" : "CONSTELLATION_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown constellation type. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_GPS",
    "type" : "int",
    "comment" : " Constellation type constant for GPS. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_SBAS",
    "type" : "int",
    "comment" : " Constellation type constant for SBAS. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_GLONASS",
    "type" : "int",
    "comment" : " Constellation type constant for Glonass. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_QZSS",
    "type" : "int",
    "comment" : " Constellation type constant for QZSS. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_BEIDOU",
    "type" : "int",
    "comment" : " Constellation type constant for Beidou. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_GALILEO",
    "type" : "int",
    "comment" : " Constellation type constant for Galileo. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_IRNSS",
    "type" : "int",
    "comment" : " Constellation type constant for IRNSS. ",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_COUNT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SVID_FLAGS_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SVID_FLAGS_HAS_EPHEMERIS_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SVID_FLAGS_HAS_ALMANAC_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SVID_FLAGS_USED_IN_FIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SVID_FLAGS_HAS_CARRIER_FREQUENCY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SVID_FLAGS_HAS_BASEBAND_CN0",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SVID_SHIFT_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_TYPE_SHIFT_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONSTELLATION_TYPE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSvCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSvidWithFlags",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCn0DbHzs",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElevations",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAzimuths",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierFrequencies",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBasebandCn0DbHzs",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static GnssStatus wrap(int svCount, int[] svidWithFlags, float[] cn0DbHzs, float[] elevations, float[] azimuths, float[] carrierFrequencies, float[] basebandCn0DbHzs)",
    "returnType" : "GnssStatus",
    "comment" : "\n     * Create a GnssStatus that wraps the given arguments without any additional overhead. Callers\n     * are responsible for guaranteeing that the arguments are never modified after calling this\n     * method.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSatelliteCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the total number of satellites in satellite list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConstellationType(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the constellation type of the satellite at the specified index.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public int getSvid(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "int",
    "comment" : "\n     * Gets the identification number for the satellite at the specific index.\n     *\n     * <p>This svid is pseudo-random number for most constellations. It is FCN &amp; OSN number for\n     * Glonass.\n     *\n     * <p>The distinction is made by looking at constellation field\n     * {@link #getConstellationType(int)} Expected values are in the range of:\n     *\n     * <ul>\n     * <li>GPS: 1-32</li>\n     * <li>SBAS: 120-151, 183-192</li>\n     * <li>GLONASS: One of: OSN, or FCN+100\n     * <ul>\n     * <li>1-24 as the orbital slot number (OSN) (preferred, if known)</li>\n     * <li>93-106 as the frequency channel number (FCN) (-7 to +6) plus 100.\n     * i.e. encode FCN of -7 as 93, 0 as 100, and +6 as 106</li>\n     * </ul></li>\n     * <li>QZSS: 193-200</li>\n     * <li>Galileo: 1-36</li>\n     * <li>Beidou: 1-37</li>\n     * <li>IRNSS: 1-14</li>\n     * </ul>\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getConstellationType", "#getSatelliteCount" ]
  }, {
    "name" : "public float getCn0DbHz(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the carrier-to-noise density at the antenna of the satellite at the specified index\n     * in dB-Hz.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public float getElevationDegrees(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the elevation of the satellite at the specified index.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public float getAzimuthDegrees(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the azimuth the satellite at the specified index.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public boolean hasEphemerisData(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether the satellite at the specified index has ephemeris data.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public boolean hasAlmanacData(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether the satellite at the specified index has almanac data.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public boolean usedInFix(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether the satellite at the specified index was used in the calculation of the most\n     * recent position fix.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public boolean hasCarrierFrequencyHz(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether a valid {@link #getCarrierFrequencyHz(int satelliteIndex)} is available.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getCarrierFrequencyHz", "#getSatelliteCount" ]
  }, {
    "name" : "public float getCarrierFrequencyHz(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "float",
    "comment" : "\n     * Gets the carrier frequency of the signal tracked.\n     *\n     * <p>For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60\n     * MHz, L5 = 1176.45 MHz, varying GLO channels, etc. If the field is not set, it is the primary\n     * common use central frequency, e.g. L1 = 1575.45 MHz for GPS.\n     *\n     * For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two measurements\n     * will be reported for this same satellite, in one all the values related to L1 will be\n     * filled, and in the other all of the values related to L5 will be filled.\n     *\n     * <p>The value is only available if {@link #hasCarrierFrequencyHz(int satelliteIndex)} is\n     * {@code true}.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#hasCarrierFrequencyHz", "#getSatelliteCount" ]
  }, {
    "name" : "public boolean hasBasebandCn0DbHz(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether a valid {@link #getBasebandCn0DbHz(int satelliteIndex)} is available.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getBasebandCn0DbHz", "#getSatelliteCount" ]
  }, {
    "name" : "public float getBasebandCn0DbHz(@IntRange(from = 0) int satelliteIndex)",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the baseband carrier-to-noise density of the satellite at the specified index in\n     * dB-Hz.\n     *\n     * @param satelliteIndex An index from zero to {@link #getSatelliteCount()} - 1\n     ",
    "links" : [ "#getSatelliteCount" ]
  }, {
    "name" : "public static String constellationTypeToString(@ConstellationType int constellationType)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of a constellation type.\n     *\n     * @param constellationType the constellation type.\n     * @return the string representation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "CONSTELLATION_UNKNOWN", "CONSTELLATION_GPS", "CONSTELLATION_SBAS", "CONSTELLATION_GLONASS", "CONSTELLATION_QZSS", "CONSTELLATION_BEIDOU", "CONSTELLATION_GALILEO", "CONSTELLATION_IRNSS", "CONSTELLATION_COUNT", "SVID_FLAGS_NONE", "SVID_FLAGS_HAS_EPHEMERIS_DATA", "SVID_FLAGS_HAS_ALMANAC_DATA", "SVID_FLAGS_USED_IN_FIX", "SVID_FLAGS_HAS_CARRIER_FREQUENCY", "SVID_FLAGS_HAS_BASEBAND_CN0", "SVID_SHIFT_WIDTH", "CONSTELLATION_TYPE_SHIFT_WIDTH", "CONSTELLATION_TYPE_MASK", "mSvCount", "mSvidWithFlags", "mCn0DbHzs", "mElevations", "mAzimuths", "mCarrierFrequencies", "mBasebandCn0DbHzs" ],
  "methodNames" : [ "public static GnssStatus wrap(int svCount, int[] svidWithFlags, float[] cn0DbHzs, float[] elevations, float[] azimuths, float[] carrierFrequencies, float[] basebandCn0DbHzs)", "public int getSatelliteCount()", "public int getConstellationType(@IntRange(from = 0) int satelliteIndex)", "public int getSvid(@IntRange(from = 0) int satelliteIndex)", "public float getCn0DbHz(@IntRange(from = 0) int satelliteIndex)", "public float getElevationDegrees(@IntRange(from = 0) int satelliteIndex)", "public float getAzimuthDegrees(@IntRange(from = 0) int satelliteIndex)", "public boolean hasEphemerisData(@IntRange(from = 0) int satelliteIndex)", "public boolean hasAlmanacData(@IntRange(from = 0) int satelliteIndex)", "public boolean usedInFix(@IntRange(from = 0) int satelliteIndex)", "public boolean hasCarrierFrequencyHz(@IntRange(from = 0) int satelliteIndex)", "public float getCarrierFrequencyHz(@IntRange(from = 0) int satelliteIndex)", "public boolean hasBasebandCn0DbHz(@IntRange(from = 0) int satelliteIndex)", "public float getBasebandCn0DbHz(@IntRange(from = 0) int satelliteIndex)", "public static String constellationTypeToString(@ConstellationType int constellationType)", "public boolean equals(Object o)", "public int hashCode()" ]
}