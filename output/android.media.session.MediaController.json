{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/session/MediaController.java",
  "packageName" : "android.media.session",
  "className" : "MediaController",
  "comment" : "\n * Allows an app to interact with an ongoing media session. Media buttons and\n * other commands can be sent to the session. A callback may be registered to\n * receive updates from the session, such as metadata and play state changes.\n * <p>\n * A MediaController can be created through {@link MediaSessionManager} if you\n * hold the \"android.permission.MEDIA_CONTENT_CONTROL\" permission or are an\n * enabled notification listener or by getting a {@link MediaSession.Token}\n * directly from the session owner.\n * <p>\n * MediaController objects are thread-safe.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_EVENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UPDATE_PLAYBACK_STATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UPDATE_METADATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UPDATE_VOLUME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UPDATE_QUEUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UPDATE_QUEUE_TITLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UPDATE_EXTRAS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DESTROYED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionBinder",
    "type" : "ISessionController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "MediaSession.Token",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCbStub",
    "type" : "CallbackStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "ArrayList<MessageHandler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCbRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionInfo",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportControls",
    "type" : "TransportControls",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TransportControls getTransportControls()",
    "returnType" : "TransportControls",
    "comment" : "\n     * Get a {@link TransportControls} instance to send transport actions to\n     * the associated session.\n     *\n     * @return A transport controls instance.\n     ",
    "links" : [ "TransportControls" ]
  }, {
    "name" : "public boolean dispatchMediaButtonEvent(@NonNull KeyEvent keyEvent)",
    "returnType" : "boolean",
    "comment" : "\n     * Send the specified media button event to the session. Only media keys can\n     * be sent by this method, other keys will be ignored.\n     *\n     * @param keyEvent The media button event to dispatch.\n     * @return true if the event was sent to the session, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PlaybackState getPlaybackState()",
    "returnType" : "PlaybackState",
    "comment" : "\n     * Get the current playback state for this session.\n     *\n     * @return The current PlaybackState or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaMetadata getMetadata()",
    "returnType" : "MediaMetadata",
    "comment" : "\n     * Get the current metadata for this session.\n     *\n     * @return The current MediaMetadata or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<MediaSession.QueueItem> getQueue()",
    "returnType" : "List<MediaSession.QueueItem>",
    "comment" : "\n     * Get the current play queue for this session if one is set. If you only\n     * care about the current item {@link #getMetadata()} should be used.\n     *\n     * @return The current play queue or null.\n     ",
    "links" : [ "#getMetadata()" ]
  }, {
    "name" : "public CharSequence getQueueTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the queue title for this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Get the extras for this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRatingType()",
    "returnType" : "int",
    "comment" : "\n     * Get the rating type supported by the session. One of:\n     * <ul>\n     * <li>{@link Rating#RATING_NONE}</li>\n     * <li>{@link Rating#RATING_HEART}</li>\n     * <li>{@link Rating#RATING_THUMB_UP_DOWN}</li>\n     * <li>{@link Rating#RATING_3_STARS}</li>\n     * <li>{@link Rating#RATING_4_STARS}</li>\n     * <li>{@link Rating#RATING_5_STARS}</li>\n     * <li>{@link Rating#RATING_PERCENTAGE}</li>\n     * </ul>\n     *\n     * @return The supported rating type\n     ",
    "links" : [ "android.media.Rating#RATING_4_STARS", "android.media.Rating#RATING_NONE", "android.media.Rating#RATING_5_STARS", "android.media.Rating#RATING_HEART", "android.media.Rating#RATING_PERCENTAGE", "android.media.Rating#RATING_3_STARS", "android.media.Rating#RATING_THUMB_UP_DOWN" ]
  }, {
    "name" : "public long getFlags()",
    "returnType" : "long",
    "comment" : "\n     * Get the flags for this session. Flags are defined in {@link MediaSession}.\n     *\n     * @return The current set of flags for the session.\n     ",
    "links" : [ "android.media.session.MediaSession" ]
  }, {
    "name" : "public PlaybackInfo getPlaybackInfo()",
    "returnType" : "PlaybackInfo",
    "comment" : "\n     * Get the current playback info for this session.\n     *\n     * @return The current playback info or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PendingIntent getSessionActivity()",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Get an intent for launching UI associated with this session if one\n     * exists.\n     *\n     * @return A {@link PendingIntent} to launch UI or null.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "public MediaSession.Token getSessionToken()",
    "returnType" : "MediaSession.Token",
    "comment" : "\n     * Get the token for the session this is connected to.\n     *\n     * @return The token for the connected session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVolumeTo(int value, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set the volume of the output this session is playing on. The command will\n     * be ignored if it does not support\n     * {@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}. The flags in\n     * {@link AudioManager} may be used to affect the handling.\n     *\n     * @see #getPlaybackInfo()\n     * @param value The value to set it to, between 0 and the reported max.\n     * @param flags Flags from {@link AudioManager} to include with the volume\n     *            request.\n     ",
    "links" : [ "android.media.VolumeProvider#VOLUME_CONTROL_ABSOLUTE", "android.media.AudioManager" ]
  }, {
    "name" : "public void adjustVolume(int direction, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Adjust the volume of the output this session is playing on. The direction\n     * must be one of {@link AudioManager#ADJUST_LOWER},\n     * {@link AudioManager#ADJUST_RAISE}, or {@link AudioManager#ADJUST_SAME}.\n     * The command will be ignored if the session does not support\n     * {@link VolumeProvider#VOLUME_CONTROL_RELATIVE} or\n     * {@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}. The flags in\n     * {@link AudioManager} may be used to affect the handling.\n     *\n     * @see #getPlaybackInfo()\n     * @param direction The direction to adjust the volume in.\n     * @param flags Any flags to pass with the command.\n     ",
    "links" : [ "android.media.AudioManager#ADJUST_RAISE", "android.media.AudioManager#ADJUST_LOWER", "android.media.VolumeProvider#VOLUME_CONTROL_RELATIVE", "android.media.AudioManager#ADJUST_SAME", "android.media.VolumeProvider#VOLUME_CONTROL_ABSOLUTE", "android.media.AudioManager" ]
  }, {
    "name" : "public void registerCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive updates from the Session. Updates will be\n     * posted on the caller's thread.\n     *\n     * @param callback The callback object, must not be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull Callback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive updates from the session. Updates will be\n     * posted on the specified handler's thread.\n     *\n     * @param callback The callback object, must not be null.\n     * @param handler The handler to post updates on. If null the callers thread\n     *            will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the specified callback. If an update has already been posted\n     * you may still receive it after calling this method.\n     *\n     * @param callback The callback to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendCommand(@NonNull String command, @Nullable Bundle args, @Nullable ResultReceiver cb)",
    "returnType" : "void",
    "comment" : "\n     * Sends a generic command to the session. It is up to the session creator\n     * to decide what commands and parameters they will support. As such,\n     * commands should only be sent to sessions that the controller owns.\n     *\n     * @param command The command to send\n     * @param args Any parameters to include with the command\n     * @param cb The callback to receive the result on\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Get the session owner's package name.\n     *\n     * @return The package name of of the session owner.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getSessionInfo()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets the additional session information which was set when the session was created.\n     *\n     * @return The additional session information, or an empty {@link Bundle} if not set.\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "public String getTag()",
    "returnType" : "String",
    "comment" : "\n     * Get the session's tag for debugging purposes.\n     *\n     * @return The session's tag.\n     ",
    "links" : [ ]
  }, {
    "name" : " ISessionController getSessionBinder()",
    "returnType" : "ISessionController",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean controlsSameSession(MediaController other)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addCallbackLocked(Callback cb, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean removeCallbackLocked(Callback cb)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MessageHandler getHandlerForCallbackLocked(Callback cb)",
    "returnType" : "MessageHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postMessage(int what, Object obj, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MSG_EVENT", "MSG_UPDATE_PLAYBACK_STATE", "MSG_UPDATE_METADATA", "MSG_UPDATE_VOLUME", "MSG_UPDATE_QUEUE", "MSG_UPDATE_QUEUE_TITLE", "MSG_UPDATE_EXTRAS", "MSG_DESTROYED", "mSessionBinder", "mToken", "mContext", "mCbStub", "mCallbacks", "mLock", "mCbRegistered", "mPackageName", "mTag", "mSessionInfo", "mTransportControls" ],
  "methodNames" : [ "public TransportControls getTransportControls()", "public boolean dispatchMediaButtonEvent(@NonNull KeyEvent keyEvent)", "public PlaybackState getPlaybackState()", "public MediaMetadata getMetadata()", "public List<MediaSession.QueueItem> getQueue()", "public CharSequence getQueueTitle()", "public Bundle getExtras()", "public int getRatingType()", "public long getFlags()", "public PlaybackInfo getPlaybackInfo()", "public PendingIntent getSessionActivity()", "public MediaSession.Token getSessionToken()", "public void setVolumeTo(int value, int flags)", "public void adjustVolume(int direction, int flags)", "public void registerCallback(@NonNull Callback callback)", "public void registerCallback(@NonNull Callback callback, @Nullable Handler handler)", "public void unregisterCallback(@NonNull Callback callback)", "public void sendCommand(@NonNull String command, @Nullable Bundle args, @Nullable ResultReceiver cb)", "public String getPackageName()", "public Bundle getSessionInfo()", "public String getTag()", " ISessionController getSessionBinder()", "public boolean controlsSameSession(MediaController other)", "private void addCallbackLocked(Callback cb, Handler handler)", "private boolean removeCallbackLocked(Callback cb)", "private MessageHandler getHandlerForCallbackLocked(Callback cb)", "private void postMessage(int what, Object obj, Bundle data)" ]
}