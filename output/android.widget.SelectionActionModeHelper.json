{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/SelectionActionModeHelper.java",
  "packageName" : "android.widget",
  "className" : "SelectionActionModeHelper",
  "comment" : "\n * Helper class for starting selection action mode\n * (synchronously without the TextClassifier, asynchronously with the TextClassifier).\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEditor",
    "type" : "Editor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextClassificationHelper",
    "type" : "TextClassificationHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextClassification",
    "type" : "TextClassification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextClassificationAsyncTask",
    "type" : "AsyncTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionTracker",
    "type" : "SelectionTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmartSelectSprite",
    "type" : "SmartSelectSprite",
    "comment" : " TODO remove nullable marker once the switch gating the feature gets removed",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int[] sortSelctionIndices(int selectionStart, int selectionEnd)",
    "returnType" : "int[]",
    "comment" : "\n     * Swap the selection index if the start index is greater than end index.\n     *\n     * @return the swap result, index 0 is the start index and index 1 is the end index.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] sortSelctionIndicesFromTextView(TextView textView)",
    "returnType" : "int[]",
    "comment" : "\n     * The {@link TextView} selection start and end index may not be sorted, this method will swap\n     * the {@link TextView} selection index if the start index is greater than end index.\n     *\n     * @param textView the selected TextView.\n     * @return the swap result, index 0 is the start index and index 1 is the end index.\n     ",
    "links" : [ "android.widget.TextView" ]
  }, {
    "name" : "public void startSelectionActionModeAsync(boolean adjustSelection)",
    "returnType" : "void",
    "comment" : "\n     * Starts Selection ActionMode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startLinkActionModeAsync(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Starts Link ActionMode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateActionModeAsync()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSelectionAction(int menuItemId, @Nullable String actionLabel)",
    "returnType" : "void",
    "comment" : " Reports a selection action event. ",
    "links" : [ ]
  }, {
    "name" : "public void onSelectionDrag()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTextChanged(int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean resetSelection(int textIndex)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TextClassification getTextClassification()",
    "returnType" : "TextClassification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroyActionMode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDraw(final Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDrawingHighlight()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private TextClassificationConstants getTextClassificationSettings()",
    "returnType" : "TextClassificationConstants",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelAsyncTask()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean skipTextClassification()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startLinkActionMode(@Nullable SelectionResult result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startSelectionActionMode(@Nullable SelectionResult result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startActionMode(@Editor.TextActionMode int actionMode, @Nullable SelectionResult result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startSelectionActionModeWithSmartSelectAnimation(@Nullable SelectionResult result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<SmartSelectSprite.RectangleWithTextSelectionLayout> convertSelectionToRectangles(final Layout layout, final int start, final int end)",
    "returnType" : "List<SmartSelectSprite.RectangleWithTextSelectionLayout>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void mergeRectangleIntoList(final List<T> list, final RectF candidate, final Function<T, RectF> extractor, final Function<RectF, T> packer)",
    "returnType" : "void",
    "comment" : "\n     * Merges a {@link RectF} into an existing list of any objects which contain a rectangle.\n     * While merging, this method makes sure that:\n     *\n     * <ol>\n     * <li>No rectangle is redundant (contained within a bigger rectangle)</li>\n     * <li>Rectangles of the same height and vertical position that intersect get merged</li>\n     * </ol>\n     *\n     * @param list      the list of rectangles (or other rectangle containers) to merge the new\n     *                  rectangle into\n     * @param candidate the {@link RectF} to merge into the list\n     * @param extractor a function that can extract a {@link RectF} from an element of the given\n     *                  list\n     * @param packer    a function that can wrap the resulting {@link RectF} into an element that\n     *                  the list contains\n     * @hide\n     ",
    "links" : [ "android.graphics.RectF" ]
  }, {
    "name" : "public static PointF movePointInsideNearestRectangle(final PointF point, final List<T> list, final Function<T, RectF> extractor)",
    "returnType" : "PointF",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void invalidateActionMode(@Nullable SelectionResult result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetTextClassificationHelper(int selectionStart, int selectionEnd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetTextClassificationHelper()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelSmartSelectAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getActionType(int menuItemId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CharSequence getText(TextView textView)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "mEditor", "mTextView", "mTextClassificationHelper", "mTextClassification", "mTextClassificationAsyncTask", "mSelectionTracker", "mSmartSelectSprite" ],
  "methodNames" : [ "private static int[] sortSelctionIndices(int selectionStart, int selectionEnd)", "private static int[] sortSelctionIndicesFromTextView(TextView textView)", "public void startSelectionActionModeAsync(boolean adjustSelection)", "public void startLinkActionModeAsync(int start, int end)", "public void invalidateActionModeAsync()", "public void onSelectionAction(int menuItemId, @Nullable String actionLabel)", "public void onSelectionDrag()", "public void onTextChanged(int start, int end)", "public boolean resetSelection(int textIndex)", "public TextClassification getTextClassification()", "public void onDestroyActionMode()", "public void onDraw(final Canvas canvas)", "public boolean isDrawingHighlight()", "private TextClassificationConstants getTextClassificationSettings()", "private void cancelAsyncTask()", "private boolean skipTextClassification()", "private void startLinkActionMode(@Nullable SelectionResult result)", "private void startSelectionActionMode(@Nullable SelectionResult result)", "private void startActionMode(@Editor.TextActionMode int actionMode, @Nullable SelectionResult result)", "private void startSelectionActionModeWithSmartSelectAnimation(@Nullable SelectionResult result)", "private List<SmartSelectSprite.RectangleWithTextSelectionLayout> convertSelectionToRectangles(final Layout layout, final int start, final int end)", "public static void mergeRectangleIntoList(final List<T> list, final RectF candidate, final Function<T, RectF> extractor, final Function<RectF, T> packer)", "public static PointF movePointInsideNearestRectangle(final PointF point, final List<T> list, final Function<T, RectF> extractor)", "private void invalidateActionMode(@Nullable SelectionResult result)", "private void resetTextClassificationHelper(int selectionStart, int selectionEnd)", "private void resetTextClassificationHelper()", "private void cancelSmartSelectAnimation()", "private static int getActionType(int menuItemId)", "private static CharSequence getText(TextView textView)" ]
}