{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/ValueIterator.java",
  "packageName" : "android.icu.util",
  "className" : "ValueIterator",
  "comment" : "\n * <p>Interface for enabling iteration over sets of &lt;int, Object&gt;, where\n * int is the sorted integer index in ascending order, and Object its\n * associated value.\n * <p>The ValueIterator allows iterations over integer indexes in the range\n * of Integer.MIN_VALUE to Integer.MAX_VALUE inclusive. Implementations of\n * ValueIterator should specify their own maximum subrange within the above\n * range that is meaningful to its applications.\n * <p>Most implementations will be created by factory methods, such as the\n * character name iterator in UCharacter.getNameIterator. See example below.\n *\n * Example of use:<br>\n * <pre>\n * ValueIterator iterator = UCharacter.getNameIterator();\n * ValueIterator.Element result = new ValueIterator.Element();\n * iterator.setRange(UCharacter.MIN_VALUE, UCharacter.MAX_VALUE);\n * while (iterator.next(result)) {\n *     System.out.println(\"Codepoint \\\\u\" +\n *                        Integer.toHexString(result.integer) +\n *                        \" has the character name \" + (String)result.value);\n * }\n * </pre>\n * @author synwee\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean next(Element element)",
    "returnType" : "boolean",
    "comment" : "\n    * <p>Returns the next result for this iteration and returns\n    * true if we are not at the end of the iteration, false otherwise.\n    * <p>If this returns a false, the contents of elements will not\n    * be updated.\n    * @param element for storing the result index and value\n    * @return true if we are not at the end of the iteration, false otherwise.\n    * @see Element\n    ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n    * <p>Resets the iterator to start iterating from the integer index\n    * Integer.MIN_VALUE or X if a setRange(X, Y) has been called previously.\n    ",
    "links" : [ ]
  }, {
    "name" : "public void setRange(int start, int limit)",
    "returnType" : "void",
    "comment" : "\n     * <p>Restricts the range of integers to iterate and resets the iteration\n     * to begin at the index argument start.\n     * <p>If setRange(start, end) is not performed before next(element) is\n     * called, the iteration will start from the integer index\n     * Integer.MIN_VALUE and end at Integer.MAX_VALUE.\n     * <p>\n     * If this range is set outside the meaningful range specified by the\n     * implementation, next(element) will always return false.\n     *\n     * @param start first integer in the range to iterate\n     * @param limit one more than the last integer in the range\n     * @exception IllegalArgumentException thrown when attempting to set an\n     *            illegal range. E.g limit &lt;= start\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean next(Element element)", "public void reset()", "public void setRange(int start, int limit)" ],
  "variableNames" : [ ]
}