{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowProviderService.java",
  "packageName" : "android.window",
  "className" : "WindowProviderService",
  "comment" : "\n * A {@link Service} responsible for showing a non-activity window, such as software keyboards or\n * accessibility overlay windows. This {@link Service} has similar behavior to\n * {@link WindowContext}, but is represented as {@link Service}.\n *\n * @see android.inputmethodservice.InputMethodService\n *\n * @hide\n ",
  "links" : [ "android.app.Service", "android.window.WindowContext" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptions",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowToken",
    "type" : "WindowTokenClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mController",
    "type" : "WindowContextController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacksController",
    "type" : "ComponentCallbacksController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isWindowProviderService(@Nullable Bundle windowContextOptions)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the {@code windowContextOptions} declares that it is a\n     * {@link WindowProviderService}.\n     *\n     * @hide\n     ",
    "links" : [ "android.window.WindowProviderService" ]
  }, {
    "name" : "public abstract int getWindowType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the window type of this {@link WindowProviderService}.\n     * Each inheriting class must implement this method to provide the type of the window. It is\n     * used similar to {@code type} of {@link Context#createWindowContext(int, Bundle)}\n     *\n     * @see Context#createWindowContext(int, Bundle)\n     *\n     * @hide\n     ",
    "links" : [ "android.annotation.UiContext#createWindowContext(int", "android.window.WindowProviderService" ]
  }, {
    "name" : "public Bundle getWindowContextOptions()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the option of this {@link WindowProviderService}.\n     * <p>\n     * The inheriting class can implement this method to provide the customization {@code option} of\n     * the window, but must be based on this method's returned value.\n     * It is used similar to {@code options} of {@link Context#createWindowContext(int, Bundle)}\n     * </p>\n     * <pre class=\"prettyprint\">\n     * public Bundle getWindowContextOptions() {\n     *     final Bundle options = super.getWindowContextOptions();\n     *     options.put(KEY_ROOT_DISPLAY_AREA_ID, displayAreaInfo.rootDisplayAreaId);\n     *     return options;\n     * }\n     * </pre>\n     *\n     * @hide\n     ",
    "links" : [ "android.annotation.UiContext#createWindowContext(int", "android.window.WindowProviderService" ]
  }, {
    "name" : "public void registerComponentCallbacks(@NonNull ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterComponentCallbacks(@NonNull ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(@NonNull Configuration configuration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLowMemory()",
    "returnType" : "void",
    "comment" : "\n     * Override {@link Service}'s empty implementation and listen to {@code ActivityThread} for\n     * low memory and trim memory events.\n     ",
    "links" : [ "android.app.Service" ]
  }, {
    "name" : "public void onTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInitialDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the display ID to launch this {@link WindowProviderService}.\n     *\n     * @hide\n     ",
    "links" : [ "android.window.WindowProviderService" ]
  }, {
    "name" : "public final void attachToWindowToken(@NonNull IBinder windowToken)",
    "returnType" : "void",
    "comment" : "\n     * Attaches this WindowProviderService to the {@code windowToken}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Context createServiceBaseContext(ActivityThread mainThread, LoadedApk packageInfo)",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void attachBaseContext(Context newBase)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Object getSystemService(@NonNull String name)",
    "returnType" : "Object",
    "comment" : " Suppress the lint because ths is overridden from Context.",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isWindowProviderService(@Nullable Bundle windowContextOptions)", "public abstract int getWindowType()", "public Bundle getWindowContextOptions()", "public void registerComponentCallbacks(@NonNull ComponentCallbacks callback)", "public void unregisterComponentCallbacks(@NonNull ComponentCallbacks callback)", "public void onConfigurationChanged(@NonNull Configuration configuration)", "public void onLowMemory()", "public void onTrimMemory(int level)", "public int getInitialDisplayId()", "public final void attachToWindowToken(@NonNull IBinder windowToken)", "public final Context createServiceBaseContext(ActivityThread mainThread, LoadedApk packageInfo)", "protected void attachBaseContext(Context newBase)", "public Object getSystemService(@NonNull String name)", "public void onDestroy()" ],
  "variableNames" : [ "TAG", "mOptions", "mWindowToken", "mController", "mWindowManager", "mInitialized", "mCallbacksController" ]
}