{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/GridLayout.java",
  "packageName" : "android.widget",
  "className" : "Alignment",
  "comment" : "\n     * An Alignment implementation must define {@link #getAlignmentValue(View, int, int)},\n     * to return the appropriate value for the type of alignment being defined.\n     * The enclosing algorithms position the children\n     * so that the locations defined by the alignment values\n     * are the same for all of the views in a group.\n     * <p>\n     ",
  "links" : [ "#getAlignmentValue(View" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " abstract int getGravityOffset(View view, int cellDelta)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract int getAlignmentValue(View view, int viewSize, int mode)",
    "returnType" : "int",
    "comment" : "\n         * Returns an alignment value. In the case of vertical alignments the value\n         * returned should indicate the distance from the top of the view to the\n         * alignment location.\n         * For horizontal alignments measurement is made from the left edge of the component.\n         *\n         * @param view              the view to which this alignment should be applied\n         * @param viewSize          the measured size of the view\n         * @param mode              the basis of alignment: CLIP or OPTICAL\n         * @return the alignment value\n         ",
    "links" : [ ]
  }, {
    "name" : " int getSizeInCell(View view, int viewSize, int cellSize)",
    "returnType" : "int",
    "comment" : "\n         * Returns the size of the view specified by this alignment.\n         * In the case of vertical alignments this method should return a height; for\n         * horizontal alignments this method should return the width.\n         * <p>\n         * The default implementation returns {@code viewSize}.\n         *\n         * @param view              the view to which this alignment should be applied\n         * @param viewSize          the measured size of the view\n         * @param cellSize          the size of the cell into which this view will be placed\n         * @return the aligned size\n         ",
    "links" : [ ]
  }, {
    "name" : " Bounds getBounds()",
    "returnType" : "Bounds",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract int getGravityOffset(View view, int cellDelta)", " abstract int getAlignmentValue(View view, int viewSize, int mode)", " int getSizeInCell(View view, int viewSize, int cellSize)", " Bounds getBounds()" ],
  "variableNames" : [ ]
}