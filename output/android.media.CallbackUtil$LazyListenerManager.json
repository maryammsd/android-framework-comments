{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/CallbackUtil.java",
  "packageName" : "android.media",
  "className" : "LazyListenerManager",
  "comment" : "\n     * Class to manage a list of listeners and their callback, and the associated stub which\n     * receives the events to be forwarded to the listeners.\n     * The list of listeners and the stub and its registration are lazily initialized and registered\n     * @param <T> the listener class\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayList<ListenerInfo<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatcherStub",
    "type" : "DispatcherStub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void addListener(@NonNull Executor executor, @NonNull T listener, String methodName, @NonNull java.util.function.Supplier<DispatcherStub> newStub)",
    "returnType" : "void",
    "comment" : "\n         * Add a new listener / executor pair for the configured listener\n         * @param executor Executor for the callback\n         * @param listener the listener to register\n         * @param methodName the name of the method calling this utility method for easier to read\n         *          exception messages\n         * @param newStub how to build a new instance of the stub receiving the events when the\n         *          number of listeners goes from 0 to 1, not called until then.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeListener(@NonNull T listener, String methodName)",
    "returnType" : "void",
    "comment" : "\n         * Remove a previously registered listener\n         * @param listener the listener to unregister\n         * @param methodName the name of the method calling this utility method for easier to read\n         *          exception messages\n         ",
    "links" : [ ]
  }, {
    "name" : " void callListeners(CallbackMethod<T> callback)",
    "returnType" : "void",
    "comment" : "\n         * Call the registered listeners with the given callback method\n         * @param callback the listener method to invoke\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void addListener(@NonNull Executor executor, @NonNull T listener, String methodName, @NonNull java.util.function.Supplier<DispatcherStub> newStub)", " void removeListener(@NonNull T listener, String methodName)", " void callListeners(CallbackMethod<T> callback)" ],
  "variableNames" : [ "mListenerLock", "mListeners", "mDispatcherStub" ]
}