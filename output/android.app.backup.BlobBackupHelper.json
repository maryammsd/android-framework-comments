{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/backup/BlobBackupHelper.java",
  "packageName" : "android.app.backup",
  "className" : "BlobBackupHelper",
  "comment" : "\n * Utility class for writing BackupHelpers whose underlying data is a\n * fixed set of byte-array blobs.  The helper manages diff detection\n * and compression on the wire.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentBlobVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeys",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract byte[] getBackupPayload(String key)",
    "returnType" : "byte[]",
    "comment" : "\n     * Generate and return the byte array containing the backup payload describing\n     * the current data state.  During a backup operation this method is called once\n     * per key that was supplied to the helper's constructor.\n     *\n     * @return A byte array containing the data blob that the caller wishes to store,\n     *     or {@code null} if the current state is empty or undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void applyRestoredPayload(String key, byte[] payload)",
    "returnType" : "void",
    "comment" : "\n     * Given a byte array that was restored from backup, do whatever is appropriate\n     * to apply that described state in the live system.  This method is called once\n     * per key/value payload that was delivered for restore.  Typically data is delivered\n     * for restore in lexical order by key, <i>not</i> in the order in which the keys\n     * were supplied in the constructor.\n     *\n     * @param payload The byte array that was passed to {@link #getBackupPayload()}\n     *     on the ancestral device.\n     ",
    "links" : [ "#getBackupPayload()" ]
  }, {
    "name" : "private ArrayMap<String, Long> readOldState(ParcelFileDescriptor oldStateFd)",
    "returnType" : "ArrayMap<String, Long>",
    "comment" : "\n     * State on-disk format:\n     * [Int]    : overall blob version number\n     * [Int=N] : number of keys represented in the state blob\n     * N* :\n     *     [String] key\n     *     [Long]   blob checksum, calculated after compression\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeBackupState(ArrayMap<String, Long> state, ParcelFileDescriptor stateFile)",
    "returnType" : "void",
    "comment" : "\n     * New overall state record\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte[] deflate(byte[] data)",
    "returnType" : "byte[]",
    "comment" : " Also versions the deflated blob internally in case we need to revise it",
    "links" : [ ]
  }, {
    "name" : "private byte[] inflate(byte[] compressedData)",
    "returnType" : "byte[]",
    "comment" : " Returns null if inflation failed",
    "links" : [ ]
  }, {
    "name" : "private long checksum(byte[] buffer)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performBackup(ParcelFileDescriptor oldStateFd, BackupDataOutput data, ParcelFileDescriptor newStateFd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void restoreEntity(BackupDataInputStream data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeNewStateDescription(ParcelFileDescriptor newState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract byte[] getBackupPayload(String key)", "protected abstract void applyRestoredPayload(String key, byte[] payload)", "private ArrayMap<String, Long> readOldState(ParcelFileDescriptor oldStateFd)", "private void writeBackupState(ArrayMap<String, Long> state, ParcelFileDescriptor stateFile)", "private byte[] deflate(byte[] data)", "private byte[] inflate(byte[] compressedData)", "private long checksum(byte[] buffer)", "public void performBackup(ParcelFileDescriptor oldStateFd, BackupDataOutput data, ParcelFileDescriptor newStateFd)", "public void restoreEntity(BackupDataInputStream data)", "public void writeNewStateDescription(ParcelFileDescriptor newState)" ],
  "variableNames" : [ "TAG", "DEBUG", "mCurrentBlobVersion", "mKeys" ]
}