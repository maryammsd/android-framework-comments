{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioRouting.java",
  "packageName" : "android.media",
  "className" : "AudioRouting",
  "comment" : "\n * AudioRouting defines an interface for controlling routing and routing notifications in\n * AudioTrack and AudioRecord objects.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean setPreferredDevice(AudioDeviceInfo deviceInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Specifies an audio device (via an {@link AudioDeviceInfo} object) to route\n     * the output/input to/from.\n     * @param deviceInfo The {@link AudioDeviceInfo} specifying the audio sink or source.\n     *  If deviceInfo is null, default routing is restored.\n     * @return true if succesful, false if the specified {@link AudioDeviceInfo} is non-null and\n     * does not correspond to a valid audio device.\n     ",
    "links" : [ "android.media.AudioDeviceInfo" ]
  }, {
    "name" : "public AudioDeviceInfo getPreferredDevice()",
    "returnType" : "AudioDeviceInfo",
    "comment" : "\n     * Returns the selected output/input specified by {@link #setPreferredDevice}. Note that this\n     * is not guaranteed to correspond to the actual device being used for playback/recording.\n     ",
    "links" : [ "#setPreferredDevice" ]
  }, {
    "name" : "public AudioDeviceInfo getRoutedDevice()",
    "returnType" : "AudioDeviceInfo",
    "comment" : "\n     * Returns an {@link AudioDeviceInfo} identifying the current routing of this\n     * AudioTrack/AudioRecord.\n     * Note: The query is only valid if the AudioTrack/AudioRecord is currently playing.\n     * If it is not, <code>getRoutedDevice()</code> will return null.\n     ",
    "links" : [ "android.media.AudioDeviceInfo" ]
  }, {
    "name" : "public void addOnRoutingChangedListener(OnRoutingChangedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing\n     * changes on this AudioTrack/AudioRecord.\n     * @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive\n     * notifications of rerouting events.\n     * @param handler  Specifies the {@link Handler} object for the thread on which to execute\n     * the callback. If <code>null</code>, the {@link Handler} associated with the main\n     * {@link Looper} will be used.\n     ",
    "links" : [ "android.os.Handler", "android.os.Looper", "AudioRouting.OnRoutingChangedListener" ]
  }, {
    "name" : "public void removeOnRoutingChangedListener(OnRoutingChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes an {@link AudioRouting.OnRoutingChangedListener} which has been previously added\n     * to receive rerouting notifications.\n     * @param listener The previously added {@link AudioRouting.OnRoutingChangedListener} interface\n     * to remove.\n     ",
    "links" : [ "AudioRouting.OnRoutingChangedListener" ]
  } ],
  "methodNames" : [ "public boolean setPreferredDevice(AudioDeviceInfo deviceInfo)", "public AudioDeviceInfo getPreferredDevice()", "public AudioDeviceInfo getRoutedDevice()", "public void addOnRoutingChangedListener(OnRoutingChangedListener listener, Handler handler)", "public void removeOnRoutingChangedListener(OnRoutingChangedListener listener)" ],
  "variableNames" : [ ]
}