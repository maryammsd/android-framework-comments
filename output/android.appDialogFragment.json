{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/DialogFragment.java",
  "packageName" : "android.app",
  "className" : "DialogFragment",
  "comment" : "\n * A fragment that displays a dialog window, floating on top of its\n * activity's window.  This fragment contains a Dialog object, which it\n * displays as appropriate based on the fragment's state.  Control of\n * the dialog (deciding when to show, hide, dismiss it) should be done through\n * the API here, not with direct calls on the dialog.\n *\n * <p>Implementations should override this class and implement\n * {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} to supply the\n * content of the dialog.  Alternatively, they can override\n * {@link #onCreateDialog(Bundle)} to create an entirely custom dialog, such\n * as an AlertDialog, with its own content.\n *\n * <p>Topics covered here:\n * <ol>\n * <li><a href=\"#Lifecycle\">Lifecycle</a>\n * <li><a href=\"#BasicDialog\">Basic Dialog</a>\n * <li><a href=\"#AlertDialog\">Alert Dialog</a>\n * <li><a href=\"#DialogOrEmbed\">Selecting Between Dialog or Embedding</a>\n * </ol>\n *\n * <a name=\"Lifecycle\"></a>\n * <h3>Lifecycle</h3>\n *\n * <p>DialogFragment does various things to keep the fragment's lifecycle\n * driving it, instead of the Dialog.  Note that dialogs are generally\n * autonomous entities -- they are their own window, receiving their own\n * input events, and often deciding on their own when to disappear (by\n * receiving a back key event or the user clicking on a button).\n *\n * <p>DialogFragment needs to ensure that what is happening with the Fragment\n * and Dialog states remains consistent.  To do this, it watches for dismiss\n * events from the dialog and takes care of removing its own state when they\n * happen.  This means you should use {@link #show(FragmentManager, String)}\n * or {@link #show(FragmentTransaction, String)} to add an instance of\n * DialogFragment to your UI, as these keep track of how DialogFragment should\n * remove itself when the dialog is dismissed.\n *\n * <a name=\"BasicDialog\"></a>\n * <h3>Basic Dialog</h3>\n *\n * <p>The simplest use of DialogFragment is as a floating container for the\n * fragment's view hierarchy.  A simple implementation may look like this:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialog.java\n *      dialog}\n *\n * <p>An example showDialog() method on the Activity could be:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialog.java\n *      add_dialog}\n *\n * <p>This removes any currently shown dialog, creates a new DialogFragment\n * with an argument, and shows it as a new state on the back stack.  When the\n * transaction is popped, the current DialogFragment and its Dialog will be\n * destroyed, and the previous one (if any) re-shown.  Note that in this case\n * DialogFragment will take care of popping the transaction of the Dialog\n * is dismissed separately from it.\n *\n * <a name=\"AlertDialog\"></a>\n * <h3>Alert Dialog</h3>\n *\n * <p>Instead of (or in addition to) implementing {@link #onCreateView} to\n * generate the view hierarchy inside of a dialog, you may implement\n * {@link #onCreateDialog(Bundle)} to create your own custom Dialog object.\n *\n * <p>This is most useful for creating an {@link AlertDialog}, allowing you\n * to display standard alerts to the user that are managed by a fragment.\n * A simple example implementation of this is:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentAlertDialog.java\n *      dialog}\n *\n * <p>The activity creating this fragment may have the following methods to\n * show the dialog and receive results from it:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentAlertDialog.java\n *      activity}\n *\n * <p>Note that in this case the fragment is not placed on the back stack, it\n * is just added as an indefinitely running fragment.  Because dialogs normally\n * are modal, this will still operate as a back stack, since the dialog will\n * capture user input until it is dismissed.  When it is dismissed, DialogFragment\n * will take care of removing itself from its fragment manager.\n *\n * <a name=\"DialogOrEmbed\"></a>\n * <h3>Selecting Between Dialog or Embedding</h3>\n *\n * <p>A DialogFragment can still optionally be used as a normal fragment, if\n * desired.  This is useful if you have a fragment that in some cases should\n * be shown as a dialog and others embedded in a larger UI.  This behavior\n * will normally be automatically selected for you based on how you are using\n * the fragment, but can be customized with {@link #setShowsDialog(boolean)}.\n *\n * <p>For example, here is a simple dialog fragment:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialogOrActivity.java\n *      dialog}\n *\n * <p>An instance of this fragment can be created and shown as a dialog:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialogOrActivity.java\n *      show_dialog}\n *\n * <p>It can also be added as content in a view hierarchy:\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialogOrActivity.java\n *      embed}\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link android.support.v4.app.DialogFragment} for consistent behavior across all devices\n *      and access to <a href=\"{@docRoot}topic/libraries/architecture/lifecycle.html\">Lifecycle</a>.\n ",
  "variables" : [ {
    "name" : "STYLE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Style for {@link #setStyle(int, int)}: a basic,\n     * normal dialog.\n     ",
    "links" : [ "#setStyle" ]
  }, {
    "name" : "STYLE_NO_TITLE",
    "type" : "int",
    "comment" : "\n     * Style for {@link #setStyle(int, int)}: don't include\n     * a title area.\n     ",
    "links" : [ "#setStyle" ]
  }, {
    "name" : "STYLE_NO_FRAME",
    "type" : "int",
    "comment" : "\n     * Style for {@link #setStyle(int, int)}: don't draw\n     * any frame at all; the view hierarchy returned by {@link #onCreateView}\n     * is entirely responsible for drawing the dialog.\n     ",
    "links" : [ "#setStyle", "#onCreateView" ]
  }, {
    "name" : "STYLE_NO_INPUT",
    "type" : "int",
    "comment" : "\n     * Style for {@link #setStyle(int, int)}: like\n     * {@link #STYLE_NO_FRAME}, but also disables all input to the dialog.\n     * The user can not touch it, and its window will not receive input focus.\n     ",
    "links" : [ "#setStyle", "#STYLE_NO_FRAME" ]
  }, {
    "name" : "SAVED_DIALOG_STATE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAVED_STYLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAVED_THEME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAVED_CANCELABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAVED_SHOWS_DIALOG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAVED_BACK_STACK_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTheme",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowsDialog",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackStackId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialog",
    "type" : "Dialog",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDismissed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShownByMe",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setStyle(int style, int theme)",
    "returnType" : "void",
    "comment" : "\n     * Call to customize the basic appearance and behavior of the\n     * fragment's dialog.  This can be used for some common dialog behaviors,\n     * taking care of selecting flags, theme, and other options for you.  The\n     * same effect can be achieve by manually setting Dialog and Window\n     * attributes yourself.  Calling this after the fragment's Dialog is\n     * created will have no effect.\n     *\n     * @param style Selects a standard style: may be {@link #STYLE_NORMAL},\n     * {@link #STYLE_NO_TITLE}, {@link #STYLE_NO_FRAME}, or\n     * {@link #STYLE_NO_INPUT}.\n     * @param theme Optional custom theme.  If 0, an appropriate theme (based\n     * on the style) will be selected for you.\n     ",
    "links" : [ "#STYLE_NORMAL", "#STYLE_NO_TITLE", "#STYLE_NO_FRAME", "#STYLE_NO_INPUT" ]
  }, {
    "name" : "public void show(FragmentManager manager, String tag)",
    "returnType" : "void",
    "comment" : "\n     * Display the dialog, adding the fragment to the given FragmentManager.  This\n     * is a convenience for explicitly creating a transaction, adding the\n     * fragment to it with the given tag, and committing it.  This does\n     * <em>not</em> add the transaction to the back stack.  When the fragment\n     * is dismissed, a new transaction will be executed to remove it from\n     * the activity.\n     * @param manager The FragmentManager this fragment will be added to.\n     * @param tag The tag for this fragment, as per\n     * {@link FragmentTransaction#add(Fragment, String) FragmentTransaction.add}.\n     ",
    "links" : [ "FragmentTransaction#add" ]
  }, {
    "name" : "public void showAllowingStateLoss(FragmentManager manager, String tag)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int show(FragmentTransaction transaction, String tag)",
    "returnType" : "int",
    "comment" : "\n     * Display the dialog, adding the fragment using an existing transaction\n     * and then committing the transaction.\n     * @param transaction An existing transaction in which to add the fragment.\n     * @param tag The tag for this fragment, as per\n     * {@link FragmentTransaction#add(Fragment, String) FragmentTransaction.add}.\n     * @return Returns the identifier of the committed transaction, as per\n     * {@link FragmentTransaction#commit() FragmentTransaction.commit()}.\n     ",
    "links" : [ "FragmentTransaction#add", "FragmentTransaction#commit" ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Dismiss the fragment and its dialog.  If the fragment was added to the\n     * back stack, all back stack state up to and including this entry will\n     * be popped.  Otherwise, a new transaction will be committed to remove\n     * the fragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dismissAllowingStateLoss()",
    "returnType" : "void",
    "comment" : "\n     * Version of {@link #dismiss()} that uses\n     * {@link FragmentTransaction#commitAllowingStateLoss()\n     * FragmentTransaction.commitAllowingStateLoss()}.  See linked\n     * documentation for further details.\n     ",
    "links" : [ "#dismiss", "FragmentTransaction#commitAllowingStateLoss" ]
  }, {
    "name" : " void dismissInternal(boolean allowStateLoss)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Dialog getDialog()",
    "returnType" : "Dialog",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTheme()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCancelable(boolean cancelable)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the shown Dialog is cancelable.  Use this instead of\n     * directly calling {@link Dialog#setCancelable(boolean)\n     * Dialog.setCancelable(boolean)}, because DialogFragment needs to change\n     * its behavior based on this.\n     *\n     * @param cancelable If true, the dialog is cancelable.  The default\n     * is true.\n     ",
    "links" : [ "Dialog#setCancelable" ]
  }, {
    "name" : "public boolean isCancelable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the current value of {@link #setCancelable(boolean)}.\n     ",
    "links" : [ "#setCancelable" ]
  }, {
    "name" : "public void setShowsDialog(boolean showsDialog)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether this fragment should be shown in a dialog.  If not\n     * set, no Dialog will be created in {@link #onActivityCreated(Bundle)},\n     * and the fragment's view hierarchy will thus not be added to it.  This\n     * allows you to instead use it as a normal fragment (embedded inside of\n     * its activity).\n     *\n     * <p>This is normally set for you based on whether the fragment is\n     * associated with a container view ID passed to\n     * {@link FragmentTransaction#add(int, Fragment) FragmentTransaction.add(int, Fragment)}.\n     * If the fragment was added with a container, setShowsDialog will be\n     * initialized to false; otherwise, it will be true.\n     *\n     * @param showsDialog If true, the fragment will be displayed in a Dialog.\n     * If false, no Dialog will be created and the fragment's view hierarchly\n     * left undisturbed.\n     ",
    "links" : [ "#onActivityCreated", "FragmentTransaction#add" ]
  }, {
    "name" : "public boolean getShowsDialog()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the current value of {@link #setShowsDialog(boolean)}.\n     ",
    "links" : [ "#setShowsDialog" ]
  }, {
    "name" : "public void onAttach(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetach()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState)",
    "returnType" : "LayoutInflater",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Dialog onCreateDialog(Bundle savedInstanceState)",
    "returnType" : "Dialog",
    "comment" : "\n     * Override to build your own custom Dialog container.  This is typically\n     * used to show an AlertDialog instead of a generic Dialog; when doing so,\n     * {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} does not need\n     * to be implemented since the AlertDialog takes care of its own content.\n     * \n     * <p>This method will be called after {@link #onCreate(Bundle)} and\n     * before {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}.  The\n     * default implementation simply instantiates and returns a {@link Dialog}\n     * class.\n     * \n     * <p><em>Note: DialogFragment own the {@link Dialog#setOnCancelListener\n     * Dialog.setOnCancelListener} and {@link Dialog#setOnDismissListener\n     * Dialog.setOnDismissListener} callbacks.  You must not set them yourself.</em>\n     * To find out about these events, override {@link #onCancel(DialogInterface)}\n     * and {@link #onDismiss(DialogInterface)}.</p>\n     * \n     * @param savedInstanceState The last saved instance state of the Fragment,\n     * or null if this is a freshly created Fragment.\n     * \n     * @return Return a new Dialog instance to be displayed by the Fragment.\n     ",
    "links" : [ "#onCreateView", "#onCreate", "#onCreateView", "Dialog", "Dialog#setOnCancelListener", "Dialog#setOnDismissListener", "#onCancel", "#onDismiss" ]
  }, {
    "name" : "public void onCancel(DialogInterface dialog)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDismiss(DialogInterface dialog)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onActivityCreated(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSaveInstanceState(Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroyView()",
    "returnType" : "void",
    "comment" : "\n     * Remove dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STYLE_NORMAL", "STYLE_NO_TITLE", "STYLE_NO_FRAME", "STYLE_NO_INPUT", "SAVED_DIALOG_STATE_TAG", "SAVED_STYLE", "SAVED_THEME", "SAVED_CANCELABLE", "SAVED_SHOWS_DIALOG", "SAVED_BACK_STACK_ID", "mStyle", "mTheme", "mCancelable", "mShowsDialog", "mBackStackId", "mDialog", "mViewDestroyed", "mDismissed", "mShownByMe" ],
  "methodNames" : [ "public void setStyle(int style, int theme)", "public void show(FragmentManager manager, String tag)", "public void showAllowingStateLoss(FragmentManager manager, String tag)", "public int show(FragmentTransaction transaction, String tag)", "public void dismiss()", "public void dismissAllowingStateLoss()", " void dismissInternal(boolean allowStateLoss)", "public Dialog getDialog()", "public int getTheme()", "public void setCancelable(boolean cancelable)", "public boolean isCancelable()", "public void setShowsDialog(boolean showsDialog)", "public boolean getShowsDialog()", "public void onAttach(Context context)", "public void onDetach()", "public void onCreate(Bundle savedInstanceState)", "public LayoutInflater onGetLayoutInflater(Bundle savedInstanceState)", "public Dialog onCreateDialog(Bundle savedInstanceState)", "public void onCancel(DialogInterface dialog)", "public void onDismiss(DialogInterface dialog)", "public void onActivityCreated(Bundle savedInstanceState)", "public void onStart()", "public void onSaveInstanceState(Bundle outState)", "public void onStop()", "public void onDestroyView()", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ]
}