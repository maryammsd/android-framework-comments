{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/role/RoleManager.java",
  "packageName" : "android.app.role",
  "className" : "RoleManager",
  "comment" : "\n * This class provides information about and manages roles.\n * <p>\n * A role is a unique name within the system associated with certain privileges. The list of\n * available roles might change with a system app update, so apps should not make assumption about\n * the availability of roles. Instead, they should always query if the role is available using\n * {@link #isRoleAvailable(String)} before trying to do anything with it. Some predefined role names\n * are available as constants in this class, and a list of possibly available roles can be found in\n * the <a href=\"{@docRoot}reference/androidx/core/role/package-summary.html\">AndroidX Role\n * library</a>.\n * <p>\n * There can be multiple applications qualifying for a role, but only a subset of them can become\n * role holders. To qualify for a role, an application must meet certain requirements, including\n * defining certain components in its manifest. These requirements can be found in the AndroidX\n * Libraries. Then the application will need user consent to become a role holder, which can be\n * requested using {@link android.app.Activity#startActivityForResult(Intent, int)} with the\n * {@code Intent} obtained from {@link #createRequestRoleIntent(String)}.\n * <p>\n * Upon becoming a role holder, the application may be granted certain privileges that are role\n * specific. When the application loses its role, these privileges will also be revoked.\n ",
  "links" : [ "android.app.Activity#startActivityForResult(Intent", "#isRoleAvailable(String)", "#createRequestRoleIntent(String)" ],
  "variables" : [ {
    "name" : "ROLE_ASSISTANT",
    "type" : "String",
    "comment" : "\n     * The name of the assistant app role.\n     *\n     * @see android.service.voice.VoiceInteractionService\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_BROWSER",
    "type" : "String",
    "comment" : "\n     * The name of the browser role.\n     *\n     * @see Intent#CATEGORY_APP_BROWSER\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_DIALER",
    "type" : "String",
    "comment" : "\n     * The name of the dialer role.\n     *\n     * @see Intent#ACTION_DIAL\n     * @see android.telecom.InCallService\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_SMS",
    "type" : "String",
    "comment" : "\n     * The name of the SMS role.\n     *\n     * @see Intent#CATEGORY_APP_MESSAGING\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_EMERGENCY",
    "type" : "String",
    "comment" : "\n     * The name of the emergency role\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_HOME",
    "type" : "String",
    "comment" : "\n     * The name of the home role.\n     *\n     * @see Intent#CATEGORY_HOME\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_CALL_REDIRECTION",
    "type" : "String",
    "comment" : "\n     * The name of the call redirection role.\n     * <p>\n     * A call redirection app provides a means to re-write the phone number for an outgoing call to\n     * place the call through a call redirection service.\n     *\n     * @see android.telecom.CallRedirectionService\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_CALL_SCREENING",
    "type" : "String",
    "comment" : "\n     * The name of the call screening and caller id role.\n     *\n     * @see android.telecom.CallScreeningService\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_NOTES",
    "type" : "String",
    "comment" : "\n     * The name of the notes role.\n     *\n     * @see Intent#ACTION_CREATE_NOTE\n     * @see Intent#EXTRA_USE_STYLUS_MODE\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_WALLET",
    "type" : "String",
    "comment" : "\n     * The name of the Wallet role.\n     *\n     * @see android.nfc.cardemulation.CardEmulation\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_SYSTEM_WELLBEING",
    "type" : "String",
    "comment" : "\n     * The name of the system wellbeing role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_SYSTEM_SUPERVISION",
    "type" : "String",
    "comment" : "\n     * The name of the system supervision role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_SYSTEM_ACTIVITY_RECOGNIZER",
    "type" : "String",
    "comment" : "\n     * The name of the system activity recognizer role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_DEVICE_POLICY_MANAGEMENT",
    "type" : "String",
    "comment" : "\n     * The name of the device policy management role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_FINANCED_DEVICE_KIOSK",
    "type" : "String",
    "comment" : "\n     * The name of the financed device kiosk role.\n     *\n     * A financed device is a device purchased through a creditor and typically paid back under an\n     * installment plan.\n     * The creditor has the ability to lock a financed device in case of payment default.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLE_SYSTEM_CALL_STREAMING",
    "type" : "String",
    "comment" : "\n     * The name of the system call streaming role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MANAGE_HOLDERS_FLAG_DONT_KILL_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #addRoleHolderAsUser}, {@link #removeRoleHolderAsUser} and\n     * {@link #clearRoleHoldersAsUser} to indicate that apps should not be killed when changing\n     * their role holder status.\n     *\n     * @hide\n     ",
    "links" : [ "#removeRoleHolderAsUser", "#clearRoleHoldersAsUser", "#addRoleHolderAsUser" ]
  }, {
    "name" : "ROLE_MANAGER_USER_HANDLE_AWARE",
    "type" : "long",
    "comment" : "\n     * For apps targeting Android V and above, several methods are now user-handle-aware, which\n     * means they use the user contained within the context. For apps targeting an SDK version\n     * <em>below</em> this, the user of the calling process will be used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_REQUEST_ROLE",
    "type" : "String",
    "comment" : "\n     * The action used to request user approval of a role for an application.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_MANAGE_ROLES_FROM_CONTROLLER",
    "type" : "String",
    "comment" : "\n     * The permission required to manage records of role holders in {@link RoleManager} directly.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.role.RoleManager" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IRoleManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "SparseArray<ArrayMap<OnRoleHoldersChangedListener, OnRoleHoldersChangedListenerDelegate>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenersLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoleControllerManager",
    "type" : "RoleControllerManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoleControllerManagerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Intent createRequestRoleIntent(@NonNull String roleName)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@code Intent} suitable for passing to\n     * {@link android.app.Activity#startActivityForResult(Intent, int)} which prompts the user to\n     * grant a role to this application.\n     * <p>\n     * If the role is granted, the {@code resultCode} will be\n     * {@link android.app.Activity#RESULT_OK}, otherwise it will be\n     * {@link android.app.Activity#RESULT_CANCELED}.\n     *\n     * @param roleName the name of requested role\n     *\n     * @return the {@code Intent} to prompt user to grant the role\n     ",
    "links" : [ "android.app.Activity#RESULT_CANCELED", "android.app.Activity#RESULT_OK", "android.app.Activity#startActivityForResult(Intent" ]
  }, {
    "name" : "public boolean isRoleAvailable(@NonNull String roleName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a role is available in the system.\n     *\n     * @param roleName the name of role to checking for\n     *\n     * @return whether the role is available in the system\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoleHeld(@NonNull String roleName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the calling application is holding a particular role.\n     *\n     * @param roleName the name of the role to check for\n     *\n     * @return whether the calling application is holding the role\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getRoleHolders(@NonNull String roleName)",
    "returnType" : "List<String>",
    "comment" : "\n     * Get package names of the applications holding the role.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.MANAGE_ROLE_HOLDERS}.\n     *\n     * @param roleName the name of the role to get the role holder for\n     *\n     * @return a list of package names of the role holders, or an empty list if none.\n     *\n     * @see #getRoleHoldersAsUser(String, UserHandle)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getRoleHoldersAsUser(@NonNull String roleName, @NonNull UserHandle user)",
    "returnType" : "List<String>",
    "comment" : "\n     * Get package names of the applications holding the role.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.MANAGE_ROLE_HOLDERS} and if the user id is not the current user\n     * {@code android.permission.INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @param roleName the name of the role to get the role holder for\n     * @param user the user to get the role holder for\n     *\n     * @return a list of package names of the role holders, or an empty list if none.\n     *\n     * @see #addRoleHolderAsUser(String, String, int, UserHandle, Executor, Consumer)\n     * @see #removeRoleHolderAsUser(String, String, int, UserHandle, Executor, Consumer)\n     * @see #clearRoleHoldersAsUser(String, int, UserHandle, Executor, Consumer)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRoleHolderAsUser(@NonNull String roleName, @NonNull String packageName, @ManageHoldersFlags int flags, @NonNull UserHandle user, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Add a specific application to the holders of a role. If the role is exclusive, the previous\n     * holder will be replaced.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.MANAGE_ROLE_HOLDERS} and if the user id is not the current user\n     * {@code android.permission.INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @param roleName the name of the role to add the role holder for\n     * @param packageName the package name of the application to add to the role holders\n     * @param flags optional behavior flags\n     * @param user the user to add the role holder for\n     * @param executor the {@code Executor} to run the callback on.\n     * @param callback the callback for whether this call is successful\n     *\n     * @see #getRoleHoldersAsUser(String, UserHandle)\n     * @see #removeRoleHolderAsUser(String, String, int, UserHandle, Executor, Consumer)\n     * @see #clearRoleHoldersAsUser(String, int, UserHandle, Executor, Consumer)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeRoleHolderAsUser(@NonNull String roleName, @NonNull String packageName, @ManageHoldersFlags int flags, @NonNull UserHandle user, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove a specific application from the holders of a role.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.MANAGE_ROLE_HOLDERS} and if the user id is not the current user\n     * {@code android.permission.INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @param roleName the name of the role to remove the role holder for\n     * @param packageName the package name of the application to remove from the role holders\n     * @param flags optional behavior flags\n     * @param user the user to remove the role holder for\n     * @param executor the {@code Executor} to run the callback on.\n     * @param callback the callback for whether this call is successful\n     *\n     * @see #getRoleHoldersAsUser(String, UserHandle)\n     * @see #addRoleHolderAsUser(String, String, int, UserHandle, Executor, Consumer)\n     * @see #clearRoleHoldersAsUser(String, int, UserHandle, Executor, Consumer)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearRoleHoldersAsUser(@NonNull String roleName, @ManageHoldersFlags int flags, @NonNull UserHandle user, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove all holders of a role.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.MANAGE_ROLE_HOLDERS} and if the user id is not the current user\n     * {@code android.permission.INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @param roleName the name of the role to remove role holders for\n     * @param flags optional behavior flags\n     * @param user the user to remove role holders for\n     * @param executor the {@code Executor} to run the callback on.\n     * @param callback the callback for whether this call is successful\n     *\n     * @see #getRoleHoldersAsUser(String, UserHandle)\n     * @see #addRoleHolderAsUser(String, String, int, UserHandle, Executor, Consumer)\n     * @see #removeRoleHolderAsUser(String, String, int, UserHandle, Executor, Consumer)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultApplication(@NonNull String roleName)",
    "returnType" : "String",
    "comment" : "\n     * Get package name of the application holding the role for a default application.\n     * <p>\n     * Only roles describing default applications can be used with this method. They can have\n     * at most one holder.\n     *\n     * @param roleName the name of the default application role to get\n     *\n     * @return a package name of the role holder or {@code null} if not set.\n     *\n     * @see #setDefaultApplication(String, String, int, Executor, Consumer)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultApplication(@NonNull String roleName, @Nullable String packageName, @ManageHoldersFlags int flags, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Set a specific application as the default application.\n     * <p>\n     * Only roles describing default applications can be used with this method. They can have\n     * at most one holder.\n     *\n     * @param roleName the name of the default application role to set the role holder for\n     * @param packageName the package name of the application to set as the default application,\n     *                    or {@code null} to unset.\n     * @param flags optional behavior flags\n     * @param executor the {@code Executor} to run the callback on.\n     * @param callback the callback for whether this call is successful\n     *\n     * @see #getDefaultApplication(String)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static RemoteCallback createRemoteCallback(@NonNull Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "RemoteCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnRoleHoldersChangedListenerAsUser(@CallbackExecutor @NonNull Executor executor, @NonNull OnRoleHoldersChangedListener listener, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to observe role holder changes\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.OBSERVE_ROLE_HOLDERS} and if the user id is not the current user\n     * {@code android.permission.INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @param executor the {@code Executor} to call the listener on.\n     * @param listener the listener to be added\n     * @param user the user to add the listener for\n     *\n     * @see #removeOnRoleHoldersChangedListenerAsUser(OnRoleHoldersChangedListener, UserHandle)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnRoleHoldersChangedListenerAsUser(@NonNull OnRoleHoldersChangedListener listener, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener observing role holder changes\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@code android.permission.OBSERVE_ROLE_HOLDERS} and if the user id is not the current user\n     * {@code android.permission.INTERACT_ACROSS_USERS_FULL}.\n     *\n     * @param listener the listener to be removed\n     * @param user the user to remove the listener for\n     *\n     * @see #addOnRoleHoldersChangedListenerAsUser(Executor, OnRoleHoldersChangedListener,\n     *                                             UserHandle)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBypassingRoleQualification()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether role qualifications should be bypassed.\n     * <p>\n     * Only the shell is allowed to do this, the qualification for the shell role itself cannot be\n     * bypassed, and each role needs to explicitly allow bypassing qualification in its definition.\n     * The bypass state will not be persisted across reboot.\n     *\n     * @return whether role qualification should be bypassed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBypassingRoleQualification(boolean bypassRoleQualification)",
    "returnType" : "void",
    "comment" : "\n     * Set whether role qualifications should be bypassed.\n     * <p>\n     * Only the shell is allowed to do this, the qualification for the shell role itself cannot be\n     * bypassed, and each role needs to explicitly allow bypassing qualification in its definition.\n     * The bypass state will not be persisted across reboot.\n     *\n     * @param bypassRoleQualification whether role qualification should be bypassed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoleFallbackEnabled(@NonNull String roleName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether role currently enables fallback to default holder.\n     * <p>\n     * This is based on the \"None\" holder being actively selected, in which case don't fallback.\n     *\n     * @param roleName the name of the role being queried\n     *\n     * @return whether fallback is enabled for the provided role\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoleFallbackEnabled(@NonNull String roleName, boolean fallbackEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether role should fallback to a default role holder.\n     *\n     * @param roleName the name of the role being queried.\n     * @param fallbackEnabled whether to enable fallback holders for this role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoleNamesFromController(@NonNull List<String> roleNames)",
    "returnType" : "void",
    "comment" : "\n     * Set the names of all the available roles. Should only be called from\n     * {@link android.app.role.RoleControllerService}.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@link #PERMISSION_MANAGE_ROLES_FROM_CONTROLLER}.\n     *\n     * @param roleNames the names of all the available roles\n     *\n     * @deprecated This is only usable by the role controller service, which is an internal\n     *             implementation detail inside role.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.role.RoleControllerService", "#PERMISSION_MANAGE_ROLES_FROM_CONTROLLER" ]
  }, {
    "name" : "public boolean addRoleHolderFromController(@NonNull String roleName, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a specific application to the holders of a role, only modifying records inside\n     * {@link RoleManager}. Should only be called from\n     * {@link android.app.role.RoleControllerService}.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@link #PERMISSION_MANAGE_ROLES_FROM_CONTROLLER}.\n     *\n     * @param roleName the name of the role to add the role holder for\n     * @param packageName the package name of the application to add to the role holders\n     *\n     * @return whether the operation was successful, and will also be {@code true} if a matching\n     *         role holder is already found.\n     *\n     * @see #getRoleHolders(String)\n     * @see #removeRoleHolderFromController(String, String)\n     *\n     * @deprecated This is only usable by the role controller service, which is an internal\n     *             implementation detail inside role.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.role.RoleManager", "android.app.role.RoleControllerService", "#PERMISSION_MANAGE_ROLES_FROM_CONTROLLER" ]
  }, {
    "name" : "public boolean removeRoleHolderFromController(@NonNull String roleName, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove a specific application from the holders of a role, only modifying records inside\n     * {@link RoleManager}. Should only be called from\n     * {@link android.app.role.RoleControllerService}.\n     * <p>\n     * <strong>Note:</strong> Using this API requires holding\n     * {@link #PERMISSION_MANAGE_ROLES_FROM_CONTROLLER}.\n     *\n     * @param roleName the name of the role to remove the role holder for\n     * @param packageName the package name of the application to remove from the role holders\n     *\n     * @return whether the operation was successful, and will also be {@code true} if no matching\n     *         role holder was found to remove.\n     *\n     * @see #getRoleHolders(String)\n     * @see #addRoleHolderFromController(String, String)\n     *\n     * @deprecated This is only usable by the role controller service, which is an internal\n     *             implementation detail inside role.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.role.RoleManager", "android.app.role.RoleControllerService", "#PERMISSION_MANAGE_ROLES_FROM_CONTROLLER" ]
  }, {
    "name" : "public List<String> getHeldRolesFromController(@NonNull String packageName)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of all roles that the given package is currently holding\n     *\n     * @param packageName the package name\n     * @return the list of role names\n     *\n     * @deprecated This is only usable by the role controller service, which is an internal\n     *             implementation detail inside role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private UserHandle getContextUserIfAppropriate()",
    "returnType" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBrowserRoleHolder(@UserIdInt int userId)",
    "returnType" : "String",
    "comment" : "\n     * Get the role holder of {@link #ROLE_BROWSER} without requiring\n     * {@link Manifest.permission#OBSERVE_ROLE_HOLDERS}, as in\n     * {@link android.content.pm.PackageManager#getDefaultBrowserPackageNameAsUser(int)}\n     *\n     * @param userId the user ID\n     * @return the package name of the default browser, or {@code null} if none\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getDefaultBrowserPackageNameAsUser(int)", "Manifest.permission#OBSERVE_ROLE_HOLDERS", "#ROLE_BROWSER" ]
  }, {
    "name" : "public boolean setBrowserRoleHolder(@Nullable String packageName, @UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the role holder of {@link #ROLE_BROWSER} requiring\n     * {@link Manifest.permission.SET_PREFERRED_APPLICATIONS} instead of\n     * {@link Manifest.permission#MANAGE_ROLE_HOLDERS}, as in\n     * {@link android.content.pm.PackageManager#setDefaultBrowserPackageNameAsUser(String, int)}\n     *\n     * @param packageName the package name of the default browser, or {@code null} if none\n     * @param userId the user ID\n     * @return whether the default browser was set successfully\n     *\n     * @hide\n     ",
    "links" : [ "Manifest.permission.SET_PREFERRED_APPLICATIONS", "Manifest.permission#MANAGE_ROLE_HOLDERS", "android.content.pm.PackageManager#setDefaultBrowserPackageNameAsUser(String", "#ROLE_BROWSER" ]
  }, {
    "name" : "public String getSmsRoleHolder(@UserIdInt int userId)",
    "returnType" : "String",
    "comment" : "\n     * Allows getting the role holder for {@link #ROLE_SMS} without requiring\n     * {@link Manifest.permission#OBSERVE_ROLE_HOLDERS}, as in\n     * {@link android.provider.Telephony.Sms#getDefaultSmsPackage(Context)}.\n     *\n     * @param userId the user ID to get the default SMS package for\n     * @return the package name of the default SMS app, or {@code null} if none\n     *\n     * @hide\n     ",
    "links" : [ "#ROLE_SMS", "android.provider.Telephony.Sms#getDefaultSmsPackage(Context)", "Manifest.permission#OBSERVE_ROLE_HOLDERS" ]
  }, {
    "name" : "public String getEmergencyRoleHolder(@UserIdInt int userId)",
    "returnType" : "String",
    "comment" : "\n     * Allows getting the role holder for {@link #ROLE_EMERGENCY} without requiring\n     * {@link Manifest.permission#OBSERVE_ROLE_HOLDERS}.\n     *\n     * @param userId the user ID to get the default emergency package for\n     * @return the package name of the default emergency app, or {@code null} if none\n     *\n     * @hide\n     ",
    "links" : [ "#ROLE_EMERGENCY", "Manifest.permission#OBSERVE_ROLE_HOLDERS" ]
  }, {
    "name" : "public void isRoleVisible(@NonNull String roleName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Check whether a role should be visible to user.\n     *\n     * @param roleName name of the role to check for\n     * @param executor the executor to execute callback on\n     * @param callback the callback to receive whether the role should be visible to user\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void isApplicationVisibleForRole(@NonNull String roleName, @NonNull String packageName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Check whether an application is visible for a role.\n     *\n     * While an application can be qualified for a role, it can still stay hidden from user (thus\n     * not visible). If an application is visible for a role, we may show things related to the role\n     * for it, e.g. showing an entry pointing to the role settings in its application info page.\n     *\n     * @param roleName the name of the role to check for\n     * @param packageName the package name of the application to check for\n     * @param executor the executor to execute callback on\n     * @param callback the callback to receive whether the application is visible for the role\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private RoleControllerManager getRoleControllerManager()",
    "returnType" : "RoleControllerManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Intent createRequestRoleIntent(@NonNull String roleName)", "public boolean isRoleAvailable(@NonNull String roleName)", "public boolean isRoleHeld(@NonNull String roleName)", "public List<String> getRoleHolders(@NonNull String roleName)", "public List<String> getRoleHoldersAsUser(@NonNull String roleName, @NonNull UserHandle user)", "public void addRoleHolderAsUser(@NonNull String roleName, @NonNull String packageName, @ManageHoldersFlags int flags, @NonNull UserHandle user, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)", "public void removeRoleHolderAsUser(@NonNull String roleName, @NonNull String packageName, @ManageHoldersFlags int flags, @NonNull UserHandle user, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)", "public void clearRoleHoldersAsUser(@NonNull String roleName, @ManageHoldersFlags int flags, @NonNull UserHandle user, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)", "public String getDefaultApplication(@NonNull String roleName)", "public void setDefaultApplication(@NonNull String roleName, @Nullable String packageName, @ManageHoldersFlags int flags, @CallbackExecutor @NonNull Executor executor, @NonNull Consumer<Boolean> callback)", "private static RemoteCallback createRemoteCallback(@NonNull Executor executor, @NonNull Consumer<Boolean> callback)", "public void addOnRoleHoldersChangedListenerAsUser(@CallbackExecutor @NonNull Executor executor, @NonNull OnRoleHoldersChangedListener listener, @NonNull UserHandle user)", "public void removeOnRoleHoldersChangedListenerAsUser(@NonNull OnRoleHoldersChangedListener listener, @NonNull UserHandle user)", "public boolean isBypassingRoleQualification()", "public void setBypassingRoleQualification(boolean bypassRoleQualification)", "public boolean isRoleFallbackEnabled(@NonNull String roleName)", "public void setRoleFallbackEnabled(@NonNull String roleName, boolean fallbackEnabled)", "public void setRoleNamesFromController(@NonNull List<String> roleNames)", "public boolean addRoleHolderFromController(@NonNull String roleName, @NonNull String packageName)", "public boolean removeRoleHolderFromController(@NonNull String roleName, @NonNull String packageName)", "public List<String> getHeldRolesFromController(@NonNull String packageName)", "private UserHandle getContextUserIfAppropriate()", "public String getBrowserRoleHolder(@UserIdInt int userId)", "public boolean setBrowserRoleHolder(@Nullable String packageName, @UserIdInt int userId)", "public String getSmsRoleHolder(@UserIdInt int userId)", "public String getEmergencyRoleHolder(@UserIdInt int userId)", "public void isRoleVisible(@NonNull String roleName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void isApplicationVisibleForRole(@NonNull String roleName, @NonNull String packageName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "private RoleControllerManager getRoleControllerManager()" ],
  "variableNames" : [ "ROLE_ASSISTANT", "ROLE_BROWSER", "ROLE_DIALER", "ROLE_SMS", "ROLE_EMERGENCY", "ROLE_HOME", "ROLE_CALL_REDIRECTION", "ROLE_CALL_SCREENING", "ROLE_NOTES", "ROLE_WALLET", "ROLE_SYSTEM_WELLBEING", "ROLE_SYSTEM_SUPERVISION", "ROLE_SYSTEM_ACTIVITY_RECOGNIZER", "ROLE_DEVICE_POLICY_MANAGEMENT", "ROLE_FINANCED_DEVICE_KIOSK", "ROLE_SYSTEM_CALL_STREAMING", "MANAGE_HOLDERS_FLAG_DONT_KILL_APP", "ROLE_MANAGER_USER_HANDLE_AWARE", "ACTION_REQUEST_ROLE", "PERMISSION_MANAGE_ROLES_FROM_CONTROLLER", "mContext", "mService", "mListeners", "mListenersLock", "mRoleControllerManager", "mRoleControllerManagerLock" ]
}