{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/DatagramSocket.java",
  "packageName" : "java.net",
  "className" : "DatagramSocket",
  "comment" : "\n * This class represents a socket for sending and receiving datagram packets.\n *\n * <p>A datagram socket is the sending or receiving point for a packet\n * delivery service. Each packet sent or received on a datagram socket\n * is individually addressed and routed. Multiple packets sent from\n * one machine to another may be routed differently, and may arrive in\n * any order.\n *\n * <p> Where possible, a newly constructed {@code DatagramSocket} has the\n * {@link SocketOptions#SO_BROADCAST SO_BROADCAST} socket option enabled so as\n * to allow the transmission of broadcast datagrams. In order to receive\n * broadcast packets a DatagramSocket should be bound to the wildcard address.\n * In some implementations, broadcast packets may also be received when\n * a DatagramSocket is bound to a more specific address.\n * <p>\n * Example:\n * {@code\n *              DatagramSocket s = new DatagramSocket(null);\n *              s.bind(new InetSocketAddress(8888));\n * }\n * Which is equivalent to:\n * {@code\n *              DatagramSocket s = new DatagramSocket(8888);\n * }\n * Both cases will create a DatagramSocket able to receive broadcasts on\n * UDP port 8888.\n *\n * @author  Pavani Diwanji\n * @see     java.net.DatagramPacket\n * @see     java.nio.channels.DatagramChannel\n * @since JDK1.0\n ",
  "links" : [ "java.net.SocketOptions#SO_BROADCAST" ],
  "variables" : [ {
    "name" : "created",
    "type" : "boolean",
    "comment" : "\n     * Various states of this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "bound",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impl",
    "type" : "DatagramSocketImpl",
    "comment" : "\n     * The implementation of this DatagramSocket.\n     ",
    "links" : [ ]
  }, {
    "name" : "oldImpl",
    "type" : "boolean",
    "comment" : "\n     * Are we using an older DatagramSocketImpl?\n     ",
    "links" : [ ]
  }, {
    "name" : "explicitFilter",
    "type" : "boolean",
    "comment" : "\n     * Set when a socket is ST_CONNECTED until we are certain\n     * that any packets which might have been received prior\n     * to calling connect() but not read by the application\n     * have been read. During this time we check the source\n     * address of all packets received to be sure they are from\n     * the connected destination. Other packets are read but\n     * silently dropped.\n     ",
    "links" : [ ]
  }, {
    "name" : "bytesLeftToFilter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_NOT_CONNECTED",
    "type" : "int",
    "comment" : "\n     * Connection state:\n     * ST_NOT_CONNECTED = socket not connected\n     * ST_CONNECTED = socket connected\n     * ST_CONNECTED_NO_IMPL = socket connected but not at impl level\n     ",
    "links" : [ ]
  }, {
    "name" : "ST_CONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_CONNECTED_NO_IMPL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connectState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connectedAddress",
    "type" : "InetAddress",
    "comment" : "\n     * Connected address & port\n     ",
    "links" : [ ]
  }, {
    "name" : "connectedPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pendingConnectException",
    "type" : "SocketException",
    "comment" : " Android-added: Store pending exception from connect",
    "links" : [ ]
  }, {
    "name" : "implClass",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "factory",
    "type" : "DatagramSocketImplFactory",
    "comment" : "\n     * User defined factory for all datagram sockets.\n     ",
    "links" : [ ]
  }, {
    "name" : "options",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "optionsSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private synchronized void connectInternal(InetAddress address, int port) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Connects this socket to a remote socket address (IP address + port number).\n     * Binds socket if not already bound.\n     *\n     * @param   address The remote address.\n     * @param   port    The remote port\n     * @throws  SocketException if binding the socket fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkOldImpl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createImpl() throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DatagramSocketImpl getImpl() throws SocketException",
    "returnType" : "DatagramSocketImpl",
    "comment" : "\n     * Get the {@code DatagramSocketImpl} attached to this socket,\n     * creating it if necessary.\n     *\n     * @return  the {@code DatagramSocketImpl} attached to that\n     *          DatagramSocket\n     * @throws SocketException if creation fails.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void bind(SocketAddress addr) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Binds this DatagramSocket to a specific address and port.\n     * <p>\n     * If the address is {@code null}, then the system will pick up\n     * an ephemeral port and a valid local address to bind the socket.\n     *\n     * @param   addr The address and port to bind to.\n     * @throws  SocketException if any error happens during the bind, or if the\n     *          socket is already bound.\n     * @throws  SecurityException  if a security manager exists and its\n     *             {@code checkListen} method doesn't allow the operation.\n     * @throws IllegalArgumentException if addr is a SocketAddress subclass\n     *         not supported by this socket.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkAddress(InetAddress addr, String op)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(InetAddress address, int port)",
    "returnType" : "void",
    "comment" : "\n     * Connects the socket to a remote address for this socket. When a\n     * socket is connected to a remote address, packets may only be\n     * sent to or received from that address. By default a datagram\n     * socket is not connected.\n     *\n     * <p>If the remote destination to which the socket is connected does not\n     * exist, or is otherwise unreachable, and if an ICMP destination unreachable\n     * packet has been received for that address, then a subsequent call to\n     * send or receive may throw a PortUnreachableException. Note, there is no\n     * guarantee that the exception will be thrown.\n     *\n     * <p> If a security manager has been installed then it is invoked to check\n     * access to the remote address. Specifically, if the given {@code address}\n     * is a {@link InetAddress#isMulticastAddress multicast address},\n     * the security manager's {@link\n     * java.lang.SecurityManager#checkMulticast(InetAddress)\n     * checkMulticast} method is invoked with the given {@code address}.\n     * Otherwise, the security manager's {@link\n     * java.lang.SecurityManager#checkConnect(String,int) checkConnect}\n     * and {@link java.lang.SecurityManager#checkAccept checkAccept} methods\n     * are invoked, with the given {@code address} and {@code port}, to\n     * verify that datagrams are permitted to be sent and received\n     * respectively.\n     *\n     * <p> When a socket is connected, {@link #receive receive} and\n     * {@link #send send} <b>will not perform any security checks</b>\n     * on incoming and outgoing packets, other than matching the packet's\n     * and the socket's address and port. On a send operation, if the\n     * packet's address is set and the packet's address and the socket's\n     * address do not match, an {@code IllegalArgumentException} will be\n     * thrown. A socket connected to a multicast address may only be used\n     * to send packets.\n     *\n     * @param address the remote address for the socket\n     *\n     * @param port the remote port for the socket.\n     *\n     * @throws IllegalArgumentException\n     *         if the address is null, or the port is out of range.\n     *\n     * @throws SecurityException\n     *         if a security manager has been installed and it does\n     *         not permit access to the given remote address\n     *\n     * @see #disconnect\n     ",
    "links" : [ "java.lang.SecurityManager#checkConnect(String", "#send", "java.lang.SecurityManager#checkMulticast(InetAddress)", "#receive", "java.net.InetAddress#isMulticastAddress", "java.lang.SecurityManager#checkAccept" ]
  }, {
    "name" : "public void connect(SocketAddress addr) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Connects this socket to a remote socket address (IP address + port number).\n     *\n     * <p> If given an {@link InetSocketAddress InetSocketAddress}, this method\n     * behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}\n     * with the given socket addresses IP address and port number.\n     *\n     * @param   addr    The remote address.\n     *\n     * @throws  SocketException\n     *          if the connect fails\n     *\n     * @throws IllegalArgumentException\n     *         if {@code addr} is {@code null}, or {@code addr} is a SocketAddress\n     *         subclass not supported by this socket\n     *\n     * @throws SecurityException\n     *         if a security manager has been installed and it does\n     *         not permit access to the given remote address\n     *\n     * @since 1.4\n     ",
    "links" : [ "#connect(InetAddress", "java.net.InetSocketAddress" ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects the socket. If the socket is closed or not connected,\n     * then this method has no effect.\n     *\n     * @see #connect\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBound()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the binding state of the socket.\n     * <p>\n     * If the socket was bound prior to being {@link #close closed},\n     * then this method will continue to return {@code true}\n     * after the socket is closed.\n     *\n     * @return true if the socket successfully bound to an address\n     * @since 1.4\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the connection state of the socket.\n     * <p>\n     * If the socket was connected prior to being {@link #close closed},\n     * then this method will continue to return {@code true}\n     * after the socket is closed.\n     *\n     * @return true if the socket successfully connected to a server\n     * @since 1.4\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public InetAddress getInetAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the address to which this socket is connected. Returns\n     * {@code null} if the socket is not connected.\n     * <p>\n     * If the socket was connected prior to being {@link #close closed},\n     * then this method will continue to return the connected address\n     * after the socket is closed.\n     *\n     * @return the address to which this socket is connected.\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the port number to which this socket is connected.\n     * Returns {@code -1} if the socket is not connected.\n     * <p>\n     * If the socket was connected prior to being {@link #close closed},\n     * then this method will continue to return the connected port number\n     * after the socket is closed.\n     *\n     * @return the port number to which this socket is connected.\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public SocketAddress getRemoteSocketAddress()",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Returns the address of the endpoint this socket is connected to, or\n     * {@code null} if it is unconnected.\n     * <p>\n     * If the socket was connected prior to being {@link #close closed},\n     * then this method will continue to return the connected address\n     * after the socket is closed.\n     *\n     * @return a {@code SocketAddress} representing the remote\n     *         endpoint of this socket, or {@code null} if it is\n     *         not connected yet.\n     * @see #getInetAddress()\n     * @see #getPort()\n     * @see #connect(SocketAddress)\n     * @since 1.4\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public SocketAddress getLocalSocketAddress()",
    "returnType" : "SocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void send(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sends a datagram packet from this socket. The\n     * {@code DatagramPacket} includes information indicating the\n     * data to be sent, its length, the IP address of the remote host,\n     * and the port number on the remote host.\n     *\n     * <p>If there is a security manager, and the socket is not currently\n     * connected to a remote address, this method first performs some\n     * security checks. First, if {@code p.getAddress().isMulticastAddress()}\n     * is true, this method calls the\n     * security manager's {@code checkMulticast} method\n     * with {@code p.getAddress()} as its argument.\n     * If the evaluation of that expression is false,\n     * this method instead calls the security manager's\n     * {@code checkConnect} method with arguments\n     * {@code p.getAddress().getHostAddress()} and\n     * {@code p.getPort()}. Each call to a security manager method\n     * could result in a SecurityException if the operation is not allowed.\n     *\n     * @param      p   the {@code DatagramPacket} to be sent.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkMulticast} or {@code checkConnect}\n     *             method doesn't allow the send.\n     * @exception  PortUnreachableException may be thrown if the socket is connected\n     *             to a currently unreachable destination. Note, there is no\n     *             guarantee that the exception will be thrown.\n     * @exception  java.nio.channels.IllegalBlockingModeException\n     *             if this socket has an associated channel,\n     *             and the channel is in non-blocking mode.\n     * @exception  IllegalArgumentException if the socket is connected,\n     *             and connected address and packet address differ.\n     *\n     * @see        java.net.DatagramPacket\n     * @see        SecurityManager#checkMulticast(InetAddress)\n     * @see        SecurityManager#checkConnect\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void receive(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receives a datagram packet from this socket. When this method\n     * returns, the {@code DatagramPacket}'s buffer is filled with\n     * the data received. The datagram packet also contains the sender's\n     * IP address, and the port number on the sender's machine.\n     * <p>\n     * This method blocks until a datagram is received. The\n     * {@code length} field of the datagram packet object contains\n     * the length of the received message. If the message is longer than\n     * the packet's length, the message is truncated.\n     * <p>\n     * If there is a security manager, a packet cannot be received if the\n     * security manager's {@code checkAccept} method\n     * does not allow it.\n     *\n     * @param      p   the {@code DatagramPacket} into which to place\n     *                 the incoming data.\n     * @exception  IOException  if an I/O error occurs.\n     * @exception  SocketTimeoutException  if setSoTimeout was previously called\n     *                 and the timeout has expired.\n     * @exception  PortUnreachableException may be thrown if the socket is connected\n     *             to a currently unreachable destination. Note, there is no guarantee that the\n     *             exception will be thrown.\n     * @exception  java.nio.channels.IllegalBlockingModeException\n     *             if this socket has an associated channel,\n     *             and the channel is in non-blocking mode.\n     * @see        java.net.DatagramPacket\n     * @see        java.net.DatagramSocket\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkFiltering(DatagramPacket p) throws SocketException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getLocalAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Gets the local address to which the socket is bound.\n     *\n     * <p>If there is a security manager, its\n     * {@code checkConnect} method is first called\n     * with the host address and {@code -1}\n     * as its arguments to see if the operation is allowed.\n     *\n     * @see SecurityManager#checkConnect\n     * @return  the local address to which the socket is bound,\n     *          {@code null} if the socket is closed, or\n     *          an {@code InetAddress} representing\n     *          {@link InetAddress#isAnyLocalAddress wildcard}\n     *          address if either the socket is not bound, or\n     *          the security manager {@code checkConnect}\n     *          method does not allow the operation\n     * @since   1.1\n     ",
    "links" : [ "java.net.InetAddress#isAnyLocalAddress" ]
  }, {
    "name" : "public int getLocalPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the port number on the local host to which this socket\n     * is bound.\n     *\n     * @return  the port number on the local host to which this socket is bound,\n                {@code -1} if the socket is closed, or\n                {@code 0} if it is not bound yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSoTimeout(int timeout) throws SocketException",
    "returnType" : "void",
    "comment" : " Enable/disable SO_TIMEOUT with the specified timeout, in\n     *  milliseconds. With this option set to a non-zero timeout,\n     *  a call to receive() for this DatagramSocket\n     *  will block for only this amount of time.  If the timeout expires,\n     *  a <B>java.net.SocketTimeoutException</B> is raised, though the\n     *  DatagramSocket is still valid.  The option <B>must</B> be enabled\n     *  prior to entering the blocking operation to have effect.  The\n     *  timeout must be {@code > 0}.\n     *  A timeout of zero is interpreted as an infinite timeout.\n     *\n     * @param timeout the specified timeout in milliseconds.\n     * @throws SocketException if there is an error in the underlying protocol, such as an UDP error.\n     * @since   1.1\n     * @see #getSoTimeout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getSoTimeout() throws SocketException",
    "returnType" : "int",
    "comment" : "\n     * Retrieve setting for SO_TIMEOUT.  0 returns implies that the\n     * option is disabled (i.e., timeout of infinity).\n     *\n     * @return the setting for SO_TIMEOUT\n     * @throws SocketException if there is an error in the underlying protocol, such as an UDP error.\n     * @since   1.1\n     * @see #setSoTimeout(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSendBufferSize(int size) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Sets the SO_SNDBUF option to the specified value for this\n     * {@code DatagramSocket}. The SO_SNDBUF option is used by the\n     * network implementation as a hint to size the underlying\n     * network I/O buffers. The SO_SNDBUF setting may also be used\n     * by the network implementation to determine the maximum size\n     * of the packet that can be sent on this socket.\n     * <p>\n     * As SO_SNDBUF is a hint, applications that want to verify\n     * what size the buffer is should call {@link #getSendBufferSize()}.\n     * <p>\n     * Increasing the buffer size may allow multiple outgoing packets\n     * to be queued by the network implementation when the send rate\n     * is high.\n     * <p>\n     * Note: If {@link #send(DatagramPacket)} is used to send a\n     * {@code DatagramPacket} that is larger than the setting\n     * of SO_SNDBUF then it is implementation specific if the\n     * packet is sent or discarded.\n     *\n     * @param size the size to which to set the send buffer\n     * size. This value must be greater than 0.\n     *\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as an UDP error.\n     * @exception IllegalArgumentException if the value is 0 or is\n     * negative.\n     * @see #getSendBufferSize()\n     ",
    "links" : [ "#getSendBufferSize()", "#send(DatagramPacket)" ]
  }, {
    "name" : "public synchronized int getSendBufferSize() throws SocketException",
    "returnType" : "int",
    "comment" : "\n     * Get value of the SO_SNDBUF option for this {@code DatagramSocket}, that is the\n     * buffer size used by the platform for output on this {@code DatagramSocket}.\n     *\n     * @return the value of the SO_SNDBUF option for this {@code DatagramSocket}\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as an UDP error.\n     * @see #setSendBufferSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setReceiveBufferSize(int size) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Sets the SO_RCVBUF option to the specified value for this\n     * {@code DatagramSocket}. The SO_RCVBUF option is used by\n     * the network implementation as a hint to size the underlying\n     * network I/O buffers. The SO_RCVBUF setting may also be used\n     * by the network implementation to determine the maximum size\n     * of the packet that can be received on this socket.\n     * <p>\n     * Because SO_RCVBUF is a hint, applications that want to\n     * verify what size the buffers were set to should call\n     * {@link #getReceiveBufferSize()}.\n     * <p>\n     * Increasing SO_RCVBUF may allow the network implementation\n     * to buffer multiple packets when packets arrive faster than\n     * are being received using {@link #receive(DatagramPacket)}.\n     * <p>\n     * Note: It is implementation specific if a packet larger\n     * than SO_RCVBUF can be received.\n     *\n     * @param size the size to which to set the receive buffer\n     * size. This value must be greater than 0.\n     *\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as an UDP error.\n     * @exception IllegalArgumentException if the value is 0 or is\n     * negative.\n     * @see #getReceiveBufferSize()\n     ",
    "links" : [ "#getReceiveBufferSize()", "#receive(DatagramPacket)" ]
  }, {
    "name" : "public synchronized int getReceiveBufferSize() throws SocketException",
    "returnType" : "int",
    "comment" : "\n     * Get value of the SO_RCVBUF option for this {@code DatagramSocket}, that is the\n     * buffer size used by the platform for input on this {@code DatagramSocket}.\n     *\n     * @return the value of the SO_RCVBUF option for this {@code DatagramSocket}\n     * @exception SocketException if there is an error in the underlying protocol, such as an UDP error.\n     * @see #setReceiveBufferSize(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setReuseAddress(boolean on) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable the SO_REUSEADDR socket option.\n     * <p>\n     * For UDP sockets it may be necessary to bind more than one\n     * socket to the same socket address. This is typically for the\n     * purpose of receiving multicast packets\n     * (See {@link java.net.MulticastSocket}). The\n     * {@code SO_REUSEADDR} socket option allows multiple\n     * sockets to be bound to the same socket address if the\n     * {@code SO_REUSEADDR} socket option is enabled prior\n     * to binding the socket using {@link #bind(SocketAddress)}.\n     * <p>\n     * Note: This functionality is not supported by all existing platforms,\n     * so it is implementation specific whether this option will be ignored\n     * or not. However, if it is not supported then\n     * {@link #getReuseAddress()} will always return {@code false}.\n     * <p>\n     * When a {@code DatagramSocket} is created the initial setting\n     * of {@code SO_REUSEADDR} is disabled.\n     * <p>\n     * The behaviour when {@code SO_REUSEADDR} is enabled or\n     * disabled after a socket is bound (See {@link #isBound()})\n     * is not defined.\n     *\n     * @param on  whether to enable or disable the\n     * @exception SocketException if an error occurs enabling or\n     *            disabling the {@code SO_RESUEADDR} socket option,\n     *            or the socket is closed.\n     * @since 1.4\n     * @see #getReuseAddress()\n     * @see #bind(SocketAddress)\n     * @see #isBound()\n     * @see #isClosed()\n     ",
    "links" : [ "#bind(SocketAddress)", "java.net.MulticastSocket", "#getReuseAddress()", "#isBound()" ]
  }, {
    "name" : "public synchronized boolean getReuseAddress() throws SocketException",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if SO_REUSEADDR is enabled.\n     *\n     * @return a {@code boolean} indicating whether or not SO_REUSEADDR is enabled.\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as an UDP error.\n     * @since   1.4\n     * @see #setReuseAddress(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setBroadcast(boolean on) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable SO_BROADCAST.\n     *\n     * <p> Some operating systems may require that the Java virtual machine be\n     * started with implementation specific privileges to enable this option or\n     * send broadcast datagrams.\n     *\n     * @param  on\n     *         whether or not to have broadcast turned on.\n     *\n     * @throws  SocketException\n     *          if there is an error in the underlying protocol, such as an UDP\n     *          error.\n     *\n     * @since 1.4\n     * @see #getBroadcast()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean getBroadcast() throws SocketException",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if SO_BROADCAST is enabled.\n     * @return a {@code boolean} indicating whether or not SO_BROADCAST is enabled.\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as an UDP error.\n     * @since 1.4\n     * @see #setBroadcast(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setTrafficClass(int tc) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Sets traffic class or type-of-service octet in the IP\n     * datagram header for datagrams sent from this DatagramSocket.\n     * As the underlying network implementation may ignore this\n     * value applications should consider it a hint.\n     *\n     * <P> The tc <B>must</B> be in the range {@code 0 <= tc <=\n     * 255} or an IllegalArgumentException will be thrown.\n     * <p>Notes:\n     * <p>For Internet Protocol v4 the value consists of an\n     * {@code integer}, the least significant 8 bits of which\n     * represent the value of the TOS octet in IP packets sent by\n     * the socket.\n     * RFC 1349 defines the TOS values as follows:\n     *\n     * <UL>\n     * <LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>\n     * <LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>\n     * <LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>\n     * <LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>\n     * </UL>\n     * The last low order bit is always ignored as this\n     * corresponds to the MBZ (must be zero) bit.\n     * <p>\n     * Setting bits in the precedence field may result in a\n     * SocketException indicating that the operation is not\n     * permitted.\n     * <p>\n     * for Internet Protocol v6 {@code tc} is the value that\n     * would be placed into the sin6_flowinfo field of the IP header.\n     *\n     * @param tc        an {@code int} value for the bitset.\n     * @throws SocketException if there is an error setting the\n     * traffic class or type-of-service\n     * @since 1.4\n     * @see #getTrafficClass\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getTrafficClass() throws SocketException",
    "returnType" : "int",
    "comment" : "\n     * Gets traffic class or type-of-service in the IP datagram\n     * header for packets sent from this DatagramSocket.\n     * <p>\n     * As the underlying network implementation may ignore the\n     * traffic class or type-of-service set using {@link #setTrafficClass(int)}\n     * this method may return a different value than was previously\n     * set using the {@link #setTrafficClass(int)} method on this\n     * DatagramSocket.\n     *\n     * @return the traffic class or type-of-service already set\n     * @throws SocketException if there is an error obtaining the\n     * traffic class or type-of-service value.\n     * @since 1.4\n     * @see #setTrafficClass(int)\n     ",
    "links" : [ "#setTrafficClass(int)" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this datagram socket.\n     * <p>\n     * Any thread currently blocked in {@link #receive} upon this socket\n     * will throw a {@link SocketException}.\n     *\n     * <p> If this socket has an associated channel then the channel is closed\n     * as well.\n     *\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.net.SocketException", "#receive" ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the socket is closed or not.\n     *\n     * @return true if the socket has been closed\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public DatagramChannel getChannel()",
    "returnType" : "DatagramChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.DatagramChannel} object\n     * associated with this datagram socket, if any.\n     *\n     * <p> A datagram socket will have a channel if, and only if, the channel\n     * itself was created via the {@link java.nio.channels.DatagramChannel#open\n     * DatagramChannel.open} method.\n     *\n     * @return  the datagram channel associated with this datagram socket,\n     *          or {@code null} if this socket was not created for a channel\n     *\n     * @since 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.nio.channels.DatagramChannel", "java.nio.channels.DatagramChannel#openDatagramChannel.open" ]
  }, {
    "name" : "public static synchronized void setDatagramSocketImplFactory(DatagramSocketImplFactory fac) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the datagram socket implementation factory for the\n     * application. The factory can be specified only once.\n     * <p>\n     * When an application creates a new datagram socket, the socket\n     * implementation factory's {@code createDatagramSocketImpl} method is\n     * called to create the actual datagram socket implementation.\n     * <p>\n     * Passing {@code null} to the method is a no-op unless the factory\n     * was already set.\n     *\n     * <p>If there is a security manager, this method first calls\n     * the security manager's {@code checkSetFactory} method\n     * to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param      fac   the desired factory.\n     * @exception  IOException  if an I/O error occurs when setting the\n     *              datagram socket factory.\n     * @exception  SocketException  if the factory is already defined.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkSetFactory} method doesn't allow the operation.\n     * @see       java.net.DatagramSocketImplFactory#createDatagramSocketImpl()\n     * @see       SecurityManager#checkSetFactory\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public DatagramSocket setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "DatagramSocket",
    "comment" : "\n     * Sets the value of a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     * @param value The value of the socket option. A value of {@code null}\n     *              may be valid for some options.\n     *\n     * @return this DatagramSocket\n     *\n     * @throws UnsupportedOperationException if the datagram socket\n     *         does not support the option.\n     *\n     * @throws IllegalArgumentException if the value is not valid for\n     *         the option.\n     *\n     * @throws IOException if an I/O error occurs, or if the socket is closed.\n     *\n     * @throws SecurityException if a security manager is set and if the socket\n     *         option requires a security permission and if the caller does\n     *         not have the required permission.\n     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n     *         do not require any security permission.\n     *\n     * @throws NullPointerException if name is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ "java.net.StandardSocketOptions" ]
  }, {
    "name" : "public T getOption(SocketOption<T> name) throws IOException",
    "returnType" : "T",
    "comment" : "\n     * Returns the value of a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     *\n     * @return The value of the socket option.\n     *\n     * @throws UnsupportedOperationException if the datagram socket\n     *         does not support the option.\n     *\n     * @throws IOException if an I/O error occurs, or if the socket is closed.\n     *\n     * @throws NullPointerException if name is {@code null}\n     *\n     * @throws SecurityException if a security manager is set and if the socket\n     *         option requires a security permission and if the caller does\n     *         not have the required permission.\n     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n     *         do not require any security permission.\n     *\n     * @since 9\n     ",
    "links" : [ "java.net.StandardSocketOptions" ]
  }, {
    "name" : "public Set<SocketOption<?>> supportedOptions()",
    "returnType" : "Set<SocketOption<?>>",
    "comment" : "\n     * Returns a set of the socket options supported by this socket.\n     *\n     * This method will continue to return the set of options even after\n     * the socket has been closed.\n     *\n     * @return A set of the socket options supported by this socket. This set\n     *        may be empty if the socket's DatagramSocketImpl cannot be created.\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor$()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Gets socket's underlying {@link FileDescriptor}.\n     *\n     * @hide internal use only\n     *\n     * @return socket's underlying {@link FileDescriptor}.\n     ",
    "links" : [ "java.io.FileDescriptor" ]
  } ],
  "methodNames" : [ "private synchronized void connectInternal(InetAddress address, int port) throws SocketException", "private void checkOldImpl()", " void createImpl() throws SocketException", " DatagramSocketImpl getImpl() throws SocketException", "public synchronized void bind(SocketAddress addr) throws SocketException", " void checkAddress(InetAddress addr, String op)", "public void connect(InetAddress address, int port)", "public void connect(SocketAddress addr) throws SocketException", "public void disconnect()", "public boolean isBound()", "public boolean isConnected()", "public InetAddress getInetAddress()", "public int getPort()", "public SocketAddress getRemoteSocketAddress()", "public SocketAddress getLocalSocketAddress()", "public void send(DatagramPacket p) throws IOException", "public synchronized void receive(DatagramPacket p) throws IOException", "private boolean checkFiltering(DatagramPacket p) throws SocketException", "public InetAddress getLocalAddress()", "public int getLocalPort()", "public synchronized void setSoTimeout(int timeout) throws SocketException", "public synchronized int getSoTimeout() throws SocketException", "public synchronized void setSendBufferSize(int size) throws SocketException", "public synchronized int getSendBufferSize() throws SocketException", "public synchronized void setReceiveBufferSize(int size) throws SocketException", "public synchronized int getReceiveBufferSize() throws SocketException", "public synchronized void setReuseAddress(boolean on) throws SocketException", "public synchronized boolean getReuseAddress() throws SocketException", "public synchronized void setBroadcast(boolean on) throws SocketException", "public synchronized boolean getBroadcast() throws SocketException", "public synchronized void setTrafficClass(int tc) throws SocketException", "public synchronized int getTrafficClass() throws SocketException", "public void close()", "public boolean isClosed()", "public DatagramChannel getChannel()", "public static synchronized void setDatagramSocketImplFactory(DatagramSocketImplFactory fac) throws IOException", "public DatagramSocket setOption(SocketOption<T> name, T value) throws IOException", "public T getOption(SocketOption<T> name) throws IOException", "public Set<SocketOption<?>> supportedOptions()", "public FileDescriptor getFileDescriptor$()" ],
  "variableNames" : [ "created", "bound", "closed", "closeLock", "impl", "oldImpl", "explicitFilter", "bytesLeftToFilter", "ST_NOT_CONNECTED", "ST_CONNECTED", "ST_CONNECTED_NO_IMPL", "connectState", "connectedAddress", "connectedPort", "pendingConnectException", "implClass", "factory", "options", "optionsSet" ]
}