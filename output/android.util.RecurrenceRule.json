{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/RecurrenceRule.java",
  "packageName" : "android.util",
  "className" : "RecurrenceRule",
  "comment" : "\n * Description of an event that should recur over time at a specific interval\n * between two anchor points in time.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_INIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sClock",
    "type" : "Clock",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "start",
    "type" : "ZonedDateTime",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "end",
    "type" : "ZonedDateTime",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "period",
    "type" : "Period",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<RecurrenceRule>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RecurrenceRule buildNever()",
    "returnType" : "RecurrenceRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static RecurrenceRule buildRecurringMonthly(int dayOfMonth, ZoneId zone)",
    "returnType" : "RecurrenceRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToStream(DataOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRecurring()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isMonthly()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Range<ZonedDateTime>> cycleIterator()",
    "returnType" : "Iterator<Range<ZonedDateTime>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String convertZonedDateTime(ZonedDateTime time)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ZonedDateTime convertZonedDateTime(String time)",
    "returnType" : "ZonedDateTime",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String convertPeriod(Period period)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Period convertPeriod(String period)",
    "returnType" : "Period",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RecurrenceRule buildNever()", "public static RecurrenceRule buildRecurringMonthly(int dayOfMonth, ZoneId zone)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void writeToStream(DataOutputStream out) throws IOException", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public boolean isRecurring()", "public boolean isMonthly()", "public Iterator<Range<ZonedDateTime>> cycleIterator()", "public static String convertZonedDateTime(ZonedDateTime time)", "public static ZonedDateTime convertZonedDateTime(String time)", "public static String convertPeriod(Period period)", "public static Period convertPeriod(String period)" ],
  "variableNames" : [ "TAG", "LOGD", "VERSION_INIT", "sClock", "start", "end", "period", "CREATOR" ]
}