{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodecInfo.java",
  "packageName" : "android.media",
  "className" : "MediaCodecInfo",
  "comment" : "\n * Provides information about a given media codec available on the device. You can\n * iterate through all codecs available by querying {@link MediaCodecList}. For example,\n * here's how to find an encoder that supports a given MIME type:\n * <pre>\n * private static MediaCodecInfo selectCodec(String mimeType) {\n *     int numCodecs = MediaCodecList.getCodecCount();\n *     for (int i = 0; i &lt; numCodecs; i++) {\n *         MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);\n *\n *         if (!codecInfo.isEncoder()) {\n *             continue;\n *         }\n *\n *         String[] types = codecInfo.getSupportedTypes();\n *         for (int j = 0; j &lt; types.length; j++) {\n *             if (types[j].equalsIgnoreCase(mimeType)) {\n *                 return codecInfo;\n *             }\n *         }\n *     }\n *     return null;\n * }</pre>\n *\n ",
  "links" : [ "android.media.MediaCodecList" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_IS_ENCODER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_IS_VENDOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_IS_SOFTWARE_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_IS_HARDWARE_ACCELERATED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanonicalName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaps",
    "type" : "Map<String, CodecCapabilities>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_INTEGERS",
    "type" : "Range<Integer>",
    "comment" : " COMMON CONSTANTS",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_LONGS",
    "type" : "Range<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_RATIONALS",
    "type" : "Range<Rational>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FRAME_RATE_RANGE",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITRATE_RANGE",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_SUPPORTED_INSTANCES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SUPPORTED_INSTANCES_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNRECOGNIZED",
    "type" : "int",
    "comment" : " found stuff that is not supported by framework (=> this should not happen)",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSUPPORTED",
    "type" : "int",
    "comment" : " found profile/level for which we don't have capability estimates",
    "links" : [ ]
  }, {
    "name" : "ERROR_NONE_SUPPORTED",
    "type" : "int",
    "comment" : " have not found any profile/level for which we don't have capability estimate",
    "links" : [ ]
  }, {
    "name" : "SECURITY_MODEL_SANDBOXED",
    "type" : "int",
    "comment" : "\n     * In this model the codec is running in a sandboxed process. Even if a\n     * malicious content was fed to the codecs in this model, the impact will\n     * be contained in the sandboxed process.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_MODEL_MEMORY_SAFE",
    "type" : "int",
    "comment" : "\n     * In this model the codec is not running in a sandboxed process, but\n     * written in a memory-safe way. It typically means that the software\n     * implementation of the codec is written in a memory-safe language such\n     * as Rust.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_MODEL_TRUSTED_CONTENT_ONLY",
    "type" : "int",
    "comment" : "\n     * In this model the codec is suitable only for trusted content where\n     * the input can be verified to be well-formed and no malicious actor\n     * can alter it. For example, codecs in this model are not suitable\n     * for arbitrary media downloaded from the internet or present in a user\n     * directory. On the other hand, they could be suitable for media encoded\n     * in the backend that the app developer wholly controls.\n     * <p>\n     * Codecs with this security model is not included in\n     * {@link MediaCodecList#REGULAR_CODECS}, but included in\n     * {@link MediaCodecList#ALL_CODECS}.\n     ",
    "links" : [ "android.media.MediaCodecList#REGULAR_CODECS", "android.media.MediaCodecList#ALL_CODECS" ]
  } ],
  "methods" : [ {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the codec name.\n     *\n     * <strong>Note:</strong> Implementations may provide multiple aliases (codec\n     * names) for the same underlying codec, any of which can be used to instantiate the same\n     * underlying codec in {@link MediaCodec#createByCodecName}.\n     *\n     * Applications targeting SDK < {@link android.os.Build.VERSION_CODES#Q}, cannot determine if\n     * the multiple codec names listed in MediaCodecList are in-fact for the same codec.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "android.media.MediaCodec#createByCodecName" ]
  }, {
    "name" : "public final String getCanonicalName()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the underlying codec name.\n     *\n     * Device implementations may provide multiple aliases (codec names) for the same underlying\n     * codec to maintain backward app compatibility. This method returns the name of the underlying\n     * codec name, which must not be another alias. For non-aliases this is always the name of the\n     * codec.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isAlias()",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the codec is an alias for another underlying codec.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isEncoder()",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the codec is an encoder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isVendor()",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the codec is provided by the Android platform (false) or the device manufacturer\n     * (true).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isSoftwareOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the codec is software only. Software-only codecs are more secure as they run in\n     * a tighter security sandbox. On the other hand, software-only codecs do not provide any\n     * performance guarantees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isHardwareAccelerated()",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the codec is hardware accelerated. This attribute is provided by the device\n     * manufacturer. Note that it cannot be tested for correctness.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String[] getSupportedTypes()",
    "returnType" : "String[]",
    "comment" : "\n     * Query the media types supported by the codec.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int checkPowerOfTwo(int value, String message)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Range<Integer> getSizeRange()",
    "returnType" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSecurityModel()",
    "returnType" : "int",
    "comment" : "\n     * Query the security model of the codec.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CodecCapabilities getCapabilitiesForType(String type)",
    "returnType" : "CodecCapabilities",
    "comment" : "\n     * Enumerates the capabilities of the codec component. Since a single\n     * component can support data of a variety of types, the type has to be\n     * specified to yield a meaningful result.\n     * @param type The MIME type to query\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaCodecInfo makeRegular()",
    "returnType" : "MediaCodecInfo",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getName()", "public final String getCanonicalName()", "public final boolean isAlias()", "public final boolean isEncoder()", "public final boolean isVendor()", "public final boolean isSoftwareOnly()", "public final boolean isHardwareAccelerated()", "public final String[] getSupportedTypes()", "private static int checkPowerOfTwo(int value, String message)", "private static Range<Integer> getSizeRange()", "public int getSecurityModel()", "public final CodecCapabilities getCapabilitiesForType(String type)", "public MediaCodecInfo makeRegular()" ],
  "variableNames" : [ "TAG", "FLAG_IS_ENCODER", "FLAG_IS_VENDOR", "FLAG_IS_SOFTWARE_ONLY", "FLAG_IS_HARDWARE_ACCELERATED", "mFlags", "mName", "mCanonicalName", "mCaps", "POSITIVE_INTEGERS", "POSITIVE_LONGS", "POSITIVE_RATIONALS", "FRAME_RATE_RANGE", "BITRATE_RANGE", "DEFAULT_MAX_SUPPORTED_INSTANCES", "MAX_SUPPORTED_INSTANCES_LIMIT", "ERROR_UNRECOGNIZED", "ERROR_UNSUPPORTED", "ERROR_NONE_SUPPORTED", "SECURITY_MODEL_SANDBOXED", "SECURITY_MODEL_MEMORY_SAFE", "SECURITY_MODEL_TRUSTED_CONTENT_ONLY" ]
}