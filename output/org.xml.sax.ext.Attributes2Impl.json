{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/ext/Attributes2Impl.java",
  "packageName" : "org.xml.sax.ext",
  "className" : "Attributes2Impl",
  "comment" : "\n * SAX2 extension helper for additional Attributes information,\n * implementing the {@link Attributes2} interface.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * </blockquote>\n *\n * <p>This is not part of core-only SAX2 distributions.</p>\n *\n * <p>The <em>specified</em> flag for each attribute will always\n * be true, unless it has been set to false in the copy constructor\n * or using {@link #setSpecified}.\n * Similarly, the <em>declared</em> flag for each attribute will\n * always be false, except for defaulted attributes (<em>specified</em>\n * is false), non-CDATA attributes, or when it is set to true using\n * {@link #setDeclared}.\n * If you change an attribute's type by hand, you may need to modify\n * its <em>declared</em> flag to match.\n * </p>\n *\n * @since SAX 2.0 (extensions 1.1 alpha)\n * @author David Brownell\n * @version TBS\n ",
  "links" : [ "org.xml.sax.ext.Attributes2", "#setSpecified", "#setDeclared" ],
  "variables" : [ {
    "name" : "declared",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "specified",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isDeclared(int index)",
    "returnType" : "boolean",
    "comment" : " javadoc mostly from interface",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeclared(String uri, String localName)",
    "returnType" : "boolean",
    "comment" : " javadoc mostly from interface",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeclared(String qName)",
    "returnType" : "boolean",
    "comment" : " javadoc mostly from interface",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpecified(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value of an attribute's \"specified\" flag.\n     *\n     * @param index The attribute index (zero-based).\n     * @return current flag value\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpecified(String uri, String localName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value of an attribute's \"specified\" flag.\n     *\n     * @param uri The Namespace URI, or the empty string if\n     *        the name has no Namespace URI.\n     * @param localName The attribute's local name.\n     * @return current flag value\n     * @exception java.lang.IllegalArgumentException When the\n     *            supplied names do not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpecified(String qName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value of an attribute's \"specified\" flag.\n     *\n     * @param qName The XML qualified (prefixed) name.\n     * @return current flag value\n     * @exception java.lang.IllegalArgumentException When the\n     *            supplied name does not identify an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttributes(Attributes atts)",
    "returnType" : "void",
    "comment" : "\n     * Copy an entire Attributes object.  The \"specified\" flags are\n     * assigned as true, and \"declared\" flags as false (except when\n     * an attribute's type is not CDATA),\n     * unless the object is an Attributes2 object.\n     * In that case those flag values are all copied.\n     *\n     * @param atts The attributes to copy.\n     *\n     * @see AttributesImpl#setAttributes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String qName, String type, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add an attribute to the end of the list, setting its\n     * \"specified\" flag to true.  To set that flag's value\n     * to false, use {@link #setSpecified}.\n     *\n     * <p>Unless the attribute <em>type</em> is CDATA, this attribute\n     * is marked as being declared in the DTD.  To set that flag's value\n     * to true for CDATA attributes, use {@link #setDeclared}.\n     *\n     * @param uri The Namespace URI, or the empty string if\n     *        none is available or Namespace processing is not\n     *        being performed.\n     * @param localName The local name, or the empty string if\n     *        Namespace processing is not being performed.\n     * @param qName The qualified (prefixed) name, or the empty string\n     *        if qualified names are not available.\n     * @param type The attribute type as a string.\n     * @param value The attribute value.\n     *\n     * @see AttributesImpl#addAttribute\n     ",
    "links" : [ "#setSpecified", "#setDeclared" ]
  }, {
    "name" : "public void removeAttribute(int index)",
    "returnType" : "void",
    "comment" : " javadoc entirely from superclass",
    "links" : [ ]
  }, {
    "name" : "public void setDeclared(int index, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Assign a value to the \"declared\" flag of a specific attribute.\n     * This is normally needed only for attributes of type CDATA,\n     * including attributes whose type is changed to or from CDATA.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param value The desired flag value.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not identify an attribute.\n     * @see #setType\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSpecified(int index, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Assign a value to the \"specified\" flag of a specific attribute.\n     * This is the only way this flag can be cleared, except clearing\n     * by initialization with the copy constructor.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param value The desired flag value.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not identify an attribute.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isDeclared(int index)", "public boolean isDeclared(String uri, String localName)", "public boolean isDeclared(String qName)", "public boolean isSpecified(int index)", "public boolean isSpecified(String uri, String localName)", "public boolean isSpecified(String qName)", "public void setAttributes(Attributes atts)", "public void addAttribute(String uri, String localName, String qName, String type, String value)", "public void removeAttribute(int index)", "public void setDeclared(int index, boolean value)", "public void setSpecified(int index, boolean value)" ],
  "variableNames" : [ "declared", "specified" ]
}