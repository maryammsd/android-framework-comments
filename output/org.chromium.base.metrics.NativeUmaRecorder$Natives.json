{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/metrics/NativeUmaRecorder.java",
  "packageName" : "org.chromium.base.metrics",
  "className" : "Natives",
  "comment" : " Natives API to record metrics. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " long recordBooleanHistogram(String name, long nativeHint, boolean sample)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long recordExponentialHistogram(String name, long nativeHint, int sample, int min, int max, int numBuckets)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long recordLinearHistogram(String name, long nativeHint, int sample, int min, int max, int numBuckets)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long recordSparseHistogram(String name, long nativeHint, int sample)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void recordUserAction(String name, long millisSinceEvent)",
    "returnType" : "void",
    "comment" : "\n         * Records that the user performed an action. See {@code base::RecordComputedActionAt}.\n         * <p>\n         * Uses relative time, because Java and native code can use different clocks.\n         *\n         * @param name Name of the user-generated event.\n         * @param millisSinceEvent difference between now and the time when the event was observed.\n         *         Should be positive.\n         ",
    "links" : [ ]
  }, {
    "name" : " int getHistogramValueCountForTesting(String name, int sample, long snapshotPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getHistogramTotalCountForTesting(String name, long snapshotPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long[] getHistogramSamplesForTesting(String name)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long createHistogramSnapshotForTesting()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void destroyHistogramSnapshotForTesting(long snapshotPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long addActionCallbackForTesting(Callback<String> callback)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeActionCallbackForTesting(long callbackId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " long recordBooleanHistogram(String name, long nativeHint, boolean sample)", " long recordExponentialHistogram(String name, long nativeHint, int sample, int min, int max, int numBuckets)", " long recordLinearHistogram(String name, long nativeHint, int sample, int min, int max, int numBuckets)", " long recordSparseHistogram(String name, long nativeHint, int sample)", " void recordUserAction(String name, long millisSinceEvent)", " int getHistogramValueCountForTesting(String name, int sample, long snapshotPtr)", " int getHistogramTotalCountForTesting(String name, long snapshotPtr)", " long[] getHistogramSamplesForTesting(String name)", " long createHistogramSnapshotForTesting()", " void destroyHistogramSnapshotForTesting(long snapshotPtr)", " long addActionCallbackForTesting(Callback<String> callback)", " void removeActionCallbackForTesting(long callbackId)" ],
  "variableNames" : [ ]
}