{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/tech/IsoDep.java",
  "packageName" : "android.nfc.tech",
  "className" : "IsoDep",
  "comment" : "\n * Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire an {@link IsoDep} object using {@link #get}.\n * <p>The primary ISO-DEP I/O operation is {@link #transceive}. Applications must\n * implement their own protocol stack on top of {@link #transceive}.\n * <p>Tags that enumerate the {@link IsoDep} technology in {@link Tag#getTechList}\n * will also enumerate\n * {@link NfcA} or {@link NfcB} (since IsoDep builds on top of either of these).\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "links" : [ "android.Manifest.permission#NFC", "android.nfc.Tag", "#get", "android.nfc.tech.NfcA", "android.nfc.tech.NfcB", "#transceive", "android.nfc.tech.IsoDep", "android.nfc.Tag#getTechList" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_HI_LAYER_RESP",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_HIST_BYTES",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mHiLayerResponse",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHistBytes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static IsoDep get(Tag tag)",
    "returnType" : "IsoDep",
    "comment" : "\n     * Get an instance of {@link IsoDep} for the given tag.\n     * <p>Does not cause any RF activity and does not block.\n     * <p>Returns null if {@link IsoDep} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag does not support ISO-DEP.\n     *\n     * @param tag an ISO-DEP compatible tag\n     * @return ISO-DEP object\n     ",
    "links" : [ "android.nfc.tech.IsoDep", "android.nfc.Tag#getTechList" ]
  }, {
    "name" : "public void setTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the timeout of {@link #transceive} in milliseconds.\n     * <p>The timeout only applies to ISO-DEP {@link #transceive}, and is\n     * reset to a default value when {@link #close} is called.\n     * <p>Setting a longer timeout may be useful when performing\n     * transactions that require a long processing time on the tag\n     * such as key generation.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param timeout timeout value in milliseconds\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#close" ]
  }, {
    "name" : "public int getTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Get the current timeout for {@link #transceive} in milliseconds.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return timeout value in milliseconds\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive" ]
  }, {
    "name" : "public byte[] getHistoricalBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the ISO-DEP historical bytes for {@link NfcA} tags.\n     * <p>Does not cause any RF activity and does not block.\n     * <p>The historical bytes can be used to help identify a tag. They are present\n     * only on {@link IsoDep} tags that are based on {@link NfcA} RF technology.\n     * If this tag is not {@link NfcA} then null is returned.\n     * <p>In ISO 14443-4 terminology, the historical bytes are a subset of the RATS\n     * response.\n     *\n     * @return ISO-DEP historical bytes, or null if this is not a {@link NfcA} tag\n     ",
    "links" : [ "android.nfc.tech.NfcA", "android.nfc.tech.IsoDep" ]
  }, {
    "name" : "public byte[] getHiLayerResponse()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the higher layer response bytes for {@link NfcB} tags.\n     * <p>Does not cause any RF activity and does not block.\n     * <p>The higher layer response bytes can be used to help identify a tag.\n     * They are present only on {@link IsoDep} tags that are based on {@link NfcB}\n     * RF technology. If this tag is not {@link NfcB} then null is returned.\n     * <p>In ISO 14443-4 terminology, the higher layer bytes are a subset of the\n     * ATTRIB response.\n     *\n     * @return ISO-DEP historical bytes, or null if this is not a {@link NfcB} tag\n     ",
    "links" : [ "android.nfc.tech.NfcB", "android.nfc.tech.IsoDep" ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw ISO-DEP data to the tag and receive the response.\n     *\n     * <p>Applications must only send the INF payload, and not the start of frame and\n     * end of frame indicators. Applications do not need to fragment the payload, it\n     * will be automatically fragmented and defragmented by {@link #transceive} if\n     * it exceeds FSD/FSC limits.\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param data command bytes to send, must not be null\n     * @return response bytes received, will not be null\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or this operation is canceled\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#getMaxTransceiveLength", "java.io.IOException", "#close" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive" ]
  }, {
    "name" : "public boolean isExtendedLengthApduSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Standard APDUs have a 1-byte length field, allowing a maximum of\n     * 255 payload bytes, which results in a maximum APDU length of 261 bytes.\n     *\n     * <p>Extended length APDUs have a 3-byte length field, allowing 65535\n     * payload bytes.\n     *\n     * <p>Some NFC adapters, like the one used in the Nexus S and the Galaxy Nexus\n     * do not support extended length APDUs. They are expected to be well-supported\n     * in the future though. Use this method to check for extended length APDU\n     * support.\n     *\n     * @return whether the NFC adapter on this device supports extended length APDUs.\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static IsoDep get(Tag tag)", "public void setTimeout(int timeout)", "public int getTimeout()", "public byte[] getHistoricalBytes()", "public byte[] getHiLayerResponse()", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()", "public boolean isExtendedLengthApduSupported()" ],
  "variableNames" : [ "TAG", "EXTRA_HI_LAYER_RESP", "EXTRA_HIST_BYTES", "mHiLayerResponse", "mHistBytes" ]
}