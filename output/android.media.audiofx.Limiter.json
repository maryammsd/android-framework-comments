{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/DynamicsProcessing.java",
  "packageName" : "android.media.audiofx",
  "className" : "Limiter",
  "comment" : "\n     * Class for Limiter Stage\n     * Limiter is a single band compressor at the end of the processing chain, commonly used to\n     * protect the signal from overloading and distortion. Limiters have multiple controllable\n     * parameters: enabled/disabled, linkGroup, attackTime, releaseTime, ratio, threshold, and\n     * postGain.\n     * <p>Limiters can be linked in groups across multiple channels. Linked limiters will trigger\n     * the same limiting if any of the linked limiters starts compressing.\n     ",
  "variables" : [ {
    "name" : "mLinkGroup",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttackTime",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleaseTime",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRatio",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreshold",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPostGain",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLinkGroup()",
    "returnType" : "int",
    "comment" : "\n         * Gets the linkGroup index for this Limiter Stage. Only limiters that share the same\n         * linkGroup index will react together.\n         * @return linkGroup index.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setLinkGroup(int linkGroup)",
    "returnType" : "void",
    "comment" : "\n         * Sets the linkGroup index for this limiter Stage.\n         * @param linkGroup desired linkGroup index\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getAttackTime()",
    "returnType" : "float",
    "comment" : "\n         * gets attack time for limiter compressor in milliseconds (ms)\n         * @return attack time for limiter compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAttackTime(float attackTime)",
    "returnType" : "void",
    "comment" : "\n         * sets attack time for limiter compressor in milliseconds (ms)\n         * @param attackTime desired for limiter compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getReleaseTime()",
    "returnType" : "float",
    "comment" : "\n         * gets release time for limiter compressor in milliseconds (ms)\n         * @return release time for limiter compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setReleaseTime(float releaseTime)",
    "returnType" : "void",
    "comment" : "\n         * sets release time for limiter compressor in milliseconds (ms)\n         * @param releaseTime desired for limiter compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getRatio()",
    "returnType" : "float",
    "comment" : "\n         * gets the limiter compressor ratio (N:1)\n         * @return limiter compressor ratio (N:1)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setRatio(float ratio)",
    "returnType" : "void",
    "comment" : "\n         * sets limiter compressor ratio (N:1)\n         * @param ratio desired for the limiter compressor (N:1)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getThreshold()",
    "returnType" : "float",
    "comment" : "\n         * gets the limiter compressor threshold measured in decibels (dB) from 0 dB Full Scale\n         * (dBFS). Thresholds are negative. A threshold of 0 dB means no limiting will take place.\n         * @return limiter compressor threshold in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setThreshold(float threshold)",
    "returnType" : "void",
    "comment" : "\n         * sets the limiter compressor threshold measured in decibels (dB) from 0 dB Full Scale\n         * (dBFS). Thresholds are negative. A threshold of 0 dB means no limiting will take place.\n         * @param threshold desired for limiter compressor in decibels(dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getPostGain()",
    "returnType" : "float",
    "comment" : "\n         * gets the gain applied to the signal AFTER limiting. Measured in decibels (dB) where 0\n         * dB means no level change\n         * @return postGain value in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPostGain(float postGain)",
    "returnType" : "void",
    "comment" : "\n         * sets the gain to be applied to the siganl AFTER the limiter. Measured in decibels\n         * (dB), where 0 dB means no level change.\n         * @param postGain desired value in decibels (dB)\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mLinkGroup", "mAttackTime", "mReleaseTime", "mRatio", "mThreshold", "mPostGain" ],
  "methodNames" : [ "public String toString()", "public int getLinkGroup()", "public void setLinkGroup(int linkGroup)", "public float getAttackTime()", "public void setAttackTime(float attackTime)", "public float getReleaseTime()", "public void setReleaseTime(float releaseTime)", "public float getRatio()", "public void setRatio(float ratio)", "public float getThreshold()", "public void setThreshold(float threshold)", "public float getPostGain()", "public void setPostGain(float postGain)" ]
}