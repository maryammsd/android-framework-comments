{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/RecordingCanvas.java",
  "packageName" : "android.graphics",
  "className" : "RecordingCanvas",
  "comment" : "\n * A Canvas implementation that records view system drawing operations for deferred rendering.\n * This is used in combination with RenderNode. This class keeps a list of all the Paint and\n * Bitmap objects that it draws, preventing the backing memory of Bitmaps from being released while\n * the RecordingCanvas is still holding a native reference to the memory.\n *\n * This is obtained by calling {@link RenderNode#beginRecording()} and is valid until the matching\n * {@link RenderNode#endRecording()} is called. It must not be retained beyond that as it is\n * internally reused.\n ",
  "variables" : [ {
    "name" : "POOL_LIMIT",
    "type" : "int",
    "comment" : " view hierarchy because display lists are generated recursively.",
    "links" : [ ]
  }, {
    "name" : "MAX_BITMAP_SIZE",
    "type" : "int",
    "comment" : " 100 MB",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<RecordingCanvas>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNode",
    "type" : "RenderNode",
    "comment" : "\n     * TODO: Temporarily exposed for RenderNodeAnimator(Set)\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static RecordingCanvas obtain(@NonNull RenderNode node, int width, int height)",
    "returnType" : "RecordingCanvas",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void recycle()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " long finishRecording()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRecordingFor(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDensity(int density)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareAccelerated()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBitmap(Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumBitmapWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumBitmapHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableZ()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disableZ()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void callDrawGLFunction2(long drawGLFunction)",
    "returnType" : "void",
    "comment" : "\n     * Records the functor specified with the drawGLFunction function pointer. This is\n     * functionality used by webview for calling into their renderer from our display lists.\n     *\n     * @param drawGLFunction A native function pointer\n     *\n     * @hide\n     * @deprecated Use {@link #drawWebViewFunctor(int)}\n     ",
    "links" : [ "#drawWebViewFunctor" ]
  }, {
    "name" : "public void drawGLFunctor2(long drawGLFunctor, @Nullable Runnable releasedCallback)",
    "returnType" : "void",
    "comment" : "\n     * Records the functor specified with the drawGLFunction function pointer. This is\n     * functionality used by webview for calling into their renderer from our display lists.\n     *\n     * @param drawGLFunctor A native function pointer\n     * @param releasedCallback Called when the display list is destroyed, and thus\n     * the functor is no longer referenced by this canvas's display list.\n     *\n     * NOTE: The callback does *not* necessarily mean that there are no longer\n     * any references to the functor, just that the reference from this specific\n     * canvas's display list has been released.\n     *\n     * @hide\n     * @deprecated Use {@link #drawWebViewFunctor(int)}\n     ",
    "links" : [ "#drawWebViewFunctor" ]
  }, {
    "name" : "public void drawWebViewFunctor(int functor)",
    "returnType" : "void",
    "comment" : "\n     * Calls the provided functor that was created via WebViewFunctor_create()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void drawRenderNode(@NonNull RenderNode renderNode)",
    "returnType" : "void",
    "comment" : "\n     * Draws the specified display list onto this canvas.\n     *\n     * @param renderNode The RenderNode to draw.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void drawTextureLayer(TextureLayer layer)",
    "returnType" : "void",
    "comment" : "\n     * Draws the specified layer onto this canvas.\n     *\n     * @param layer The layer to composite on this canvas\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void drawCircle(CanvasProperty<Float> cx, CanvasProperty<Float> cy, CanvasProperty<Float> radius, CanvasProperty<Paint> paint)",
    "returnType" : "void",
    "comment" : "\n     * Draws a circle\n     *\n     * @param cx\n     * @param cy\n     * @param radius\n     * @param paint\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void drawRoundRect(CanvasProperty<Float> left, CanvasProperty<Float> top, CanvasProperty<Float> right, CanvasProperty<Float> bottom, CanvasProperty<Float> rx, CanvasProperty<Float> ry, CanvasProperty<Paint> paint)",
    "returnType" : "void",
    "comment" : "\n     * Draws a round rect\n     *\n     * @param left\n     * @param top\n     * @param right\n     * @param bottom\n     * @param rx\n     * @param ry\n     * @param paint\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void throwIfCannotDraw(Bitmap bitmap)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallDrawGLFunction(long renderer, long drawGLFunction, Runnable releasedCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateDisplayListCanvas(long node, int width, int height)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nResetDisplayListCanvas(long canvas, long node, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetMaximumTextureWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetMaximumTextureHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nInsertReorderBarrier(long renderer, boolean enableReorder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nFinishRecording(long renderer)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDrawRenderNode(long renderer, long renderNode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDrawTextureLayer(long renderer, long layer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDrawCircle(long renderer, long propCx, long propCy, long propRadius, long propPaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDrawRoundRect(long renderer, long propLeft, long propTop, long propRight, long propBottom, long propRx, long propRy, long propPaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDrawWebViewFunctor(long canvas, int functor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "POOL_LIMIT", "MAX_BITMAP_SIZE", "sPool", "mNode", "mWidth", "mHeight" ],
  "methodNames" : [ " static RecordingCanvas obtain(@NonNull RenderNode node, int width, int height)", " void recycle()", " long finishRecording()", "public boolean isRecordingFor(Object o)", "public void setDensity(int density)", "public boolean isHardwareAccelerated()", "public void setBitmap(Bitmap bitmap)", "public boolean isOpaque()", "public int getWidth()", "public int getHeight()", "public int getMaximumBitmapWidth()", "public int getMaximumBitmapHeight()", "public void enableZ()", "public void disableZ()", "public void callDrawGLFunction2(long drawGLFunction)", "public void drawGLFunctor2(long drawGLFunctor, @Nullable Runnable releasedCallback)", "public void drawWebViewFunctor(int functor)", "public void drawRenderNode(@NonNull RenderNode renderNode)", "public void drawTextureLayer(TextureLayer layer)", "public void drawCircle(CanvasProperty<Float> cx, CanvasProperty<Float> cy, CanvasProperty<Float> radius, CanvasProperty<Paint> paint)", "public void drawRoundRect(CanvasProperty<Float> left, CanvasProperty<Float> top, CanvasProperty<Float> right, CanvasProperty<Float> bottom, CanvasProperty<Float> rx, CanvasProperty<Float> ry, CanvasProperty<Paint> paint)", "protected void throwIfCannotDraw(Bitmap bitmap)", "private static native void nCallDrawGLFunction(long renderer, long drawGLFunction, Runnable releasedCallback)", "private static native long nCreateDisplayListCanvas(long node, int width, int height)", "private static native void nResetDisplayListCanvas(long canvas, long node, int width, int height)", "private static native int nGetMaximumTextureWidth()", "private static native int nGetMaximumTextureHeight()", "private static native void nInsertReorderBarrier(long renderer, boolean enableReorder)", "private static native long nFinishRecording(long renderer)", "private static native void nDrawRenderNode(long renderer, long renderNode)", "private static native void nDrawTextureLayer(long renderer, long layer)", "private static native void nDrawCircle(long renderer, long propCx, long propCy, long propRadius, long propPaint)", "private static native void nDrawRoundRect(long renderer, long propLeft, long propTop, long propRight, long propBottom, long propRx, long propRy, long propPaint)", "private static native void nDrawWebViewFunctor(long canvas, int functor)" ]
}