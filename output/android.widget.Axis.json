{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/GridLayout.java",
  "packageName" : "android.widget",
  "className" : "Axis",
  "comment" : "\n     This internal class houses the algorithm for computing the locations of grid lines;\n     along either the horizontal or vertical axis. A GridLayout uses two instances of this class -\n     distinguished by the \"horizontal\" flag which is true for the horizontal axis and false\n     for the vertical one.\n     ",
  "variables" : [ {
    "name" : "NEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PENDING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPLETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "horizontal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "definedCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupBounds",
    "type" : "PackedMap<Spec, Bounds>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupBoundsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "forwardLinks",
    "type" : "PackedMap<Interval, MutableInt>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "forwardLinksValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "backwardLinks",
    "type" : "PackedMap<Interval, MutableInt>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "backwardLinksValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "leadingMargins",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "leadingMarginsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trailingMargins",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trailingMarginsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "arcs",
    "type" : "Arc[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "arcsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locations",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locationsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hasWeights",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hasWeightsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "deltas",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "orderPreserved",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parentMin",
    "type" : "MutableInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parentMax",
    "type" : "MutableInt",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int calculateMaxIndex()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMaxIndex()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCount(int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOrderPreserved()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOrderPreserved(boolean orderPreserved)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PackedMap<Spec, Bounds> createGroupBounds()",
    "returnType" : "PackedMap<Spec, Bounds>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeGroupBounds()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackedMap<Spec, Bounds> getGroupBounds()",
    "returnType" : "PackedMap<Spec, Bounds>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PackedMap<Interval, MutableInt> createLinks(boolean min)",
    "returnType" : "PackedMap<Interval, MutableInt>",
    "comment" : " Add values computed by alignment - taking the max of all alignments in each span",
    "links" : [ ]
  }, {
    "name" : "private void computeLinks(PackedMap<Interval, MutableInt> links, boolean min)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PackedMap<Interval, MutableInt> getForwardLinks()",
    "returnType" : "PackedMap<Interval, MutableInt>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PackedMap<Interval, MutableInt> getBackwardLinks()",
    "returnType" : "PackedMap<Interval, MutableInt>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void include(List<Arc> arcs, Interval key, MutableInt size, boolean ignoreIfAlreadyPresent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void include(List<Arc> arcs, Interval key, MutableInt size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Arc[][] groupArcsByFirstVertex(Arc[] arcs)",
    "returnType" : "Arc[][]",
    "comment" : " This is linear in the number of arcs.",
    "links" : [ ]
  }, {
    "name" : "private Arc[] topologicalSort(final Arc[] arcs)",
    "returnType" : "Arc[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Arc[] topologicalSort(List<Arc> arcs)",
    "returnType" : "Arc[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addComponentSizes(List<Arc> result, PackedMap<Interval, MutableInt> links)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Arc[] createArcs()",
    "returnType" : "Arc[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeArcs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Arc[] getArcs()",
    "returnType" : "Arc[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean relax(int[] locations, Arc entry)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init(int[] locations)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String arcsToString(List<Arc> arcs)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logError(String axisName, Arc[] arcs, boolean[] culprits0)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean solve(Arc[] arcs, int[] locations)",
    "returnType" : "boolean",
    "comment" : "\n        Bellman-Ford variant - modified to reduce typical running time from O(N^2) to O(N)\n\n        GridLayout converts its requirements into a system of linear constraints of the\n        form:\n\n        x[i] - x[j] < a[k]\n\n        Where the x[i] are variables and the a[k] are constants.\n\n        For example, if the variables were instead labeled x, y, z we might have:\n\n            x - y < 17\n            y - z < 23\n            z - x < 42\n\n        This is a special case of the Linear Programming problem that is, in turn,\n        equivalent to the single-source shortest paths problem on a digraph, for\n        which the O(n^2) Bellman-Ford algorithm the most commonly used general solution.\n        ",
    "links" : [ ]
  }, {
    "name" : "private boolean solve(Arc[] arcs, int[] locations, boolean modifyOnError)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeMargins(boolean leading)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getLeadingMargins()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getTrailingMargins()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean solve(int[] a)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean computeHasWeights()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasWeights()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getDeltas()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void shareOutDelta(int totalDelta, float totalWeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void solveAndDistributeSpace(int[] a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float calculateTotalWeight()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeLocations(int[] a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getLocations()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int size(int[] locations)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setParentConstraints(int min, int max)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMeasure(int min, int max)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMeasure(int measureSpec)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void layout(int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateStructure()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "NEW", "PENDING", "COMPLETE", "horizontal", "definedCount", "maxIndex", "groupBounds", "groupBoundsValid", "forwardLinks", "forwardLinksValid", "backwardLinks", "backwardLinksValid", "leadingMargins", "leadingMarginsValid", "trailingMargins", "trailingMarginsValid", "arcs", "arcsValid", "locations", "locationsValid", "hasWeights", "hasWeightsValid", "deltas", "orderPreserved", "parentMin", "parentMax" ],
  "methodNames" : [ "private int calculateMaxIndex()", "private int getMaxIndex()", "public int getCount()", "public void setCount(int count)", "public boolean isOrderPreserved()", "public void setOrderPreserved(boolean orderPreserved)", "private PackedMap<Spec, Bounds> createGroupBounds()", "private void computeGroupBounds()", "public PackedMap<Spec, Bounds> getGroupBounds()", "private PackedMap<Interval, MutableInt> createLinks(boolean min)", "private void computeLinks(PackedMap<Interval, MutableInt> links, boolean min)", "private PackedMap<Interval, MutableInt> getForwardLinks()", "private PackedMap<Interval, MutableInt> getBackwardLinks()", "private void include(List<Arc> arcs, Interval key, MutableInt size, boolean ignoreIfAlreadyPresent)", "private void include(List<Arc> arcs, Interval key, MutableInt size)", " Arc[][] groupArcsByFirstVertex(Arc[] arcs)", "private Arc[] topologicalSort(final Arc[] arcs)", "private Arc[] topologicalSort(List<Arc> arcs)", "private void addComponentSizes(List<Arc> result, PackedMap<Interval, MutableInt> links)", "private Arc[] createArcs()", "private void computeArcs()", "public Arc[] getArcs()", "private boolean relax(int[] locations, Arc entry)", "private void init(int[] locations)", "private String arcsToString(List<Arc> arcs)", "private void logError(String axisName, Arc[] arcs, boolean[] culprits0)", "private boolean solve(Arc[] arcs, int[] locations)", "private boolean solve(Arc[] arcs, int[] locations, boolean modifyOnError)", "private void computeMargins(boolean leading)", "public int[] getLeadingMargins()", "public int[] getTrailingMargins()", "private boolean solve(int[] a)", "private boolean computeHasWeights()", "private boolean hasWeights()", "public int[] getDeltas()", "private void shareOutDelta(int totalDelta, float totalWeight)", "private void solveAndDistributeSpace(int[] a)", "private float calculateTotalWeight()", "private void computeLocations(int[] a)", "public int[] getLocations()", "private int size(int[] locations)", "private void setParentConstraints(int min, int max)", "private int getMeasure(int min, int max)", "public int getMeasure(int measureSpec)", "public void layout(int size)", "public void invalidateStructure()", "public void invalidateValues()" ]
}