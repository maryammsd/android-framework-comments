{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/util/nsd/DnsSdTxtRecord.java",
  "packageName" : "android.net.util.nsd",
  "className" : "DnsSdTxtRecord",
  "comment" : "\n * This class handles TXT record data for DNS based service discovery as specified at\n * http://tools.ietf.org/html/draft-cheshire-dnsext-dns-sd-11\n *\n * DNS-SD specifies that a TXT record corresponding to an SRV record consist of\n * a packed array of bytes, each preceded by a length byte. Each string\n * is an attribute-value pair.\n *\n * The DnsSdTxtRecord object stores the entire TXT data as a single byte array, traversing it\n * as need be to implement its various methods.\n * @hide\n *\n ",
  "variables" : [ {
    "name" : "mSeparator",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<DnsSdTxtRecord>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Set a key/value pair. Setting an existing key will replace its value.\n     * @param key Must be ascii with no '='\n     * @param value matching value to key\n     ",
    "links" : [ ]
  }, {
    "name" : "public String get(String key)",
    "returnType" : "String",
    "comment" : "\n     * Get a value for a key\n     *\n     * @param key\n     * @return The value associated with the key\n     ",
    "links" : [ ]
  }, {
    "name" : "public int remove(String key)",
    "returnType" : "int",
    "comment" : " Remove a key/value pair. If found, returns the index or -1 if not found ",
    "links" : [ ]
  }, {
    "name" : "public int keyCount()",
    "returnType" : "int",
    "comment" : " Return the count of keys ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(String key)",
    "returnType" : "boolean",
    "comment" : " Return true if key is present, false if not. ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : " Gets the size in bytes ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getRawData()",
    "returnType" : "byte[]",
    "comment" : " Gets the raw data in bytes ",
    "links" : [ ]
  }, {
    "name" : "private void insert(byte[] keyBytes, byte[] value, int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getKey(int index)",
    "returnType" : "String",
    "comment" : " Return a key in the TXT record by zero-based index. Returns null if index exceeds the total number of keys. ",
    "links" : [ ]
  }, {
    "name" : "private byte[] getValue(int index)",
    "returnType" : "byte[]",
    "comment" : "\n     * Look up a key in the TXT record by zero-based index and return its value.\n     * Returns null if index exceeds the total number of keys.\n     * Returns null if the key is present with no value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getValueAsString(int index)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte[] getValue(String forKey)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation.\n     * Example : {key1=value1},{key2=value2}..\n     *\n     * For a key say like \"key3\" with null value\n     * {key1=value1},{key2=value2}{key3}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSeparator", "mData", "CREATOR" ],
  "methodNames" : [ "public void set(String key, String value)", "public String get(String key)", "public int remove(String key)", "public int keyCount()", "public boolean contains(String key)", "public int size()", "public byte[] getRawData()", "private void insert(byte[] keyBytes, byte[] value, int index)", "private String getKey(int index)", "private byte[] getValue(int index)", "private String getValueAsString(int index)", "private byte[] getValue(String forKey)", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}