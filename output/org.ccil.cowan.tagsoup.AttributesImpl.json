{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/ccil/cowan/tagsoup/AttributesImpl.java",
  "packageName" : "org.ccil.cowan.tagsoup",
  "className" : "AttributesImpl",
  "comment" : "\n * Default implementation of the Attributes interface.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class provides a default implementation of the SAX2\n * {@link org.xml.sax.Attributes Attributes} interface, with the \n * addition of manipulators so that the list can be modified or \n * reused.</p>\n *\n * <p>There are two typical uses of this class:</p>\n *\n * <ol>\n * <li>to take a persistent snapshot of an Attributes object\n *  in a {@link org.xml.sax.ContentHandler#startElement startElement} event; or</li>\n * <li>to construct or modify an Attributes object in a SAX2 driver or filter.</li>\n * </ol>\n *\n * <p>This class replaces the now-deprecated SAX1 {@link \n * org.xml.sax.helpers.AttributeListImpl AttributeListImpl}\n * class; in addition to supporting the updated Attributes\n * interface rather than the deprecated {@link org.xml.sax.AttributeList\n * AttributeList} interface, it also includes a much more efficient \n * implementation using a single array rather than a set of Vectors.</p>\n *\n * @since SAX 2.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n ",
  "links" : [ "org.xml.sax.Attributes", "org.xml.sax.AttributeListAttributeList", "org.xml.sax.helpers.AttributeListImpl", "org.xml.sax.ContentHandler#startElement" ],
  "variables" : [ {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of attributes in the list.\n     *\n     * @return The number of attributes in the list.\n     * @see org.xml.sax.Attributes#getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getURI(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return an attribute's Namespace URI.\n     *\n     * @param index The attribute's index (zero-based).\n     * @return The Namespace URI, the empty string if none is\n     *         available, or null if the index is out of range.\n     * @see org.xml.sax.Attributes#getURI\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return an attribute's local name.\n     *\n     * @param index The attribute's index (zero-based).\n     * @return The attribute's local name, the empty string if \n     *         none is available, or null if the index if out of range.\n     * @see org.xml.sax.Attributes#getLocalName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getQName(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return an attribute's qualified (prefixed) name.\n     *\n     * @param index The attribute's index (zero-based).\n     * @return The attribute's qualified name, the empty string if \n     *         none is available, or null if the index is out of bounds.\n     * @see org.xml.sax.Attributes#getQName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return an attribute's type by index.\n     *\n     * @param index The attribute's index (zero-based).\n     * @return The attribute's type, \"CDATA\" if the type is unknown, or null\n     *         if the index is out of bounds.\n     * @see org.xml.sax.Attributes#getType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return an attribute's value by index.\n     *\n     * @param index The attribute's index (zero-based).\n     * @return The attribute's value or null if the index is out of bounds.\n     * @see org.xml.sax.Attributes#getValue(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(String uri, String localName)",
    "returnType" : "int",
    "comment" : "\n     * Look up an attribute's index by Namespace name.\n     *\n     * <p>In many cases, it will be more efficient to look up the name once and\n     * use the index query methods rather than using the name query methods\n     * repeatedly.</p>\n     *\n     * @param uri The attribute's Namespace URI, or the empty\n     *        string if none is available.\n     * @param localName The attribute's local name.\n     * @return The attribute's index, or -1 if none matches.\n     * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(String qName)",
    "returnType" : "int",
    "comment" : "\n     * Look up an attribute's index by qualified (prefixed) name.\n     *\n     * @param qName The qualified name.\n     * @return The attribute's index, or -1 if none matches.\n     * @see org.xml.sax.Attributes#getIndex(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType(String uri, String localName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's type by Namespace-qualified name.\n     *\n     * @param uri The Namespace URI, or the empty string for a name\n     *        with no explicit Namespace URI.\n     * @param localName The local name.\n     * @return The attribute's type, or null if there is no\n     *         matching attribute.\n     * @see org.xml.sax.Attributes#getType(java.lang.String,java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType(String qName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's type by qualified (prefixed) name.\n     *\n     * @param qName The qualified name.\n     * @return The attribute's type, or null if there is no\n     *         matching attribute.\n     * @see org.xml.sax.Attributes#getType(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String uri, String localName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's value by Namespace-qualified name.\n     *\n     * @param uri The Namespace URI, or the empty string for a name\n     *        with no explicit Namespace URI.\n     * @param localName The local name.\n     * @return The attribute's value, or null if there is no\n     *         matching attribute.\n     * @see org.xml.sax.Attributes#getValue(java.lang.String,java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String qName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's value by qualified (prefixed) name.\n     *\n     * @param qName The qualified name.\n     * @return The attribute's value, or null if there is no\n     *         matching attribute.\n     * @see org.xml.sax.Attributes#getValue(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear the attribute list for reuse.\n     *\n     * <p>Note that little memory is freed by this call:\n     * the current array is kept so it can be \n     * reused.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttributes(Attributes atts)",
    "returnType" : "void",
    "comment" : "\n     * Copy an entire Attributes object.\n     *\n     * <p>It may be more efficient to reuse an existing object\n     * rather than constantly allocating new ones.</p>\n     * \n     * @param atts The attributes to copy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String qName, String type, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add an attribute to the end of the list.\n     *\n     * <p>For the sake of speed, this method does no checking\n     * to see if the attribute is already in the list: that is\n     * the responsibility of the application.</p>\n     *\n     * @param uri The Namespace URI, or the empty string if\n     *        none is available or Namespace processing is not\n     *        being performed.\n     * @param localName The local name, or the empty string if\n     *        Namespace processing is not being performed.\n     * @param qName The qualified (prefixed) name, or the empty string\n     *        if qualified names are not available.\n     * @param type The attribute type as a string.\n     * @param value The attribute value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(int index, String uri, String localName, String qName, String type, String value)",
    "returnType" : "void",
    "comment" : "\n     * Set an attribute in the list.\n     *\n     * <p>For the sake of speed, this method does no checking\n     * for name conflicts or well-formedness: such checks are the\n     * responsibility of the application.</p>\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param uri The Namespace URI, or the empty string if\n     *        none is available or Namespace processing is not\n     *        being performed.\n     * @param localName The local name, or the empty string if\n     *        Namespace processing is not being performed.\n     * @param qName The qualified name, or the empty string\n     *        if qualified names are not available.\n     * @param type The attribute type as a string.\n     * @param value The attribute value.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAttribute(int index)",
    "returnType" : "void",
    "comment" : "\n     * Remove an attribute from the list.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setURI(int index, String uri)",
    "returnType" : "void",
    "comment" : "\n     * Set the Namespace URI of a specific attribute.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param uri The attribute's Namespace URI, or the empty\n     *        string for none.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalName(int index, String localName)",
    "returnType" : "void",
    "comment" : "\n     * Set the local name of a specific attribute.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param localName The attribute's local name, or the empty\n     *        string for none.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQName(int index, String qName)",
    "returnType" : "void",
    "comment" : "\n     * Set the qualified name of a specific attribute.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param qName The attribute's qualified name, or the empty\n     *        string for none.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setType(int index, String type)",
    "returnType" : "void",
    "comment" : "\n     * Set the type of a specific attribute.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param type The attribute's type.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(int index, String value)",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a specific attribute.\n     *\n     * @param index The index of the attribute (zero-based).\n     * @param value The attribute's value.\n     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n     *            supplied index does not point to an attribute\n     *            in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureCapacity(int n)",
    "returnType" : "void",
    "comment" : "\n     * Ensure the internal array's capacity.\n     *\n     * @param n The minimum number of attributes that the array must\n     *        be able to hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void badIndex(int index) throws ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : "\n     * Report a bad array index in a manipulator.\n     *\n     * @param index The index to report.\n     * @exception java.lang.ArrayIndexOutOfBoundsException Always.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLength()", "public String getURI(int index)", "public String getLocalName(int index)", "public String getQName(int index)", "public String getType(int index)", "public String getValue(int index)", "public int getIndex(String uri, String localName)", "public int getIndex(String qName)", "public String getType(String uri, String localName)", "public String getType(String qName)", "public String getValue(String uri, String localName)", "public String getValue(String qName)", "public void clear()", "public void setAttributes(Attributes atts)", "public void addAttribute(String uri, String localName, String qName, String type, String value)", "public void setAttribute(int index, String uri, String localName, String qName, String type, String value)", "public void removeAttribute(int index)", "public void setURI(int index, String uri)", "public void setLocalName(int index, String localName)", "public void setQName(int index, String qName)", "public void setType(int index, String type)", "public void setValue(int index, String value)", "private void ensureCapacity(int n)", "private void badIndex(int index) throws ArrayIndexOutOfBoundsException" ],
  "variableNames" : [ "length", "data" ]
}