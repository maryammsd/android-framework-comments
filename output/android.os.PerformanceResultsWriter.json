{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PerformanceCollector.java",
  "packageName" : "android.os",
  "className" : "PerformanceResultsWriter",
  "comment" : "\n     * Interface for reporting performance data.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void writeBeginSnapshot(String label)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as first action in\n         * PerformanceCollector#beginSnapshot(String) for reporting the start of\n         * a performance snapshot.\n         *\n         * @param label description of code block between beginSnapshot and\n         *              PerformanceCollector#endSnapshot()\n         * @see PerformanceCollector#beginSnapshot(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeEndSnapshot(Bundle results)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as last action in PerformanceCollector#endSnapshot()\n         * for reporting performance data collected in the snapshot.\n         *\n         * @param results memory and runtime metrics stored as key/value pairs,\n         *        in the same structure as returned by\n         *        PerformanceCollector#endSnapshot()\n         * @see PerformanceCollector#endSnapshot()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeStartTiming(String label)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as first action in\n         * PerformanceCollector#startTiming(String) for reporting the start of\n         * a timing measurement.\n         *\n         * @param label description of code block between startTiming and\n         *              PerformanceCollector#stopTiming(String)\n         * @see PerformanceCollector#startTiming(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeStopTiming(Bundle results)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as last action in\n         * {@link PerformanceCollector#stopTiming(String)} for reporting the\n         * sequence of timings measured.\n         *\n         * @param results runtime metrics of code block between calls to\n         *                startTiming and stopTiming, in the same structure as\n         *                returned by PerformanceCollector#stopTiming(String)\n         * @see PerformanceCollector#stopTiming(String)\n         ",
    "links" : [ "android.os.PerformanceCollector#stopTiming(String)" ]
  }, {
    "name" : "public void writeMeasurement(String label, long value)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as last action in\n         * {@link PerformanceCollector#addMeasurement(String, long)} for\n         * reporting an integer type measurement.\n         *\n         * @param label short description of the metric that was measured\n         * @param value long value of the measurement\n         ",
    "links" : [ "android.os.PerformanceCollector#addMeasurement(String" ]
  }, {
    "name" : "public void writeMeasurement(String label, float value)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as last action in\n         * {@link PerformanceCollector#addMeasurement(String, float)} for\n         * reporting a float type measurement.\n         *\n         * @param label short description of the metric that was measured\n         * @param value float value of the measurement\n         ",
    "links" : [ "android.os.PerformanceCollector#addMeasurement(String" ]
  }, {
    "name" : "public void writeMeasurement(String label, String value)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked as last action in\n         * {@link PerformanceCollector#addMeasurement(String, String)} for\n         * reporting a string field.\n         *\n         * @param label short description of the metric that was measured\n         * @param value string summary of the measurement\n         ",
    "links" : [ "android.os.PerformanceCollector#addMeasurement(String" ]
  } ],
  "methodNames" : [ "public void writeBeginSnapshot(String label)", "public void writeEndSnapshot(Bundle results)", "public void writeStartTiming(String label)", "public void writeStopTiming(Bundle results)", "public void writeMeasurement(String label, long value)", "public void writeMeasurement(String label, float value)", "public void writeMeasurement(String label, String value)" ],
  "variableNames" : [ ]
}