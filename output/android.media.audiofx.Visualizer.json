{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/Visualizer.java",
  "packageName" : "android.media.audiofx",
  "className" : "Visualizer",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_UNINITIALIZED",
    "type" : "int",
    "comment" : "\n     * State of a Visualizer object that was not successfully initialized upon creation\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_INITIALIZED",
    "type" : "int",
    "comment" : "\n     * State of a Visualizer object that is ready to be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ENABLED",
    "type" : "int",
    "comment" : "\n     * State of a Visualizer object that is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCALING_MODE_NORMALIZED",
    "type" : "int",
    "comment" : "\n     * Defines a capture mode where amplification is applied based on the content of the captured\n     * data. This is the default Visualizer mode, and is suitable for music visualization.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCALING_MODE_AS_PLAYED",
    "type" : "int",
    "comment" : "\n     * Defines a capture mode where the playback volume will affect (scale) the range of the\n     * captured data. A low playback volume will lead to low sample and fft values, and vice-versa.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEASUREMENT_MODE_NONE",
    "type" : "int",
    "comment" : "\n     * Defines a measurement mode in which no measurements are performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEASUREMENT_MODE_PEAK_RMS",
    "type" : "int",
    "comment" : "\n     * Defines a measurement mode which computes the peak and RMS value in mB, where 0mB is the\n     * maximum sample value, and -9600mB is the minimum value.\n     * Values for peak and RMS can be retrieved with\n     * {@link #getMeasurementPeakRms(MeasurementPeakRms)}.\n     ",
    "links" : [ "#getMeasurementPeakRms(MeasurementPeakRms)" ]
  }, {
    "name" : "NATIVE_EVENT_PCM_CAPTURE",
    "type" : "int",
    "comment" : " to keep in sync with frameworks/base/media/jni/audioeffect/android_media_Visualizer.cpp",
    "links" : [ ]
  }, {
    "name" : "NATIVE_EVENT_FFT_CAPTURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_EVENT_SERVER_DIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : "\n     * Successful operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "int",
    "comment" : "\n     * Unspecified error.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALREADY_EXISTS",
    "type" : "int",
    "comment" : "\n     * Internal operation status. Not returned by any method.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_INIT",
    "type" : "int",
    "comment" : "\n     * Operation failed due to bad object initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BAD_VALUE",
    "type" : "int",
    "comment" : "\n     * Operation failed due to bad parameter value.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_OPERATION",
    "type" : "int",
    "comment" : "\n     * Operation failed because it was requested in wrong state.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_MEMORY",
    "type" : "int",
    "comment" : "\n     * Operation failed due to lack of memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_DEAD_OBJECT",
    "type" : "int",
    "comment" : "\n     * Operation failed due to dead remote object.\n     ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "\n     * Indicates the state of the Visualizer instance\n     ",
    "links" : [ ]
  }, {
    "name" : "mStateLock",
    "type" : "Object",
    "comment" : "\n     * Lock to synchronize access to mState\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * System wide unique Identifier of the visualizer engine used by this Visualizer instance\n     ",
    "links" : [ ]
  }, {
    "name" : "mListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock to protect listeners updates against event notifications\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeEventHandler",
    "type" : "Handler",
    "comment" : "\n     * Handler for events coming from the native code\n     ",
    "links" : [ ]
  }, {
    "name" : "mCaptureListener",
    "type" : "OnDataCaptureListener",
    "comment" : "\n     *  PCM and FFT capture listener registered by client\n     ",
    "links" : [ ]
  }, {
    "name" : "mServerDiedListener",
    "type" : "OnServerDiedListener",
    "comment" : "\n     *  Server Died listener registered by client\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeVisualizer",
    "type" : "long",
    "comment" : " guarded by a static lock in native code",
    "links" : [ ]
  }, {
    "name" : "mJniData",
    "type" : "long",
    "comment" : " set in native_setup, _release;",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases the native Visualizer resources. It is a good practice to release the\n     * visualization engine when not in use.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setEnabled(boolean enabled) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Enable or disable the visualization engine.\n     * @param enabled requested enable state\n     * @return {@link #SUCCESS} in case of success,\n     * {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#SUCCESS", "#ERROR_INVALID_OPERATION" ]
  }, {
    "name" : "public boolean getEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Get current activation state of the visualizer.\n     * @return true if the visualizer is active, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int[] getCaptureSizeRange()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the capture size range.\n     * @return the mininum capture size is returned in first array element and the maximum in second\n     * array element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getMaxCaptureRate()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum capture rate for the callback capture method. This is the maximum value\n     * for the rate parameter of the\n     * {@link #setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean)} method.\n     * @return the maximum capture rate expressed in milliHertz\n     ",
    "links" : [ "#setDataCaptureListener(OnDataCaptureListener" ]
  }, {
    "name" : "public int setCaptureSize(int size) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Sets the capture size, i.e. the number of bytes returned by {@link #getWaveForm(byte[])} and\n     * {@link #getFft(byte[])} methods. The capture size must be a power of 2 in the range returned\n     * by {@link #getCaptureSizeRange()}.\n     * This method must not be called when the Visualizer is enabled.\n     * @param size requested capture size\n     * @return {@link #SUCCESS} in case of success,\n     * {@link #ERROR_BAD_VALUE} in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#getFft(byte", "#getWaveForm(byte", "#ERROR_BAD_VALUE", "#getCaptureSizeRange()", "#SUCCESS" ]
  }, {
    "name" : "public int getCaptureSize() throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns current capture size.\n     * @return the capture size in bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setScalingMode(int mode) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set the type of scaling applied on the captured visualization data.\n     * @param mode see {@link #SCALING_MODE_NORMALIZED}\n     *     and {@link #SCALING_MODE_AS_PLAYED}\n     * @return {@link #SUCCESS} in case of success,\n     *     {@link #ERROR_BAD_VALUE} in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#SCALING_MODE_NORMALIZED", "#ERROR_BAD_VALUE", "#SUCCESS", "#SCALING_MODE_AS_PLAYED" ]
  }, {
    "name" : "public int getScalingMode() throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns the current scaling mode on the captured visualization data.\n     * @return the scaling mode, see {@link #SCALING_MODE_NORMALIZED}\n     *     and {@link #SCALING_MODE_AS_PLAYED}.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#SCALING_MODE_NORMALIZED", "#SCALING_MODE_AS_PLAYED" ]
  }, {
    "name" : "public int setMeasurementMode(int mode) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Sets the combination of measurement modes to be performed by this audio effect.\n     * @param mode a mask of the measurements to perform. The valid values are\n     *     {@link #MEASUREMENT_MODE_NONE} (to cancel any measurement)\n     *     or {@link #MEASUREMENT_MODE_PEAK_RMS}.\n     * @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE} in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#ERROR_BAD_VALUE", "#SUCCESS", "#MEASUREMENT_MODE_NONE", "#MEASUREMENT_MODE_PEAK_RMS" ]
  }, {
    "name" : "public int getMeasurementMode() throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns the current measurement modes performed by this audio effect\n     * @return the mask of the measurements,\n     *     {@link #MEASUREMENT_MODE_NONE} (when no measurements are performed)\n     *     or {@link #MEASUREMENT_MODE_PEAK_RMS}.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#MEASUREMENT_MODE_NONE", "#MEASUREMENT_MODE_PEAK_RMS" ]
  }, {
    "name" : "public int getSamplingRate() throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns the sampling rate of the captured audio.\n     * @return the sampling rate in milliHertz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWaveForm(byte[] waveform) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns a waveform capture of currently playing audio content. The capture consists in\n     * a number of consecutive 8-bit (unsigned) mono PCM samples equal to the capture size returned\n     * by {@link #getCaptureSize()}.\n     * <p>This method must be called when the Visualizer is enabled.\n     * @param waveform array of bytes where the waveform should be returned\n     * @return {@link #SUCCESS} in case of success,\n     * {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT}\n     * in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#SUCCESS", "#getCaptureSize()", "#ERROR_INVALID_OPERATION", "#ERROR_NO_MEMORY" ]
  }, {
    "name" : "public int getFft(byte[] fft) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns a frequency capture of currently playing audio content.\n     * <p>This method must be called when the Visualizer is enabled.\n     * <p>The capture is an 8-bit magnitude FFT, the frequency range covered being 0 (DC) to half of\n     * the sampling rate returned by {@link #getSamplingRate()}. The capture returns the real and\n     * imaginary parts of a number of frequency points equal to half of the capture size plus one.\n     * <p>Note: only the real part is returned for the first point (DC) and the last point\n     * (sampling frequency / 2).\n     * <p>The layout in the returned byte array is as follows:\n     * <ul>\n     *   <li> n is the capture size returned by getCaptureSize()</li>\n     *   <li> Rfk, Ifk are respectively  the real and imaginary parts of the kth frequency\n     *   component</li>\n     *   <li> If Fs is the sampling frequency retuned by getSamplingRate() the kth frequency is:\n     *   k * Fs / n </li>\n     * </ul>\n     * <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n     * <tr><td>Index </p></td>\n     *     <td>0 </p></td>\n     *     <td>1 </p></td>\n     *     <td>2 </p></td>\n     *     <td>3 </p></td>\n     *     <td>4 </p></td>\n     *     <td>5 </p></td>\n     *     <td>... </p></td>\n     *     <td>n - 2 </p></td>\n     *     <td>n - 1 </p></td></tr>\n     * <tr><td>Data </p></td>\n     *     <td>Rf0 </p></td>\n     *     <td>Rf(n/2) </p></td>\n     *     <td>Rf1 </p></td>\n     *     <td>If1 </p></td>\n     *     <td>Rf2 </p></td>\n     *     <td>If2 </p></td>\n     *     <td>... </p></td>\n     *     <td>Rf(n/2-1) </p></td>\n     *     <td>If(n/2-1) </p></td></tr>\n     * </table>\n     * <p>In order to obtain magnitude and phase values the following code can\n     * be used:\n     *    <pre class=\"prettyprint\">\n     *       int n = fft.size();\n     *       float[] magnitudes = new float[n / 2 + 1];\n     *       float[] phases = new float[n / 2 + 1];\n     *       magnitudes[0] = (float)Math.abs(fft[0]);      // DC\n     *       magnitudes[n / 2] = (float)Math.abs(fft[1]);  // Nyquist\n     *       phases[0] = phases[n / 2] = 0;\n     *       for (int k = 1; k &lt; n / 2; k++) {\n     *           int i = k * 2;\n     *           magnitudes[k] = (float)Math.hypot(fft[i], fft[i + 1]);\n     *           phases[k] = (float)Math.atan2(fft[i + 1], fft[i]);\n     *       }</pre>\n     * @param fft array of bytes where the FFT should be returned\n     * @return {@link #SUCCESS} in case of success,\n     * {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT}\n     * in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#getSamplingRate()", "#SUCCESS", "#ERROR_INVALID_OPERATION", "#ERROR_NO_MEMORY" ]
  }, {
    "name" : "public int getMeasurementPeakRms(MeasurementPeakRms measurement)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the latest peak and RMS measurement.\n     * Sets the peak and RMS fields of the supplied {@link Visualizer.MeasurementPeakRms} to the\n     * latest measured values.\n     * @param measurement a non-null {@link Visualizer.MeasurementPeakRms} instance to store\n     *    the measurement values.\n     * @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE},\n     *    {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT}\n     *    in case of failure.\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#ERROR_BAD_VALUE", "#SUCCESS", "Visualizer.MeasurementPeakRms", "#ERROR_INVALID_OPERATION", "#ERROR_NO_MEMORY" ]
  }, {
    "name" : "public int setDataCaptureListener(OnDataCaptureListener listener, int rate, boolean waveform, boolean fft)",
    "returnType" : "int",
    "comment" : "\n     * Registers an OnDataCaptureListener interface and specifies the rate at which the capture\n     * should be updated as well as the type of capture requested.\n     * <p>Call this method with a null listener to stop receiving the capture updates.\n     * @param listener OnDataCaptureListener registered\n     * @param rate rate in milliHertz at which the capture should be updated\n     * @param waveform true if a waveform capture is requested: the onWaveFormDataCapture()\n     * method will be called on the OnDataCaptureListener interface.\n     * @param fft true if a frequency capture is requested: the onFftDataCapture() method will be\n     * called on the OnDataCaptureListener interface.\n     * @return {@link #SUCCESS} in case of success,\n     * {@link #ERROR_NO_INIT} or {@link #ERROR_BAD_VALUE} in case of failure.\n     ",
    "links" : [ "#ERROR_NO_INIT", "#ERROR_BAD_VALUE", "#SUCCESS" ]
  }, {
    "name" : "public int setServerDiedListener(OnServerDiedListener listener)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     *\n     * Registers an OnServerDiedListener interface.\n     * <p>Call this method with a null listener to stop receiving server death notifications.\n     * @return {@link #SUCCESS} in case of success,\n     ",
    "links" : [ "#SUCCESS" ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setup(Object audioeffect_this, int audioSession, int[] id, String opPackageName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setEnabled(boolean enabled)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_getEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setCaptureSize(int size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getCaptureSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setScalingMode(int mode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getScalingMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setMeasurementMode(int mode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getMeasurementMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getSamplingRate()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getWaveForm(byte[] waveform)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getFft(byte[] fft)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getPeakRms(MeasurementPeakRms measurement)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setPeriodicCapture(int rate, boolean waveForm, boolean fft)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void postEventFromNative(Object effect_ref, int what, int samplingRate, byte[] data)",
    "returnType" : "void",
    "comment" : "--------------------",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "STATE_UNINITIALIZED", "STATE_INITIALIZED", "STATE_ENABLED", "SCALING_MODE_NORMALIZED", "SCALING_MODE_AS_PLAYED", "MEASUREMENT_MODE_NONE", "MEASUREMENT_MODE_PEAK_RMS", "NATIVE_EVENT_PCM_CAPTURE", "NATIVE_EVENT_FFT_CAPTURE", "NATIVE_EVENT_SERVER_DIED", "SUCCESS", "ERROR", "ALREADY_EXISTS", "ERROR_NO_INIT", "ERROR_BAD_VALUE", "ERROR_INVALID_OPERATION", "ERROR_NO_MEMORY", "ERROR_DEAD_OBJECT", "mState", "mStateLock", "mId", "mListenerLock", "mNativeEventHandler", "mCaptureListener", "mServerDiedListener", "mNativeVisualizer", "mJniData" ],
  "methodNames" : [ "public void release()", "protected void finalize()", "public int setEnabled(boolean enabled) throws IllegalStateException", "public boolean getEnabled()", "public static native int[] getCaptureSizeRange()", "public static native int getMaxCaptureRate()", "public int setCaptureSize(int size) throws IllegalStateException", "public int getCaptureSize() throws IllegalStateException", "public int setScalingMode(int mode) throws IllegalStateException", "public int getScalingMode() throws IllegalStateException", "public int setMeasurementMode(int mode) throws IllegalStateException", "public int getMeasurementMode() throws IllegalStateException", "public int getSamplingRate() throws IllegalStateException", "public int getWaveForm(byte[] waveform) throws IllegalStateException", "public int getFft(byte[] fft) throws IllegalStateException", "public int getMeasurementPeakRms(MeasurementPeakRms measurement)", "public int setDataCaptureListener(OnDataCaptureListener listener, int rate, boolean waveform, boolean fft)", "public int setServerDiedListener(OnServerDiedListener listener)", "private static final native void native_init()", "private final native int native_setup(Object audioeffect_this, int audioSession, int[] id, String opPackageName)", "private final native void native_finalize()", "private final native void native_release()", "private final native int native_setEnabled(boolean enabled)", "private final native boolean native_getEnabled()", "private final native int native_setCaptureSize(int size)", "private final native int native_getCaptureSize()", "private final native int native_setScalingMode(int mode)", "private final native int native_getScalingMode()", "private final native int native_setMeasurementMode(int mode)", "private final native int native_getMeasurementMode()", "private final native int native_getSamplingRate()", "private final native int native_getWaveForm(byte[] waveform)", "private final native int native_getFft(byte[] fft)", "private final native int native_getPeakRms(MeasurementPeakRms measurement)", "private final native int native_setPeriodicCapture(int rate, boolean waveForm, boolean fft)", "private static void postEventFromNative(Object effect_ref, int what, int samplingRate, byte[] data)" ]
}