{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Vibrator.java",
  "packageName" : "android.os",
  "className" : "Vibrator",
  "comment" : "\n * Class that operates the vibrator on the device.\n * <p>\n * If your process exits, any vibration you started will stop.\n * </p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_INTENSITY_OFF",
    "type" : "int",
    "comment" : "\n     * Vibration intensity: no vibrations.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_INTENSITY_LOW",
    "type" : "int",
    "comment" : "\n     * Vibration intensity: low.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_INTENSITY_MEDIUM",
    "type" : "int",
    "comment" : "\n     * Vibration intensity: medium.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_INTENSITY_HIGH",
    "type" : "int",
    "comment" : "\n     * Vibration intensity: high.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_EFFECT_SUPPORT_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Vibration effect support: unknown\n     *\n     * <p>The hardware doesn't report its supported effects, so we can't determine whether the\n     * effect is supported or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_EFFECT_SUPPORT_YES",
    "type" : "int",
    "comment" : "\n     * Vibration effect support: supported\n     *\n     * <p>This effect is supported by the underlying hardware.\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATION_EFFECT_SUPPORT_NO",
    "type" : "int",
    "comment" : "\n     * Vibration effect support: unsupported\n     *\n     * <p>This effect is <b>not</b> natively supported by the underlying hardware, although\n     * the system may still play a fallback vibration.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVibrationConfig",
    "type" : "VibrationConfig",
    "comment" : " This is lazily loaded only for the few clients that need this (e. Settings app).",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VibratorInfo getInfo()",
    "returnType" : "VibratorInfo",
    "comment" : "\n     * Get the info describing this vibrator.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private VibrationConfig getConfig()",
    "returnType" : "VibrationConfig",
    "comment" : " Get the static vibrator configuration from config.xml. ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultVibrationIntensity(@VibrationAttributes.Usage int usage)",
    "returnType" : "int",
    "comment" : "\n     * Get the default vibration intensity for given usage.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultKeyboardVibrationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the keyboard vibration is enabled by default.\n     *\n     * @return {@code true} if the keyboard vibration is default enabled, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Return the ID of this vibrator.\n     *\n     * @return A non-negative integer representing the id of the vibrator controlled by this\n     * service, or -1 this service is not attached to any physical vibrator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasVibrator()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the hardware has a vibrator.\n     *\n     * @return True if the hardware has a vibrator, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasAmplitudeControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator has amplitude control.\n     *\n     * @return True if the hardware can control the amplitude of the vibrations, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFrequencyControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator has independent frequency control.\n     *\n     * @return True if the hardware can control the frequency of the vibrations independently of\n     * the vibration amplitude, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean areVibrationFeaturesSupported(@NonNull VibrationEffect effect)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether or not the vibrator supports all components of a given {@link VibrationEffect}\n     * (i.e. the vibrator can play the given effect as intended).\n     *\n     * <p>If this method returns {@code true}, then the VibrationEffect should play as expected.\n     * If {@code false}, playing the VibrationEffect might still make a vibration, but the vibration\n     * may be significantly degraded from the intention.\n     *\n     * <p>This method aggregates the results of feature check methods such as\n     * {@link #hasAmplitudeControl}, {@link #areAllPrimitivesSupported(int...)}, etc, depending\n     * on the features that are actually used by the VibrationEffect.\n     *\n     * @param effect the {@link VibrationEffect} to check if it is supported\n     * @return {@code true} if the vibrator can play the given {@code effect} as intended,\n     *         {@code false} otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "#hasAmplitudeControl", "android.os.VibrationEffect", "#areAllPrimitivesSupported(int...)" ]
  }, {
    "name" : "public boolean hasExternalControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator can be controlled by an external service with the\n     * {@link IExternalVibratorService}.\n     *\n     * @return True if the hardware can be controlled by an external service, otherwise false.\n     * @hide\n     ",
    "links" : [ "IExternalVibratorService" ]
  }, {
    "name" : "public float getResonantFrequency()",
    "returnType" : "float",
    "comment" : "\n     * Gets the resonant frequency of the vibrator, if applicable.\n     *\n     * @return the resonant frequency of the vibrator, or {@link Float#NaN NaN} if it's unknown, not\n     * applicable, or if this vibrator is a composite of multiple physical devices with different\n     * frequencies.\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public float getQFactor()",
    "returnType" : "float",
    "comment" : "\n     * Gets the <a href=\"https://en.wikipedia.org/wiki/Q_factor\">Q factor</a> of the vibrator.\n     *\n     * @return the Q factor of the vibrator, or {@link Float#NaN NaN} if it's unknown, not\n     * applicable, or if this vibrator is a composite of multiple physical devices with different\n     * Q factors.\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public VibratorFrequencyProfile getFrequencyProfile()",
    "returnType" : "VibratorFrequencyProfile",
    "comment" : "\n     * Gets the profile that describes the vibrator output across the supported frequency range.\n     *\n     * <p>The profile describes the relative output acceleration that the device can reach when it\n     * vibrates at different frequencies.\n     *\n     * @return The frequency profile for this vibrator, or null if the vibrator does not have\n     * frequency control. If this vibrator is a composite of multiple physical devices then this\n     * will return a profile supported in all devices, or null if the intersection is empty or not\n     * available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getHapticChannelMaximumAmplitude()",
    "returnType" : "float",
    "comment" : "\n     * Return the maximum amplitude the vibrator can play using the audio haptic channels.\n     *\n     * <p>This is a positive value, or {@link Float#NaN NaN} if it's unknown. If this returns a\n     * positive value <code>maxAmplitude</code>, then the signals from the haptic channels of audio\n     * tracks should be in the range <code>[-maxAmplitude, maxAmplitude]</code>.\n     *\n     * @return a positive value representing the maximum absolute value the device can play signals\n     * from audio haptic channels, or {@link Float#NaN NaN} if it's unknown.\n     * @hide\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public boolean setAlwaysOnEffect(int alwaysOnId, @Nullable VibrationEffect effect, @Nullable VibrationAttributes attributes)",
    "returnType" : "boolean",
    "comment" : "\n     * Configure an always-on haptics effect.\n     *\n     * @param alwaysOnId The board-specific always-on ID to configure.\n     * @param effect     Vibration effect to assign to always-on id. Passing null will disable it.\n     * @param attributes {@link VibrationAttributes} corresponding to the vibration. For example,\n     *                   specify {@link VibrationAttributes#USAGE_ALARM} for alarm vibrations or\n     *                   {@link VibrationAttributes#USAGE_RINGTONE} for vibrations associated with\n     *                   incoming calls. May only be null when effect is null.\n     * @hide\n     ",
    "links" : [ "android.os.VibrationAttributes#USAGE_ALARM", "android.os.VibrationAttributes#USAGE_RINGTONE", "android.os.VibrationAttributes" ]
  }, {
    "name" : "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, @Nullable VibrationEffect effect, @Nullable VibrationAttributes attributes)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void vibrate(long milliseconds)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate constantly for the specified period of time.\n     *\n     * <p>The app should be in the foreground for the vibration to happen.</p>\n     *\n     * @param milliseconds The number of milliseconds to vibrate.\n     * @deprecated Use {@link #vibrate(VibrationEffect)} instead.\n     ",
    "links" : [ "#vibrate(VibrationEffect)" ]
  }, {
    "name" : "public void vibrate(long milliseconds, AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate constantly for the specified period of time.\n     *\n     * <p>The app should be in the foreground for the vibration to happen. Background apps should\n     * specify a ringtone, notification or alarm usage in order to vibrate.</p>\n     *\n     * @param milliseconds The number of milliseconds to vibrate.\n     * @param attributes   {@link AudioAttributes} corresponding to the vibration. For example,\n     *                     specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or\n     *                     {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for\n     *                     vibrations associated with incoming calls.\n     * @deprecated Use {@link #vibrate(VibrationEffect, VibrationAttributes)} instead.\n     ",
    "links" : [ "android.media.AudioAttributes#USAGE_ALARM", "#vibrate(VibrationEffect", "android.media.AudioAttributes", "android.media.AudioAttributes#USAGE_NOTIFICATION_RINGTONE" ]
  }, {
    "name" : "public void vibrate(long[] pattern, int repeat)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given pattern.\n     *\n     * <p>\n     * Pass in an array of ints that are the durations for which to turn on or off\n     * the vibrator in milliseconds.  The first value indicates the number of milliseconds\n     * to wait before turning the vibrator on.  The next value indicates the number of milliseconds\n     * for which to keep the vibrator on before turning it off.  Subsequent values alternate\n     * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.\n     * </p><p>\n     * To cause the pattern to repeat, pass the index into the pattern array at which\n     * to start the repeat, or -1 to disable repeating.\n     * </p>\n     *\n     * <p>The app should be in the foreground for the vibration to happen.</p>\n     *\n     * @param pattern an array of longs of times for which to turn the vibrator on or off.\n     * @param repeat  the index into pattern at which to repeat, or -1 if\n     *                you don't want to repeat.\n     * @deprecated Use {@link #vibrate(VibrationEffect)} instead.\n     ",
    "links" : [ "#vibrate(VibrationEffect)" ]
  }, {
    "name" : "public void vibrate(long[] pattern, int repeat, AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given pattern.\n     *\n     * <p>\n     * Pass in an array of ints that are the durations for which to turn on or off\n     * the vibrator in milliseconds.  The first value indicates the number of milliseconds\n     * to wait before turning the vibrator on.  The next value indicates the number of milliseconds\n     * for which to keep the vibrator on before turning it off.  Subsequent values alternate\n     * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.\n     * </p><p>\n     * To cause the pattern to repeat, pass the index into the pattern array at which\n     * to start the repeat, or -1 to disable repeating.\n     * </p>\n     *\n     * <p>The app should be in the foreground for the vibration to happen. Background apps should\n     * specify a ringtone, notification or alarm usage in order to vibrate.</p>\n     *\n     * @param pattern    an array of longs of times for which to turn the vibrator on or off.\n     * @param repeat     the index into pattern at which to repeat, or -1 if\n     *                   you don't want to repeat.\n     * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,\n     *                   specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or\n     *                   {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for\n     *                   vibrations associated with incoming calls.\n     * @deprecated Use {@link #vibrate(VibrationEffect, VibrationAttributes)} instead.\n     ",
    "links" : [ "android.media.AudioAttributes#USAGE_ALARM", "#vibrate(VibrationEffect", "android.media.AudioAttributes", "android.media.AudioAttributes#USAGE_NOTIFICATION_RINGTONE" ]
  }, {
    "name" : "public void vibrate(VibrationEffect vibe)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given effect.\n     *\n     * <p>The app should be in the foreground for the vibration to happen.</p>\n     *\n     * @param vibe {@link VibrationEffect} describing the vibration to be performed.\n     ",
    "links" : [ "android.os.VibrationEffect" ]
  }, {
    "name" : "public void vibrate(VibrationEffect vibe, AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given effect.\n     *\n     * <p>The app should be in the foreground for the vibration to happen. Background apps should\n     * specify a ringtone, notification or alarm usage in order to vibrate.</p>\n     *\n     * @param vibe       {@link VibrationEffect} describing the vibration to be performed.\n     * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,\n     *                   specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or\n     *                   {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for\n     *                   vibrations associated with incoming calls.\n     * @deprecated Use {@link #vibrate(VibrationEffect, VibrationAttributes)} instead.\n     ",
    "links" : [ "android.media.AudioAttributes#USAGE_ALARM", "android.os.VibrationEffect", "#vibrate(VibrationEffect", "android.media.AudioAttributes", "android.media.AudioAttributes#USAGE_NOTIFICATION_RINGTONE" ]
  }, {
    "name" : "public void vibrate(@NonNull VibrationEffect vibe, @NonNull VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given effect.\n     *\n     * <p>The app should be in the foreground for the vibration to happen. Background apps should\n     * specify a ringtone, notification or alarm usage in order to vibrate.</p>\n     *\n     * @param vibe       {@link VibrationEffect} describing the vibration to be performed.\n     * @param attributes {@link VibrationAttributes} corresponding to the vibration. For example,\n     *                   specify {@link VibrationAttributes#USAGE_ALARM} for alarm vibrations or\n     *                   {@link VibrationAttributes#USAGE_RINGTONE} for vibrations associated with\n     *                   incoming calls.\n     ",
    "links" : [ "android.os.VibrationEffect", "android.os.VibrationAttributes#USAGE_ALARM", "android.os.VibrationAttributes#USAGE_RINGTONE", "android.os.VibrationAttributes" ]
  }, {
    "name" : "public abstract void vibrate(int uid, String opPkg, @NonNull VibrationEffect vibe, String reason, @NonNull VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #vibrate(VibrationEffect, VibrationAttributes)}, but allows the\n     * caller to specify the vibration is owned by someone else and set a reason for vibration.\n     *\n     * @hide\n     ",
    "links" : [ "#vibrate(VibrationEffect" ]
  }, {
    "name" : "public void performHapticFeedback(int constant, boolean always, String reason, boolean fromIme)",
    "returnType" : "void",
    "comment" : "\n     * Performs a haptic feedback.\n     *\n     * <p>A haptic feedback is a short vibration feedback. The type of feedback is identified via\n     * the {@code constant}, which should be one of the effect constants provided in\n     * {@link HapticFeedbackConstants}. The haptic feedback provided for a given effect ID is\n     * consistent across all usages on the same device.\n     *\n     * @param constant the ID for the haptic feedback. This should be one of the constants defined\n     *          in {@link HapticFeedbackConstants}.\n     * @param always {@code true} if the haptic feedback should be played regardless of the user\n     *          vibration intensity settings applicable to the corresponding vibration.\n     *          {@code false} if the vibration for the haptic feedback should respect the applicable\n     *          vibration intensity settings.\n     * @param reason the reason for this haptic feedback.\n     * @param fromIme the haptic feedback is performed from an IME.\n     *\n     * @hide\n     ",
    "links" : [ "HapticFeedbackConstants" ]
  }, {
    "name" : "public int[] areEffectsSupported(@NonNull @VibrationEffect.EffectType int... effectIds)",
    "returnType" : "int[]",
    "comment" : "\n     * Query whether the vibrator natively supports the given effects.\n     *\n     * <p>If an effect is not supported, the system may still automatically fall back to playing\n     * a simpler vibration instead, which is not optimised for the specific device. This includes\n     * the unknown case, which can't be determined in advance, that will dynamically attempt to\n     * fall back if the optimised effect fails to play.\n     *\n     * <p>The returned array will be the same length as the query array and the value at a given\n     * index will contain {@link #VIBRATION_EFFECT_SUPPORT_YES} if the effect at that same index\n     * in the querying array is supported, {@link #VIBRATION_EFFECT_SUPPORT_NO} if it isn't\n     * supported, or {@link #VIBRATION_EFFECT_SUPPORT_UNKNOWN} if the system can't determine whether\n     * it's supported or not, as some hardware doesn't report its effect capabilities.\n     *\n     * <p>Use {@link #areAllEffectsSupported(int...)} to get a single combined result,\n     * or for convenience when querying exactly one effect.\n     *\n     * @param effectIds Which effects to query for.\n     * @return An array containing the systems current knowledge about whether the given effects\n     * are natively supported by the device, or not.\n     ",
    "links" : [ "#VIBRATION_EFFECT_SUPPORT_NO", "#VIBRATION_EFFECT_SUPPORT_YES", "#areAllEffectsSupported(int...)", "#VIBRATION_EFFECT_SUPPORT_UNKNOWN" ]
  }, {
    "name" : "public final int areAllEffectsSupported(@NonNull @VibrationEffect.EffectType int... effectIds)",
    "returnType" : "int",
    "comment" : "\n     * Query whether the vibrator supports all the given effects. If no argument is provided this\n     * method will always return {@link #VIBRATION_EFFECT_SUPPORT_YES}.\n     *\n     * <p>If an effect is not supported, the system may still automatically fall back to a simpler\n     * vibration instead, which is not optimised for the specific device, however vibration isn't\n     * guaranteed in this case.\n     *\n     * <p>If the result is {@link #VIBRATION_EFFECT_SUPPORT_YES}, all effects in the query are\n     * supported by the hardware.\n     *\n     * <p>If the result is {@link #VIBRATION_EFFECT_SUPPORT_NO}, at least one of the effects in the\n     * query is not supported, and using them may fall back to an un-optimized vibration or no\n     * vibration.\n     *\n     * <p>If the result is {@link #VIBRATION_EFFECT_SUPPORT_UNKNOWN}, the system doesn't know\n     * whether all the effects are supported. It may support any or all of the queried effects,\n     * but there's no way to programmatically know whether a {@link #vibrate} call will successfully\n     * cause a vibration. It's guaranteed, however, that none of the queried effects are\n     * definitively unsupported by the hardware.\n     *\n     * <p>Use {@link #areEffectsSupported(int...)} to get individual results for each effect.\n     *\n     * @param effectIds Which effects to query for.\n     * @return Whether all specified effects are natively supported by the device. Empty query\n     * defaults to {@link #VIBRATION_EFFECT_SUPPORT_YES}.\n     ",
    "links" : [ "#vibrate", "#VIBRATION_EFFECT_SUPPORT_NO", "#VIBRATION_EFFECT_SUPPORT_YES", "#areEffectsSupported(int...)", "#VIBRATION_EFFECT_SUPPORT_UNKNOWN" ]
  }, {
    "name" : "public boolean[] arePrimitivesSupported(@NonNull @VibrationEffect.Composition.PrimitiveType int... primitiveIds)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Query whether the vibrator supports the given primitives.\n     *\n     * The returned array will be the same length as the query array and the value at a given index\n     * will contain whether the effect at that same index in the querying array is supported or\n     * not.\n     *\n     * <p>If a primitive is not supported by the device, then <em>no vibration</em> will occur if\n     * it is played.\n     *\n     * <p>Use {@link #areAllPrimitivesSupported(int...)} to get a single combined result,\n     * or for convenience when querying exactly one primitive.\n     *\n     * @param primitiveIds Which primitives to query for.\n     * @return Whether the primitives are supported.\n     ",
    "links" : [ "#areAllPrimitivesSupported(int...)" ]
  }, {
    "name" : "public final boolean areAllPrimitivesSupported(@NonNull @VibrationEffect.Composition.PrimitiveType int... primitiveIds)",
    "returnType" : "boolean",
    "comment" : "\n     * Query whether the vibrator supports all of the given primitives.  If no argument is provided\n     * this method will always return {@code true}.\n     *\n     * <p>If a primitive is not supported by the device, then <em>no vibration</em> will occur if\n     * it is played.\n     *\n     * <p>Use {@link #arePrimitivesSupported(int...)} to get individual results for each primitive.\n     *\n     * @param primitiveIds Which primitives to query for.\n     * @return Whether all specified primitives are supported. Empty query defaults to {@code true}.\n     ",
    "links" : [ "#arePrimitivesSupported(int...)" ]
  }, {
    "name" : "public int[] getPrimitiveDurations(@NonNull @VibrationEffect.Composition.PrimitiveType int... primitiveIds)",
    "returnType" : "int[]",
    "comment" : "\n     * Query the estimated durations of the given primitives.\n     *\n     * <p>The returned array will be the same length as the query array and the value at a given\n     * index will contain the duration in milliseconds of the effect at the same index in the\n     * querying array.\n     *\n     * <p>The duration will be positive for primitives that are supported and zero for the\n     * unsupported ones, in correspondence with {@link #arePrimitivesSupported(int...)}.\n     *\n     * @param primitiveIds Which primitives to query for.\n     * @return The duration of each primitive, with zeroes for primitives that are not supported.\n     ",
    "links" : [ "#arePrimitivesSupported(int...)" ]
  }, {
    "name" : "public abstract void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Turn the vibrator off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void cancel(int usageFilter)",
    "returnType" : "void",
    "comment" : "\n     * Cancel specific types of ongoing vibrations.\n     *\n     * @param usageFilter The type of vibration to be cancelled, represented as a bitwise\n     *                    combination of {@link VibrationAttributes.Usage} values.\n     * @hide\n     ",
    "links" : [ "VibrationAttributes.Usage" ]
  }, {
    "name" : "public boolean isVibrating()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator is vibrating.\n     *\n     * @return True if the hardware is vibrating, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for vibrator state changes. Callbacks will be executed on the main thread.\n     * If the listener was previously added and not removed, this call will be ignored.\n     *\n     * @param listener listener to be added\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for vibrator state change. If the listener was previously added and not\n     * removed, this call will be ignored.\n     *\n     * @param listener listener to be added\n     * @param executor executor of listener\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes the listener for vibrator state changes. If the listener was not previously\n     * registered, this call will do nothing.\n     *\n     * @param listener listener to be removed\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public VibratorInfo getInfo()", "private VibrationConfig getConfig()", "public int getDefaultVibrationIntensity(@VibrationAttributes.Usage int usage)", "public boolean isDefaultKeyboardVibrationEnabled()", "public int getId()", "public abstract boolean hasVibrator()", "public abstract boolean hasAmplitudeControl()", "public boolean hasFrequencyControl()", "public boolean areVibrationFeaturesSupported(@NonNull VibrationEffect effect)", "public boolean hasExternalControl()", "public float getResonantFrequency()", "public float getQFactor()", "public VibratorFrequencyProfile getFrequencyProfile()", "public float getHapticChannelMaximumAmplitude()", "public boolean setAlwaysOnEffect(int alwaysOnId, @Nullable VibrationEffect effect, @Nullable VibrationAttributes attributes)", "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, @Nullable VibrationEffect effect, @Nullable VibrationAttributes attributes)", "public void vibrate(long milliseconds)", "public void vibrate(long milliseconds, AudioAttributes attributes)", "public void vibrate(long[] pattern, int repeat)", "public void vibrate(long[] pattern, int repeat, AudioAttributes attributes)", "public void vibrate(VibrationEffect vibe)", "public void vibrate(VibrationEffect vibe, AudioAttributes attributes)", "public void vibrate(@NonNull VibrationEffect vibe, @NonNull VibrationAttributes attributes)", "public abstract void vibrate(int uid, String opPkg, @NonNull VibrationEffect vibe, String reason, @NonNull VibrationAttributes attributes)", "public void performHapticFeedback(int constant, boolean always, String reason, boolean fromIme)", "public int[] areEffectsSupported(@NonNull @VibrationEffect.EffectType int... effectIds)", "public final int areAllEffectsSupported(@NonNull @VibrationEffect.EffectType int... effectIds)", "public boolean[] arePrimitivesSupported(@NonNull @VibrationEffect.Composition.PrimitiveType int... primitiveIds)", "public final boolean areAllPrimitivesSupported(@NonNull @VibrationEffect.Composition.PrimitiveType int... primitiveIds)", "public int[] getPrimitiveDurations(@NonNull @VibrationEffect.Composition.PrimitiveType int... primitiveIds)", "public abstract void cancel()", "public abstract void cancel(int usageFilter)", "public boolean isVibrating()", "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)", "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)" ],
  "variableNames" : [ "TAG", "VIBRATION_INTENSITY_OFF", "VIBRATION_INTENSITY_LOW", "VIBRATION_INTENSITY_MEDIUM", "VIBRATION_INTENSITY_HIGH", "VIBRATION_EFFECT_SUPPORT_UNKNOWN", "VIBRATION_EFFECT_SUPPORT_YES", "VIBRATION_EFFECT_SUPPORT_NO", "mPackageName", "mResources", "mVibrationConfig" ]
}