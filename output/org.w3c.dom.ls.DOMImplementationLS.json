{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/ls/DOMImplementationLS.java",
  "packageName" : "org.w3c.dom.ls",
  "className" : "DOMImplementationLS",
  "comment" : "\n *  <code>DOMImplementationLS</code> contains the factory methods for creating\n * Load and Save objects.\n * <p> The expectation is that an instance of the\n * <code>DOMImplementationLS</code> interface can be obtained by using\n * binding-specific casting methods on an instance of the\n * <code>DOMImplementation</code> interface or, if the <code>Document</code>\n * supports the feature <code>\"Core\"</code> version <code>\"3.0\"</code>\n * defined in [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>]\n * , by using the method <code>DOMImplementation.getFeature</code> with\n * parameter values <code>\"LS\"</code> (or <code>\"LS-Async\"</code>) and\n * <code>\"3.0\"</code> (respectively).\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load\nand Save Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MODE_SYNCHRONOUS",
    "type" : "short",
    "comment" : "\n     * Create a synchronous <code>LSParser</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_ASYNCHRONOUS",
    "type" : "short",
    "comment" : "\n     * Create an asynchronous <code>LSParser</code>.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public LSParser createLSParser(short mode, String schemaType) throws DOMException",
    "returnType" : "LSParser",
    "comment" : "\n     * Create a new <code>LSParser</code>. The newly constructed parser may\n     * then be configured by means of its <code>DOMConfiguration</code>\n     * object, and used to parse documents by means of its <code>parse</code>\n     *  method.\n     * @param mode  The <code>mode</code> argument is either\n     *   <code>MODE_SYNCHRONOUS</code> or <code>MODE_ASYNCHRONOUS</code>, if\n     *   <code>mode</code> is <code>MODE_SYNCHRONOUS</code> then the\n     *   <code>LSParser</code> that is created will operate in synchronous\n     *   mode, if it's <code>MODE_ASYNCHRONOUS</code> then the\n     *   <code>LSParser</code> that is created will operate in asynchronous\n     *   mode.\n     * @param schemaType  An absolute URI representing the type of the schema\n     *   language used during the load of a <code>Document</code> using the\n     *   newly created <code>LSParser</code>. Note that no lexical checking\n     *   is done on the absolute URI. In order to create a\n     *   <code>LSParser</code> for any kind of schema types (i.e. the\n     *   LSParser will be free to use any schema found), use the value\n     *   <code>null</code>.\n     * <p ><b>Note:</b>    For W3C XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n     *   , applications must use the value\n     *   <code>\"http://www.w3.org/2001/XMLSchema\"</code>. For XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>],\n     *   applications must use the value\n     *   <code>\"http://www.w3.org/TR/REC-xml\"</code>. Other Schema languages\n     *   are outside the scope of the W3C and therefore should recommend an\n     *   absolute URI in order to use this method.\n     * @return  The newly created <code>LSParser</code> object. This\n     *   <code>LSParser</code> is either synchronous or asynchronous\n     *   depending on the value of the <code>mode</code> argument.\n     * <p ><b>Note:</b>    By default, the newly created <code>LSParser</code>\n     *   does not contain a <code>DOMErrorHandler</code>, i.e. the value of\n     *   the \"<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>\n     *   error-handler</a>\" configuration parameter is <code>null</code>. However, implementations\n     *   may provide a default error handler at creation time. In that case,\n     *   the initial value of the <code>\"error-handler\"</code> configuration\n     *   parameter on the new <code>LSParser</code> object contains a\n     *   reference to the default error handler.\n     * @exception DOMException\n     *    NOT_SUPPORTED_ERR: Raised if the requested mode or schema type is\n     *   not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LSSerializer createLSSerializer()",
    "returnType" : "LSSerializer",
    "comment" : "\n     *  Create a new <code>LSSerializer</code> object.\n     * @return The newly created <code>LSSerializer</code> object.\n     * <p ><b>Note:</b>    By default, the newly created\n     *   <code>LSSerializer</code> has no <code>DOMErrorHandler</code>, i.e.\n     *   the value of the <code>\"error-handler\"</code> configuration\n     *   parameter is <code>null</code>. However, implementations may\n     *   provide a default error handler at creation time. In that case, the\n     *   initial value of the <code>\"error-handler\"</code> configuration\n     *   parameter on the new <code>LSSerializer</code> object contains a\n     *   reference to the default error handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LSInput createLSInput()",
    "returnType" : "LSInput",
    "comment" : "\n     *  Create a new empty input source object where\n     * <code>LSInput.characterStream</code>, <code>LSInput.byteStream</code>\n     * , <code>LSInput.stringData</code> <code>LSInput.systemId</code>,\n     * <code>LSInput.publicId</code>, <code>LSInput.baseURI</code>, and\n     * <code>LSInput.encoding</code> are null, and\n     * <code>LSInput.certifiedText</code> is false.\n     * @return  The newly created input object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LSOutput createLSOutput()",
    "returnType" : "LSOutput",
    "comment" : "\n     *  Create a new empty output destination object where\n     * <code>LSOutput.characterStream</code>,\n     * <code>LSOutput.byteStream</code>, <code>LSOutput.systemId</code>,\n     * <code>LSOutput.encoding</code> are null.\n     * @return  The newly created output object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public LSParser createLSParser(short mode, String schemaType) throws DOMException", "public LSSerializer createLSSerializer()", "public LSInput createLSInput()", "public LSOutput createLSOutput()" ],
  "variableNames" : [ "MODE_SYNCHRONOUS", "MODE_ASYNCHRONOUS" ]
}