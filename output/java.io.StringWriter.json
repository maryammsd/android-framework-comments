{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/StringWriter.java",
  "packageName" : "java.io",
  "className" : "StringWriter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int c)",
    "returnType" : "void",
    "comment" : "\n     * Write a single character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] cbuf, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Write a portion of an array of characters.\n     *\n     * @param  cbuf  Array of characters\n     * @param  off   Offset from which to start writing characters\n     * @param  len   Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given array\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String str)",
    "returnType" : "void",
    "comment" : "\n     * Write a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String str, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Write a portion of a string.\n     *\n     * @param  str  String to be written\n     * @param  off  Offset from which to start writing characters\n     * @param  len  Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given string\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringWriter append(CharSequence csq)",
    "returnType" : "StringWriter",
    "comment" : "\n     * Appends the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(csq)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(csq.toString()) </pre>\n     *\n     * <p> Depending on the specification of {@code toString} for the\n     * character sequence {@code csq}, the entire sequence may not be\n     * appended. For instance, invoking the {@code toString} method of a\n     * character buffer will return a subsequence whose content depends upon\n     * the buffer's position and limit.\n     *\n     * @param  csq\n     *         The character sequence to append.  If {@code csq} is\n     *         {@code null}, then the four characters {@code \"null\"} are\n     *         appended to this writer.\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringWriter append(CharSequence csq, int start, int end)",
    "returnType" : "StringWriter",
    "comment" : "\n     * Appends a subsequence of the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form\n     * {@code out.append(csq, start, end)} when {@code csq}\n     * is not {@code null}, behaves in\n     * exactly the same way as the invocation\n     *\n     * <pre>{@code\n     *     out.write(csq.subSequence(start, end).toString())\n     * }</pre>\n     *\n     * @param  csq\n     *         The character sequence from which a subsequence will be\n     *         appended.  If {@code csq} is {@code null}, then characters\n     *         will be appended as if {@code csq} contained the four\n     *         characters {@code \"null\"}.\n     *\n     * @param  start\n     *         The index of the first character in the subsequence\n     *\n     * @param  end\n     *         The index of the character following the last character in the\n     *         subsequence\n     *\n     * @return  This writer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code start} or {@code end} are negative, {@code start}\n     *          is greater than {@code end}, or {@code end} is greater than\n     *          {@code csq.length()}\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringWriter append(char c)",
    "returnType" : "StringWriter",
    "comment" : "\n     * Appends the specified character to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(c)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(c) </pre>\n     *\n     * @param  c\n     *         The 16-bit character to append\n     *\n     * @return  This writer\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the buffer's current value as a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer getBuffer()",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Return the string buffer itself.\n     *\n     * @return StringBuffer holding the current buffer value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flush the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closing a {@code StringWriter} has no effect. The methods in this\n     * class can be called after the stream has been closed without generating\n     * an {@code IOException}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int c)", "public void write(char[] cbuf, int off, int len)", "public void write(String str)", "public void write(String str, int off, int len)", "public StringWriter append(CharSequence csq)", "public StringWriter append(CharSequence csq, int start, int end)", "public StringWriter append(char c)", "public String toString()", "public StringBuffer getBuffer()", "public void flush()", "public void close() throws IOException" ],
  "variableNames" : [ "buf" ]
}