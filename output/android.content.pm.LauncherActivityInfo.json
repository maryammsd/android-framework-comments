{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/LauncherActivityInfo.java",
  "packageName" : "android.content.pm",
  "className" : "LauncherActivityInfo",
  "comment" : "\n * A representation of an activity that can belong to this user or a managed\n * profile associated with this user. It can be used to query the label, icon\n * and badged icon for the activity.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPm",
    "type" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternal",
    "type" : "LauncherActivityInfoInternal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRIMMABLE_CHARACTERS",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ComponentName getComponentName()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the component name of this activity.\n     *\n     * @return ComponentName of the activity\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUser()",
    "returnType" : "UserHandle",
    "comment" : "\n     * Returns the user handle of the user profile that this activity belongs to. In order to\n     * persist the identity of the profile, do not store the UserHandle. Instead retrieve its\n     * serial number from UserManager. You can convert the serial number back to a UserHandle\n     * for later use.\n     *\n     * @see UserManager#getSerialNumberForUser(UserHandle)\n     * @see UserManager#getUserForSerialNumber(long)\n     *\n     * @return The UserHandle of the profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieves the label for the activity.\n     *\n     * @return The label for the activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getLoadingProgress()",
    "returnType" : "float",
    "comment" : "\n     * @return Package loading progress, range between [0, 1].\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getIcon(int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the icon for this activity, without any badging for the profile.\n     * @param density The preferred density of the icon, zero for default density. Use\n     * density DPI values from {@link DisplayMetrics}.\n     * @see #getBadgedIcon(int)\n     * @see DisplayMetrics\n     * @return The drawable associated with the activity.\n     ",
    "links" : [ "android.util.DisplayMetrics" ]
  }, {
    "name" : "public int getApplicationFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the application flags from the ApplicationInfo of the activity.\n     *\n     * @return Application flags\n     * @hide remove before shipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getActivityInfo()",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * Returns the ActivityInfo of the activity.\n     *\n     * @return Activity Info\n     ",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * Returns the application info for the application this activity belongs to.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFirstInstallTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time at which the package was first installed.\n     *\n     * @return The time of installation of the package, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name for the activity from  android:name in the manifest.\n     * @return the name from android:name for the activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBadgedIcon(int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the activity icon with badging appropriate for the profile.\n     * @param density Optional density for the icon, or 0 to use the default density. Use\n     * {@link DisplayMetrics} for DPI values.\n     * @see DisplayMetrics\n     * @return A badged icon for the activity.\n     ",
    "links" : [ "android.util.DisplayMetrics" ]
  }, {
    "name" : "private static boolean isTrimmable(@NonNull Paint paint, @NonNull CharSequence ch)",
    "returnType" : "boolean",
    "comment" : "\n     * If the {@code ch} is trimmable, return {@code true}. Otherwise, return\n     * {@code false}. If the count of the code points of {@code ch} doesn't\n     * equal 1, return {@code false}.\n     * <p>\n     * There are two types of the trimmable characters.\n     * 1. The character is one of the Default_Ignorable_Code_Point in\n     * <a href=\"\n     * https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\">\n     * DerivedCoreProperties.txt</a>, the White_Space in <a href=\n     * \"https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\">PropList.txt\n     * </a> or category Cc.\n     * <p>\n     * 2. The character is not supported in the current system font.\n     * {@link android.graphics.Paint#hasGlyph(String)}\n     * <p>\n     *\n     ",
    "links" : [ "android.graphics.Paint#hasGlyph(String)" ]
  }, {
    "name" : "public static CharSequence trimStart(@NonNull CharSequence sequence)",
    "returnType" : "CharSequence",
    "comment" : "\n     * If the {@code sequence} has some leading trimmable characters, creates a new copy\n     * and removes the trimmable characters from the copy. Otherwise the given\n     * {@code sequence} is returned as it is. Use {@link #isTrimmable(Paint, CharSequence)}\n     * to determine whether the character is trimmable or not.\n     *\n     * @return the trimmed string or the original string that has no\n     *         leading trimmable characters.\n     * @see    #isTrimmable(Paint, CharSequence)\n     * @see    #trim(CharSequence)\n     * @see    #trimEnd(CharSequence)\n     *\n     * @hide\n     ",
    "links" : [ "#isTrimmable(Paint" ]
  }, {
    "name" : "public static CharSequence trimEnd(@NonNull CharSequence sequence)",
    "returnType" : "CharSequence",
    "comment" : "\n     * If the {@code sequence} has some trailing trimmable characters, creates a new copy\n     * and removes the trimmable characters from the copy. Otherwise the given\n     * {@code sequence} is returned as it is. Use {@link #isTrimmable(Paint, CharSequence)}\n     * to determine whether the character is trimmable or not.\n     *\n     * @return the trimmed sequence or the original sequence that has no\n     *         trailing trimmable characters.\n     * @see    #isTrimmable(Paint, CharSequence)\n     * @see    #trimStart(CharSequence)\n     * @see    #trim(CharSequence)\n     *\n     * @hide\n     ",
    "links" : [ "#isTrimmable(Paint" ]
  }, {
    "name" : "public static CharSequence trim(@NonNull CharSequence sequence)",
    "returnType" : "CharSequence",
    "comment" : "\n     * If the {@code sequence} has some leading or trailing trimmable characters, creates\n     * a new copy and removes the trimmable characters from the copy. Otherwise the given\n     * {@code sequence} is returned as it is. Use {@link #isTrimmable(Paint, CharSequence)}\n     * to determine whether the character is trimmable or not.\n     *\n     * @return the trimmed sequence or the original sequence that has no leading or\n     *         trailing trimmable characters.\n     * @see    #isTrimmable(Paint, CharSequence)\n     * @see    #trimStart(CharSequence)\n     * @see    #trimEnd(CharSequence)\n     *\n     * @hide\n     ",
    "links" : [ "#isTrimmable(Paint" ]
  } ],
  "methodNames" : [ "public ComponentName getComponentName()", "public UserHandle getUser()", "public CharSequence getLabel()", "public float getLoadingProgress()", "public Drawable getIcon(int density)", "public int getApplicationFlags()", "public ActivityInfo getActivityInfo()", "public ApplicationInfo getApplicationInfo()", "public long getFirstInstallTime()", "public String getName()", "public Drawable getBadgedIcon(int density)", "private static boolean isTrimmable(@NonNull Paint paint, @NonNull CharSequence ch)", "public static CharSequence trimStart(@NonNull CharSequence sequence)", "public static CharSequence trimEnd(@NonNull CharSequence sequence)", "public static CharSequence trim(@NonNull CharSequence sequence)" ],
  "variableNames" : [ "mPm", "mInternal", "TRIMMABLE_CHARACTERS" ]
}