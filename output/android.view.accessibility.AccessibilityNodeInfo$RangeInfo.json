{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityNodeInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "RangeInfo",
  "comment" : "\n     * Class with information if a node is a range.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RANGE_TYPE_INT",
    "type" : "int",
    "comment" : " Range type: integer. ",
    "links" : [ ]
  }, {
    "name" : "RANGE_TYPE_FLOAT",
    "type" : "int",
    "comment" : " Range type: float. ",
    "links" : [ ]
  }, {
    "name" : "RANGE_TYPE_PERCENT",
    "type" : "int",
    "comment" : " Range type: percent with values from zero to one hundred. ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMin",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMax",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrent",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RangeInfo obtain(int type, float min, float max, float current)",
    "returnType" : "RangeInfo",
    "comment" : "\n         * Instantiates a new RangeInfo.\n         *\n         * @deprecated Object pooling has been discontinued. Create a new instance using the\n         * constructor {@link AccessibilityNodeInfo.RangeInfo#RangeInfo(int, float, float,\n         * float)} instead.\n         *\n         * @param type The type of the range.\n         * @param min The minimum value. Use {@code Float.NEGATIVE_INFINITY} if the range has no\n         *            minimum.\n         * @param max The maximum value. Use {@code Float.POSITIVE_INFINITY} if the range has no\n         *            maximum.\n         * @param current The current value.\n         ",
    "links" : [ "AccessibilityNodeInfo.RangeInfo#RangeInfo(int" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n         * Gets the range type.\n         *\n         * @return The range type.\n         *\n         * @see #RANGE_TYPE_INT\n         * @see #RANGE_TYPE_FLOAT\n         * @see #RANGE_TYPE_PERCENT\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getMin()",
    "returnType" : "float",
    "comment" : "\n         * Gets the minimum value.\n         *\n         * @return The minimum value, or {@code Float.NEGATIVE_INFINITY} if no minimum exists.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getMax()",
    "returnType" : "float",
    "comment" : "\n         * Gets the maximum value.\n         *\n         * @return The maximum value, or {@code Float.POSITIVE_INFINITY} if no maximum exists.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getCurrent()",
    "returnType" : "float",
    "comment" : "\n         * Gets the current value.\n         *\n         * @return The current value.\n         ",
    "links" : [ ]
  }, {
    "name" : " void recycle()",
    "returnType" : "void",
    "comment" : "\n         * Recycles this instance.\n         *\n         * @deprecated Object pooling has been discontinued. Calling this function now will have\n         * no effect.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RangeInfo obtain(int type, float min, float max, float current)", "public int getType()", "public float getMin()", "public float getMax()", "public float getCurrent()", " void recycle()", "private void clear()" ],
  "variableNames" : [ "RANGE_TYPE_INT", "RANGE_TYPE_FLOAT", "RANGE_TYPE_PERCENT", "mType", "mMin", "mMax", "mCurrent" ]
}