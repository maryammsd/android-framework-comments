{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/Menu.java",
  "packageName" : "android.view",
  "className" : "Menu",
  "comment" : "\n * Interface for managing the items in a menu.\n * <p>\n * By default, every Activity supports an options menu of actions or options.\n * You can add items to this menu and handle clicks on your additions. The\n * easiest way of adding menu items is inflating an XML file into the\n * {@link Menu} via {@link MenuInflater}. The easiest way of attaching code to\n * clicks is via {@link Activity#onOptionsItemSelected(MenuItem)} and\n * {@link Activity#onContextItemSelected(MenuItem)}.\n * <p>\n * Different menu types support different features:\n * <ol>\n * <li><b>Context menus</b>: Do not support item shortcuts and item icons.\n * <li><b>Options menus</b>: The <b>icon menus</b> do not support item check\n * marks and only show the item's\n * {@link MenuItem#setTitleCondensed(CharSequence) condensed title}. The\n * <b>expanded menus</b> (only available if six or more menu items are visible,\n * reached via the 'More' item in the icon menu) do not show item icons, and\n * item check marks are discouraged.\n * <li><b>Sub menus</b>: Do not support item icons, or nested sub menus.\n * </ol>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating menus, read the\n * <a href=\"{@docRoot}guide/topics/ui/menus.html\">Menus</a> developer guide.</p>\n * </div>\n ",
  "links" : [ "android.app.Activity#onContextItemSelected(MenuItem)", "android.view.MenuInflater", "android.view.Menu", "android.view.MenuItem#setTitleCondensed(CharSequence)", "android.app.Activity#onOptionsItemSelected(MenuItem)" ],
  "variables" : [ {
    "name" : "USER_MASK",
    "type" : "int",
    "comment" : "\n     * This is the part of an order integer that the user can provide.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift of the user portion of the order integer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_MASK",
    "type" : "int",
    "comment" : "\n     * This is the part of an order integer that supplies the category of the\n     * item.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit shift of the category portion of the order integer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_MODIFIERS_MASK",
    "type" : "int",
    "comment" : "\n     * A mask of all supported modifiers for MenuItem's keyboard shortcuts\n     ",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "\n     * Value to use for group and item identifier integers when you don't care\n     * about them.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST",
    "type" : "int",
    "comment" : "\n     * First value for group and item identifier integers.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CONTAINER",
    "type" : "int",
    "comment" : "\n     * Category code for the order integer for items/groups that are part of a\n     * container -- or/add this with your base value.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Category code for the order integer for items/groups that are provided by\n     * the system -- or/add this with your base value.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SECONDARY",
    "type" : "int",
    "comment" : "\n     * Category code for the order integer for items/groups that are\n     * user-supplied secondary (infrequently used) options -- or/add this with\n     * your base value.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_ALTERNATIVE",
    "type" : "int",
    "comment" : "\n     * Category code for the order integer for items/groups that are \n     * alternative actions on the data that is currently displayed -- or/add\n     * this with your base value.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_APPEND_TO_GROUP",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #addIntentOptions}: if set, do not automatically remove\n     * any existing menu items in the same group.\n     ",
    "links" : [ "#addIntentOptions" ]
  }, {
    "name" : "FLAG_PERFORM_NO_CLOSE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #performShortcut}: if set, do not close the menu after\n     * executing the shortcut.\n     ",
    "links" : [ "#performShortcut" ]
  }, {
    "name" : "FLAG_ALWAYS_PERFORM_CLOSE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #performShortcut(int, KeyEvent, int)}: if set, always\n     * close the menu after executing the shortcut. Closing the menu also resets\n     * the prepared state.\n     ",
    "links" : [ "#performShortcut(int" ]
  } ],
  "methods" : [ {
    "name" : "public MenuItem add(CharSequence title)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Add a new item to the menu. This item displays the given title for its\n     * label.\n     * \n     * @param title The text to display for the item.\n     * @return The newly added menu item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem add(@StringRes int titleRes)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Add a new item to the menu. This item displays the given title for its\n     * label.\n     * \n     * @param titleRes Resource identifier of title string.\n     * @return The newly added menu item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem add(int groupId, int itemId, int order, CharSequence title)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Add a new item to the menu. This item displays the given title for its\n     * label.\n     * \n     * @param groupId The group identifier that this item should be part of.\n     *        This can be used to define groups of items for batch state\n     *        changes. Normally use {@link #NONE} if an item should not be in a\n     *        group.\n     * @param itemId Unique item ID. Use {@link #NONE} if you do not need a\n     *        unique ID.\n     * @param order The order for the item. Use {@link #NONE} if you do not care\n     *        about the order. See {@link MenuItem#getOrder()}.\n     * @param title The text to display for the item.\n     * @return The newly added menu item.\n     ",
    "links" : [ "android.view.MenuItem#getOrder()", "#NONE" ]
  }, {
    "name" : "public MenuItem add(int groupId, int itemId, int order, @StringRes int titleRes)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Variation on {@link #add(int, int, int, CharSequence)} that takes a\n     * string resource identifier instead of the string itself.\n     * \n     * @param groupId The group identifier that this item should be part of.\n     *        This can also be used to define groups of items for batch state\n     *        changes. Normally use {@link #NONE} if an item should not be in a\n     *        group.\n     * @param itemId Unique item ID. Use {@link #NONE} if you do not need a\n     *        unique ID.\n     * @param order The order for the item. Use {@link #NONE} if you do not care\n     *        about the order. See {@link MenuItem#getOrder()}.\n     * @param titleRes Resource identifier of title string.\n     * @return The newly added menu item.\n     ",
    "links" : [ "android.view.MenuItem#getOrder()", "#add(int", "#NONE" ]
  }, {
    "name" : " SubMenu addSubMenu(final CharSequence title)",
    "returnType" : "SubMenu",
    "comment" : "\n     * Add a new sub-menu to the menu. This item displays the given title for\n     * its label. To modify other attributes on the submenu's menu item, use\n     * {@link SubMenu#getItem()}.\n     * \n     * @param title The text to display for the item.\n     * @return The newly added sub-menu\n     ",
    "links" : [ "android.view.SubMenu#getItem()" ]
  }, {
    "name" : " SubMenu addSubMenu(@StringRes final int titleRes)",
    "returnType" : "SubMenu",
    "comment" : "\n     * Add a new sub-menu to the menu. This item displays the given title for\n     * its label. To modify other attributes on the submenu's menu item, use\n     * {@link SubMenu#getItem()}.\n     * \n     * @param titleRes Resource identifier of title string.\n     * @return The newly added sub-menu\n     ",
    "links" : [ "android.view.SubMenu#getItem()" ]
  }, {
    "name" : " SubMenu addSubMenu(final int groupId, final int itemId, int order, final CharSequence title)",
    "returnType" : "SubMenu",
    "comment" : "\n     * Add a new sub-menu to the menu. This item displays the given\n     * <var>title</var> for its label. To modify other attributes on the\n     * submenu's menu item, use {@link SubMenu#getItem()}.\n     *<p>\n     * Note that you can only have one level of sub-menus, i.e. you cannnot add\n     * a subMenu to a subMenu: An {@link UnsupportedOperationException} will be\n     * thrown if you try.\n     * \n     * @param groupId The group identifier that this item should be part of.\n     *        This can also be used to define groups of items for batch state\n     *        changes. Normally use {@link #NONE} if an item should not be in a\n     *        group.\n     * @param itemId Unique item ID. Use {@link #NONE} if you do not need a\n     *        unique ID.\n     * @param order The order for the item. Use {@link #NONE} if you do not care\n     *        about the order. See {@link MenuItem#getOrder()}.\n     * @param title The text to display for the item.\n     * @return The newly added sub-menu\n     ",
    "links" : [ "android.view.MenuItem#getOrder()", "android.view.SubMenu#getItem()", "#NONE", "UnsupportedOperationException" ]
  }, {
    "name" : " SubMenu addSubMenu(int groupId, int itemId, int order, @StringRes int titleRes)",
    "returnType" : "SubMenu",
    "comment" : "\n     * Variation on {@link #addSubMenu(int, int, int, CharSequence)} that takes\n     * a string resource identifier for the title instead of the string itself.\n     * \n     * @param groupId The group identifier that this item should be part of.\n     *        This can also be used to define groups of items for batch state\n     *        changes. Normally use {@link #NONE} if an item should not be in a group.\n     * @param itemId Unique item ID. Use {@link #NONE} if you do not need a unique ID.\n     * @param order The order for the item. Use {@link #NONE} if you do not care about the\n     *        order. See {@link MenuItem#getOrder()}.\n     * @param titleRes Resource identifier of title string.\n     * @return The newly added sub-menu\n     ",
    "links" : [ "android.view.MenuItem#getOrder()", "#addSubMenu(int", "#NONE" ]
  }, {
    "name" : "public int addIntentOptions(int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems)",
    "returnType" : "int",
    "comment" : "\n     * Add a group of menu items corresponding to actions that can be performed\n     * for a particular Intent. The Intent is most often configured with a null\n     * action, the data that the current activity is working with, and includes\n     * either the {@link Intent#CATEGORY_ALTERNATIVE} or\n     * {@link Intent#CATEGORY_SELECTED_ALTERNATIVE} to find activities that have\n     * said they would like to be included as optional action. You can, however,\n     * use any Intent you want.\n     * \n     * <p>\n     * See {@link android.content.pm.PackageManager#queryIntentActivityOptions}\n     * for more * details on the <var>caller</var>, <var>specifics</var>, and\n     * <var>intent</var> arguments. The list returned by that function is used\n     * to populate the resulting menu items.\n     * \n     * <p>\n     * All of the menu items of possible options for the intent will be added\n     * with the given group and id. You can use the group to control ordering of\n     * the items in relation to other items in the menu. Normally this function\n     * will automatically remove any existing items in the menu in the same\n     * group and place a divider above and below the added items; this behavior\n     * can be modified with the <var>flags</var> parameter. For each of the\n     * generated items {@link MenuItem#setIntent} is called to associate the\n     * appropriate Intent with the item; this means the activity will\n     * automatically be started for you without having to do anything else.\n     * \n     * @param groupId The group identifier that the items should be part of.\n     *        This can also be used to define groups of items for batch state\n     *        changes. Normally use {@link #NONE} if the items should not be in\n     *        a group.\n     * @param itemId Unique item ID. Use {@link #NONE} if you do not need a\n     *        unique ID.\n     * @param order The order for the items. Use {@link #NONE} if you do not\n     *        care about the order. See {@link MenuItem#getOrder()}.\n     * @param caller The current activity component name as defined by\n     *        queryIntentActivityOptions().\n     * @param specifics Specific items to place first as defined by\n     *        queryIntentActivityOptions().\n     * @param intent Intent describing the kinds of items to populate in the\n     *        list as defined by queryIntentActivityOptions().\n     * @param flags Additional options controlling how the items are added.\n     * @param outSpecificItems Optional array in which to place the menu items\n     *        that were generated for each of the <var>specifics</var> that were\n     *        requested. Entries may be null if no activity was found for that\n     *        specific action.\n     * @return The number of menu items that were added.\n     * \n     * @see #FLAG_APPEND_TO_GROUP\n     * @see MenuItem#setIntent\n     * @see android.content.pm.PackageManager#queryIntentActivityOptions\n     ",
    "links" : [ "android.view.MenuItem#getOrder()", "android.content.Intent#CATEGORY_ALTERNATIVE", "#NONE", "android.view.MenuItem#setIntent", "android.content.Intent#CATEGORY_SELECTED_ALTERNATIVE", "android.content.pm.PackageManager#queryIntentActivityOptions" ]
  }, {
    "name" : "public void removeItem(int id)",
    "returnType" : "void",
    "comment" : "\n     * Remove the item with the given identifier.\n     *\n     * @param id The item to be removed.  If there is no item with this\n     *           identifier, nothing happens.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeGroup(int groupId)",
    "returnType" : "void",
    "comment" : "\n     * Remove all items in the given group.\n     *\n     * @param groupId The group to be removed.  If there are no items in this\n     *           group, nothing happens.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Remove all existing items from the menu, leaving it empty as if it had\n     * just been created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupCheckable(int group, boolean checkable, boolean exclusive)",
    "returnType" : "void",
    "comment" : "\n     * Control whether a particular group of items can show a check mark.  This\n     * is similar to calling {@link MenuItem#setCheckable} on all of the menu items\n     * with the given group identifier, but in addition you can control whether\n     * this group contains a mutually-exclusive set items.  This should be called\n     * after the items of the group have been added to the menu.\n     *\n     * @param group The group of items to operate on.\n     * @param checkable Set to true to allow a check mark, false to\n     *                  disallow.  The default is false.\n     * @param exclusive If set to true, only one item in this group can be\n     *                  checked at a time; checking an item will automatically\n     *                  uncheck all others in the group.  If set to false, each\n     *                  item can be checked independently of the others.\n     *\n     * @see MenuItem#setCheckable\n     * @see MenuItem#setChecked\n     ",
    "links" : [ "android.view.MenuItem#setCheckable" ]
  }, {
    "name" : "public void setGroupVisible(int group, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Show or hide all menu items that are in the given group.\n     *\n     * @param group The group of items to operate on.\n     * @param visible If true the items are visible, else they are hidden.\n     *\n     * @see MenuItem#setVisible\n     ",
    "links" : [ ]
  }, {
    "name" : " void setOptionalIconsVisible(boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Sets the optional icon visible.\n     * @param visible true for visible, false for hidden.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupEnabled(int group, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable all menu items that are in the given group.\n     *\n     * @param group The group of items to operate on.\n     * @param enabled If true the items will be enabled, else they will be disabled.\n     *\n     * @see MenuItem#setEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasVisibleItems()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the menu currently has item items that are visible.\n     *\n     * @return True if there is one or more item visible,\n     *         else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem findItem(int id)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Return the menu item with a particular identifier.\n     *\n     * @param id The identifier to find.\n     *\n     * @return The menu item object, or null if there is no item with\n     *         this identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of items in the menu.  Note that this will change any\n     * times items are added or removed from the menu.\n     *\n     * @return The item count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem getItem(int index)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Gets the menu item at the given index.\n     * \n     * @param index The index of the menu item to return.\n     * @return The menu item.\n     * @exception IndexOutOfBoundsException\n     *                when {@code index < 0 || >= size()}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the menu, if open.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performShortcut(int keyCode, KeyEvent event, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Execute the menu item action associated with the given shortcut\n     * character.\n     *\n     * @param keyCode The keycode of the shortcut key.\n     * @param event Key event message.\n     * @param flags Additional option flags or 0.\n     *\n     * @return If the given shortcut exists and is shown, returns\n     *         true; else returns false.\n     *\n     * @see #FLAG_PERFORM_NO_CLOSE\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isShortcutKey(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Is a keypress one of the defined shortcut keys for this window.\n     * @param keyCode the key code from {@link KeyEvent} to check.\n     * @param event the {@link KeyEvent} to use to help check.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public boolean performIdentifierAction(int id, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Execute the menu item action associated with the given menu identifier.\n     * \n     * @param id Identifier associated with the menu item. \n     * @param flags Additional option flags or 0.\n     * \n     * @return If the given identifier exists and is shown, returns\n     *         true; else returns false.\n     * \n     * @see #FLAG_PERFORM_NO_CLOSE\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQwertyMode(boolean isQwerty)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the menu should be running in qwerty mode (alphabetic\n     * shortcuts) or 12-key mode (numeric shortcuts).\n     * \n     * @param isQwerty If true the menu will use alphabetic shortcuts; else it\n     *                 will use numeric shortcuts.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setGroupDividerEnabled(boolean groupDividerEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable the group dividers.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MenuItem add(CharSequence title)", "public MenuItem add(@StringRes int titleRes)", "public MenuItem add(int groupId, int itemId, int order, CharSequence title)", "public MenuItem add(int groupId, int itemId, int order, @StringRes int titleRes)", " SubMenu addSubMenu(final CharSequence title)", " SubMenu addSubMenu(@StringRes final int titleRes)", " SubMenu addSubMenu(final int groupId, final int itemId, int order, final CharSequence title)", " SubMenu addSubMenu(int groupId, int itemId, int order, @StringRes int titleRes)", "public int addIntentOptions(int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems)", "public void removeItem(int id)", "public void removeGroup(int groupId)", "public void clear()", "public void setGroupCheckable(int group, boolean checkable, boolean exclusive)", "public void setGroupVisible(int group, boolean visible)", " void setOptionalIconsVisible(boolean visible)", "public void setGroupEnabled(int group, boolean enabled)", "public boolean hasVisibleItems()", "public MenuItem findItem(int id)", "public int size()", "public MenuItem getItem(int index)", "public void close()", "public boolean performShortcut(int keyCode, KeyEvent event, int flags)", " boolean isShortcutKey(int keyCode, KeyEvent event)", "public boolean performIdentifierAction(int id, int flags)", "public void setQwertyMode(boolean isQwerty)", " void setGroupDividerEnabled(boolean groupDividerEnabled)" ],
  "variableNames" : [ "USER_MASK", "USER_SHIFT", "CATEGORY_MASK", "CATEGORY_SHIFT", "SUPPORTED_MODIFIERS_MASK", "NONE", "FIRST", "CATEGORY_CONTAINER", "CATEGORY_SYSTEM", "CATEGORY_SECONDARY", "CATEGORY_ALTERNATIVE", "FLAG_APPEND_TO_GROUP", "FLAG_PERFORM_NO_CLOSE", "FLAG_ALWAYS_PERFORM_CLOSE" ]
}