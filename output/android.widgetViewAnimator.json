{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ViewAnimator.java",
  "packageName" : "android.widget",
  "className" : "ViewAnimator",
  "comment" : "\n * Base class for a {@link FrameLayout} container that will perform animations\n * when switching between its views.\n *\n * @attr ref android.R.styleable#ViewAnimator_inAnimation\n * @attr ref android.R.styleable#ViewAnimator_outAnimation\n * @attr ref android.R.styleable#ViewAnimator_animateFirstView\n ",
  "variables" : [ {
    "name" : "mWhichChild",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFirstTime",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimateFirstTime",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInAnimation",
    "type" : "Animation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutAnimation",
    "type" : "Animation",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initViewAnimator(Context context, AttributeSet attrs)",
    "returnType" : "void",
    "comment" : "\n     * Initialize this {@link ViewAnimator}, possibly setting\n     * {@link #setMeasureAllChildren(boolean)} based on {@link FrameLayout} flags.\n     ",
    "links" : [ "ViewAnimator", "#setMeasureAllChildren", "FrameLayout" ]
  }, {
    "name" : "public void setDisplayedChild(int whichChild)",
    "returnType" : "void",
    "comment" : "\n     * Sets which child view will be displayed.\n     *\n     * @param whichChild the index of the child view to display\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayedChild()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the currently displayed child view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showNext()",
    "returnType" : "void",
    "comment" : "\n     * Manually shows the next child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showPrevious()",
    "returnType" : "void",
    "comment" : "\n     * Manually shows the previous child.\n     ",
    "links" : [ ]
  }, {
    "name" : " void showOnly(int childIndex, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Shows only the specified child. The other displays Views exit the screen,\n     * optionally with the with the {@link #getOutAnimation() out animation} and\n     * the specified child enters the screen, optionally with the\n     * {@link #getInAnimation() in animation}.\n     *\n     * @param childIndex The index of the child to be shown.\n     * @param animate Whether or not to use the in and out animations, defaults\n     *            to true.\n     ",
    "links" : [ "#getOutAnimation", "#getInAnimation" ]
  }, {
    "name" : " void showOnly(int childIndex)",
    "returnType" : "void",
    "comment" : "\n     * Shows only the specified child. The other displays Views exit the screen\n     * with the {@link #getOutAnimation() out animation} and the specified child\n     * enters the screen with the {@link #getInAnimation() in animation}.\n     *\n     * @param childIndex The index of the child to be shown.\n     ",
    "links" : [ "#getOutAnimation", "#getInAnimation" ]
  }, {
    "name" : "public void addView(View child, int index, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAllViews()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeViewAt(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeViewInLayout(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeViews(int start, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeViewsInLayout(int start, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getCurrentView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the View corresponding to the currently displayed child.\n     *\n     * @return The View currently displayed.\n     *\n     * @see #getDisplayedChild()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animation getInAnimation()",
    "returnType" : "Animation",
    "comment" : "\n     * Returns the current animation used to animate a View that enters the screen.\n     *\n     * @return An Animation or null if none is set.\n     *\n     * @see #setInAnimation(android.view.animation.Animation)\n     * @see #setInAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInAnimation(Animation inAnimation)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that enters the screen.\n     *\n     * @param inAnimation The animation started when a View enters the screen.\n     *\n     * @see #getInAnimation()\n     * @see #setInAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animation getOutAnimation()",
    "returnType" : "Animation",
    "comment" : "\n     * Returns the current animation used to animate a View that exits the screen.\n     *\n     * @return An Animation or null if none is set.\n     *\n     * @see #setOutAnimation(android.view.animation.Animation)\n     * @see #setOutAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutAnimation(Animation outAnimation)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that exit the screen.\n     *\n     * @param outAnimation The animation started when a View exit the screen.\n     *\n     * @see #getOutAnimation()\n     * @see #setOutAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInAnimation(Context context, @AnimRes int resourceID)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that enters the screen.\n     *\n     * @param context The application's environment.\n     * @param resourceID The resource id of the animation.\n     *\n     * @see #getInAnimation()\n     * @see #setInAnimation(android.view.animation.Animation)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutAnimation(Context context, @AnimRes int resourceID)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that exit the screen.\n     *\n     * @param context The application's environment.\n     * @param resourceID The resource id of the animation.\n     *\n     * @see #getOutAnimation()\n     * @see #setOutAnimation(android.view.animation.Animation)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAnimateFirstView()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current View should be animated the first time the ViewAnimator\n     * is displayed.\n     *\n     * @return true if the current View will be animated the first time it is displayed,\n     * false otherwise.\n     *\n     * @see #setAnimateFirstView(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnimateFirstView(boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the current View should be animated the first time\n     * the ViewAnimator is displayed.\n     *\n     * @param animate True to animate the current View the first time it is displayed,\n     *                false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mWhichChild", "mFirstTime", "mAnimateFirstTime", "mInAnimation", "mOutAnimation" ],
  "methodNames" : [ "private void initViewAnimator(Context context, AttributeSet attrs)", "public void setDisplayedChild(int whichChild)", "public int getDisplayedChild()", "public void showNext()", "public void showPrevious()", " void showOnly(int childIndex, boolean animate)", " void showOnly(int childIndex)", "public void addView(View child, int index, ViewGroup.LayoutParams params)", "public void removeAllViews()", "public void removeView(View view)", "public void removeViewAt(int index)", "public void removeViewInLayout(View view)", "public void removeViews(int start, int count)", "public void removeViewsInLayout(int start, int count)", "public View getCurrentView()", "public Animation getInAnimation()", "public void setInAnimation(Animation inAnimation)", "public Animation getOutAnimation()", "public void setOutAnimation(Animation outAnimation)", "public void setInAnimation(Context context, @AnimRes int resourceID)", "public void setOutAnimation(Context context, @AnimRes int resourceID)", "public boolean getAnimateFirstView()", "public void setAnimateFirstView(boolean animate)", "public int getBaseline()", "public CharSequence getAccessibilityClassName()" ]
}