{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/JarFile.java",
  "packageName" : "java.util.jar",
  "className" : "JarFile",
  "comment" : "\n * The <code>JarFile</code> class is used to read the contents of a jar file\n * from any file that can be opened with <code>java.io.RandomAccessFile</code>.\n * It extends the class <code>java.util.zip.ZipFile</code> with support\n * for reading an optional <code>Manifest</code> entry. The\n * <code>Manifest</code> can be used to specify meta-information about the\n * jar file and its entries.\n *\n * <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * If the verify flag is on when opening a signed jar file, the content of the\n * file is verified against its signature embedded inside the file. Please note\n * that the verification process does not include validating the signer's\n * certificate. A caller should inspect the return value of\n * {@link JarEntry#getCodeSigners()} to further determine if the signature\n * can be trusted.\n *\n * @author  David Connelly\n * @see     Manifest\n * @see     java.util.zip.ZipFile\n * @see     java.util.jar.JarEntry\n * @since   1.2\n ",
  "links" : [ "java.util.jar.JarEntry#getCodeSigners()", "NullPointerException" ],
  "variables" : [ {
    "name" : "manifest",
    "type" : "Manifest",
    "comment" : " private SoftReference<Manifest> manRef;",
    "links" : [ ]
  }, {
    "name" : "manEntry",
    "type" : "JarEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jv",
    "type" : "JarVerifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jvInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "verify",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hasClassPathAttribute",
    "type" : "boolean",
    "comment" : " indicates if Class-Path attribute present (only valid if hasCheckedSpecialAttributes true)",
    "links" : [ ]
  }, {
    "name" : "hasCheckedSpecialAttributes",
    "type" : "boolean",
    "comment" : " true if manifest checked for special attributes",
    "links" : [ ]
  }, {
    "name" : "MANIFEST_NAME",
    "type" : "String",
    "comment" : "\n     * The JAR manifest file name.\n     ",
    "links" : [ ]
  }, {
    "name" : "CLASSPATH_CHARS",
    "type" : "char[]",
    "comment" : " Statics for hand-coded Boyer-Moore search",
    "links" : [ ]
  }, {
    "name" : "CLASSPATH_LASTOCC",
    "type" : "int[]",
    "comment" : " The bad character shift for \"class-path\"",
    "links" : [ ]
  }, {
    "name" : "CLASSPATH_OPTOSFT",
    "type" : "int[]",
    "comment" : " The good suffix shift for \"class-path\"",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Manifest getManifest() throws IOException",
    "returnType" : "Manifest",
    "comment" : "\n     * Returns the jar file manifest, or <code>null</code> if none.\n     *\n     * @return the jar file manifest, or <code>null</code> if none\n     *\n     * @throws IllegalStateException\n     *         may be thrown if the jar file has been closed\n     * @throws IOException  if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized Manifest getManifestFromReference() throws IOException",
    "returnType" : "Manifest",
    "comment" : " private Manifest getManifestFromReference() throws IOException {",
    "links" : [ ]
  }, {
    "name" : "private native String[] getMetaInfEntryNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public JarEntry getJarEntry(String name)",
    "returnType" : "JarEntry",
    "comment" : "\n     * Returns the <code>JarEntry</code> for the given entry name or\n     * <code>null</code> if not found.\n     *\n     * @param name the jar file entry name\n     * @return the <code>JarEntry</code> for the given entry name or\n     *         <code>null</code> if not found.\n     *\n     * @throws IllegalStateException\n     *         may be thrown if the jar file has been closed\n     *\n     * @see java.util.jar.JarEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "public ZipEntry getEntry(String name)",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Returns the <code>ZipEntry</code> for the given entry name or\n     * <code>null</code> if not found.\n     *\n     * @param name the jar file entry name\n     * @return the <code>ZipEntry</code> for the given entry name or\n     *         <code>null</code> if not found\n     *\n     * @throws IllegalStateException\n     *         may be thrown if the jar file has been closed\n     *\n     * @see java.util.zip.ZipEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<JarEntry> entries()",
    "returnType" : "Enumeration<JarEntry>",
    "comment" : "\n     * Returns an enumeration of the zip file entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<JarEntry> stream()",
    "returnType" : "Stream<JarEntry>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public JarEntry entryFor(String name)",
    "returnType" : "JarEntry",
    "comment" : "\n     * Creates a ZipEntry suitable for the given ZipFile.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void maybeInstantiateVerifier() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Ensures that the JarVerifier has been created if one is\n     * necessary (i.e., the jar appears to be signed.) This is done as\n     * a quick check to avoid processing of the manifest for unsigned\n     * jars.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeVerifier()",
    "returnType" : "void",
    "comment" : "\n     * Initializes the verifier object by reading all the manifest\n     * entries and passing them to the verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte[] getBytes(ZipEntry ze) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reads all the bytes for a given entry. Used to process the\n     * META-INF files.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized InputStream getInputStream(ZipEntry ze) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an input stream for reading the contents of the specified\n     * zip file entry.\n     * @param ze the zip file entry\n     * @return an input stream for reading the contents of the specified\n     *         zip file entry\n     * @throws ZipException if a zip file format error has occurred\n     * @throws IOException if an I/O error has occurred\n     * @throws SecurityException if any of the jar file entries\n     *         are incorrectly signed.\n     * @throws IllegalStateException\n     *         may be thrown if the jar file has been closed\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized JarEntry getManEntry()",
    "returnType" : "JarEntry",
    "comment" : " private JarEntry getManEntry() {",
    "links" : [ ]
  }, {
    "name" : "public boolean hasClassPathAttribute() throws IOException",
    "returnType" : "boolean",
    "comment" : " boolean hasClassPathAttribute() throws IOException {",
    "links" : [ ]
  }, {
    "name" : "private boolean match(char[] src, byte[] b, int[] lastOcc, int[] optoSft)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the pattern {@code src} is found in {@code b}.\n     * The {@code lastOcc} and {@code optoSft} arrays are the precomputed\n     * bad character and good suffix shifts.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkForSpecialAttributes() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * On first invocation, check if the JAR file has the Class-Path\n     * attribute. A no-op on subsequent calls.\n     ",
    "links" : [ ]
  }, {
    "name" : " JarEntry newEntry(ZipEntry ze)",
    "returnType" : "JarEntry",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Manifest getManifest() throws IOException", "private synchronized Manifest getManifestFromReference() throws IOException", "private native String[] getMetaInfEntryNames()", "public JarEntry getJarEntry(String name)", "public ZipEntry getEntry(String name)", "public Enumeration<JarEntry> entries()", "public Stream<JarEntry> stream()", "public JarEntry entryFor(String name)", "private void maybeInstantiateVerifier() throws IOException", "private void initializeVerifier()", "private byte[] getBytes(ZipEntry ze) throws IOException", "public synchronized InputStream getInputStream(ZipEntry ze) throws IOException", "private synchronized JarEntry getManEntry()", "public boolean hasClassPathAttribute() throws IOException", "private boolean match(char[] src, byte[] b, int[] lastOcc, int[] optoSft)", "private void checkForSpecialAttributes() throws IOException", " JarEntry newEntry(ZipEntry ze)" ],
  "variableNames" : [ "manifest", "manEntry", "jv", "jvInitialized", "verify", "hasClassPathAttribute", "hasCheckedSpecialAttributes", "MANIFEST_NAME", "CLASSPATH_CHARS", "CLASSPATH_LASTOCC", "CLASSPATH_OPTOSFT" ]
}