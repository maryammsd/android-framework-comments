{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/RuleBasedTimeZone.java",
  "packageName" : "android.icu.util",
  "className" : "RuleBasedTimeZone",
  "comment" : "\n * <code>RuleBasedTimeZone</code> is a concrete subclass of <code>TimeZone</code> that allows users to define\n * custom historic time transition rules.\n *\n * @see android.icu.util.TimeZoneRule\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialRule",
    "type" : "InitialTimeZoneRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "historicRules",
    "type" : "List<TimeZoneRule>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "finalRules",
    "type" : "AnnualTimeZoneRule[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "historicTransitions",
    "type" : "List<TimeZoneTransition>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "upToDate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isFrozen",
    "type" : "boolean",
    "comment" : " Freezable stuffs",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addTransitionRule(TimeZoneRule rule)",
    "returnType" : "void",
    "comment" : "\n     * Adds the <code>TimeZoneRule</code> which represents time transitions.\n     * The <code>TimeZoneRule</code> must have start times, that is, the result\n     * of {@link android.icu.util.TimeZoneRule#isTransitionRule()} must be true.\n     * Otherwise, <code>IllegalArgumentException</code> is thrown.\n     *\n     * @param rule The <code>TimeZoneRule</code>.\n     ",
    "links" : [ "android.icu.util.TimeZoneRule#isTransitionRule()" ]
  }, {
    "name" : "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffset(long time, boolean local, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawOffset()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSameRules(TimeZone other)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneRule[] getTimeZoneRules()",
    "returnType" : "TimeZoneRule[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getNextTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void complete()",
    "returnType" : "void",
    "comment" : "\n     * Resolve historic transition times and update fields used for offset\n     * calculation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getOffset(long time, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * getOffset internal implementation\n     ",
    "links" : [ ]
  }, {
    "name" : "private TimeZoneRule findRuleInFinal(long time, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt)",
    "returnType" : "TimeZoneRule",
    "comment" : "\n     * Find a time zone rule applicable to the specified time\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long getTransitionTime(TimeZoneTransition tzt, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt)",
    "returnType" : "long",
    "comment" : "\n     * Get the transition time in local wall clock\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getLocalDelta(int rawBefore, int dstBefore, int rawAfter, int dstAfter, int NonExistingTimeOpt, int DuplicatedTimeOpt)",
    "returnType" : "int",
    "comment" : "\n     * Returns amount of local time adjustment used for checking rule transitions\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone freeze()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone cloneAsThawed()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addTransitionRule(TimeZoneRule rule)", "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)", "public void getOffset(long time, boolean local, int[] offsets)", "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)", "public int getRawOffset()", "public boolean inDaylightTime(Date date)", "public void setRawOffset(int offsetMillis)", "public boolean useDaylightTime()", "public boolean observesDaylightTime()", "public boolean hasSameRules(TimeZone other)", "public TimeZoneRule[] getTimeZoneRules()", "public TimeZoneTransition getNextTransition(long base, boolean inclusive)", "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)", "public Object clone()", "private void complete()", "private void getOffset(long time, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt, int[] offsets)", "private TimeZoneRule findRuleInFinal(long time, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt)", "private static long getTransitionTime(TimeZoneTransition tzt, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt)", "private static int getLocalDelta(int rawBefore, int dstBefore, int rawAfter, int dstAfter, int NonExistingTimeOpt, int DuplicatedTimeOpt)", "public boolean isFrozen()", "public TimeZone freeze()", "public TimeZone cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "initialRule", "historicRules", "finalRules", "historicTransitions", "upToDate", "isFrozen" ]
}