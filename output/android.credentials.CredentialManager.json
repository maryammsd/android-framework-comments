{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/credentials/CredentialManager.java",
  "packageName" : "android.credentials",
  "className" : "CredentialManager",
  "comment" : "\n * Manages user authentication flows.\n *\n * <p>Note that an application should call the Jetpack CredentialManager apis instead of directly\n * calling these framework apis.\n *\n * <p>The CredentialManager apis launch framework UI flows for a user to register a new credential\n * or to consent to a saved credential from supported credential providers, which can then be used\n * to authenticate to the app.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_SENDER_BAL_OPTIN",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_FILTER_ALL_PROVIDERS",
    "type" : "int",
    "comment" : "\n     * Returns both system and user credential providers.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_FILTER_SYSTEM_PROVIDERS_ONLY",
    "type" : "int",
    "comment" : "\n     * Returns system credential providers only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_FILTER_USER_PROVIDERS_ONLY",
    "type" : "int",
    "comment" : "\n     * Returns user credential providers only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_FILTER_USER_PROVIDERS_INCLUDING_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Returns user credential providers only. This will include providers that\n     * have been disabled by the device policy.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ICredentialManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_ENABLE_CREDENTIAL_MANAGER",
    "type" : "String",
    "comment" : "\n     * Flag to enable and disable Credential Manager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_ENABLE_CREDENTIAL_DESC_API",
    "type" : "String",
    "comment" : "\n     * Flag to enable and disable Credential Description api.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AUTOFILL_RESULT_RECEIVER",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void getCandidateCredentials(@NonNull GetCredentialRequest request, @NonNull String callingPackage, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<GetCandidateCredentialsResponse, GetCandidateCredentialsException> callback, @NonNull IBinder clientCallback)",
    "returnType" : "void",
    "comment" : "\n     * Returns a list of candidate credentials returned from credential manager providers\n     *\n     * @param request the request specifying type(s) of credentials to get from the\n     *                credential providers\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked when the request succeeds or fails\n     *\n     * @hide\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void getCredential(@NonNull Context context, @NonNull GetCredentialRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<GetCredentialResponse, GetCredentialException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Launches the necessary flows to retrieve an app credential from the user.\n     *\n     * <p>The execution can potentially launch UI flows to collect user consent to using a\n     * credential, display a picker when multiple credentials exist, etc.\n     * Callers (e.g. browsers) may optionally set origin in {@link GetCredentialRequest} for an\n     * app different from their own, to be able to get credentials on behalf of that app. They would\n     * need additional permission {@code CREDENTIAL_MANAGER_SET_ORIGIN}\n     * to use this functionality\n     *\n     * @param context the context used to launch any UI needed; use an activity context to make sure\n     *                the UI will be launched within the same task stack\n     * @param request the request specifying type(s) of credentials to get from the user\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked when the request succeeds or fails\n     ",
    "links" : [ "android.annotation.CallbackExecutor", "android.credentials.GetCredentialRequest" ]
  }, {
    "name" : "public void getCredential(@NonNull Context context, @NonNull PrepareGetCredentialResponse.PendingGetCredentialHandle pendingGetCredentialHandle, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<GetCredentialResponse, GetCredentialException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Launches the remaining flows to retrieve an app credential from the user, after the\n     * completed prefetch work corresponding to the given {@code pendingGetCredentialHandle}.\n     *\n     * <p>The execution can potentially launch UI flows to collect user consent to using a\n     * credential, display a picker when multiple credentials exist, etc.\n     *\n     * <p>Use this API to complete the full credential retrieval operation after you initiated a\n     * request through the {@link #prepareGetCredential(\n     * GetCredentialRequest, CancellationSignal, Executor, OutcomeReceiver)} API.\n     *\n     * @param context the context used to launch any UI needed; use an activity context to make sure\n     *                the UI will be launched within the same task stack\n     * @param pendingGetCredentialHandle the handle representing the pending operation to resume\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked when the request succeeds or fails\n     ",
    "links" : [ "#prepareGetCredential(", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void prepareGetCredential(@NonNull GetCredentialRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<PrepareGetCredentialResponse, GetCredentialException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Prepare for a get-credential operation. Returns a {@link PrepareGetCredentialResponse} that\n     * can launch the credential retrieval UI flow to request a user credential for your app.\n     *\n     * <p>This API doesn't invoke any UI. It only performs the preparation work so that you can\n     * later launch the remaining get-credential operation (involves UIs) through the {@link\n     * #getCredential(Context, PrepareGetCredentialResponse.PendingGetCredentialHandle,\n     * CancellationSignal, Executor, OutcomeReceiver)} API which incurs less latency compared to\n     * the {@link #getCredential(Context, GetCredentialRequest, CancellationSignal, Executor,\n     * OutcomeReceiver)} API that executes the whole operation in one call.\n     *\n     * @param request            the request specifying type(s) of credentials to get from the user\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor           the callback will take place on this {@link Executor}\n     * @param callback           the callback invoked when the request succeeds or fails\n     ",
    "links" : [ "#getCredential(Context", "android.annotation.CallbackExecutor", "android.credentials.PrepareGetCredentialResponse" ]
  }, {
    "name" : "public void createCredential(@NonNull Context context, @NonNull CreateCredentialRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<CreateCredentialResponse, CreateCredentialException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Launches the necessary flows to register an app credential for the user.\n     *\n     * <p>The execution can potentially launch UI flows to collect user consent to creating or\n     * storing the new credential, etc.\n     * Callers (e.g. browsers) may optionally set origin in {@link CreateCredentialRequest} for an\n     * app different from their own, to be able to get credentials on behalf of that app. They would\n     * need additional permission {@code CREDENTIAL_MANAGER_SET_ORIGIN}\n     * to use this functionality\n     *\n     * @param context the context used to launch any UI needed; use an activity context to make sure\n     *                the UI will be launched within the same task stack\n     * @param request the request specifying type(s) of credentials to get from the user\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked when the request succeeds or fails\n     ",
    "links" : [ "android.credentials.CreateCredentialRequest", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void clearCredentialState(@NonNull ClearCredentialStateRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, ClearCredentialStateException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Clears the current user credential state from all credential providers.\n     *\n     * <p>You should invoked this api after your user signs out of your app to notify all credential\n     * providers that any stored credential session for the given app should be cleared.\n     *\n     * <p>A credential provider may have stored an active credential session and use it to limit\n     * sign-in options for future get-credential calls. For example, it may prioritize the active\n     * credential over any other available credential. When your user explicitly signs out of your\n     * app and in order to get the holistic sign-in options the next time, you should call this API\n     * to let the provider clear any stored credential session.\n     *\n     * @param request the request data\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked when the request succeeds or fails\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void setEnabledProviders(@NonNull List<String> primaryProviders, @NonNull List<String> providers, int userId, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, SetEnabledProvidersException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a list of all user configurable credential providers registered on the system. This API\n     * is intended for settings apps.\n     *\n     * @param primaryProviders the primary providers that user selected for saving credentials. In\n     *                         the most case, there should be only one primary provider, However,\n     *                         if there are more than one CredentialProviderService in the same APK,\n     *                         they should be passed in altogether.\n     * @param providers the list of enabled providers.\n     * @param userId the user ID to configure credential manager for\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked when the request succeeds or fails\n     * @hide\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public boolean isEnabledCredentialProviderService(@NonNull ComponentName componentName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the calling application provides a CredentialProviderService that is\n     * enabled for the current user, or {@code false} otherwise. CredentialProviderServices are\n     * enabled on a per-service basis so the individual component name of the service should be\n     * passed in here. <strong>Usage of this API is discouraged as it is not fully functional, and\n     * may throw a NullPointerException on certain devices and/or API versions.</strong>\n     *\n     * @throws IllegalArgumentException if the componentName package does not match the calling\n     * package name this call will throw an exception\n     *\n     * @throws NullPointerException Usage of this API is discouraged as it is not fully\n     * functional, and may throw a NullPointerException on certain devices and/or API versions\n     *\n     * @param componentName the component name to check is enabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CredentialProviderInfo> getCredentialProviderServicesForTesting(@ProviderFilter int providerFilter)",
    "returnType" : "List<CredentialProviderInfo>",
    "comment" : "\n     * Returns the list of CredentialProviderInfo for all discovered credential providers on this\n     * device but will include test system providers as well.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CredentialProviderInfo> getCredentialProviderServices(int userId, @ProviderFilter int providerFilter)",
    "returnType" : "List<CredentialProviderInfo>",
    "comment" : "\n     * Returns the list of CredentialProviderInfo for all discovered credential providers on this\n     * device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isServiceEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the service is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isServiceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the service is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isCredentialDescriptionApiEnabled(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the credential description api is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isCredentialDescriptionApiEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerCredentialDescription(@NonNull RegisterCredentialDescriptionRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link CredentialDescription} for an actively provisioned {@link Credential} a\n     * CredentialProvider has. This registry will then be used to determine where to fetch the\n     * requested {@link Credential} from. Not all credential types will be supported. The\n     * distinction will be made by the JetPack layer. For the types that are supported, JetPack will\n     * add a new key-value pair into {@link GetCredentialRequest}. These will not be persistent on\n     * the device. The Credential Providers will need to call this API again upon device reboot.\n     *\n     * @param request the request data\n     * @throws {@link UnsupportedOperationException} if the feature has not been enabled.\n     * @throws {@link com.android.server.credentials.NonCredentialProviderCallerException} if the\n     *     calling package name is not also listed as a Credential Provider.\n     * @throws {@link IllegalArgumentException} if the calling Credential Provider can not handle\n     *     one or more of the Credential Types that are sent for registration.\n     ",
    "links" : [ "android.credentials.Credential", "android.credentials.CredentialDescription", "com.android.server.credentials.NonCredentialProviderCallerException", "android.credentials.GetCredentialRequest", "IllegalArgumentException", "UnsupportedOperationException" ]
  }, {
    "name" : "public void unregisterCredentialDescription(@NonNull UnregisterCredentialDescriptionRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link CredentialDescription} for an actively provisioned {@link Credential}\n     * that has been registered previously.\n     *\n     * @param request the request data\n     * @throws {@link UnsupportedOperationException} if the feature has not been enabled.\n     ",
    "links" : [ "android.credentials.Credential", "android.credentials.CredentialDescription", "UnsupportedOperationException" ]
  } ],
  "methodNames" : [ "public void getCandidateCredentials(@NonNull GetCredentialRequest request, @NonNull String callingPackage, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<GetCandidateCredentialsResponse, GetCandidateCredentialsException> callback, @NonNull IBinder clientCallback)", "public void getCredential(@NonNull Context context, @NonNull GetCredentialRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<GetCredentialResponse, GetCredentialException> callback)", "public void getCredential(@NonNull Context context, @NonNull PrepareGetCredentialResponse.PendingGetCredentialHandle pendingGetCredentialHandle, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<GetCredentialResponse, GetCredentialException> callback)", "public void prepareGetCredential(@NonNull GetCredentialRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<PrepareGetCredentialResponse, GetCredentialException> callback)", "public void createCredential(@NonNull Context context, @NonNull CreateCredentialRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<CreateCredentialResponse, CreateCredentialException> callback)", "public void clearCredentialState(@NonNull ClearCredentialStateRequest request, @Nullable CancellationSignal cancellationSignal, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, ClearCredentialStateException> callback)", "public void setEnabledProviders(@NonNull List<String> primaryProviders, @NonNull List<String> providers, int userId, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, SetEnabledProvidersException> callback)", "public boolean isEnabledCredentialProviderService(@NonNull ComponentName componentName)", "public List<CredentialProviderInfo> getCredentialProviderServicesForTesting(@ProviderFilter int providerFilter)", "public List<CredentialProviderInfo> getCredentialProviderServices(int userId, @ProviderFilter int providerFilter)", "public static boolean isServiceEnabled(@NonNull Context context)", "private boolean isServiceEnabled()", "public static boolean isCredentialDescriptionApiEnabled(Context context)", "private boolean isCredentialDescriptionApiEnabled()", "public void registerCredentialDescription(@NonNull RegisterCredentialDescriptionRequest request)", "public void unregisterCredentialDescription(@NonNull UnregisterCredentialDescriptionRequest request)" ],
  "variableNames" : [ "TAG", "OPTIONS_SENDER_BAL_OPTIN", "PROVIDER_FILTER_ALL_PROVIDERS", "PROVIDER_FILTER_SYSTEM_PROVIDERS_ONLY", "PROVIDER_FILTER_USER_PROVIDERS_ONLY", "PROVIDER_FILTER_USER_PROVIDERS_INCLUDING_HIDDEN", "mContext", "mService", "DEVICE_CONFIG_ENABLE_CREDENTIAL_MANAGER", "DEVICE_CONFIG_ENABLE_CREDENTIAL_DESC_API", "EXTRA_AUTOFILL_RESULT_RECEIVER" ]
}