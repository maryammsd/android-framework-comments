{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/transform/TransformerException.java",
  "packageName" : "javax.xml.transform",
  "className" : "TransformerException",
  "comment" : "\n * This class specifies an exceptional condition that occurred\n * during the transformation process.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Added serialVersionUID to preserve binary compatibility",
    "links" : [ ]
  }, {
    "name" : "locator",
    "type" : "SourceLocator",
    "comment" : " Field locator specifies where the error occurred ",
    "links" : [ ]
  }, {
    "name" : "containedException",
    "type" : "Throwable",
    "comment" : " Field containedException specifies a wrapped exception.  May be null. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SourceLocator getLocator()",
    "returnType" : "SourceLocator",
    "comment" : "\n     * Method getLocator retrieves an instance of a SourceLocator\n     * object that specifies where an error occurred.\n     *\n     * @return A SourceLocator object, or null if none was specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocator(SourceLocator location)",
    "returnType" : "void",
    "comment" : "\n     * Method setLocator sets an instance of a SourceLocator\n     * object that specifies where an error occurred.\n     *\n     * @param location A SourceLocator object, or null to clear the location.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Throwable getException()",
    "returnType" : "Throwable",
    "comment" : "\n     * This method retrieves an exception that this exception wraps.\n     *\n     * @return An Throwable object, or null.\n     * @see #getCause\n     ",
    "links" : [ ]
  }, {
    "name" : "public Throwable getCause()",
    "returnType" : "Throwable",
    "comment" : "\n     * Returns the cause of this throwable or <code>null</code> if the\n     * cause is nonexistent or unknown.  (The cause is the throwable that\n     * caused this throwable to get thrown.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Throwable initCause(Throwable cause)",
    "returnType" : "Throwable",
    "comment" : "\n     * Initializes the <i>cause</i> of this throwable to the specified value.\n     * (The cause is the throwable that caused this throwable to get thrown.)\n     *\n     * <p>This method can be called at most once.  It is generally called from\n     * within the constructor, or immediately after creating the\n     * throwable.  If this throwable was created\n     * with {@link #TransformerException(Throwable)} or\n     * {@link #TransformerException(String,Throwable)}, this method cannot be called\n     * even once.\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A <tt>null</tt> value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @return  a reference to this <code>Throwable</code> instance.\n     * @throws IllegalArgumentException if <code>cause</code> is this\n     *         throwable.  (A throwable cannot\n     *         be its own cause.)\n     * @throws IllegalStateException if this throwable was\n     *         created with {@link #TransformerException(Throwable)} or\n     *         {@link #TransformerException(String,Throwable)}, or this method has already\n     *         been called on this throwable.\n     ",
    "links" : [ "#getCause()", "#TransformerException(Throwable)", "#TransformerException(String" ]
  }, {
    "name" : "public String getMessageAndLocation()",
    "returnType" : "String",
    "comment" : "\n     * Get the error message with location information\n     * appended.\n     *\n     * @return A <code>String</code> representing the error message with\n     *         location information appended.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocationAsString()",
    "returnType" : "String",
    "comment" : "\n     * Get the location information as a string.\n     *\n     * @return A string with location info, or null\n     * if there is no location information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printStackTrace()",
    "returnType" : "void",
    "comment" : "\n     * Print the the trace of methods from where the error\n     * originated.  This will trace all nested exception\n     * objects, as well as this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printStackTrace(java.io.PrintStream s)",
    "returnType" : "void",
    "comment" : "\n     * Print the the trace of methods from where the error\n     * originated.  This will trace all nested exception\n     * objects, as well as this object.\n     * @param s The stream where the dump will be sent to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printStackTrace(java.io.PrintWriter s)",
    "returnType" : "void",
    "comment" : "\n     * Print the the trace of methods from where the error\n     * originated.  This will trace all nested exception\n     * objects, as well as this object.\n     * @param s The writer where the dump will be sent to.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SourceLocator getLocator()", "public void setLocator(SourceLocator location)", "public Throwable getException()", "public Throwable getCause()", "public synchronized Throwable initCause(Throwable cause)", "public String getMessageAndLocation()", "public String getLocationAsString()", "public void printStackTrace()", "public void printStackTrace(java.io.PrintStream s)", "public void printStackTrace(java.io.PrintWriter s)" ],
  "variableNames" : [ "serialVersionUID", "locator", "containedException" ]
}