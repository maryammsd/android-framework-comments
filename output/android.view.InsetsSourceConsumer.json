{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InsetsSourceConsumer.java",
  "packageName" : "android.view",
  "className" : "InsetsSourceConsumer",
  "comment" : "\n * Controls the visibility and animations of a single window insets source.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ANIMATION_STATE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_STATE_SHOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_STATE_HIDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mController",
    "type" : "InsetsController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "InsetsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionSupplier",
    "type" : "Supplier<Transaction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceControl",
    "type" : "InsetsSourceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasWindowFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasViewFocusWhenWindowFocusGain",
    "type" : "boolean",
    "comment" : "\n     * Whether the view has focus returned by {@link #onWindowFocusGained(boolean)}.\n     ",
    "links" : [ "#onWindowFocusGained(boolean)" ]
  }, {
    "name" : "mPendingFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingVisibleFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean setControl(@Nullable InsetsSourceControl control, @InsetsType int[] showTypes, @InsetsType int[] hideTypes)",
    "returnType" : "boolean",
    "comment" : "\n     * Updates the control delivered from the server.\n\n     * @param showTypes An integer array with a single entry that determines which types a show\n     *                  animation should be run after setting the control.\n     * @param hideTypes An integer array with a single entry that determines which types a hide\n     *                  animation should be run after setting the control.\n     * @return Whether the control has changed from the server\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsetsSourceControl getControl()",
    "returnType" : "InsetsSourceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isRequestedVisibleAwaitingControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the consumer will be shown after control is available.\n     *\n     * @return {@code true} if consumer has a pending show.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setId(int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onAnimationStateChanged(boolean running)",
    "returnType" : "boolean",
    "comment" : "\n     * Called right after the animation is started or finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isShowRequested()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusGained(boolean hasViewFocus)",
    "returnType" : "void",
    "comment" : "\n     * Called when current window gains focus\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusLost()",
    "returnType" : "void",
    "comment" : "\n     * Called when current window loses focus.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasViewFocusWhenWindowFocusGain()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean applyLocalVisibilityOverride()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int requestShow(boolean fromController, @Nullable ImeTracker.Token statsToken)",
    "returnType" : "int",
    "comment" : "\n     * Request to show current window type.\n     *\n     * @param fromController {@code true} if request is coming from controller.\n     *                       (e.g. in IME case, controller is\n     *                       {@link android.inputmethodservice.InputMethodService}).\n     * @param statsToken the token tracking the current IME request or {@code null} otherwise.\n     *\n     * @implNote The {@code statsToken} is ignored here, and only handled in\n     * {@link ImeInsetsSourceConsumer} for IME animations only.\n     *\n     * @return @see {@link ShowResult}.\n     ",
    "links" : [ "android.inputmethodservice.InputMethodService", "ShowResult", "android.view.ImeInsetsSourceConsumer" ]
  }, {
    "name" : " void requestHide(boolean fromController, @Nullable ImeTracker.Token statsToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPerceptible(boolean perceptible)",
    "returnType" : "void",
    "comment" : "\n     * Reports that this source's perceptibility has changed\n     *\n     * @param perceptible true if the source is perceptible, false otherwise.\n     * @see InsetsAnimationControlCallbacks#reportPerceptible\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeSurface()",
    "returnType" : "void",
    "comment" : "\n     * Remove surface on which this consumer type is drawn.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateSource(InsetsSource newSource, @AnimationType int animationType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyRequestedVisibilityToControl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean setControl(@Nullable InsetsSourceControl control, @InsetsType int[] showTypes, @InsetsType int[] hideTypes)", "public InsetsSourceControl getControl()", "protected boolean isRequestedVisibleAwaitingControl()", " int getId()", " void setId(int id)", " int getType()", "public boolean onAnimationStateChanged(boolean running)", "protected boolean isShowRequested()", "public void onWindowFocusGained(boolean hasViewFocus)", "public void onWindowFocusLost()", " boolean hasViewFocusWhenWindowFocusGain()", "public boolean applyLocalVisibilityOverride()", "public int requestShow(boolean fromController, @Nullable ImeTracker.Token statsToken)", " void requestHide(boolean fromController, @Nullable ImeTracker.Token statsToken)", "public void onPerceptible(boolean perceptible)", "public void removeSurface()", "public void updateSource(InsetsSource newSource, @AnimationType int animationType)", "private void applyRequestedVisibilityToControl()", " void dumpDebug(ProtoOutputStream proto, long fieldId)" ],
  "variableNames" : [ "ANIMATION_STATE_NONE", "ANIMATION_STATE_SHOW", "ANIMATION_STATE_HIDE", "mAnimationState", "mController", "mState", "mId", "mType", "TAG", "mTransactionSupplier", "mSourceControl", "mHasWindowFocus", "mHasViewFocusWhenWindowFocusGain", "mPendingFrame", "mPendingVisibleFrame" ]
}