{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/AssociationRequest.java",
  "packageName" : "android.companion",
  "className" : "AssociationRequest",
  "comment" : "\n * A request for the user to select a companion device to associate with.\n *\n * You can optionally set {@link Builder#addDeviceFilter filters} for which devices to show to the\n * user to select from.\n * The exact type and fields of the filter you can set depend on the\n * medium type. See {@link Builder}'s static factory methods for specific protocols that are\n * supported.\n *\n * You can also set {@link Builder#setSingleDevice single device} to request a popup with single\n * device to be shown instead of a list to choose from\n ",
  "links" : [ "android.provider.OneTimeUseBuilder#addDeviceFilter", "android.provider.OneTimeUseBuilder#setSingleDevice", "android.provider.OneTimeUseBuilder" ],
  "variables" : [ {
    "name" : "DEVICE_PROFILE_WATCH",
    "type" : "String",
    "comment" : "\n     * Device profile: watch.\n     *\n     * If specified, the current request may have a modified UI to highlight that the device being\n     * set up is a specific kind of device, and some extra permissions may be granted to the app\n     * as a result.\n     *\n     * Using it requires declaring uses-permission\n     * {@link android.Manifest.permission#REQUEST_COMPANION_PROFILE_WATCH} in the manifest.\n     *\n     * <a href=\"{@docRoot}about/versions/12/features#cdm-profiles\">Learn more</a>\n     * about device profiles.\n     *\n     * @see AssociationRequest.Builder#setDeviceProfile\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_COMPANION_PROFILE_WATCH" ]
  }, {
    "name" : "DEVICE_PROFILE_GLASSES",
    "type" : "String",
    "comment" : "\n     * Device profile: glasses.\n     *\n     * If specified, the current request may have a modified UI to highlight that the device being\n     * set up is a glasses device, and some extra permissions may be granted to the app\n     * as a result.\n     *\n     * Using it requires declaring uses-permission\n     * {@link android.Manifest.permission#REQUEST_COMPANION_PROFILE_GLASSES} in the manifest.\n     *\n     * @see AssociationRequest.Builder#setDeviceProfile\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_COMPANION_PROFILE_GLASSES" ]
  }, {
    "name" : "DEVICE_PROFILE_APP_STREAMING",
    "type" : "String",
    "comment" : "\n     * Device profile: a virtual display capable of rendering Android applications, and sending back\n     * input events.\n     *\n     * Only applications that have been granted\n     * {@link android.Manifest.permission#REQUEST_COMPANION_PROFILE_APP_STREAMING} are allowed to\n     * request to be associated with such devices.\n     *\n     * @see AssociationRequest.Builder#setDeviceProfile\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_COMPANION_PROFILE_APP_STREAMING" ]
  }, {
    "name" : "DEVICE_PROFILE_NEARBY_DEVICE_STREAMING",
    "type" : "String",
    "comment" : "\n     * Device profile: a virtual device capable of rendering content from an Android host to a\n     * nearby device.\n     *\n     * Only applications that have been granted\n     * {@link android.Manifest.permission#REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING}\n     * are allowed to request to be associated with such devices.\n     *\n     * @see AssociationRequest.Builder#setDeviceProfile\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING" ]
  }, {
    "name" : "DEVICE_PROFILE_AUTOMOTIVE_PROJECTION",
    "type" : "String",
    "comment" : "\n     * Device profile: Android Automotive Projection\n     *\n     * Only applications that have been granted\n     * {@link android.Manifest.permission#REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION} are\n     * allowed to request to be associated with such devices.\n     *\n     * @see AssociationRequest.Builder#setDeviceProfile\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION" ]
  }, {
    "name" : "DEVICE_PROFILE_COMPUTER",
    "type" : "String",
    "comment" : "\n     * Device profile: Allows the companion app to access notification, recent photos and media for\n     * computer cross-device features.\n     *\n     * Only applications that have been granted\n     * {@link android.Manifest.permission#REQUEST_COMPANION_PROFILE_COMPUTER} are allowed to\n     * request to be associated with such devices.\n     *\n     * @see AssociationRequest.Builder#setDeviceProfile\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_COMPANION_PROFILE_COMPUTER" ]
  }, {
    "name" : "mSingleDevice",
    "type" : "boolean",
    "comment" : "\n     * Whether only a single device should match the provided filter.\n     *\n     * When scanning for a single device with a specific {@link BluetoothDeviceFilter} mac\n     * address, bonded devices are also searched among. This allows to obtain the necessary app\n     * privileges even if the device is already paired.\n     ",
    "links" : [ "android.companion.BluetoothDeviceFilter" ]
  }, {
    "name" : "mDeviceFilters",
    "type" : "List<DeviceFilter<?>>",
    "comment" : "\n     * If set, only devices matching either of the given filters will be shown to the user\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeviceProfile",
    "type" : "String",
    "comment" : "\n     * Profile of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisplayName",
    "type" : "CharSequence",
    "comment" : "\n     * The Display name of the device to be shown in the CDM confirmation UI. Must be non-null for\n     * \"self-managed\" association.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAssociatedDevice",
    "type" : "AssociatedDevice",
    "comment" : "\n     * The device that was associated. Will be null for \"self-managed\" association.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelfManaged",
    "type" : "boolean",
    "comment" : "\n     * Whether the association is to be managed by the companion application.\n     ",
    "links" : [ ]
  }, {
    "name" : "mForceConfirmation",
    "type" : "boolean",
    "comment" : "\n     * Indicates that the application would prefer the CompanionDeviceManager to collect an explicit\n     * confirmation from the user before creating an association, even if such confirmation is not\n     * required.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "\n     * The app package name of the application the association will belong to.\n     * Populated by the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "\n     * The UserId of the user the association will belong to.\n     * Populated by the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeviceProfilePrivilegesDescription",
    "type" : "String",
    "comment" : "\n     * The user-readable description of the device profile's privileges.\n     * Populated by the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mCreationTime",
    "type" : "long",
    "comment" : "\n     * The time at which his request was created\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSkipPrompt",
    "type" : "boolean",
    "comment" : "\n     * Whether the user-prompt may be skipped once the device is found.\n     * Populated by the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AssociationRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDeviceProfile()",
    "returnType" : "String",
    "comment" : "\n     * @return profile of the companion device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDisplayName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * The Display name of the device to be shown in the CDM confirmation UI. Must be non-null for\n     * \"self-managed\" association.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSelfManaged()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the association is to be managed by the companion application.\n     *\n     * @see Builder#setSelfManaged(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isForceConfirmation()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the application requires the {@link CompanionDeviceManager} service to\n     * collect an explicit confirmation from the user before creating an association, even if\n     * such confirmation is not required from the service's perspective.\n     *\n     * @see Builder#setForceConfirmation(boolean)\n     ",
    "links" : [ "android.companion.CompanionDeviceManager" ]
  }, {
    "name" : "public boolean isSingleDevice()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether only a single device should match the provided filter.\n     *\n     * When scanning for a single device with a specific {@link BluetoothDeviceFilter} mac\n     * address, bonded devices are also searched among. This allows to obtain the necessary app\n     * privileges even if the device is already paired.\n     ",
    "links" : [ "android.companion.BluetoothDeviceFilter" ]
  }, {
    "name" : "public void setPackageName(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setUserId(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDeviceProfilePrivilegesDescription(@NonNull String desc)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSkipPrompt(boolean value)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayName(CharSequence displayName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAssociatedDevice(AssociatedDevice associatedDevice)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<DeviceFilter<?>> getDeviceFilters()",
    "returnType" : "List<DeviceFilter<?>>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AssociatedDevice getAssociatedDevice()",
    "returnType" : "AssociatedDevice",
    "comment" : "\n     * The device that was associated. Will be null for \"self-managed\" association.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The app package name of the application the association will belong to.\n     * Populated by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : "\n     * The UserId of the user the association will belong to.\n     * Populated by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDeviceProfilePrivilegesDescription()",
    "returnType" : "String",
    "comment" : "\n     * The user-readable description of the device profile's privileges.\n     * Populated by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCreationTime()",
    "returnType" : "long",
    "comment" : "\n     * The time at which his request was created\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSkipPrompt()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the user-prompt may be skipped once the device is found.\n     * Populated by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getDeviceProfile()", "public CharSequence getDisplayName()", "public boolean isSelfManaged()", "public boolean isForceConfirmation()", "public boolean isSingleDevice()", "public void setPackageName(@NonNull String packageName)", "public void setUserId(@UserIdInt int userId)", "public void setDeviceProfilePrivilegesDescription(@NonNull String desc)", "public void setSkipPrompt(boolean value)", "public void setDisplayName(CharSequence displayName)", "public void setAssociatedDevice(AssociatedDevice associatedDevice)", "public List<DeviceFilter<?>> getDeviceFilters()", "public AssociatedDevice getAssociatedDevice()", "public String getPackageName()", "public int getUserId()", "public String getDeviceProfilePrivilegesDescription()", "public long getCreationTime()", "public boolean isSkipPrompt()", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "DEVICE_PROFILE_WATCH", "DEVICE_PROFILE_GLASSES", "DEVICE_PROFILE_APP_STREAMING", "DEVICE_PROFILE_NEARBY_DEVICE_STREAMING", "DEVICE_PROFILE_AUTOMOTIVE_PROJECTION", "DEVICE_PROFILE_COMPUTER", "mSingleDevice", "mDeviceFilters", "mDeviceProfile", "mDisplayName", "mAssociatedDevice", "mSelfManaged", "mForceConfirmation", "mPackageName", "mUserId", "mDeviceProfilePrivilegesDescription", "mCreationTime", "mSkipPrompt", "CREATOR" ]
}