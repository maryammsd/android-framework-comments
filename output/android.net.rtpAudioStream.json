{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/rtp/AudioStream.java",
  "packageName" : "android.net.rtp",
  "className" : "AudioStream",
  "comment" : "\n * An AudioStream is a {@link RtpStream} which carrys audio payloads over\n * Real-time Transport Protocol (RTP). Two different classes are developed in\n * order to support various usages such as audio conferencing. An AudioStream\n * represents a remote endpoint which consists of a network mapping and a\n * configured {@link AudioCodec}. On the other side, An {@link AudioGroup}\n * represents a local endpoint which mixes all the AudioStreams and optionally\n * interacts with the speaker and the microphone at the same time. The simplest\n * usage includes one for each endpoints. For other combinations, developers\n * should be aware of the limitations described in {@link AudioGroup}.\n *\n * <p>An AudioStream becomes busy when it joins an AudioGroup. In this case most\n * of the setter methods are disabled. This is designed to ease the task of\n * managing native resources. One can always make an AudioStream leave its\n * AudioGroup by calling {@link #join(AudioGroup)} with {@code null} and put it\n * back after the modification is done.</p>\n *\n * <p class=\"note\">Using this class requires\n * {@link android.Manifest.permission#INTERNET} permission.</p>\n *\n * @see RtpStream\n * @see AudioGroup\n ",
  "variables" : [ {
    "name" : "mCodec",
    "type" : "AudioCodec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDtmfType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroup",
    "type" : "AudioGroup",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final boolean isBusy()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the stream has already joined an\n     * {@link AudioGroup}.\n     ",
    "links" : [ "AudioGroup" ]
  }, {
    "name" : "public AudioGroup getGroup()",
    "returnType" : "AudioGroup",
    "comment" : "\n     * Returns the joined {@link AudioGroup}.\n     ",
    "links" : [ "AudioGroup" ]
  }, {
    "name" : "public void join(AudioGroup group)",
    "returnType" : "void",
    "comment" : "\n     * Joins an {@link AudioGroup}. Each stream can join only one group at a\n     * time. The group can be changed by passing a different one or removed\n     * by calling this method with {@code null}.\n     *\n     * @param group The AudioGroup to join or {@code null} to leave.\n     * @throws IllegalStateException if the stream is not properly configured.\n     * @see AudioGroup\n     ",
    "links" : [ "AudioGroup" ]
  }, {
    "name" : "public AudioCodec getCodec()",
    "returnType" : "AudioCodec",
    "comment" : "\n     * Returns the {@link AudioCodec}, or {@code null} if it is not set.\n     *\n     * @see #setCodec(AudioCodec)\n     ",
    "links" : [ "AudioCodec" ]
  }, {
    "name" : "public void setCodec(AudioCodec codec)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AudioCodec}.\n     *\n     * @param codec The AudioCodec to be used.\n     * @throws IllegalArgumentException if its type is used by DTMF.\n     * @throws IllegalStateException if the stream is busy.\n     ",
    "links" : [ "AudioCodec" ]
  }, {
    "name" : "public int getDtmfType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits,\n     * or {@code -1} if it is not enabled.\n     *\n     * @see #setDtmfType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDtmfType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RTP payload type for dual-tone multi-frequency (DTMF) digits.\n     * The primary usage is to send digits to the remote gateway to perform\n     * certain tasks, such as second-stage dialing. According to RFC 2833, the\n     * RTP payload type for DTMF is assigned dynamically, so it must be in the\n     * range of 96 and 127. One can use {@code -1} to disable DTMF and free up\n     * the previous assigned type. This method cannot be called when the stream\n     * already joined an {@link AudioGroup}.\n     *\n     * @param type The RTP payload type to be used or {@code -1} to disable it.\n     * @throws IllegalArgumentException if the type is invalid or used by codec.\n     * @throws IllegalStateException if the stream is busy.\n     * @see AudioGroup#sendDtmf(int)\n     ",
    "links" : [ "AudioGroup" ]
  } ],
  "variableNames" : [ "mCodec", "mDtmfType", "mGroup" ],
  "methodNames" : [ "public final boolean isBusy()", "public AudioGroup getGroup()", "public void join(AudioGroup group)", "public AudioCodec getCodec()", "public void setCodec(AudioCodec codec)", "public int getDtmfType()", "public void setDtmfType(int type)" ]
}