{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/LogManager.java",
  "packageName" : "java.util.logging",
  "className" : "LogManager",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "manager",
    "type" : "LogManager",
    "comment" : " The global LogManager object",
    "links" : [ ]
  }, {
    "name" : "props",
    "type" : "Properties",
    "comment" : " of Hashtable is actually completed).",
    "links" : [ ]
  }, {
    "name" : "defaultLevel",
    "type" : "Level",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "listenerMap",
    "type" : "Map<Object, Integer>",
    "comment" : " count to allow for cases where the same listener is registered many times.",
    "links" : [ ]
  }, {
    "name" : "systemContext",
    "type" : "LoggerContext",
    "comment" : " LoggerContext for system loggers and user loggers",
    "links" : [ ]
  }, {
    "name" : "userContext",
    "type" : "LoggerContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rootLogger",
    "type" : "Logger",
    "comment" : " executing.",
    "links" : [ ]
  }, {
    "name" : "readPrimordialConfiguration",
    "type" : "boolean",
    "comment" : " initialization has been done)",
    "links" : [ ]
  }, {
    "name" : "initializedGlobalHandlers",
    "type" : "boolean",
    "comment" : " This gets set to false in readConfiguration",
    "links" : [ ]
  }, {
    "name" : "deathImminent",
    "type" : "boolean",
    "comment" : " True if JVM death is imminent and the exit hook has been called.",
    "links" : [ ]
  }, {
    "name" : "initializedCalled",
    "type" : "boolean",
    "comment" : "\n     * Lazy initialization: if this instance of manager is the global\n     * manager then this method will read the initial configuration and\n     * add the root logger and global logger by calling addLogger().\n     *\n     * Note that it is subtly different from what we do in LoggerContext.\n     * In LoggerContext we're patching up the logger context tree in order to add\n     * the root and global logger *to the context tree*.\n     *\n     * For this to work, addLogger() must have already have been called\n     * once on the LogManager instance for the default logger being\n     * added.\n     *\n     * This is why ensureLogManagerInitialized() needs to be called before\n     * any logger is added to any logger context.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "initializationDone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contextsMap",
    "type" : "WeakHashMap<Object, LoggerContext>",
    "comment" : " LoggerContext maps from AppContext",
    "links" : [ ]
  }, {
    "name" : "loggerRefQueue",
    "type" : "ReferenceQueue<Logger>",
    "comment" : " that have been GC'ed.",
    "links" : [ ]
  }, {
    "name" : "MAX_ITERATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "controlPermission",
    "type" : "Permission",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "loggingMXBean",
    "type" : "LoggingMXBean",
    "comment" : " Management Support",
    "links" : [ ]
  }, {
    "name" : "LOGGING_MXBEAN_NAME",
    "type" : "String",
    "comment" : "\n     * String representation of the {@code ObjectName} for the management interface\n     * for the logging facility.\n     *\n     * @see java.util.logging.LoggingMXBean\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Void checkSubclassPermissions()",
    "returnType" : "Void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void ensureLogManagerInitialized()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LogManager getLogManager()",
    "returnType" : "LogManager",
    "comment" : "\n     * Returns the global LogManager object.\n     * @return the global LogManager object\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readPrimordialConfiguration()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addPropertyChangeListener(PropertyChangeListener l) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Adds an event listener to be invoked when the logging\n     * properties are re-read. Adding multiple instances of\n     * the same event Listener results in multiple entries\n     * in the property event listener table.\n     *\n     * <p><b>WARNING:</b> This method is omitted from this class in all subset\n     * Profiles of Java SE that do not include the {@code java.beans} package.\n     * </p>\n     *\n     * @param l  event listener\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     * @exception NullPointerException if the PropertyChangeListener is null.\n     * @deprecated The dependency on {@code PropertyChangeListener} creates a\n     *             significant impediment to future modularization of the Java\n     *             platform. This method will be removed in a future release.\n     *             The global {@code LogManager} can detect changes to the\n     *             logging configuration by overridding the {@link\n     *             #readConfiguration readConfiguration} method.\n     ",
    "links" : [ "#readConfiguration" ]
  }, {
    "name" : "public void removePropertyChangeListener(PropertyChangeListener l) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Removes an event listener for property change events.\n     * If the same listener instance has been added to the listener table\n     * through multiple invocations of <CODE>addPropertyChangeListener</CODE>,\n     * then an equivalent number of\n     * <CODE>removePropertyChangeListener</CODE> invocations are required to remove\n     * all instances of that listener from the listener table.\n     * <P>\n     * Returns silently if the given listener is not found.\n     *\n     * <p><b>WARNING:</b> This method is omitted from this class in all subset\n     * Profiles of Java SE that do not include the {@code java.beans} package.\n     * </p>\n     *\n     * @param l  event listener (can be null)\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     * @deprecated The dependency on {@code PropertyChangeListener} creates a\n     *             significant impediment to future modularization of the Java\n     *             platform. This method will be removed in a future release.\n     *             The global {@code LogManager} can detect changes to the\n     *             logging configuration by overridding the {@link\n     *             #readConfiguration readConfiguration} method.\n     ",
    "links" : [ "#readConfiguration" ]
  }, {
    "name" : "private LoggerContext getUserContext()",
    "returnType" : "LoggerContext",
    "comment" : " Loggers are isolated from each AppContext.",
    "links" : [ ]
  }, {
    "name" : " final LoggerContext getSystemContext()",
    "returnType" : "LoggerContext",
    "comment" : " The system context.",
    "links" : [ ]
  }, {
    "name" : "private List<LoggerContext> contexts()",
    "returnType" : "List<LoggerContext>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Logger demandLogger(String name, String resourceBundleName, Class<?> caller)",
    "returnType" : "Logger",
    "comment" : " readConfiguration, and other methods.",
    "links" : [ ]
  }, {
    "name" : " Logger demandSystemLogger(String name, String resourceBundleName)",
    "returnType" : "Logger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Class getClassInstance(String cname) throws ClassNotFoundException",
    "returnType" : "Class",
    "comment" : " Android-added: getClassInstance helper method, used in several places in this class.",
    "links" : [ ]
  }, {
    "name" : "private void loadLoggerHandlers(final Logger logger, final String name, final String handlersPropertyName)",
    "returnType" : "void",
    "comment" : " only be modified by trusted code.",
    "links" : [ ]
  }, {
    "name" : " final void drainLoggerRefQueueBounded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addLogger(Logger logger)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a named logger.  This does nothing and returns false if a logger\n     * with the same name is already registered.\n     * <p>\n     * The Logger factory methods call this method to register each\n     * newly created Logger.\n     * <p>\n     * The application should retain its own reference to the Logger\n     * object to avoid it being garbage collected.  The LogManager\n     * may only retain a weak reference.\n     *\n     * @param   logger the new logger.\n     * @return  true if the argument logger was registered successfully,\n     *          false if a logger of that name already exists.\n     * @exception NullPointerException if the logger name is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void doSetLevel(final Logger logger, final Level level)",
    "returnType" : "void",
    "comment" : " If necessary, we raise privilege before doing the call.",
    "links" : [ ]
  }, {
    "name" : "private static void doSetParent(final Logger logger, final Logger parent)",
    "returnType" : "void",
    "comment" : " If necessary, we raise privilege before doing the setParent call.",
    "links" : [ ]
  }, {
    "name" : "public Logger getLogger(String name)",
    "returnType" : "Logger",
    "comment" : "\n     * Method to find a named logger.\n     * <p>\n     * Note that since untrusted code may create loggers with\n     * arbitrary names this method should not be relied on to\n     * find Loggers for security sensitive logging.\n     * It is also important to note that the Logger associated with the\n     * String {@code name} may be garbage collected at any time if there\n     * is no strong reference to the Logger. The caller of this method\n     * must check the return value for null in order to properly handle\n     * the case where the Logger has been garbage collected.\n     * <p>\n     * @param name name of the logger\n     * @return  matching logger or null if none is found\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getLoggerNames()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Get an enumeration of known logger names.\n     * <p>\n     * Note:  Loggers may be added dynamically as new classes are loaded.\n     * This method only reports on the loggers that are currently registered.\n     * It is also important to note that this method only returns the name\n     * of a Logger, not a strong reference to the Logger itself.\n     * The returned String does nothing to prevent the Logger from being\n     * garbage collected. In particular, if the returned name is passed\n     * to {@code LogManager.getLogger()}, then the caller must check the\n     * return value from {@code LogManager.getLogger()} for null to properly\n     * handle the case where the Logger has been garbage collected in the\n     * time since its name was returned by this method.\n     * <p>\n     * @return  enumeration of logger name strings\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readConfiguration() throws IOException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Reinitialize the logging properties and reread the logging configuration.\n     * <p>\n     * The same rules are used for locating the configuration properties\n     * as are used at startup.  So normally the logging properties will\n     * be re-read from the same file that was used at startup.\n     * <P>\n     * Any log level definitions in the new configuration file will be\n     * applied using Logger.setLevel(), if the target Logger exists.\n     * <p>\n     * A PropertyChangeEvent will be fired after the properties are read.\n     *\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     * @exception  IOException if there are IO problems reading the configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetLogger(Logger logger)",
    "returnType" : "void",
    "comment" : " Private method to reset an individual target logger.",
    "links" : [ ]
  }, {
    "name" : "private String[] parseClassNames(String propertyName)",
    "returnType" : "String[]",
    "comment" : " get a list of whitespace separated classnames from a property.",
    "links" : [ ]
  }, {
    "name" : "public void readConfiguration(InputStream ins) throws IOException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Reinitialize the logging properties and reread the logging configuration\n     * from the given stream, which should be in java.util.Properties format.\n     * A PropertyChangeEvent will be fired after the properties are read.\n     * <p>\n     * Any log level definitions in the new configuration file will be\n     * applied using Logger.setLevel(), if the target Logger exists.\n     *\n     * @param ins       stream to read properties from\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     * @exception  IOException if there are problems reading from the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProperty(String name)",
    "returnType" : "String",
    "comment" : "\n     * Get the value of a logging property.\n     * The method returns null if the property is not found.\n     * @param name      property name\n     * @return          property value\n     ",
    "links" : [ ]
  }, {
    "name" : " String getStringProperty(String name, String defaultValue)",
    "returnType" : "String",
    "comment" : " default value.",
    "links" : [ ]
  }, {
    "name" : " int getIntProperty(String name, int defaultValue)",
    "returnType" : "int",
    "comment" : " we return the given default value.",
    "links" : [ ]
  }, {
    "name" : " boolean getBooleanProperty(String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : " we return the given default value.",
    "links" : [ ]
  }, {
    "name" : " Level getLevelProperty(String name, Level defaultValue)",
    "returnType" : "Level",
    "comment" : " we return the given default value.",
    "links" : [ ]
  }, {
    "name" : " Filter getFilterProperty(String name, Filter defaultValue)",
    "returnType" : "Filter",
    "comment" : " we return the defaultValue.",
    "links" : [ ]
  }, {
    "name" : " Formatter getFormatterProperty(String name, Formatter defaultValue)",
    "returnType" : "Formatter",
    "comment" : " we return the defaultValue.",
    "links" : [ ]
  }, {
    "name" : "private synchronized void initializeGlobalHandlers()",
    "returnType" : "void",
    "comment" : " are first used.",
    "links" : [ ]
  }, {
    "name" : " void checkPermission()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkAccess() throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Check that the current context is trusted to modify the logging\n     * configuration.  This requires LoggingPermission(\"control\").\n     * <p>\n     * If the check fails we throw a SecurityException, otherwise\n     * we return normally.\n     *\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void setLevelsOnExistingLoggers()",
    "returnType" : "void",
    "comment" : " changed to apply any level settings to any pre-existing loggers.",
    "links" : [ ]
  }, {
    "name" : "public static synchronized LoggingMXBean getLoggingMXBean()",
    "returnType" : "LoggingMXBean",
    "comment" : "\n     * Returns <tt>LoggingMXBean</tt> for managing loggers.\n     *\n     * @return a {@link LoggingMXBean} object.\n     *\n     * @since 1.5\n     ",
    "links" : [ "java.util.logging.LoggingMXBean" ]
  } ],
  "methodNames" : [ "private static Void checkSubclassPermissions()", " final void ensureLogManagerInitialized()", "public static LogManager getLogManager()", "private void readPrimordialConfiguration()", "public void addPropertyChangeListener(PropertyChangeListener l) throws SecurityException", "public void removePropertyChangeListener(PropertyChangeListener l) throws SecurityException", "private LoggerContext getUserContext()", " final LoggerContext getSystemContext()", "private List<LoggerContext> contexts()", " Logger demandLogger(String name, String resourceBundleName, Class<?> caller)", " Logger demandSystemLogger(String name, String resourceBundleName)", "private static Class getClassInstance(String cname) throws ClassNotFoundException", "private void loadLoggerHandlers(final Logger logger, final String name, final String handlersPropertyName)", " final void drainLoggerRefQueueBounded()", "public boolean addLogger(Logger logger)", "private static void doSetLevel(final Logger logger, final Level level)", "private static void doSetParent(final Logger logger, final Logger parent)", "public Logger getLogger(String name)", "public Enumeration<String> getLoggerNames()", "public void readConfiguration() throws IOException, SecurityException", "public void reset() throws SecurityException", "private void resetLogger(Logger logger)", "private String[] parseClassNames(String propertyName)", "public void readConfiguration(InputStream ins) throws IOException, SecurityException", "public String getProperty(String name)", " String getStringProperty(String name, String defaultValue)", " int getIntProperty(String name, int defaultValue)", " boolean getBooleanProperty(String name, boolean defaultValue)", " Level getLevelProperty(String name, Level defaultValue)", " Filter getFilterProperty(String name, Filter defaultValue)", " Formatter getFormatterProperty(String name, Formatter defaultValue)", "private synchronized void initializeGlobalHandlers()", " void checkPermission()", "public void checkAccess() throws SecurityException", "private synchronized void setLevelsOnExistingLoggers()", "public static synchronized LoggingMXBean getLoggingMXBean()" ],
  "variableNames" : [ "manager", "props", "defaultLevel", "listenerMap", "systemContext", "userContext", "rootLogger", "readPrimordialConfiguration", "initializedGlobalHandlers", "deathImminent", "initializedCalled", "initializationDone", "contextsMap", "loggerRefQueue", "MAX_ITERATIONS", "controlPermission", "loggingMXBean", "LOGGING_MXBEAN_NAME" ]
}