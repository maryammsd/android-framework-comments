{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiNetworkSpecifier.java",
  "packageName" : "android.net.wifi",
  "className" : "Builder",
  "comment" : "\n     * Builder used to create {@link WifiNetworkSpecifier} objects.\n     ",
  "links" : [ "android.net.wifi.WifiNetworkSpecifier" ],
  "variables" : [ {
    "name" : "MATCH_ALL_SSID_PATTERN_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_EMPTY_SSID_PATTERN_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_NO_BSSID_PATTERN1",
    "type" : "Pair<MacAddress, MacAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_NO_BSSID_PATTERN2",
    "type" : "Pair<MacAddress, MacAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_ALL_BSSID_PATTERN",
    "type" : "Pair<MacAddress, MacAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_EXACT_BSSID_PATTERN_MASK",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WPA3_ENTERPRISE_AUTO",
    "type" : "int",
    "comment" : "\n         * Set WPA Enterprise type according to certificate security level.\n         * This is for backward compatibility in R.\n         ",
    "links" : [ ]
  }, {
    "name" : "WPA3_ENTERPRISE_STANDARD",
    "type" : "int",
    "comment" : " Set WPA Enterprise type to standard mode only. ",
    "links" : [ ]
  }, {
    "name" : "WPA3_ENTERPRISE_192_BIT",
    "type" : "int",
    "comment" : " Set WPA Enterprise type to 192 bit mode only. ",
    "links" : [ ]
  }, {
    "name" : "mSsidPatternMatcher",
    "type" : "PatternMatcher",
    "comment" : "\n         * SSID pattern match specified by the app.\n         ",
    "links" : [ ]
  }, {
    "name" : "mBssidPatternMatcher",
    "type" : "Pair<MacAddress, MacAddress>",
    "comment" : "\n         * BSSID pattern match specified by the app.\n         * Pair of <BaseAddress, Mask>.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsEnhancedOpen",
    "type" : "boolean",
    "comment" : "\n         * Whether this is an OWE network or not.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa2PskPassphrase",
    "type" : "String",
    "comment" : "\n         * Pre-shared key for use with WPA-PSK networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa3SaePassphrase",
    "type" : "String",
    "comment" : "\n         * Pre-shared key for use with WPA3-SAE networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa2EnterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n         * The enterprise configuration details specifying the EAP method,\n         * certificates and other settings associated with the WPA/WPA2-Enterprise networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa3EnterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n         * The enterprise configuration details specifying the EAP method,\n         * certificates and other settings associated with the WPA3-Enterprise networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa3EnterpriseType",
    "type" : "int",
    "comment" : "\n         * Indicate what type this WPA3-Enterprise network is.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsHiddenSSID",
    "type" : "boolean",
    "comment" : "\n         * This is a network that does not broadcast its SSID, so an\n         * SSID-specific probe request must be used for scans.\n         ",
    "links" : [ ]
  }, {
    "name" : "mBand",
    "type" : "int",
    "comment" : "\n         * The requested band for this connection, or BAND_UNSPECIFIED.\n         ",
    "links" : [ ]
  }, {
    "name" : "mChannels",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSsidPattern(@NonNull PatternMatcher ssidPattern)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the unicode SSID match pattern to use for filtering networks from scan results.\n         * <p>\n         * <li>Overrides any previous value set using {@link #setSsid(String)} or\n         * {@link #setSsidPattern(PatternMatcher)}.</li>\n         *\n         * @param ssidPattern Instance of {@link PatternMatcher} containing the UTF-8 encoded\n         *                    string pattern to use for matching the network's SSID.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "#setSsid(String)", "android.os.PatternMatcher", "Builder", "#setSsidPattern(PatternMatcher)" ]
  }, {
    "name" : "public Builder setSsid(@NonNull String ssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the unicode SSID for the network.\n         * <p>\n         * <li>Sets the SSID to use for filtering networks from scan results. Will only match\n         * networks whose SSID is identical to the UTF-8 encoding of the specified value.</li>\n         * <li>Overrides any previous value set using {@link #setSsid(String)} or\n         * {@link #setSsidPattern(PatternMatcher)}.</li>\n         *\n         * @param ssid The SSID of the network. It must be valid Unicode.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the SSID is not valid unicode.\n         ",
    "links" : [ "#setSsid(String)", "Builder", "#setSsidPattern(PatternMatcher)" ]
  }, {
    "name" : "public Builder setBssidPattern(@NonNull MacAddress baseAddress, @NonNull MacAddress mask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the BSSID match pattern to use for filtering networks from scan results.\n         * Will match all networks with BSSID which satisfies the following:\n         * {@code BSSID & mask == baseAddress}.\n         * <p>\n         * <li>Overrides any previous value set using {@link #setBssid(MacAddress)} or\n         * {@link #setBssidPattern(MacAddress, MacAddress)}.</li>\n         *\n         * @param baseAddress Base address for BSSID pattern.\n         * @param mask Mask for BSSID pattern.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "#setBssidPattern(MacAddress", "#setBssid(MacAddress)" ]
  }, {
    "name" : "public Builder setBssid(@NonNull MacAddress bssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the BSSID to use for filtering networks from scan results. Will only match network\n         * whose BSSID is identical to the specified value.\n         * <p>\n         * <li>Sets the BSSID to use for filtering networks from scan results. Will only match\n         * networks whose BSSID is identical to specified value.</li>\n         * <li>Overrides any previous value set using {@link #setBssid(MacAddress)} or\n         * {@link #setBssidPattern(MacAddress, MacAddress)}.</li>\n         *\n         * @param bssid BSSID of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "#setBssidPattern(MacAddress", "#setBssid(MacAddress)" ]
  }, {
    "name" : "public Builder setIsEnhancedOpen(boolean isEnhancedOpen)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether this represents an Enhanced Open (OWE) network.\n         *\n         * @param isEnhancedOpen {@code true} to indicate that the network uses enhanced open,\n         *                       {@code false} otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWpa2Passphrase(@NonNull String passphrase)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ASCII WPA2 passphrase for this network. Needed for authenticating to\n         * WPA2-PSK networks.\n         *\n         * @param passphrase passphrase of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the passphrase is not ASCII encodable.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWpa3Passphrase(@NonNull String passphrase)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ASCII WPA3 passphrase for this network. Needed for authenticating to WPA3-SAE\n         * networks.\n         *\n         * @param passphrase passphrase of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the passphrase is not ASCII encodable.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWpa2EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA2-EAP networks. See {@link WifiEnterpriseConfig} for description. Local-only\n         * connection will not support Trust On First Use (TOFU). If TOFU is enabled on this\n         * Enterprise Config, framework will reject the connection. See {@link\n         * WifiEnterpriseConfig#enableTrustOnFirstUse}\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "android.net.wifi.WifiEnterpriseConfig", "android.net.wifi.WifiEnterpriseConfig#enableTrustOnFirstUse" ]
  }, {
    "name" : "public Builder setWpa3EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA3-Enterprise networks (standard and 192-bit security). See\n         * {@link WifiEnterpriseConfig} for description. For 192-bit security networks, both the\n         * client and CA certificates must be provided, and must be of type of either\n         * sha384WithRSAEncryption (OID 1.2.840.113549.1.1.12) or ecdsa-with-SHA384\n         * (OID 1.2.840.10045.4.3.3).\n         *\n         * @deprecated use {@link #setWpa3EnterpriseStandardModeConfig(WifiEnterpriseConfig)} or\n         * {@link #setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)} to specify\n         * WPA3-Enterprise type explicitly.\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "#setWpa3EnterpriseStandardModeConfig(WifiEnterpriseConfig)", "Builder", "android.net.wifi.WifiEnterpriseConfig", "#setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)" ]
  }, {
    "name" : "public Builder setWpa3EnterpriseStandardModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to standard WPA3-Enterprise networks. See {@link WifiEnterpriseConfig} for description.\n         * For WPA3-Enterprise in 192-bit security mode networks, see {@link\n         * #setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)} for description. Local-only\n         * connection will not support Trust On First Use (TOFU). If TOFU is enabled on this\n         * Enterprise Config, framework will reject the connection. See {@link\n         * WifiEnterpriseConfig#enableTrustOnFirstUse}\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "android.net.wifi.WifiEnterpriseConfig", "android.net.wifi.WifiEnterpriseConfig#enableTrustOnFirstUse", "#setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)" ]
  }, {
    "name" : "public Builder setWpa3Enterprise192BitModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA3-Enterprise in 192-bit security mode networks. See {@link WifiEnterpriseConfig}\n         * for description. Both the client and CA certificates must be provided, and must be of\n         * type of either sha384WithRSAEncryption with key length of 3072bit or more (OID\n         * 1.2.840.113549.1.1.12), or ecdsa-with-SHA384 with key length of 384bit or more (OID\n         * 1.2.840.10045.4.3.3). Local-only connection will not support Trust On First Use (TOFU).\n         * If TOFU is enabled on this Enterprise Config, framework will reject the connection. See\n         * {@link WifiEnterpriseConfig#enableTrustOnFirstUse}\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the EAP type or certificates do not meet 192-bit mode\n         *     requirements.\n         ",
    "links" : [ "Builder", "android.net.wifi.WifiEnterpriseConfig", "android.net.wifi.WifiEnterpriseConfig#enableTrustOnFirstUse" ]
  }, {
    "name" : "public Builder setIsHiddenSsid(boolean isHiddenSsid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether this represents a hidden network.\n         * <p>\n         * <li>Setting this disallows the usage of {@link #setSsidPattern(PatternMatcher)} since\n         * hidden networks need to be explicitly probed for.</li>\n         * <li>If not set, defaults to false (i.e not a hidden network).</li>\n         *\n         * @param isHiddenSsid {@code true} to indicate that the network is hidden, {@code false}\n         *                     otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "#setSsidPattern(PatternMatcher)" ]
  }, {
    "name" : "public Builder setBand(@WifiBand int band)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the band requested for this network.\n         *\n         * Only a single band can be requested. An app can file multiple callbacks concurrently\n         * if they need to know about multiple bands.\n         *\n         * @param band The requested band.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setPreferredChannelsFrequenciesMhz(@NonNull int[] channelFreqs)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the preferred channels for this network. The channels set in the request will\n         * be used to optimize the scan and connection.\n         * <p>\n         * <li>Should only be set to request local-only network</li>\n         * <li>If not set, defaults to an empty array and device will do a full band scan.</li>\n         *\n         * @param channelFreqs an Array of the channels in MHz. The length of the array must not\n         *                     exceed {@link WifiManager#getMaxNumberOfChannelsPerNetworkSpecifierRequest()}\n         *\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "android.net.wifi.WifiManager#getMaxNumberOfChannelsPerNetworkSpecifierRequest()", "Builder" ]
  }, {
    "name" : "private void setSecurityParamsInWifiConfiguration(@NonNull WifiConfiguration configuration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WifiConfiguration buildWifiConfiguration()",
    "returnType" : "WifiConfiguration",
    "comment" : "\n         * Helper method to build WifiConfiguration object from the builder.\n         * @return Instance of {@link WifiConfiguration}.\n         ",
    "links" : [ "android.net.wifi.WifiConfiguration" ]
  }, {
    "name" : "private boolean hasSetAnyPattern()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setMatchAnyPatternIfUnset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasSetMatchNonePattern()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasSetMatchAllPattern()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateSecurityParams()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiNetworkSpecifier build()",
    "returnType" : "WifiNetworkSpecifier",
    "comment" : "\n         * Create a specifier object used to request a Wi-Fi network. The generated\n         * {@link NetworkSpecifier} should be used in\n         * {@link NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} when building\n         * the {@link NetworkRequest}.\n         *\n         *<p>\n         * When using with {@link ConnectivityManager#requestNetwork(NetworkRequest,\n         * NetworkCallback)} or variants, note that some devices may not support requesting a\n         * network with all combinations of specifier members. For example, some devices may only\n         * support requesting local-only networks (networks without the\n         * {@link NetworkCapabilities#NET_CAPABILITY_INTERNET} capability), or not support\n         * requesting a particular band. However, there are no restrictions when using\n         * {@link ConnectivityManager#registerNetworkCallback(NetworkRequest, NetworkCallback)}\n         * or other similar methods which monitor but do not request networks.\n         *\n         * If the device can't support a request, the app will receive a call to\n         * {@link NetworkCallback#onUnavailable()}.\n         *</p>\n         *\n         *<p>\n         * When requesting a local-only network, apps can set a combination of network match params:\n         * <li> SSID Pattern using {@link #setSsidPattern(PatternMatcher)} OR Specific SSID using\n         * {@link #setSsid(String)}. </li>\n         * AND/OR\n         * <li> BSSID Pattern using {@link #setBssidPattern(MacAddress, MacAddress)} OR Specific\n         * BSSID using {@link #setBssid(MacAddress)} </li>\n         * to trigger connection to a network that matches the set params.\n         * The system will find the set of networks matching the request and present the user\n         * with a system dialog which will allow the user to select a specific Wi-Fi network to\n         * connect to or to deny the request.\n         *\n         * To protect user privacy, some limitations to the ability of matching patterns apply.\n         * In particular, when the system brings up a network to satisfy a {@link NetworkRequest}\n         * from some app, the system reserves the right to decline matching the SSID pattern to\n         * the real SSID of the network for other apps than the app that requested the network, and\n         * not send those callbacks even if the SSID matches the requested pattern.\n         *</p>\n         *\n         * For example:\n         * To connect to an open network with a SSID prefix of \"test\" and a BSSID OUI of \"10:03:23\":\n         *\n         * <pre>{@code\n         * final NetworkSpecifier specifier =\n         *      new Builder()\n         *      .setSsidPattern(new PatternMatcher(\"test\", PatternMatcher.PATTERN_PREFIX))\n         *      .setBssidPattern(MacAddress.fromString(\"10:03:23:00:00:00\"),\n         *                       MacAddress.fromString(\"ff:ff:ff:00:00:00\"))\n         *      .build()\n         * final NetworkRequest request =\n         *      new NetworkRequest.Builder()\n         *      .addTransportType(NetworkCapabilities.TRANSPORT_WIFI)\n         *      .removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)\n         *      .setNetworkSpecifier(specifier)\n         *      .build();\n         * final ConnectivityManager connectivityManager =\n         *      context.getSystemService(Context.CONNECTIVITY_SERVICE);\n         * final NetworkCallback networkCallback = new NetworkCallback() {\n         *      ...\n         *      {@literal @}Override\n         *      void onAvailable(...) {}\n         *      // etc.\n         * };\n         * connectivityManager.requestNetwork(request, networkCallback);\n         * }</pre>\n         *\n         * @return Instance of {@link NetworkSpecifier}.\n         * @throws IllegalStateException on invalid params set.\n         ",
    "links" : [ "#setSsid(String)", "android.net.ConnectivityManager#requestNetwork(NetworkRequest", "android.net.ConnectivityManager#registerNetworkCallback(NetworkRequest", "NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)", "android.net.NetworkSpecifier", "android.net.ConnectivityManager.NetworkCallback#onUnavailable()", "#setBssidPattern(MacAddress", "android.net.NetworkRequest", "#setSsidPattern(PatternMatcher)", "android.net.NetworkCapabilities#NET_CAPABILITY_INTERNET", "#setBssid(MacAddress)" ]
  } ],
  "methodNames" : [ "public Builder setSsidPattern(@NonNull PatternMatcher ssidPattern)", "public Builder setSsid(@NonNull String ssid)", "public Builder setBssidPattern(@NonNull MacAddress baseAddress, @NonNull MacAddress mask)", "public Builder setBssid(@NonNull MacAddress bssid)", "public Builder setIsEnhancedOpen(boolean isEnhancedOpen)", "public Builder setWpa2Passphrase(@NonNull String passphrase)", "public Builder setWpa3Passphrase(@NonNull String passphrase)", "public Builder setWpa2EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setWpa3EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setWpa3EnterpriseStandardModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setWpa3Enterprise192BitModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setIsHiddenSsid(boolean isHiddenSsid)", "public Builder setBand(@WifiBand int band)", "public Builder setPreferredChannelsFrequenciesMhz(@NonNull int[] channelFreqs)", "private void setSecurityParamsInWifiConfiguration(@NonNull WifiConfiguration configuration)", "private WifiConfiguration buildWifiConfiguration()", "private boolean hasSetAnyPattern()", "private void setMatchAnyPatternIfUnset()", "private boolean hasSetMatchNonePattern()", "private boolean hasSetMatchAllPattern()", "private void validateSecurityParams()", "public WifiNetworkSpecifier build()" ],
  "variableNames" : [ "MATCH_ALL_SSID_PATTERN_PATH", "MATCH_EMPTY_SSID_PATTERN_PATH", "MATCH_NO_BSSID_PATTERN1", "MATCH_NO_BSSID_PATTERN2", "MATCH_ALL_BSSID_PATTERN", "MATCH_EXACT_BSSID_PATTERN_MASK", "WPA3_ENTERPRISE_AUTO", "WPA3_ENTERPRISE_STANDARD", "WPA3_ENTERPRISE_192_BIT", "mSsidPatternMatcher", "mBssidPatternMatcher", "mIsEnhancedOpen", "mWpa2PskPassphrase", "mWpa3SaePassphrase", "mWpa2EnterpriseConfig", "mWpa3EnterpriseConfig", "mWpa3EnterpriseType", "mIsHiddenSSID", "mBand", "mChannels" ]
}