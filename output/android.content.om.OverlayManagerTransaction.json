{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/om/OverlayManagerTransaction.java",
  "packageName" : "android.content.om",
  "className" : "OverlayManagerTransaction",
  "comment" : "\n * A container for a batch of requests to the OverlayManager.\n *\n * <p>An app can get an {@link OverlayManagerTransaction} with the specified {@link OverlayManager}\n * to handle the transaction. The app can register multiple overlays and unregister multiple\n * registered overlays in one transaction commitment.\n *\n * <p>The below example is registering a {@code updatingOverlay} and unregistering a {@code\n * deprecatedOverlay} in one transaction commitment.\n *\n * <pre>{@code\n * final OverlayManager overlayManager = ctx.getSystemService(OverlayManager.class);\n * final OverlayManagerTransaction transaction = new OverlayManagerTransaction(overlayManager);\n * transaction.registerFabricatedOverlay(updatingOverlay);\n * transaction.unregisterFabricatedOverlay(deprecatedOverlay)\n * transaction.commit();\n * }</pre>\n *\n * @see OverlayManager\n * @see FabricatedOverlay\n ",
  "links" : [ "android.content.om.OverlayManagerTransaction", "android.content.om.OverlayManager" ],
  "variables" : [ {
    "name" : "mRequests",
    "type" : "List<Request>",
    "comment" : " SDK, but keep OverlayManagerTransaction.Request @hidden",
    "links" : [ ]
  }, {
    "name" : "mSelfTargeting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<OverlayManagerTransaction>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static OverlayManagerTransaction newInstance()",
    "returnType" : "OverlayManagerTransaction",
    "comment" : "\n     * Get an overlay manager transaction.\n     *\n     * @return a new {@link OverlayManagerTransaction} instance.\n     ",
    "links" : [ "android.content.om.OverlayManagerTransaction" ]
  }, {
    "name" : "public Iterator<Request> getRequests()",
    "returnType" : "Iterator<Request>",
    "comment" : "\n     * Get the iterator of requests\n     *\n     * @return the iterator of request\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Request generateRegisterFabricatedOverlayRequest(@NonNull FabricatedOverlay overlay)",
    "returnType" : "Request",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Request generateUnRegisterFabricatedOverlayRequest(@NonNull OverlayIdentifier overlayIdentifier)",
    "returnType" : "Request",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerFabricatedOverlay(@NonNull FabricatedOverlay overlay)",
    "returnType" : "void",
    "comment" : "\n     * Registers the fabricated overlays with the overlay manager so it can be used to overlay\n     * the app resources in runtime.\n     *\n     * <p>If an overlay is re-registered the existing overlay will be replaced by the newly\n     * registered overlay. The registered overlay will be left unchanged until the target\n     * package or target overlayable is changed.\n     *\n     * @param overlay the overlay to register with the overlay manager\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterFabricatedOverlay(@NonNull OverlayIdentifier overlay)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the registered overlays from the overlay manager.\n     *\n     * @param overlay the overlay to be unregistered\n     *\n     * @see OverlayManager#getOverlayInfosForTarget(String)\n     * @see OverlayInfo#getOverlayIdentifier()\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSelfTargeting()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether the transaction is for self-targeting or not.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static OverlayManagerTransaction newInstance()", "public Iterator<Request> getRequests()", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private static Request generateRegisterFabricatedOverlayRequest(@NonNull FabricatedOverlay overlay)", "private static Request generateUnRegisterFabricatedOverlayRequest(@NonNull OverlayIdentifier overlayIdentifier)", "public void registerFabricatedOverlay(@NonNull FabricatedOverlay overlay)", "public void unregisterFabricatedOverlay(@NonNull OverlayIdentifier overlay)", " boolean isSelfTargeting()" ],
  "variableNames" : [ "mRequests", "mSelfTargeting", "CREATOR" ]
}