{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/inputmethodservice/AbstractInputMethodService.java",
  "packageName" : "android.inputmethodservice",
  "className" : "AbstractInputMethodService",
  "comment" : "\n * AbstractInputMethodService provides a abstract base class for input methods.\n * Normal input method implementations will not derive from this directly,\n * instead building on top of {@link InputMethodService} or another more\n * complete base class.  Be sure to read {@link InputMethod} for more\n * information on the basics of writing input methods.\n * \n * <p>This class combines a Service (representing the input method component\n * to the system with the InputMethod interface that input methods must\n * implement.  This base class takes care of reporting your InputMethod from\n * the service when clients bind to it, but provides no standard implementation\n * of the InputMethod interface itself.  Derived classes must implement that\n * interface.</p>\n *\n * <p>After {@link android.os.Build.VERSION_CODES#S}, the maximum possible area to show the soft\n * input may not be the entire screen. For example, some devices may support to show the soft input\n * on only half of screen.</p>\n *\n * <p>In that case, moving the soft input from one half screen to another will trigger a\n * {@link android.content.res.Resources} update to match the new {@link Configuration} and\n * this {@link AbstractInputMethodService} may also receive a\n * {@link #onConfigurationChanged(Configuration)} callback if there's notable configuration changes\n * </p>\n *\n * @see android.content.ComponentCallbacks#onConfigurationChanged(Configuration)\n * @see Context#isUiContext Context#isUiContext to see the concept of UI Context.\n ",
  "links" : [ "android.view.inputmethod.InputMethod", "android.os.Build.VERSION_CODES#S", "android.content.res.Configuration", "android.inputmethodservice.InputMethodService", "android.inputmethodservice.AbstractInputMethodService", "#onConfigurationChanged(Configuration)", "android.content.res.Resources" ],
  "variables" : [ {
    "name" : "mInputMethod",
    "type" : "InputMethod",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputMethodServiceInternal",
    "type" : "InputMethodServiceInternal",
    "comment" : "\n     * Keep the strong reference to {@link InputMethodServiceInternal} to ensure that it will not be\n     * garbage-collected until {@link AbstractInputMethodService} gets garbage-collected.\n     *\n     * <p>This is necessary because {@link RemoteInputConnection} internally uses\n     * {@link java.lang.ref.WeakReference} to hold {@link InputMethodServiceInternal}.</p>\n     ",
    "links" : [ "android.inputmethodservice.RemoteInputConnection", "android.inputmethodservice.AbstractInputMethodService", "java.lang.ref.WeakReference", "android.inputmethodservice.InputMethodServiceInternal" ]
  }, {
    "name" : "mDispatcherState",
    "type" : "KeyEvent.DispatcherState",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final InputMethod getInputMethodInternal()",
    "returnType" : "InputMethod",
    "comment" : "\n     * @return {@link InputMethod} instance returned from {@link #onCreateInputMethodInterface()}.\n     *         {@code null} if {@link #onCreateInputMethodInterface()} is not yet called.\n     * @hide\n     ",
    "links" : [ "#onCreateInputMethodInterface()", "android.view.inputmethod.InputMethod" ]
  }, {
    "name" : "public KeyEvent.DispatcherState getKeyDispatcherState()",
    "returnType" : "KeyEvent.DispatcherState",
    "comment" : "\n     * Return the global {@link KeyEvent.DispatcherState KeyEvent.DispatcherState}\n     * for used for processing events from the target application.\n     * Normally you will not need to use this directly, but\n     * just use the standard high-level event callbacks like {@link #onKeyDown}.\n     ",
    "links" : [ "#onKeyDown", "KeyEvent.DispatcherState" ]
  }, {
    "name" : "public abstract AbstractInputMethodImpl onCreateInputMethodInterface()",
    "returnType" : "AbstractInputMethodImpl",
    "comment" : "\n     * Called by the framework during initialization, when the InputMethod\n     * interface for this service needs to be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()",
    "returnType" : "AbstractInputMethodSessionImpl",
    "comment" : "\n     * Called by the framework when a new InputMethodSession interface is\n     * needed for a new client of the input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dump(FileDescriptor fd, PrintWriter fout, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to handle {@link android.os.Binder#dump Binder.dump()}\n     * calls on your input method.\n     ",
    "links" : [ "android.os.Binder#dump" ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InputMethodServiceInternal createInputMethodServiceInternal()",
    "returnType" : "InputMethodServiceInternal",
    "comment" : "\n     * Used to inject custom {@link InputMethodServiceInternal}.\n     *\n     * @return the {@link InputMethodServiceInternal} to be used.\n     ",
    "links" : [ "android.inputmethodservice.InputMethodServiceInternal" ]
  }, {
    "name" : "public boolean onTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this to handle trackball events on your input method.\n     *\n     * @param event The motion event being received.\n     * @return True if the event was handled in this function, false otherwise.\n     * @see android.view.View#onTrackballEvent(MotionEvent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Implement this to handle generic motion events on your input method.\n     *\n     * @param event The motion event being received.\n     * @return True if the event was handled in this function, false otherwise.\n     * @see android.view.View#onGenericMotionEvent(MotionEvent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getWindowType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final Bundle getWindowContextOptions()",
    "returnType" : "Bundle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getInitialDisplayId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final InputMethod getInputMethodInternal()", "public KeyEvent.DispatcherState getKeyDispatcherState()", "public abstract AbstractInputMethodImpl onCreateInputMethodInterface()", "public abstract AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()", "protected void dump(FileDescriptor fd, PrintWriter fout, String[] args)", "public final IBinder onBind(Intent intent)", " InputMethodServiceInternal createInputMethodServiceInternal()", "public boolean onTrackballEvent(MotionEvent event)", "public boolean onGenericMotionEvent(MotionEvent event)", "public final int getWindowType()", "public final Bundle getWindowContextOptions()", "public final int getInitialDisplayId()" ],
  "variableNames" : [ "mInputMethod", "mInputMethodServiceInternal", "mDispatcherState" ]
}