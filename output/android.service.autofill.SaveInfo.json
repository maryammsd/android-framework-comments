{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/SaveInfo.java",
  "packageName" : "android.service.autofill",
  "className" : "SaveInfo",
  "comment" : "\n * Information used to indicate that an {@link AutofillService} is interested on saving the\n * user-inputed data for future use, through a\n * {@link AutofillService#onSaveRequest(SaveRequest, SaveCallback)}\n * call.\n *\n * <p>A {@link SaveInfo} is always associated with a {@link FillResponse}, and it contains at least\n * two pieces of information:\n *\n * <ol>\n *   <li>The type(s) of user data (like password or credit card info) that would be saved.\n *   <li>The minimum set of views (represented by their {@link AutofillId}) that need to be changed\n *       to trigger a save request.\n * </ol>\n *\n * <p>Typically, the {@link SaveInfo} contains the same {@code id}s as the {@link Dataset}:\n *\n * <pre class=\"prettyprint\">\n *   new FillResponse.Builder()\n *       .addDataset(new Dataset.Builder()\n *           .setValue(id1, AutofillValue.forText(\"homer\"), createPresentation(\"homer\")) // username\n *           .setValue(id2, AutofillValue.forText(\"D'OH!\"), createPresentation(\"password for homer\")) // password\n *           .build())\n *       .setSaveInfo(new SaveInfo.Builder(\n *           SaveInfo.SAVE_DATA_TYPE_USERNAME | SaveInfo.SAVE_DATA_TYPE_PASSWORD,\n *           new AutofillId[] { id1, id2 }).build())\n *       .build();\n * </pre>\n *\n * <p>The save type flags are used to display the appropriate strings in the autofill save UI.\n * You can pass multiple values, but try to keep it short if possible. In the above example, just\n * {@code SaveInfo.SAVE_DATA_TYPE_PASSWORD} would be enough.\n *\n * <p>There might be cases where the {@link AutofillService} knows how to fill the screen,\n * but the user has no data for it. In that case, the {@link FillResponse} should contain just the\n * {@link SaveInfo}, but no {@link Dataset Datasets}:\n *\n * <pre class=\"prettyprint\">\n *   new FillResponse.Builder()\n *       .setSaveInfo(new SaveInfo.Builder(SaveInfo.SAVE_DATA_TYPE_PASSWORD,\n *           new AutofillId[] { id1, id2 }).build())\n *       .build();\n * </pre>\n *\n * <p>There might be cases where the user data in the {@link AutofillService} is enough\n * to populate some fields but not all, and the service would still be interested on saving the\n * other fields. In that case, the service could set the\n * {@link SaveInfo.Builder#setOptionalIds(AutofillId[])} as well:\n *\n * <pre class=\"prettyprint\">\n *   new FillResponse.Builder()\n *       .addDataset(new Dataset.Builder()\n *           .setValue(id1, AutofillValue.forText(\"742 Evergreen Terrace\"),\n *               createPresentation(\"742 Evergreen Terrace\")) // street\n *           .setValue(id2, AutofillValue.forText(\"Springfield\"),\n *               createPresentation(\"Springfield\")) // city\n *           .build())\n *       .setSaveInfo(new SaveInfo.Builder(SaveInfo.SAVE_DATA_TYPE_ADDRESS,\n *           new AutofillId[] { id1, id2 }) // street and  city\n *           .setOptionalIds(new AutofillId[] { id3, id4 }) // state and zipcode\n *           .build())\n *       .build();\n * </pre>\n *\n * <a name=\"TriggeringSaveRequest\"></a>\n * <h3>Triggering a save request</h3>\n *\n * <p>The {@link AutofillService#onSaveRequest(SaveRequest, SaveCallback)} can be triggered after\n * any of the following events:\n * <ul>\n *   <li>The {@link Activity} finishes.\n *   <li>The app explicitly calls {@link AutofillManager#commit()}.\n *   <li>All required views become invisible (if the {@link SaveInfo} was created with the\n *       {@link #FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE} flag).\n *   <li>The user clicks a specific view (defined by {@link Builder#setTriggerId(AutofillId)}.\n * </ul>\n *\n * <p>But it is only triggered when all conditions below are met:\n * <ul>\n *   <li>The {@link SaveInfo} associated with the {@link FillResponse} is not {@code null} neither\n *       has the {@link #FLAG_DELAY_SAVE} flag.\n *   <li>The {@link AutofillValue}s of all required views (as set by the {@code requiredIds} passed\n *       to the {@link SaveInfo.Builder} constructor are not empty.\n *   <li>The {@link AutofillValue} of at least one view (be it required or optional) has changed\n *       (i.e., it's neither the same value passed in a {@link Dataset}, nor the initial value\n *       presented in the view).\n *   <li>There is no {@link Dataset} in the last {@link FillResponse} that completely matches the\n *       screen state (i.e., all required and optional fields in the dataset have the same value as\n *       the fields in the screen).\n *   <li>The user explicitly tapped the autofill save UI asking to save data for autofill.\n * </ul>\n *\n * <a name=\"CustomizingSaveUI\"></a>\n * <h3>Customizing the autofill save UI</h3>\n *\n * <p>The service can also customize some aspects of the autofill save UI:\n * <ul>\n *   <li>Add a simple subtitle by calling {@link Builder#setDescription(CharSequence)}.\n *   <li>Add a customized subtitle by calling\n *       {@link Builder#setCustomDescription(CustomDescription)}.\n *   <li>Customize the button used to reject the save request by calling\n *       {@link Builder#setNegativeAction(int, IntentSender)}.\n *   <li>Decide whether the UI should be shown based on the user input validation by calling\n *       {@link Builder#setValidator(Validator)}.\n * </ul>\n ",
  "links" : [ "android.service.autofill.SaveInfo", "android.service.autofill.Dataset", "#setNegativeAction(int", "#setTriggerId(AutofillId)", "android.view.autofill.AutofillValue", "android.service.autofill.AutofillService#onSaveRequest(SaveRequest", "#FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE", "SaveInfo.Builder", "#setCustomDescription(CustomDescription)", "android.service.autofill.FillResponse", "android.view.autofill.AutofillManager#commit()", "SaveInfo.Builder#setOptionalIds(AutofillId", "#FLAG_DELAY_SAVE", "android.service.autofill.AutofillService", "android.view.autofill.AutofillId", "android.app.Activity", "#setDescription(CharSequence)", "#setValidator(Validator)" ],
  "variables" : [ {
    "name" : "SAVE_DATA_TYPE_GENERIC",
    "type" : "int",
    "comment" : "\n     * Type used when the service can save the contents of a screen, but cannot describe what\n     * the content is for.\n     ",
    "links" : [ ]
  }, {
    "name" : "SAVE_DATA_TYPE_PASSWORD",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents user credentials that have a password.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Type used on when the {@link FillResponse} represents a physical address (such as street,\n     * city, state, etc).\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_CREDIT_CARD",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents a credit card.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_USERNAME",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents just an username, without a password.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_EMAIL_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents just an email address, without a password.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_DEBIT_CARD",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents a debit card.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_PAYMENT_CARD",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents a payment card except for credit and\n     * debit cards.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "SAVE_DATA_TYPE_GENERIC_CARD",
    "type" : "int",
    "comment" : "\n     * Type used when the {@link FillResponse} represents a card that does not a specified card or\n     * cannot identify what the card is for.\n     ",
    "links" : [ "android.service.autofill.FillResponse" ]
  }, {
    "name" : "NEGATIVE_BUTTON_STYLE_CANCEL",
    "type" : "int",
    "comment" : "\n     * Style for the negative button of the save UI to cancel the\n     * save operation. In this case, the user tapping the negative\n     * button signals that they would prefer to not save the filled\n     * content.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_BUTTON_STYLE_REJECT",
    "type" : "int",
    "comment" : "\n     * Style for the negative button of the save UI to reject the\n     * save operation. This could be useful if the user needs to\n     * opt-in your service and the save prompt is an advertisement\n     * of the potential value you can add to the user. In this\n     * case, the user tapping the negative button sends a strong\n     * signal that the feature may not be useful and you may\n     * consider some backoff strategy.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_BUTTON_STYLE_NEVER",
    "type" : "int",
    "comment" : "\n     * Style for the negative button of the save UI to never do the\n     * save operation. This means that the user does not need to save\n     * any data on this activity or application. Once the user tapping\n     * the negative button, the service should never trigger the save\n     * UI again. In addition to this, must consider providing restore\n     * options for the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_BUTTON_STYLE_SAVE",
    "type" : "int",
    "comment" : "\n     * Style for the positive button of save UI to request the save operation.\n     * In this case, the user tapping the positive button signals that they\n     * agrees to save the filled content.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_BUTTON_STYLE_CONTINUE",
    "type" : "int",
    "comment" : "\n     * Style for the positive button of save UI to have next action before the save operation.\n     * This could be useful if the filled content contains sensitive personally identifiable\n     * information and then requires user confirmation or verification. In this case, the user\n     * tapping the positive button signals that they would complete the next required action\n     * to save the filled content.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE",
    "type" : "int",
    "comment" : "\n     * Usually, a save request is only automatically <a href=\"#TriggeringSaveRequest\">triggered</a>\n     * once the {@link Activity} finishes. If this flag is set, it is triggered once all saved views\n     * become invisible.\n     ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "FLAG_DONT_SAVE_ON_FINISH",
    "type" : "int",
    "comment" : "\n     * By default, a save request is automatically <a href=\"#TriggeringSaveRequest\">triggered</a>\n     * once the {@link Activity} finishes. If this flag is set, finishing the activity doesn't\n     * trigger a save request.\n     *\n     * <p>This flag is typically used in conjunction with {@link Builder#setTriggerId(AutofillId)}.\n     ",
    "links" : [ "#setTriggerId(AutofillId)", "android.app.Activity" ]
  }, {
    "name" : "FLAG_DELAY_SAVE",
    "type" : "int",
    "comment" : " flags, etc...",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeButtonStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositiveButtonStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeActionListener",
    "type" : "IntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiredIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptionalIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomDescription",
    "type" : "CustomDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValidator",
    "type" : "InternalValidator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSanitizerKeys",
    "type" : "InternalSanitizer[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSanitizerValues",
    "type" : "AutofillId[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerId",
    "type" : "AutofillId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SaveInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SaveInfo copy(SaveInfo s, AutofillId[] optionalIds)",
    "returnType" : "SaveInfo",
    "comment" : "\n     * Creates a copy of the provided SaveInfo.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNegativeActionStyle()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IntentSender getNegativeActionListener()",
    "returnType" : "IntentSender",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getPositiveActionStyle()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AutofillId[] getRequiredIds()",
    "returnType" : "AutofillId[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AutofillId[] getOptionalIds()",
    "returnType" : "AutofillId[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDescription()",
    "returnType" : "CharSequence",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CustomDescription getCustomDescription()",
    "returnType" : "CustomDescription",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public InternalValidator getValidator()",
    "returnType" : "InternalValidator",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public InternalSanitizer[] getSanitizerKeys()",
    "returnType" : "InternalSanitizer[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AutofillId[][] getSanitizerValues()",
    "returnType" : "AutofillId[][]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AutofillId getTriggerId()",
    "returnType" : "AutofillId",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "///////////////////////////////////",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SaveInfo copy(SaveInfo s, AutofillId[] optionalIds)", "public int getNegativeActionStyle()", "public IntentSender getNegativeActionListener()", "public int getPositiveActionStyle()", "public AutofillId[] getRequiredIds()", "public AutofillId[] getOptionalIds()", "public int getType()", "public int getFlags()", "public CharSequence getDescription()", "public CustomDescription getCustomDescription()", "public InternalValidator getValidator()", "public InternalSanitizer[] getSanitizerKeys()", "public AutofillId[][] getSanitizerValues()", "public AutofillId getTriggerId()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)" ],
  "variableNames" : [ "SAVE_DATA_TYPE_GENERIC", "SAVE_DATA_TYPE_PASSWORD", "SAVE_DATA_TYPE_ADDRESS", "SAVE_DATA_TYPE_CREDIT_CARD", "SAVE_DATA_TYPE_USERNAME", "SAVE_DATA_TYPE_EMAIL_ADDRESS", "SAVE_DATA_TYPE_DEBIT_CARD", "SAVE_DATA_TYPE_PAYMENT_CARD", "SAVE_DATA_TYPE_GENERIC_CARD", "NEGATIVE_BUTTON_STYLE_CANCEL", "NEGATIVE_BUTTON_STYLE_REJECT", "NEGATIVE_BUTTON_STYLE_NEVER", "POSITIVE_BUTTON_STYLE_SAVE", "POSITIVE_BUTTON_STYLE_CONTINUE", "FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE", "FLAG_DONT_SAVE_ON_FINISH", "FLAG_DELAY_SAVE", "mType", "mNegativeButtonStyle", "mPositiveButtonStyle", "mNegativeActionListener", "mRequiredIds", "mOptionalIds", "mDescription", "mFlags", "mCustomDescription", "mValidator", "mSanitizerKeys", "mSanitizerValues", "mTriggerId", "CREATOR" ]
}