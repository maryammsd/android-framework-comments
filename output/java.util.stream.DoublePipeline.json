{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/DoublePipeline.java",
  "packageName" : "java.util.stream",
  "className" : "DoublePipeline",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "private static DoubleConsumer adapt(Sink<Double> sink)",
    "returnType" : "DoubleConsumer",
    "comment" : "\n     * Adapt a {@code Sink<Double> to a {@code DoubleConsumer}, ideally simply\n     * by casting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Spliterator.OfDouble adapt(Spliterator<Double> s)",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n     * Adapt a {@code Spliterator<Double>} to a {@code Spliterator.OfDouble}.\n     *\n     * @implNote\n     * The implementation attempts to cast to a Spliterator.OfDouble, and throws\n     * an exception if this cast is not possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StreamShape getOutputShape()",
    "returnType" : "StreamShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node<Double> evaluateToNode(PipelineHelper<Double> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<Double[]> generator)",
    "returnType" : "Node<Double>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator<Double> wrap(PipelineHelper<Double> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)",
    "returnType" : "Spliterator<Double>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator.OfDouble lazySpliterator(Supplier<? extends Spliterator<Double>> supplier)",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean forEachWithCancel(Spliterator<Double> spliterator, Sink<Double> sink)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node.Builder<Double> makeNodeBuilder(long exactSizeIfKnown, IntFunction<Double[]> generator)",
    "returnType" : "Node.Builder<Double>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Stream<U> mapToObj(DoubleFunction<? extends U> mapper, int opFlags)",
    "returnType" : "Stream<U>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final PrimitiveIterator.OfDouble iterator()",
    "returnType" : "PrimitiveIterator.OfDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator.OfDouble spliterator()",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<Double> boxed()",
    "returnType" : "Stream<Double>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream map(DoubleUnaryOperator mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<U> mapToObj(DoubleFunction<? extends U> mapper)",
    "returnType" : "Stream<U>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream mapToInt(DoubleToIntFunction mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream mapToLong(DoubleToLongFunction mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream flatMap(DoubleFunction<? extends DoubleStream> mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream mapMulti(DoubleMapMultiConsumer mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream unordered()",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream filter(DoublePredicate predicate)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream peek(DoubleConsumer action)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream limit(long maxSize)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream skip(long n)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream takeWhile(DoublePredicate predicate)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream dropWhile(DoublePredicate predicate)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream sorted()",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream distinct()",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(DoubleConsumer consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachOrdered(DoubleConsumer consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final double sum()",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble min()",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble max()",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble average()",
    "returnType" : "OptionalDouble",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implNote The {@code double} format can represent all\n     * consecutive integers in the range -2<sup>53</sup> to\n     * 2<sup>53</sup>. If the pipeline has more than 2<sup>53</sup>\n     * values, the divisor in the average computation will saturate at\n     * 2<sup>53</sup>, leading to additional numerical errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long count()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleSummaryStatistics summaryStatistics()",
    "returnType" : "DoubleSummaryStatistics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final double reduce(double identity, DoubleBinaryOperator op)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble reduce(DoubleBinaryOperator op)",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final R collect(Supplier<R> supplier, ObjDoubleConsumer<R> accumulator, BiConsumer<R, R> combiner)",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean anyMatch(DoublePredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean allMatch(DoublePredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean noneMatch(DoublePredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble findFirst()",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble findAny()",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final double[] toArray()",
    "returnType" : "double[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static DoubleConsumer adapt(Sink<Double> sink)", "private static Spliterator.OfDouble adapt(Spliterator<Double> s)", "public final StreamShape getOutputShape()", "public final Node<Double> evaluateToNode(PipelineHelper<Double> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<Double[]> generator)", "public final Spliterator<Double> wrap(PipelineHelper<Double> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)", "public final Spliterator.OfDouble lazySpliterator(Supplier<? extends Spliterator<Double>> supplier)", "public final boolean forEachWithCancel(Spliterator<Double> spliterator, Sink<Double> sink)", "public final Node.Builder<Double> makeNodeBuilder(long exactSizeIfKnown, IntFunction<Double[]> generator)", "private Stream<U> mapToObj(DoubleFunction<? extends U> mapper, int opFlags)", "public final PrimitiveIterator.OfDouble iterator()", "public final Spliterator.OfDouble spliterator()", "public final Stream<Double> boxed()", "public final DoubleStream map(DoubleUnaryOperator mapper)", "public final Stream<U> mapToObj(DoubleFunction<? extends U> mapper)", "public final IntStream mapToInt(DoubleToIntFunction mapper)", "public final LongStream mapToLong(DoubleToLongFunction mapper)", "public final DoubleStream flatMap(DoubleFunction<? extends DoubleStream> mapper)", "public final DoubleStream mapMulti(DoubleMapMultiConsumer mapper)", "public DoubleStream unordered()", "public final DoubleStream filter(DoublePredicate predicate)", "public final DoubleStream peek(DoubleConsumer action)", "public final DoubleStream limit(long maxSize)", "public final DoubleStream skip(long n)", "public final DoubleStream takeWhile(DoublePredicate predicate)", "public final DoubleStream dropWhile(DoublePredicate predicate)", "public final DoubleStream sorted()", "public final DoubleStream distinct()", "public void forEach(DoubleConsumer consumer)", "public void forEachOrdered(DoubleConsumer consumer)", "public final double sum()", "public final OptionalDouble min()", "public final OptionalDouble max()", "public final OptionalDouble average()", "public final long count()", "public final DoubleSummaryStatistics summaryStatistics()", "public final double reduce(double identity, DoubleBinaryOperator op)", "public final OptionalDouble reduce(DoubleBinaryOperator op)", "public final R collect(Supplier<R> supplier, ObjDoubleConsumer<R> accumulator, BiConsumer<R, R> combiner)", "public final boolean anyMatch(DoublePredicate predicate)", "public final boolean allMatch(DoublePredicate predicate)", "public final boolean noneMatch(DoublePredicate predicate)", "public final OptionalDouble findFirst()", "public final OptionalDouble findAny()", "public final double[] toArray()" ],
  "variableNames" : [ ]
}