{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityManager.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityManager",
  "comment" : "\n * System level service that serves as an event dispatch for {@link AccessibilityEvent}s,\n * and provides facilities for querying the accessibility state of the system.\n * Accessibility events are generated when something notable happens in the user interface,\n * for example an {@link android.app.Activity} starts, the focus or selection of a\n * {@link android.view.View} changes etc. Parties interested in handling accessibility\n * events implement and register an accessibility service which extends\n * {@link android.accessibilityservice.AccessibilityService}.\n *\n * @see AccessibilityEvent\n * @see AccessibilityNodeInfo\n * @see android.accessibilityservice.AccessibilityService\n * @see Context#getSystemService\n * @see Context#ACCESSIBILITY_SERVICE\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.View", "android.view.accessibility.AccessibilityEvent", "android.app.Activity" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_ACCESSIBILITY_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_TOUCH_EXPLORATION_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_HIGH_TEXT_CONTRAST_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_DISPATCH_DOUBLE_TAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_REQUEST_MULTI_FINGER_GESTURES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_TRACE_A11Y_INTERACTION_CONNECTION_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_TRACE_A11Y_INTERACTION_CONNECTION_CB_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_TRACE_A11Y_INTERACTION_CLIENT_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_TRACE_A11Y_SERVICE_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_FLAG_AUDIO_DESCRIPTION_BY_DEFAULT_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DALTONIZER_DISABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DALTONIZER_SIMULATE_MONOCHROMACY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DALTONIZER_CORRECT_DEUTERANOMALY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUTOCLICK_DELAY_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHOOSE_ACCESSIBILITY_BUTTON",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage which accessibility service or feature is assigned\n     * to the navigation bar Accessibility button.\n     * <p>\n     * Input: Nothing.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLASH_REASON_CALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLASH_REASON_ALARM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLASH_REASON_NOTIFICATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLASH_REASON_PREVIEW",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CONTENT_ICONS",
    "type" : "int",
    "comment" : "\n     * Use this flag to indicate the content of a UI that times out contains icons.\n     *\n     * @see #getRecommendedTimeoutMillis(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CONTENT_TEXT",
    "type" : "int",
    "comment" : "\n     * Use this flag to indicate the content of a UI that times out contains text.\n     *\n     * @see #getRecommendedTimeoutMillis(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CONTENT_CONTROLS",
    "type" : "int",
    "comment" : "\n     * Use this flag to indicate the content of a UI that times out contains interactive controls.\n     *\n     * @see #getRecommendedTimeoutMillis(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "sInstanceSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Handler.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRelevantEventTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInteractiveUiTimeout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNonInteractiveUiTimeout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsTouchExplorationEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsHighTextContrastEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAudioDescriptionByDefaultRequested",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityTracingState",
    "type" : "int",
    "comment" : " accessibility tracing state",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityPolicy",
    "type" : "AccessibilityPolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerformingAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusStrokeWidth",
    "type" : "int",
    "comment" : " The stroke width of the focus rectangle in pixels ",
    "links" : [ ]
  }, {
    "name" : "mFocusColor",
    "type" : "int",
    "comment" : " The color of the focus rectangle ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityStateChangeListeners",
    "type" : "ArrayMap<AccessibilityStateChangeListener, Handler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchExplorationStateChangeListeners",
    "type" : "ArrayMap<TouchExplorationStateChangeListener, Handler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHighTextContrastStateChangeListeners",
    "type" : "ArrayMap<HighTextContrastChangeListener, Handler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServicesStateChangeListeners",
    "type" : "ArrayMap<AccessibilityServicesStateChangeListener, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioDescriptionRequestedChangeListeners",
    "type" : "ArrayMap<AudioDescriptionRequestedChangeListener, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestFromAccessibilityTool",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestPreparerLists",
    "type" : "SparseArray<List<AccessibilityRequestPreparer>>",
    "comment" : "\n     * Map from a view's accessibility id to the list of request preparers set for that view\n     ",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "Binder",
    "comment" : "\n     * Binder for flash notification.\n     *\n     * @see #startFlashNotificationSequence(Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IAccessibilityManagerClient.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AccessibilityManager getInstance(Context context)",
    "returnType" : "AccessibilityManager",
    "comment" : "\n     * Get an AccessibilityManager instance (create one if necessary).\n     *\n     * @param context Context in which this manager operates.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IAccessibilityManagerClient getClient()",
    "returnType" : "IAccessibilityManagerClient",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeClient()",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters the IAccessibilityManagerClient from the backing service\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler.Callback getCallback()",
    "returnType" : "Handler.Callback",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the accessibility in the system is enabled.\n     * <p>\n     * <b>Note:</b> This query is used for sending {@link AccessibilityEvent}s, since events are\n     * only needed if accessibility is on. Avoid changing UI or app behavior based on the state of\n     * accessibility. While well-intentioned, doing this creates brittle, less\n     * well-maintained code that works for some users but not others. Shared code leads to more\n     * equitable experiences and less technical debt.\n     *\n     *<p>\n     * For example, if you want to expose a unique interaction with your app, use\n     * ViewCompat#addAccessibilityAction in AndroidX to make this interaction - ideally\n     * with the same code path used for non-accessibility users - available to accessibility\n     * services. Services can then expose this action in the way best fit for their users.\n     *\n     * @return True if accessibility is enabled, false otherwise.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public boolean hasAnyDirectConnection()",
    "returnType" : "boolean",
    "comment" : "\n     * @see AccessibilityInteractionClient#hasAnyDirectConnection\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTouchExplorationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the touch exploration in the system is enabled.\n     * <p>\n     * <b>Note:</b> This query is used for dispatching hover events, such as\n     * {@link android.view.MotionEvent#ACTION_HOVER_ENTER}, to accessibility services to manage\n     * touch exploration. Avoid changing UI or app behavior based on the state of accessibility.\n     * While well-intentioned, doing this creates brittle, less well-maintained code that works for\n     * som users but not others. Shared code leads to more equitable experiences and less technical\n     * debt.\n     *\n     * @return True if touch exploration is enabled, false otherwise.\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_HOVER_ENTER" ]
  }, {
    "name" : "public boolean isHighTextContrastEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the high text contrast in the system is enabled.\n     * <p>\n     * <strong>Note:</strong> You need to query this only if you application is\n     * doing its own rendering and does not rely on the platform rendering pipeline.\n     * </p>\n     *\n     * @return True if high text contrast is enabled, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Sends an {@link AccessibilityEvent}.\n     *\n     * @param event The event to send.\n     *\n     * @throws IllegalStateException if accessibility is not enabled.\n     *\n     * <strong>Note:</strong> The preferred mechanism for sending custom accessibility\n     * events is through calling\n     * {@link android.view.ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)}\n     * instead of this method to allow predecessors to augment/filter events sent by\n     * their descendants.\n     ",
    "links" : [ "android.view.ViewParent#requestSendAccessibilityEvent(View", "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public void interrupt()",
    "returnType" : "void",
    "comment" : "\n     * Requests feedback interruption from all accessibility services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ServiceInfo> getAccessibilityServiceList()",
    "returnType" : "List<ServiceInfo>",
    "comment" : "\n     * Returns the {@link ServiceInfo}s of the installed accessibility services.\n     *\n     * @return An unmodifiable list with {@link ServiceInfo}s.\n     *\n     * @deprecated Use {@link #getInstalledAccessibilityServiceList()}\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo", "#getInstalledAccessibilityServiceList()" ]
  }, {
    "name" : "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList()",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "\n     * Returns the {@link AccessibilityServiceInfo}s of the installed accessibility services.\n     *\n     * @return An unmodifiable list with {@link AccessibilityServiceInfo}s.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo" ]
  }, {
    "name" : "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags)",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "\n     * Returns the {@link AccessibilityServiceInfo}s of the enabled accessibility services\n     * for a given feedback type.\n     *\n     * @param feedbackTypeFlags The feedback type flags.\n     * @return An unmodifiable list with {@link AccessibilityServiceInfo}s.\n     *\n     * @see AccessibilityServiceInfo#FEEDBACK_AUDIBLE\n     * @see AccessibilityServiceInfo#FEEDBACK_GENERIC\n     * @see AccessibilityServiceInfo#FEEDBACK_HAPTIC\n     * @see AccessibilityServiceInfo#FEEDBACK_SPOKEN\n     * @see AccessibilityServiceInfo#FEEDBACK_VISUAL\n     * @see AccessibilityServiceInfo#FEEDBACK_BRAILLE\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo" ]
  }, {
    "name" : "public boolean isAccessibilityServiceWarningRequired(@NonNull AccessibilityServiceInfo info)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the user must be shown the AccessibilityService warning dialog\n     * before the AccessibilityService (or any shortcut for the service) can be enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers an {@link AccessibilityStateChangeListener} for changes in\n     * the global accessibility state of the system. Equivalent to calling\n     * {@link #addAccessibilityStateChangeListener(AccessibilityStateChangeListener, Handler)}\n     * with a null handler.\n     *\n     * @param listener The listener.\n     * @return Always returns {@code true}.\n     ",
    "links" : [ "AccessibilityStateChangeListener", "#addAccessibilityStateChangeListener(AccessibilityStateChangeListener" ]
  }, {
    "name" : "public void addAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link AccessibilityStateChangeListener} for changes in\n     * the global accessibility state of the system. If the listener has already been registered,\n     * the handler used to call it back is updated.\n     *\n     * @param listener The listener.\n     * @param handler The handler on which the listener should be called back, or {@code null}\n     *                for a callback on the process's main handler.\n     ",
    "links" : [ "AccessibilityStateChangeListener" ]
  }, {
    "name" : "public boolean removeAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters an {@link AccessibilityStateChangeListener}.\n     *\n     * @param listener The listener.\n     * @return True if the listener was previously registered.\n     ",
    "links" : [ "AccessibilityStateChangeListener" ]
  }, {
    "name" : "public boolean addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a {@link TouchExplorationStateChangeListener} for changes in\n     * the global touch exploration state of the system. Equivalent to calling\n     * {@link #addTouchExplorationStateChangeListener(TouchExplorationStateChangeListener, Handler)}\n     * with a null handler.\n     *\n     * @param listener The listener.\n     * @return Always returns {@code true}.\n     ",
    "links" : [ "#addTouchExplorationStateChangeListener(TouchExplorationStateChangeListener", "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "public void addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link TouchExplorationStateChangeListener} for changes in\n     * the global touch exploration state of the system. If the listener has already been\n     * registered, the handler used to call it back is updated.\n     *\n     * @param listener The listener.\n     * @param handler The handler on which the listener should be called back, or {@code null}\n     *                for a callback on the process's main handler.\n     ",
    "links" : [ "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "public boolean removeTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters a {@link TouchExplorationStateChangeListener}.\n     *\n     * @param listener The listener.\n     * @return True if listener was previously registered.\n     ",
    "links" : [ "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "public void addAccessibilityServicesStateChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull AccessibilityServicesStateChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link AccessibilityServicesStateChangeListener}.\n     *\n     * @param executor The executor.\n     * @param listener The listener.\n     ",
    "links" : [ "AccessibilityServicesStateChangeListener" ]
  }, {
    "name" : "public void addAccessibilityServicesStateChangeListener(@NonNull AccessibilityServicesStateChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link AccessibilityServicesStateChangeListener}. This will execute a callback on\n     * the process's main handler.\n     *\n     * @param listener The listener.\n     *\n     ",
    "links" : [ "AccessibilityServicesStateChangeListener" ]
  }, {
    "name" : "public boolean removeAccessibilityServicesStateChangeListener(@NonNull AccessibilityServicesStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters a {@link AccessibilityServicesStateChangeListener}.\n     *\n     * @param listener The listener.\n     * @return {@code true} if the listener was previously registered.\n     ",
    "links" : [ "AccessibilityServicesStateChangeListener" ]
  }, {
    "name" : "public boolean isRequestFromAccessibilityTool()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the current accessibility request comes from an\n     * {@link AccessibilityService} with the {@link AccessibilityServiceInfo#isAccessibilityTool}\n     * property set to true.\n     *\n     * <p>\n     * You can use this method inside {@link AccessibilityNodeProvider} to decide how to populate\n     * your nodes.\n     * </p>\n     *\n     * <p>\n     * <strong>Note:</strong> The return value is valid only when an {@link AccessibilityNodeInfo}\n     * request is in progress, can change from one request to another, and has no meaning when a\n     * request is not in progress.\n     * </p>\n     *\n     * @return True if the current request is from a tool that sets isAccessibilityTool.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityServiceInfo#isAccessibilityTool", "android.view.accessibility.AccessibilityNodeProvider" ]
  }, {
    "name" : "public void setRequestFromAccessibilityTool(boolean requestFromAccessibilityTool)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the current accessibility request comes from an\n     * {@link AccessibilityService} with the {@link AccessibilityServiceInfo#isAccessibilityTool}\n     * property set to true.\n     *\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.accessibilityservice.AccessibilityServiceInfo#isAccessibilityTool" ]
  }, {
    "name" : "public void addAccessibilityRequestPreparer(AccessibilityRequestPreparer preparer)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link AccessibilityRequestPreparer}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityRequestPreparer" ]
  }, {
    "name" : "public void removeAccessibilityRequestPreparer(AccessibilityRequestPreparer preparer)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link AccessibilityRequestPreparer}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityRequestPreparer" ]
  }, {
    "name" : "public int getRecommendedTimeoutMillis(int originalTimeout, @ContentFlag int uiContentFlags)",
    "returnType" : "int",
    "comment" : "\n     * Get the recommended timeout for changes to the UI needed by this user. Controls should remain\n     * on the screen for at least this long to give users time to react. Some users may need\n     * extra time to review the controls, or to reach them, or to activate assistive technology\n     * to activate the controls automatically.\n     * <p>\n     * Use the combination of content flags to indicate contents of UI. For example, use\n     * {@code FLAG_CONTENT_ICONS | FLAG_CONTENT_TEXT} for message notification which contains\n     * icons and text, or use {@code FLAG_CONTENT_TEXT | FLAG_CONTENT_CONTROLS} for button dialog\n     * which contains text and button controls.\n     * <p/>\n     *\n     * @param originalTimeout The timeout appropriate for users with no accessibility needs.\n     * @param uiContentFlags The combination of flags {@link #FLAG_CONTENT_ICONS},\n     *                       {@link #FLAG_CONTENT_TEXT} or {@link #FLAG_CONTENT_CONTROLS} to\n     *                       indicate the contents of UI.\n     * @return The recommended UI timeout for the current user in milliseconds.\n     ",
    "links" : [ "#FLAG_CONTENT_TEXT", "#FLAG_CONTENT_ICONS", "#FLAG_CONTENT_CONTROLS" ]
  }, {
    "name" : "public int getAccessibilityFocusStrokeWidth()",
    "returnType" : "int",
    "comment" : "\n     * Gets the strokeWidth of the focus rectangle. This value can be set by\n     * {@link AccessibilityService}.\n     *\n     * @return The strokeWidth of the focus rectangle in pixels.\n     *\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public int getAccessibilityFocusColor()",
    "returnType" : "int",
    "comment" : "\n     * Gets the color of the focus rectangle. This value can be set by\n     * {@link AccessibilityService}.\n     *\n     * @return The color of the focus rectangle.\n     *\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "public boolean isA11yInteractionConnectionTraceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets accessibility interaction connection tracing enabled state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isA11yInteractionConnectionCBTraceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets accessibility interaction connection callback tracing enabled state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isA11yInteractionClientTraceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets accessibility interaction client tracing enabled state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isA11yServiceTraceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets accessibility service tracing enabled state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityRequestPreparer> getRequestPreparersForAccessibilityId(int id)",
    "returnType" : "List<AccessibilityRequestPreparer>",
    "comment" : "\n     * Get the preparers that are registered for an accessibility ID\n     *\n     * @param id The ID of interest\n     * @return The list of preparers, or {@code null} if there are none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyPerformingAction(int actionId)",
    "returnType" : "void",
    "comment" : "\n     * Set the currently performing accessibility action in views.\n     *\n     * @param actionId the action id of {@link AccessibilityNodeInfo.AccessibilityAction}.\n     * @hide\n     ",
    "links" : [ "AccessibilityNodeInfo.AccessibilityAction" ]
  }, {
    "name" : "public int getPerformingAction()",
    "returnType" : "int",
    "comment" : "\n     * Get the id of {@link AccessibilityNodeInfo.AccessibilityAction} currently being performed.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityNodeInfo.AccessibilityAction" ]
  }, {
    "name" : "public void addHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link HighTextContrastChangeListener} for changes in\n     * the global high text contrast state of the system.\n     *\n     * @param listener The listener.\n     *\n     * @hide\n     ",
    "links" : [ "HighTextContrastChangeListener" ]
  }, {
    "name" : "public void removeHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link HighTextContrastChangeListener}.\n     *\n     * @param listener The listener.\n     *\n     * @hide\n     ",
    "links" : [ "HighTextContrastChangeListener" ]
  }, {
    "name" : "public void addAudioDescriptionRequestedChangeListener(@NonNull Executor executor, @NonNull AudioDescriptionRequestedChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link AudioDescriptionRequestedChangeListener}\n     * for changes in the audio description by default state of the system.\n     * The value could be read via {@link #isAudioDescriptionRequested}.\n     *\n     * @param executor The executor on which the listener should be called back.\n     * @param listener The listener.\n     ",
    "links" : [ "AudioDescriptionRequestedChangeListener", "#isAudioDescriptionRequested" ]
  }, {
    "name" : "public boolean removeAudioDescriptionRequestedChangeListener(@NonNull AudioDescriptionRequestedChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters a {@link AudioDescriptionRequestedChangeListener}.\n     *\n     * @param listener The listener.\n     * @return True if listener was previously registered.\n     ",
    "links" : [ "AudioDescriptionRequestedChangeListener" ]
  }, {
    "name" : "public void setAccessibilityPolicy(@Nullable AccessibilityPolicy policy)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AccessibilityPolicy} controlling this manager.\n     *\n     * @param policy The policy.\n     *\n     * @hide\n     ",
    "links" : [ "AccessibilityPolicy" ]
  }, {
    "name" : "public boolean isAccessibilityVolumeStreamActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the accessibility volume stream is active.\n     *\n     * @return True if accessibility volume is active (i.e. some service has requested it). False\n     * otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendFingerprintGesture(int keyCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Report a fingerprint gesture to accessibility. Only available for the system process.\n     *\n     * @param keyCode The key code of the gesture\n     * @return {@code true} if accessibility consumes the event. {@code false} if not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessibilityWindowId(@Nullable IBinder windowToken)",
    "returnType" : "int",
    "comment" : "\n     * Returns accessibility window id from window token. Accessibility window id is the one\n     * returned from AccessibilityWindowInfo.getId(). Only available for the system process.\n     *\n     * @param windowToken Window token to find accessibility window id.\n     * @return Accessibility window id for the window token.\n     *   AccessibilityWindowInfo.UNDEFINED_WINDOW_ID if accessibility window id not available for\n     *   the token.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void associateEmbeddedHierarchy(@NonNull IBinder host, @NonNull IBinder embedded)",
    "returnType" : "void",
    "comment" : "\n     * Associate the connection between the host View and the embedded SurfaceControlViewHost.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disassociateEmbeddedHierarchy(@NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Disassociate the connection between the host View and the embedded SurfaceControlViewHost.\n     * The given token could be either from host side or embedded side.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setStateLocked(int stateFlags)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current state and notifies listeners, if necessary.\n     *\n     * @param stateFlags The state flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityServiceInfo getInstalledServiceInfoWithComponentName(ComponentName componentName)",
    "returnType" : "AccessibilityServiceInfo",
    "comment" : "\n     * Find an installed service with the specified {@link ComponentName}.\n     *\n     * @param componentName The name to match to the service.\n     *\n     * @return The info corresponding to the installed service, or {@code null} if no such service\n     * is installed.\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public int addAccessibilityInteractionConnection(IWindow windowToken, IBinder leashToken, String packageName, IAccessibilityInteractionConnection connection)",
    "returnType" : "int",
    "comment" : "\n     * Adds an accessibility interaction connection interface for a given window.\n     * @param windowToken The window token to which a connection is added.\n     * @param leashToken The leash token to which a connection is added.\n     * @param connection The connection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAccessibilityInteractionConnection(IWindow windowToken)",
    "returnType" : "void",
    "comment" : "\n     * Removed an accessibility interaction connection interface for a given window.\n     * @param windowToken The window token to which a connection is removed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performAccessibilityShortcut()",
    "returnType" : "void",
    "comment" : "\n     * Perform the accessibility shortcut if the caller has permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performAccessibilityShortcut(@Nullable String targetName)",
    "returnType" : "void",
    "comment" : "\n     * Perform the accessibility shortcut for the given target which is assigned to the shortcut.\n     *\n     * @param targetName The flattened {@link ComponentName} string or the class name of a system\n     *        class implementing a supported accessibility feature, or {@code null} if there's no\n     *        specified target.\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public void enableShortcutsForTargets(boolean enable, @ShortcutConstants.UserShortcutType int shortcutTypes, @NonNull Set<String> targets, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Turns on or off a shortcut type of the accessibility features. The shortcut type is one\n     * of the shortcut defined in the {@link ShortcutConstants.USER_SHORTCUT_TYPES}.\n     *\n     * @throws SecurityException if the app does not hold the\n     *                           {@link Manifest.permission#MANAGE_ACCESSIBILITY} permission\n     * @hide\n     ",
    "links" : [ "ShortcutConstants.USER_SHORTCUT_TYPES", "Manifest.permission#MANAGE_ACCESSIBILITY" ]
  }, {
    "name" : "public Map<ComponentName, ComponentName> getA11yFeatureToTileMap(@UserIdInt int userId)",
    "returnType" : "Map<ComponentName, ComponentName>",
    "comment" : "\n     * Returns accessibility feature's component and the provided tile map. This includes the\n     * TileService provided by the AccessibilityService or Accessibility Activity and the tile\n     * component provided by the framework's feature.\n     *\n     * @return a map of a feature's component name, and its provided tile's component name. The\n     * returned map's keys and values are not null. If a feature doesn't provide a tile, it won't\n     * have an entry in this map.\n     * @hide\n     * @see ShortcutConstants.A11Y_FEATURE_TO_FRAMEWORK_TILE\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerSystemAction(@NonNull RemoteAction action, int actionId)",
    "returnType" : "void",
    "comment" : "\n     * Register the provided {@link RemoteAction} with the given actionId\n     * <p>\n     * To perform established system actions, an accessibility service uses the GLOBAL_ACTION\n     * constants in {@link android.accessibilityservice.AccessibilityService}. To provide a\n     * customized implementation for one of these actions, the id of the registered system action\n     * must match that of the corresponding GLOBAL_ACTION constant. For example, to register a\n     * Back action, {@code actionId} must be\n     * {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_BACK}\n     * </p>\n     * @param action The remote action to be registered with the given actionId as system action.\n     * @param actionId The id uniquely identify the system action.\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.app.RemoteAction", "android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_BACK" ]
  }, {
    "name" : "public void unregisterSystemAction(int actionId)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a system action with the given actionId\n     *\n     * @param actionId The id uniquely identify the system action to be unregistered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAccessibilityButtonClicked(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the accessibility button in the system's navigation area has been clicked\n     *\n     * @param displayId The logical display id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAccessibilityButtonClicked(int displayId, @Nullable String targetName)",
    "returnType" : "void",
    "comment" : "\n     * Perform the accessibility button for the given target which is assigned to the button.\n     *\n     * @param displayId displayId The logical display id.\n     * @param targetName The flattened {@link ComponentName} string or the class name of a system\n     *        class implementing a supported accessibility feature, or {@code null} if there's no\n     *        specified target.\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public void notifyAccessibilityButtonVisibilityChanged(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the visibility of the accessibility button in the system's navigation area\n     * has changed.\n     *\n     * @param shown {@code true} if the accessibility button is visible within the system\n     *                  navigation area, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPictureInPictureActionReplacingConnection(@Nullable IAccessibilityInteractionConnection connection)",
    "returnType" : "void",
    "comment" : "\n     * Set an IAccessibilityInteractionConnection to replace the actions of a picture-in-picture\n     * window. Intended for use by the System UI only.\n     *\n     * @param connection The connection to handle the actions. Set to {@code null} to avoid\n     * affecting the actions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAccessibilityShortcutTargets(@ShortcutConstants.UserShortcutType int shortcutType)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of shortcut target names currently assigned to the given shortcut.\n     *\n     * @param shortcutType The shortcut type.\n     * @return The list of shortcut target names.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityShortcutInfo> getInstalledAccessibilityShortcutListAsUser(@NonNull Context context, @UserIdInt int userId)",
    "returnType" : "List<AccessibilityShortcutInfo>",
    "comment" : "\n     * Returns the {@link AccessibilityShortcutInfo}s of the installed accessibility shortcut\n     * targets, for specific user.\n     *\n     * @param context The context of the application.\n     * @param userId The user id.\n     * @return A list with {@link AccessibilityShortcutInfo}s.\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityShortcutInfo" ]
  }, {
    "name" : "private AccessibilityShortcutInfo getShortcutInfo(@NonNull Context context, @NonNull ResolveInfo resolveInfo)",
    "returnType" : "AccessibilityShortcutInfo",
    "comment" : "\n     * Returns an {@link AccessibilityShortcutInfo} according to the given {@link ResolveInfo} of\n     * an activity.\n     *\n     * @param context The context of the application.\n     * @param resolveInfo The resolve info of an activity.\n     * @return The AccessibilityShortcutInfo.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityShortcutInfo", "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "public void setMagnificationConnection(@Nullable IMagnificationConnection connection)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Sets an {@link IMagnificationConnection} that manipulates magnification in SystemUI.\n     *\n     * @param connection The connection that manipulates magnification in SystemUI.\n     * @hide\n     ",
    "links" : [ "IMagnificationConnection" ]
  }, {
    "name" : "public boolean isAudioDescriptionRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if users want to select sound track with audio description by default.\n     * <p>\n     * Audio description, also referred to as a video description, described video, or\n     * more precisely called a visual description, is a form of narration used to provide\n     * information surrounding key visual elements in a media work for the benefit of\n     * blind and visually impaired consumers.\n     * </p>\n     * <p>\n     * The method provides the preference value to content provider apps to select the\n     * default sound track during playing a video or movie.\n     * </p>\n     * <p>\n     * Add listener to detect the state change via\n     * {@link #addAudioDescriptionRequestedChangeListener}\n     * </p>\n     * @return {@code true} if the audio description is enabled, {@code false} otherwise.\n     ",
    "links" : [ "#addAudioDescriptionRequestedChangeListener" ]
  }, {
    "name" : "public void setSystemAudioCaptioningEnabled(boolean isEnabled, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the system audio caption enabled state.\n     *\n     * @param isEnabled The system audio captioning enabled state.\n     * @param userId The user Id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemAudioCaptioningUiEnabled(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the system audio caption UI enabled state.\n     *\n     * @param userId The user Id.\n     * @return the system audio caption UI enabled state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAudioCaptioningUiEnabled(boolean isEnabled, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the system audio caption UI enabled state.\n     *\n     * @param isEnabled The system audio captioning UI enabled state.\n     * @param userId The user Id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityWindowAttributes(int displayId, int windowId, AccessibilityWindowAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AccessibilityWindowAttributes} to the window associated with the given\n     * window id.\n     *\n     * @param displayId The display id of the window.\n     * @param windowId  The id of the window.\n     * @param attributes The accessibility window attributes.\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowAttributes" ]
  }, {
    "name" : "public boolean registerDisplayProxy(@NonNull AccessibilityDisplayProxy proxy)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers an {@link AccessibilityDisplayProxy}, so this proxy can access UI content specific\n     * to its display.\n     *\n     * @param proxy the {@link AccessibilityDisplayProxy} to register.\n     * @return {@code true} if the proxy is successfully registered.\n     *\n     * @throws IllegalArgumentException if the proxy's display is not currently tracked by a11y, is\n     * {@link android.view.Display#DEFAULT_DISPLAY}, is or lower than\n     * {@link android.view.Display#INVALID_DISPLAY}, or is already being proxy-ed.\n     *\n     * @throws SecurityException if the app does not hold the\n     * {@link Manifest.permission#MANAGE_ACCESSIBILITY} permission or the\n     * {@link Manifest.permission#CREATE_VIRTUAL_DEVICE} permission.\n     *\n     * @hide\n     ",
    "links" : [ "Manifest.permission#CREATE_VIRTUAL_DEVICE", "android.view.accessibility.AccessibilityDisplayProxy", "android.view.Display#INVALID_DISPLAY", "Manifest.permission#MANAGE_ACCESSIBILITY", "android.view.Display#DEFAULT_DISPLAY" ]
  }, {
    "name" : "public boolean unregisterDisplayProxy(@NonNull AccessibilityDisplayProxy proxy)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters an {@link AccessibilityDisplayProxy}.\n     *\n     * @return {@code true} if the proxy is successfully unregistered.\n     *\n     * @throws SecurityException if the app does not hold the\n     * {@link Manifest.permission#MANAGE_ACCESSIBILITY} permission or the\n     * {@link Manifest.permission#CREATE_VIRTUAL_DEVICE} permission.\n     *\n     * @hide\n     ",
    "links" : [ "Manifest.permission#CREATE_VIRTUAL_DEVICE", "android.view.accessibility.AccessibilityDisplayProxy", "Manifest.permission#MANAGE_ACCESSIBILITY" ]
  }, {
    "name" : "public boolean startFlashNotificationSequence(@NonNull Context context, @FlashNotificationReason int reason)",
    "returnType" : "boolean",
    "comment" : "\n     * Start sequence (infinite) type of flash notification. Use {@code Context} to retrieve the\n     * package name as the identifier of this flash notification.\n     * The notification can be cancelled later by calling {@link #stopFlashNotificationSequence}\n     * with same {@code Context}.\n     * If the binder associated with this {@link AccessibilityManager} instance dies then the\n     * sequence will stop automatically. It is strongly recommended to call\n     * {@link #stopFlashNotificationSequence} within a reasonable amount of time after calling\n     * this method.\n     *\n     * @param context The context in which this manager operates.\n     * @param reason The triggering reason of flash notification.\n     * @return {@code true} if flash notification works properly.\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.AccessibilityManager", "#stopFlashNotificationSequence" ]
  }, {
    "name" : "public boolean stopFlashNotificationSequence(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Stop sequence (infinite) type of flash notification. The flash notification with the\n     * package name retrieved from {@code Context} as identifier will be stopped if exist.\n     * It is strongly recommended to call this method within a reasonable amount of time after\n     * calling {@link #startFlashNotificationSequence} method.\n     *\n     * @param context The context in which this manager operates.\n     * @return {@code true} if flash notification stops properly.\n     * @hide\n     ",
    "links" : [ "#startFlashNotificationSequence" ]
  }, {
    "name" : "public boolean startFlashNotificationEvent(@NonNull Context context, @FlashNotificationReason int reason, @Nullable String reasonPkg)",
    "returnType" : "boolean",
    "comment" : "\n     * Start event (finite) type of flash notification.\n     *\n     * @param context The context in which this manager operates.\n     * @param reason The triggering reason of flash notification.\n     * @param reasonPkg The package that trigger the flash notification.\n     * @return {@code true} if flash notification works properly.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilityTargetAllowed(String packageName, int uid, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the accessibility target is allowed.\n     *\n     * @param packageName The name of the application attempting to perform the operation.\n     * @param uid The user id of the application attempting to perform the operation.\n     * @param userId The id of the user for whom to perform the operation.\n     * @return {@code true} the accessibility target is allowed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendRestrictedDialogIntent(String packageName, int uid, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends restricted dialog intent if the accessibility target is disallowed.\n     *\n     * @param packageName The name of the application attempting to perform the operation.\n     * @param uid The user id of the application attempting to perform the operation.\n     * @param userId The id of the user for whom to perform the operation.\n     * @return {@code true} if the restricted dialog is shown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private IAccessibilityManager getServiceLocked()",
    "returnType" : "IAccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void tryConnectToServiceLocked(IAccessibilityManager service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyAccessibilityStateChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the registered {@link AccessibilityStateChangeListener}s.\n     *\n     * Note: this method notifies only the listeners of this single instance.\n     * AccessibilityManagerService is responsible for calling this method on all of\n     * its AccessibilityManager clients in order to notify all listeners.\n     * @hide\n     ",
    "links" : [ "AccessibilityStateChangeListener" ]
  }, {
    "name" : "private void notifyTouchExplorationStateChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the registered {@link TouchExplorationStateChangeListener}s.\n     ",
    "links" : [ "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "private void notifyHighTextContrastStateChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the registered {@link HighTextContrastChangeListener}s.\n     ",
    "links" : [ "HighTextContrastChangeListener" ]
  }, {
    "name" : "private void notifyAudioDescriptionbyDefaultStateChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the registered {@link AudioDescriptionStateChangeListener}s.\n     ",
    "links" : [ "AudioDescriptionStateChangeListener" ]
  }, {
    "name" : "private void updateAccessibilityTracingState(int stateFlag)",
    "returnType" : "void",
    "comment" : "\n     * Update mAccessibilityTracingState.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateUiTimeout(long uiTimeout)",
    "returnType" : "void",
    "comment" : "\n     * Update interactive and non-interactive UI timeout.\n     *\n     * @param uiTimeout A pair of {@code int}s. First integer for interactive one, and second\n     *                  integer for non-interactive one.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateFocusAppearanceLocked(int strokeWidth, int color)",
    "returnType" : "void",
    "comment" : "\n     * Updates the stroke width and color of the focus rectangle.\n     *\n     * @param strokeWidth The strokeWidth of the focus rectangle.\n     * @param color The color of the focus rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initialFocusAppearanceLocked(Resources resource)",
    "returnType" : "void",
    "comment" : "\n     * Sets the stroke width and color of the focus rectangle to default value.\n     *\n     * @param resource The resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAccessibilityButtonSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the accessibility button within the system navigation area is supported.\n     *\n     * @return {@code true} if the accessibility button is supported on this device,\n     * {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public IAccessibilityManager.WindowTransformationSpec getWindowTransformationSpec(int windowId)",
    "returnType" : "IAccessibilityManager.WindowTransformationSpec",
    "comment" : "\n     * Retrieves the window's transformation matrix and magnification spec.\n     *\n     * <p>\n     * Used by callers outside of the AccessibilityManagerService process which need\n     * this information, like {@link android.view.accessibility.DirectAccessibilityConnection}.\n     * </p>\n     *\n     * @return The transformation spec\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.DirectAccessibilityConnection" ]
  }, {
    "name" : "public void attachAccessibilityOverlayToDisplay(int displayId, @NonNull SurfaceControl surfaceControl)",
    "returnType" : "void",
    "comment" : "\n     * Attaches a {@link android.view.SurfaceControl} containing an accessibility overlay to the\n     * specified display.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public void notifyQuickSettingsTilesChanged(@UserIdInt int userId, List<ComponentName> tileComponentNames)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the current a11y tiles in QuickSettings Panel has been changed\n     *\n     * @param userId            The userId of the user attempts to change the qs panel.\n     * @param tileComponentNames A list of Accessibility feature's TileServices' component names\n     *                           and the a11y platform tiles' component names\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static AccessibilityManager getInstance(Context context)", "public IAccessibilityManagerClient getClient()", "public boolean removeClient()", "public Handler.Callback getCallback()", "public boolean isEnabled()", "public boolean hasAnyDirectConnection()", "public boolean isTouchExplorationEnabled()", "public boolean isHighTextContrastEnabled()", "public void sendAccessibilityEvent(AccessibilityEvent event)", "public void interrupt()", "public List<ServiceInfo> getAccessibilityServiceList()", "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList()", "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags)", "public boolean isAccessibilityServiceWarningRequired(@NonNull AccessibilityServiceInfo info)", "public boolean addAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener)", "public void addAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener, @Nullable Handler handler)", "public boolean removeAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener)", "public boolean addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)", "public void addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener, @Nullable Handler handler)", "public boolean removeTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)", "public void addAccessibilityServicesStateChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull AccessibilityServicesStateChangeListener listener)", "public void addAccessibilityServicesStateChangeListener(@NonNull AccessibilityServicesStateChangeListener listener)", "public boolean removeAccessibilityServicesStateChangeListener(@NonNull AccessibilityServicesStateChangeListener listener)", "public boolean isRequestFromAccessibilityTool()", "public void setRequestFromAccessibilityTool(boolean requestFromAccessibilityTool)", "public void addAccessibilityRequestPreparer(AccessibilityRequestPreparer preparer)", "public void removeAccessibilityRequestPreparer(AccessibilityRequestPreparer preparer)", "public int getRecommendedTimeoutMillis(int originalTimeout, @ContentFlag int uiContentFlags)", "public int getAccessibilityFocusStrokeWidth()", "public int getAccessibilityFocusColor()", "public boolean isA11yInteractionConnectionTraceEnabled()", "public boolean isA11yInteractionConnectionCBTraceEnabled()", "public boolean isA11yInteractionClientTraceEnabled()", "public boolean isA11yServiceTraceEnabled()", "public List<AccessibilityRequestPreparer> getRequestPreparersForAccessibilityId(int id)", "public void notifyPerformingAction(int actionId)", "public int getPerformingAction()", "public void addHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener, @Nullable Handler handler)", "public void removeHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener)", "public void addAudioDescriptionRequestedChangeListener(@NonNull Executor executor, @NonNull AudioDescriptionRequestedChangeListener listener)", "public boolean removeAudioDescriptionRequestedChangeListener(@NonNull AudioDescriptionRequestedChangeListener listener)", "public void setAccessibilityPolicy(@Nullable AccessibilityPolicy policy)", "public boolean isAccessibilityVolumeStreamActive()", "public boolean sendFingerprintGesture(int keyCode)", "public int getAccessibilityWindowId(@Nullable IBinder windowToken)", "public void associateEmbeddedHierarchy(@NonNull IBinder host, @NonNull IBinder embedded)", "public void disassociateEmbeddedHierarchy(@NonNull IBinder token)", "private void setStateLocked(int stateFlags)", "public AccessibilityServiceInfo getInstalledServiceInfoWithComponentName(ComponentName componentName)", "public int addAccessibilityInteractionConnection(IWindow windowToken, IBinder leashToken, String packageName, IAccessibilityInteractionConnection connection)", "public void removeAccessibilityInteractionConnection(IWindow windowToken)", "public void performAccessibilityShortcut()", "public void performAccessibilityShortcut(@Nullable String targetName)", "public void enableShortcutsForTargets(boolean enable, @ShortcutConstants.UserShortcutType int shortcutTypes, @NonNull Set<String> targets, @UserIdInt int userId)", "public Map<ComponentName, ComponentName> getA11yFeatureToTileMap(@UserIdInt int userId)", "public void registerSystemAction(@NonNull RemoteAction action, int actionId)", "public void unregisterSystemAction(int actionId)", "public void notifyAccessibilityButtonClicked(int displayId)", "public void notifyAccessibilityButtonClicked(int displayId, @Nullable String targetName)", "public void notifyAccessibilityButtonVisibilityChanged(boolean shown)", "public void setPictureInPictureActionReplacingConnection(@Nullable IAccessibilityInteractionConnection connection)", "public List<String> getAccessibilityShortcutTargets(@ShortcutConstants.UserShortcutType int shortcutType)", "public List<AccessibilityShortcutInfo> getInstalledAccessibilityShortcutListAsUser(@NonNull Context context, @UserIdInt int userId)", "private AccessibilityShortcutInfo getShortcutInfo(@NonNull Context context, @NonNull ResolveInfo resolveInfo)", "public void setMagnificationConnection(@Nullable IMagnificationConnection connection)", "public boolean isAudioDescriptionRequested()", "public void setSystemAudioCaptioningEnabled(boolean isEnabled, int userId)", "public boolean isSystemAudioCaptioningUiEnabled(int userId)", "public void setSystemAudioCaptioningUiEnabled(boolean isEnabled, int userId)", "public void setAccessibilityWindowAttributes(int displayId, int windowId, AccessibilityWindowAttributes attributes)", "public boolean registerDisplayProxy(@NonNull AccessibilityDisplayProxy proxy)", "public boolean unregisterDisplayProxy(@NonNull AccessibilityDisplayProxy proxy)", "public boolean startFlashNotificationSequence(@NonNull Context context, @FlashNotificationReason int reason)", "public boolean stopFlashNotificationSequence(@NonNull Context context)", "public boolean startFlashNotificationEvent(@NonNull Context context, @FlashNotificationReason int reason, @Nullable String reasonPkg)", "public boolean isAccessibilityTargetAllowed(String packageName, int uid, int userId)", "public boolean sendRestrictedDialogIntent(String packageName, int uid, int userId)", "private IAccessibilityManager getServiceLocked()", "private void tryConnectToServiceLocked(IAccessibilityManager service)", "public void notifyAccessibilityStateChanged()", "private void notifyTouchExplorationStateChanged()", "private void notifyHighTextContrastStateChanged()", "private void notifyAudioDescriptionbyDefaultStateChanged()", "private void updateAccessibilityTracingState(int stateFlag)", "private void updateUiTimeout(long uiTimeout)", "private void updateFocusAppearanceLocked(int strokeWidth, int color)", "private void initialFocusAppearanceLocked(Resources resource)", "public static boolean isAccessibilityButtonSupported()", "public IAccessibilityManager.WindowTransformationSpec getWindowTransformationSpec(int windowId)", "public void attachAccessibilityOverlayToDisplay(int displayId, @NonNull SurfaceControl surfaceControl)", "public void notifyQuickSettingsTilesChanged(@UserIdInt int userId, List<ComponentName> tileComponentNames)" ],
  "variableNames" : [ "DEBUG", "LOG_TAG", "STATE_FLAG_ACCESSIBILITY_ENABLED", "STATE_FLAG_TOUCH_EXPLORATION_ENABLED", "STATE_FLAG_HIGH_TEXT_CONTRAST_ENABLED", "STATE_FLAG_DISPATCH_DOUBLE_TAP", "STATE_FLAG_REQUEST_MULTI_FINGER_GESTURES", "STATE_FLAG_TRACE_A11Y_INTERACTION_CONNECTION_ENABLED", "STATE_FLAG_TRACE_A11Y_INTERACTION_CONNECTION_CB_ENABLED", "STATE_FLAG_TRACE_A11Y_INTERACTION_CLIENT_ENABLED", "STATE_FLAG_TRACE_A11Y_SERVICE_ENABLED", "STATE_FLAG_AUDIO_DESCRIPTION_BY_DEFAULT_ENABLED", "DALTONIZER_DISABLED", "DALTONIZER_SIMULATE_MONOCHROMACY", "DALTONIZER_CORRECT_DEUTERANOMALY", "AUTOCLICK_DELAY_DEFAULT", "ACTION_CHOOSE_ACCESSIBILITY_BUTTON", "FLASH_REASON_CALL", "FLASH_REASON_ALARM", "FLASH_REASON_NOTIFICATION", "FLASH_REASON_PREVIEW", "FLAG_CONTENT_ICONS", "FLAG_CONTENT_TEXT", "FLAG_CONTENT_CONTROLS", "sInstanceSync", "sInstance", "mLock", "mService", "mUserId", "mHandler", "mCallback", "mIsEnabled", "mRelevantEventTypes", "mInteractiveUiTimeout", "mNonInteractiveUiTimeout", "mIsTouchExplorationEnabled", "mIsHighTextContrastEnabled", "mIsAudioDescriptionByDefaultRequested", "mAccessibilityTracingState", "mAccessibilityPolicy", "mPerformingAction", "mFocusStrokeWidth", "mFocusColor", "mAccessibilityStateChangeListeners", "mTouchExplorationStateChangeListeners", "mHighTextContrastStateChangeListeners", "mServicesStateChangeListeners", "mAudioDescriptionRequestedChangeListeners", "mRequestFromAccessibilityTool", "mRequestPreparerLists", "mBinder", "mClient" ]
}