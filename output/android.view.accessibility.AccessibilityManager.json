{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityManager.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityManager",
  "comment" : "\n * System level service that serves as an event dispatch for {@link AccessibilityEvent}s.\n * Such events are generated when something notable happens in the user interface,\n * for example an {@link android.app.Activity} starts, the focus or selection of a\n * {@link android.view.View} changes etc. Parties interested in handling accessibility\n * events implement and register an accessibility service which extends\n * {@code android.accessibilityservice.AccessibilityService}.\n *\n * @see AccessibilityEvent\n * @see android.content.Context#getSystemService\n ",
  "variables" : [ {
    "name" : "sInstance",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IAccessibilityManagerClient.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AccessibilityManager getInstance(Context context)",
    "returnType" : "AccessibilityManager",
    "comment" : "\n     * Get an AccessibilityManager instance (create one if necessary).\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public IAccessibilityManagerClient getClient()",
    "returnType" : "IAccessibilityManagerClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the {@link AccessibilityManager} is enabled.\n     *\n     * @return True if this {@link AccessibilityManager} is enabled, false otherwise.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityManager" ]
  }, {
    "name" : "public boolean isTouchExplorationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the touch exploration in the system is enabled.\n     *\n     * @return True if touch exploration is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHighTextContrastEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the high text contrast in the system is enabled.\n     * <p>\n     * <strong>Note:</strong> You need to query this only if you application is\n     * doing its own rendering and does not rely on the platform rendering pipeline.\n     * </p>\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Sends an {@link AccessibilityEvent}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public boolean isObservedEventType(@AccessibilityEvent.EventType int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there are observers registered for this event type. If\n     * this method returns false you shuold not generate events of this type\n     * to conserve resources.\n     *\n     * @param type The event type.\n     * @return Whether the event is being observed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void interrupt()",
    "returnType" : "void",
    "comment" : "\n     * Requests interruption of the accessibility feedback from all accessibility services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ServiceInfo> getAccessibilityServiceList()",
    "returnType" : "List<ServiceInfo>",
    "comment" : "\n     * Returns the {@link ServiceInfo}s of the installed accessibility services.\n     *\n     * @return An unmodifiable list with {@link ServiceInfo}s.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo" ]
  }, {
    "name" : "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList()",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags)",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "\n     * Returns the {@link AccessibilityServiceInfo}s of the enabled accessibility services\n     * for a given feedback type.\n     *\n     * @param feedbackTypeFlags The feedback type flags.\n     * @return An unmodifiable list with {@link AccessibilityServiceInfo}s.\n     *\n     * @see AccessibilityServiceInfo#FEEDBACK_AUDIBLE\n     * @see AccessibilityServiceInfo#FEEDBACK_GENERIC\n     * @see AccessibilityServiceInfo#FEEDBACK_HAPTIC\n     * @see AccessibilityServiceInfo#FEEDBACK_SPOKEN\n     * @see AccessibilityServiceInfo#FEEDBACK_VISUAL\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo" ]
  }, {
    "name" : "public boolean addAccessibilityStateChangeListener(AccessibilityStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers an {@link AccessibilityStateChangeListener} for changes in\n     * the global accessibility state of the system.\n     *\n     * @param listener The listener.\n     * @return True if successfully registered.\n     ",
    "links" : [ "AccessibilityStateChangeListener" ]
  }, {
    "name" : "public void addAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link AccessibilityStateChangeListener} for changes in\n     * the global accessibility state of the system. If the listener has already been registered,\n     * the handler used to call it back is updated.\n     *\n     * @param listener The listener.\n     * @param handler The handler on which the listener should be called back, or {@code null}\n     *                for a callback on the process's main handler.\n     ",
    "links" : [ "AccessibilityStateChangeListener" ]
  }, {
    "name" : "public boolean removeAccessibilityStateChangeListener(AccessibilityStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a {@link TouchExplorationStateChangeListener} for changes in\n     * the global touch exploration state of the system.\n     *\n     * @param listener The listener.\n     * @return True if successfully registered.\n     ",
    "links" : [ "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "public void addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link TouchExplorationStateChangeListener} for changes in\n     * the global touch exploration state of the system. If the listener has already been\n     * registered, the handler used to call it back is updated.\n     *\n     * @param listener The listener.\n     * @param handler The handler on which the listener should be called back, or {@code null}\n     *                for a callback on the process's main handler.\n     ",
    "links" : [ "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "public boolean removeTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters a {@link TouchExplorationStateChangeListener}.\n     *\n     * @param listener The listener.\n     * @return True if successfully unregistered.\n     ",
    "links" : [ "TouchExplorationStateChangeListener" ]
  }, {
    "name" : "public void addHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link HighTextContrastChangeListener} for changes in\n     * the global high text contrast state of the system.\n     *\n     * @param listener The listener.\n     *\n     * @hide\n     ",
    "links" : [ "HighTextContrastChangeListener" ]
  }, {
    "name" : "public void removeHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link HighTextContrastChangeListener}.\n     *\n     * @param listener The listener.\n     *\n     * @hide\n     ",
    "links" : [ "HighTextContrastChangeListener" ]
  }, {
    "name" : "private void setStateLocked(int stateFlags)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current state and notifies listeners, if necessary.\n     *\n     * @param stateFlags The state flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addAccessibilityInteractionConnection(IWindow windowToken, IAccessibilityInteractionConnection connection)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAccessibilityInteractionConnection(IWindow windowToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sInstance", "mClient" ],
  "methodNames" : [ "public static AccessibilityManager getInstance(Context context)", "public IAccessibilityManagerClient getClient()", "public boolean isEnabled()", "public boolean isTouchExplorationEnabled()", "public boolean isHighTextContrastEnabled()", "public void sendAccessibilityEvent(AccessibilityEvent event)", "public boolean isObservedEventType(@AccessibilityEvent.EventType int type)", "public void interrupt()", "public List<ServiceInfo> getAccessibilityServiceList()", "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList()", "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags)", "public boolean addAccessibilityStateChangeListener(AccessibilityStateChangeListener listener)", "public void addAccessibilityStateChangeListener(@NonNull AccessibilityStateChangeListener listener, @Nullable Handler handler)", "public boolean removeAccessibilityStateChangeListener(AccessibilityStateChangeListener listener)", "public boolean addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)", "public void addTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener, @Nullable Handler handler)", "public boolean removeTouchExplorationStateChangeListener(@NonNull TouchExplorationStateChangeListener listener)", "public void addHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener, @Nullable Handler handler)", "public void removeHighTextContrastStateChangeListener(@NonNull HighTextContrastChangeListener listener)", "private void setStateLocked(int stateFlags)", "public int addAccessibilityInteractionConnection(IWindow windowToken, IAccessibilityInteractionConnection connection)", "public void removeAccessibilityInteractionConnection(IWindow windowToken)" ]
}