{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/ServiceInfo.java",
  "packageName" : "android.content.pm",
  "className" : "ServiceInfo",
  "comment" : "\n * Information you can retrieve about a particular application\n * service. This corresponds to information collected from the\n * AndroidManifest.xml's &lt;service&gt; tags.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "permission",
    "type" : "String",
    "comment" : "\n     * Optional name of a permission required to be able to access this\n     * Service.  From the \"permission\" attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_STOP_WITH_TASK",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service will automatically be\n     * stopped by the system if the user removes a task that is rooted\n     * in one of the application's activities.  Set from the\n     * {@link android.R.attr#stopWithTask} attribute.\n     ",
    "links" : [ "android.R.attr#stopWithTask", "#flags" ]
  }, {
    "name" : "FLAG_ISOLATED_PROCESS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service will run in its own\n     * isolated process.  Set from the\n     * {@link android.R.attr#isolatedProcess} attribute.\n     ",
    "links" : [ "android.R.attr#isolatedProcess", "#flags" ]
  }, {
    "name" : "FLAG_EXTERNAL_SERVICE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service can be bound and run in the\n     * calling application's package, rather than the package in which it is\n     * declared.  Set from {@link android.R.attr#externalService} attribute.\n     ",
    "links" : [ "android.R.attr#externalService", "#flags" ]
  }, {
    "name" : "FLAG_USE_APP_ZYGOTE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service (which must be isolated)\n     * will be spawned from an Application Zygote, instead of the regular Zygote.\n     * The Application Zygote will pre-initialize the application's class loader,\n     * and call a static callback into the application to allow it to perform\n     * application-specific preloads (such as loading a shared library). Therefore,\n     * spawning from the Application Zygote will typically reduce the service\n     * launch time and reduce its memory usage. The downside of using this flag\n     * is that you will have an additional process (the app zygote itself) that\n     * is taking up memory. Whether actual memory usage is improved therefore\n     * strongly depends on the number of isolated services that an application\n     * starts, and how much memory those services save by preloading. Therefore,\n     * it is recommended to measure memory usage under typical workloads to\n     * determine whether it makes sense to use this flag.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_ALLOW_SHARED_ISOLATED_PROCESS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, and this is an {@link android.R.attr#isolatedProcess}\n     * service, the service is allowed to be bound in a shared isolated process with other\n     * isolated services. Note that these other isolated services can also belong to other\n     * apps from different vendors.\n     *\n     * Shared isolated processes are created when using the\n     * {@link android.content.Context#BIND_SHARED_ISOLATED_PROCESS) during service binding.\n     *\n     * Note that when this flag is used, the {@link android.R.attr#process} attribute is\n     * ignored when the process is bound into a shared isolated process by a client.\n     ",
    "links" : [ "android.content.Context#BIND_SHARED_ISOLATED_PROCESS)", "android.R.attr#process", "android.R.attr#isolatedProcess", "#flags" ]
  }, {
    "name" : "FLAG_VISIBLE_TO_INSTANT_APP",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the service is visible to ephemeral applications.\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SYSTEM_USER_ONLY",
    "type" : "int",
    "comment" : "\n     * @hide Bit in {@link #flags}: If set, this service will only be available\n     * for the system user.\n     * Set from the android.R.attr#systemUserOnly attribute.\n     * In Sync with {@link ActivityInfo#FLAG_SYSTEM_USER_ONLY}\n     ",
    "links" : [ "android.content.pm.ActivityInfo#FLAG_SYSTEM_USER_ONLY", "#flags" ]
  }, {
    "name" : "FLAG_SINGLE_USER",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, a single instance of the service will\n     * run for all users on the device.  Set from the\n     * {@link android.R.attr#singleUser} attribute.\n     ",
    "links" : [ "android.R.attr#singleUser", "#flags" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Options that have been set in the service declaration in the\n     * manifest.\n     * These include:\n     * {@link #FLAG_STOP_WITH_TASK}, {@link #FLAG_ISOLATED_PROCESS},\n     * {@link #FLAG_SINGLE_USER}.\n     ",
    "links" : [ "#FLAG_SINGLE_USER", "#FLAG_STOP_WITH_TASK", "#FLAG_ISOLATED_PROCESS" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * The default foreground service type if not been set in manifest file.\n     *\n     * <p>Apps targeting API level {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and\n     * later should NOT use this type,\n     * calling {@link android.app.Service#startForeground(int, android.app.Notification, int)} with\n     * this type will get a {@link android.app.InvalidForegroundServiceTypeException}.</p>\n     *\n     * @deprecated Do not use.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.app.Service#startForeground(int", "android.app.InvalidForegroundServiceTypeException" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_DATA_SYNC",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>dataSync</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Data(photo, file, account) upload/download, backup/restore, import/export, fetch,\n     * transfer over network between device and cloud.\n     *\n     * <p>This type has time limit of 6 hours starting from Android version\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}.\n     * A foreground service of this type must be stopped within the timeout by\n     * {@link android.app.Service#stopSelf()},\n     * {@link android.content.Context#stopService(android.content.Intent)} or their overloads).\n     * {@link android.app.Service#stopForeground(int)} will also work, which will demote the\n     * service to a \"background\" service, which will soon be stopped by the system.\n     *\n     * <p>If the service isn't stopped within the timeout,\n     * {@link android.app.Service#onTimeout(int, int)} will be called.\n     *\n     * <p>Also note, even though\n     * {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_DATA_SYNC} can be used on\n     * Android versions prior to {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}, since\n     * {@link android.app.Service#onTimeout(int, int)} did not exist on such versions, it will\n     * never be called.\n     *\n     * Because of this, developers must make sure to stop the foreground service even if\n     * {@link android.app.Service#onTimeout(int, int)} is not called on such versions.\n     *\n     * @see android.app.Service#onTimeout(int, int)\n     ",
    "links" : [ "android.app.Service#stopSelf()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.app.Service#onTimeout(int", "android.content.Context#stopService(android.content.Intent)", "android.app.Service#stopForeground(int)", "android.R.attr#foregroundServiceType", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_DATA_SYNC" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>mediaPlayback</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Music, video, news or other media playback.\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_MEDIA_PLAYBACK}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.R.attr#foregroundServiceType", "android.Manifest.permission#FOREGROUND_SERVICE_MEDIA_PLAYBACK" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_PHONE_CALL",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>phoneCall</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Ongoing operations related to phone calls, video conferencing,\n     * or similar interactive communication.\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_PHONE_CALL} and\n     * {@link android.Manifest.permission#MANAGE_OWN_CALLS} or holding the default\n     * {@link android.app.role.RoleManager#ROLE_DIALER dialer role}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.Manifest.permission#MANAGE_OWN_CALLS", "android.R.attr#foregroundServiceType", "android.Manifest.permission#FOREGROUND_SERVICE_PHONE_CALL", "android.app.role.RoleManager#ROLE_DIALER" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_LOCATION",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>location</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * GPS, map, navigation location update.\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_LOCATION} and one of the\n     * following permissions:\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION},\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     ",
    "links" : [ "android.Manifest.permission#FOREGROUND_SERVICE_LOCATION", "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>connectedDevice</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Auto, bluetooth, TV or other devices connection, monitoring and interaction.\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_CONNECTED_DEVICE} and one of the\n     * following permissions:\n     * {@link android.Manifest.permission#BLUETOOTH_ADVERTISE},\n     * {@link android.Manifest.permission#BLUETOOTH_CONNECT},\n     * {@link android.Manifest.permission#BLUETOOTH_SCAN},\n     * {@link android.Manifest.permission#CHANGE_NETWORK_STATE},\n     * {@link android.Manifest.permission#CHANGE_WIFI_STATE},\n     * {@link android.Manifest.permission#CHANGE_WIFI_MULTICAST_STATE},\n     * {@link android.Manifest.permission#NFC},\n     * {@link android.Manifest.permission#TRANSMIT_IR},\n     * {@link android.Manifest.permission#UWB_RANGING},\n     * or has been granted the access to one of the attached USB devices/accessories.\n     ",
    "links" : [ "android.Manifest.permission#CHANGE_WIFI_MULTICAST_STATE", "android.Manifest.permission#NFC", "android.Manifest.permission#BLUETOOTH_ADVERTISE", "android.Manifest.permission#UWB_RANGING", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.Manifest.permission#BLUETOOTH_CONNECT", "android.Manifest.permission#CHANGE_NETWORK_STATE", "android.Manifest.permission#BLUETOOTH_SCAN", "android.R.attr#foregroundServiceType", "android.Manifest.permission#FOREGROUND_SERVICE_CONNECTED_DEVICE", "android.Manifest.permission#TRANSMIT_IR", "android.Manifest.permission#CHANGE_WIFI_STATE" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code mediaProjection} in\n     * the {@link android.R.attr#foregroundServiceType foregroundServiceType} attribute.\n     *\n     * <p>\n     * To capture through {@link android.media.projection.MediaProjection}, an app must start a\n     * foreground service with the type corresponding to this constant. This type should only be\n     * used for {@link android.media.projection.MediaProjection}. Capturing screen contents via\n     * {@link android.media.projection.MediaProjection#createVirtualDisplay(String, int, int, int,\n     * int, android.view.Surface, android.hardware.display.VirtualDisplay.Callback,\n     * android.os.Handler) createVirtualDisplay} conveniently allows recording, presenting screen\n     * contents into a meeting, taking screenshots, or several other scenarios.\n     * </p>\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_MEDIA_PROJECTION}, and the user must\n     * have allowed the screen capture request from this app.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.media.projection.MediaProjection", "android.media.projection.MediaProjection#createVirtualDisplay(String", "android.R.attr#foregroundServiceType", "android.Manifest.permission#FOREGROUND_SERVICE_MEDIA_PROJECTION" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_CAMERA",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code camera} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Use the camera device or record video.\n     * For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R} and\n     * above, a foreground service will not be able to access the camera if this type is not\n     * specified in the manifest and in\n     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_CAMERA} and\n     * {@link android.Manifest.permission#CAMERA}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.app.Service#startForeground(int", "android.R.attr#foregroundServiceType", "android.Manifest.permission#CAMERA", "android.Manifest.permission#FOREGROUND_SERVICE_CAMERA" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MICROPHONE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code microphone} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Use the microphone device or record audio.\n     * For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R} and\n     * above, a foreground service will not be able to access the microphone if this type is not\n     * specified in the manifest and in\n     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.\n     *\n     * <p>Starting foreground service with this type from apps targeting API level\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and later, will require permission\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_MICROPHONE} and one of the following\n     * permissions:\n     * {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT},\n     * {@link android.Manifest.permission#RECORD_AUDIO}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.Manifest.permission#CAPTURE_AUDIO_OUTPUT", "android.Manifest.permission#FOREGROUND_SERVICE_MICROPHONE", "android.app.Service#startForeground(int", "android.R.attr#foregroundServiceType", "android.Manifest.permission#RECORD_AUDIO" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_HEALTH",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code health} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Health, wellness and fitness.\n     *\n     * <p>The caller app is required to have the permissions\n     * {@link android.Manifest.permission#FOREGROUND_SERVICE_HEALTH} and one of the following\n     * permissions:\n     * {@link android.Manifest.permission#ACTIVITY_RECOGNITION},\n     * {@link android.Manifest.permission#BODY_SENSORS},\n     * {@link android.Manifest.permission#HIGH_SAMPLING_RATE_SENSORS}.\n     ",
    "links" : [ "android.Manifest.permission#BODY_SENSORS", "android.Manifest.permission#FOREGROUND_SERVICE_HEALTH", "android.Manifest.permission#HIGH_SAMPLING_RATE_SENSORS", "android.R.attr#foregroundServiceType", "android.Manifest.permission#ACTIVITY_RECOGNITION" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_REMOTE_MESSAGING",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code remoteMessaging} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Messaging use cases which host local server to relay messages across devices.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code systemExempted} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * The system exempted foreground service use cases.\n     *\n     * <p class=\"note\">Note, apps are allowed to use this type only in the following cases:\n     * <ul>\n     *   <li>App has a UID &lt; {@link android.os.Process#FIRST_APPLICATION_UID}</li>\n     *   <li>App is on Doze allowlist</li>\n     *   <li>Device is running in <a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/packages/SystemUI/docs/demo_mode.md\">Demo Mode</a></li>\n     *   <li><a href=\"https://source.android.com/devices/tech/admin/provision\">Device owner app</a></li>\n     *   <li><a href=\"https://source.android.com/devices/tech/admin/managed-profiles\">Profile owner apps</a></li>\n     *   <li>Persistent apps</li>\n     *   <li><a href=\"https://source.android.com/docs/core/connect/carrier\">Carrier privileged apps</a></li>\n     *   <li>Apps that have the {@code android.app.role.RoleManager#ROLE_EMERGENCY} role</li>\n     *   <li>Headless system apps</li>\n     *   <li><a href=\"{@docRoot}guide/topics/admin/device-admin\">Device admin apps</a></li>\n     *   <li>Active VPN apps</li>\n     *   <li>Apps holding {@link android.Manifest.permission#SCHEDULE_EXACT_ALARM} or\n     *       {@link android.Manifest.permission#USE_EXACT_ALARM} permission.</li>\n     * </ul>\n     * </p>\n     ",
    "links" : [ "android.Manifest.permission#USE_EXACT_ALARM", "android.R.attr#foregroundServiceType", "android.os.Process#FIRST_APPLICATION_UID", "android.Manifest.permission#SCHEDULE_EXACT_ALARM" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_SHORT_SERVICE",
    "type" : "int",
    "comment" : "\n     * A foreground service type for \"short-lived\" services, which corresponds to\n     * {@code shortService} in the {@link android.R.attr#foregroundServiceType} attribute in the\n     * manifest.\n     *\n     * <p>Unlike other foreground service types, this type is not associated with a specific use\n     * case, and it will not require any special permissions\n     * (besides {@link android.Manifest.permission#FOREGROUND_SERVICE}).\n     *\n     * However, this type has the following restrictions.\n     *\n     * <ul>\n     *     <li>\n     *         The type has a 3 minute timeout.\n     *         A foreground service of this type must be stopped within the timeout by\n     *         {@link android.app.Service#stopSelf()},\n     *         {@link android.content.Context#stopService(android.content.Intent)}\n     *         or their overloads).\n     *         {@link android.app.Service#stopForeground(int)} will also work,\n     *         which will demote the\n     *         service to a \"background\" service, which will soon be stopped by the system.\n     *\n     *         <p>If the service isn't stopped within the timeout,\n     *         {@link android.app.Service#onTimeout(int)} will be called. Note, even when the\n     *         system calls this callback, it will not stop the service automatically.\n     *         You still need to stop the service using one of the aforementioned\n     *         ways even when you get this callback.\n     *\n     *         <p>If the service is still not stopped after the callback,\n     *         the app will be declared an ANR, after a short grace period of several seconds.\n     *     <li>\n     *         A foreground service of this type cannot be made \"sticky\"\n     *         (see {@link android.app.Service#START_STICKY}). That is, if an app is killed\n     *         due to a crash or out-of memory while it's running a short foregorund-service,\n     *         the system will not restart the service.\n     *     <li>\n     *         Other foreground services cannot be started from short foreground services.\n     *         Unlike other foreground service types, when an app is running in the background\n     *         while only having a \"short\" foreground service, it's not allowed to start\n     *         other foreground services, due to the restriction describe here:\n     *         <a href=\"/guide/components/foreground-services#background-start-restrictions>\n     *             Restrictions on background starts\n     *         </a>\n     *     <li>\n     *         You can combine multiple foreground services types with {@code |}s, and you can\n     *         combine\n     *         {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_SHORT_SERVICE}.\n     *         with other types as well.\n     *         However,\n     *         {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_SHORT_SERVICE}\n     *         is for situations\n     *         where you have no other valid foreground services to use and the timeout is long\n     *         enough for the task, and if you can use other types, there's no point using\n     *         this type.\n     *         For this reason, if\n     *         {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_SHORT_SERVICE}\n     *         is combined with other foreground service types, the system will simply ignore\n     *         it, and as a result,\n     *         none of the above restrictions will apply (e.g. there'll be no timeout).\n     * </ul>\n     *\n     * <p>Also note, even though\n     * {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_SHORT_SERVICE}\n     * was added\n     * on Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n     * it can be also used on\n     * on prior android versions (just like other new foreground service types can be used).\n     * However, because {@link android.app.Service#onTimeout(int)} did not exist on prior versions,\n     * it will never called on such versions.\n     * Because of this, developers must make sure to stop the foreground service even if\n     * {@link android.app.Service#onTimeout(int)} is not called on such versions.\n     *\n     * @see android.app.Service#onTimeout(int)\n     ",
    "links" : [ "android.app.Service#stopSelf()", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.content.Context#stopService(android.content.Intent)", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_SHORT_SERVICE", "android.app.Service#stopForeground(int)", "android.R.attr#foregroundServiceType", "android.app.Service#onTimeout(int)", "android.app.Service#START_STICKY", "android.Manifest.permission#FOREGROUND_SERVICE" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_FILE_MANAGEMENT",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code fileManagement} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * The file management use case which manages files/directories, often involving file I/O\n     * across the file system.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code mediaProcessing} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Media processing use cases such as video or photo editing and processing.\n     *\n     * This type has time limit of 6 hours.\n     * A foreground service of this type must be stopped within the timeout by\n     * {@link android.app.Service#stopSelf()},\n     * {@link android.content.Context#stopService(android.content.Intent)} or their overloads).\n     * {@link android.app.Service#stopForeground(int)} will also work, which will demote the\n     * service to a \"background\" service, which will soon be stopped by the system.\n     *\n     * <p>If the service isn't stopped within the timeout,\n     * {@link android.app.Service#onTimeout(int, int)} will be called.\n     *\n     * <p>Also note, even though\n     * {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING} was added in\n     * Android version {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}, it can be also used\n     * on prior android versions (just like other new foreground service types can be used).\n     * However, because {@link android.app.Service#onTimeout(int, int)} did not exist on prior\n     * versions, it will never be called on such versions.\n     * Because of this, developers must make sure to stop the foreground service even if\n     * {@link android.app.Service#onTimeout(int, int)} is not called on such versions.\n     *\n     * @see android.app.Service#onTimeout(int, int)\n     ",
    "links" : [ "android.app.Service#stopSelf()", "android.app.Service#onTimeout(int", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.content.Context#stopService(android.content.Intent)", "android.app.Service#stopForeground(int)", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING", "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_SPECIAL_USE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code specialUse} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Use cases that can't be categorized into any other foreground service types, but also\n     * can't use {@link android.app.job.JobInfo.Builder} APIs.\n     *\n     * <p>The use of this foreground service type may be restricted. Additionally, apps must declare\n     * a service-level {@link PackageManager#PROPERTY_SPECIAL_USE_FGS_SUBTYPE &lt;property&gt;} in\n     * {@code AndroidManifest.xml} as a hint of what the exact use case here is.\n     * Here is an example:\n     * <pre>\n     *  &lt;uses-permission\n     *      android:name=\"android.permission.FOREGROUND_SERVICE_SPECIAL_USE\"\n     *  /&gt;\n     *  &lt;service\n     *      android:name=\".MySpecialForegroundService\"\n     *      android:foregroundServiceType=\"specialUse\"&gt;\n     *      &lt;property\n     *          android:name=\"android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE\"\n     *          android:value=\"foo\"\n     *      /&gt;\n     * &lt;/service&gt;\n     * </pre>\n     *\n     * In a future release of Android, if the above foreground service type {@code foo} is supported\n     * by the platform, to offer the backward compatibility, the app could specify\n     * the {@code android:maxSdkVersion} attribute in the &lt;uses-permission&gt; section,\n     * and also add the foreground service type {@code foo} into\n     * the {@code android:foregroundServiceType}, therefore the same app could be installed\n     * in both platforms.\n     * <pre>\n     *  &lt;uses-permission\n     *      android:name=\"android.permission.FOREGROUND_SERVICE_SPECIAL_USE\"\n     *      android:maxSdkVersion=\"last_sdk_version_without_type_foo\"\n     *  /&gt;\n     *  &lt;service\n     *      android:name=\".MySpecialForegroundService\"\n     *      android:foregroundServiceType=\"specialUse|foo\"&gt;\n     *      &lt;property\n     *          android:name=\"android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE\"\n     *          android:value=\"foo\"\n     *      /&gt;\n     * &lt;/service&gt;\n     * </pre>\n     ",
    "links" : [ "android.content.pm.PackageManager#PROPERTY_SPECIAL_USE_FGS_SUBTYPE", "android.R.attr#foregroundServiceType", "android.app.job.JobInfo.Builder" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPES_MAX_INDEX",
    "type" : "int",
    "comment" : "\n     * The max index being used in the definition of foreground service types.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MANIFEST",
    "type" : "int",
    "comment" : "\n     * A special value indicates to use all types set in manifest file.\n     ",
    "links" : [ ]
  }, {
    "name" : "mForegroundServiceType",
    "type" : "int",
    "comment" : "\n     * The type of foreground service, set in\n     * {@link android.R.attr#foregroundServiceType} attribute by ORing flags in\n     * {@link ForegroundServiceType}\n     * @hide\n     ",
    "links" : [ "ForegroundServiceType", "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ServiceInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getForegroundServiceType()",
    "returnType" : "int",
    "comment" : "\n     * Return foreground service type specified in the manifest..\n     * @return foreground service type specified in the manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(Printer pw, String prefix, int dumpFlags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String foregroundServiceTypeToLabel(@ForegroundServiceType int type)",
    "returnType" : "String",
    "comment" : "\n     * @return The label for the given foreground service type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getForegroundServiceType()", "public void dump(Printer pw, String prefix)", " void dump(Printer pw, String prefix, int dumpFlags)", "public String toString()", "public static String foregroundServiceTypeToLabel(@ForegroundServiceType int type)", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)" ],
  "variableNames" : [ "permission", "FLAG_STOP_WITH_TASK", "FLAG_ISOLATED_PROCESS", "FLAG_EXTERNAL_SERVICE", "FLAG_USE_APP_ZYGOTE", "FLAG_ALLOW_SHARED_ISOLATED_PROCESS", "FLAG_VISIBLE_TO_INSTANT_APP", "FLAG_SYSTEM_USER_ONLY", "FLAG_SINGLE_USER", "flags", "FOREGROUND_SERVICE_TYPE_NONE", "FOREGROUND_SERVICE_TYPE_DATA_SYNC", "FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK", "FOREGROUND_SERVICE_TYPE_PHONE_CALL", "FOREGROUND_SERVICE_TYPE_LOCATION", "FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE", "FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION", "FOREGROUND_SERVICE_TYPE_CAMERA", "FOREGROUND_SERVICE_TYPE_MICROPHONE", "FOREGROUND_SERVICE_TYPE_HEALTH", "FOREGROUND_SERVICE_TYPE_REMOTE_MESSAGING", "FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED", "FOREGROUND_SERVICE_TYPE_SHORT_SERVICE", "FOREGROUND_SERVICE_TYPE_FILE_MANAGEMENT", "FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING", "FOREGROUND_SERVICE_TYPE_SPECIAL_USE", "FOREGROUND_SERVICE_TYPES_MAX_INDEX", "FOREGROUND_SERVICE_TYPE_MANIFEST", "mForegroundServiceType", "CREATOR" ]
}