{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Normalizer2.java",
  "packageName" : "android.icu.text",
  "className" : "Normalizer2",
  "comment" : "\n * Unicode normalization functionality for standard Unicode normalization or\n * for using custom mapping tables.\n * All instances of this class are unmodifiable/immutable.\n * The Normalizer2 class is not intended for public subclassing.\n * <p>\n * The primary functions are to produce a normalized string and to detect whether\n * a string is already normalized.\n * The most commonly used normalization forms are those defined in\n * https://www.unicode.org/reports/tr15/\n * However, this API supports additional normalization forms for specialized purposes.\n * For example, NFKC_Casefold is provided via getInstance(\"nfkc_cf\", COMPOSE)\n * and can be used in implementations of UTS #46.\n * <p>\n * Not only are the standard compose and decompose modes supplied,\n * but additional modes are provided as documented in the Mode enum.\n * <p>\n * Some of the functions in this class identify normalization boundaries.\n * At a normalization boundary, the portions of the string\n * before it and starting from it do not interact and can be handled independently.\n * <p>\n * The spanQuickCheckYes() stops at a normalization boundary.\n * When the goal is a normalized string, then the text before the boundary\n * can be copied, and the remainder can be processed with normalizeSecondAndAppend().\n * <p>\n * The hasBoundaryBefore(), hasBoundaryAfter() and isInert() functions test whether\n * a character is guaranteed to be at a normalization boundary,\n * regardless of context.\n * This is used for moving from one normalization boundary to the next\n * or preceding boundary, and for performing iterative normalization.\n * <p>\n * Iterative normalization is useful when only a small portion of a\n * longer string needs to be processed.\n * For example, in ICU, iterative normalization is used by the NormalizationTransliterator\n * (to avoid replacing already-normalized text) and ucol_nextSortKeyPart()\n * (to process only the substring for which sort key bytes are computed).\n * <p>\n * The set of normalization boundaries returned by these functions may not be\n * complete: There may be more boundaries that could be returned.\n * Different functions may return different boundaries.\n * @author Markus W. Scherer\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Normalizer2 getNFCInstance()",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance for Unicode NFC normalization.\n     * Same as getInstance(null, \"nfc\", Mode.COMPOSE).\n     * Returns an unmodifiable singleton instance.\n     * @return the requested Normalizer2, if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Normalizer2 getNFDInstance()",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance for Unicode NFD normalization.\n     * Same as getInstance(null, \"nfc\", Mode.DECOMPOSE).\n     * Returns an unmodifiable singleton instance.\n     * @return the requested Normalizer2, if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Normalizer2 getNFKCInstance()",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance for Unicode NFKC normalization.\n     * Same as getInstance(null, \"nfkc\", Mode.COMPOSE).\n     * Returns an unmodifiable singleton instance.\n     * @return the requested Normalizer2, if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Normalizer2 getNFKDInstance()",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance for Unicode NFKD normalization.\n     * Same as getInstance(null, \"nfkc\", Mode.DECOMPOSE).\n     * Returns an unmodifiable singleton instance.\n     * @return the requested Normalizer2, if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Normalizer2 getNFKCCasefoldInstance()",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance for Unicode toNFKC_Casefold() normalization\n     * which is equivalent to applying the NFKC_Casefold mappings and then NFC.\n     * See https://www.unicode.org/reports/tr44/#NFKC_Casefold\n     *\n     * <p>Same as getInstance(null, \"nfkc_cf\", Mode.COMPOSE).\n     * Returns an unmodifiable singleton instance.\n     * @return the requested Normalizer2, if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Normalizer2 getNFKCSimpleCasefoldInstance()",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance for a variant of Unicode toNFKC_Casefold() normalization\n     * which is equivalent to applying the NFKC_Simple_Casefold mappings and then NFC.\n     * See https://www.unicode.org/reports/tr44/#NFKC_Simple_Casefold\n     *\n     * <p>Same as getInstance(null, \"nfkc_scf\", Mode.COMPOSE).\n     * Returns an unmodifiable singleton instance.\n     * @return the requested Normalizer2, if successful\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Normalizer2 getInstance(InputStream data, String name, Mode mode)",
    "returnType" : "Normalizer2",
    "comment" : "\n     * Returns a Normalizer2 instance which uses the specified data file\n     * (an ICU data file if data=null, or else custom binary data)\n     * and which composes or decomposes text according to the specified mode.\n     * Returns an unmodifiable singleton instance.\n     * <ul>\n     * <li>Use data=null for data files that are part of ICU's own data.\n     * <li>Use name=\"nfc\" and COMPOSE/DECOMPOSE for Unicode standard NFC/NFD.\n     * <li>Use name=\"nfkc\" and COMPOSE/DECOMPOSE for Unicode standard NFKC/NFKD.\n     * <li>Use name=\"nfkc_cf\" and COMPOSE for Unicode standard NFKC_CF=NFKC_Casefold.\n     * </ul>\n     * If data!=null, then the binary data is read once and cached using the provided\n     * name as the key.\n     * If you know or expect the data to be cached already, you can use data!=null\n     * for non-ICU data as well.\n     * <p>Any {@link java.io.IOException} is wrapped into a {@link android.icu.util.ICUUncheckedIOException}.\n     * @param data the binary, big-endian normalization (.nrm file) data, or null for ICU data\n     * @param name \"nfc\" or \"nfkc\" or \"nfkc_cf\" or \"nfkc_scf\" or name of custom data file\n     * @param mode normalization mode (compose or decompose etc.)\n     * @return the requested Normalizer2, if successful\n     * @deprecated Don't use because the binary {@code data} format is not stable across API levels.\n     ",
    "links" : [ "android.icu.util.ICUUncheckedIOException", "java.io.IOException" ]
  }, {
    "name" : "public String normalize(CharSequence src)",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized form of the source string.\n     * @param src source string\n     * @return normalized src\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuilder normalize(CharSequence src, StringBuilder dest)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Writes the normalized form of the source string to the destination string\n     * (replacing its contents) and returns the destination string.\n     * The source and destination strings must be different objects.\n     * @param src source string\n     * @param dest destination string; its contents is replaced with normalized src\n     * @return dest\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Appendable normalize(CharSequence src, Appendable dest)",
    "returnType" : "Appendable",
    "comment" : "\n     * Writes the normalized form of the source string to the destination Appendable\n     * and returns the destination Appendable.\n     * The source and destination strings must be different objects.\n     *\n     * <p>Any {@link java.io.IOException} is wrapped into a {@link android.icu.util.ICUUncheckedIOException}.\n     *\n     * @param src source string\n     * @param dest destination Appendable; gets normalized src appended\n     * @return dest\n     ",
    "links" : [ "android.icu.util.ICUUncheckedIOException", "java.io.IOException" ]
  }, {
    "name" : "public abstract StringBuilder normalizeSecondAndAppend(StringBuilder first, CharSequence second)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Appends the normalized form of the second string to the first string\n     * (merging them at the boundary) and returns the first string.\n     * The result is normalized if the first string was normalized.\n     * The first and second strings must be different objects.\n     * @param first string, should be normalized\n     * @param second string, will be normalized\n     * @return first\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuilder append(StringBuilder first, CharSequence second)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Appends the second string to the first string\n     * (merging them at the boundary) and returns the first string.\n     * The result is normalized if both the strings were normalized.\n     * The first and second strings must be different objects.\n     * @param first string, should be normalized\n     * @param second string, should be normalized\n     * @return first\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getDecomposition(int c)",
    "returnType" : "String",
    "comment" : "\n     * Gets the decomposition mapping of c.\n     * Roughly equivalent to normalizing the String form of c\n     * on a DECOMPOSE Normalizer2 instance, but much faster, and except that this function\n     * returns null if c does not have a decomposition mapping in this instance's data.\n     * This function is independent of the mode of the Normalizer2.\n     * @param c code point\n     * @return c's decomposition mapping, if any; otherwise null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRawDecomposition(int c)",
    "returnType" : "String",
    "comment" : "\n     * Gets the raw decomposition mapping of c.\n     *\n     * <p>This is similar to the getDecomposition() method but returns the\n     * raw decomposition mapping as specified in UnicodeData.txt or\n     * (for custom data) in the mapping files processed by the gennorm2 tool.\n     * By contrast, getDecomposition() returns the processed,\n     * recursively-decomposed version of this mapping.\n     *\n     * <p>When used on a standard NFKC Normalizer2 instance,\n     * getRawDecomposition() returns the Unicode Decomposition_Mapping (dm) property.\n     *\n     * <p>When used on a standard NFC Normalizer2 instance,\n     * it returns the Decomposition_Mapping only if the Decomposition_Type (dt) is Canonical (Can);\n     * in this case, the result contains either one or two code points (=1..4 Java chars).\n     *\n     * <p>This function is independent of the mode of the Normalizer2.\n     * The default implementation returns null.\n     * @param c code point\n     * @return c's raw decomposition mapping, if any; otherwise null\n     ",
    "links" : [ ]
  }, {
    "name" : "public int composePair(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Performs pairwise composition of a &amp; b and returns the composite if there is one.\n     *\n     * <p>Returns a composite code point c only if c has a two-way mapping to a+b.\n     * In standard Unicode normalization, this means that\n     * c has a canonical decomposition to a+b\n     * and c does not have the Full_Composition_Exclusion property.\n     *\n     * <p>This function is independent of the mode of the Normalizer2.\n     * The default implementation returns a negative value.\n     * @param a A (normalization starter) code point.\n     * @param b Another code point.\n     * @return The non-negative composite code point if there is one; otherwise a negative value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCombiningClass(int c)",
    "returnType" : "int",
    "comment" : "\n     * Gets the combining class of c.\n     * The default implementation returns 0\n     * but all standard implementations return the Unicode Canonical_Combining_Class value.\n     * @param c code point\n     * @return c's combining class\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isNormalized(CharSequence s)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the string is normalized.\n     * Internally, in cases where the quickCheck() method would return \"maybe\"\n     * (which is only possible for the two COMPOSE modes) this method\n     * resolves to \"yes\" or \"no\" to provide a definitive result,\n     * at the cost of doing more work in those cases.\n     * @param s input string\n     * @return true if s is normalized\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Normalizer.QuickCheckResult quickCheck(CharSequence s)",
    "returnType" : "Normalizer.QuickCheckResult",
    "comment" : "\n     * Tests if the string is normalized.\n     * For the two COMPOSE modes, the result could be \"maybe\" in cases that\n     * would take a little more work to resolve definitively.\n     * Use spanQuickCheckYes() and normalizeSecondAndAppend() for a faster\n     * combination of quick check + normalization, to avoid\n     * re-checking the \"yes\" prefix.\n     * @param s input string\n     * @return the quick check result\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int spanQuickCheckYes(CharSequence s)",
    "returnType" : "int",
    "comment" : "\n     * Returns the end of the normalized substring of the input string.\n     * In other words, with <code>end=spanQuickCheckYes(s);</code>\n     * the substring <code>s.subSequence(0, end)</code>\n     * will pass the quick check with a \"yes\" result.\n     * <p>\n     * The returned end index is usually one or more characters before the\n     * \"no\" or \"maybe\" character: The end index is at a normalization boundary.\n     * (See the class documentation for more about normalization boundaries.)\n     * <p>\n     * When the goal is a normalized string and most input strings are expected\n     * to be normalized already, then call this method,\n     * and if it returns a prefix shorter than the input string,\n     * copy that prefix and use normalizeSecondAndAppend() for the remainder.\n     * @param s input string\n     * @return \"yes\" span end index\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasBoundaryBefore(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the character always has a normalization boundary before it,\n     * regardless of context.\n     * If true, then the character does not normalization-interact with\n     * preceding characters.\n     * In other words, a string containing this character can be normalized\n     * by processing portions before this character and starting from this\n     * character independently.\n     * This is used for iterative normalization. See the class documentation for details.\n     * @param c character to test\n     * @return true if c has a normalization boundary before it\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasBoundaryAfter(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the character always has a normalization boundary after it,\n     * regardless of context.\n     * If true, then the character does not normalization-interact with\n     * following characters.\n     * In other words, a string containing this character can be normalized\n     * by processing portions up to this character and after this\n     * character independently.\n     * This is used for iterative normalization. See the class documentation for details.\n     * <p>\n     * Note that this operation may be significantly slower than hasBoundaryBefore().\n     * @param c character to test\n     * @return true if c has a normalization boundary after it\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isInert(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the character is normalization-inert.\n     * If true, then the character does not change, nor normalization-interact with\n     * preceding or following characters.\n     * In other words, a string containing this character can be normalized\n     * by processing portions before this character and after this\n     * character independently.\n     * This is used for iterative normalization. See the class documentation for details.\n     * <p>\n     * Note that this operation may be significantly slower than hasBoundaryBefore().\n     * @param c character to test\n     * @return true if c is normalization-inert\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Normalizer2 getNFCInstance()", "public static Normalizer2 getNFDInstance()", "public static Normalizer2 getNFKCInstance()", "public static Normalizer2 getNFKDInstance()", "public static Normalizer2 getNFKCCasefoldInstance()", "public static Normalizer2 getNFKCSimpleCasefoldInstance()", "public static Normalizer2 getInstance(InputStream data, String name, Mode mode)", "public String normalize(CharSequence src)", "public abstract StringBuilder normalize(CharSequence src, StringBuilder dest)", "public abstract Appendable normalize(CharSequence src, Appendable dest)", "public abstract StringBuilder normalizeSecondAndAppend(StringBuilder first, CharSequence second)", "public abstract StringBuilder append(StringBuilder first, CharSequence second)", "public abstract String getDecomposition(int c)", "public String getRawDecomposition(int c)", "public int composePair(int a, int b)", "public int getCombiningClass(int c)", "public abstract boolean isNormalized(CharSequence s)", "public abstract Normalizer.QuickCheckResult quickCheck(CharSequence s)", "public abstract int spanQuickCheckYes(CharSequence s)", "public abstract boolean hasBoundaryBefore(int c)", "public abstract boolean hasBoundaryAfter(int c)", "public abstract boolean isInert(int c)" ],
  "variableNames" : [ ]
}