{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/CrossProcessCursor.java",
  "packageName" : "android.database",
  "className" : "CrossProcessCursor",
  "comment" : "\n * A cross process cursor is an extension of a {@link Cursor} that also supports\n * usage from remote processes.\n * <p>\n * The contents of a cross process cursor are marshalled to the remote process by\n * filling {@link CursorWindow} objects using {@link #fillWindow}.  As an optimization,\n * the cursor can provide a pre-filled window to use via {@link #getWindow} thereby\n * obviating the need to copy the data to yet another cursor window.\n ",
  "links" : [ "android.database.CursorWindow", "#getWindow", "android.database.Cursor", "#fillWindow" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " CursorWindow getWindow()",
    "returnType" : "CursorWindow",
    "comment" : "\n     * Returns a pre-filled window that contains the data within this cursor.\n     * <p>\n     * In particular, the window contains the row indicated by {@link Cursor#getPosition}.\n     * The window's contents are automatically scrolled whenever the current\n     * row moved outside the range covered by the window.\n     * </p>\n     *\n     * @return The pre-filled window, or null if none.\n     ",
    "links" : [ "android.database.Cursor#getPosition" ]
  }, {
    "name" : " void fillWindow(int position, CursorWindow window)",
    "returnType" : "void",
    "comment" : "\n     * Copies cursor data into the window.\n     * <p>\n     * Clears the window and fills it with data beginning at the requested\n     * row position until all of the data in the cursor is exhausted\n     * or the window runs out of space.\n     * </p><p>\n     * The filled window uses the same row indices as the original cursor.\n     * For example, if you fill a window starting from row 5 from the cursor,\n     * you can query the contents of row 5 from the window just by asking it\n     * for row 5 because there is a direct correspondence between the row indices\n     * used by the cursor and the window.\n     * </p><p>\n     * The current position of the cursor, as returned by {@link #getPosition},\n     * is not changed by this method.\n     * </p>\n     *\n     * @param position The zero-based index of the first row to copy into the window.\n     * @param window The window to fill.\n     ",
    "links" : [ "#getPosition" ]
  }, {
    "name" : " boolean onMove(int oldPosition, int newPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * This function is called every time the cursor is successfully scrolled\n     * to a new position, giving the subclass a chance to update any state it\n     * may have.  If it returns false the move function will also do so and the\n     * cursor will scroll to the beforeFirst position.\n     * <p>\n     * This function should be called by methods such as {@link #moveToPosition(int)},\n     * so it will typically not be called from outside of the cursor class itself.\n     * </p>\n     *\n     * @param oldPosition The position that we're moving from.\n     * @param newPosition The position that we're moving to.\n     * @return True if the move is successful, false otherwise.\n     ",
    "links" : [ "#moveToPosition(int)" ]
  } ],
  "methodNames" : [ " CursorWindow getWindow()", " void fillWindow(int position, CursorWindow window)", " boolean onMove(int oldPosition, int newPosition)" ],
  "variableNames" : [ ]
}