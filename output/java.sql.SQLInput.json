{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/SQLInput.java",
  "packageName" : "java.sql",
  "className" : "SQLInput",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String readString() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>String</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean readBoolean() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>boolean</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>false</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " byte readByte() throws SQLException",
    "returnType" : "byte",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>byte</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " short readShort() throws SQLException",
    "returnType" : "short",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>short</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " int readInt() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as an <code>int</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " long readLong() throws SQLException",
    "returnType" : "long",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>long</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " float readFloat() throws SQLException",
    "returnType" : "float",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>float</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " double readDouble() throws SQLException",
    "returnType" : "double",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>double</code>\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.math.BigDecimal readBigDecimal() throws SQLException",
    "returnType" : "java.math.BigDecimal",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>java.math.BigDecimal</code>\n     * object in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " byte[] readBytes() throws SQLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as an array of bytes\n     * in the Java programming language.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date readDate() throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>java.sql.Date</code> object.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time readTime() throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>java.sql.Time</code> object.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp readTimestamp() throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>java.sql.Timestamp</code> object.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader readCharacterStream() throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a stream of Unicode characters.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream readAsciiStream() throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a stream of ASCII characters.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream readBinaryStream() throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a stream of uninterpreted\n     * bytes.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Object readObject() throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Reads the datum at the head of the stream and returns it as an\n     * <code>Object</code> in the Java programming language.  The\n     * actual type of the object returned is determined by the default type\n     * mapping, and any customizations present in this stream's type map.\n     *\n     * <P>A type map is registered with the stream by the JDBC driver before the\n     * stream is passed to the application.\n     *\n     * <P>When the datum at the head of the stream is an SQL <code>NULL</code>,\n     * the method returns <code>null</code>.  If the datum is an SQL structured or distinct\n     * type, it determines the SQL type of the datum at the head of the stream.\n     * If the stream's type map has an entry for that SQL type, the driver\n     * constructs an object of the appropriate class and calls the method\n     * <code>SQLData.readSQL</code> on that object, which reads additional data from the\n     * stream, using the protocol described for that method.\n     *\n     * @return the datum at the head of the stream as an <code>Object</code> in the\n     * Java programming language;<code>null</code> if the datum is SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Ref readRef() throws SQLException",
    "returnType" : "Ref",
    "comment" : "\n     * Reads an SQL <code>REF</code> value from the stream and returns it as a\n     * <code>Ref</code> object in the Java programming language.\n     *\n     * @return a <code>Ref</code> object representing the SQL <code>REF</code> value\n     * at the head of the stream; <code>null</code> if the value read is\n     * SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Blob readBlob() throws SQLException",
    "returnType" : "Blob",
    "comment" : "\n     * Reads an SQL <code>BLOB</code> value from the stream and returns it as a\n     * <code>Blob</code> object in the Java programming language.\n     *\n     * @return a <code>Blob</code> object representing data of the SQL <code>BLOB</code> value\n     * at the head of the stream; <code>null</code> if the value read is\n     * SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Clob readClob() throws SQLException",
    "returnType" : "Clob",
    "comment" : "\n     * Reads an SQL <code>CLOB</code> value from the stream and returns it as a\n     * <code>Clob</code> object in the Java programming language.\n     *\n     * @return a <code>Clob</code> object representing data of the SQL <code>CLOB</code> value\n     * at the head of the stream; <code>null</code> if the value read is\n     * SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Array readArray() throws SQLException",
    "returnType" : "Array",
    "comment" : "\n     * Reads an SQL <code>ARRAY</code> value from the stream and returns it as an\n     * <code>Array</code> object in the Java programming language.\n     *\n     * @return an <code>Array</code> object representing data of the SQL\n     * <code>ARRAY</code> value at the head of the stream; <code>null</code>\n     * if the value read is SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean wasNull() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the last value read was SQL <code>NULL</code>.\n     *\n     * @return <code>true</code> if the most recently read SQL value was SQL\n     * <code>NULL</code>; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.net.URL readURL() throws SQLException",
    "returnType" : "java.net.URL",
    "comment" : "\n     * Reads an SQL <code>DATALINK</code> value from the stream and returns it as a\n     * <code>java.net.URL</code> object in the Java programming language.\n     *\n     * @return a <code>java.net.URL</code> object.\n     * @exception SQLException if a database access error occurs,\n     *            or if a URL is malformed\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " NClob readNClob() throws SQLException",
    "returnType" : "NClob",
    "comment" : "\n     * Reads an SQL <code>NCLOB</code> value from the stream and returns it as a\n     * <code>NClob</code> object in the Java programming language.\n     *\n     * @return a <code>NClob</code> object representing data of the SQL <code>NCLOB</code> value\n     * at the head of the stream; <code>null</code> if the value read is\n     * SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " String readNString() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Reads the next attribute in the stream and returns it as a <code>String</code>\n     * in the Java programming language. It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     *\n     * @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLXML readSQLXML() throws SQLException",
    "returnType" : "SQLXML",
    "comment" : "\n     * Reads an SQL <code>XML</code> value from the stream and returns it as a\n     * <code>SQLXML</code> object in the Java programming language.\n     *\n     * @return a <code>SQLXML</code> object representing data of the SQL <code>XML</code> value\n     * at the head of the stream; <code>null</code> if the value read is\n     * SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " RowId readRowId() throws SQLException",
    "returnType" : "RowId",
    "comment" : "\n     * Reads an SQL <code>ROWID</code> value from the stream and returns it as a\n     * <code>RowId</code> object in the Java programming language.\n     *\n     * @return a <code>RowId</code> object representing data of the SQL <code>ROWID</code> value\n     * at the head of the stream; <code>null</code> if the value read is\n     * SQL <code>NULL</code>\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " String readString() throws SQLException", " boolean readBoolean() throws SQLException", " byte readByte() throws SQLException", " short readShort() throws SQLException", " int readInt() throws SQLException", " long readLong() throws SQLException", " float readFloat() throws SQLException", " double readDouble() throws SQLException", " java.math.BigDecimal readBigDecimal() throws SQLException", " byte[] readBytes() throws SQLException", " java.sql.Date readDate() throws SQLException", " java.sql.Time readTime() throws SQLException", " java.sql.Timestamp readTimestamp() throws SQLException", " java.io.Reader readCharacterStream() throws SQLException", " java.io.InputStream readAsciiStream() throws SQLException", " java.io.InputStream readBinaryStream() throws SQLException", " Object readObject() throws SQLException", " Ref readRef() throws SQLException", " Blob readBlob() throws SQLException", " Clob readClob() throws SQLException", " Array readArray() throws SQLException", " boolean wasNull() throws SQLException", " java.net.URL readURL() throws SQLException", " NClob readNClob() throws SQLException", " String readNString() throws SQLException", " SQLXML readSQLXML() throws SQLException", " RowId readRowId() throws SQLException" ],
  "variableNames" : [ ]
}