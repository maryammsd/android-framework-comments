{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TransliteratorParser.java",
  "packageName" : "android.icu.text",
  "className" : "TransliteratorParser",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "dataVector",
    "type" : "List<Data>",
    "comment" : "\n     * PUBLIC data member.\n     * A Vector of RuleBasedTransliterator.Data objects, one for each discrete group\n     * of rules in the rule set\n     ",
    "links" : [ ]
  }, {
    "name" : "idBlockVector",
    "type" : "List<String>",
    "comment" : "\n     * PUBLIC data member.\n     * A Vector of Strings containing all of the ID blocks in the rule set\n     ",
    "links" : [ ]
  }, {
    "name" : "curData",
    "type" : "Data",
    "comment" : "\n     * The current data object for which we are parsing rules\n     ",
    "links" : [ ]
  }, {
    "name" : "compoundFilter",
    "type" : "UnicodeSet",
    "comment" : "\n     * PUBLIC data member containing the parsed compound filter, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "direction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parseData",
    "type" : "ParseData",
    "comment" : "\n     * Temporary symbol table used during parsing.\n     ",
    "links" : [ ]
  }, {
    "name" : "variablesVector",
    "type" : "List<Object>",
    "comment" : "\n     * Temporary vector of set variables.  When parsing is complete, this\n     * is copied into the array data.variables.  As with data.variables,\n     * element 0 corresponds to character data.variablesBase.\n     ",
    "links" : [ ]
  }, {
    "name" : "variableNames",
    "type" : "Map<String, char[]>",
    "comment" : "\n     * Temporary table of variable names.  When parsing is complete, this is\n     * copied into data.variableNames.\n     ",
    "links" : [ ]
  }, {
    "name" : "segmentStandins",
    "type" : "StringBuffer",
    "comment" : "\n     * String of standins for segments.  Used during the parsing of a single\n     * rule.  segmentStandins.charAt(0) is the standin for \"$1\" and corresponds\n     * to StringMatcher object segmentObjects.elementAt(0), etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "segmentObjects",
    "type" : "List<StringMatcher>",
    "comment" : "\n     * Vector of StringMatcher objects for segments.  Used during the\n     * parsing of a single rule.\n     * segmentStandins.charAt(0) is the standin for \"$1\" and corresponds\n     * to StringMatcher object segmentObjects.elementAt(0), etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "variableNext",
    "type" : "char",
    "comment" : "\n     * The next available stand-in for variables.  This starts at some point in\n     * the private use area (discovered dynamically) and increments up toward\n     * <code>variableLimit</code>.  At any point during parsing, available\n     * variables are <code>variableNext..variableLimit-1</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "variableLimit",
    "type" : "char",
    "comment" : "\n     * The last available stand-in for variables.  This is discovered\n     * dynamically.  At any point during parsing, available variables are\n     * <code>variableNext..variableLimit-1</code>.  During variable definition\n     * we use the special value variableLimit-1 as a placeholder.\n     ",
    "links" : [ ]
  }, {
    "name" : "undefinedVariableName",
    "type" : "String",
    "comment" : "\n     * When we encounter an undefined variable, we do not immediately signal\n     * an error, in case we are defining this variable, e.g., \"$a = [a-z];\".\n     * Instead, we save the name of the undefined variable, and substitute\n     * in the placeholder char variableLimit - 1, and decrement\n     * variableLimit.\n     ",
    "links" : [ ]
  }, {
    "name" : "dotStandIn",
    "type" : "int",
    "comment" : "\n     * The stand-in character for the 'dot' set, represented by '.' in\n     * patterns.  This is allocated the first time it is needed, and\n     * reused thereafter.\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_TOKEN",
    "type" : "String",
    "comment" : " Indicator for ID blocks",
    "links" : [ ]
  }, {
    "name" : "ID_TOKEN_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIABLE_DEF_OP",
    "type" : "char",
    "comment" : " Operators",
    "links" : [ ]
  }, {
    "name" : "FORWARD_RULE_OP",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REVERSE_RULE_OP",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FWDREV_RULE_OP",
    "type" : "char",
    "comment" : " internal rep of <> op",
    "links" : [ ]
  }, {
    "name" : "OPERATORS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HALF_ENDERS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUOTE",
    "type" : "char",
    "comment" : " Other special characters",
    "links" : [ ]
  }, {
    "name" : "ESCAPE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_OF_RULE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_COMMENT_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_ANTE",
    "type" : "char",
    "comment" : " ante{key",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_POST",
    "type" : "char",
    "comment" : " key}post",
    "links" : [ ]
  }, {
    "name" : "CURSOR_POS",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURSOR_OFFSET",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANCHOR_START",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KLEENE_STAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ONE_OR_MORE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZERO_OR_ONE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOT_SET",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEGMENT_OPEN",
    "type" : "char",
    "comment" : " output string these segments are referenced as \"$1\", \"$2\", etc.",
    "links" : [ ]
  }, {
    "name" : "SEGMENT_CLOSE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FUNCTION",
    "type" : "char",
    "comment" : " A function is denoted &Source-Target/Variant(text)",
    "links" : [ ]
  }, {
    "name" : "ALT_REVERSE_RULE_OP",
    "type" : "char",
    "comment" : " Left Arrow",
    "links" : [ ]
  }, {
    "name" : "ALT_FORWARD_RULE_OP",
    "type" : "char",
    "comment" : " Right Arrow",
    "links" : [ ]
  }, {
    "name" : "ALT_FWDREV_RULE_OP",
    "type" : "char",
    "comment" : " Left Right Arrow",
    "links" : [ ]
  }, {
    "name" : "ALT_FUNCTION",
    "type" : "char",
    "comment" : " Increment (~Greek Capital Delta)",
    "links" : [ ]
  }, {
    "name" : "ILLEGAL_TOP",
    "type" : "UnicodeSet",
    "comment" : " Special characters disallowed at the top level",
    "links" : [ ]
  }, {
    "name" : "ILLEGAL_SEG",
    "type" : "UnicodeSet",
    "comment" : " Special characters disallowed within a segment",
    "links" : [ ]
  }, {
    "name" : "ILLEGAL_FUNC",
    "type" : "UnicodeSet",
    "comment" : " Special characters disallowed within a function argument",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void parse(String rules, int dir)",
    "returnType" : "void",
    "comment" : "\n     * Parse a set of rules.  After the parse completes, examine the public\n     * data members for results.\n     ",
    "links" : [ ]
  }, {
    "name" : " void parseRules(RuleBody ruleArray, int dir)",
    "returnType" : "void",
    "comment" : "\n     * Parse an array of zero or more rules.  The strings in the array are\n     * treated as if they were concatenated together, with rule terminators\n     * inserted between array elements if not present already.\n     *\n     * Any previous rules are discarded.  Typically this method is called exactly\n     * once, during construction.\n     *\n     * The member this.data will be set to null if there are no rules.\n     *\n     * @exception IllegalIcuArgumentException if there is a syntax error in the\n     * rules\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseRule(String rule, int pos, int limit)",
    "returnType" : "int",
    "comment" : "\n     * MAIN PARSER.  Parse the next rule in the given rule string, starting\n     * at pos.  Return the index after the last character parsed.  Do not\n     * parse characters at or after limit.\n     *\n     * Important:  The character at pos must be a non-whitespace character\n     * that is not the comment character.\n     *\n     * This method handles quoting, escaping, and whitespace removal.  It\n     * parses the end-of-rule character.  It recognizes context and cursor\n     * indicators.  Once it does a lexical breakdown of the rule at pos, it\n     * creates a rule object and adds it to our rule list.\n     *\n     * This method is tightly coupled to the inner class RuleHalf.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setVariableRange(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Set the variable range to [start, end] (inclusive).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkVariableRange(int ch, String rule, int start)",
    "returnType" : "void",
    "comment" : "\n     * Assert that the given character is NOT within the variable range.\n     * If it is, signal an error.  This is necessary to ensure that the\n     * variable range does not overlap characters used in a rule.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void pragmaMaximumBackup(int backup)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum backup to 'backup', in response to a pragma\n     * statement.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void pragmaNormalizeRules(Normalizer.Mode mode)",
    "returnType" : "void",
    "comment" : "\n     * Begin normalizing all rules using the given mode, in response\n     * to a pragma statement.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean resemblesPragma(String rule, int pos, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the given rule looks like a pragma.\n     * @param pos offset to the first non-whitespace character\n     * of the rule.\n     * @param limit pointer past the last character of the rule.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parsePragma(String rule, int pos, int limit)",
    "returnType" : "int",
    "comment" : "\n     * Parse a pragma.  This method assumes resemblesPragma() has\n     * already returned true.\n     * @param pos offset to the first non-whitespace character\n     * of the rule.\n     * @param limit pointer past the last character of the rule.\n     * @return the position index after the final ';' of the pragma,\n     * or -1 on failure.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final void syntaxError(String msg, String rule, int start)",
    "returnType" : "void",
    "comment" : "\n     * Throw an exception indicating a syntax error.  Search the rule string\n     * for the probable end of the rule.  Of course, if the error is that\n     * the end of rule marker is missing, then the rule end will not be found.\n     * In any case the rule start will be correctly reported.\n     * @param msg error description\n     * @param rule pattern string\n     * @param start position of first character of current rule\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int ruleEnd(String rule, int start, int limit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final char parseSet(String rule, ParsePosition pos)",
    "returnType" : "char",
    "comment" : "\n     * Parse a UnicodeSet out, store it, and return the stand-in character\n     * used to represent it.\n     ",
    "links" : [ ]
  }, {
    "name" : " char generateStandInFor(Object obj)",
    "returnType" : "char",
    "comment" : "\n     * Generate and return a stand-in for a new UnicodeMatcher or UnicodeReplacer.\n     * Store the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getSegmentStandin(int seg)",
    "returnType" : "char",
    "comment" : "\n     * Return the standin for segment seg (1-based).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSegmentObject(int seg, StringMatcher obj)",
    "returnType" : "void",
    "comment" : "\n     * Set the object for segment seg (1-based).\n     ",
    "links" : [ ]
  }, {
    "name" : " char getDotStandIn()",
    "returnType" : "char",
    "comment" : "\n     * Return the stand-in for the dot set.  It is allocated the first\n     * time and reused thereafter.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void appendVariableDef(String name, StringBuffer buf)",
    "returnType" : "void",
    "comment" : "\n     * Append the value of the given variable name to the given\n     * StringBuffer.\n     * @exception IllegalIcuArgumentException if the name is unknown.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void parse(String rules, int dir)", " void parseRules(RuleBody ruleArray, int dir)", "private int parseRule(String rule, int pos, int limit)", "private void setVariableRange(int start, int end)", "private void checkVariableRange(int ch, String rule, int start)", "private void pragmaMaximumBackup(int backup)", "private void pragmaNormalizeRules(Normalizer.Mode mode)", " static boolean resemblesPragma(String rule, int pos, int limit)", "private int parsePragma(String rule, int pos, int limit)", " static final void syntaxError(String msg, String rule, int start)", " static final int ruleEnd(String rule, int start, int limit)", "private final char parseSet(String rule, ParsePosition pos)", " char generateStandInFor(Object obj)", "public char getSegmentStandin(int seg)", "public void setSegmentObject(int seg, StringMatcher obj)", " char getDotStandIn()", "private void appendVariableDef(String name, StringBuffer buf)" ],
  "variableNames" : [ "dataVector", "idBlockVector", "curData", "compoundFilter", "direction", "parseData", "variablesVector", "variableNames", "segmentStandins", "segmentObjects", "variableNext", "variableLimit", "undefinedVariableName", "dotStandIn", "ID_TOKEN", "ID_TOKEN_LEN", "VARIABLE_DEF_OP", "FORWARD_RULE_OP", "REVERSE_RULE_OP", "FWDREV_RULE_OP", "OPERATORS", "HALF_ENDERS", "QUOTE", "ESCAPE", "END_OF_RULE", "RULE_COMMENT_CHAR", "CONTEXT_ANTE", "CONTEXT_POST", "CURSOR_POS", "CURSOR_OFFSET", "ANCHOR_START", "KLEENE_STAR", "ONE_OR_MORE", "ZERO_OR_ONE", "DOT", "DOT_SET", "SEGMENT_OPEN", "SEGMENT_CLOSE", "FUNCTION", "ALT_REVERSE_RULE_OP", "ALT_FORWARD_RULE_OP", "ALT_FWDREV_RULE_OP", "ALT_FUNCTION", "ILLEGAL_TOP", "ILLEGAL_SEG", "ILLEGAL_FUNC" ]
}