{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/filterpacks/videosrc/SurfaceTextureSource.java",
  "packageName" : "android.filterpacks.videosrc",
  "className" : "SurfaceTextureSource",
  "comment" : " <p>A filter that converts textures from a SurfaceTexture object into frames for\n * processing in the filter framework.</p>\n *\n * <p>To use, connect up the sourceListener callback, and then when executing\n * the graph, use the SurfaceTexture object passed to the callback to feed\n * frames into the filter graph. For example, pass the SurfaceTexture into\n * {@link\n * android.hardware.Camera.setPreviewTexture(android.graphics.SurfaceTexture)}.\n * This filter is intended for applications that need for flexibility than the\n * CameraSource and MediaSource provide. Note that the application needs to\n * provide width and height information for the SurfaceTextureSource, which it\n * should obtain from wherever the SurfaceTexture data is coming from to avoid\n * unnecessary resampling.</p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mSourceListener",
    "type" : "SurfaceTextureSourceListener",
    "comment" : " A callback to send the internal SurfaceTexture object to, once it is\n     * created. This callback will be called when the the filter graph is\n     * preparing to execute, but before any processing has actually taken\n     * place. The SurfaceTexture object passed to this callback is the only way\n     * to feed this filter. When the filter graph is shutting down, this\n     * callback will be called again with null as the source.\n     *\n     * This callback may be called from an arbitrary thread, so it should not\n     * assume it is running in the UI thread in particular.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : " The width of the output image frame. If the texture width for the\n     * SurfaceTexture source is known, use it here to minimize resampling. ",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : " The height of the output image frame. If the texture height for the\n     * SurfaceTexture source is known, use it here to minimize resampling. ",
    "links" : [ ]
  }, {
    "name" : "mWaitForNewFrame",
    "type" : "boolean",
    "comment" : " Whether the filter will always wait for a new frame from its\n     * SurfaceTexture, or whether it will output an old frame again if a new\n     * frame isn't available. The filter will always wait for the first frame,\n     * to avoid outputting a blank frame. Defaults to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWaitTimeout",
    "type" : "int",
    "comment" : " Maximum timeout before signaling error when waiting for a new frame. Set\n     * this to zero to disable the timeout and wait indefinitely. In milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCloseOnTimeout",
    "type" : "boolean",
    "comment" : " Whether a timeout is an exception-causing failure, or just causes the\n     * filter to close.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMediaFrame",
    "type" : "GLFrame",
    "comment" : " Variables for input->output conversion",
    "links" : [ ]
  }, {
    "name" : "mFrameExtractor",
    "type" : "ShaderProgram",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceTexture",
    "type" : "SurfaceTexture",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputFormat",
    "type" : "MutableFrameFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNewFrameAvailable",
    "type" : "ConditionVariable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFirstFrame",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameTransform",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMappedCoords",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceCoords",
    "type" : "float[]",
    "comment" : " for converting from MFF/Bitmap origin to OpenGL origin.",
    "links" : [ ]
  }, {
    "name" : "mRenderShader",
    "type" : "String",
    "comment" : " Shader for output",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogVerbose",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "onFrameAvailableListener",
    "type" : "SurfaceTexture.OnFrameAvailableListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setupPorts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createFormats()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void prepare(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void open(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void process(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fieldPortValueUpdated(String name, FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSourceListener", "mWidth", "mHeight", "mWaitForNewFrame", "mWaitTimeout", "mCloseOnTimeout", "mMediaFrame", "mFrameExtractor", "mSurfaceTexture", "mOutputFormat", "mNewFrameAvailable", "mFirstFrame", "mFrameTransform", "mMappedCoords", "mSourceCoords", "mRenderShader", "TAG", "mLogVerbose", "onFrameAvailableListener" ],
  "methodNames" : [ "public void setupPorts()", "private void createFormats()", "protected void prepare(FilterContext context)", "public void open(FilterContext context)", "public void process(FilterContext context)", "public void close(FilterContext context)", "public void tearDown(FilterContext context)", "public void fieldPortValueUpdated(String name, FilterContext context)" ]
}