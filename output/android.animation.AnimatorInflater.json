{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/AnimatorInflater.java",
  "packageName" : "android.animation",
  "className" : "AnimatorInflater",
  "comment" : "\n * This class is used to instantiate animator XML files into Animator objects.\n * <p>\n * For performance reasons, inflation relies heavily on pre-processing of\n * XML files that is done at build time. Therefore, it is not currently possible\n * to use this inflater with an XmlPullParser over a plain XML file at runtime;\n * it only works with an XmlPullParser returned from a compiled resource (R.\n * <em>something</em> file.)\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOGETHER",
    "type" : "int",
    "comment" : "\n     * These flags are used when parsing AnimatorSet objects\n     ",
    "links" : [ ]
  }, {
    "name" : "SEQUENTIALLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_TYPE_FLOAT",
    "type" : "int",
    "comment" : "\n     * Enum values used in XML attributes to indicate the value for mValueType\n     ",
    "links" : [ ]
  }, {
    "name" : "VALUE_TYPE_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_TYPE_PATH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_TYPE_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_TYPE_UNDEFINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG_ANIMATOR_INFLATER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTmpTypedValue",
    "type" : "TypedValue",
    "comment" : " used to calculate changing configs for resource references",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Animator loadAnimator(Context context, @AnimatorRes int id) throws NotFoundException",
    "returnType" : "Animator",
    "comment" : "\n     * Loads an {@link Animator} object from a resource\n     *\n     * @param context Application context used to access resources\n     * @param id The resource id of the animation to load\n     * @return The animator object reference by the specified id\n     * @throws android.content.res.Resources.NotFoundException when the animation cannot be loaded\n     ",
    "links" : [ "android.animation.Animator" ]
  }, {
    "name" : "public static Animator loadAnimator(Resources resources, Theme theme, int id) throws NotFoundException",
    "returnType" : "Animator",
    "comment" : "\n     * Loads an {@link Animator} object from a resource\n     *\n     * @param resources The resources\n     * @param theme The theme\n     * @param id The resource id of the animation to load\n     * @return The animator object reference by the specified id\n     * @throws android.content.res.Resources.NotFoundException when the animation cannot be loaded\n     * @hide\n     ",
    "links" : [ "android.animation.Animator" ]
  }, {
    "name" : "public static Animator loadAnimator(Resources resources, Theme theme, int id, float pathErrorScale) throws NotFoundException",
    "returnType" : "Animator",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static StateListAnimator loadStateListAnimator(Context context, int id) throws NotFoundException",
    "returnType" : "StateListAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static StateListAnimator createStateListAnimatorFromXml(Context context, XmlPullParser parser, AttributeSet attributeSet) throws IOException, XmlPullParserException",
    "returnType" : "StateListAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PropertyValuesHolder getPVH(TypedArray styledAttributes, int valueType, int valueFromId, int valueToId, String propertyName)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void parseAnimatorFromTypeArray(ValueAnimator anim, TypedArray arrayAnimator, TypedArray arrayObjectAnimator, float pixelSize)",
    "returnType" : "void",
    "comment" : "\n     * @param anim The animator, must not be null\n     * @param arrayAnimator Incoming typed array for Animator's attributes.\n     * @param arrayObjectAnimator Incoming typed array for Object Animator's\n     *            attributes.\n     * @param pixelSize The relative pixel size, used to calculate the\n     *                  maximum error for path animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TypeEvaluator setupAnimatorForPath(ValueAnimator anim, TypedArray arrayAnimator)",
    "returnType" : "TypeEvaluator",
    "comment" : "\n     * Setup the Animator to achieve path morphing.\n     *\n     * @param anim The target Animator which will be updated.\n     * @param arrayAnimator TypedArray for the ValueAnimator.\n     * @return the PathDataEvaluator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setupObjectAnimator(ValueAnimator anim, TypedArray arrayObjectAnimator, int valueType, float pixelSize)",
    "returnType" : "void",
    "comment" : "\n     * Setup ObjectAnimator's property or values from pathData.\n     *\n     * @param anim The target Animator which will be updated.\n     * @param arrayObjectAnimator TypedArray for the ObjectAnimator.\n     * @param getFloats True if the value type is float.\n     * @param pixelSize The relative pixel size, used to calculate the\n     *                  maximum error for path animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setupValues(ValueAnimator anim, TypedArray arrayAnimator, boolean getFloats, boolean hasFrom, int fromType, boolean hasTo, int toType)",
    "returnType" : "void",
    "comment" : "\n     * Setup ValueAnimator's values.\n     * This will handle all of the integer, float and color types.\n     *\n     * @param anim The target Animator which will be updated.\n     * @param arrayAnimator TypedArray for the ValueAnimator.\n     * @param getFloats True if the value type is float.\n     * @param hasFrom True if \"valueFrom\" exists.\n     * @param fromType The type of \"valueFrom\".\n     * @param hasTo True if \"valueTo\" exists.\n     * @param toType The type of \"valueTo\".\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Animator createAnimatorFromXml(Resources res, Theme theme, XmlPullParser parser, float pixelSize) throws XmlPullParserException, IOException",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Animator createAnimatorFromXml(Resources res, Theme theme, XmlPullParser parser, AttributeSet attrs, AnimatorSet parent, int sequenceOrdering, float pixelSize) throws XmlPullParserException, IOException",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PropertyValuesHolder[] loadValues(Resources res, Theme theme, XmlPullParser parser, AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "PropertyValuesHolder[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int inferValueTypeOfKeyframe(Resources res, Theme theme, AttributeSet attrs)",
    "returnType" : "int",
    "comment" : " Otherwise, default float type is returned.",
    "links" : [ ]
  }, {
    "name" : "private static int inferValueTypeFromValues(TypedArray styledAttributes, int valueFromId, int valueToId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpKeyframes(Object[] keyframes, String header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PropertyValuesHolder loadPvh(Resources res, Theme theme, XmlPullParser parser, String propertyName, int valueType) throws XmlPullParserException, IOException",
    "returnType" : "PropertyValuesHolder",
    "comment" : " Load property values holder if there are keyframes defined in it. Otherwise return null.",
    "links" : [ ]
  }, {
    "name" : "private static Keyframe createNewKeyframe(Keyframe sampleKeyframe, float fraction)",
    "returnType" : "Keyframe",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void distributeKeyframes(Keyframe[] keyframes, float gap, int startIndex, int endIndex)",
    "returnType" : "void",
    "comment" : "\n     * Utility function to set fractions on keyframes to cover a gap in which the\n     * fractions are not currently set. Keyframe fractions will be distributed evenly\n     * in this gap. For example, a gap of 1 keyframe in the range 0-1 will be at .5, a gap\n     * of .6 spread between two keyframes will be at .2 and .4 beyond the fraction at the\n     * keyframe before startIndex.\n     * Assumptions:\n     * - First and last keyframe fractions (bounding this spread) are already set. So,\n     * for example, if no fractions are set, we will already set first and last keyframe\n     * fraction values to 0 and 1.\n     * - startIndex must be >0 (which follows from first assumption).\n     * - endIndex must be >= startIndex.\n     *\n     * @param keyframes the array of keyframes\n     * @param gap The total gap we need to distribute\n     * @param startIndex The index of the first keyframe whose fraction must be set\n     * @param endIndex The index of the last keyframe whose fraction must be set\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Keyframe loadKeyframe(Resources res, Theme theme, AttributeSet attrs, int valueType) throws XmlPullParserException, IOException",
    "returnType" : "Keyframe",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ObjectAnimator loadObjectAnimator(Resources res, Theme theme, AttributeSet attrs, float pathErrorScale) throws NotFoundException",
    "returnType" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ValueAnimator loadAnimator(Resources res, Theme theme, AttributeSet attrs, ValueAnimator anim, float pathErrorScale) throws NotFoundException",
    "returnType" : "ValueAnimator",
    "comment" : "\n     * Creates a new animation whose parameters come from the specified context\n     * and attributes set.\n     *\n     * @param res The resources\n     * @param attrs The set of attributes holding the animation parameters\n     * @param anim Null if this is a ValueAnimator, otherwise this is an\n     *            ObjectAnimator\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getChangingConfigs(@NonNull Resources resources, @AnyRes int id)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isColorType(int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TOGETHER", "SEQUENTIALLY", "VALUE_TYPE_FLOAT", "VALUE_TYPE_INT", "VALUE_TYPE_PATH", "VALUE_TYPE_COLOR", "VALUE_TYPE_UNDEFINED", "DBG_ANIMATOR_INFLATER", "sTmpTypedValue" ],
  "methodNames" : [ "public static Animator loadAnimator(Context context, @AnimatorRes int id) throws NotFoundException", "public static Animator loadAnimator(Resources resources, Theme theme, int id) throws NotFoundException", "public static Animator loadAnimator(Resources resources, Theme theme, int id, float pathErrorScale) throws NotFoundException", "public static StateListAnimator loadStateListAnimator(Context context, int id) throws NotFoundException", "private static StateListAnimator createStateListAnimatorFromXml(Context context, XmlPullParser parser, AttributeSet attributeSet) throws IOException, XmlPullParserException", "private static PropertyValuesHolder getPVH(TypedArray styledAttributes, int valueType, int valueFromId, int valueToId, String propertyName)", "private static void parseAnimatorFromTypeArray(ValueAnimator anim, TypedArray arrayAnimator, TypedArray arrayObjectAnimator, float pixelSize)", "private static TypeEvaluator setupAnimatorForPath(ValueAnimator anim, TypedArray arrayAnimator)", "private static void setupObjectAnimator(ValueAnimator anim, TypedArray arrayObjectAnimator, int valueType, float pixelSize)", "private static void setupValues(ValueAnimator anim, TypedArray arrayAnimator, boolean getFloats, boolean hasFrom, int fromType, boolean hasTo, int toType)", "private static Animator createAnimatorFromXml(Resources res, Theme theme, XmlPullParser parser, float pixelSize) throws XmlPullParserException, IOException", "private static Animator createAnimatorFromXml(Resources res, Theme theme, XmlPullParser parser, AttributeSet attrs, AnimatorSet parent, int sequenceOrdering, float pixelSize) throws XmlPullParserException, IOException", "private static PropertyValuesHolder[] loadValues(Resources res, Theme theme, XmlPullParser parser, AttributeSet attrs) throws XmlPullParserException, IOException", "private static int inferValueTypeOfKeyframe(Resources res, Theme theme, AttributeSet attrs)", "private static int inferValueTypeFromValues(TypedArray styledAttributes, int valueFromId, int valueToId)", "private static void dumpKeyframes(Object[] keyframes, String header)", "private static PropertyValuesHolder loadPvh(Resources res, Theme theme, XmlPullParser parser, String propertyName, int valueType) throws XmlPullParserException, IOException", "private static Keyframe createNewKeyframe(Keyframe sampleKeyframe, float fraction)", "private static void distributeKeyframes(Keyframe[] keyframes, float gap, int startIndex, int endIndex)", "private static Keyframe loadKeyframe(Resources res, Theme theme, AttributeSet attrs, int valueType) throws XmlPullParserException, IOException", "private static ObjectAnimator loadObjectAnimator(Resources res, Theme theme, AttributeSet attrs, float pathErrorScale) throws NotFoundException", "private static ValueAnimator loadAnimator(Resources res, Theme theme, AttributeSet attrs, ValueAnimator anim, float pathErrorScale) throws NotFoundException", "private static int getChangingConfigs(@NonNull Resources resources, @AnyRes int id)", "private static boolean isColorType(int type)" ]
}