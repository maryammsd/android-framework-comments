{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/VolumeShaper.java",
  "packageName" : "android.media",
  "className" : "Configuration",
  "comment" : "\n     * The {@code VolumeShaper.Configuration} class contains curve\n     * and duration information.\n     * It is constructed by the {@link VolumeShaper.Configuration.Builder}.\n     * <p>\n     * A {@code VolumeShaper.Configuration} is used by\n     * {@link VolumeAutomation#createVolumeShaper(Configuration)\n     * VolumeAutomation.createVolumeShaper(Configuration)} to create\n     * a {@code VolumeShaper} and\n     * by {@link VolumeShaper#replace(Configuration, Operation, boolean)\n     * VolumeShaper.replace(Configuration, Operation, boolean)}\n     * to replace an existing {@code configuration}.\n     * <p>\n     * The {@link AudioTrack} and {@link MediaPlayer} classes implement\n     * the {@link VolumeAutomation} interface.\n     ",
  "links" : [ "android.media.VolumeAutomation#createVolumeShaper(Configuration)", "android.media.VolumeAutomation", "android.media.VolumeShaper#replace(Configuration", "android.media.MediaPlayer", "android.media.AudioTrack", "VolumeShaper.Configuration.Builder" ],
  "variables" : [ {
    "name" : "MAXIMUM_CURVE_POINTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_ID",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCALE",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "INTERPOLATOR_TYPE_STEP",
    "type" : "int",
    "comment" : "\n         * Stepwise volume curve.\n         ",
    "links" : [ ]
  }, {
    "name" : "INTERPOLATOR_TYPE_LINEAR",
    "type" : "int",
    "comment" : "\n         * Linear interpolated volume curve.\n         ",
    "links" : [ ]
  }, {
    "name" : "INTERPOLATOR_TYPE_CUBIC",
    "type" : "int",
    "comment" : "\n         * Cubic interpolated volume curve.\n         * This is default if unspecified.\n         ",
    "links" : [ ]
  }, {
    "name" : "INTERPOLATOR_TYPE_CUBIC_MONOTONIC",
    "type" : "int",
    "comment" : "\n         * Cubic interpolated volume curve\n         * that preserves local monotonicity.\n         * So long as the control points are locally monotonic,\n         * the curve interpolation between those points are monotonic.\n         * This is useful for cubic spline interpolated\n         * volume ramps and ducks.\n         ",
    "links" : [ ]
  }, {
    "name" : "OPTION_FLAG_VOLUME_IN_DBFS",
    "type" : "int",
    "comment" : "\n         * @hide\n         * Use a dB full scale volume range for the volume curve.\n         *<p>\n         * The volume scale is typically from 0.f to 1.f on a linear scale;\n         * this option changes to -inf to 0.f on a db full scale,\n         * where 0.f is equivalent to a scale of 1.f.\n         ",
    "links" : [ ]
  }, {
    "name" : "OPTION_FLAG_CLOCK_TIME",
    "type" : "int",
    "comment" : "\n         * @hide\n         * Use clock time instead of media time.\n         *<p>\n         * The default implementation of {@code VolumeShaper} is to apply\n         * volume changes by the media time of the player.\n         * Hence, the {@code VolumeShaper} will speed or slow down to\n         * match player changes of playback rate, pause, or resume.\n         *<p>\n         * The {@code OPTION_FLAG_CLOCK_TIME} option allows the {@code VolumeShaper}\n         * progress to be determined by clock time instead of media time.\n         ",
    "links" : [ ]
  }, {
    "name" : "OPTION_FLAG_PUBLIC_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINEAR_RAMP",
    "type" : "Configuration",
    "comment" : "\n         * A one second linear ramp from silence to full volume.\n         * Use {@link VolumeShaper.Builder#reflectTimes()}\n         * or {@link VolumeShaper.Builder#invertVolumes()} to generate\n         * the matching linear duck.\n         ",
    "links" : [ "VolumeShaper.Builder#reflectTimes()", "VolumeShaper.Builder#invertVolumes()" ]
  }, {
    "name" : "CUBIC_RAMP",
    "type" : "Configuration",
    "comment" : "\n         * A one second cubic ramp from silence to full volume.\n         * Use {@link VolumeShaper.Builder#reflectTimes()}\n         * or {@link VolumeShaper.Builder#invertVolumes()} to generate\n         * the matching cubic duck.\n         ",
    "links" : [ "VolumeShaper.Builder#reflectTimes()", "VolumeShaper.Builder#invertVolumes()" ]
  }, {
    "name" : "SINE_RAMP",
    "type" : "Configuration",
    "comment" : "\n         * A one second sine curve\n         * from silence to full volume for energy preserving cross fades.\n         * Use {@link VolumeShaper.Builder#reflectTimes()} to generate\n         * the matching cosine duck.\n         ",
    "links" : [ "VolumeShaper.Builder#reflectTimes()" ]
  }, {
    "name" : "SCURVE_RAMP",
    "type" : "Configuration",
    "comment" : "\n         * A one second sine-squared s-curve ramp\n         * from silence to full volume.\n         * Use {@link VolumeShaper.Builder#reflectTimes()}\n         * or {@link VolumeShaper.Builder#invertVolumes()} to generate\n         * the matching sine-squared s-curve duck.\n         ",
    "links" : [ "VolumeShaper.Builder#reflectTimes()", "VolumeShaper.Builder#invertVolumes()" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : " type of VolumeShaper",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : " valid when mType is TYPE_ID",
    "links" : [ ]
  }, {
    "name" : "mOptionFlags",
    "type" : "int",
    "comment" : " valid when mType is TYPE_SCALE",
    "links" : [ ]
  }, {
    "name" : "mDurationMs",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolatorType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimes",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumes",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VolumeShaper.Configuration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getMaximumCurvePoints()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum number of curve points allowed for\n         * {@link VolumeShaper.Builder#setCurve(float[], float[])}.\n         ",
    "links" : [ "VolumeShaper.Builder#setCurve(float" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VolumeShaperConfiguration toParcelable()",
    "returnType" : "VolumeShaperConfiguration",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private InterpolatorConfig toInterpolatorParcelable()",
    "returnType" : "InterpolatorConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Configuration fromParcelable(VolumeShaperConfiguration parcelable)",
    "returnType" : "Configuration",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static int interpolatorTypeFromAidl(@android.media.InterpolatorType int aidl)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int interpolatorTypeToAidl(@InterpolatorType int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int typeFromAidl(@android.media.VolumeShaperConfigurationType int aidl)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int typeToAidl(@Type int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int optionFlagsFromAidl(int aidl)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int optionFlagsToAidl(int flags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n         * @hide\n         * Returns the {@code VolumeShaper} type.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n         * @hide\n         * Returns the {@code VolumeShaper} id.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getInterpolatorType()",
    "returnType" : "int",
    "comment" : "\n         * Returns the interpolator type.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getOptionFlags()",
    "returnType" : "int",
    "comment" : "\n         * @hide\n         * Returns the option flags\n         ",
    "links" : [ ]
  }, {
    "name" : " int getAllOptionFlags()",
    "returnType" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public long getDuration()",
    "returnType" : "long",
    "comment" : "\n         * Returns the duration of the volume shape in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float[] getTimes()",
    "returnType" : "float[]",
    "comment" : "\n         * Returns the times (x) coordinate array of the volume curve points.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float[] getVolumes()",
    "returnType" : "float[]",
    "comment" : "\n         * Returns the volumes (y) coordinate array of the volume curve points.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static String checkCurveForErrors(@Nullable float[] times, @Nullable float[] volumes, boolean log)",
    "returnType" : "String",
    "comment" : "\n         * Checks the validity of times and volumes point representation.\n         *\n         * {@code times[]} and {@code volumes[]} are two arrays representing points\n         * for the volume curve.\n         *\n         * Note that {@code times[]} and {@code volumes[]} are explicitly checked against\n         * null here to provide the proper error string - those are legitimate\n         * arguments to this method.\n         *\n         * @param times the x coordinates for the points,\n         *        must be between 0.f and 1.f and be monotonic.\n         * @param volumes the y coordinates for the points,\n         *        must be between 0.f and 1.f for linear and\n         *        must be no greater than 0.f for log (dBFS).\n         * @param log set to true if the scale is logarithmic.\n         * @return null if no error, or the reason in a {@code String} for an error.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void checkCurveForErrorsAndThrowException(@Nullable float[] times, @Nullable float[] volumes, boolean log, boolean ise)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidVolumeAndThrowException(float volume, boolean log)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void clampVolume(float[] volumes, boolean log)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getMaximumCurvePoints()", "public String toString()", "public int hashCode()", "public boolean equals(Object o)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public VolumeShaperConfiguration toParcelable()", "private InterpolatorConfig toInterpolatorParcelable()", "public static Configuration fromParcelable(VolumeShaperConfiguration parcelable)", "private static int interpolatorTypeFromAidl(@android.media.InterpolatorType int aidl)", "private static int interpolatorTypeToAidl(@InterpolatorType int type)", "private static int typeFromAidl(@android.media.VolumeShaperConfigurationType int aidl)", "private static int typeToAidl(@Type int type)", "private static int optionFlagsFromAidl(int aidl)", "private static int optionFlagsToAidl(int flags)", "public int getType()", "public int getId()", "public int getInterpolatorType()", "public int getOptionFlags()", " int getAllOptionFlags()", "public long getDuration()", "public float[] getTimes()", "public float[] getVolumes()", "private static String checkCurveForErrors(@Nullable float[] times, @Nullable float[] volumes, boolean log)", "private static void checkCurveForErrorsAndThrowException(@Nullable float[] times, @Nullable float[] volumes, boolean log, boolean ise)", "private static void checkValidVolumeAndThrowException(float volume, boolean log)", "private static void clampVolume(float[] volumes, boolean log)" ],
  "variableNames" : [ "MAXIMUM_CURVE_POINTS", "TYPE_ID", "TYPE_SCALE", "INTERPOLATOR_TYPE_STEP", "INTERPOLATOR_TYPE_LINEAR", "INTERPOLATOR_TYPE_CUBIC", "INTERPOLATOR_TYPE_CUBIC_MONOTONIC", "OPTION_FLAG_VOLUME_IN_DBFS", "OPTION_FLAG_CLOCK_TIME", "OPTION_FLAG_PUBLIC_ALL", "LINEAR_RAMP", "CUBIC_RAMP", "SINE_RAMP", "SCURVE_RAMP", "mType", "mId", "mOptionFlags", "mDurationMs", "mInterpolatorType", "mTimes", "mVolumes", "CREATOR" ]
}