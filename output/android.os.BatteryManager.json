{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/BatteryManager.java",
  "packageName" : "android.os",
  "className" : "BatteryManager",
  "comment" : "\n * The BatteryManager class contains strings and constants used for values\n * in the {@link android.content.Intent#ACTION_BATTERY_CHANGED} Intent, and\n * provides a method for querying battery and charging properties.\n ",
  "variables" : [ {
    "name" : "EXTRA_STATUS",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the current status constant.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_HEALTH",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the current health constant.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_PRESENT",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * boolean indicating whether a battery is present.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_LEVEL",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer field containing the current battery level, from 0 to\n     * {@link #EXTRA_SCALE}.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED", "#EXTRA_SCALE" ]
  }, {
    "name" : "EXTRA_BATTERY_LOW",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * Boolean field indicating whether the battery is currently considered to be\n     * low, that is whether a {@link Intent#ACTION_BATTERY_LOW} broadcast\n     * has been sent.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED", "android.content.Intent#ACTION_BATTERY_LOW" ]
  }, {
    "name" : "EXTRA_SCALE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the maximum battery level.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_ICON_SMALL",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the resource ID of a small status bar icon\n     * indicating the current battery state.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_PLUGGED",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer indicating whether the device is plugged in to a power\n     * source; 0 means it is on battery, other constants are different\n     * types of power sources.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_VOLTAGE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the current battery voltage level.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_TEMPERATURE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the current battery temperature.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_TECHNOLOGY",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * String describing the technology of the current battery.\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_INVALID_CHARGER",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * Int value set to nonzero if an unsupported charger is attached\n     * to the device.\n     * {@hide}\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_MAX_CHARGING_CURRENT",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * Int value set to the maximum charging current supported by the charger in micro amperes.\n     * {@hide}\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_MAX_CHARGING_VOLTAGE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * Int value set to the maximum charging voltage supported by the charger in micro volts.\n     * {@hide}\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_CHARGE_COUNTER",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * integer containing the charge counter present in the battery.\n     * {@hide}\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_SEQUENCE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:\n     * Current int sequence number of the update.\n     * {@hide}\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_CHANGED" ]
  }, {
    "name" : "EXTRA_EVENTS",
    "type" : "String",
    "comment" : "\n     * Extra for {@link android.content.Intent#ACTION_BATTERY_LEVEL_CHANGED}:\n     * Contains list of Bundles representing battery events\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_LEVEL_CHANGED" ]
  }, {
    "name" : "EXTRA_EVENT_TIMESTAMP",
    "type" : "String",
    "comment" : "\n     * Extra for event in {@link android.content.Intent#ACTION_BATTERY_LEVEL_CHANGED}:\n     * Long value representing time when event occurred as returned by\n     * {@link android.os.SystemClock#elapsedRealtime()}\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_BATTERY_LEVEL_CHANGED", "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "BATTERY_STATUS_UNKNOWN",
    "type" : "int",
    "comment" : " values for \"status\" field in the ACTION_BATTERY_CHANGED Intent",
    "links" : [ ]
  }, {
    "name" : "BATTERY_STATUS_CHARGING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_STATUS_DISCHARGING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_STATUS_NOT_CHARGING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_STATUS_FULL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_UNKNOWN",
    "type" : "int",
    "comment" : " values for \"health\" field in the ACTION_BATTERY_CHANGED Intent",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_GOOD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_OVERHEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_DEAD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_OVER_VOLTAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_UNSPECIFIED_FAILURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_HEALTH_COLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PLUGGED_AC",
    "type" : "int",
    "comment" : " = 1",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PLUGGED_USB",
    "type" : "int",
    "comment" : " = 2",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PLUGGED_WIRELESS",
    "type" : "int",
    "comment" : " = 4",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PLUGGED_ANY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHARGING",
    "type" : "String",
    "comment" : "\n     * Sent when the device's battery has started charging (or has reached full charge\n     * and the device is on power).  This is a good time to do work that you would like to\n     * avoid doing while on battery (that is to avoid draining the user's battery due to\n     * things they don't care enough about).\n     *\n     * This is paired with {@link #ACTION_DISCHARGING}.  The current state can always\n     * be retrieved with {@link #isCharging()}.\n     ",
    "links" : [ "#isCharging()", "#ACTION_DISCHARGING" ]
  }, {
    "name" : "ACTION_DISCHARGING",
    "type" : "String",
    "comment" : "\n     * Sent when the device's battery may be discharging, so apps should avoid doing\n     * extraneous work that would cause it to discharge faster.\n     *\n     * This is paired with {@link #ACTION_CHARGING}.  The current state can always\n     * be retrieved with {@link #isCharging()}.\n     ",
    "links" : [ "#isCharging()", "#ACTION_CHARGING" ]
  }, {
    "name" : "BATTERY_PROPERTY_CHARGE_COUNTER",
    "type" : "int",
    "comment" : " Battery capacity in microampere-hours, as an integer. ",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PROPERTY_CURRENT_NOW",
    "type" : "int",
    "comment" : "\n     * Instantaneous battery current in microamperes, as an integer.  Positive\n     * values indicate net current entering the battery from a charge source,\n     * negative values indicate net current discharging from the battery.\n     ",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PROPERTY_CURRENT_AVERAGE",
    "type" : "int",
    "comment" : "\n     * Average battery current in microamperes, as an integer.  Positive\n     * values indicate net current entering the battery from a charge source,\n     * negative values indicate net current discharging from the battery.\n     * The time period over which the average is computed may depend on the\n     * fuel gauge hardware and its configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PROPERTY_CAPACITY",
    "type" : "int",
    "comment" : "\n     * Remaining battery capacity as an integer percentage of total capacity\n     * (with no fractional part).\n     ",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PROPERTY_ENERGY_COUNTER",
    "type" : "int",
    "comment" : "\n     * Battery remaining energy in nanowatt-hours, as a long integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "BATTERY_PROPERTY_STATUS",
    "type" : "int",
    "comment" : "\n     * Battery charge status, from a BATTERY_STATUS_* value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryStats",
    "type" : "IBatteryStats",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryPropertiesRegistrar",
    "type" : "IBatteryPropertiesRegistrar",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isCharging()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the battery is currently considered to be charging.  This means that\n     * the device is plugged in and is supplying sufficient power that the battery level is\n     * going up (or the battery is fully charged).  Changes in this state are matched by\n     * broadcasts of {@link #ACTION_CHARGING} and {@link #ACTION_DISCHARGING}.\n     ",
    "links" : [ "#ACTION_CHARGING", "#ACTION_DISCHARGING" ]
  }, {
    "name" : "private long queryProperty(int id)",
    "returnType" : "long",
    "comment" : "\n     * Query a battery property from the batteryproperties service.\n     *\n     * Returns the requested value, or Long.MIN_VALUE if property not\n     * supported on this system or on other error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntProperty(int id)",
    "returnType" : "int",
    "comment" : "\n     * Return the value of a battery property of integer type.\n     *\n     * @param id identifier of the requested property\n     *\n     * @return the property value. If the property is not supported or there is any other error,\n     *    return (a) 0 if {@code targetSdkVersion < VERSION_CODES.P} or (b) Integer.MIN_VALUE\n     *    if {@code targetSdkVersion >= VERSION_CODES.P}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLongProperty(int id)",
    "returnType" : "long",
    "comment" : "\n     * Return the value of a battery property of long type If the\n     * platform does not provide the property queried, this value will\n     * be Long.MIN_VALUE.\n     *\n     * @param id identifier of the requested property\n     *\n     * @return the property value, or Long.MIN_VALUE if not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPlugWired(int plugType)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the plugType given is wired\n     * @param plugType {@link #BATTERY_PLUGGED_AC}, {@link #BATTERY_PLUGGED_USB},\n     *        or {@link #BATTERY_PLUGGED_WIRELESS}\n     *\n     * @return true if plugType is wired\n     * @hide\n     ",
    "links" : [ "#BATTERY_PLUGGED_AC", "#BATTERY_PLUGGED_USB", "#BATTERY_PLUGGED_WIRELESS" ]
  }, {
    "name" : "public long computeChargeTimeRemaining()",
    "returnType" : "long",
    "comment" : "\n     * Compute an approximation for how much time (in milliseconds) remains until the battery is\n     * fully charged. Returns -1 if no time can be computed: either there is not enough current\n     * data to make a decision or the battery is currently discharging.\n     *\n     * @return how much time is left, in milliseconds, until the battery is fully charged or -1 if\n     *         the computation fails\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setChargingStateUpdateDelayMillis(int delayMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the delay for reporting battery state as charging after device is plugged in.\n     * This allows machine-learning or heuristics to delay the reporting and the corresponding\n     * broadcast, based on battery level, charging rate, and/or other parameters.\n     *\n     * @param delayMillis the delay in milliseconds, negative value to reset.\n     *\n     * @return True if the delay was set successfully.\n     *\n     * @see ACTION_CHARGING\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "EXTRA_STATUS", "EXTRA_HEALTH", "EXTRA_PRESENT", "EXTRA_LEVEL", "EXTRA_BATTERY_LOW", "EXTRA_SCALE", "EXTRA_ICON_SMALL", "EXTRA_PLUGGED", "EXTRA_VOLTAGE", "EXTRA_TEMPERATURE", "EXTRA_TECHNOLOGY", "EXTRA_INVALID_CHARGER", "EXTRA_MAX_CHARGING_CURRENT", "EXTRA_MAX_CHARGING_VOLTAGE", "EXTRA_CHARGE_COUNTER", "EXTRA_SEQUENCE", "EXTRA_EVENTS", "EXTRA_EVENT_TIMESTAMP", "BATTERY_STATUS_UNKNOWN", "BATTERY_STATUS_CHARGING", "BATTERY_STATUS_DISCHARGING", "BATTERY_STATUS_NOT_CHARGING", "BATTERY_STATUS_FULL", "BATTERY_HEALTH_UNKNOWN", "BATTERY_HEALTH_GOOD", "BATTERY_HEALTH_OVERHEAT", "BATTERY_HEALTH_DEAD", "BATTERY_HEALTH_OVER_VOLTAGE", "BATTERY_HEALTH_UNSPECIFIED_FAILURE", "BATTERY_HEALTH_COLD", "BATTERY_PLUGGED_AC", "BATTERY_PLUGGED_USB", "BATTERY_PLUGGED_WIRELESS", "BATTERY_PLUGGED_ANY", "ACTION_CHARGING", "ACTION_DISCHARGING", "BATTERY_PROPERTY_CHARGE_COUNTER", "BATTERY_PROPERTY_CURRENT_NOW", "BATTERY_PROPERTY_CURRENT_AVERAGE", "BATTERY_PROPERTY_CAPACITY", "BATTERY_PROPERTY_ENERGY_COUNTER", "BATTERY_PROPERTY_STATUS", "mContext", "mBatteryStats", "mBatteryPropertiesRegistrar" ],
  "methodNames" : [ "public boolean isCharging()", "private long queryProperty(int id)", "public int getIntProperty(int id)", "public long getLongProperty(int id)", "public static boolean isPlugWired(int plugType)", "public long computeChargeTimeRemaining()", "public boolean setChargingStateUpdateDelayMillis(int delayMillis)" ]
}