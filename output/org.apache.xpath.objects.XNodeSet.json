{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/objects/XNodeSet.java",
  "packageName" : "org.apache.xpath.objects",
  "className" : "XNodeSet",
  "comment" : "\n * This class represents an XPath nodeset object, and is capable of\n * converting the nodeset to other types, such as a string.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_LT",
    "type" : "LessThanComparator",
    "comment" : " Less than comparator         ",
    "links" : [ ]
  }, {
    "name" : "S_LTE",
    "type" : "LessThanOrEqualComparator",
    "comment" : " Less than or equal comparator          ",
    "links" : [ ]
  }, {
    "name" : "S_GT",
    "type" : "GreaterThanComparator",
    "comment" : " Greater than comparator         ",
    "links" : [ ]
  }, {
    "name" : "S_GTE",
    "type" : "GreaterThanOrEqualComparator",
    "comment" : " Greater than or equal comparator          ",
    "links" : [ ]
  }, {
    "name" : "S_EQ",
    "type" : "EqualComparator",
    "comment" : " Equal comparator         ",
    "links" : [ ]
  }, {
    "name" : "S_NEQ",
    "type" : "NotEqualComparator",
    "comment" : " Not equal comparator         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n   * Tell that this is a CLASS_NODESET.\n   *\n   * @return type CLASS_NODESET\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getTypeString()",
    "returnType" : "String",
    "comment" : "\n   * Given a request type, return the equivalent string.\n   * For diagnostic purposes.\n   *\n   * @return type string \"#NODESET\"\n   ",
    "links" : [ ]
  }, {
    "name" : "public double getNumberFromNode(int n)",
    "returnType" : "double",
    "comment" : "\n   * Get numeric value of the string conversion from a single node.\n   *\n   * @param n Node to convert\n   *\n   * @return numeric value of the string conversion from a single node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public double num()",
    "returnType" : "double",
    "comment" : "\n   * Cast result object to a number.\n   *\n   * @return numeric value of the string conversion from the \n   * next node in the NodeSetDTM, or NAN if no node was found\n   ",
    "links" : [ ]
  }, {
    "name" : "public double numWithSideEffects()",
    "returnType" : "double",
    "comment" : "\n   * Cast result object to a number, but allow side effects, such as the \n   * incrementing of an iterator.\n   *\n   * @return numeric value of the string conversion from the \n   * next node in the NodeSetDTM, or NAN if no node was found\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean bool()",
    "returnType" : "boolean",
    "comment" : "\n   * Cast result object to a boolean.\n   *\n   * @return True if there is a next node in the nodeset\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean boolWithSideEffects()",
    "returnType" : "boolean",
    "comment" : "\n   * Cast result object to a boolean, but allow side effects, such as the \n   * incrementing of an iterator.\n   *\n   * @return True if there is a next node in the nodeset\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString getStringFromNode(int n)",
    "returnType" : "XMLString",
    "comment" : "\n   * Get the string conversion from a single node.\n   *\n   * @param n Node to convert\n   *\n   * @return the string conversion from a single node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * characters method on the passed ContentHandler for the\n   * string-value. Multiple calls to the\n   * ContentHandler's characters methods may well occur for a single call to\n   * this method.\n   *\n   * @param ch A non-null reference to a ContentHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString xstr()",
    "returnType" : "XMLString",
    "comment" : "\n   * Cast result object to an XMLString.\n   *\n   * @return The document fragment node data or the empty string. \n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)",
    "returnType" : "void",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String str()",
    "returnType" : "String",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return the string conversion from the next node in the nodeset\n   * or \"\" if there is no next node\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object object()",
    "returnType" : "Object",
    "comment" : "\n   * Return a java object that's closest to the representation\n   * that should be handed to an extension.\n   *\n   * @return The object that this class wraps\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeIterator nodeset() throws javax.xml.transform.TransformerException",
    "returnType" : "NodeIterator",
    "comment" : "\n   * Cast result object to a nodelist.\n   *\n   * @return a NodeIterator.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList nodelist() throws javax.xml.transform.TransformerException",
    "returnType" : "NodeList",
    "comment" : "\n   * Cast result object to a nodelist.\n   *\n   * @return a NodeList.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator iterRaw()",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Return the iterator without cloning, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void release(DTMIterator iter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator iter()",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Cast result object to a nodelist.\n   *\n   * @return The nodeset as a nodelist\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getFresh()",
    "returnType" : "XObject",
    "comment" : "\n   * Get a fresh copy of the object.  For use with variables.\n   *\n   * @return A fresh nodelist.\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeSetDTM mutableNodeset()",
    "returnType" : "NodeSetDTM",
    "comment" : "\n   * Cast result object to a mutableNodeset.\n   *\n   * @return The nodeset as a mutableNodeset\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean compare(XObject obj2, Comparator comparator) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than the other.\n   *\n   * @param obj2 Object to compare this nodeset to\n   * @param comparator Comparator to use\n   *\n   * @return See the comments below for each object type comparison \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than the other.\n   *\n   * @param obj2 object to compare this nodeset to\n   *\n   * @return see this.compare(...) \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than or equal to the other.\n   *\n   * @param obj2 object to compare this nodeset to\n   *\n   * @return see this.compare(...) \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than the other.\n   *\n   * @param obj2 object to compare this nodeset to\n   *\n   * @return see this.compare(...) \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than the other.\n   *\n   * @param obj2 object to compare this nodeset to\n   *\n   * @return see this.compare(...) \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(XObject obj2)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are functionally equal.\n   *\n   * @param obj2 object to compare this nodeset to\n   *\n   * @return see this.compare(...) \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are functionally not equal.\n   *\n   * @param obj2 object to compare this nodeset to\n   *\n   * @return see this.compare(...) \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getType()", "public String getTypeString()", "public double getNumberFromNode(int n)", "public double num()", "public double numWithSideEffects()", "public boolean bool()", "public boolean boolWithSideEffects()", "public XMLString getStringFromNode(int n)", "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException", "public XMLString xstr()", "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)", "public String str()", "public Object object()", "public NodeIterator nodeset() throws javax.xml.transform.TransformerException", "public NodeList nodelist() throws javax.xml.transform.TransformerException", "public DTMIterator iterRaw()", "public void release(DTMIterator iter)", "public DTMIterator iter()", "public XObject getFresh()", "public NodeSetDTM mutableNodeset()", "public boolean compare(XObject obj2, Comparator comparator) throws javax.xml.transform.TransformerException", "public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean equals(XObject obj2)", "public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException" ],
  "variableNames" : [ "serialVersionUID", "S_LT", "S_LTE", "S_GT", "S_GTE", "S_EQ", "S_NEQ" ]
}